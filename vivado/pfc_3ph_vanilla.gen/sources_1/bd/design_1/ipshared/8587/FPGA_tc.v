// -------------------------------------------------------------
// 
// File Name: verilog_1\hdlsrc\gm_pfcvan3ph_s\FPGA_tc.v
// Created: 2024-12-08 17:13:30
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FPGA_tc
// Source Path: FPGA_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_200_0 : 200x slower than clk with last phase
// enb_1_200_1 : 200x slower than clk with phase 1
// enb_1_400_0 : 400x slower than clk with last phase
// enb_1_400_1 : 400x slower than clk with phase 1
// enb_1_2000_1: 2000x slower than clk with phase 1
// enb_1_6000_0: 6000x slower than clk with last phase
// enb_1_6000_1: 6000x slower than clk with phase 1
// enb_1_12000_0: 12000x slower than clk with last phase
// enb_1_12000_1: 12000x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FPGA_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_200_0,
           enb_1_200_1,
           enb_1_400_0,
           enb_1_400_1,
           enb_1_2000_1,
           enb_1_6000_0,
           enb_1_6000_1,
           enb_1_12000_0,
           enb_1_12000_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_200_0;
  output  enb_1_200_1;
  output  enb_1_400_0;
  output  enb_1_400_1;
  output  enb_1_2000_1;
  output  enb_1_6000_0;
  output  enb_1_6000_1;
  output  enb_1_12000_0;
  output  enb_1_12000_1;


  reg [7:0] count200;  // ufix8
  wire comp_0_tmp;
  wire phase_0_tmp;
  reg  phase_0;
  wire enb_1_200_0_1;
  wire comp_1_tmp;
  wire phase_1_tmp;
  reg  phase_1;
  wire enb_1_200_1_1;
  reg [8:0] count400;  // ufix9
  wire comp_0_tmp_1;
  wire phase_0_tmp_1;
  reg  phase_0_1;
  wire enb_1_400_0_1;
  wire comp_1_tmp_1;
  wire phase_1_tmp_1;
  reg  phase_1_1;
  wire enb_1_400_1_1;
  reg [10:0] count2000;  // ufix11
  wire comp_1_tmp_2;
  wire phase_1_tmp_2;
  reg  phase_1_2;
  wire enb_1_2000_1_1;
  reg [12:0] count6000;  // ufix13
  wire comp_0_tmp_2;
  wire phase_0_tmp_2;
  reg  phase_0_2;
  wire enb_1_6000_0_1;
  wire comp_1_tmp_3;
  wire phase_1_tmp_3;
  reg  phase_1_3;
  wire enb_1_6000_1_1;
  reg [13:0] count12000;  // ufix14
  wire comp_0_tmp_3;
  wire phase_0_tmp_3;
  reg  phase_0_3;
  wire enb_1_12000_0_1;
  wire comp_1_tmp_4;
  wire phase_1_tmp_4;
  reg  phase_1_4;
  wire enb_1_12000_1_1;


  assign enb = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 199
  always @(posedge clk or posedge reset)
    begin : counter_200_process
      if (reset == 1'b1) begin
        count200 <= 8'b00000001;
      end
      else begin
        if (clk_enable) begin
          if (count200 >= 8'b11000111) begin
            count200 <= 8'b00000000;
          end
          else begin
            count200 <= count200 + 8'b00000001;
          end
        end
      end
    end

  assign comp_0_tmp = count200 == 8'b11000111;

  assign phase_0_tmp = comp_0_tmp & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_process
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end

  assign enb_1_200_0_1 = phase_0 & clk_enable;

  assign enb_1_200_0 = enb_1_200_0_1;

  assign comp_1_tmp = count200 == 8'b00000000;

  assign phase_1_tmp = comp_1_tmp & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_1_process
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end

  assign enb_1_200_1_1 = phase_1 & clk_enable;

  assign enb_1_200_1 = enb_1_200_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 399
  always @(posedge clk or posedge reset)
    begin : counter_400_process
      if (reset == 1'b1) begin
        count400 <= 9'b000000001;
      end
      else begin
        if (clk_enable) begin
          if (count400 >= 9'b110001111) begin
            count400 <= 9'b000000000;
          end
          else begin
            count400 <= count400 + 9'b000000001;
          end
        end
      end
    end

  assign comp_0_tmp_1 = count400 == 9'b110001111;

  assign phase_0_tmp_1 = comp_0_tmp_1 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_2_process
      if (reset == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end

  assign enb_1_400_0_1 = phase_0_1 & clk_enable;

  assign enb_1_400_0 = enb_1_400_0_1;

  assign comp_1_tmp_1 = count400 == 9'b000000000;

  assign phase_1_tmp_1 = comp_1_tmp_1 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_3_process
      if (reset == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end

  assign enb_1_400_1_1 = phase_1_1 & clk_enable;

  assign enb_1_400_1 = enb_1_400_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 1999
  always @(posedge clk or posedge reset)
    begin : counter_2000_process
      if (reset == 1'b1) begin
        count2000 <= 11'b00000000001;
      end
      else begin
        if (clk_enable) begin
          if (count2000 >= 11'b11111001111) begin
            count2000 <= 11'b00000000000;
          end
          else begin
            count2000 <= count2000 + 11'b00000000001;
          end
        end
      end
    end

  assign comp_1_tmp_2 = count2000 == 11'b00000000000;

  assign phase_1_tmp_2 = comp_1_tmp_2 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_4_process
      if (reset == 1'b1) begin
        phase_1_2 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_2 <= phase_1_tmp_2;
        end
      end
    end

  assign enb_1_2000_1_1 = phase_1_2 & clk_enable;

  assign enb_1_2000_1 = enb_1_2000_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 5999
  always @(posedge clk or posedge reset)
    begin : counter_6000_process
      if (reset == 1'b1) begin
        count6000 <= 13'b0000000000001;
      end
      else begin
        if (clk_enable) begin
          if (count6000 >= 13'b1011101101111) begin
            count6000 <= 13'b0000000000000;
          end
          else begin
            count6000 <= count6000 + 13'b0000000000001;
          end
        end
      end
    end

  assign comp_0_tmp_2 = count6000 == 13'b1011101101111;

  assign phase_0_tmp_2 = comp_0_tmp_2 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_5_process
      if (reset == 1'b1) begin
        phase_0_2 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0_2 <= phase_0_tmp_2;
        end
      end
    end

  assign enb_1_6000_0_1 = phase_0_2 & clk_enable;

  assign enb_1_6000_0 = enb_1_6000_0_1;

  assign comp_1_tmp_3 = count6000 == 13'b0000000000000;

  assign phase_1_tmp_3 = comp_1_tmp_3 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_6_process
      if (reset == 1'b1) begin
        phase_1_3 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_3 <= phase_1_tmp_3;
        end
      end
    end

  assign enb_1_6000_1_1 = phase_1_3 & clk_enable;

  assign enb_1_6000_1 = enb_1_6000_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 11999
  always @(posedge clk or posedge reset)
    begin : counter_12000_process
      if (reset == 1'b1) begin
        count12000 <= 14'b00000000000001;
      end
      else begin
        if (clk_enable) begin
          if (count12000 >= 14'b10111011011111) begin
            count12000 <= 14'b00000000000000;
          end
          else begin
            count12000 <= count12000 + 14'b00000000000001;
          end
        end
      end
    end

  assign comp_0_tmp_3 = count12000 == 14'b10111011011111;

  assign phase_0_tmp_3 = comp_0_tmp_3 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_7_process
      if (reset == 1'b1) begin
        phase_0_3 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0_3 <= phase_0_tmp_3;
        end
      end
    end

  assign enb_1_12000_0_1 = phase_0_3 & clk_enable;

  assign enb_1_12000_0 = enb_1_12000_0_1;

  assign comp_1_tmp_4 = count12000 == 14'b00000000000000;

  assign phase_1_tmp_4 = comp_1_tmp_4 & clk_enable;

  always @(posedge clk or posedge reset)
    begin : phase_delay_8_process
      if (reset == 1'b1) begin
        phase_1_4 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_4 <= phase_1_tmp_4;
        end
      end
    end

  assign enb_1_12000_1_1 = phase_1_4 & clk_enable;

  assign enb_1_12000_1 = enb_1_12000_1_1;

endmodule  // FPGA_tc

