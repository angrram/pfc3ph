// -------------------------------------------------------------
// 
// File Name: verilog_1\hdlsrc\gm_pfcvan3ph_s\FPGA.v
// Created: 2024-12-08 17:13:30
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.28205e-11
// Target subsystem base rate: 1.28205e-11
// Explicit user oversample request: 200x
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1.53846e-07
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Ia                            ce_out        1.53846e-07
// Ib                            ce_out        1.53846e-07
// V_out                         ce_out        1.53846e-07
// Va                            ce_out        1.53846e-07
// I_load                        ce_out        1.53846e-07
// Vb                            ce_out        1.53846e-07
// Ic                            ce_out        1.53846e-07
// Vc                            ce_out        1.53846e-07
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FPGA
// Source Path: gm_pfcvan3ph_s/FPGA
// Hierarchy Level: 0
// Model version: 1.182
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FPGA
          (clk,
           reset,
           clk_enable,
           G_Up_L2c,
           G_Up_L3c,
           G_Up_L1c,
           G_Dw_L1c,
           Va1,
           G_Dw_L2c,
           Vb1,
           G_Dw_L3c,
           Vc1,
           I_sink,
           ce_out,
           Ia,
           Ib,
           V_out,
           Va,
           I_load,
           Vb,
           Ic,
           Vc);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [29:0] G_Up_L2c;  // ufix30_En26
  input   [29:0] G_Up_L3c;  // ufix30_En26
  input   [29:0] G_Up_L1c;  // ufix30_En26
  input   [29:0] G_Dw_L1c;  // ufix30_En26
  input   signed [29:0] Va1;  // sfix30_En13
  input   [29:0] G_Dw_L2c;  // ufix30_En26
  input   signed [29:0] Vb1;  // sfix30_En13
  input   [29:0] G_Dw_L3c;  // ufix30_En26
  input   signed [29:0] Vc1;  // sfix30_En13
  input   signed [29:0] I_sink;  // sfix30_En13
  output  ce_out;
  output  signed [29:0] Ia;  // sfix30_En13
  output  signed [29:0] Ib;  // sfix30_En13
  output  signed [29:0] V_out;  // sfix30_En13
  output  signed [29:0] Va;  // sfix30_En13
  output  signed [29:0] I_load;  // sfix30_En13
  output  signed [29:0] Vb;  // sfix30_En13
  output  signed [29:0] Ic;  // sfix30_En13
  output  signed [29:0] Vc;  // sfix30_En13


  wire enb;
  wire enb_1_400_0;
  wire enb_1_2000_1;
  wire enb_1_400_1;
  wire enb_1_12000_0;
  wire enb_1_200_1;
  wire enb_1_12000_1;
  wire enb_1_6000_1;
  wire enb_1_200_0;
  wire enb_1_6000_0;
  reg [8:0] s;  // ufix9
  wire crp_temp_streamed_enb_phase_0_5;
  reg  crp_temp_streamed_enb_phase_0_5_1;
  wire enb_gated;
  reg [2:0] counterSig;  // ufix3
  wire crp_temp_streamed_enb_phase_0_5_2;
  reg  crp_temp_streamed_enb_phase_0_5_3;
  wire enb_gated_1;
  reg [2:0] counterSig_1;  // ufix3
  wire crp_temp_streamed_enb_phase_0_5_4;
  reg  crp_temp_streamed_enb_phase_0_5_5;
  wire enb_gated_2;
  reg [2:0] counterSig_2;  // ufix3
  wire enb_counter_ge_9;
  reg  enb_counter_ge_9_1;
  wire enb_counter_le_14_1;
  reg  enb_counter_le_14_2;
  wire crp_temp_streamed_enb_phase_9_5;
  wire enb_gated_3;
  reg [2:0] counterSig_3;  // ufix3
  reg [2:0] rd_5_reg [0:1];  // ufix3 [2]
  wire [2:0] rd_5_reg_next [0:1];  // ufix3 [2]
  wire [2:0] counterSig_4;  // ufix3
  reg [10:0] s_1;  // ufix11
  wire crp_temp_streamed_enb_phase_0_5_6;
  reg  crp_temp_streamed_enb_phase_0_5_7;
  wire enb_gated_4;
  reg [2:0] counterSig_5;  // ufix3
  wire crp_temp_streamed_enb_phase_0_5_8;
  reg  crp_temp_streamed_enb_phase_0_5_9;
  wire enb_gated_5;
  reg [2:0] counterSig_6;  // ufix3
  wire crp_temp_streamed_enb_phase_0_5_10;
  reg  crp_temp_streamed_enb_phase_0_5_11;
  wire enb_gated_6;
  reg [2:0] counterSig_7;  // ufix3
  wire crp_temp_streamed_enb_phase_0_4;
  reg  [1:0] rd_3_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_1;
  wire enb_gated_7;
  wire crp_temp_streamed_enb_phase_5_0;
  reg  [2:0] rd_6_reg;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_1;
  wire crp_temp_streamed_enb_phase_0_4_2;
  reg  crp_temp_streamed_enb_phase_0_4_3;
  wire enb_gated_8;
  wire crp_temp_streamed_enb_phase_5_0_2;
  reg  [1:0] rd_13_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_5_0_3;
  reg  [1:0] rd_20_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_4;
  wire enb_gated_9;
  reg  [2:0] rd_23_reg;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_4;
  reg  [1:0] rd_17_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_5;
  wire enb_gated_10;
  reg  [2:0] rd_20_reg_1;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_5;
  wire crp_temp_enb_phase_0_0;
  reg  crp_temp_enb_phase_0_0_1;
  wire [29:0] G_Dw_L3c_1;  // ufix30_En26
  reg [29:0] G_Dw_L3c_2;  // ufix30_En26
  wire [29:0] G_Up_L3c_1;  // ufix30_En26
  reg [29:0] G_Up_L3c_2;  // ufix30_En26
  wire [29:0] G_Dw_L2c_1;  // ufix30_En26
  reg [29:0] G_Dw_L2c_2;  // ufix30_En26
  wire [29:0] G_Up_L2c_1;  // ufix30_En26
  reg [29:0] G_Up_L2c_2;  // ufix30_En26
  wire [29:0] G_Dw_L1c_1;  // ufix30_En26
  reg [29:0] G_Dw_L1c_2;  // ufix30_En26
  wire [29:0] G_Up_L1c_1;  // ufix30_En26
  reg [29:0] G_Up_L1c_2;  // ufix30_En26
  wire [29:0] Input_Concat_out1 [0:5];  // ufix30_En26 [6]
  reg [29:0] Rate_Transition3_out1 [0:5];  // ufix30_En26 [6]
  reg [29:0] Rate_Transition3_out1_held [0:5];  // ufix30_En26 [6]
  reg [29:0] Rate_Transition3_out1_1 [0:5];  // ufix30_En26 [6]
  reg [29:0] Delay1_bypass_reg [0:5];  // ufix30 [6]
  reg [29:0] Delay1_bypass_reg_next [0:5];  // ufix30_En26 [6]
  reg [29:0] Delay1_out1 [0:5];  // ufix30_En26 [6]
  wire [29:0] Delay1_out1_1 [0:5];  // ufix30_En26 [6]
  reg [29:0] Delay1_out1_2 [0:5];  // ufix30_En26 [6]
  wire [29:0] Delay1_out1_0;  // ufix30_En26
  wire [29:0] Delay1_out1_1_1;  // ufix30_En26
  wire [29:0] Delay1_out1_2_1;  // ufix30_En26
  wire [29:0] Delay1_out1_3;  // ufix30_En26
  wire [29:0] Delay1_out1_4;  // ufix30_En26
  wire [29:0] Delay1_out1_5;  // ufix30_En26
  wire [29:0] Delay1_out1_unbuffer;  // ufix30_En26
  reg [29:0] Delay1_out1_unbuffer_1;  // ufix30_En26
  wire Compare_To_Constant2_cmpOut;
  wire [7:0] Compare_To_Constant2_out1;  // uint8
  reg  [1:0] rd_9_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_6;
  wire enb_gated_11;
  reg [7:0] tapped_delay_reg [0:4];  // ufix8 [5]
  reg [7:0] tapped_delay_reg_next [0:4];  // ufix8 [5]
  reg [7:0] Compare_To_Constant2_out1_1 [0:4];  // uint8 [5]
  wire [7:0] Compare_To_Constant2_out1_2 [0:4];  // uint8 [5]
  reg [7:0] Compare_To_Constant2_out1_3 [0:4];  // uint8 [5]
  reg  [2:0] rd_12_reg;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_6;
  reg [7:0] Compare_To_Constant2_out1_4;  // uint8
  wire [7:0] Compare_To_Constant2_out1_5;  // uint8
  reg [7:0] Compare_To_Constant2_out1_held;  // uint8
  wire [7:0] Compare_To_Constant2_out1_6 [0:5];  // uint8 [6]
  reg [7:0] Compare_To_Constant2_out1_7 [0:5];  // uint8 [6]
  reg [7:0] Delay4_bypass_reg [0:5];  // ufix8 [6]
  reg [7:0] Delay4_bypass_reg_next [0:5];  // ufix8 [6]
  reg [7:0] Delay4_out1 [0:5];  // uint8 [6]
  wire [7:0] Delay4_out1_1 [0:5];  // uint8 [6]
  reg [7:0] Delay4_out1_2 [0:5];  // uint8 [6]
  wire [7:0] Delay4_out1_0;  // uint8
  wire [7:0] Delay4_out1_1_1;  // uint8
  wire [7:0] Delay4_out1_2_1;  // uint8
  wire [7:0] Delay4_out1_3;  // uint8
  wire [7:0] Delay4_out1_4;  // uint8
  wire [7:0] Delay4_out1_5;  // uint8
  wire [7:0] Delay4_out1_unbuffer;  // uint8
  reg [7:0] Delay4_out1_unbuffer_1;  // uint8
  wire Delay4_out1_unbuffer_is_not0;
  reg  [1:0] rd_14_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_7;
  wire enb_gated_12;
  reg  [2:0] rd_17_reg_1;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_7;
  reg  [1:0] rd_5_reg_1;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_8;
  wire enb_gated_13;
  reg  [2:0] rd_8_reg;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_8;
  wire enb_counter_ge_4_1;
  reg  enb_counter_ge_4_2;
  wire enb_counter_le_8_1;
  reg  enb_counter_le_8_2;
  wire crp_temp_streamed_enb_phase_4_4;
  wire enb_gated_14;
  wire crp_temp_streamed_enb_phase_9_0;
  reg  [1:0] rd_8_reg_1;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_9_0_1;
  wire enb_counter_ge_9_3;
  reg  enb_counter_ge_9_4;
  wire enb_counter_le_13_1;
  reg  enb_counter_le_13_2;
  wire crp_temp_streamed_enb_phase_9_4;
  reg  [1:0] rd_8_reg_2;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_9_4_1;
  wire enb_gated_15;
  wire crp_temp_streamed_enb_phase_14_0;
  reg  [3:0] rd_11_reg;  // ufix1 [4]
  wire crp_temp_streamed_enb_phase_14_0_1;
  wire crp_temp_streamed_enb_phase_0_4_9;
  reg  [1:0] rd_5_reg_2;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_10;
  wire enb_gated_16;
  wire crp_temp_streamed_enb_phase_5_0_9;
  reg  [2:0] rd_8_reg_3;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_10;
  wire Delay13_ctrl_const_out;
  reg  Delay13_ctrl_const_out_1;
  reg  Delay13_ctrl_delay_bypass_reg;  // ufix1
  wire Delay13_ctrl_delay_out;
  wire Delay13_ctrl_delay_out_1;
  reg  Delay13_ctrl_delay_out_2;
  wire [29:0] Delay13_Initial_Val_out;  // ufix30_En32
  wire [29:0] Constant_out1;  // ufix30_En32
  reg [29:0] Constant_out1_1;  // ufix30_En32
  reg [29:0] Delay13_bypass_reg;  // ufix30
  wire [29:0] Delay13_out;  // ufix30_En32
  wire [29:0] Delay13_out_1;  // ufix30_En32
  reg [29:0] Delay13_out_2;  // ufix30_En32
  wire [29:0] Delay13_out1;  // ufix30_En32
  reg [29:0] Delay13_out1_1;  // ufix30_En32
  reg [29:0] Delay21_bypass_reg;  // ufix30
  wire [29:0] Ade1;  // ufix30_En32
  wire [29:0] Ade1_1;  // ufix30_En32
  reg [29:0] Ade2;  // ufix30_En32
  wire [29:0] Ade2_1;  // ufix30_En32
  reg [29:0] HwModeRegister1_reg [0:1];  // ufix30 [2]
  wire [29:0] HwModeRegister1_reg_next [0:1];  // ufix30_En32 [2]
  wire [29:0] Ade2_2;  // ufix30_En32
  wire enb_counter_ge_4_4;
  reg  enb_counter_ge_4_5;
  wire enb_counter_le_8_4;
  reg  enb_counter_le_8_5;
  wire crp_temp_streamed_enb_phase_4_4_1;
  wire enb_gated_17;
  wire crp_temp_streamed_enb_phase_9_0_2;
  reg  [1:0] rd_7_reg;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_9_0_3;
  wire crp_temp_streamed_enb_phase_0_4_11;
  reg  [1:0] rd_5_reg_3;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_0_4_12;
  wire enb_gated_18;
  wire crp_temp_streamed_enb_phase_5_0_11;
  reg  [2:0] rd_8_reg_4;  // ufix1 [3]
  wire crp_temp_streamed_enb_phase_5_0_12;
  reg  crp_temp_streamed_enb_phase_0_4_13;
  wire enb_gated_19;
  reg  [1:0] rd_12_reg_1;  // ufix1 [2]
  wire crp_temp_streamed_enb_phase_5_0_13;
  reg [13:0] s_2;  // ufix14
  wire signed [29:0] P_unbuffer;  // sfix30_En13
  reg signed [29:0] ic_dsp;  // sfix30_En13
  wire signed [29:0] ic_dsp_1;  // sfix30_En13
  reg signed [29:0] ic_dsp_held;  // sfix30_En13
  reg signed [29:0] ic_dsp_2 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] ic_dsp_3 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] P [0:5];  // sfix30_En13 [6]
  wire signed [29:0] P_5;  // sfix30_En13
  wire signed [29:0] P_4;  // sfix30_En13
  wire signed [29:0] P_3;  // sfix30_En13
  wire signed [29:0] P_2;  // sfix30_En13
  wire signed [29:0] P_1;  // sfix30_En13
  wire signed [29:0] P_6 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] P_7 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] add;  // sfix30_En13
  reg signed [29:0] add_1;  // sfix30_En13
  wire signed [29:0] add_2;  // sfix30_En13
  reg signed [29:0] add_held;  // sfix30_En13
  reg signed [29:0] add_3 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] add_4 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] multde [0:5];  // sfix30_En24 [6]
  wire signed [29:0] multde_5;  // sfix30_En24
  wire signed [29:0] multde_4;  // sfix30_En24
  wire signed [29:0] multde_3;  // sfix30_En24
  wire signed [29:0] multde_2;  // sfix30_En24
  wire signed [29:0] multde_1;  // sfix30_En24
  wire signed [29:0] multde_6 [0:5];  // sfix30_En24 [6]
  reg signed [29:0] multde_7 [0:5];  // sfix30_En24 [6]
  wire signed [29:0] mult;  // sfix30_En24
  reg signed [29:0] mult_1;  // sfix30_En24
  wire signed [29:0] mult_2;  // sfix30_En24
  reg signed [29:0] mult_held;  // sfix30_En24
  reg signed [29:0] mult_3 [0:4];  // sfix30_En24 [5]
  reg signed [29:0] mult_4 [0:4];  // sfix30_En24 [5]
  reg signed [29:0] Bde2 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Bde2_5;  // sfix30_En22
  wire signed [29:0] Bde2_4;  // sfix30_En22
  wire signed [29:0] Bde2_3;  // sfix30_En22
  wire signed [29:0] Bde2_2;  // sfix30_En22
  wire signed [29:0] Bde2_1;  // sfix30_En22
  reg signed [29:0] Bde2_6 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Delay14_out1 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Subtract_out1;  // sfix30_En22
  reg signed [29:0] Subtract_out1_1;  // sfix30_En22
  wire signed [29:0] Subtract_out1_2;  // sfix30_En22
  reg signed [29:0] Subtract_out1_held;  // sfix30_En22
  reg signed [29:0] Subtract_out1_3 [0:4];  // sfix30_En22 [5]
  reg signed [29:0] Subtract_out1_4 [0:4];  // sfix30_En22 [5]
  reg signed [29:0] ic_dsp_4;  // sfix30_En13
  reg signed [29:0] Delay15_out1 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Delay15_out1_5;  // sfix30_En22
  wire signed [29:0] Delay15_out1_4;  // sfix30_En22
  wire signed [29:0] Delay15_out1_3;  // sfix30_En22
  wire signed [29:0] Delay15_out1_2;  // sfix30_En22
  wire signed [29:0] Delay15_out1_1;  // sfix30_En22
  reg signed [29:0] Delay15_out1_6 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Rate_Transition1_out1_unbuffer;  // sfix30_En22
  reg signed [29:0] Rate_Transition1_out1;  // sfix30_En22
  wire signed [29:0] Rate_Transition1_out1_1;  // sfix30_En22
  reg signed [29:0] Rate_Transition1_out1_held;  // sfix30_En22
  reg signed [29:0] Rate_Transition1_out1_2 [0:4];  // sfix30_En22 [5]
  reg signed [29:0] Rate_Transition1_out1_3 [0:4];  // sfix30_En22 [5]
  reg signed [29:0] Rate_Transition1_out1_4 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Rate_Transition1_out1_5;  // sfix30_En22
  wire signed [29:0] Rate_Transition1_out1_4_1;  // sfix30_En22
  wire signed [29:0] Rate_Transition1_out1_3_1;  // sfix30_En22
  wire signed [29:0] Rate_Transition1_out1_2_1;  // sfix30_En22
  wire signed [29:0] Rate_Transition1_out1_1_1;  // sfix30_En22
  reg signed [29:0] Multiply_Add_out1;  // sfix30_En22
  reg signed [29:0] Multiply_Add_out1_1;  // sfix30_En22
  wire signed [29:0] Multiply_Add_out1_2;  // sfix30_En22
  reg signed [29:0] Multiply_Add_out1_held;  // sfix30_En22
  reg signed [29:0] Multiply_Add_out1_3 [0:4];  // sfix30_En22 [5]
  reg signed [29:0] Multiply_Add_out1_4 [0:4];  // sfix30_En22 [5]
  reg  [5:0] Delay8_out1;  // boolean [6]
  wire Delay8_out1_5;
  wire Delay8_out1_4;
  wire Delay8_out1_3;
  wire Delay8_out1_2;
  wire Delay8_out1_1;
  wire [5:0] Delay8_out1_6;  // boolean [6]
  wire OR_out1;
  reg  OR_out1_1;
  wire OR_out1_2;
  reg  OR_out1_held;
  reg  [4:0] OR_out1_3;  // boolean [5]
  reg  [4:0] OR_out1_4;  // boolean [5]
  reg [7:0] Delay5_out1 [0:5];  // uint8 [6]
  wire [7:0] Delay5_out1_5;  // uint8
  wire [7:0] Delay5_out1_4;  // uint8
  wire [7:0] Delay5_out1_3;  // uint8
  wire [7:0] Delay5_out1_2;  // uint8
  wire [7:0] Delay5_out1_1;  // uint8
  reg [7:0] Delay5_out1_6 [0:5];  // uint8 [6]
  wire [7:0] Compare_To_Constant1_out1;  // uint8
  reg [7:0] Compare_To_Constant1_out1_1;  // uint8
  wire [7:0] Compare_To_Constant1_out1_2;  // uint8
  reg [7:0] Compare_To_Constant1_out1_held;  // uint8
  reg [7:0] Compare_To_Constant1_out1_3 [0:4];  // uint8 [5]
  reg [7:0] Compare_To_Constant1_out1_4 [0:4];  // uint8 [5]
  wire signed [29:0] Delay2_out1_unbuffer;  // sfix30_En13
  reg signed [29:0] Delay2_out1_unbuffer_1;  // sfix30_En13
  wire Compare_To_Constant1_cmpOut;
  reg [7:0] tapped_delay_reg_1 [0:4];  // ufix8 [5]
  reg [7:0] tapped_delay_reg_next_1 [0:4];  // ufix8 [5]
  wire [7:0] Compare_To_Constant1_out1_5 [0:4];  // uint8 [5]
  wire [7:0] Compare_To_Constant1_out1_6 [0:5];  // uint8 [6]
  reg [7:0] Compare_To_Constant1_out1_7 [0:5];  // uint8 [6]
  reg [7:0] Delay51_bypass_reg [0:5];  // ufix8 [6]
  reg [7:0] Delay51_bypass_reg_next [0:5];  // ufix8 [6]
  wire [7:0] Delay5_out1_7 [0:5];  // uint8 [6]
  wire [7:0] Delay5_out1_0;  // uint8
  wire [7:0] Delay5_out1_unbuffer;  // uint8
  reg [7:0] Delay5_out1_unbuffer_1;  // uint8
  wire Delay5_out1_unbuffer_is_not0;
  wire [4:0] OR_out1_5;  // boolean [5]
  wire [5:0] OR_out1_6;  // boolean [6]
  reg  [5:0] OR_out1_7;  // boolean [6]
  reg  [5:0] Delay8_bypass_reg;  // ufix1 [6]
  wire [5:0] Delay8_out1_7;  // boolean [6]
  wire Delay8_out1_0;
  wire Delay8_out1_unbuffer;
  reg  Delay8_out1_unbuffer_1;
  reg signed [29:0] Delay7_out1 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Delay7_out1_5;  // sfix30_En22
  wire signed [29:0] Delay7_out1_4;  // sfix30_En22
  wire signed [29:0] Delay7_out1_3;  // sfix30_En22
  wire signed [29:0] Delay7_out1_2;  // sfix30_En22
  wire signed [29:0] Delay7_out1_1;  // sfix30_En22
  reg signed [29:0] Delay7_out1_6 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Subtract1_out1;  // sfix30_En22
  reg signed [29:0] Subtract1_out1_1;  // sfix30_En22
  wire signed [29:0] Subtract1_out1_2;  // sfix30_En22
  reg signed [29:0] Subtract1_out1_held;  // sfix30_En22
  reg signed [29:0] Subtract1_out1_3 [0:4];  // sfix30_En22 [5]
  reg signed [29:0] Subtract1_out1_4 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Delay6_out1_unbuffer;  // sfix30_En13
  reg signed [29:0] Delay6_out1_unbuffer_1;  // sfix30_En13
  reg signed [29:0] Delay3_out1 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay3_out1_5;  // sfix30_En13
  wire signed [29:0] Delay3_out1_4;  // sfix30_En13
  wire signed [29:0] Delay3_out1_3;  // sfix30_En13
  wire signed [29:0] Delay3_out1_2;  // sfix30_En13
  wire signed [29:0] Delay3_out1_1;  // sfix30_En13
  reg signed [29:0] Delay3_out1_6 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] on;  // sfix30_En13
  reg signed [29:0] on_1;  // sfix30_En13
  wire signed [29:0] on_2;  // sfix30_En13
  reg signed [29:0] on_held;  // sfix30_En13
  reg signed [29:0] on_3 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] on_4 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] Delay_out1 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay_out1_5;  // sfix30_En13
  wire signed [29:0] Delay_out1_4;  // sfix30_En13
  wire signed [29:0] Delay_out1_3;  // sfix30_En13
  wire signed [29:0] Delay_out1_2;  // sfix30_En13
  wire signed [29:0] Delay_out1_1;  // sfix30_En13
  reg signed [29:0] Delay_out1_6 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] is [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Dw_L3s;  // sfix30_En13
  wire signed [29:0] Up_L3s;  // sfix30_En13
  wire signed [29:0] Dw_L2s;  // sfix30_En13
  wire signed [29:0] Up_L2s;  // sfix30_En13
  wire signed [29:0] Dw_L1s;  // sfix30_En13
  wire signed [29:0] Up_L1s;  // sfix30_En13
  wire signed [29:0] Rate_Transition2_out1 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Rate_Transition2_out1_1 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay_bypass_reg_next [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay_out1_7 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay_out1_0;  // sfix30_En13
  wire signed [29:0] Delay_out1_unbuffer;  // sfix30_En13
  reg signed [29:0] Delay_out1_unbuffer_1;  // sfix30_En13
  wire signed [30:0] Gain1_cast;  // sfix31_En13
  wire signed [30:0] Gain1_cast_1;  // sfix31_En13
  wire signed [59:0] Gain1_cast_2;  // sfix60_En42
  reg signed [29:0] tapped_delay_reg_2 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_2 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] on_5 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] on_6 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] on_7 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay3_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay3_bypass_reg_next [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay3_out1_7 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay3_out1_0;  // sfix30_En13
  wire signed [29:0] Delay3_out1_unbuffer;  // sfix30_En13
  reg signed [29:0] Delay3_out1_unbuffer_1;  // sfix30_En13
  wire signed [30:0] Subtract1_sub_cast;  // sfix31_En13
  wire signed [30:0] Subtract1_sub_cast_1;  // sfix31_En13
  wire signed [30:0] Subtract1_sub_temp;  // sfix31_En13
  reg signed [29:0] tapped_delay_reg_3 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_3 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Subtract1_out1_5 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Subtract1_out1_6 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Subtract1_out1_7 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Delay7_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay7_bypass_reg_next [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Delay7_out1_7 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Delay7_out1_0;  // sfix30_En22
  wire signed [29:0] Delay7_out1_unbuffer;  // sfix30_En22
  reg signed [29:0] Delay7_out1_unbuffer_1;  // sfix30_En22
  wire signed [29:0] Multiply_Add_mul_in1;  // sfix30_En22
  wire signed [30:0] Multiply_Add_mul_cast;  // sfix31_En22
  (* use_dsp  = "yes" *)   wire signed [29:0] mulOutput;  // sfix30_En22
  reg signed [29:0] HwModeRegister_reg [0:1];  // sfix30 [2]
  wire signed [29:0] HwModeRegister_reg_next [0:1];  // sfix30_En22 [2]
  wire signed [29:0] mulOutput_1;  // sfix30_En22
  reg signed [29:0] Delay9_out1 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay9_out1_5;  // sfix30_En13
  wire signed [29:0] Delay9_out1_4;  // sfix30_En13
  wire signed [29:0] Delay9_out1_3;  // sfix30_En13
  wire signed [29:0] Delay9_out1_2;  // sfix30_En13
  wire signed [29:0] Delay9_out1_1;  // sfix30_En13
  reg signed [29:0] Delay9_out1_6 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay6_out1;  // sfix30_En13
  wire signed [29:0] Delay6_out1_1;  // sfix30_En13
  reg signed [29:0] Delay6_out1_held;  // sfix30_En13
  reg signed [29:0] Delay6_out1_2 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] Delay6_out1_3 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] Delay6_out1_4 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay6_out1_5;  // sfix30_En13
  wire signed [29:0] Delay6_out1_4_1;  // sfix30_En13
  wire signed [29:0] Delay6_out1_3_1;  // sfix30_En13
  wire signed [29:0] Delay6_out1_2_1;  // sfix30_En13
  wire signed [29:0] Delay6_out1_1_1;  // sfix30_En13
  reg signed [29:0] Delay6_out1_6 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Gain3_out1;  // sfix30_En13
  reg signed [29:0] Gain3_out1_1;  // sfix30_En13
  wire signed [29:0] Gain3_out1_2;  // sfix30_En13
  reg signed [29:0] Gain3_out1_held;  // sfix30_En13
  reg signed [29:0] Gain3_out1_3 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] Gain3_out1_4 [0:4];  // sfix30_En13 [5]
  reg signed [29:0] Delay2_out1 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay2_out1_5;  // sfix30_En13
  wire signed [29:0] Delay2_out1_4;  // sfix30_En13
  wire signed [29:0] Delay2_out1_3;  // sfix30_En13
  wire signed [29:0] Delay2_out1_2;  // sfix30_En13
  wire signed [29:0] Delay2_out1_1;  // sfix30_En13
  reg signed [29:0] Delay2_out1_6 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] vs [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Dw_L3v;  // sfix30_En13
  wire signed [29:0] Up_L3v;  // sfix30_En13
  wire signed [29:0] Dw_L2v;  // sfix30_En13
  wire signed [29:0] Up_Lv;  // sfix30_En13
  wire signed [29:0] Dw_L1v;  // sfix30_En13
  wire signed [29:0] Up_L1v;  // sfix30_En13
  wire signed [29:0] Rate_Transition4_out1 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Rate_Transition4_out1_1 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay2_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay2_bypass_reg_next [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay2_out1_7 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay2_out1_0;  // sfix30_En13
  reg signed [29:0] Delay2_out1_unbuffer_2;  // sfix30_En13
  wire signed [59:0] Gain3_mul_temp;  // sfix60_En47
  wire signed [59:0] Gain3_1;  // sfix60
  wire signed [59:0] Gain3_2;  // sfix60
  wire signed [59:0] Gain3_3;  // sfix60
  wire signed [59:0] Gain3_4;  // sfix60
  wire signed [59:0] Gain3_5;  // sfix60
  wire signed [59:0] Gain3_6;  // sfix60
  wire signed [59:0] Gain3_7;  // sfix60
  wire signed [59:0] Gain3_8;  // sfix60
  wire signed [59:0] Gain3_9;  // sfix60
  reg signed [29:0] tapped_delay_reg_4 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_4 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] Gain3_out1_5 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] Gain3_out1_6 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Gain3_out1_7 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay6_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay6_bypass_reg_next [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay6_out1_7 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay6_out1_0;  // sfix30_En13
  reg signed [29:0] tapped_delay_reg_5 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_5 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] Delay6_out1_8 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] Delay6_out1_9 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay6_out1_10 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay9_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay9_bypass_reg_next [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay9_out1_7 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] Delay9_out1_0;  // sfix30_En13
  wire signed [29:0] Delay9_out1_unbuffer;  // sfix30_En13
  reg signed [29:0] HwModeRegister_reg_1 [0:2];  // sfix30 [3]
  reg signed [29:0] HwModeRegister_reg_next_1 [0:2];  // sfix30_En13 [3]
  reg signed [29:0] Delay9_out1_unbuffer_1;  // sfix30_En13
  wire signed [39:0] Multiply_Add_add_add_cast;  // sfix40_En22
  wire signed [39:0] Multiply_Add_add_add_cast_1;  // sfix40_En22
  wire signed [39:0] Multiply_Add_add_add_temp;  // sfix40_En22
  wire signed [29:0] Multiply_Add_out1_5;  // sfix30_En22
  reg signed [29:0] tapped_delay_reg_6 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_6 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Multiply_Add_out1_6 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Multiply_Add_out1_7 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Rate_Transition1_out1_0;  // sfix30_En22
  reg signed [29:0] tapped_delay_reg_7 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_7 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Rate_Transition1_out1_6 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Rate_Transition1_out1_7 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Rate_Transition1_out1_8 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Delay15_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay15_bypass_reg_next [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Delay15_out1_7 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Delay15_out1_0;  // sfix30_En22
  wire signed [29:0] Delay15_out1_unbuffer;  // sfix30_En22
  reg signed [29:0] Delay15_out1_unbuffer_1;  // sfix30_En22
  wire signed [39:0] Subtract_sub_cast;  // sfix40_En22
  wire signed [39:0] Subtract_sub_cast_1;  // sfix40_En22
  wire signed [39:0] Subtract_sub_temp;  // sfix40_En22
  reg signed [29:0] tapped_delay_reg_8 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_8 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Subtract_out1_5 [0:4];  // sfix30_En22 [5]
  wire signed [29:0] Subtract_out1_6 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Subtract_out1_7 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Delay14_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay14_bypass_reg_next [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Bde1 [0:5];  // sfix30_En22 [6]
  reg signed [29:0] Delay41_reg [0:11];  // sfix30 [12]
  reg signed [29:0] Delay41_reg_next [0:11];  // sfix30_En22 [12]
  wire signed [29:0] Bde2_7 [0:5];  // sfix30_En22 [6]
  wire signed [29:0] Bde2_0;  // sfix30_En22
  wire signed [29:0] Bde2_unbuffer;  // sfix30_En22
  reg signed [29:0] Bde2_unbuffer_1;  // sfix30_En22
  wire signed [30:0] mult_cast;  // sfix31_En32
  wire signed [60:0] mult_mul_temp;  // sfix61_En54
  wire signed [59:0] mult_6;  // sfix60_En54
  reg signed [59:0] PipelineRegister_reg [0:2];  // sfix60 [3]
  reg signed [59:0] PipelineRegister_reg_next [0:2];  // sfix60_En54 [3]
  reg signed [59:0] mult_7;  // sfix60_En54
  reg signed [29:0] tapped_delay_reg_9 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_9 [0:4];  // sfix30_En24 [5]
  wire signed [29:0] mult_8 [0:4];  // sfix30_En24 [5]
  wire signed [29:0] mult_9 [0:5];  // sfix30_En24 [6]
  reg signed [29:0] mult_10 [0:5];  // sfix30_En24 [6]
  reg signed [29:0] Delay71_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay71_bypass_reg_next [0:5];  // sfix30_En24 [6]
  wire signed [29:0] multde_8 [0:5];  // sfix30_En24 [6]
  wire signed [29:0] multde_0;  // sfix30_En24
  wire signed [29:0] multde_unbuffer;  // sfix30_En24
  reg signed [29:0] multde_unbuffer_1;  // sfix30_En24
  reg signed [29:0] P_8 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] P_5_1;  // sfix30_En13
  wire signed [29:0] P_4_1;  // sfix30_En13
  wire signed [29:0] P_3_1;  // sfix30_En13
  wire signed [29:0] P_2_1;  // sfix30_En13
  wire signed [29:0] P_1_1;  // sfix30_En13
  wire signed [29:0] P_9 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] P_0;  // sfix30_En13
  wire signed [29:0] P_unbuffer_1;  // sfix30_En13
  reg signed [29:0] P_unbuffer_2;  // sfix30_En13
  wire signed [41:0] add1_add_cast;  // sfix42_En24
  wire signed [41:0] add1_add_cast_1;  // sfix42_En24
  wire signed [41:0] add1_add_temp;  // sfix42_En24
  reg signed [29:0] tapped_delay_reg_10 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_10 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] add_5 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] add_6 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] add_7 [0:5];  // sfix30_En13 [6]
  reg signed [29:0] Delay91_bypass_reg [0:5];  // sfix30 [6]
  reg signed [29:0] Delay91_bypass_reg_next [0:5];  // sfix30_En13 [6]
  wire signed [29:0] P_10 [0:5];  // sfix30_En13 [6]
  wire signed [29:0] P_0_1;  // sfix30_En13
  reg signed [29:0] tapped_delay_reg_11 [0:4];  // sfix30 [5]
  reg signed [29:0] tapped_delay_reg_next_11 [0:4];  // sfix30_En13 [5]
  wire signed [29:0] ic_dsp_5 [0:4];  // sfix30_En13 [5]
  reg signed [31:0] rd_5_t_0_0;  // int32
  reg signed [31:0] rd_5_t_1;  // int32
  reg signed [31:0] Rate_Transition3_out1_state_t_0_0;  // int32
  reg signed [31:0] Rate_Transition3_out1_state_t_1;  // int32
  reg signed [31:0] Rate_Transition3_out1_enb_t_0_0;  // int32
  reg signed [31:0] Rate_Transition3_out1_enb_t_1;  // int32
  reg signed [31:0] crp_out_delay1_t_0_0;  // int32
  reg signed [31:0] crp_out_delay1_t_1;  // int32
  reg signed [31:0] Delay1_bypass_t_0_0;  // int32
  reg signed [31:0] Delay1_bypass_t_1;  // int32
  reg signed [31:0] Delay1_bypass_t_2;  // int32
  reg signed [31:0] Delay1_bypass_t_0_1;  // int32
  reg signed [31:0] Delay1_bypass_t_1_0;  // int32
  reg signed [31:0] rd_7_t_0_0;  // int32
  reg signed [31:0] rd_7_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_0;  // int32
  reg signed [31:0] tapped_delay_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_1;  // int32
  reg signed [31:0] tapped_delay_t_1_0;  // int32
  reg signed [31:0] rd_11_t_0_0;  // int32
  reg signed [31:0] rd_11_t_1;  // int32
  reg signed [31:0] crp_out_delay4_t_0_0;  // int32
  reg signed [31:0] crp_out_delay4_t_1;  // int32
  reg signed [31:0] Delay4_bypass_t_0_0;  // int32
  reg signed [31:0] Delay4_bypass_t_1;  // int32
  reg signed [31:0] Delay4_bypass_t_2;  // int32
  reg signed [31:0] Delay4_bypass_t_0_1;  // int32
  reg signed [31:0] Delay4_bypass_t_1_0;  // int32
  reg signed [31:0] rd_0_t_0_0;  // int32
  reg signed [31:0] rd_0_t_1;  // int32
  reg signed [31:0] HwModeRegister1_t_0_0;  // int32
  reg signed [31:0] HwModeRegister1_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_01;  // int32
  reg signed [31:0] tapped_delay_t_11;  // int32
  reg signed [31:0] rd_16_t_0_0;  // int32
  reg signed [31:0] rd_16_t_1;  // int32
  reg signed [31:0] crp_out_delay5_t_0_0;  // int32
  reg signed [31:0] crp_out_delay5_t_1;  // int32
  reg signed [31:0] Delay51_bypass_t_0_0;  // int32
  reg signed [31:0] Delay51_bypass_t_1;  // int32
  reg signed [31:0] Delay51_bypass_t_2;  // int32
  reg signed [31:0] Delay51_bypass_t_0_1;  // int32
  reg signed [31:0] Delay51_bypass_t_1_0;  // int32
  reg signed [31:0] rd_2_t_0_0;  // int32
  reg signed [31:0] rd_2_t_1;  // int32
  reg signed [31:0] crp_out_delay2_t_0_0;  // int32
  reg signed [31:0] crp_out_delay2_t_1;  // int32
  reg signed [31:0] Delay_bypass_t_0_0;  // int32
  reg signed [31:0] Delay_bypass_t_1;  // int32
  reg signed [31:0] Delay_bypass_t_2;  // int32
  reg signed [31:0] Delay_bypass_t_0_1;  // int32
  reg signed [31:0] Delay_bypass_t_1_0;  // int32
  reg signed [31:0] rd_18_t_0_0;  // int32
  reg signed [31:0] rd_18_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_02;  // int32
  reg signed [31:0] tapped_delay_t_12;  // int32
  reg signed [31:0] tapped_delay_t_0_1_1;  // int32
  reg signed [31:0] tapped_delay_t_1_0_1;  // int32
  reg signed [31:0] rd_22_t_0_0;  // int32
  reg signed [31:0] rd_22_t_1;  // int32
  reg signed [31:0] crp_out_delay6_t_0_0;  // int32
  reg signed [31:0] crp_out_delay6_t_1;  // int32
  reg signed [31:0] Delay3_bypass_t_0_0;  // int32
  reg signed [31:0] Delay3_bypass_t_1;  // int32
  reg signed [31:0] Delay3_bypass_t_2;  // int32
  reg signed [31:0] Delay3_bypass_t_0_1;  // int32
  reg signed [31:0] Delay3_bypass_t_1_0;  // int32
  reg signed [31:0] rd_14_t_0_0;  // int32
  reg signed [31:0] rd_14_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_03;  // int32
  reg signed [31:0] tapped_delay_t_13;  // int32
  reg signed [31:0] tapped_delay_t_0_1_2;  // int32
  reg signed [31:0] tapped_delay_t_1_0_2;  // int32
  reg signed [31:0] rd_19_t_0_0;  // int32
  reg signed [31:0] rd_19_t_1;  // int32
  reg signed [31:0] crp_out_delay9_t_0_0;  // int32
  reg signed [31:0] crp_out_delay9_t_1;  // int32
  reg signed [31:0] Delay7_bypass_t_0_0;  // int32
  reg signed [31:0] Delay7_bypass_t_1;  // int32
  reg signed [31:0] Delay7_bypass_t_2;  // int32
  reg signed [31:0] Delay7_bypass_t_0_1;  // int32
  reg signed [31:0] Delay7_bypass_t_1_0;  // int32
  reg signed [31:0] HwModeRegister_t_0_0;  // int32
  reg signed [31:0] HwModeRegister_t_1;  // int32
  reg signed [31:0] crp_out_delay_t_0_0;  // int32
  reg signed [31:0] crp_out_delay_t_1;  // int32
  reg signed [31:0] Delay2_bypass_t_0_0;  // int32
  reg signed [31:0] Delay2_bypass_t_1;  // int32
  reg signed [31:0] Delay2_bypass_t_2;  // int32
  reg signed [31:0] Delay2_bypass_t_0_1;  // int32
  reg signed [31:0] Delay2_bypass_t_1_0;  // int32
  reg signed [31:0] rd_0_t_0_0_1;  // int32
  reg signed [31:0] rd_0_t_1_1;  // int32
  reg signed [31:0] tapped_delay_t_0_04;  // int32
  reg signed [31:0] tapped_delay_t_14;  // int32
  reg signed [31:0] tapped_delay_t_0_1_3;  // int32
  reg signed [31:0] tapped_delay_t_1_0_3;  // int32
  reg signed [31:0] crp_out_delay3_t_0_0;  // int32
  reg signed [31:0] crp_out_delay3_t_1;  // int32
  reg signed [31:0] Delay6_bypass_t_0_0;  // int32
  reg signed [31:0] Delay6_bypass_t_1;  // int32
  reg signed [31:0] Delay6_bypass_t_2;  // int32
  reg signed [31:0] Delay6_bypass_t_0_1;  // int32
  reg signed [31:0] Delay6_bypass_t_1_0;  // int32
  reg signed [31:0] rd_9_t_0_0;  // int32
  reg signed [31:0] rd_9_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_05;  // int32
  reg signed [31:0] tapped_delay_t_15;  // int32
  reg signed [31:0] tapped_delay_t_0_1_4;  // int32
  reg signed [31:0] tapped_delay_t_1_0_4;  // int32
  reg signed [31:0] rd_12_t_0_0;  // int32
  reg signed [31:0] rd_12_t_1;  // int32
  reg signed [31:0] crp_out_delay8_t_0_0;  // int32
  reg signed [31:0] crp_out_delay8_t_1;  // int32
  reg signed [31:0] Delay9_bypass_t_0_0;  // int32
  reg signed [31:0] Delay9_bypass_t_1;  // int32
  reg signed [31:0] Delay9_bypass_t_2;  // int32
  reg signed [31:0] Delay9_bypass_t_0_1;  // int32
  reg signed [31:0] Delay9_bypass_t_1_0;  // int32
  reg signed [31:0] rd_3_t_0_0;  // int32
  reg signed [31:0] rd_3_t_1;  // int32
  reg signed [31:0] HwModeRegister_t_0_0_1;  // int32
  reg signed [31:0] HwModeRegister_t_0_1;  // int32
  reg signed [31:0] tapped_delay_t_0_06;  // int32
  reg signed [31:0] tapped_delay_t_16;  // int32
  reg signed [31:0] tapped_delay_t_0_1_5;  // int32
  reg signed [31:0] tapped_delay_t_1_0_5;  // int32
  reg signed [31:0] rd_6_t_0_0;  // int32
  reg signed [31:0] rd_6_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_07;  // int32
  reg signed [31:0] tapped_delay_t_17;  // int32
  reg signed [31:0] tapped_delay_t_0_1_6;  // int32
  reg signed [31:0] tapped_delay_t_1_0_6;  // int32
  reg signed [31:0] crp_out_delay13_t_0_0;  // int32
  reg signed [31:0] crp_out_delay13_t_1;  // int32
  reg signed [31:0] Delay15_bypass_t_0_0;  // int32
  reg signed [31:0] Delay15_bypass_t_1;  // int32
  reg signed [31:0] Delay15_bypass_t_2;  // int32
  reg signed [31:0] Delay15_bypass_t_0_1;  // int32
  reg signed [31:0] Delay15_bypass_t_1_0;  // int32
  reg signed [31:0] rd_0_t_0_0_2;  // int32
  reg signed [31:0] rd_0_t_1_2;  // int32
  reg signed [31:0] tapped_delay_t_0_08;  // int32
  reg signed [31:0] tapped_delay_t_18;  // int32
  reg signed [31:0] tapped_delay_t_0_1_7;  // int32
  reg signed [31:0] tapped_delay_t_1_0_7;  // int32
  reg signed [31:0] crp_out_delay14_t_0_0;  // int32
  reg signed [31:0] crp_out_delay14_t_1;  // int32
  reg signed [31:0] Delay14_bypass_t_0_0;  // int32
  reg signed [31:0] Delay14_bypass_t_1;  // int32
  reg signed [31:0] Delay14_bypass_t_2;  // int32
  reg signed [31:0] Delay14_bypass_t_0_1;  // int32
  reg signed [31:0] Delay14_bypass_t_1_0;  // int32
  reg signed [31:0] Delay41_t_0_0;  // int32
  reg signed [31:0] Delay41_t_0_1;  // int32
  reg signed [31:0] Delay41_t_1;  // int32
  reg signed [31:0] rd_0_t_0_0_3;  // int32
  reg signed [31:0] rd_0_t_1_3;  // int32
  reg signed [31:0] PipelineRegister_t_0_0;  // int32
  reg signed [31:0] PipelineRegister_t_0_1;  // int32
  reg signed [31:0] PipelineRegister_t_1;  // int32
  reg signed [31:0] tapped_delay_t_0_09;  // int32
  reg signed [31:0] tapped_delay_t_19;  // int32
  reg signed [31:0] tapped_delay_t_0_1_8;  // int32
  reg signed [31:0] tapped_delay_t_1_0_8;  // int32
  reg signed [31:0] rd_5_t_0_0_1;  // int32
  reg signed [31:0] rd_5_t_1_1;  // int32
  reg signed [31:0] crp_out_delay15_t_0_0;  // int32
  reg signed [31:0] crp_out_delay15_t_1;  // int32
  reg signed [31:0] Delay71_bypass_t_0_0;  // int32
  reg signed [31:0] Delay71_bypass_t_1;  // int32
  reg signed [31:0] Delay71_bypass_t_2;  // int32
  reg signed [31:0] Delay71_bypass_t_0_1;  // int32
  reg signed [31:0] Delay71_bypass_t_1_0;  // int32
  reg signed [31:0] rd_2_t_0_0_1;  // int32
  reg signed [31:0] rd_2_t_1_1;  // int32
  reg signed [31:0] rd_0_t_0_0_4;  // int32
  reg signed [31:0] rd_0_t_1_4;  // int32
  reg signed [31:0] tapped_delay_t_0_010;  // int32
  reg signed [31:0] tapped_delay_t_110;  // int32
  reg signed [31:0] tapped_delay_t_0_1_9;  // int32
  reg signed [31:0] tapped_delay_t_1_0_9;  // int32
  reg signed [31:0] crp_out_delay16_t_0_0;  // int32
  reg signed [31:0] crp_out_delay16_t_1;  // int32
  reg signed [31:0] Delay91_bypass_t_0_0;  // int32
  reg signed [31:0] Delay91_bypass_t_1;  // int32
  reg signed [31:0] Delay91_bypass_t_2;  // int32
  reg signed [31:0] Delay91_bypass_t_0_1;  // int32
  reg signed [31:0] Delay91_bypass_t_1_0;  // int32
  reg signed [31:0] tapped_delay_t_0_011;  // int32
  reg signed [31:0] tapped_delay_t_111;  // int32
  reg signed [31:0] tapped_delay_t_0_1_10;  // int32
  reg signed [31:0] tapped_delay_t_1_0_10;  // int32


  FPGA_tc u_FPGA_tc (.clk(clk),
                     .reset(reset),
                     .clk_enable(clk_enable),
                     .enb(enb),
                     .enb_1_200_0(enb_1_200_0),
                     .enb_1_200_1(enb_1_200_1),
                     .enb_1_400_0(enb_1_400_0),
                     .enb_1_400_1(enb_1_400_1),
                     .enb_1_2000_1(enb_1_2000_1),
                     .enb_1_6000_0(enb_1_6000_0),
                     .enb_1_6000_1(enb_1_6000_1),
                     .enb_1_12000_0(enb_1_12000_0),
                     .enb_1_12000_1(enb_1_12000_1)
                     );

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 399
  always @(posedge clk or posedge reset)
    begin : ctr_0_399_process
      if (reset == 1'b1) begin
        s <= 9'b000000000;
      end
      else begin
        if (enb) begin
          if (s >= 9'b110001111) begin
            s <= 9'b000000000;
          end
          else begin
            s <= s + 9'b000000001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_5 = s <= 9'b000000101;

  always @(posedge clk or posedge reset)
    begin : rd_1_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_5_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_5_1 <= crp_temp_streamed_enb_phase_0_5;
        end
      end
    end

  assign enb_gated = crp_temp_streamed_enb_phase_0_5_1 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_process
      if (reset == 1'b1) begin
        counterSig <= 3'b000;
      end
      else begin
        if (enb_gated) begin
          if (counterSig >= 3'b101) begin
            counterSig <= 3'b000;
          end
          else begin
            counterSig <= counterSig + 3'b001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_5_2 = s <= 9'b000000101;

  always @(posedge clk or posedge reset)
    begin : rd_1_1_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_5_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_5_3 <= crp_temp_streamed_enb_phase_0_5_2;
        end
      end
    end

  assign enb_gated_1 = crp_temp_streamed_enb_phase_0_5_3 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_1_process
      if (reset == 1'b1) begin
        counterSig_1 <= 3'b000;
      end
      else begin
        if (enb_gated_1) begin
          if (counterSig_1 >= 3'b101) begin
            counterSig_1 <= 3'b000;
          end
          else begin
            counterSig_1 <= counterSig_1 + 3'b001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_5_4 = s <= 9'b000000101;

  always @(posedge clk or posedge reset)
    begin : rd_1_2_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_5_5 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_5_5 <= crp_temp_streamed_enb_phase_0_5_4;
        end
      end
    end

  assign enb_gated_2 = crp_temp_streamed_enb_phase_0_5_5 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_2_process
      if (reset == 1'b1) begin
        counterSig_2 <= 3'b000;
      end
      else begin
        if (enb_gated_2) begin
          if (counterSig_2 >= 3'b101) begin
            counterSig_2 <= 3'b000;
          end
          else begin
            counterSig_2 <= counterSig_2 + 3'b001;
          end
        end
      end
    end

  assign enb_counter_ge_9 = s >= 9'b000001001;

  always @(posedge clk or posedge reset)
    begin : rd_3_process
      if (reset == 1'b1) begin
        enb_counter_ge_9_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_ge_9_1 <= enb_counter_ge_9;
        end
      end
    end

  assign enb_counter_le_14_1 = s <= 9'b000001110;

  always @(posedge clk or posedge reset)
    begin : rd_4_process
      if (reset == 1'b1) begin
        enb_counter_le_14_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_le_14_2 <= enb_counter_le_14_1;
        end
      end
    end

  assign crp_temp_streamed_enb_phase_9_5 = enb_counter_ge_9_1 & enb_counter_le_14_2;

  assign enb_gated_3 = crp_temp_streamed_enb_phase_9_5 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_3_process
      if (reset == 1'b1) begin
        counterSig_3 <= 3'b000;
      end
      else begin
        if (enb_gated_3) begin
          if (counterSig_3 >= 3'b101) begin
            counterSig_3 <= 3'b000;
          end
          else begin
            counterSig_3 <= counterSig_3 + 3'b001;
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : rd_5_process
      if (reset == 1'b1) begin
        for(rd_5_t_1 = 32'sd0; rd_5_t_1 <= 32'sd1; rd_5_t_1 = rd_5_t_1 + 32'sd1) begin
          rd_5_reg[rd_5_t_1] <= 3'b000;
        end
      end
      else begin
        if (enb) begin
          for(rd_5_t_0_0 = 32'sd0; rd_5_t_0_0 <= 32'sd1; rd_5_t_0_0 = rd_5_t_0_0 + 32'sd1) begin
            rd_5_reg[rd_5_t_0_0] <= rd_5_reg_next[rd_5_t_0_0];
          end
        end
      end
    end

  assign counterSig_4 = rd_5_reg[1];
  assign rd_5_reg_next[0] = counterSig_3;
  assign rd_5_reg_next[1] = rd_5_reg[0];

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1999
  always @(posedge clk or posedge reset)
    begin : ctr_0_1999_process
      if (reset == 1'b1) begin
        s_1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          if (s_1 >= 11'b11111001111) begin
            s_1 <= 11'b00000000000;
          end
          else begin
            s_1 <= s_1 + 11'b00000000001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_5_6 = s_1 <= 11'b00000000101;

  always @(posedge clk or posedge reset)
    begin : rd_1_3_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_5_7 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_5_7 <= crp_temp_streamed_enb_phase_0_5_6;
        end
      end
    end

  assign enb_gated_4 = crp_temp_streamed_enb_phase_0_5_7 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_4_process
      if (reset == 1'b1) begin
        counterSig_5 <= 3'b000;
      end
      else begin
        if (enb_gated_4) begin
          if (counterSig_5 >= 3'b101) begin
            counterSig_5 <= 3'b000;
          end
          else begin
            counterSig_5 <= counterSig_5 + 3'b001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_5_8 = s_1 <= 11'b00000000101;

  always @(posedge clk or posedge reset)
    begin : rd_1_4_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_5_9 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_5_9 <= crp_temp_streamed_enb_phase_0_5_8;
        end
      end
    end

  assign enb_gated_5 = crp_temp_streamed_enb_phase_0_5_9 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_5_process
      if (reset == 1'b1) begin
        counterSig_6 <= 3'b000;
      end
      else begin
        if (enb_gated_5) begin
          if (counterSig_6 >= 3'b101) begin
            counterSig_6 <= 3'b000;
          end
          else begin
            counterSig_6 <= counterSig_6 + 3'b001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_5_10 = s_1 <= 11'b00000000101;

  always @(posedge clk or posedge reset)
    begin : rd_1_5_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_5_11 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_5_11 <= crp_temp_streamed_enb_phase_0_5_10;
        end
      end
    end

  assign enb_gated_6 = crp_temp_streamed_enb_phase_0_5_11 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5
  always @(posedge clk or posedge reset)
    begin : ctr_0_5_6_process
      if (reset == 1'b1) begin
        counterSig_7 <= 3'b000;
      end
      else begin
        if (enb_gated_6) begin
          if (counterSig_7 >= 3'b101) begin
            counterSig_7 <= 3'b000;
          end
          else begin
            counterSig_7 <= counterSig_7 + 3'b001;
          end
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4 = s_1 <= 11'b00000000100;

  always @(posedge clk or posedge reset)
    begin : rd_3_1_process
      if (reset == 1'b1) begin
        rd_3_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_3_reg[0] <= crp_temp_streamed_enb_phase_0_4;
          rd_3_reg[1] <= rd_3_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_1 = rd_3_reg[1];

  assign enb_gated_7 = crp_temp_streamed_enb_phase_0_4_1 && enb;

  assign crp_temp_streamed_enb_phase_5_0 = s_1 == 11'b00000000101;

  always @(posedge clk or posedge reset)
    begin : rd_6_process
      if (reset == 1'b1) begin
        rd_6_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_6_reg[0] <= crp_temp_streamed_enb_phase_5_0;
          rd_6_reg[32'sd2:32'sd1] <= rd_6_reg[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_1 = rd_6_reg[2];

  assign crp_temp_streamed_enb_phase_0_4_2 = s_1 <= 11'b00000000100;

  always @(posedge clk or posedge reset)
    begin : rd_10_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_4_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_4_3 <= crp_temp_streamed_enb_phase_0_4_2;
        end
      end
    end

  assign enb_gated_8 = crp_temp_streamed_enb_phase_0_4_3 && enb;

  assign crp_temp_streamed_enb_phase_5_0_2 = s_1 == 11'b00000000101;

  always @(posedge clk or posedge reset)
    begin : rd_13_process
      if (reset == 1'b1) begin
        rd_13_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_13_reg[0] <= crp_temp_streamed_enb_phase_5_0_2;
          rd_13_reg[1] <= rd_13_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_3 = rd_13_reg[1];

  always @(posedge clk or posedge reset)
    begin : rd_20_process
      if (reset == 1'b1) begin
        rd_20_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_20_reg[0] <= crp_temp_streamed_enb_phase_0_4;
          rd_20_reg[1] <= rd_20_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_4 = rd_20_reg[1];

  assign enb_gated_9 = crp_temp_streamed_enb_phase_0_4_4 && enb;

  always @(posedge clk or posedge reset)
    begin : rd_23_process
      if (reset == 1'b1) begin
        rd_23_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_23_reg[0] <= crp_temp_streamed_enb_phase_5_0;
          rd_23_reg[32'sd2:32'sd1] <= rd_23_reg[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_4 = rd_23_reg[2];

  always @(posedge clk or posedge reset)
    begin : rd_17_process
      if (reset == 1'b1) begin
        rd_17_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_17_reg[0] <= crp_temp_streamed_enb_phase_0_4_2;
          rd_17_reg[1] <= rd_17_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_5 = rd_17_reg[1];

  assign enb_gated_10 = crp_temp_streamed_enb_phase_0_4_5 && enb;

  always @(posedge clk or posedge reset)
    begin : rd_20_1_process
      if (reset == 1'b1) begin
        rd_20_reg_1 <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_20_reg_1[0] <= crp_temp_streamed_enb_phase_5_0_2;
          rd_20_reg_1[32'sd2:32'sd1] <= rd_20_reg_1[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_5 = rd_20_reg_1[2];

  assign crp_temp_enb_phase_0_0 = s_1 == 11'b00000000000;

  always @(posedge clk or posedge reset)
    begin : rd_1_6_process
      if (reset == 1'b1) begin
        crp_temp_enb_phase_0_0_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_enb_phase_0_0_1 <= crp_temp_enb_phase_0_0;
        end
      end
    end

  assign G_Dw_L3c_1 = G_Dw_L3c;

  always @(posedge clk or posedge reset)
    begin : rd_0_process
      if (reset == 1'b1) begin
        G_Dw_L3c_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          G_Dw_L3c_2 <= G_Dw_L3c_1;
        end
      end
    end

  assign G_Up_L3c_1 = G_Up_L3c;

  always @(posedge clk or posedge reset)
    begin : rd_1_7_process
      if (reset == 1'b1) begin
        G_Up_L3c_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          G_Up_L3c_2 <= G_Up_L3c_1;
        end
      end
    end

  assign G_Dw_L2c_1 = G_Dw_L2c;

  always @(posedge clk or posedge reset)
    begin : rd_2_process
      if (reset == 1'b1) begin
        G_Dw_L2c_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          G_Dw_L2c_2 <= G_Dw_L2c_1;
        end
      end
    end

  assign G_Up_L2c_1 = G_Up_L2c;

  always @(posedge clk or posedge reset)
    begin : rd_3_2_process
      if (reset == 1'b1) begin
        G_Up_L2c_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          G_Up_L2c_2 <= G_Up_L2c_1;
        end
      end
    end

  assign G_Dw_L1c_1 = G_Dw_L1c;

  always @(posedge clk or posedge reset)
    begin : rd_4_1_process
      if (reset == 1'b1) begin
        G_Dw_L1c_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          G_Dw_L1c_2 <= G_Dw_L1c_1;
        end
      end
    end

  assign G_Up_L1c_1 = G_Up_L1c;

  always @(posedge clk or posedge reset)
    begin : rd_5_1_process
      if (reset == 1'b1) begin
        G_Up_L1c_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          G_Up_L1c_2 <= G_Up_L1c_1;
        end
      end
    end

  assign Input_Concat_out1[0] = G_Dw_L3c_2;
  assign Input_Concat_out1[1] = G_Up_L3c_2;
  assign Input_Concat_out1[2] = G_Dw_L2c_2;
  assign Input_Concat_out1[3] = G_Up_L2c_2;
  assign Input_Concat_out1[4] = G_Dw_L1c_2;
  assign Input_Concat_out1[5] = G_Up_L1c_2;
  always @(posedge clk or posedge reset)
    begin : Rate_Transition3_out1_state_process
      if (reset == 1'b1) begin
        for(Rate_Transition3_out1_state_t_1 = 32'sd0; Rate_Transition3_out1_state_t_1 <= 32'sd5; Rate_Transition3_out1_state_t_1 = Rate_Transition3_out1_state_t_1 + 32'sd1) begin
          Rate_Transition3_out1_held[Rate_Transition3_out1_state_t_1] <= 30'b000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Rate_Transition3_out1_state_t_0_0 = 32'sd0; Rate_Transition3_out1_state_t_0_0 <= 32'sd5; Rate_Transition3_out1_state_t_0_0 = Rate_Transition3_out1_state_t_0_0 + 32'sd1) begin
            Rate_Transition3_out1_held[Rate_Transition3_out1_state_t_0_0] <= Rate_Transition3_out1[Rate_Transition3_out1_state_t_0_0];
          end
        end
      end
    end

  always @* begin
    if (crp_temp_enb_phase_0_0_1 == 1'b0) begin
      for(Rate_Transition3_out1_enb_t_1 = 32'sd0; Rate_Transition3_out1_enb_t_1 <= 32'sd5; Rate_Transition3_out1_enb_t_1 = Rate_Transition3_out1_enb_t_1 + 32'sd1) begin
        Rate_Transition3_out1[Rate_Transition3_out1_enb_t_1] = Rate_Transition3_out1_held[Rate_Transition3_out1_enb_t_1];
      end
    end
    else begin
      for(Rate_Transition3_out1_enb_t_0_0 = 32'sd0; Rate_Transition3_out1_enb_t_0_0 <= 32'sd5; Rate_Transition3_out1_enb_t_0_0 = Rate_Transition3_out1_enb_t_0_0 + 32'sd1) begin
        Rate_Transition3_out1[Rate_Transition3_out1_enb_t_0_0] = Input_Concat_out1[Rate_Transition3_out1_enb_t_0_0];
      end
    end
  end

  always @(posedge clk or posedge reset)
    begin : crp_out_delay1_process
      if (reset == 1'b1) begin
        for(crp_out_delay1_t_1 = 32'sd0; crp_out_delay1_t_1 <= 32'sd5; crp_out_delay1_t_1 = crp_out_delay1_t_1 + 32'sd1) begin
          Rate_Transition3_out1_1[crp_out_delay1_t_1] <= 30'b000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay1_t_0_0 = 32'sd0; crp_out_delay1_t_0_0 <= 32'sd5; crp_out_delay1_t_0_0 = crp_out_delay1_t_0_0 + 32'sd1) begin
            Rate_Transition3_out1_1[crp_out_delay1_t_0_0] <= Rate_Transition3_out1[crp_out_delay1_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay1_bypass_process
      if (reset == 1'b1) begin
        for(Delay1_bypass_t_1_0 = 32'sd0; Delay1_bypass_t_1_0 <= 32'sd5; Delay1_bypass_t_1_0 = Delay1_bypass_t_1_0 + 32'sd1) begin
          Delay1_bypass_reg[Delay1_bypass_t_1_0] <= 30'b000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay1_bypass_t_0_1 = 32'sd0; Delay1_bypass_t_0_1 <= 32'sd5; Delay1_bypass_t_0_1 = Delay1_bypass_t_0_1 + 32'sd1) begin
            Delay1_bypass_reg[Delay1_bypass_t_0_1] <= Delay1_bypass_reg_next[Delay1_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay1_bypass_t_1 = 32'sd0; Delay1_bypass_t_1 <= 32'sd5; Delay1_bypass_t_1 = Delay1_bypass_t_1 + 32'sd1) begin
        Delay1_out1[Delay1_bypass_t_1] = Rate_Transition3_out1_1[Delay1_bypass_t_1];
      end
    end
    else begin
      for(Delay1_bypass_t_0_0 = 32'sd0; Delay1_bypass_t_0_0 <= 32'sd5; Delay1_bypass_t_0_0 = Delay1_bypass_t_0_0 + 32'sd1) begin
        Delay1_out1[Delay1_bypass_t_0_0] = Delay1_bypass_reg[Delay1_bypass_t_0_0];
      end
    end

    for(Delay1_bypass_t_2 = 32'sd0; Delay1_bypass_t_2 <= 32'sd5; Delay1_bypass_t_2 = Delay1_bypass_t_2 + 32'sd1) begin
      Delay1_bypass_reg_next[Delay1_bypass_t_2] = Rate_Transition3_out1_1[Delay1_bypass_t_2];
    end

  end

  assign Delay1_out1_1[0] = Delay1_out1[0];
  assign Delay1_out1_1[1] = Delay1_out1[1];
  assign Delay1_out1_1[2] = Delay1_out1[2];
  assign Delay1_out1_1[3] = Delay1_out1[3];
  assign Delay1_out1_1[4] = Delay1_out1[4];
  assign Delay1_out1_1[5] = Delay1_out1[5];

  always @(posedge clk or posedge reset)
    begin : rd_7_process
      if (reset == 1'b1) begin
        for(rd_7_t_1 = 32'sd0; rd_7_t_1 <= 32'sd5; rd_7_t_1 = rd_7_t_1 + 32'sd1) begin
          Delay1_out1_2[rd_7_t_1] <= 30'b000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_7_t_0_0 = 32'sd0; rd_7_t_0_0 <= 32'sd5; rd_7_t_0_0 = rd_7_t_0_0 + 32'sd1) begin
            Delay1_out1_2[rd_7_t_0_0] <= Delay1_out1_1[rd_7_t_0_0];
          end
        end
      end
    end

  assign Delay1_out1_0 = Delay1_out1_2[0];

  assign Delay1_out1_1_1 = Delay1_out1_2[1];

  assign Delay1_out1_2_1 = Delay1_out1_2[2];

  assign Delay1_out1_3 = Delay1_out1_2[3];

  assign Delay1_out1_4 = Delay1_out1_2[4];

  assign Delay1_out1_5 = Delay1_out1_2[5];

  assign Delay1_out1_unbuffer = (counterSig_7 == 3'b000 ? Delay1_out1_0 :
              (counterSig_7 == 3'b001 ? Delay1_out1_1_1 :
              (counterSig_7 == 3'b010 ? Delay1_out1_2_1 :
              (counterSig_7 == 3'b011 ? Delay1_out1_3 :
              (counterSig_7 == 3'b100 ? Delay1_out1_4 :
              Delay1_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_8_process
      if (reset == 1'b1) begin
        Delay1_out1_unbuffer_1 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_unbuffer_1 <= Delay1_out1_unbuffer;
        end
      end
    end

  assign Compare_To_Constant2_cmpOut = Delay1_out1_unbuffer_1 >= 30'b000010110011001100110011001101;
  assign Compare_To_Constant2_out1 = {7'b0, Compare_To_Constant2_cmpOut};

  always @(posedge clk or posedge reset)
    begin : rd_9_process
      if (reset == 1'b1) begin
        rd_9_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_9_reg[0] <= crp_temp_streamed_enb_phase_0_4;
          rd_9_reg[1] <= rd_9_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_6 = rd_9_reg[1];

  assign enb_gated_11 = crp_temp_streamed_enb_phase_0_4_6 && enb;

  always @(posedge clk or posedge reset)
    begin : tapped_delay_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0 = 32'sd0; tapped_delay_t_1_0 <= 32'sd4; tapped_delay_t_1_0 = tapped_delay_t_1_0 + 32'sd1) begin
          tapped_delay_reg[tapped_delay_t_1_0] <= 8'b00000000;
        end
      end
      else begin
        if (enb_gated_11) begin
          for(tapped_delay_t_0_1 = 32'sd0; tapped_delay_t_0_1 <= 32'sd4; tapped_delay_t_0_1 = tapped_delay_t_0_1 + 32'sd1) begin
            tapped_delay_reg[tapped_delay_t_0_1] <= tapped_delay_reg_next[tapped_delay_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_0 = 32'sd0; tapped_delay_t_0_0 <= 32'sd4; tapped_delay_t_0_0 = tapped_delay_t_0_0 + 32'sd1) begin
      Compare_To_Constant2_out1_1[tapped_delay_t_0_0] = tapped_delay_reg[tapped_delay_t_0_0];
    end
    for(tapped_delay_t_1 = 32'sd0; tapped_delay_t_1 <= 32'sd3; tapped_delay_t_1 = tapped_delay_t_1 + 32'sd1) begin
      tapped_delay_reg_next[tapped_delay_t_1] = tapped_delay_reg[32'sd1 + tapped_delay_t_1];
    end

    tapped_delay_reg_next[4] = Compare_To_Constant2_out1;
  end

  assign Compare_To_Constant2_out1_2[0] = Compare_To_Constant2_out1_1[0];
  assign Compare_To_Constant2_out1_2[1] = Compare_To_Constant2_out1_1[1];
  assign Compare_To_Constant2_out1_2[2] = Compare_To_Constant2_out1_1[2];
  assign Compare_To_Constant2_out1_2[3] = Compare_To_Constant2_out1_1[3];
  assign Compare_To_Constant2_out1_2[4] = Compare_To_Constant2_out1_1[4];

  always @(posedge clk or posedge reset)
    begin : rd_11_process
      if (reset == 1'b1) begin
        for(rd_11_t_1 = 32'sd0; rd_11_t_1 <= 32'sd4; rd_11_t_1 = rd_11_t_1 + 32'sd1) begin
          Compare_To_Constant2_out1_3[rd_11_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_11_t_0_0 = 32'sd0; rd_11_t_0_0 <= 32'sd4; rd_11_t_0_0 = rd_11_t_0_0 + 32'sd1) begin
            Compare_To_Constant2_out1_3[rd_11_t_0_0] <= Compare_To_Constant2_out1_2[rd_11_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : rd_12_process
      if (reset == 1'b1) begin
        rd_12_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_12_reg[0] <= crp_temp_streamed_enb_phase_5_0;
          rd_12_reg[32'sd2:32'sd1] <= rd_12_reg[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_6 = rd_12_reg[2];

  always @(posedge clk or posedge reset)
    begin : rd_10_1_process
      if (reset == 1'b1) begin
        Compare_To_Constant2_out1_4 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Compare_To_Constant2_out1_4 <= Compare_To_Constant2_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Compare_To_Constant2_out1_state_process
      if (reset == 1'b1) begin
        Compare_To_Constant2_out1_held <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Compare_To_Constant2_out1_held <= Compare_To_Constant2_out1_5;
        end
      end
    end

  assign Compare_To_Constant2_out1_5 = (crp_temp_streamed_enb_phase_5_0_6 == 1'b0 ? Compare_To_Constant2_out1_held :
              Compare_To_Constant2_out1_4);

  assign Compare_To_Constant2_out1_6[0] = Compare_To_Constant2_out1_3[0];
  assign Compare_To_Constant2_out1_6[1] = Compare_To_Constant2_out1_3[1];
  assign Compare_To_Constant2_out1_6[2] = Compare_To_Constant2_out1_3[2];
  assign Compare_To_Constant2_out1_6[3] = Compare_To_Constant2_out1_3[3];
  assign Compare_To_Constant2_out1_6[4] = Compare_To_Constant2_out1_3[4];
  assign Compare_To_Constant2_out1_6[5] = Compare_To_Constant2_out1_5;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay4_process
      if (reset == 1'b1) begin
        for(crp_out_delay4_t_1 = 32'sd0; crp_out_delay4_t_1 <= 32'sd5; crp_out_delay4_t_1 = crp_out_delay4_t_1 + 32'sd1) begin
          Compare_To_Constant2_out1_7[crp_out_delay4_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay4_t_0_0 = 32'sd0; crp_out_delay4_t_0_0 <= 32'sd5; crp_out_delay4_t_0_0 = crp_out_delay4_t_0_0 + 32'sd1) begin
            Compare_To_Constant2_out1_7[crp_out_delay4_t_0_0] <= Compare_To_Constant2_out1_6[crp_out_delay4_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay4_bypass_process
      if (reset == 1'b1) begin
        for(Delay4_bypass_t_1_0 = 32'sd0; Delay4_bypass_t_1_0 <= 32'sd5; Delay4_bypass_t_1_0 = Delay4_bypass_t_1_0 + 32'sd1) begin
          Delay4_bypass_reg[Delay4_bypass_t_1_0] <= 8'b00000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay4_bypass_t_0_1 = 32'sd0; Delay4_bypass_t_0_1 <= 32'sd5; Delay4_bypass_t_0_1 = Delay4_bypass_t_0_1 + 32'sd1) begin
            Delay4_bypass_reg[Delay4_bypass_t_0_1] <= Delay4_bypass_reg_next[Delay4_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay4_bypass_t_1 = 32'sd0; Delay4_bypass_t_1 <= 32'sd5; Delay4_bypass_t_1 = Delay4_bypass_t_1 + 32'sd1) begin
        Delay4_out1[Delay4_bypass_t_1] = Compare_To_Constant2_out1_7[Delay4_bypass_t_1];
      end
    end
    else begin
      for(Delay4_bypass_t_0_0 = 32'sd0; Delay4_bypass_t_0_0 <= 32'sd5; Delay4_bypass_t_0_0 = Delay4_bypass_t_0_0 + 32'sd1) begin
        Delay4_out1[Delay4_bypass_t_0_0] = Delay4_bypass_reg[Delay4_bypass_t_0_0];
      end
    end

    for(Delay4_bypass_t_2 = 32'sd0; Delay4_bypass_t_2 <= 32'sd5; Delay4_bypass_t_2 = Delay4_bypass_t_2 + 32'sd1) begin
      Delay4_bypass_reg_next[Delay4_bypass_t_2] = Compare_To_Constant2_out1_7[Delay4_bypass_t_2];
    end

  end

  assign Delay4_out1_1[0] = Delay4_out1[0];
  assign Delay4_out1_1[1] = Delay4_out1[1];
  assign Delay4_out1_1[2] = Delay4_out1[2];
  assign Delay4_out1_1[3] = Delay4_out1[3];
  assign Delay4_out1_1[4] = Delay4_out1[4];
  assign Delay4_out1_1[5] = Delay4_out1[5];

  always @(posedge clk or posedge reset)
    begin : rd_0_1_process
      if (reset == 1'b1) begin
        for(rd_0_t_1 = 32'sd0; rd_0_t_1 <= 32'sd5; rd_0_t_1 = rd_0_t_1 + 32'sd1) begin
          Delay4_out1_2[rd_0_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0 = 32'sd0; rd_0_t_0_0 <= 32'sd5; rd_0_t_0_0 = rd_0_t_0_0 + 32'sd1) begin
            Delay4_out1_2[rd_0_t_0_0] <= Delay4_out1_1[rd_0_t_0_0];
          end
        end
      end
    end

  assign Delay4_out1_0 = Delay4_out1_2[0];

  assign Delay4_out1_1_1 = Delay4_out1_2[1];

  assign Delay4_out1_2_1 = Delay4_out1_2[2];

  assign Delay4_out1_3 = Delay4_out1_2[3];

  assign Delay4_out1_4 = Delay4_out1_2[4];

  assign Delay4_out1_5 = Delay4_out1_2[5];

  assign Delay4_out1_unbuffer = (counterSig_6 == 3'b000 ? Delay4_out1_0 :
              (counterSig_6 == 3'b001 ? Delay4_out1_1_1 :
              (counterSig_6 == 3'b010 ? Delay4_out1_2_1 :
              (counterSig_6 == 3'b011 ? Delay4_out1_3 :
              (counterSig_6 == 3'b100 ? Delay4_out1_4 :
              Delay4_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_3_3_process
      if (reset == 1'b1) begin
        Delay4_out1_unbuffer_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_unbuffer_1 <= Delay4_out1_unbuffer;
        end
      end
    end

  assign Delay4_out1_unbuffer_is_not0 = Delay4_out1_unbuffer_1 != 8'b00000000;

  always @(posedge clk or posedge reset)
    begin : rd_14_process
      if (reset == 1'b1) begin
        rd_14_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_14_reg[0] <= crp_temp_streamed_enb_phase_0_4;
          rd_14_reg[1] <= rd_14_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_7 = rd_14_reg[1];

  assign enb_gated_12 = crp_temp_streamed_enb_phase_0_4_7 && enb;

  always @(posedge clk or posedge reset)
    begin : rd_17_1_process
      if (reset == 1'b1) begin
        rd_17_reg_1 <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_17_reg_1[0] <= crp_temp_streamed_enb_phase_5_0;
          rd_17_reg_1[32'sd2:32'sd1] <= rd_17_reg_1[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_7 = rd_17_reg_1[2];

  always @(posedge clk or posedge reset)
    begin : rd_5_2_process
      if (reset == 1'b1) begin
        rd_5_reg_1 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_5_reg_1[0] <= crp_temp_streamed_enb_phase_0_4_2;
          rd_5_reg_1[1] <= rd_5_reg_1[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_8 = rd_5_reg_1[1];

  assign enb_gated_13 = crp_temp_streamed_enb_phase_0_4_8 && enb;

  always @(posedge clk or posedge reset)
    begin : rd_8_1_process
      if (reset == 1'b1) begin
        rd_8_reg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_8_reg[0] <= crp_temp_streamed_enb_phase_5_0_2;
          rd_8_reg[32'sd2:32'sd1] <= rd_8_reg[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_8 = rd_8_reg[2];

  assign enb_counter_ge_4_1 = s_1 >= 11'b00000000100;

  always @(posedge clk or posedge reset)
    begin : rd_4_2_process
      if (reset == 1'b1) begin
        enb_counter_ge_4_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_ge_4_2 <= enb_counter_ge_4_1;
        end
      end
    end

  assign enb_counter_le_8_1 = s_1 <= 11'b00000001000;

  always @(posedge clk or posedge reset)
    begin : rd_5_3_process
      if (reset == 1'b1) begin
        enb_counter_le_8_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_le_8_2 <= enb_counter_le_8_1;
        end
      end
    end

  assign crp_temp_streamed_enb_phase_4_4 = enb_counter_ge_4_2 & enb_counter_le_8_2;

  assign enb_gated_14 = crp_temp_streamed_enb_phase_4_4 && enb;

  assign crp_temp_streamed_enb_phase_9_0 = s_1 == 11'b00000001001;

  always @(posedge clk or posedge reset)
    begin : rd_8_2_process
      if (reset == 1'b1) begin
        rd_8_reg_1 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_8_reg_1[0] <= crp_temp_streamed_enb_phase_9_0;
          rd_8_reg_1[1] <= rd_8_reg_1[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_9_0_1 = rd_8_reg_1[1];

  assign enb_counter_ge_9_3 = s >= 9'b000001001;

  always @(posedge clk or posedge reset)
    begin : rd_6_1_process
      if (reset == 1'b1) begin
        enb_counter_ge_9_4 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_ge_9_4 <= enb_counter_ge_9_3;
        end
      end
    end

  assign enb_counter_le_13_1 = s <= 9'b000001101;

  always @(posedge clk or posedge reset)
    begin : rd_7_1_process
      if (reset == 1'b1) begin
        enb_counter_le_13_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_le_13_2 <= enb_counter_le_13_1;
        end
      end
    end

  assign crp_temp_streamed_enb_phase_9_4 = enb_counter_ge_9_4 & enb_counter_le_13_2;

  always @(posedge clk or posedge reset)
    begin : rd_8_3_process
      if (reset == 1'b1) begin
        rd_8_reg_2 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_8_reg_2[0] <= crp_temp_streamed_enb_phase_9_4;
          rd_8_reg_2[1] <= rd_8_reg_2[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_9_4_1 = rd_8_reg_2[1];

  assign enb_gated_15 = crp_temp_streamed_enb_phase_9_4_1 && enb;

  assign crp_temp_streamed_enb_phase_14_0 = s == 9'b000001110;

  always @(posedge clk or posedge reset)
    begin : rd_11_1_process
      if (reset == 1'b1) begin
        rd_11_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          rd_11_reg[0] <= crp_temp_streamed_enb_phase_14_0;
          rd_11_reg[32'sd3:32'sd1] <= rd_11_reg[32'sd2:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_14_0_1 = rd_11_reg[3];

  assign crp_temp_streamed_enb_phase_0_4_9 = s <= 9'b000000100;

  always @(posedge clk or posedge reset)
    begin : rd_5_4_process
      if (reset == 1'b1) begin
        rd_5_reg_2 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_5_reg_2[0] <= crp_temp_streamed_enb_phase_0_4_9;
          rd_5_reg_2[1] <= rd_5_reg_2[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_10 = rd_5_reg_2[1];

  assign enb_gated_16 = crp_temp_streamed_enb_phase_0_4_10 && enb;

  assign crp_temp_streamed_enb_phase_5_0_9 = s == 9'b000000101;

  always @(posedge clk or posedge reset)
    begin : rd_8_4_process
      if (reset == 1'b1) begin
        rd_8_reg_3 <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_8_reg_3[0] <= crp_temp_streamed_enb_phase_5_0_9;
          rd_8_reg_3[32'sd2:32'sd1] <= rd_8_reg_3[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_10 = rd_8_reg_3[2];

  assign Delay13_ctrl_const_out = 1'b1;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay11_process
      if (reset == 1'b1) begin
        Delay13_ctrl_const_out_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_ctrl_const_out_1 <= Delay13_ctrl_const_out;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay13_ctrl_delay_bypass_process
      if (reset == 1'b1) begin
        Delay13_ctrl_delay_bypass_reg <= 1'b0;
      end
      else begin
        if (enb_1_400_1) begin
          Delay13_ctrl_delay_bypass_reg <= Delay13_ctrl_const_out_1;
        end
      end
    end

  assign Delay13_ctrl_delay_out = (enb_1_400_1 == 1'b1 ? Delay13_ctrl_const_out_1 :
              Delay13_ctrl_delay_bypass_reg);

  assign Delay13_ctrl_delay_out_1 = Delay13_ctrl_delay_out;

  always @(posedge clk or posedge reset)
    begin : rd_1_8_process
      if (reset == 1'b1) begin
        Delay13_ctrl_delay_out_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay13_ctrl_delay_out_2 <= Delay13_ctrl_delay_out_1;
        end
      end
    end

  assign Delay13_Initial_Val_out = 30'b000000000000000000010100101010;

  assign Constant_out1 = 30'b110011001100110011001100110011;
  always @(posedge clk or posedge reset)
    begin : crp_out_delay10_process
      if (reset == 1'b1) begin
        Constant_out1_1 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Constant_out1_1 <= Constant_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay13_bypass_process
      if (reset == 1'b1) begin
        Delay13_bypass_reg <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb_1_400_1) begin
          Delay13_bypass_reg <= Constant_out1_1;
        end
      end
    end

  assign Delay13_out = (enb_1_400_1 == 1'b1 ? Constant_out1_1 :
              Delay13_bypass_reg);

  assign Delay13_out_1 = Delay13_out;

  always @(posedge clk or posedge reset)
    begin : rd_0_2_process
      if (reset == 1'b1) begin
        Delay13_out_2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out_2 <= Delay13_out_1;
        end
      end
    end

  assign Delay13_out1 = (Delay13_ctrl_delay_out_2 == 1'b0 ? Delay13_Initial_Val_out :
              Delay13_out_2);

  always @(posedge clk or posedge reset)
    begin : crp_out_delay12_process
      if (reset == 1'b1) begin
        Delay13_out1_1 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1_1 <= Delay13_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay21_bypass_process
      if (reset == 1'b1) begin
        Delay21_bypass_reg <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb_1_400_1) begin
          Delay21_bypass_reg <= Delay13_out1_1;
        end
      end
    end

  assign Ade1 = (enb_1_400_1 == 1'b1 ? Delay13_out1_1 :
              Delay21_bypass_reg);

  assign Ade1_1 = Ade1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Ade2 <= 30'b000000000000000000000000000000;
      end
      else begin
        if (enb_1_400_0) begin
          Ade2 <= Ade1_1;
        end
      end
    end
  assign Ade2_1 = Ade2;

  always @(posedge clk or posedge reset)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        for(HwModeRegister1_t_1 = 32'sd0; HwModeRegister1_t_1 <= 32'sd1; HwModeRegister1_t_1 = HwModeRegister1_t_1 + 32'sd1) begin
          HwModeRegister1_reg[HwModeRegister1_t_1] <= 30'b000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister1_t_0_0 = 32'sd0; HwModeRegister1_t_0_0 <= 32'sd1; HwModeRegister1_t_0_0 = HwModeRegister1_t_0_0 + 32'sd1) begin
            HwModeRegister1_reg[HwModeRegister1_t_0_0] <= HwModeRegister1_reg_next[HwModeRegister1_t_0_0];
          end
        end
      end
    end

  assign Ade2_2 = HwModeRegister1_reg[1];
  assign HwModeRegister1_reg_next[0] = Ade2_1;
  assign HwModeRegister1_reg_next[1] = HwModeRegister1_reg[0];

  assign enb_counter_ge_4_4 = s >= 9'b000000100;

  always @(posedge clk or posedge reset)
    begin : rd_3_4_process
      if (reset == 1'b1) begin
        enb_counter_ge_4_5 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_ge_4_5 <= enb_counter_ge_4_4;
        end
      end
    end

  assign enb_counter_le_8_4 = s <= 9'b000001000;

  always @(posedge clk or posedge reset)
    begin : rd_4_3_process
      if (reset == 1'b1) begin
        enb_counter_le_8_5 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_le_8_5 <= enb_counter_le_8_4;
        end
      end
    end

  assign crp_temp_streamed_enb_phase_4_4_1 = enb_counter_ge_4_5 & enb_counter_le_8_5;

  assign enb_gated_17 = crp_temp_streamed_enb_phase_4_4_1 && enb;

  assign crp_temp_streamed_enb_phase_9_0_2 = s == 9'b000001001;

  always @(posedge clk or posedge reset)
    begin : rd_7_2_process
      if (reset == 1'b1) begin
        rd_7_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_7_reg[0] <= crp_temp_streamed_enb_phase_9_0_2;
          rd_7_reg[1] <= rd_7_reg[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_9_0_3 = rd_7_reg[1];

  assign crp_temp_streamed_enb_phase_0_4_11 = s <= 9'b000000100;

  always @(posedge clk or posedge reset)
    begin : rd_5_5_process
      if (reset == 1'b1) begin
        rd_5_reg_3 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_5_reg_3[0] <= crp_temp_streamed_enb_phase_0_4_11;
          rd_5_reg_3[1] <= rd_5_reg_3[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_0_4_12 = rd_5_reg_3[1];

  assign enb_gated_18 = crp_temp_streamed_enb_phase_0_4_12 && enb;

  assign crp_temp_streamed_enb_phase_5_0_11 = s == 9'b000000101;

  always @(posedge clk or posedge reset)
    begin : rd_8_5_process
      if (reset == 1'b1) begin
        rd_8_reg_4 <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          rd_8_reg_4[0] <= crp_temp_streamed_enb_phase_5_0_11;
          rd_8_reg_4[32'sd2:32'sd1] <= rd_8_reg_4[32'sd1:32'sd0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_12 = rd_8_reg_4[2];

  always @(posedge clk or posedge reset)
    begin : rd_9_1_process
      if (reset == 1'b1) begin
        crp_temp_streamed_enb_phase_0_4_13 <= 1'b0;
      end
      else begin
        if (enb) begin
          crp_temp_streamed_enb_phase_0_4_13 <= crp_temp_streamed_enb_phase_0_4_9;
        end
      end
    end

  assign enb_gated_19 = crp_temp_streamed_enb_phase_0_4_13 && enb;

  always @(posedge clk or posedge reset)
    begin : rd_12_1_process
      if (reset == 1'b1) begin
        rd_12_reg_1 <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_12_reg_1[0] <= crp_temp_streamed_enb_phase_5_0_9;
          rd_12_reg_1[1] <= rd_12_reg_1[0];
        end
      end
    end

  assign crp_temp_streamed_enb_phase_5_0_13 = rd_12_reg_1[1];

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 11999
  always @(posedge clk or posedge reset)
    begin : ctr_0_11999_process
      if (reset == 1'b1) begin
        s_2 <= 14'b00000000000000;
      end
      else begin
        if (enb_1_12000_0) begin
          if (s_2 >= 14'b10111011011111) begin
            s_2 <= 14'b00000000000000;
          end
          else begin
            s_2 <= s_2 + 14'b00000000000001;
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : rd_10_2_process
      if (reset == 1'b1) begin
        ic_dsp <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ic_dsp <= P_unbuffer;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : ic_dsp_state_process
      if (reset == 1'b1) begin
        ic_dsp_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ic_dsp_held <= ic_dsp_1;
        end
      end
    end

  assign ic_dsp_1 = (crp_temp_streamed_enb_phase_5_0_13 == 1'b0 ? ic_dsp_held :
              ic_dsp);

  assign P_5 = P[5];

  assign P_4 = P[4];

  assign P_3 = P[3];

  assign P_2 = P[2];

  assign P_1 = P[1];

  always @(posedge clk or posedge reset)
    begin : rd_7_3_process
      if (reset == 1'b1) begin
        add_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          add_1 <= add;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : add_state_process
      if (reset == 1'b1) begin
        add_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          add_held <= add_2;
        end
      end
    end

  assign add_2 = (crp_temp_streamed_enb_phase_5_0_12 == 1'b0 ? add_held :
              add_1);

  assign multde_5 = multde[5];

  assign multde_4 = multde[4];

  assign multde_3 = multde[3];

  assign multde_2 = multde[2];

  assign multde_1 = multde[1];

  always @(posedge clk or posedge reset)
    begin : rd_6_2_process
      if (reset == 1'b1) begin
        mult_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          mult_1 <= mult;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : mult_state_process
      if (reset == 1'b1) begin
        mult_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          mult_held <= mult_2;
        end
      end
    end

  assign mult_2 = (crp_temp_streamed_enb_phase_9_0_3 == 1'b0 ? mult_held :
              mult_1);

  assign Bde2_5 = Bde2[5];

  assign Bde2_4 = Bde2[4];

  assign Bde2_3 = Bde2[3];

  assign Bde2_2 = Bde2[2];

  assign Bde2_1 = Bde2[1];

  always @(posedge clk or posedge reset)
    begin : rd_6_3_process
      if (reset == 1'b1) begin
        Subtract_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Subtract_out1_1 <= Subtract_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Subtract_out1_state_process
      if (reset == 1'b1) begin
        Subtract_out1_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Subtract_out1_held <= Subtract_out1_2;
        end
      end
    end

  assign Subtract_out1_2 = (crp_temp_streamed_enb_phase_5_0_10 == 1'b0 ? Subtract_out1_held :
              Subtract_out1_1);

  always @(posedge clk or posedge reset)
    begin : rd_4_4_process
      if (reset == 1'b1) begin
        ic_dsp_4 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          ic_dsp_4 <= P_unbuffer;
        end
      end
    end

  assign Delay15_out1_5 = Delay15_out1[5];

  assign Delay15_out1_4 = Delay15_out1[4];

  assign Delay15_out1_3 = Delay15_out1[3];

  assign Delay15_out1_2 = Delay15_out1[2];

  assign Delay15_out1_1 = Delay15_out1[1];

  always @(posedge clk or posedge reset)
    begin : rd_10_3_process
      if (reset == 1'b1) begin
        Rate_Transition1_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition1_out1 <= Rate_Transition1_out1_unbuffer;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Rate_Transition1_out1_state_process
      if (reset == 1'b1) begin
        Rate_Transition1_out1_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Rate_Transition1_out1_held <= Rate_Transition1_out1_1;
        end
      end
    end

  assign Rate_Transition1_out1_1 = (crp_temp_streamed_enb_phase_14_0_1 == 1'b0 ? Rate_Transition1_out1_held :
              Rate_Transition1_out1);

  assign Rate_Transition1_out1_5 = Rate_Transition1_out1_4[5];

  assign Rate_Transition1_out1_4_1 = Rate_Transition1_out1_4[4];

  assign Rate_Transition1_out1_3_1 = Rate_Transition1_out1_4[3];

  assign Rate_Transition1_out1_2_1 = Rate_Transition1_out1_4[2];

  assign Rate_Transition1_out1_1_1 = Rate_Transition1_out1_4[1];

  always @(posedge clk or posedge reset)
    begin : rd_7_4_process
      if (reset == 1'b1) begin
        Multiply_Add_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_Add_out1_1 <= Multiply_Add_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Multiply_Add_out1_state_process
      if (reset == 1'b1) begin
        Multiply_Add_out1_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_Add_out1_held <= Multiply_Add_out1_2;
        end
      end
    end

  assign Multiply_Add_out1_2 = (crp_temp_streamed_enb_phase_9_0_1 == 1'b0 ? Multiply_Add_out1_held :
              Multiply_Add_out1_1);

  assign Delay8_out1_5 = Delay8_out1[5];

  assign Delay8_out1_4 = Delay8_out1[4];

  assign Delay8_out1_3 = Delay8_out1[3];

  assign Delay8_out1_2 = Delay8_out1[2];

  assign Delay8_out1_1 = Delay8_out1[1];

  always @(posedge clk or posedge reset)
    begin : rd_6_4_process
      if (reset == 1'b1) begin
        OR_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          OR_out1_1 <= OR_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : OR_out1_state_process
      if (reset == 1'b1) begin
        OR_out1_held <= 1'b0;
      end
      else begin
        if (enb) begin
          OR_out1_held <= OR_out1_2;
        end
      end
    end

  assign OR_out1_2 = (crp_temp_streamed_enb_phase_5_0_8 == 1'b0 ? OR_out1_held :
              OR_out1_1);

  assign Delay5_out1_5 = Delay5_out1[5];

  assign Delay5_out1_4 = Delay5_out1[4];

  assign Delay5_out1_3 = Delay5_out1[3];

  assign Delay5_out1_2 = Delay5_out1[2];

  assign Delay5_out1_1 = Delay5_out1[1];

  always @(posedge clk or posedge reset)
    begin : rd_15_process
      if (reset == 1'b1) begin
        Compare_To_Constant1_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Compare_To_Constant1_out1_1 <= Compare_To_Constant1_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Compare_To_Constant1_out1_state_process
      if (reset == 1'b1) begin
        Compare_To_Constant1_out1_held <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Compare_To_Constant1_out1_held <= Compare_To_Constant1_out1_2;
        end
      end
    end

  assign Compare_To_Constant1_out1_2 = (crp_temp_streamed_enb_phase_5_0_7 == 1'b0 ? Compare_To_Constant1_out1_held :
              Compare_To_Constant1_out1_1);

  always @(posedge clk or posedge reset)
    begin : rd_13_1_process
      if (reset == 1'b1) begin
        Delay2_out1_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_unbuffer_1 <= Delay2_out1_unbuffer;
        end
      end
    end

  assign Compare_To_Constant1_cmpOut = Delay2_out1_unbuffer_1 <= 30'sb111111111111111110100110011010;
  assign Compare_To_Constant1_out1 = {7'b0, Compare_To_Constant1_cmpOut};

  always @(posedge clk or posedge reset)
    begin : tapped_delay_1_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0 = 32'sd0; tapped_delay_t_1_0 <= 32'sd4; tapped_delay_t_1_0 = tapped_delay_t_1_0 + 32'sd1) begin
          tapped_delay_reg_1[tapped_delay_t_1_0] <= 8'b00000000;
        end
      end
      else begin
        if (enb_gated_12) begin
          for(tapped_delay_t_0_1 = 32'sd0; tapped_delay_t_0_1 <= 32'sd4; tapped_delay_t_0_1 = tapped_delay_t_0_1 + 32'sd1) begin
            tapped_delay_reg_1[tapped_delay_t_0_1] <= tapped_delay_reg_next_1[tapped_delay_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_01 = 32'sd0; tapped_delay_t_0_01 <= 32'sd4; tapped_delay_t_0_01 = tapped_delay_t_0_01 + 32'sd1) begin
      Compare_To_Constant1_out1_4[tapped_delay_t_0_01] = tapped_delay_reg_1[tapped_delay_t_0_01];
    end
    for(tapped_delay_t_11 = 32'sd0; tapped_delay_t_11 <= 32'sd3; tapped_delay_t_11 = tapped_delay_t_11 + 32'sd1) begin
      tapped_delay_reg_next_1[tapped_delay_t_11] = tapped_delay_reg_1[32'sd1 + tapped_delay_t_11];
    end

    tapped_delay_reg_next_1[4] = Compare_To_Constant1_out1;
  end

  assign Compare_To_Constant1_out1_5[0] = Compare_To_Constant1_out1_4[0];
  assign Compare_To_Constant1_out1_5[1] = Compare_To_Constant1_out1_4[1];
  assign Compare_To_Constant1_out1_5[2] = Compare_To_Constant1_out1_4[2];
  assign Compare_To_Constant1_out1_5[3] = Compare_To_Constant1_out1_4[3];
  assign Compare_To_Constant1_out1_5[4] = Compare_To_Constant1_out1_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_16_process
      if (reset == 1'b1) begin
        for(rd_16_t_1 = 32'sd0; rd_16_t_1 <= 32'sd4; rd_16_t_1 = rd_16_t_1 + 32'sd1) begin
          Compare_To_Constant1_out1_3[rd_16_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_16_t_0_0 = 32'sd0; rd_16_t_0_0 <= 32'sd4; rd_16_t_0_0 = rd_16_t_0_0 + 32'sd1) begin
            Compare_To_Constant1_out1_3[rd_16_t_0_0] <= Compare_To_Constant1_out1_5[rd_16_t_0_0];
          end
        end
      end
    end

  assign Compare_To_Constant1_out1_6[0] = Compare_To_Constant1_out1_3[0];
  assign Compare_To_Constant1_out1_6[1] = Compare_To_Constant1_out1_3[1];
  assign Compare_To_Constant1_out1_6[2] = Compare_To_Constant1_out1_3[2];
  assign Compare_To_Constant1_out1_6[3] = Compare_To_Constant1_out1_3[3];
  assign Compare_To_Constant1_out1_6[4] = Compare_To_Constant1_out1_3[4];
  assign Compare_To_Constant1_out1_6[5] = Compare_To_Constant1_out1_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay5_process
      if (reset == 1'b1) begin
        for(crp_out_delay5_t_1 = 32'sd0; crp_out_delay5_t_1 <= 32'sd5; crp_out_delay5_t_1 = crp_out_delay5_t_1 + 32'sd1) begin
          Compare_To_Constant1_out1_7[crp_out_delay5_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay5_t_0_0 = 32'sd0; crp_out_delay5_t_0_0 <= 32'sd5; crp_out_delay5_t_0_0 = crp_out_delay5_t_0_0 + 32'sd1) begin
            Compare_To_Constant1_out1_7[crp_out_delay5_t_0_0] <= Compare_To_Constant1_out1_6[crp_out_delay5_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay51_bypass_process
      if (reset == 1'b1) begin
        for(Delay51_bypass_t_1_0 = 32'sd0; Delay51_bypass_t_1_0 <= 32'sd5; Delay51_bypass_t_1_0 = Delay51_bypass_t_1_0 + 32'sd1) begin
          Delay51_bypass_reg[Delay51_bypass_t_1_0] <= 8'b00000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay51_bypass_t_0_1 = 32'sd0; Delay51_bypass_t_0_1 <= 32'sd5; Delay51_bypass_t_0_1 = Delay51_bypass_t_0_1 + 32'sd1) begin
            Delay51_bypass_reg[Delay51_bypass_t_0_1] <= Delay51_bypass_reg_next[Delay51_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay51_bypass_t_1 = 32'sd0; Delay51_bypass_t_1 <= 32'sd5; Delay51_bypass_t_1 = Delay51_bypass_t_1 + 32'sd1) begin
        Delay5_out1_6[Delay51_bypass_t_1] = Compare_To_Constant1_out1_7[Delay51_bypass_t_1];
      end
    end
    else begin
      for(Delay51_bypass_t_0_0 = 32'sd0; Delay51_bypass_t_0_0 <= 32'sd5; Delay51_bypass_t_0_0 = Delay51_bypass_t_0_0 + 32'sd1) begin
        Delay5_out1_6[Delay51_bypass_t_0_0] = Delay51_bypass_reg[Delay51_bypass_t_0_0];
      end
    end

    for(Delay51_bypass_t_2 = 32'sd0; Delay51_bypass_t_2 <= 32'sd5; Delay51_bypass_t_2 = Delay51_bypass_t_2 + 32'sd1) begin
      Delay51_bypass_reg_next[Delay51_bypass_t_2] = Compare_To_Constant1_out1_7[Delay51_bypass_t_2];
    end

  end

  assign Delay5_out1_7[0] = Delay5_out1_6[0];
  assign Delay5_out1_7[1] = Delay5_out1_6[1];
  assign Delay5_out1_7[2] = Delay5_out1_6[2];
  assign Delay5_out1_7[3] = Delay5_out1_6[3];
  assign Delay5_out1_7[4] = Delay5_out1_6[4];
  assign Delay5_out1_7[5] = Delay5_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_2_1_process
      if (reset == 1'b1) begin
        for(rd_2_t_1 = 32'sd0; rd_2_t_1 <= 32'sd5; rd_2_t_1 = rd_2_t_1 + 32'sd1) begin
          Delay5_out1[rd_2_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_2_t_0_0 = 32'sd0; rd_2_t_0_0 <= 32'sd5; rd_2_t_0_0 = rd_2_t_0_0 + 32'sd1) begin
            Delay5_out1[rd_2_t_0_0] <= Delay5_out1_7[rd_2_t_0_0];
          end
        end
      end
    end

  assign Delay5_out1_0 = Delay5_out1[0];

  assign Delay5_out1_unbuffer = (counterSig_6 == 3'b000 ? Delay5_out1_0 :
              (counterSig_6 == 3'b001 ? Delay5_out1_1 :
              (counterSig_6 == 3'b010 ? Delay5_out1_2 :
              (counterSig_6 == 3'b011 ? Delay5_out1_3 :
              (counterSig_6 == 3'b100 ? Delay5_out1_4 :
              Delay5_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_4_5_process
      if (reset == 1'b1) begin
        Delay5_out1_unbuffer_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_unbuffer_1 <= Delay5_out1_unbuffer;
        end
      end
    end

  assign Delay5_out1_unbuffer_is_not0 = Delay5_out1_unbuffer_1 != 8'b00000000;

  assign OR_out1 = Delay4_out1_unbuffer_is_not0 | Delay5_out1_unbuffer_is_not0;
  always @(posedge clk or posedge reset)
    begin : tapped_delay_2_process
      if (reset == 1'b1) begin
        OR_out1_4 <= {5{1'b0}};
      end
      else begin
        if (enb_gated_13) begin
          OR_out1_4[4] <= OR_out1;
          OR_out1_4[32'sd3:32'sd0] <= OR_out1_4[32'sd4:32'sd1];
        end
      end
    end

  assign OR_out1_5[0] = OR_out1_4[0];
  assign OR_out1_5[1] = OR_out1_4[1];
  assign OR_out1_5[2] = OR_out1_4[2];
  assign OR_out1_5[3] = OR_out1_4[3];
  assign OR_out1_5[4] = OR_out1_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_7_5_process
      if (reset == 1'b1) begin
        OR_out1_3 <= {5{1'b0}};
      end
      else begin
        if (enb) begin
          OR_out1_3 <= OR_out1_5;
        end
      end
    end

  assign OR_out1_6[0] = OR_out1_3[0];
  assign OR_out1_6[1] = OR_out1_3[1];
  assign OR_out1_6[2] = OR_out1_3[2];
  assign OR_out1_6[3] = OR_out1_3[3];
  assign OR_out1_6[4] = OR_out1_3[4];
  assign OR_out1_6[5] = OR_out1_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay7_process
      if (reset == 1'b1) begin
        OR_out1_7 <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          OR_out1_7 <= OR_out1_6;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay8_bypass_process
      if (reset == 1'b1) begin
        Delay8_bypass_reg <= {6{1'b0}};
      end
      else begin
        if (enb_1_2000_1) begin
          Delay8_bypass_reg <= OR_out1_7;
        end
      end
    end

  assign Delay8_out1_6 = (enb_1_2000_1 == 1'b1 ? OR_out1_7 :
              Delay8_bypass_reg);

  assign Delay8_out1_7[0] = Delay8_out1_6[0];
  assign Delay8_out1_7[1] = Delay8_out1_6[1];
  assign Delay8_out1_7[2] = Delay8_out1_6[2];
  assign Delay8_out1_7[3] = Delay8_out1_6[3];
  assign Delay8_out1_7[4] = Delay8_out1_6[4];
  assign Delay8_out1_7[5] = Delay8_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_2_2_process
      if (reset == 1'b1) begin
        Delay8_out1 <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          Delay8_out1 <= Delay8_out1_7;
        end
      end
    end

  assign Delay8_out1_0 = Delay8_out1[0];

  assign Delay8_out1_unbuffer = (counterSig_5 == 3'b000 ? Delay8_out1_0 :
              (counterSig_5 == 3'b001 ? Delay8_out1_1 :
              (counterSig_5 == 3'b010 ? Delay8_out1_2 :
              (counterSig_5 == 3'b011 ? Delay8_out1_3 :
              (counterSig_5 == 3'b100 ? Delay8_out1_4 :
              Delay8_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : HwModeRegister1_1_process
      if (reset == 1'b1) begin
        Delay8_out1_unbuffer_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out1_unbuffer_1 <= Delay8_out1_unbuffer;
        end
      end
    end

  assign Delay7_out1_5 = Delay7_out1[5];

  assign Delay7_out1_4 = Delay7_out1[4];

  assign Delay7_out1_3 = Delay7_out1[3];

  assign Delay7_out1_2 = Delay7_out1[2];

  assign Delay7_out1_1 = Delay7_out1[1];

  always @(posedge clk or posedge reset)
    begin : rd_18_process
      if (reset == 1'b1) begin
        Subtract1_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Subtract1_out1_1 <= Subtract1_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Subtract1_out1_state_process
      if (reset == 1'b1) begin
        Subtract1_out1_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Subtract1_out1_held <= Subtract1_out1_2;
        end
      end
    end

  assign Subtract1_out1_2 = (crp_temp_streamed_enb_phase_5_0_5 == 1'b0 ? Subtract1_out1_held :
              Subtract1_out1_1);

  always @(posedge clk or posedge reset)
    begin : rd_16_1_process
      if (reset == 1'b1) begin
        Delay6_out1_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_unbuffer_1 <= Delay6_out1_unbuffer;
        end
      end
    end

  assign Delay3_out1_5 = Delay3_out1[5];

  assign Delay3_out1_4 = Delay3_out1[4];

  assign Delay3_out1_3 = Delay3_out1[3];

  assign Delay3_out1_2 = Delay3_out1[2];

  assign Delay3_out1_1 = Delay3_out1[1];

  always @(posedge clk or posedge reset)
    begin : rd_21_process
      if (reset == 1'b1) begin
        on_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          on_1 <= on;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : on_state_process
      if (reset == 1'b1) begin
        on_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          on_held <= on_2;
        end
      end
    end

  assign on_2 = (crp_temp_streamed_enb_phase_5_0_4 == 1'b0 ? on_held :
              on_1);

  assign Delay_out1_5 = Delay_out1[5];

  assign Delay_out1_4 = Delay_out1[4];

  assign Delay_out1_3 = Delay_out1[3];

  assign Delay_out1_2 = Delay_out1[2];

  assign Delay_out1_1 = Delay_out1[1];

  assign is[0] = Dw_L3s;
  assign is[1] = Up_L3s;
  assign is[2] = Dw_L2s;
  assign is[3] = Up_L2s;
  assign is[4] = Dw_L1s;
  assign is[5] = Up_L1s;

  assign Rate_Transition2_out1[0] = is[0];
  assign Rate_Transition2_out1[1] = is[1];
  assign Rate_Transition2_out1[2] = is[2];
  assign Rate_Transition2_out1[3] = is[3];
  assign Rate_Transition2_out1[4] = is[4];
  assign Rate_Transition2_out1[5] = is[5];
  always @(posedge clk or posedge reset)
    begin : crp_out_delay2_process
      if (reset == 1'b1) begin
        for(crp_out_delay2_t_1 = 32'sd0; crp_out_delay2_t_1 <= 32'sd5; crp_out_delay2_t_1 = crp_out_delay2_t_1 + 32'sd1) begin
          Rate_Transition2_out1_1[crp_out_delay2_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay2_t_0_0 = 32'sd0; crp_out_delay2_t_0_0 <= 32'sd5; crp_out_delay2_t_0_0 = crp_out_delay2_t_0_0 + 32'sd1) begin
            Rate_Transition2_out1_1[crp_out_delay2_t_0_0] <= Rate_Transition2_out1[crp_out_delay2_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay_bypass_process
      if (reset == 1'b1) begin
        for(Delay_bypass_t_1_0 = 32'sd0; Delay_bypass_t_1_0 <= 32'sd5; Delay_bypass_t_1_0 = Delay_bypass_t_1_0 + 32'sd1) begin
          Delay_bypass_reg[Delay_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay_bypass_t_0_1 = 32'sd0; Delay_bypass_t_0_1 <= 32'sd5; Delay_bypass_t_0_1 = Delay_bypass_t_0_1 + 32'sd1) begin
            Delay_bypass_reg[Delay_bypass_t_0_1] <= Delay_bypass_reg_next[Delay_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay_bypass_t_1 = 32'sd0; Delay_bypass_t_1 <= 32'sd5; Delay_bypass_t_1 = Delay_bypass_t_1 + 32'sd1) begin
        Delay_out1_6[Delay_bypass_t_1] = Rate_Transition2_out1_1[Delay_bypass_t_1];
      end
    end
    else begin
      for(Delay_bypass_t_0_0 = 32'sd0; Delay_bypass_t_0_0 <= 32'sd5; Delay_bypass_t_0_0 = Delay_bypass_t_0_0 + 32'sd1) begin
        Delay_out1_6[Delay_bypass_t_0_0] = Delay_bypass_reg[Delay_bypass_t_0_0];
      end
    end

    for(Delay_bypass_t_2 = 32'sd0; Delay_bypass_t_2 <= 32'sd5; Delay_bypass_t_2 = Delay_bypass_t_2 + 32'sd1) begin
      Delay_bypass_reg_next[Delay_bypass_t_2] = Rate_Transition2_out1_1[Delay_bypass_t_2];
    end

  end

  assign Delay_out1_7[0] = Delay_out1_6[0];
  assign Delay_out1_7[1] = Delay_out1_6[1];
  assign Delay_out1_7[2] = Delay_out1_6[2];
  assign Delay_out1_7[3] = Delay_out1_6[3];
  assign Delay_out1_7[4] = Delay_out1_6[4];
  assign Delay_out1_7[5] = Delay_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_18_1_process
      if (reset == 1'b1) begin
        for(rd_18_t_1 = 32'sd0; rd_18_t_1 <= 32'sd5; rd_18_t_1 = rd_18_t_1 + 32'sd1) begin
          Delay_out1[rd_18_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_18_t_0_0 = 32'sd0; rd_18_t_0_0 <= 32'sd5; rd_18_t_0_0 = rd_18_t_0_0 + 32'sd1) begin
            Delay_out1[rd_18_t_0_0] <= Delay_out1_7[rd_18_t_0_0];
          end
        end
      end
    end

  assign Delay_out1_0 = Delay_out1[0];

  assign Delay_out1_unbuffer = (counterSig_7 == 3'b000 ? Delay_out1_0 :
              (counterSig_7 == 3'b001 ? Delay_out1_1 :
              (counterSig_7 == 3'b010 ? Delay_out1_2 :
              (counterSig_7 == 3'b011 ? Delay_out1_3 :
              (counterSig_7 == 3'b100 ? Delay_out1_4 :
              Delay_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_19_process
      if (reset == 1'b1) begin
        Delay_out1_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_unbuffer_1 <= Delay_out1_unbuffer;
        end
      end
    end

  assign Gain1_cast = {Delay_out1_unbuffer_1[29], Delay_out1_unbuffer_1};
  assign Gain1_cast_1 =  - (Gain1_cast);
  assign Gain1_cast_2 = {Gain1_cast_1, 29'b00000000000000000000000000000};
  assign on = Gain1_cast_2[58:29];
  always @(posedge clk or posedge reset)
    begin : tapped_delay_3_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_1 = 32'sd0; tapped_delay_t_1_0_1 <= 32'sd4; tapped_delay_t_1_0_1 = tapped_delay_t_1_0_1 + 32'sd1) begin
          tapped_delay_reg_2[tapped_delay_t_1_0_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_9) begin
          for(tapped_delay_t_0_1_1 = 32'sd0; tapped_delay_t_0_1_1 <= 32'sd4; tapped_delay_t_0_1_1 = tapped_delay_t_0_1_1 + 32'sd1) begin
            tapped_delay_reg_2[tapped_delay_t_0_1_1] <= tapped_delay_reg_next_2[tapped_delay_t_0_1_1];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_02 = 32'sd0; tapped_delay_t_0_02 <= 32'sd4; tapped_delay_t_0_02 = tapped_delay_t_0_02 + 32'sd1) begin
      on_4[tapped_delay_t_0_02] = tapped_delay_reg_2[tapped_delay_t_0_02];
    end
    for(tapped_delay_t_12 = 32'sd0; tapped_delay_t_12 <= 32'sd3; tapped_delay_t_12 = tapped_delay_t_12 + 32'sd1) begin
      tapped_delay_reg_next_2[tapped_delay_t_12] = tapped_delay_reg_2[32'sd1 + tapped_delay_t_12];
    end

    tapped_delay_reg_next_2[4] = on;
  end

  assign on_5[0] = on_4[0];
  assign on_5[1] = on_4[1];
  assign on_5[2] = on_4[2];
  assign on_5[3] = on_4[3];
  assign on_5[4] = on_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_22_process
      if (reset == 1'b1) begin
        for(rd_22_t_1 = 32'sd0; rd_22_t_1 <= 32'sd4; rd_22_t_1 = rd_22_t_1 + 32'sd1) begin
          on_3[rd_22_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_22_t_0_0 = 32'sd0; rd_22_t_0_0 <= 32'sd4; rd_22_t_0_0 = rd_22_t_0_0 + 32'sd1) begin
            on_3[rd_22_t_0_0] <= on_5[rd_22_t_0_0];
          end
        end
      end
    end

  assign on_6[0] = on_3[0];
  assign on_6[1] = on_3[1];
  assign on_6[2] = on_3[2];
  assign on_6[3] = on_3[3];
  assign on_6[4] = on_3[4];
  assign on_6[5] = on_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay6_process
      if (reset == 1'b1) begin
        for(crp_out_delay6_t_1 = 32'sd0; crp_out_delay6_t_1 <= 32'sd5; crp_out_delay6_t_1 = crp_out_delay6_t_1 + 32'sd1) begin
          on_7[crp_out_delay6_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay6_t_0_0 = 32'sd0; crp_out_delay6_t_0_0 <= 32'sd5; crp_out_delay6_t_0_0 = crp_out_delay6_t_0_0 + 32'sd1) begin
            on_7[crp_out_delay6_t_0_0] <= on_6[crp_out_delay6_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay3_bypass_process
      if (reset == 1'b1) begin
        for(Delay3_bypass_t_1_0 = 32'sd0; Delay3_bypass_t_1_0 <= 32'sd5; Delay3_bypass_t_1_0 = Delay3_bypass_t_1_0 + 32'sd1) begin
          Delay3_bypass_reg[Delay3_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay3_bypass_t_0_1 = 32'sd0; Delay3_bypass_t_0_1 <= 32'sd5; Delay3_bypass_t_0_1 = Delay3_bypass_t_0_1 + 32'sd1) begin
            Delay3_bypass_reg[Delay3_bypass_t_0_1] <= Delay3_bypass_reg_next[Delay3_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay3_bypass_t_1 = 32'sd0; Delay3_bypass_t_1 <= 32'sd5; Delay3_bypass_t_1 = Delay3_bypass_t_1 + 32'sd1) begin
        Delay3_out1_6[Delay3_bypass_t_1] = on_7[Delay3_bypass_t_1];
      end
    end
    else begin
      for(Delay3_bypass_t_0_0 = 32'sd0; Delay3_bypass_t_0_0 <= 32'sd5; Delay3_bypass_t_0_0 = Delay3_bypass_t_0_0 + 32'sd1) begin
        Delay3_out1_6[Delay3_bypass_t_0_0] = Delay3_bypass_reg[Delay3_bypass_t_0_0];
      end
    end

    for(Delay3_bypass_t_2 = 32'sd0; Delay3_bypass_t_2 <= 32'sd5; Delay3_bypass_t_2 = Delay3_bypass_t_2 + 32'sd1) begin
      Delay3_bypass_reg_next[Delay3_bypass_t_2] = on_7[Delay3_bypass_t_2];
    end

  end

  assign Delay3_out1_7[0] = Delay3_out1_6[0];
  assign Delay3_out1_7[1] = Delay3_out1_6[1];
  assign Delay3_out1_7[2] = Delay3_out1_6[2];
  assign Delay3_out1_7[3] = Delay3_out1_6[3];
  assign Delay3_out1_7[4] = Delay3_out1_6[4];
  assign Delay3_out1_7[5] = Delay3_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_14_1_process
      if (reset == 1'b1) begin
        for(rd_14_t_1 = 32'sd0; rd_14_t_1 <= 32'sd5; rd_14_t_1 = rd_14_t_1 + 32'sd1) begin
          Delay3_out1[rd_14_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_14_t_0_0 = 32'sd0; rd_14_t_0_0 <= 32'sd5; rd_14_t_0_0 = rd_14_t_0_0 + 32'sd1) begin
            Delay3_out1[rd_14_t_0_0] <= Delay3_out1_7[rd_14_t_0_0];
          end
        end
      end
    end

  assign Delay3_out1_0 = Delay3_out1[0];

  assign Delay3_out1_unbuffer = (counterSig_6 == 3'b000 ? Delay3_out1_0 :
              (counterSig_6 == 3'b001 ? Delay3_out1_1 :
              (counterSig_6 == 3'b010 ? Delay3_out1_2 :
              (counterSig_6 == 3'b011 ? Delay3_out1_3 :
              (counterSig_6 == 3'b100 ? Delay3_out1_4 :
              Delay3_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_15_1_process
      if (reset == 1'b1) begin
        Delay3_out1_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_unbuffer_1 <= Delay3_out1_unbuffer;
        end
      end
    end

  assign Subtract1_sub_cast = {Delay3_out1_unbuffer_1[29], Delay3_out1_unbuffer_1};
  assign Subtract1_sub_cast_1 = {Delay6_out1_unbuffer_1[29], Delay6_out1_unbuffer_1};
  assign Subtract1_sub_temp = Subtract1_sub_cast - Subtract1_sub_cast_1;
  assign Subtract1_out1 = {Subtract1_sub_temp[20:0], 9'b000000000};
  always @(posedge clk or posedge reset)
    begin : tapped_delay_4_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_2 = 32'sd0; tapped_delay_t_1_0_2 <= 32'sd4; tapped_delay_t_1_0_2 = tapped_delay_t_1_0_2 + 32'sd1) begin
          tapped_delay_reg_3[tapped_delay_t_1_0_2] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_10) begin
          for(tapped_delay_t_0_1_2 = 32'sd0; tapped_delay_t_0_1_2 <= 32'sd4; tapped_delay_t_0_1_2 = tapped_delay_t_0_1_2 + 32'sd1) begin
            tapped_delay_reg_3[tapped_delay_t_0_1_2] <= tapped_delay_reg_next_3[tapped_delay_t_0_1_2];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_03 = 32'sd0; tapped_delay_t_0_03 <= 32'sd4; tapped_delay_t_0_03 = tapped_delay_t_0_03 + 32'sd1) begin
      Subtract1_out1_4[tapped_delay_t_0_03] = tapped_delay_reg_3[tapped_delay_t_0_03];
    end
    for(tapped_delay_t_13 = 32'sd0; tapped_delay_t_13 <= 32'sd3; tapped_delay_t_13 = tapped_delay_t_13 + 32'sd1) begin
      tapped_delay_reg_next_3[tapped_delay_t_13] = tapped_delay_reg_3[32'sd1 + tapped_delay_t_13];
    end

    tapped_delay_reg_next_3[4] = Subtract1_out1;
  end

  assign Subtract1_out1_5[0] = Subtract1_out1_4[0];
  assign Subtract1_out1_5[1] = Subtract1_out1_4[1];
  assign Subtract1_out1_5[2] = Subtract1_out1_4[2];
  assign Subtract1_out1_5[3] = Subtract1_out1_4[3];
  assign Subtract1_out1_5[4] = Subtract1_out1_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_19_1_process
      if (reset == 1'b1) begin
        for(rd_19_t_1 = 32'sd0; rd_19_t_1 <= 32'sd4; rd_19_t_1 = rd_19_t_1 + 32'sd1) begin
          Subtract1_out1_3[rd_19_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_19_t_0_0 = 32'sd0; rd_19_t_0_0 <= 32'sd4; rd_19_t_0_0 = rd_19_t_0_0 + 32'sd1) begin
            Subtract1_out1_3[rd_19_t_0_0] <= Subtract1_out1_5[rd_19_t_0_0];
          end
        end
      end
    end

  assign Subtract1_out1_6[0] = Subtract1_out1_3[0];
  assign Subtract1_out1_6[1] = Subtract1_out1_3[1];
  assign Subtract1_out1_6[2] = Subtract1_out1_3[2];
  assign Subtract1_out1_6[3] = Subtract1_out1_3[3];
  assign Subtract1_out1_6[4] = Subtract1_out1_3[4];
  assign Subtract1_out1_6[5] = Subtract1_out1_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay9_process
      if (reset == 1'b1) begin
        for(crp_out_delay9_t_1 = 32'sd0; crp_out_delay9_t_1 <= 32'sd5; crp_out_delay9_t_1 = crp_out_delay9_t_1 + 32'sd1) begin
          Subtract1_out1_7[crp_out_delay9_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay9_t_0_0 = 32'sd0; crp_out_delay9_t_0_0 <= 32'sd5; crp_out_delay9_t_0_0 = crp_out_delay9_t_0_0 + 32'sd1) begin
            Subtract1_out1_7[crp_out_delay9_t_0_0] <= Subtract1_out1_6[crp_out_delay9_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay7_bypass_process
      if (reset == 1'b1) begin
        for(Delay7_bypass_t_1_0 = 32'sd0; Delay7_bypass_t_1_0 <= 32'sd5; Delay7_bypass_t_1_0 = Delay7_bypass_t_1_0 + 32'sd1) begin
          Delay7_bypass_reg[Delay7_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay7_bypass_t_0_1 = 32'sd0; Delay7_bypass_t_0_1 <= 32'sd5; Delay7_bypass_t_0_1 = Delay7_bypass_t_0_1 + 32'sd1) begin
            Delay7_bypass_reg[Delay7_bypass_t_0_1] <= Delay7_bypass_reg_next[Delay7_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay7_bypass_t_1 = 32'sd0; Delay7_bypass_t_1 <= 32'sd5; Delay7_bypass_t_1 = Delay7_bypass_t_1 + 32'sd1) begin
        Delay7_out1_6[Delay7_bypass_t_1] = Subtract1_out1_7[Delay7_bypass_t_1];
      end
    end
    else begin
      for(Delay7_bypass_t_0_0 = 32'sd0; Delay7_bypass_t_0_0 <= 32'sd5; Delay7_bypass_t_0_0 = Delay7_bypass_t_0_0 + 32'sd1) begin
        Delay7_out1_6[Delay7_bypass_t_0_0] = Delay7_bypass_reg[Delay7_bypass_t_0_0];
      end
    end

    for(Delay7_bypass_t_2 = 32'sd0; Delay7_bypass_t_2 <= 32'sd5; Delay7_bypass_t_2 = Delay7_bypass_t_2 + 32'sd1) begin
      Delay7_bypass_reg_next[Delay7_bypass_t_2] = Subtract1_out1_7[Delay7_bypass_t_2];
    end

  end

  assign Delay7_out1_7[0] = Delay7_out1_6[0];
  assign Delay7_out1_7[1] = Delay7_out1_6[1];
  assign Delay7_out1_7[2] = Delay7_out1_6[2];
  assign Delay7_out1_7[3] = Delay7_out1_6[3];
  assign Delay7_out1_7[4] = Delay7_out1_6[4];
  assign Delay7_out1_7[5] = Delay7_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_0_3_process
      if (reset == 1'b1) begin
        for(rd_0_t_1 = 32'sd0; rd_0_t_1 <= 32'sd5; rd_0_t_1 = rd_0_t_1 + 32'sd1) begin
          Delay7_out1[rd_0_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0 = 32'sd0; rd_0_t_0_0 <= 32'sd5; rd_0_t_0_0 = rd_0_t_0_0 + 32'sd1) begin
            Delay7_out1[rd_0_t_0_0] <= Delay7_out1_7[rd_0_t_0_0];
          end
        end
      end
    end

  assign Delay7_out1_0 = Delay7_out1[0];

  assign Delay7_out1_unbuffer = (counterSig_5 == 3'b000 ? Delay7_out1_0 :
              (counterSig_5 == 3'b001 ? Delay7_out1_1 :
              (counterSig_5 == 3'b010 ? Delay7_out1_2 :
              (counterSig_5 == 3'b011 ? Delay7_out1_3 :
              (counterSig_5 == 3'b100 ? Delay7_out1_4 :
              Delay7_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        Delay7_out1_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_unbuffer_1 <= Delay7_out1_unbuffer;
        end
      end
    end

  assign Multiply_Add_mul_in1 = (Delay8_out1_unbuffer_1 == 1'b1 ? Delay7_out1_unbuffer_1 :
              30'sb000000000000000000000000000000);
  assign Multiply_Add_mul_cast = {Multiply_Add_mul_in1[29], Multiply_Add_mul_in1};
  assign mulOutput = Multiply_Add_mul_cast[29:0];
  always @(posedge clk or posedge reset)
    begin : HwModeRegister_1_process
      if (reset == 1'b1) begin
        for(HwModeRegister_t_1 = 32'sd0; HwModeRegister_t_1 <= 32'sd1; HwModeRegister_t_1 = HwModeRegister_t_1 + 32'sd1) begin
          HwModeRegister_reg[HwModeRegister_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister_t_0_0 = 32'sd0; HwModeRegister_t_0_0 <= 32'sd1; HwModeRegister_t_0_0 = HwModeRegister_t_0_0 + 32'sd1) begin
            HwModeRegister_reg[HwModeRegister_t_0_0] <= HwModeRegister_reg_next[HwModeRegister_t_0_0];
          end
        end
      end
    end

  assign mulOutput_1 = HwModeRegister_reg[1];
  assign HwModeRegister_reg_next[0] = mulOutput;
  assign HwModeRegister_reg_next[1] = HwModeRegister_reg[0];

  assign Delay9_out1_5 = Delay9_out1[5];

  assign Delay9_out1_4 = Delay9_out1[4];

  assign Delay9_out1_3 = Delay9_out1[3];

  assign Delay9_out1_2 = Delay9_out1[2];

  assign Delay9_out1_1 = Delay9_out1[1];

  always @(posedge clk or posedge reset)
    begin : rd_11_2_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1 <= Delay6_out1_unbuffer;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay6_out1_state_process
      if (reset == 1'b1) begin
        Delay6_out1_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_held <= Delay6_out1_1;
        end
      end
    end

  assign Delay6_out1_1 = (crp_temp_streamed_enb_phase_5_0_3 == 1'b0 ? Delay6_out1_held :
              Delay6_out1);

  assign Delay6_out1_5 = Delay6_out1_4[5];

  assign Delay6_out1_4_1 = Delay6_out1_4[4];

  assign Delay6_out1_3_1 = Delay6_out1_4[3];

  assign Delay6_out1_2_1 = Delay6_out1_4[2];

  assign Delay6_out1_1_1 = Delay6_out1_4[1];

  always @(posedge clk or posedge reset)
    begin : rd_4_6_process
      if (reset == 1'b1) begin
        Gain3_out1_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain3_out1_1 <= Gain3_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Gain3_out1_state_process
      if (reset == 1'b1) begin
        Gain3_out1_held <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Gain3_out1_held <= Gain3_out1_2;
        end
      end
    end

  assign Gain3_out1_2 = (crp_temp_streamed_enb_phase_5_0_1 == 1'b0 ? Gain3_out1_held :
              Gain3_out1_1);

  assign Delay2_out1_5 = Delay2_out1[5];

  assign Delay2_out1_4 = Delay2_out1[4];

  assign Delay2_out1_3 = Delay2_out1[3];

  assign Delay2_out1_2 = Delay2_out1[2];

  assign Delay2_out1_1 = Delay2_out1[1];

  assign vs[0] = Dw_L3v;
  assign vs[1] = Up_L3v;
  assign vs[2] = Dw_L2v;
  assign vs[3] = Up_Lv;
  assign vs[4] = Dw_L1v;
  assign vs[5] = Up_L1v;

  assign Rate_Transition4_out1[0] = vs[0];
  assign Rate_Transition4_out1[1] = vs[1];
  assign Rate_Transition4_out1[2] = vs[2];
  assign Rate_Transition4_out1[3] = vs[3];
  assign Rate_Transition4_out1[4] = vs[4];
  assign Rate_Transition4_out1[5] = vs[5];
  always @(posedge clk or posedge reset)
    begin : crp_out_delay_process
      if (reset == 1'b1) begin
        for(crp_out_delay_t_1 = 32'sd0; crp_out_delay_t_1 <= 32'sd5; crp_out_delay_t_1 = crp_out_delay_t_1 + 32'sd1) begin
          Rate_Transition4_out1_1[crp_out_delay_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay_t_0_0 = 32'sd0; crp_out_delay_t_0_0 <= 32'sd5; crp_out_delay_t_0_0 = crp_out_delay_t_0_0 + 32'sd1) begin
            Rate_Transition4_out1_1[crp_out_delay_t_0_0] <= Rate_Transition4_out1[crp_out_delay_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay2_bypass_process
      if (reset == 1'b1) begin
        for(Delay2_bypass_t_1_0 = 32'sd0; Delay2_bypass_t_1_0 <= 32'sd5; Delay2_bypass_t_1_0 = Delay2_bypass_t_1_0 + 32'sd1) begin
          Delay2_bypass_reg[Delay2_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay2_bypass_t_0_1 = 32'sd0; Delay2_bypass_t_0_1 <= 32'sd5; Delay2_bypass_t_0_1 = Delay2_bypass_t_0_1 + 32'sd1) begin
            Delay2_bypass_reg[Delay2_bypass_t_0_1] <= Delay2_bypass_reg_next[Delay2_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay2_bypass_t_1 = 32'sd0; Delay2_bypass_t_1 <= 32'sd5; Delay2_bypass_t_1 = Delay2_bypass_t_1 + 32'sd1) begin
        Delay2_out1_6[Delay2_bypass_t_1] = Rate_Transition4_out1_1[Delay2_bypass_t_1];
      end
    end
    else begin
      for(Delay2_bypass_t_0_0 = 32'sd0; Delay2_bypass_t_0_0 <= 32'sd5; Delay2_bypass_t_0_0 = Delay2_bypass_t_0_0 + 32'sd1) begin
        Delay2_out1_6[Delay2_bypass_t_0_0] = Delay2_bypass_reg[Delay2_bypass_t_0_0];
      end
    end

    for(Delay2_bypass_t_2 = 32'sd0; Delay2_bypass_t_2 <= 32'sd5; Delay2_bypass_t_2 = Delay2_bypass_t_2 + 32'sd1) begin
      Delay2_bypass_reg_next[Delay2_bypass_t_2] = Rate_Transition4_out1_1[Delay2_bypass_t_2];
    end

  end

  assign Delay2_out1_7[0] = Delay2_out1_6[0];
  assign Delay2_out1_7[1] = Delay2_out1_6[1];
  assign Delay2_out1_7[2] = Delay2_out1_6[2];
  assign Delay2_out1_7[3] = Delay2_out1_6[3];
  assign Delay2_out1_7[4] = Delay2_out1_6[4];
  assign Delay2_out1_7[5] = Delay2_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_0_4_process
      if (reset == 1'b1) begin
        for(rd_0_t_1_1 = 32'sd0; rd_0_t_1_1 <= 32'sd5; rd_0_t_1_1 = rd_0_t_1_1 + 32'sd1) begin
          Delay2_out1[rd_0_t_1_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0_1 = 32'sd0; rd_0_t_0_0_1 <= 32'sd5; rd_0_t_0_0_1 = rd_0_t_0_0_1 + 32'sd1) begin
            Delay2_out1[rd_0_t_0_0_1] <= Delay2_out1_7[rd_0_t_0_0_1];
          end
        end
      end
    end

  assign Delay2_out1_0 = Delay2_out1[0];

  assign Delay2_out1_unbuffer = (counterSig_7 == 3'b000 ? Delay2_out1_0 :
              (counterSig_7 == 3'b001 ? Delay2_out1_1 :
              (counterSig_7 == 3'b010 ? Delay2_out1_2 :
              (counterSig_7 == 3'b011 ? Delay2_out1_3 :
              (counterSig_7 == 3'b100 ? Delay2_out1_4 :
              Delay2_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_2_3_process
      if (reset == 1'b1) begin
        Delay2_out1_unbuffer_2 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_unbuffer_2 <= Delay2_out1_unbuffer;
        end
      end
    end

  // CSD Encoding (343597384) : 010100100001'01'001'0000101001000; Cost (Adders) = 8
  assign Gain3_1 = {{2{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 28'b0000000000000000000000000000}};
  assign Gain3_2 = {{4{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 26'b00000000000000000000000000}};
  assign Gain3_3 = {{7{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 23'b00000000000000000000000}};
  assign Gain3_4 = {{12{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 18'b000000000000000000}};
  assign Gain3_5 = {{14{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 16'b0000000000000000}};
  assign Gain3_6 = {{17{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 13'b0000000000000}};
  assign Gain3_7 = {{22{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 8'b00000000}};
  assign Gain3_8 = {{24{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 6'b000000}};
  assign Gain3_9 = {{27{Delay2_out1_unbuffer_2[29]}}, {Delay2_out1_unbuffer_2, 3'b000}};
  assign Gain3_mul_temp = (((((((Gain3_1 + Gain3_2) + Gain3_3) - Gain3_4) - Gain3_5) - Gain3_6) + Gain3_7) + Gain3_8) + Gain3_9;
  assign Gain3_out1 = {{4{Gain3_mul_temp[59]}}, Gain3_mul_temp[59:34]};
  always @(posedge clk or posedge reset)
    begin : tapped_delay_5_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_3 = 32'sd0; tapped_delay_t_1_0_3 <= 32'sd4; tapped_delay_t_1_0_3 = tapped_delay_t_1_0_3 + 32'sd1) begin
          tapped_delay_reg_4[tapped_delay_t_1_0_3] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_7) begin
          for(tapped_delay_t_0_1_3 = 32'sd0; tapped_delay_t_0_1_3 <= 32'sd4; tapped_delay_t_0_1_3 = tapped_delay_t_0_1_3 + 32'sd1) begin
            tapped_delay_reg_4[tapped_delay_t_0_1_3] <= tapped_delay_reg_next_4[tapped_delay_t_0_1_3];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_04 = 32'sd0; tapped_delay_t_0_04 <= 32'sd4; tapped_delay_t_0_04 = tapped_delay_t_0_04 + 32'sd1) begin
      Gain3_out1_4[tapped_delay_t_0_04] = tapped_delay_reg_4[tapped_delay_t_0_04];
    end
    for(tapped_delay_t_14 = 32'sd0; tapped_delay_t_14 <= 32'sd3; tapped_delay_t_14 = tapped_delay_t_14 + 32'sd1) begin
      tapped_delay_reg_next_4[tapped_delay_t_14] = tapped_delay_reg_4[32'sd1 + tapped_delay_t_14];
    end

    tapped_delay_reg_next_4[4] = Gain3_out1;
  end

  assign Gain3_out1_5[0] = Gain3_out1_4[0];
  assign Gain3_out1_5[1] = Gain3_out1_4[1];
  assign Gain3_out1_5[2] = Gain3_out1_4[2];
  assign Gain3_out1_5[3] = Gain3_out1_4[3];
  assign Gain3_out1_5[4] = Gain3_out1_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_5_6_process
      if (reset == 1'b1) begin
        for(rd_5_t_1 = 32'sd0; rd_5_t_1 <= 32'sd4; rd_5_t_1 = rd_5_t_1 + 32'sd1) begin
          Gain3_out1_3[rd_5_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_5_t_0_0 = 32'sd0; rd_5_t_0_0 <= 32'sd4; rd_5_t_0_0 = rd_5_t_0_0 + 32'sd1) begin
            Gain3_out1_3[rd_5_t_0_0] <= Gain3_out1_5[rd_5_t_0_0];
          end
        end
      end
    end

  assign Gain3_out1_6[0] = Gain3_out1_3[0];
  assign Gain3_out1_6[1] = Gain3_out1_3[1];
  assign Gain3_out1_6[2] = Gain3_out1_3[2];
  assign Gain3_out1_6[3] = Gain3_out1_3[3];
  assign Gain3_out1_6[4] = Gain3_out1_3[4];
  assign Gain3_out1_6[5] = Gain3_out1_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay3_process
      if (reset == 1'b1) begin
        for(crp_out_delay3_t_1 = 32'sd0; crp_out_delay3_t_1 <= 32'sd5; crp_out_delay3_t_1 = crp_out_delay3_t_1 + 32'sd1) begin
          Gain3_out1_7[crp_out_delay3_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay3_t_0_0 = 32'sd0; crp_out_delay3_t_0_0 <= 32'sd5; crp_out_delay3_t_0_0 = crp_out_delay3_t_0_0 + 32'sd1) begin
            Gain3_out1_7[crp_out_delay3_t_0_0] <= Gain3_out1_6[crp_out_delay3_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay6_bypass_process
      if (reset == 1'b1) begin
        for(Delay6_bypass_t_1_0 = 32'sd0; Delay6_bypass_t_1_0 <= 32'sd5; Delay6_bypass_t_1_0 = Delay6_bypass_t_1_0 + 32'sd1) begin
          Delay6_bypass_reg[Delay6_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay6_bypass_t_0_1 = 32'sd0; Delay6_bypass_t_0_1 <= 32'sd5; Delay6_bypass_t_0_1 = Delay6_bypass_t_0_1 + 32'sd1) begin
            Delay6_bypass_reg[Delay6_bypass_t_0_1] <= Delay6_bypass_reg_next[Delay6_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay6_bypass_t_1 = 32'sd0; Delay6_bypass_t_1 <= 32'sd5; Delay6_bypass_t_1 = Delay6_bypass_t_1 + 32'sd1) begin
        Delay6_out1_6[Delay6_bypass_t_1] = Gain3_out1_7[Delay6_bypass_t_1];
      end
    end
    else begin
      for(Delay6_bypass_t_0_0 = 32'sd0; Delay6_bypass_t_0_0 <= 32'sd5; Delay6_bypass_t_0_0 = Delay6_bypass_t_0_0 + 32'sd1) begin
        Delay6_out1_6[Delay6_bypass_t_0_0] = Delay6_bypass_reg[Delay6_bypass_t_0_0];
      end
    end

    for(Delay6_bypass_t_2 = 32'sd0; Delay6_bypass_t_2 <= 32'sd5; Delay6_bypass_t_2 = Delay6_bypass_t_2 + 32'sd1) begin
      Delay6_bypass_reg_next[Delay6_bypass_t_2] = Gain3_out1_7[Delay6_bypass_t_2];
    end

  end

  assign Delay6_out1_7[0] = Delay6_out1_6[0];
  assign Delay6_out1_7[1] = Delay6_out1_6[1];
  assign Delay6_out1_7[2] = Delay6_out1_6[2];
  assign Delay6_out1_7[3] = Delay6_out1_6[3];
  assign Delay6_out1_7[4] = Delay6_out1_6[4];
  assign Delay6_out1_7[5] = Delay6_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_9_2_process
      if (reset == 1'b1) begin
        for(rd_9_t_1 = 32'sd0; rd_9_t_1 <= 32'sd5; rd_9_t_1 = rd_9_t_1 + 32'sd1) begin
          Delay6_out1_4[rd_9_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_9_t_0_0 = 32'sd0; rd_9_t_0_0 <= 32'sd5; rd_9_t_0_0 = rd_9_t_0_0 + 32'sd1) begin
            Delay6_out1_4[rd_9_t_0_0] <= Delay6_out1_7[rd_9_t_0_0];
          end
        end
      end
    end

  assign Delay6_out1_0 = Delay6_out1_4[0];

  assign Delay6_out1_unbuffer = (counterSig_6 == 3'b000 ? Delay6_out1_0 :
              (counterSig_6 == 3'b001 ? Delay6_out1_1_1 :
              (counterSig_6 == 3'b010 ? Delay6_out1_2_1 :
              (counterSig_6 == 3'b011 ? Delay6_out1_3_1 :
              (counterSig_6 == 3'b100 ? Delay6_out1_4_1 :
              Delay6_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : tapped_delay_6_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_4 = 32'sd0; tapped_delay_t_1_0_4 <= 32'sd4; tapped_delay_t_1_0_4 = tapped_delay_t_1_0_4 + 32'sd1) begin
          tapped_delay_reg_5[tapped_delay_t_1_0_4] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_8) begin
          for(tapped_delay_t_0_1_4 = 32'sd0; tapped_delay_t_0_1_4 <= 32'sd4; tapped_delay_t_0_1_4 = tapped_delay_t_0_1_4 + 32'sd1) begin
            tapped_delay_reg_5[tapped_delay_t_0_1_4] <= tapped_delay_reg_next_5[tapped_delay_t_0_1_4];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_05 = 32'sd0; tapped_delay_t_0_05 <= 32'sd4; tapped_delay_t_0_05 = tapped_delay_t_0_05 + 32'sd1) begin
      Delay6_out1_3[tapped_delay_t_0_05] = tapped_delay_reg_5[tapped_delay_t_0_05];
    end
    for(tapped_delay_t_15 = 32'sd0; tapped_delay_t_15 <= 32'sd3; tapped_delay_t_15 = tapped_delay_t_15 + 32'sd1) begin
      tapped_delay_reg_next_5[tapped_delay_t_15] = tapped_delay_reg_5[32'sd1 + tapped_delay_t_15];
    end

    tapped_delay_reg_next_5[4] = Delay6_out1_unbuffer;
  end

  assign Delay6_out1_8[0] = Delay6_out1_3[0];
  assign Delay6_out1_8[1] = Delay6_out1_3[1];
  assign Delay6_out1_8[2] = Delay6_out1_3[2];
  assign Delay6_out1_8[3] = Delay6_out1_3[3];
  assign Delay6_out1_8[4] = Delay6_out1_3[4];

  always @(posedge clk or posedge reset)
    begin : rd_12_2_process
      if (reset == 1'b1) begin
        for(rd_12_t_1 = 32'sd0; rd_12_t_1 <= 32'sd4; rd_12_t_1 = rd_12_t_1 + 32'sd1) begin
          Delay6_out1_2[rd_12_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_12_t_0_0 = 32'sd0; rd_12_t_0_0 <= 32'sd4; rd_12_t_0_0 = rd_12_t_0_0 + 32'sd1) begin
            Delay6_out1_2[rd_12_t_0_0] <= Delay6_out1_8[rd_12_t_0_0];
          end
        end
      end
    end

  assign Delay6_out1_9[0] = Delay6_out1_2[0];
  assign Delay6_out1_9[1] = Delay6_out1_2[1];
  assign Delay6_out1_9[2] = Delay6_out1_2[2];
  assign Delay6_out1_9[3] = Delay6_out1_2[3];
  assign Delay6_out1_9[4] = Delay6_out1_2[4];
  assign Delay6_out1_9[5] = Delay6_out1_1;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay8_process
      if (reset == 1'b1) begin
        for(crp_out_delay8_t_1 = 32'sd0; crp_out_delay8_t_1 <= 32'sd5; crp_out_delay8_t_1 = crp_out_delay8_t_1 + 32'sd1) begin
          Delay6_out1_10[crp_out_delay8_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay8_t_0_0 = 32'sd0; crp_out_delay8_t_0_0 <= 32'sd5; crp_out_delay8_t_0_0 = crp_out_delay8_t_0_0 + 32'sd1) begin
            Delay6_out1_10[crp_out_delay8_t_0_0] <= Delay6_out1_9[crp_out_delay8_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay9_bypass_process
      if (reset == 1'b1) begin
        for(Delay9_bypass_t_1_0 = 32'sd0; Delay9_bypass_t_1_0 <= 32'sd5; Delay9_bypass_t_1_0 = Delay9_bypass_t_1_0 + 32'sd1) begin
          Delay9_bypass_reg[Delay9_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_2000_1) begin
          for(Delay9_bypass_t_0_1 = 32'sd0; Delay9_bypass_t_0_1 <= 32'sd5; Delay9_bypass_t_0_1 = Delay9_bypass_t_0_1 + 32'sd1) begin
            Delay9_bypass_reg[Delay9_bypass_t_0_1] <= Delay9_bypass_reg_next[Delay9_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_2000_1 == 1'b1) begin
      for(Delay9_bypass_t_1 = 32'sd0; Delay9_bypass_t_1 <= 32'sd5; Delay9_bypass_t_1 = Delay9_bypass_t_1 + 32'sd1) begin
        Delay9_out1_6[Delay9_bypass_t_1] = Delay6_out1_10[Delay9_bypass_t_1];
      end
    end
    else begin
      for(Delay9_bypass_t_0_0 = 32'sd0; Delay9_bypass_t_0_0 <= 32'sd5; Delay9_bypass_t_0_0 = Delay9_bypass_t_0_0 + 32'sd1) begin
        Delay9_out1_6[Delay9_bypass_t_0_0] = Delay9_bypass_reg[Delay9_bypass_t_0_0];
      end
    end

    for(Delay9_bypass_t_2 = 32'sd0; Delay9_bypass_t_2 <= 32'sd5; Delay9_bypass_t_2 = Delay9_bypass_t_2 + 32'sd1) begin
      Delay9_bypass_reg_next[Delay9_bypass_t_2] = Delay6_out1_10[Delay9_bypass_t_2];
    end

  end

  assign Delay9_out1_7[0] = Delay9_out1_6[0];
  assign Delay9_out1_7[1] = Delay9_out1_6[1];
  assign Delay9_out1_7[2] = Delay9_out1_6[2];
  assign Delay9_out1_7[3] = Delay9_out1_6[3];
  assign Delay9_out1_7[4] = Delay9_out1_6[4];
  assign Delay9_out1_7[5] = Delay9_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_3_5_process
      if (reset == 1'b1) begin
        for(rd_3_t_1 = 32'sd0; rd_3_t_1 <= 32'sd5; rd_3_t_1 = rd_3_t_1 + 32'sd1) begin
          Delay9_out1[rd_3_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_3_t_0_0 = 32'sd0; rd_3_t_0_0 <= 32'sd5; rd_3_t_0_0 = rd_3_t_0_0 + 32'sd1) begin
            Delay9_out1[rd_3_t_0_0] <= Delay9_out1_7[rd_3_t_0_0];
          end
        end
      end
    end

  assign Delay9_out1_0 = Delay9_out1[0];

  assign Delay9_out1_unbuffer = (counterSig_5 == 3'b000 ? Delay9_out1_0 :
              (counterSig_5 == 3'b001 ? Delay9_out1_1 :
              (counterSig_5 == 3'b010 ? Delay9_out1_2 :
              (counterSig_5 == 3'b011 ? Delay9_out1_3 :
              (counterSig_5 == 3'b100 ? Delay9_out1_4 :
              Delay9_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : HwModeRegister_2_process
      if (reset == 1'b1) begin
        for(HwModeRegister_t_1 = 32'sd0; HwModeRegister_t_1 <= 32'sd2; HwModeRegister_t_1 = HwModeRegister_t_1 + 32'sd1) begin
          HwModeRegister_reg_1[HwModeRegister_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister_t_0_1 = 32'sd0; HwModeRegister_t_0_1 <= 32'sd2; HwModeRegister_t_0_1 = HwModeRegister_t_0_1 + 32'sd1) begin
            HwModeRegister_reg_1[HwModeRegister_t_0_1] <= HwModeRegister_reg_next_1[HwModeRegister_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay9_out1_unbuffer_1 = HwModeRegister_reg_1[2];
    HwModeRegister_reg_next_1[0] = Delay9_out1_unbuffer;

    for(HwModeRegister_t_0_0_1 = 32'sd0; HwModeRegister_t_0_0_1 <= 32'sd1; HwModeRegister_t_0_0_1 = HwModeRegister_t_0_0_1 + 32'sd1) begin
      HwModeRegister_reg_next_1[HwModeRegister_t_0_0_1 + 32'sd1] = HwModeRegister_reg_1[HwModeRegister_t_0_0_1];
    end

  end

  assign Multiply_Add_add_add_cast = {Delay9_out1_unbuffer_1[29], {Delay9_out1_unbuffer_1, 9'b000000000}};
  assign Multiply_Add_add_add_cast_1 = {{10{mulOutput_1[29]}}, mulOutput_1};
  assign Multiply_Add_add_add_temp = Multiply_Add_add_add_cast + Multiply_Add_add_add_cast_1;
  assign Multiply_Add_out1_5 = Multiply_Add_add_add_temp[29:0];
  always @(posedge clk or posedge reset)
    begin : HwModeRegister_3_process
      if (reset == 1'b1) begin
        Multiply_Add_out1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Multiply_Add_out1 <= Multiply_Add_out1_5;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : tapped_delay_7_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_5 = 32'sd0; tapped_delay_t_1_0_5 <= 32'sd4; tapped_delay_t_1_0_5 = tapped_delay_t_1_0_5 + 32'sd1) begin
          tapped_delay_reg_6[tapped_delay_t_1_0_5] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_14) begin
          for(tapped_delay_t_0_1_5 = 32'sd0; tapped_delay_t_0_1_5 <= 32'sd4; tapped_delay_t_0_1_5 = tapped_delay_t_0_1_5 + 32'sd1) begin
            tapped_delay_reg_6[tapped_delay_t_0_1_5] <= tapped_delay_reg_next_6[tapped_delay_t_0_1_5];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_06 = 32'sd0; tapped_delay_t_0_06 <= 32'sd4; tapped_delay_t_0_06 = tapped_delay_t_0_06 + 32'sd1) begin
      Multiply_Add_out1_4[tapped_delay_t_0_06] = tapped_delay_reg_6[tapped_delay_t_0_06];
    end
    for(tapped_delay_t_16 = 32'sd0; tapped_delay_t_16 <= 32'sd3; tapped_delay_t_16 = tapped_delay_t_16 + 32'sd1) begin
      tapped_delay_reg_next_6[tapped_delay_t_16] = tapped_delay_reg_6[32'sd1 + tapped_delay_t_16];
    end

    tapped_delay_reg_next_6[4] = Multiply_Add_out1;
  end
  assign Multiply_Add_out1_6[0] = Multiply_Add_out1_4[0];
  assign Multiply_Add_out1_6[1] = Multiply_Add_out1_4[1];
  assign Multiply_Add_out1_6[2] = Multiply_Add_out1_4[2];
  assign Multiply_Add_out1_6[3] = Multiply_Add_out1_4[3];
  assign Multiply_Add_out1_6[4] = Multiply_Add_out1_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_6_5_process
      if (reset == 1'b1) begin
        for(rd_6_t_1 = 32'sd0; rd_6_t_1 <= 32'sd4; rd_6_t_1 = rd_6_t_1 + 32'sd1) begin
          Multiply_Add_out1_3[rd_6_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_6_t_0_0 = 32'sd0; rd_6_t_0_0 <= 32'sd4; rd_6_t_0_0 = rd_6_t_0_0 + 32'sd1) begin
            Multiply_Add_out1_3[rd_6_t_0_0] <= Multiply_Add_out1_6[rd_6_t_0_0];
          end
        end
      end
    end

  assign Multiply_Add_out1_7[0] = Multiply_Add_out1_3[0];
  assign Multiply_Add_out1_7[1] = Multiply_Add_out1_3[1];
  assign Multiply_Add_out1_7[2] = Multiply_Add_out1_3[2];
  assign Multiply_Add_out1_7[3] = Multiply_Add_out1_3[3];
  assign Multiply_Add_out1_7[4] = Multiply_Add_out1_3[4];
  assign Multiply_Add_out1_7[5] = Multiply_Add_out1_2;

  always @(posedge clk or posedge reset)
    begin : rd_2_4_process
      if (reset == 1'b1) begin
        for(rd_2_t_1 = 32'sd0; rd_2_t_1 <= 32'sd5; rd_2_t_1 = rd_2_t_1 + 32'sd1) begin
          Rate_Transition1_out1_4[rd_2_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_2_t_0_0 = 32'sd0; rd_2_t_0_0 <= 32'sd5; rd_2_t_0_0 = rd_2_t_0_0 + 32'sd1) begin
            Rate_Transition1_out1_4[rd_2_t_0_0] <= Multiply_Add_out1_7[rd_2_t_0_0];
          end
        end
      end
    end

  assign Rate_Transition1_out1_0 = Rate_Transition1_out1_4[0];

  assign Rate_Transition1_out1_unbuffer = (counterSig_4 == 3'b000 ? Rate_Transition1_out1_0 :
              (counterSig_4 == 3'b001 ? Rate_Transition1_out1_1_1 :
              (counterSig_4 == 3'b010 ? Rate_Transition1_out1_2_1 :
              (counterSig_4 == 3'b011 ? Rate_Transition1_out1_3_1 :
              (counterSig_4 == 3'b100 ? Rate_Transition1_out1_4_1 :
              Rate_Transition1_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : tapped_delay_8_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_6 = 32'sd0; tapped_delay_t_1_0_6 <= 32'sd4; tapped_delay_t_1_0_6 = tapped_delay_t_1_0_6 + 32'sd1) begin
          tapped_delay_reg_7[tapped_delay_t_1_0_6] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_15) begin
          for(tapped_delay_t_0_1_6 = 32'sd0; tapped_delay_t_0_1_6 <= 32'sd4; tapped_delay_t_0_1_6 = tapped_delay_t_0_1_6 + 32'sd1) begin
            tapped_delay_reg_7[tapped_delay_t_0_1_6] <= tapped_delay_reg_next_7[tapped_delay_t_0_1_6];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_07 = 32'sd0; tapped_delay_t_0_07 <= 32'sd4; tapped_delay_t_0_07 = tapped_delay_t_0_07 + 32'sd1) begin
      Rate_Transition1_out1_3[tapped_delay_t_0_07] = tapped_delay_reg_7[tapped_delay_t_0_07];
    end
    for(tapped_delay_t_17 = 32'sd0; tapped_delay_t_17 <= 32'sd3; tapped_delay_t_17 = tapped_delay_t_17 + 32'sd1) begin
      tapped_delay_reg_next_7[tapped_delay_t_17] = tapped_delay_reg_7[32'sd1 + tapped_delay_t_17];
    end

    tapped_delay_reg_next_7[4] = Rate_Transition1_out1_unbuffer;
  end

  assign Rate_Transition1_out1_6[0] = Rate_Transition1_out1_3[0];
  assign Rate_Transition1_out1_6[1] = Rate_Transition1_out1_3[1];
  assign Rate_Transition1_out1_6[2] = Rate_Transition1_out1_3[2];
  assign Rate_Transition1_out1_6[3] = Rate_Transition1_out1_3[3];
  assign Rate_Transition1_out1_6[4] = Rate_Transition1_out1_3[4];

  always @(posedge clk or posedge reset)
    begin : rd_9_3_process
      if (reset == 1'b1) begin
        for(rd_9_t_1 = 32'sd0; rd_9_t_1 <= 32'sd4; rd_9_t_1 = rd_9_t_1 + 32'sd1) begin
          Rate_Transition1_out1_2[rd_9_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_9_t_0_0 = 32'sd0; rd_9_t_0_0 <= 32'sd4; rd_9_t_0_0 = rd_9_t_0_0 + 32'sd1) begin
            Rate_Transition1_out1_2[rd_9_t_0_0] <= Rate_Transition1_out1_6[rd_9_t_0_0];
          end
        end
      end
    end

  assign Rate_Transition1_out1_7[0] = Rate_Transition1_out1_2[0];
  assign Rate_Transition1_out1_7[1] = Rate_Transition1_out1_2[1];
  assign Rate_Transition1_out1_7[2] = Rate_Transition1_out1_2[2];
  assign Rate_Transition1_out1_7[3] = Rate_Transition1_out1_2[3];
  assign Rate_Transition1_out1_7[4] = Rate_Transition1_out1_2[4];
  assign Rate_Transition1_out1_7[5] = Rate_Transition1_out1_1;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay13_process
      if (reset == 1'b1) begin
        for(crp_out_delay13_t_1 = 32'sd0; crp_out_delay13_t_1 <= 32'sd5; crp_out_delay13_t_1 = crp_out_delay13_t_1 + 32'sd1) begin
          Rate_Transition1_out1_8[crp_out_delay13_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay13_t_0_0 = 32'sd0; crp_out_delay13_t_0_0 <= 32'sd5; crp_out_delay13_t_0_0 = crp_out_delay13_t_0_0 + 32'sd1) begin
            Rate_Transition1_out1_8[crp_out_delay13_t_0_0] <= Rate_Transition1_out1_7[crp_out_delay13_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay15_bypass_process
      if (reset == 1'b1) begin
        for(Delay15_bypass_t_1_0 = 32'sd0; Delay15_bypass_t_1_0 <= 32'sd5; Delay15_bypass_t_1_0 = Delay15_bypass_t_1_0 + 32'sd1) begin
          Delay15_bypass_reg[Delay15_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_400_1) begin
          for(Delay15_bypass_t_0_1 = 32'sd0; Delay15_bypass_t_0_1 <= 32'sd5; Delay15_bypass_t_0_1 = Delay15_bypass_t_0_1 + 32'sd1) begin
            Delay15_bypass_reg[Delay15_bypass_t_0_1] <= Delay15_bypass_reg_next[Delay15_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_400_1 == 1'b1) begin
      for(Delay15_bypass_t_1 = 32'sd0; Delay15_bypass_t_1 <= 32'sd5; Delay15_bypass_t_1 = Delay15_bypass_t_1 + 32'sd1) begin
        Delay15_out1_6[Delay15_bypass_t_1] = Rate_Transition1_out1_8[Delay15_bypass_t_1];
      end
    end
    else begin
      for(Delay15_bypass_t_0_0 = 32'sd0; Delay15_bypass_t_0_0 <= 32'sd5; Delay15_bypass_t_0_0 = Delay15_bypass_t_0_0 + 32'sd1) begin
        Delay15_out1_6[Delay15_bypass_t_0_0] = Delay15_bypass_reg[Delay15_bypass_t_0_0];
      end
    end

    for(Delay15_bypass_t_2 = 32'sd0; Delay15_bypass_t_2 <= 32'sd5; Delay15_bypass_t_2 = Delay15_bypass_t_2 + 32'sd1) begin
      Delay15_bypass_reg_next[Delay15_bypass_t_2] = Rate_Transition1_out1_8[Delay15_bypass_t_2];
    end

  end

  assign Delay15_out1_7[0] = Delay15_out1_6[0];
  assign Delay15_out1_7[1] = Delay15_out1_6[1];
  assign Delay15_out1_7[2] = Delay15_out1_6[2];
  assign Delay15_out1_7[3] = Delay15_out1_6[3];
  assign Delay15_out1_7[4] = Delay15_out1_6[4];
  assign Delay15_out1_7[5] = Delay15_out1_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_0_5_process
      if (reset == 1'b1) begin
        for(rd_0_t_1_2 = 32'sd0; rd_0_t_1_2 <= 32'sd5; rd_0_t_1_2 = rd_0_t_1_2 + 32'sd1) begin
          Delay15_out1[rd_0_t_1_2] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0_2 = 32'sd0; rd_0_t_0_0_2 <= 32'sd5; rd_0_t_0_0_2 = rd_0_t_0_0_2 + 32'sd1) begin
            Delay15_out1[rd_0_t_0_0_2] <= Delay15_out1_7[rd_0_t_0_0_2];
          end
        end
      end
    end

  assign Delay15_out1_0 = Delay15_out1[0];

  assign Delay15_out1_unbuffer = (counterSig == 3'b000 ? Delay15_out1_0 :
              (counterSig == 3'b001 ? Delay15_out1_1 :
              (counterSig == 3'b010 ? Delay15_out1_2 :
              (counterSig == 3'b011 ? Delay15_out1_3 :
              (counterSig == 3'b100 ? Delay15_out1_4 :
              Delay15_out1_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_2_5_process
      if (reset == 1'b1) begin
        Delay15_out1_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1_unbuffer_1 <= Delay15_out1_unbuffer;
        end
      end
    end

  assign Subtract_sub_cast = {{10{Delay15_out1_unbuffer_1[29]}}, Delay15_out1_unbuffer_1};
  assign Subtract_sub_cast_1 = {ic_dsp_4[29], {ic_dsp_4, 9'b000000000}};
  assign Subtract_sub_temp = Subtract_sub_cast - Subtract_sub_cast_1;
  assign Subtract_out1 = Subtract_sub_temp[29:0];
  always @(posedge clk or posedge reset)
    begin : tapped_delay_9_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_7 = 32'sd0; tapped_delay_t_1_0_7 <= 32'sd4; tapped_delay_t_1_0_7 = tapped_delay_t_1_0_7 + 32'sd1) begin
          tapped_delay_reg_8[tapped_delay_t_1_0_7] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_16) begin
          for(tapped_delay_t_0_1_7 = 32'sd0; tapped_delay_t_0_1_7 <= 32'sd4; tapped_delay_t_0_1_7 = tapped_delay_t_0_1_7 + 32'sd1) begin
            tapped_delay_reg_8[tapped_delay_t_0_1_7] <= tapped_delay_reg_next_8[tapped_delay_t_0_1_7];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_08 = 32'sd0; tapped_delay_t_0_08 <= 32'sd4; tapped_delay_t_0_08 = tapped_delay_t_0_08 + 32'sd1) begin
      Subtract_out1_4[tapped_delay_t_0_08] = tapped_delay_reg_8[tapped_delay_t_0_08];
    end
    for(tapped_delay_t_18 = 32'sd0; tapped_delay_t_18 <= 32'sd3; tapped_delay_t_18 = tapped_delay_t_18 + 32'sd1) begin
      tapped_delay_reg_next_8[tapped_delay_t_18] = tapped_delay_reg_8[32'sd1 + tapped_delay_t_18];
    end

    tapped_delay_reg_next_8[4] = Subtract_out1;
  end

  assign Subtract_out1_5[0] = Subtract_out1_4[0];
  assign Subtract_out1_5[1] = Subtract_out1_4[1];
  assign Subtract_out1_5[2] = Subtract_out1_4[2];
  assign Subtract_out1_5[3] = Subtract_out1_4[3];
  assign Subtract_out1_5[4] = Subtract_out1_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_7_6_process
      if (reset == 1'b1) begin
        for(rd_7_t_1 = 32'sd0; rd_7_t_1 <= 32'sd4; rd_7_t_1 = rd_7_t_1 + 32'sd1) begin
          Subtract_out1_3[rd_7_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_7_t_0_0 = 32'sd0; rd_7_t_0_0 <= 32'sd4; rd_7_t_0_0 = rd_7_t_0_0 + 32'sd1) begin
            Subtract_out1_3[rd_7_t_0_0] <= Subtract_out1_5[rd_7_t_0_0];
          end
        end
      end
    end

  assign Subtract_out1_6[0] = Subtract_out1_3[0];
  assign Subtract_out1_6[1] = Subtract_out1_3[1];
  assign Subtract_out1_6[2] = Subtract_out1_3[2];
  assign Subtract_out1_6[3] = Subtract_out1_3[3];
  assign Subtract_out1_6[4] = Subtract_out1_3[4];
  assign Subtract_out1_6[5] = Subtract_out1_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay14_process
      if (reset == 1'b1) begin
        for(crp_out_delay14_t_1 = 32'sd0; crp_out_delay14_t_1 <= 32'sd5; crp_out_delay14_t_1 = crp_out_delay14_t_1 + 32'sd1) begin
          Subtract_out1_7[crp_out_delay14_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay14_t_0_0 = 32'sd0; crp_out_delay14_t_0_0 <= 32'sd5; crp_out_delay14_t_0_0 = crp_out_delay14_t_0_0 + 32'sd1) begin
            Subtract_out1_7[crp_out_delay14_t_0_0] <= Subtract_out1_6[crp_out_delay14_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay14_bypass_process
      if (reset == 1'b1) begin
        for(Delay14_bypass_t_1_0 = 32'sd0; Delay14_bypass_t_1_0 <= 32'sd5; Delay14_bypass_t_1_0 = Delay14_bypass_t_1_0 + 32'sd1) begin
          Delay14_bypass_reg[Delay14_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_400_1) begin
          for(Delay14_bypass_t_0_1 = 32'sd0; Delay14_bypass_t_0_1 <= 32'sd5; Delay14_bypass_t_0_1 = Delay14_bypass_t_0_1 + 32'sd1) begin
            Delay14_bypass_reg[Delay14_bypass_t_0_1] <= Delay14_bypass_reg_next[Delay14_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_400_1 == 1'b1) begin
      for(Delay14_bypass_t_1 = 32'sd0; Delay14_bypass_t_1 <= 32'sd5; Delay14_bypass_t_1 = Delay14_bypass_t_1 + 32'sd1) begin
        Delay14_out1[Delay14_bypass_t_1] = Subtract_out1_7[Delay14_bypass_t_1];
      end
    end
    else begin
      for(Delay14_bypass_t_0_0 = 32'sd0; Delay14_bypass_t_0_0 <= 32'sd5; Delay14_bypass_t_0_0 = Delay14_bypass_t_0_0 + 32'sd1) begin
        Delay14_out1[Delay14_bypass_t_0_0] = Delay14_bypass_reg[Delay14_bypass_t_0_0];
      end
    end

    for(Delay14_bypass_t_2 = 32'sd0; Delay14_bypass_t_2 <= 32'sd5; Delay14_bypass_t_2 = Delay14_bypass_t_2 + 32'sd1) begin
      Delay14_bypass_reg_next[Delay14_bypass_t_2] = Subtract_out1_7[Delay14_bypass_t_2];
    end

  end

  assign Bde1[0] = Delay14_out1[0];
  assign Bde1[1] = Delay14_out1[1];
  assign Bde1[2] = Delay14_out1[2];
  assign Bde1[3] = Delay14_out1[3];
  assign Bde1[4] = Delay14_out1[4];
  assign Bde1[5] = Delay14_out1[5];
  always @(posedge clk or posedge reset)
    begin : Delay41_process
      if (reset == 1'b1) begin
        for(Delay41_t_1 = 32'sd0; Delay41_t_1 <= 32'sd11; Delay41_t_1 = Delay41_t_1 + 32'sd1) begin
          Delay41_reg[Delay41_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_400_0) begin
          for(Delay41_t_0_1 = 32'sd0; Delay41_t_0_1 <= 32'sd11; Delay41_t_0_1 = Delay41_t_0_1 + 32'sd1) begin
            Delay41_reg[Delay41_t_0_1] <= Delay41_reg_next[Delay41_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(Delay41_t_0_0 = 32'sd0; Delay41_t_0_0 <= 32'sd5; Delay41_t_0_0 = Delay41_t_0_0 + 32'sd1) begin
      Bde2_6[Delay41_t_0_0] = Delay41_reg[32'sd6 + Delay41_t_0_0];
      Delay41_reg_next[Delay41_t_0_0] = Bde1[Delay41_t_0_0];
      Delay41_reg_next[Delay41_t_0_0 + 32'sd6] = Delay41_reg[Delay41_t_0_0];
    end

  end
  assign Bde2_7[0] = Bde2_6[0];
  assign Bde2_7[1] = Bde2_6[1];
  assign Bde2_7[2] = Bde2_6[2];
  assign Bde2_7[3] = Bde2_6[3];
  assign Bde2_7[4] = Bde2_6[4];
  assign Bde2_7[5] = Bde2_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_0_6_process
      if (reset == 1'b1) begin
        for(rd_0_t_1_3 = 32'sd0; rd_0_t_1_3 <= 32'sd5; rd_0_t_1_3 = rd_0_t_1_3 + 32'sd1) begin
          Bde2[rd_0_t_1_3] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0_3 = 32'sd0; rd_0_t_0_0_3 <= 32'sd5; rd_0_t_0_0_3 = rd_0_t_0_0_3 + 32'sd1) begin
            Bde2[rd_0_t_0_0_3] <= Bde2_7[rd_0_t_0_0_3];
          end
        end
      end
    end

  assign Bde2_0 = Bde2[0];

  assign Bde2_unbuffer = (counterSig_2 == 3'b000 ? Bde2_0 :
              (counterSig_2 == 3'b001 ? Bde2_1 :
              (counterSig_2 == 3'b010 ? Bde2_2 :
              (counterSig_2 == 3'b011 ? Bde2_3 :
              (counterSig_2 == 3'b100 ? Bde2_4 :
              Bde2_5)))));

  always @(posedge clk or posedge reset)
    begin : HwModeRegister_4_process
      if (reset == 1'b1) begin
        Bde2_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Bde2_unbuffer_1 <= Bde2_unbuffer;
        end
      end
    end

  assign mult_cast = {1'b0, Ade2_2};
  assign mult_mul_temp = Bde2_unbuffer_1 * mult_cast;
  assign mult_6 = mult_mul_temp[59:0];
  always @(posedge clk or posedge reset)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        for(PipelineRegister_t_1 = 32'sd0; PipelineRegister_t_1 <= 32'sd2; PipelineRegister_t_1 = PipelineRegister_t_1 + 32'sd1) begin
          PipelineRegister_reg[PipelineRegister_t_1] <= 60'sh000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(PipelineRegister_t_0_1 = 32'sd0; PipelineRegister_t_0_1 <= 32'sd2; PipelineRegister_t_0_1 = PipelineRegister_t_0_1 + 32'sd1) begin
            PipelineRegister_reg[PipelineRegister_t_0_1] <= PipelineRegister_reg_next[PipelineRegister_t_0_1];
          end
        end
      end
    end

  always @* begin
    mult_7 = PipelineRegister_reg[2];
    PipelineRegister_reg_next[0] = mult_6;

    for(PipelineRegister_t_0_0 = 32'sd0; PipelineRegister_t_0_0 <= 32'sd1; PipelineRegister_t_0_0 = PipelineRegister_t_0_0 + 32'sd1) begin
      PipelineRegister_reg_next[PipelineRegister_t_0_0 + 32'sd1] = PipelineRegister_reg[PipelineRegister_t_0_0];
    end

  end

  assign mult = mult_7[59:30];

  always @(posedge clk or posedge reset)
    begin : tapped_delay_10_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_8 = 32'sd0; tapped_delay_t_1_0_8 <= 32'sd4; tapped_delay_t_1_0_8 = tapped_delay_t_1_0_8 + 32'sd1) begin
          tapped_delay_reg_9[tapped_delay_t_1_0_8] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_17) begin
          for(tapped_delay_t_0_1_8 = 32'sd0; tapped_delay_t_0_1_8 <= 32'sd4; tapped_delay_t_0_1_8 = tapped_delay_t_0_1_8 + 32'sd1) begin
            tapped_delay_reg_9[tapped_delay_t_0_1_8] <= tapped_delay_reg_next_9[tapped_delay_t_0_1_8];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_09 = 32'sd0; tapped_delay_t_0_09 <= 32'sd4; tapped_delay_t_0_09 = tapped_delay_t_0_09 + 32'sd1) begin
      mult_4[tapped_delay_t_0_09] = tapped_delay_reg_9[tapped_delay_t_0_09];
    end
    for(tapped_delay_t_19 = 32'sd0; tapped_delay_t_19 <= 32'sd3; tapped_delay_t_19 = tapped_delay_t_19 + 32'sd1) begin
      tapped_delay_reg_next_9[tapped_delay_t_19] = tapped_delay_reg_9[32'sd1 + tapped_delay_t_19];
    end

    tapped_delay_reg_next_9[4] = mult;
  end

  assign mult_8[0] = mult_4[0];
  assign mult_8[1] = mult_4[1];
  assign mult_8[2] = mult_4[2];
  assign mult_8[3] = mult_4[3];
  assign mult_8[4] = mult_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_5_7_process
      if (reset == 1'b1) begin
        for(rd_5_t_1_1 = 32'sd0; rd_5_t_1_1 <= 32'sd4; rd_5_t_1_1 = rd_5_t_1_1 + 32'sd1) begin
          mult_3[rd_5_t_1_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_5_t_0_0_1 = 32'sd0; rd_5_t_0_0_1 <= 32'sd4; rd_5_t_0_0_1 = rd_5_t_0_0_1 + 32'sd1) begin
            mult_3[rd_5_t_0_0_1] <= mult_8[rd_5_t_0_0_1];
          end
        end
      end
    end

  assign mult_9[0] = mult_3[0];
  assign mult_9[1] = mult_3[1];
  assign mult_9[2] = mult_3[2];
  assign mult_9[3] = mult_3[3];
  assign mult_9[4] = mult_3[4];
  assign mult_9[5] = mult_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay15_process
      if (reset == 1'b1) begin
        for(crp_out_delay15_t_1 = 32'sd0; crp_out_delay15_t_1 <= 32'sd5; crp_out_delay15_t_1 = crp_out_delay15_t_1 + 32'sd1) begin
          mult_10[crp_out_delay15_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay15_t_0_0 = 32'sd0; crp_out_delay15_t_0_0 <= 32'sd5; crp_out_delay15_t_0_0 = crp_out_delay15_t_0_0 + 32'sd1) begin
            mult_10[crp_out_delay15_t_0_0] <= mult_9[crp_out_delay15_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay71_bypass_process
      if (reset == 1'b1) begin
        for(Delay71_bypass_t_1_0 = 32'sd0; Delay71_bypass_t_1_0 <= 32'sd5; Delay71_bypass_t_1_0 = Delay71_bypass_t_1_0 + 32'sd1) begin
          Delay71_bypass_reg[Delay71_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_400_1) begin
          for(Delay71_bypass_t_0_1 = 32'sd0; Delay71_bypass_t_0_1 <= 32'sd5; Delay71_bypass_t_0_1 = Delay71_bypass_t_0_1 + 32'sd1) begin
            Delay71_bypass_reg[Delay71_bypass_t_0_1] <= Delay71_bypass_reg_next[Delay71_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_400_1 == 1'b1) begin
      for(Delay71_bypass_t_1 = 32'sd0; Delay71_bypass_t_1 <= 32'sd5; Delay71_bypass_t_1 = Delay71_bypass_t_1 + 32'sd1) begin
        multde_7[Delay71_bypass_t_1] = mult_10[Delay71_bypass_t_1];
      end
    end
    else begin
      for(Delay71_bypass_t_0_0 = 32'sd0; Delay71_bypass_t_0_0 <= 32'sd5; Delay71_bypass_t_0_0 = Delay71_bypass_t_0_0 + 32'sd1) begin
        multde_7[Delay71_bypass_t_0_0] = Delay71_bypass_reg[Delay71_bypass_t_0_0];
      end
    end

    for(Delay71_bypass_t_2 = 32'sd0; Delay71_bypass_t_2 <= 32'sd5; Delay71_bypass_t_2 = Delay71_bypass_t_2 + 32'sd1) begin
      Delay71_bypass_reg_next[Delay71_bypass_t_2] = mult_10[Delay71_bypass_t_2];
    end

  end

  assign multde_6[0] = multde_7[0];
  assign multde_6[1] = multde_7[1];
  assign multde_6[2] = multde_7[2];
  assign multde_6[3] = multde_7[3];
  assign multde_6[4] = multde_7[4];
  assign multde_6[5] = multde_7[5];

  assign multde_8[0] = multde_6[0];
  assign multde_8[1] = multde_6[1];
  assign multde_8[2] = multde_6[2];
  assign multde_8[3] = multde_6[3];
  assign multde_8[4] = multde_6[4];
  assign multde_8[5] = multde_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_2_6_process
      if (reset == 1'b1) begin
        for(rd_2_t_1_1 = 32'sd0; rd_2_t_1_1 <= 32'sd5; rd_2_t_1_1 = rd_2_t_1_1 + 32'sd1) begin
          multde[rd_2_t_1_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_2_t_0_0_1 = 32'sd0; rd_2_t_0_0_1 <= 32'sd5; rd_2_t_0_0_1 = rd_2_t_0_0_1 + 32'sd1) begin
            multde[rd_2_t_0_0_1] <= multde_8[rd_2_t_0_0_1];
          end
        end
      end
    end

  assign multde_0 = multde[0];

  assign multde_unbuffer = (counterSig_1 == 3'b000 ? multde_0 :
              (counterSig_1 == 3'b001 ? multde_1 :
              (counterSig_1 == 3'b010 ? multde_2 :
              (counterSig_1 == 3'b011 ? multde_3 :
              (counterSig_1 == 3'b100 ? multde_4 :
              multde_5)))));

  always @(posedge clk or posedge reset)
    begin : rd_4_7_process
      if (reset == 1'b1) begin
        multde_unbuffer_1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          multde_unbuffer_1 <= multde_unbuffer;
        end
      end
    end

  assign P_5_1 = P_8[5];

  assign P_4_1 = P_8[4];

  assign P_3_1 = P_8[3];

  assign P_2_1 = P_8[2];

  assign P_1_1 = P_8[1];

  assign P_9[0] = P_6[0];
  assign P_9[1] = P_6[1];
  assign P_9[2] = P_6[2];
  assign P_9[3] = P_6[3];
  assign P_9[4] = P_6[4];
  assign P_9[5] = P_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_0_7_process
      if (reset == 1'b1) begin
        for(rd_0_t_1_4 = 32'sd0; rd_0_t_1_4 <= 32'sd5; rd_0_t_1_4 = rd_0_t_1_4 + 32'sd1) begin
          P_8[rd_0_t_1_4] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0_4 = 32'sd0; rd_0_t_0_0_4 <= 32'sd5; rd_0_t_0_0_4 = rd_0_t_0_0_4 + 32'sd1) begin
            P_8[rd_0_t_0_0_4] <= P_9[rd_0_t_0_0_4];
          end
        end
      end
    end

  assign P_0 = P_8[0];

  assign P_unbuffer_1 = (counterSig_1 == 3'b000 ? P_0 :
              (counterSig_1 == 3'b001 ? P_1_1 :
              (counterSig_1 == 3'b010 ? P_2_1 :
              (counterSig_1 == 3'b011 ? P_3_1 :
              (counterSig_1 == 3'b100 ? P_4_1 :
              P_5_1)))));

  always @(posedge clk or posedge reset)
    begin : rd_3_6_process
      if (reset == 1'b1) begin
        P_unbuffer_2 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          P_unbuffer_2 <= P_unbuffer_1;
        end
      end
    end

  assign add1_add_cast = {P_unbuffer_2[29], {P_unbuffer_2, 11'b00000000000}};
  assign add1_add_cast_1 = {{12{multde_unbuffer_1[29]}}, multde_unbuffer_1};
  assign add1_add_temp = add1_add_cast + add1_add_cast_1;
  assign add = add1_add_temp[40:11];
  always @(posedge clk or posedge reset)
    begin : tapped_delay_11_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_9 = 32'sd0; tapped_delay_t_1_0_9 <= 32'sd4; tapped_delay_t_1_0_9 = tapped_delay_t_1_0_9 + 32'sd1) begin
          tapped_delay_reg_10[tapped_delay_t_1_0_9] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_18) begin
          for(tapped_delay_t_0_1_9 = 32'sd0; tapped_delay_t_0_1_9 <= 32'sd4; tapped_delay_t_0_1_9 = tapped_delay_t_0_1_9 + 32'sd1) begin
            tapped_delay_reg_10[tapped_delay_t_0_1_9] <= tapped_delay_reg_next_10[tapped_delay_t_0_1_9];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_010 = 32'sd0; tapped_delay_t_0_010 <= 32'sd4; tapped_delay_t_0_010 = tapped_delay_t_0_010 + 32'sd1) begin
      add_4[tapped_delay_t_0_010] = tapped_delay_reg_10[tapped_delay_t_0_010];
    end
    for(tapped_delay_t_110 = 32'sd0; tapped_delay_t_110 <= 32'sd3; tapped_delay_t_110 = tapped_delay_t_110 + 32'sd1) begin
      tapped_delay_reg_next_10[tapped_delay_t_110] = tapped_delay_reg_10[32'sd1 + tapped_delay_t_110];
    end

    tapped_delay_reg_next_10[4] = add;
  end

  assign add_5[0] = add_4[0];
  assign add_5[1] = add_4[1];
  assign add_5[2] = add_4[2];
  assign add_5[3] = add_4[3];
  assign add_5[4] = add_4[4];

  always @(posedge clk or posedge reset)
    begin : rd_6_6_process
      if (reset == 1'b1) begin
        for(rd_6_t_1 = 32'sd0; rd_6_t_1 <= 32'sd4; rd_6_t_1 = rd_6_t_1 + 32'sd1) begin
          add_3[rd_6_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_6_t_0_0 = 32'sd0; rd_6_t_0_0 <= 32'sd4; rd_6_t_0_0 = rd_6_t_0_0 + 32'sd1) begin
            add_3[rd_6_t_0_0] <= add_5[rd_6_t_0_0];
          end
        end
      end
    end

  assign add_6[0] = add_3[0];
  assign add_6[1] = add_3[1];
  assign add_6[2] = add_3[2];
  assign add_6[3] = add_3[3];
  assign add_6[4] = add_3[4];
  assign add_6[5] = add_2;

  always @(posedge clk or posedge reset)
    begin : crp_out_delay16_process
      if (reset == 1'b1) begin
        for(crp_out_delay16_t_1 = 32'sd0; crp_out_delay16_t_1 <= 32'sd5; crp_out_delay16_t_1 = crp_out_delay16_t_1 + 32'sd1) begin
          add_7[crp_out_delay16_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay16_t_0_0 = 32'sd0; crp_out_delay16_t_0_0 <= 32'sd5; crp_out_delay16_t_0_0 = crp_out_delay16_t_0_0 + 32'sd1) begin
            add_7[crp_out_delay16_t_0_0] <= add_6[crp_out_delay16_t_0_0];
          end
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay91_bypass_process
      if (reset == 1'b1) begin
        for(Delay91_bypass_t_1_0 = 32'sd0; Delay91_bypass_t_1_0 <= 32'sd5; Delay91_bypass_t_1_0 = Delay91_bypass_t_1_0 + 32'sd1) begin
          Delay91_bypass_reg[Delay91_bypass_t_1_0] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_400_1) begin
          for(Delay91_bypass_t_0_1 = 32'sd0; Delay91_bypass_t_0_1 <= 32'sd5; Delay91_bypass_t_0_1 = Delay91_bypass_t_0_1 + 32'sd1) begin
            Delay91_bypass_reg[Delay91_bypass_t_0_1] <= Delay91_bypass_reg_next[Delay91_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_400_1 == 1'b1) begin
      for(Delay91_bypass_t_1 = 32'sd0; Delay91_bypass_t_1 <= 32'sd5; Delay91_bypass_t_1 = Delay91_bypass_t_1 + 32'sd1) begin
        P_7[Delay91_bypass_t_1] = add_7[Delay91_bypass_t_1];
      end
    end
    else begin
      for(Delay91_bypass_t_0_0 = 32'sd0; Delay91_bypass_t_0_0 <= 32'sd5; Delay91_bypass_t_0_0 = Delay91_bypass_t_0_0 + 32'sd1) begin
        P_7[Delay91_bypass_t_0_0] = Delay91_bypass_reg[Delay91_bypass_t_0_0];
      end
    end

    for(Delay91_bypass_t_2 = 32'sd0; Delay91_bypass_t_2 <= 32'sd5; Delay91_bypass_t_2 = Delay91_bypass_t_2 + 32'sd1) begin
      Delay91_bypass_reg_next[Delay91_bypass_t_2] = add_7[Delay91_bypass_t_2];
    end

  end

  assign P_6[0] = P_7[0];
  assign P_6[1] = P_7[1];
  assign P_6[2] = P_7[2];
  assign P_6[3] = P_7[3];
  assign P_6[4] = P_7[4];
  assign P_6[5] = P_7[5];

  assign P_10[0] = P_6[0];
  assign P_10[1] = P_6[1];
  assign P_10[2] = P_6[2];
  assign P_10[3] = P_6[3];
  assign P_10[4] = P_6[4];
  assign P_10[5] = P_6[5];

  always @(posedge clk or posedge reset)
    begin : rd_3_7_process
      if (reset == 1'b1) begin
        for(rd_3_t_1 = 32'sd0; rd_3_t_1 <= 32'sd5; rd_3_t_1 = rd_3_t_1 + 32'sd1) begin
          P[rd_3_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_3_t_0_0 = 32'sd0; rd_3_t_0_0 <= 32'sd5; rd_3_t_0_0 = rd_3_t_0_0 + 32'sd1) begin
            P[rd_3_t_0_0] <= P_10[rd_3_t_0_0];
          end
        end
      end
    end

  assign P_0_1 = P[0];

  assign P_unbuffer = (counterSig == 3'b000 ? P_0_1 :
              (counterSig == 3'b001 ? P_1 :
              (counterSig == 3'b010 ? P_2 :
              (counterSig == 3'b011 ? P_3 :
              (counterSig == 3'b100 ? P_4 :
              P_5)))));

  always @(posedge clk or posedge reset)
    begin : tapped_delay_12_process
      if (reset == 1'b1) begin
        for(tapped_delay_t_1_0_10 = 32'sd0; tapped_delay_t_1_0_10 <= 32'sd4; tapped_delay_t_1_0_10 = tapped_delay_t_1_0_10 + 32'sd1) begin
          tapped_delay_reg_11[tapped_delay_t_1_0_10] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_gated_19) begin
          for(tapped_delay_t_0_1_10 = 32'sd0; tapped_delay_t_0_1_10 <= 32'sd4; tapped_delay_t_0_1_10 = tapped_delay_t_0_1_10 + 32'sd1) begin
            tapped_delay_reg_11[tapped_delay_t_0_1_10] <= tapped_delay_reg_next_11[tapped_delay_t_0_1_10];
          end
        end
      end
    end

  always @* begin

    for(tapped_delay_t_0_011 = 32'sd0; tapped_delay_t_0_011 <= 32'sd4; tapped_delay_t_0_011 = tapped_delay_t_0_011 + 32'sd1) begin
      ic_dsp_3[tapped_delay_t_0_011] = tapped_delay_reg_11[tapped_delay_t_0_011];
    end
    for(tapped_delay_t_111 = 32'sd0; tapped_delay_t_111 <= 32'sd3; tapped_delay_t_111 = tapped_delay_t_111 + 32'sd1) begin
      tapped_delay_reg_next_11[tapped_delay_t_111] = tapped_delay_reg_11[32'sd1 + tapped_delay_t_111];
    end

    tapped_delay_reg_next_11[4] = P_unbuffer;
  end

  assign ic_dsp_5[0] = ic_dsp_3[0];
  assign ic_dsp_5[1] = ic_dsp_3[1];
  assign ic_dsp_5[2] = ic_dsp_3[2];
  assign ic_dsp_5[3] = ic_dsp_3[3];
  assign ic_dsp_5[4] = ic_dsp_3[4];
  always @(posedge clk or posedge reset)
    begin : rd_11_3_process
      if (reset == 1'b1) begin
        for(rd_11_t_1 = 32'sd0; rd_11_t_1 <= 32'sd4; rd_11_t_1 = rd_11_t_1 + 32'sd1) begin
          ic_dsp_2[rd_11_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_11_t_0_0 = 32'sd0; rd_11_t_0_0 <= 32'sd4; rd_11_t_0_0 = rd_11_t_0_0 + 32'sd1) begin
            ic_dsp_2[rd_11_t_0_0] <= ic_dsp_5[rd_11_t_0_0];
          end
        end
      end
    end

  HDL_Subsystem u_HDL_Subsystem (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .enb_1_400_1(enb_1_400_1),
                                 .enb_1_12000_0(enb_1_12000_0),
                                 .enb_1_200_1(enb_1_200_1),
                                 .enb_1_12000_1(enb_1_12000_1),
                                 .enb_1_6000_1(enb_1_6000_1),
                                 .enb_1_200_0(enb_1_200_0),
                                 .enb_1_6000_0(enb_1_6000_0),
                                 .Dw_Lc(ic_dsp_2[0]),  // sfix30_En13
                                 .Up_L3c(ic_dsp_2[1]),  // sfix30_En13
                                 .Dw_L2c(ic_dsp_2[2]),  // sfix30_En13
                                 .Up_L2c(ic_dsp_2[3]),  // sfix30_En13
                                 .Dw_L1c(ic_dsp_2[4]),  // sfix30_En13
                                 .Up_L1c(ic_dsp_1),  // sfix30_En13
                                 .Va(Va1),  // sfix30_En13
                                 .Vb(Vb1),  // sfix30_En13
                                 .Vc(Vc1),  // sfix30_En13
                                 .I_sink(I_sink),  // sfix30_En13
                                 .sch_ctr_399(s),  // ufix9
                                 .sch_ctr_11999(s_2),  // ufix14
                                 .Dw_L3s(Dw_L3s),  // sfix30_En13
                                 .Up_L3s(Up_L3s),  // sfix30_En13
                                 .Dw_L2s(Dw_L2s),  // sfix30_En13
                                 .Dw_L1s(Dw_L1s),  // sfix30_En13
                                 .Up_L2s(Up_L2s),  // sfix30_En13
                                 .Up_L1s(Up_L1s),  // sfix30_En13
                                 .Dw_L1v(Dw_L1v),  // sfix30_En13
                                 .Dw_L2v(Dw_L2v),  // sfix30_En13
                                 .Dw_L3v(Dw_L3v),  // sfix30_En13
                                 .Up_L1v(Up_L1v),  // sfix30_En13
                                 .Up_Lv(Up_Lv),  // sfix30_En13
                                 .Up_L3v(Up_L3v),  // sfix30_En13
                                 .I_load(I_load),  // sfix30_En13
                                 .Ib(Ib),  // sfix30_En13
                                 .Ia(Ia),  // sfix30_En13
                                 .Ic(Ic),  // sfix30_En13
                                 .Vc1(Vc),  // sfix30_En13
                                 .Vb1(Vb),  // sfix30_En13
                                 .Va1(Va),  // sfix30_En13
                                 .V_out(V_out)  // sfix30_En13
                                 );
  assign ce_out = enb_1_12000_1;

endmodule  // FPGA

