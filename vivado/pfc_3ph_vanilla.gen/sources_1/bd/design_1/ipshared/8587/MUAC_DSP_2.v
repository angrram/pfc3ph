// -------------------------------------------------------------
// 
// File Name: verilog_1\hdlsrc\gm_pfcvan3ph_s\MUAC_DSP_2.v
// Created: 2024-12-08 17:13:30
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MUAC_DSP_2
// Source Path: gm_pfcvan3ph_s/FPGA/HDL Subsystem/HDL Algorithm/DA_MATRIX/Subsystem/a_b_sub/dsp_block/MUAC_DSP_2
// Hierarchy Level: 7
// Model version: 1.182
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MUAC_DSP_2
          (clk,
           reset,
           enb_1_200_0,
           inB,
           inA_0,
           inA_1,
           inA_2,
           inA_3,
           inA_4,
           inA_5,
           inA_6,
           inA_7,
           inA_8,
           inA_9,
           inA_10,
           inA_11,
           inA_12,
           inA_13,
           inA_14,
           inA_15,
           inA_16,
           inA_17,
           inA_18,
           inA_19,
           Reset_1,
           P_0,
           P_1,
           P_2,
           P_3,
           P_4,
           P_5,
           P_6,
           P_7,
           P_8,
           P_9,
           P_10,
           P_11,
           P_12,
           P_13,
           P_14,
           P_15,
           P_16,
           P_17,
           P_18,
           P_19);


  input   clk;
  input   reset;
  input   enb_1_200_0;
  input   signed [29:0] inB;  // sfix30_En18
  input   signed [29:0] inA_0;  // sfix30_En18
  input   signed [29:0] inA_1;  // sfix30_En18
  input   signed [29:0] inA_2;  // sfix30_En18
  input   signed [29:0] inA_3;  // sfix30_En18
  input   signed [29:0] inA_4;  // sfix30_En18
  input   signed [29:0] inA_5;  // sfix30_En18
  input   signed [29:0] inA_6;  // sfix30_En18
  input   signed [29:0] inA_7;  // sfix30_En18
  input   signed [29:0] inA_8;  // sfix30_En18
  input   signed [29:0] inA_9;  // sfix30_En18
  input   signed [29:0] inA_10;  // sfix30_En18
  input   signed [29:0] inA_11;  // sfix30_En18
  input   signed [29:0] inA_12;  // sfix30_En18
  input   signed [29:0] inA_13;  // sfix30_En18
  input   signed [29:0] inA_14;  // sfix30_En18
  input   signed [29:0] inA_15;  // sfix30_En18
  input   signed [29:0] inA_16;  // sfix30_En18
  input   signed [29:0] inA_17;  // sfix30_En18
  input   signed [29:0] inA_18;  // sfix30_En18
  input   signed [29:0] inA_19;  // sfix30_En18
  input   Reset_1;
  output  signed [29:0] P_0;  // sfix30_En13
  output  signed [29:0] P_1;  // sfix30_En13
  output  signed [29:0] P_2;  // sfix30_En13
  output  signed [29:0] P_3;  // sfix30_En13
  output  signed [29:0] P_4;  // sfix30_En13
  output  signed [29:0] P_5;  // sfix30_En13
  output  signed [29:0] P_6;  // sfix30_En13
  output  signed [29:0] P_7;  // sfix30_En13
  output  signed [29:0] P_8;  // sfix30_En13
  output  signed [29:0] P_9;  // sfix30_En13
  output  signed [29:0] P_10;  // sfix30_En13
  output  signed [29:0] P_11;  // sfix30_En13
  output  signed [29:0] P_12;  // sfix30_En13
  output  signed [29:0] P_13;  // sfix30_En13
  output  signed [29:0] P_14;  // sfix30_En13
  output  signed [29:0] P_15;  // sfix30_En13
  output  signed [29:0] P_16;  // sfix30_En13
  output  signed [29:0] P_17;  // sfix30_En13
  output  signed [29:0] P_18;  // sfix30_En13
  output  signed [29:0] P_19;  // sfix30_En13


  wire signed [29:0] Delay0_iv;  // sfix30_En18
  wire signed [29:0] Delay0_toDel;  // sfix30_En18
  reg signed [29:0] Bde1;  // sfix30_En18
  wire signed [29:0] Delay4_iv;  // sfix30_En18
  wire signed [29:0] Delay4_toDel;  // sfix30_En18
  reg signed [29:0] Bde2;  // sfix30_En18
  wire signed [29:0] inA [0:19];  // sfix30_En18 [20]
  wire signed [29:0] Delay2_iv [0:19];  // sfix30_En18 [20]
  reg signed [29:0] Delay2_toDel [0:19];  // sfix30_En18 [20]
  reg signed [29:0] Delay2_lowered_reg [0:19];  // sfix30 [20]
  wire signed [29:0] Delay2_lowered_reg_next [0:19];  // sfix30_En18 [20]
  wire signed [29:0] Ade1 [0:19];  // sfix30_En18 [20]
  wire signed [29:0] Delay5_iv [0:19];  // sfix30_En18 [20]
  reg signed [29:0] Delay5_toDel [0:19];  // sfix30_En18 [20]
  reg signed [29:0] Delay5_lowered_reg [0:19];  // sfix30 [20]
  wire signed [29:0] Delay5_lowered_reg_next [0:19];  // sfix30_En18 [20]
  wire signed [29:0] Ade2 [0:19];  // sfix30_En18 [20]
  wire signed [59:0] mult_mul_temp [0:19];  // sfix60_En36 [20]
  wire signed [29:0] mult_1 [0:19];  // sfix30_En13 [20]
  wire signed [29:0] Delay7_iv [0:19];  // sfix30_En13 [20]
  reg signed [29:0] Delay7_toDel [0:19];  // sfix30_En13 [20]
  reg signed [29:0] Delay7_lowered_reg [0:19];  // sfix30 [20]
  wire signed [29:0] Delay7_lowered_reg_next [0:19];  // sfix30_En13 [20]
  wire signed [29:0] multde [0:19];  // sfix30_En13 [20]
  wire signed [29:0] Delay9_iv [0:19];  // sfix30_En13 [20]
  wire signed [29:0] P [0:19];  // sfix30_En13 [20]
  wire signed [29:0] add [0:19];  // sfix30_En13 [20]
  reg signed [29:0] Delay9_toDel [0:19];  // sfix30_En13 [20]
  reg signed [29:0] Delay9_lowered_reg [0:19];  // sfix30 [20]
  wire signed [29:0] Delay9_lowered_reg_next [0:19];  // sfix30_En13 [20]
  reg signed [31:0] reset_in1_t_0_0;  // int32
  reg signed [31:0] reset_in1_t_1;  // int32
  reg signed [31:0] Delay2_lowered_t_0_1;  // int32
  reg signed [31:0] Delay2_lowered_t_1;  // int32
  reg signed [31:0] reset_in3_t_0_0;  // int32
  reg signed [31:0] reset_in3_t_1;  // int32
  reg signed [31:0] Delay5_lowered_t_0_1;  // int32
  reg signed [31:0] Delay5_lowered_t_1;  // int32
  reg signed [31:0] reset_in4_t_0_0;  // int32
  reg signed [31:0] reset_in4_t_1;  // int32
  reg signed [31:0] Delay7_lowered_t_0_1;  // int32
  reg signed [31:0] Delay7_lowered_t_1;  // int32
  reg signed [31:0] reset_in5_t_0_0;  // int32
  reg signed [31:0] reset_in5_t_1;  // int32
  reg signed [31:0] Delay9_lowered_t_0_1;  // int32
  reg signed [31:0] Delay9_lowered_t_1;  // int32


  assign Delay0_iv = 30'sb000000000000000000000000000000;

  assign Delay0_toDel = (Reset_1 == 1'b0 ? inB :
              Delay0_iv);

  always @(posedge clk or posedge reset)
    begin : Delay0_lowered_process
      if (reset == 1'b1) begin
        Bde1 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb_1_200_0) begin
          Bde1 <= Delay0_toDel;
        end
      end
    end
  assign Delay4_iv = 30'sb000000000000000000000000000000;

  assign Delay4_toDel = (Reset_1 == 1'b0 ? Bde1 :
              Delay4_iv);

  always @(posedge clk or posedge reset)
    begin : Delay4_lowered_process
      if (reset == 1'b1) begin
        Bde2 <= 30'sb000000000000000000000000000000;
      end
      else begin
        if (enb_1_200_0) begin
          Bde2 <= Delay4_toDel;
        end
      end
    end
  assign inA[0] = inA_0;
  assign inA[1] = inA_1;
  assign inA[2] = inA_2;
  assign inA[3] = inA_3;
  assign inA[4] = inA_4;
  assign inA[5] = inA_5;
  assign inA[6] = inA_6;
  assign inA[7] = inA_7;
  assign inA[8] = inA_8;
  assign inA[9] = inA_9;
  assign inA[10] = inA_10;
  assign inA[11] = inA_11;
  assign inA[12] = inA_12;
  assign inA[13] = inA_13;
  assign inA[14] = inA_14;
  assign inA[15] = inA_15;
  assign inA[16] = inA_16;
  assign inA[17] = inA_17;
  assign inA[18] = inA_18;
  assign inA[19] = inA_19;


  genvar ii4;
  generate
    for(ii4 = 32'sd0; ii4 <= 32'sd19; ii4 = ii4 + 32'sd1) begin:Delay2_iv_gen
      assign Delay2_iv[ii4] = 30'sb000000000000000000000000000000;
    end
  endgenerate

  always @* begin
    if (Reset_1 == 1'b0) begin
      for(reset_in1_t_1 = 32'sd0; reset_in1_t_1 <= 32'sd19; reset_in1_t_1 = reset_in1_t_1 + 32'sd1) begin
        Delay2_toDel[reset_in1_t_1] = inA[reset_in1_t_1];
      end
    end
    else begin
      for(reset_in1_t_0_0 = 32'sd0; reset_in1_t_0_0 <= 32'sd19; reset_in1_t_0_0 = reset_in1_t_0_0 + 32'sd1) begin
        Delay2_toDel[reset_in1_t_0_0] = Delay2_iv[reset_in1_t_0_0];
      end
    end
  end

  always @(posedge clk or posedge reset)
    begin : Delay2_lowered_process
      if (reset == 1'b1) begin
        for(Delay2_lowered_t_1 = 32'sd0; Delay2_lowered_t_1 <= 32'sd19; Delay2_lowered_t_1 = Delay2_lowered_t_1 + 32'sd1) begin
          Delay2_lowered_reg[Delay2_lowered_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_200_0) begin
          for(Delay2_lowered_t_0_1 = 32'sd0; Delay2_lowered_t_0_1 <= 32'sd19; Delay2_lowered_t_0_1 = Delay2_lowered_t_0_1 + 32'sd1) begin
            Delay2_lowered_reg[Delay2_lowered_t_0_1] <= Delay2_lowered_reg_next[Delay2_lowered_t_0_1];
          end
        end
      end
    end
  genvar t_0_06;
  generate
    for(t_0_06 = 32'sd0; t_0_06 <= 32'sd19; t_0_06 = t_0_06 + 32'sd1) begin:Delay2_lowered_reg_next_gen
      assign Ade1[t_0_06] = Delay2_lowered_reg[t_0_06];
      assign Delay2_lowered_reg_next[t_0_06] = Delay2_toDel[t_0_06];
    end
  endgenerate

  genvar ii11;
  generate
    for(ii11 = 32'sd0; ii11 <= 32'sd19; ii11 = ii11 + 32'sd1) begin:Delay5_iv_gen
      assign Delay5_iv[ii11] = 30'sb000000000000000000000000000000;
    end
  endgenerate

  always @* begin
    if (Reset_1 == 1'b0) begin
      for(reset_in3_t_1 = 32'sd0; reset_in3_t_1 <= 32'sd19; reset_in3_t_1 = reset_in3_t_1 + 32'sd1) begin
        Delay5_toDel[reset_in3_t_1] = Ade1[reset_in3_t_1];
      end
    end
    else begin
      for(reset_in3_t_0_0 = 32'sd0; reset_in3_t_0_0 <= 32'sd19; reset_in3_t_0_0 = reset_in3_t_0_0 + 32'sd1) begin
        Delay5_toDel[reset_in3_t_0_0] = Delay5_iv[reset_in3_t_0_0];
      end
    end
  end

  always @(posedge clk or posedge reset)
    begin : Delay5_lowered_process
      if (reset == 1'b1) begin
        for(Delay5_lowered_t_1 = 32'sd0; Delay5_lowered_t_1 <= 32'sd19; Delay5_lowered_t_1 = Delay5_lowered_t_1 + 32'sd1) begin
          Delay5_lowered_reg[Delay5_lowered_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_200_0) begin
          for(Delay5_lowered_t_0_1 = 32'sd0; Delay5_lowered_t_0_1 <= 32'sd19; Delay5_lowered_t_0_1 = Delay5_lowered_t_0_1 + 32'sd1) begin
            Delay5_lowered_reg[Delay5_lowered_t_0_1] <= Delay5_lowered_reg_next[Delay5_lowered_t_0_1];
          end
        end
      end
    end
  genvar t_0_011;
  generate
    for(t_0_011 = 32'sd0; t_0_011 <= 32'sd19; t_0_011 = t_0_011 + 32'sd1) begin:Delay5_lowered_reg_next_gen
      assign Ade2[t_0_011] = Delay5_lowered_reg[t_0_011];
      assign Delay5_lowered_reg_next[t_0_011] = Delay5_toDel[t_0_011];
    end
  endgenerate

  genvar t_0_021;
  generate
    for(t_0_021 = 32'sd0; t_0_021 <= 32'sd19; t_0_021 = t_0_021 + 32'sd1) begin:mult_1_gen
      assign mult_mul_temp[t_0_021] = Bde2 * Ade2[t_0_021];
      assign mult_1[t_0_021] = mult_mul_temp[t_0_021][52:23];
    end
  endgenerate

  genvar ii21;
  generate
    for(ii21 = 32'sd0; ii21 <= 32'sd19; ii21 = ii21 + 32'sd1) begin:Delay7_iv_gen
      assign Delay7_iv[ii21] = 30'sb000000000000000000000000000000;
    end
  endgenerate

  always @* begin
    if (Reset_1 == 1'b0) begin
      for(reset_in4_t_1 = 32'sd0; reset_in4_t_1 <= 32'sd19; reset_in4_t_1 = reset_in4_t_1 + 32'sd1) begin
        Delay7_toDel[reset_in4_t_1] = mult_1[reset_in4_t_1];
      end
    end
    else begin
      for(reset_in4_t_0_0 = 32'sd0; reset_in4_t_0_0 <= 32'sd19; reset_in4_t_0_0 = reset_in4_t_0_0 + 32'sd1) begin
        Delay7_toDel[reset_in4_t_0_0] = Delay7_iv[reset_in4_t_0_0];
      end
    end
  end

  always @(posedge clk or posedge reset)
    begin : Delay7_lowered_process
      if (reset == 1'b1) begin
        for(Delay7_lowered_t_1 = 32'sd0; Delay7_lowered_t_1 <= 32'sd19; Delay7_lowered_t_1 = Delay7_lowered_t_1 + 32'sd1) begin
          Delay7_lowered_reg[Delay7_lowered_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_200_0) begin
          for(Delay7_lowered_t_0_1 = 32'sd0; Delay7_lowered_t_0_1 <= 32'sd19; Delay7_lowered_t_0_1 = Delay7_lowered_t_0_1 + 32'sd1) begin
            Delay7_lowered_reg[Delay7_lowered_t_0_1] <= Delay7_lowered_reg_next[Delay7_lowered_t_0_1];
          end
        end
      end
    end
  genvar t_0_031;
  generate
    for(t_0_031 = 32'sd0; t_0_031 <= 32'sd19; t_0_031 = t_0_031 + 32'sd1) begin:Delay7_lowered_reg_next_gen
      assign multde[t_0_031] = Delay7_lowered_reg[t_0_031];
      assign Delay7_lowered_reg_next[t_0_031] = Delay7_toDel[t_0_031];
    end
  endgenerate

  genvar ii31;
  generate
    for(ii31 = 32'sd0; ii31 <= 32'sd19; ii31 = ii31 + 32'sd1) begin:Delay9_iv_gen
      assign Delay9_iv[ii31] = 30'sb000000000000000000000000000000;
    end
  endgenerate


  genvar t_0_041;
  generate
    for(t_0_041 = 32'sd0; t_0_041 <= 32'sd19; t_0_041 = t_0_041 + 32'sd1) begin:add_gen
      assign add[t_0_041] = P[t_0_041] + multde[t_0_041];
    end
  endgenerate
  always @* begin
    if (Reset_1 == 1'b0) begin
      for(reset_in5_t_1 = 32'sd0; reset_in5_t_1 <= 32'sd19; reset_in5_t_1 = reset_in5_t_1 + 32'sd1) begin
        Delay9_toDel[reset_in5_t_1] = add[reset_in5_t_1];
      end
    end
    else begin
      for(reset_in5_t_0_0 = 32'sd0; reset_in5_t_0_0 <= 32'sd19; reset_in5_t_0_0 = reset_in5_t_0_0 + 32'sd1) begin
        Delay9_toDel[reset_in5_t_0_0] = Delay9_iv[reset_in5_t_0_0];
      end
    end
  end

  always @(posedge clk or posedge reset)
    begin : Delay9_lowered_process
      if (reset == 1'b1) begin
        for(Delay9_lowered_t_1 = 32'sd0; Delay9_lowered_t_1 <= 32'sd19; Delay9_lowered_t_1 = Delay9_lowered_t_1 + 32'sd1) begin
          Delay9_lowered_reg[Delay9_lowered_t_1] <= 30'sb000000000000000000000000000000;
        end
      end
      else begin
        if (enb_1_200_0) begin
          for(Delay9_lowered_t_0_1 = 32'sd0; Delay9_lowered_t_0_1 <= 32'sd19; Delay9_lowered_t_0_1 = Delay9_lowered_t_0_1 + 32'sd1) begin
            Delay9_lowered_reg[Delay9_lowered_t_0_1] <= Delay9_lowered_reg_next[Delay9_lowered_t_0_1];
          end
        end
      end
    end
  genvar t_0_051;
  generate
    for(t_0_051 = 32'sd0; t_0_051 <= 32'sd19; t_0_051 = t_0_051 + 32'sd1) begin:Delay9_lowered_reg_next_gen
      assign P[t_0_051] = Delay9_lowered_reg[t_0_051];
      assign Delay9_lowered_reg_next[t_0_051] = Delay9_toDel[t_0_051];
    end
  endgenerate
  assign P_0 = P[0];

  assign P_1 = P[1];

  assign P_2 = P[2];

  assign P_3 = P[3];

  assign P_4 = P[4];

  assign P_5 = P[5];

  assign P_6 = P[6];

  assign P_7 = P[7];

  assign P_8 = P[8];

  assign P_9 = P[9];

  assign P_10 = P[10];

  assign P_11 = P[11];

  assign P_12 = P[12];

  assign P_13 = P[13];

  assign P_14 = P[14];

  assign P_15 = P[15];

  assign P_16 = P[16];

  assign P_17 = P[17];

  assign P_18 = P[18];

  assign P_19 = P[19];

endmodule  // MUAC_DSP_2

