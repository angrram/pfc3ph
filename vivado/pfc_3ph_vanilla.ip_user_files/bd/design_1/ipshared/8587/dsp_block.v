// -------------------------------------------------------------
// 
// File Name: verilog_1\hdlsrc\gm_pfcvan3ph_s\dsp_block.v
// Created: 2024-12-08 17:13:30
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dsp_block
// Source Path: gm_pfcvan3ph_s/FPGA/HDL Subsystem/HDL Algorithm/DA_MATRIX/Subsystem/a_b_sub/dsp_block
// Hierarchy Level: 6
// Model version: 1.182
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

(* use_dsp  = "yes" *) module dsp_block
          (clk,
           reset,
           enb_1_200_0,
           inA_0,
           inA_1,
           inA_2,
           inA_3,
           inA_4,
           inA_5,
           inA_6,
           inA_7,
           inA_8,
           inA_9,
           inA_10,
           inA_11,
           inA_12,
           inA_13,
           inA_14,
           inA_15,
           inA_16,
           inA_17,
           inA_18,
           inA_19,
           inB,
           Reset_1,
           P_0,
           P_1,
           P_2,
           P_3,
           P_4,
           P_5,
           P_6,
           P_7,
           P_8,
           P_9,
           P_10,
           P_11,
           P_12,
           P_13,
           P_14,
           P_15,
           P_16,
           P_17,
           P_18,
           P_19);


  input   clk;
  input   reset;
  input   enb_1_200_0;
  input   signed [29:0] inA_0;  // sfix30_En18
  input   signed [29:0] inA_1;  // sfix30_En18
  input   signed [29:0] inA_2;  // sfix30_En18
  input   signed [29:0] inA_3;  // sfix30_En18
  input   signed [29:0] inA_4;  // sfix30_En18
  input   signed [29:0] inA_5;  // sfix30_En18
  input   signed [29:0] inA_6;  // sfix30_En18
  input   signed [29:0] inA_7;  // sfix30_En18
  input   signed [29:0] inA_8;  // sfix30_En18
  input   signed [29:0] inA_9;  // sfix30_En18
  input   signed [29:0] inA_10;  // sfix30_En18
  input   signed [29:0] inA_11;  // sfix30_En18
  input   signed [29:0] inA_12;  // sfix30_En18
  input   signed [29:0] inA_13;  // sfix30_En18
  input   signed [29:0] inA_14;  // sfix30_En18
  input   signed [29:0] inA_15;  // sfix30_En18
  input   signed [29:0] inA_16;  // sfix30_En18
  input   signed [29:0] inA_17;  // sfix30_En18
  input   signed [29:0] inA_18;  // sfix30_En18
  input   signed [29:0] inA_19;  // sfix30_En18
  input   signed [29:0] inB;  // sfix30_En18
  input   Reset_1;
  output  signed [29:0] P_0;  // sfix30_En13
  output  signed [29:0] P_1;  // sfix30_En13
  output  signed [29:0] P_2;  // sfix30_En13
  output  signed [29:0] P_3;  // sfix30_En13
  output  signed [29:0] P_4;  // sfix30_En13
  output  signed [29:0] P_5;  // sfix30_En13
  output  signed [29:0] P_6;  // sfix30_En13
  output  signed [29:0] P_7;  // sfix30_En13
  output  signed [29:0] P_8;  // sfix30_En13
  output  signed [29:0] P_9;  // sfix30_En13
  output  signed [29:0] P_10;  // sfix30_En13
  output  signed [29:0] P_11;  // sfix30_En13
  output  signed [29:0] P_12;  // sfix30_En13
  output  signed [29:0] P_13;  // sfix30_En13
  output  signed [29:0] P_14;  // sfix30_En13
  output  signed [29:0] P_15;  // sfix30_En13
  output  signed [29:0] P_16;  // sfix30_En13
  output  signed [29:0] P_17;  // sfix30_En13
  output  signed [29:0] P_18;  // sfix30_En13
  output  signed [29:0] P_19;  // sfix30_En13


  wire signed [29:0] P_0_1;  // sfix30_En13
  wire signed [29:0] P_1_1;  // sfix30_En13
  wire signed [29:0] P_2_1;  // sfix30_En13
  wire signed [29:0] P_3_1;  // sfix30_En13
  wire signed [29:0] P_4_1;  // sfix30_En13
  wire signed [29:0] P_5_1;  // sfix30_En13
  wire signed [29:0] P_6_1;  // sfix30_En13
  wire signed [29:0] P_7_1;  // sfix30_En13
  wire signed [29:0] P_8_1;  // sfix30_En13
  wire signed [29:0] P_9_1;  // sfix30_En13
  wire signed [29:0] P_10_1;  // sfix30_En13
  wire signed [29:0] P_11_1;  // sfix30_En13
  wire signed [29:0] P_12_1;  // sfix30_En13
  wire signed [29:0] P_13_1;  // sfix30_En13
  wire signed [29:0] P_14_1;  // sfix30_En13
  wire signed [29:0] P_15_1;  // sfix30_En13
  wire signed [29:0] P_16_1;  // sfix30_En13
  wire signed [29:0] P_17_1;  // sfix30_En13
  wire signed [29:0] P_18_1;  // sfix30_En13
  wire signed [29:0] P_19_1;  // sfix30_En13
  wire signed [29:0] P [0:19];  // sfix30_En13 [20]

  // basically, this muacc does 1x1 mult and accumulates, it takes 4 clk cycles to output


  MUAC_DSP_2 u_MUAC_DSP_2 (.clk(clk),
                           .reset(reset),
                           .enb_1_200_0(enb_1_200_0),
                           .inB(inB),  // sfix30_En18
                           .inA_0(inA_0),  // sfix30_En18
                           .inA_1(inA_1),  // sfix30_En18
                           .inA_2(inA_2),  // sfix30_En18
                           .inA_3(inA_3),  // sfix30_En18
                           .inA_4(inA_4),  // sfix30_En18
                           .inA_5(inA_5),  // sfix30_En18
                           .inA_6(inA_6),  // sfix30_En18
                           .inA_7(inA_7),  // sfix30_En18
                           .inA_8(inA_8),  // sfix30_En18
                           .inA_9(inA_9),  // sfix30_En18
                           .inA_10(inA_10),  // sfix30_En18
                           .inA_11(inA_11),  // sfix30_En18
                           .inA_12(inA_12),  // sfix30_En18
                           .inA_13(inA_13),  // sfix30_En18
                           .inA_14(inA_14),  // sfix30_En18
                           .inA_15(inA_15),  // sfix30_En18
                           .inA_16(inA_16),  // sfix30_En18
                           .inA_17(inA_17),  // sfix30_En18
                           .inA_18(inA_18),  // sfix30_En18
                           .inA_19(inA_19),  // sfix30_En18
                           .Reset_1(Reset_1),
                           .P_0(P_0_1),  // sfix30_En13
                           .P_1(P_1_1),  // sfix30_En13
                           .P_2(P_2_1),  // sfix30_En13
                           .P_3(P_3_1),  // sfix30_En13
                           .P_4(P_4_1),  // sfix30_En13
                           .P_5(P_5_1),  // sfix30_En13
                           .P_6(P_6_1),  // sfix30_En13
                           .P_7(P_7_1),  // sfix30_En13
                           .P_8(P_8_1),  // sfix30_En13
                           .P_9(P_9_1),  // sfix30_En13
                           .P_10(P_10_1),  // sfix30_En13
                           .P_11(P_11_1),  // sfix30_En13
                           .P_12(P_12_1),  // sfix30_En13
                           .P_13(P_13_1),  // sfix30_En13
                           .P_14(P_14_1),  // sfix30_En13
                           .P_15(P_15_1),  // sfix30_En13
                           .P_16(P_16_1),  // sfix30_En13
                           .P_17(P_17_1),  // sfix30_En13
                           .P_18(P_18_1),  // sfix30_En13
                           .P_19(P_19_1)  // sfix30_En13
                           );
  assign P[0] = P_0_1;
  assign P[1] = P_1_1;
  assign P[2] = P_2_1;
  assign P[3] = P_3_1;
  assign P[4] = P_4_1;
  assign P[5] = P_5_1;
  assign P[6] = P_6_1;
  assign P[7] = P_7_1;
  assign P[8] = P_8_1;
  assign P[9] = P_9_1;
  assign P[10] = P_10_1;
  assign P[11] = P_11_1;
  assign P[12] = P_12_1;
  assign P[13] = P_13_1;
  assign P[14] = P_14_1;
  assign P[15] = P_15_1;
  assign P[16] = P_16_1;
  assign P[17] = P_17_1;
  assign P[18] = P_18_1;
  assign P[19] = P_19_1;

  assign P_0 = P[0];

  assign P_1 = P[1];

  assign P_2 = P[2];

  assign P_3 = P[3];

  assign P_4 = P[4];

  assign P_5 = P[5];

  assign P_6 = P[6];

  assign P_7 = P[7];

  assign P_8 = P[8];

  assign P_9 = P[9];

  assign P_10 = P[10];

  assign P_11 = P[11];

  assign P_12 = P[12];

  assign P_13 = P[13];

  assign P_14 = P[14];

  assign P_15 = P[15];

  assign P_16 = P[16];

  assign P_17 = P[17];

  assign P_18 = P[18];

  assign P_19 = P[19];

endmodule  // dsp_block

