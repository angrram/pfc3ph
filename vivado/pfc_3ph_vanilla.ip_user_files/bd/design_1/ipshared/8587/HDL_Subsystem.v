// -------------------------------------------------------------
// 
// File Name: verilog_1\hdlsrc\gm_pfcvan3ph_s\HDL_Subsystem.v
// Created: 2024-12-08 17:13:30
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Subsystem
// Source Path: gm_pfcvan3ph_s/FPGA/HDL Subsystem
// Hierarchy Level: 1
// Model version: 1.182
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Subsystem
          (clk,
           reset,
           enb,
           enb_1_400_1,
           enb_1_12000_0,
           enb_1_200_1,
           enb_1_12000_1,
           enb_1_6000_1,
           enb_1_200_0,
           enb_1_6000_0,
           Dw_Lc,
           Up_L3c,
           Dw_L2c,
           Up_L2c,
           Dw_L1c,
           Up_L1c,
           Va,
           Vb,
           Vc,
           I_sink,
           sch_ctr_399,
           sch_ctr_11999,
           Dw_L3s,
           Up_L3s,
           Dw_L2s,
           Dw_L1s,
           Up_L2s,
           Up_L1s,
           Dw_L1v,
           Dw_L2v,
           Dw_L3v,
           Up_L1v,
           Up_Lv,
           Up_L3v,
           I_load,
           Ib,
           Ia,
           Ic,
           Vc1,
           Vb1,
           Va1,
           V_out);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_400_1;
  input   enb_1_12000_0;
  input   enb_1_200_1;
  input   enb_1_12000_1;
  input   enb_1_6000_1;
  input   enb_1_200_0;
  input   enb_1_6000_0;
  input   signed [29:0] Dw_Lc;  // sfix30_En13
  input   signed [29:0] Up_L3c;  // sfix30_En13
  input   signed [29:0] Dw_L2c;  // sfix30_En13
  input   signed [29:0] Up_L2c;  // sfix30_En13
  input   signed [29:0] Dw_L1c;  // sfix30_En13
  input   signed [29:0] Up_L1c;  // sfix30_En13
  input   signed [29:0] Va;  // sfix30_En13
  input   signed [29:0] Vb;  // sfix30_En13
  input   signed [29:0] Vc;  // sfix30_En13
  input   signed [29:0] I_sink;  // sfix30_En13
  input   [8:0] sch_ctr_399;  // ufix9
  input   [13:0] sch_ctr_11999;  // ufix14
  output  signed [29:0] Dw_L3s;  // sfix30_En13
  output  signed [29:0] Up_L3s;  // sfix30_En13
  output  signed [29:0] Dw_L2s;  // sfix30_En13
  output  signed [29:0] Dw_L1s;  // sfix30_En13
  output  signed [29:0] Up_L2s;  // sfix30_En13
  output  signed [29:0] Up_L1s;  // sfix30_En13
  output  signed [29:0] Dw_L1v;  // sfix30_En13
  output  signed [29:0] Dw_L2v;  // sfix30_En13
  output  signed [29:0] Dw_L3v;  // sfix30_En13
  output  signed [29:0] Up_L1v;  // sfix30_En13
  output  signed [29:0] Up_Lv;  // sfix30_En13
  output  signed [29:0] Up_L3v;  // sfix30_En13
  output  signed [29:0] I_load;  // sfix30_En13
  output  signed [29:0] Ib;  // sfix30_En13
  output  signed [29:0] Ia;  // sfix30_En13
  output  signed [29:0] Ic;  // sfix30_En13
  output  signed [29:0] Vc1;  // sfix30_En13
  output  signed [29:0] Vb1;  // sfix30_En13
  output  signed [29:0] Va1;  // sfix30_En13
  output  signed [29:0] V_out;  // sfix30_En13


  wire signed [29:0] I_sink_1;  // sfix30_En13
  wire signed [29:0] Va_1;  // sfix30_En13
  wire signed [29:0] Vb_1;  // sfix30_En13
  wire signed [29:0] Vc_1;  // sfix30_En13
  wire [119:0] mergedInput;  // ufix120
  reg [119:0] mergedDelay_regin;  // ufix120
  reg [2:0] mergedDelay_waddr;  // ufix3
  wire mergedDelay_wrenb;  // ufix1
  reg [2:0] mergedDelay_raddr;  // ufix3
  wire [119:0] mergedDelay_regout;  // ufix120
  reg [119:0] mergedOutput;  // ufix120
  wire [29:0] slicedInput;  // ufix30
  wire signed [29:0] I_sink_2;  // sfix30_En13
  wire [29:0] slicedInput_1;  // ufix30
  wire signed [29:0] Va_2;  // sfix30_En13
  wire [29:0] slicedInput_2;  // ufix30
  wire signed [29:0] Vb_2;  // sfix30_En13
  wire [29:0] slicedInput_3;  // ufix30
  wire signed [29:0] Vc_2;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_0;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_1;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_2;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_3;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_4;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_5;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_6;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_7;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_8;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_9;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_10;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_11;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_12;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_13;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_14;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_15;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_16;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_17;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_18;  // sfix30_En13
  wire signed [29:0] HDL_Algorithm_out1_19;  // sfix30_En13
  wire signed [29:0] Vc_3;  // sfix30_En13
  wire signed [29:0] Vb_3;  // sfix30_En13
  wire signed [29:0] Va_3;  // sfix30_En13


  assign I_sink_1 = I_sink;

  assign Va_1 = Va;

  assign Vb_1 = Vb;

  assign Vc_1 = Vc;

  assign mergedInput = {I_sink_1, Va_1, Vb_1, Vc_1};

  // Input register for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_reginc_process
      if (reset == 1'b1) begin
        mergedDelay_regin <= 120'h000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          mergedDelay_regin <= mergedInput;
        end
      end
    end

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 4
  // Write address counter for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_wr_process
      if (reset == 1'b1) begin
        mergedDelay_waddr <= 3'b000;
      end
      else begin
        if (enb) begin
          if (mergedDelay_waddr >= 3'b100) begin
            mergedDelay_waddr <= 3'b000;
          end
          else begin
            mergedDelay_waddr <= mergedDelay_waddr + 3'b001;
          end
        end
      end
    end

  assign mergedDelay_wrenb = 1'b1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 4
  // Read address counter for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_rd_process
      if (reset == 1'b1) begin
        mergedDelay_raddr <= 3'b001;
      end
      else begin
        if (enb) begin
          if (mergedDelay_raddr >= 3'b100) begin
            mergedDelay_raddr <= 3'b000;
          end
          else begin
            mergedDelay_raddr <= mergedDelay_raddr + 3'b001;
          end
        end
      end
    end

  SimpleDualPortRAM_generic #(.AddrWidth(3),
                              .DataWidth(120)
                              )
                            u_ShiftRegisterRAM_generic (.clk(clk),
                                                        .enb(enb),
                                                        .wr_din(mergedDelay_regin),
                                                        .wr_addr(mergedDelay_waddr),
                                                        .wr_en(mergedDelay_wrenb),  // ufix1
                                                        .rd_addr(mergedDelay_raddr),
                                                        .dout(mergedDelay_regout)
                                                        );

  // Output register for RAM-based shift register mergedDelay
  always @(posedge clk or posedge reset)
    begin : mergedDelay_regoutc_process
      if (reset == 1'b1) begin
        mergedOutput <= 120'h000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          mergedOutput <= mergedDelay_regout;
        end
      end
    end

  assign slicedInput = mergedOutput[119:90];

  assign I_sink_2 = slicedInput;

  assign slicedInput_1 = mergedOutput[89:60];

  assign Va_2 = slicedInput_1;

  assign slicedInput_2 = mergedOutput[59:30];

  assign Vb_2 = slicedInput_2;

  assign slicedInput_3 = mergedOutput[29:0];

  assign Vc_2 = slicedInput_3;

  HDL_Algorithm u_HDL_Algorithm (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .enb_1_400_1(enb_1_400_1),
                                 .enb_1_12000_0(enb_1_12000_0),
                                 .enb_1_200_1(enb_1_200_1),
                                 .enb_1_12000_1(enb_1_12000_1),
                                 .enb_1_6000_1(enb_1_6000_1),
                                 .enb_1_200_0(enb_1_200_0),
                                 .enb_1_6000_0(enb_1_6000_0),
                                 .U_0(Dw_L1c),  // sfix30_En13
                                 .U_1(Dw_L2c),  // sfix30_En13
                                 .U_2(Dw_Lc),  // sfix30_En13
                                 .U_3(I_sink_2),  // sfix30_En13
                                 .U_4(Up_L1c),  // sfix30_En13
                                 .U_5(Up_L2c),  // sfix30_En13
                                 .U_6(Up_L3c),  // sfix30_En13
                                 .U_7(Va_2),  // sfix30_En13
                                 .U_8(Vb_2),  // sfix30_En13
                                 .U_9(Vc_2),  // sfix30_En13
                                 .sch_ctr_399(sch_ctr_399),  // ufix9
                                 .sch_ctr_11999(sch_ctr_11999),  // ufix14
                                 .Y_0(HDL_Algorithm_out1_0),  // sfix30_En13
                                 .Y_1(HDL_Algorithm_out1_1),  // sfix30_En13
                                 .Y_2(HDL_Algorithm_out1_2),  // sfix30_En13
                                 .Y_3(HDL_Algorithm_out1_3),  // sfix30_En13
                                 .Y_4(HDL_Algorithm_out1_4),  // sfix30_En13
                                 .Y_5(HDL_Algorithm_out1_5),  // sfix30_En13
                                 .Y_6(HDL_Algorithm_out1_6),  // sfix30_En13
                                 .Y_7(HDL_Algorithm_out1_7),  // sfix30_En13
                                 .Y_8(HDL_Algorithm_out1_8),  // sfix30_En13
                                 .Y_9(HDL_Algorithm_out1_9),  // sfix30_En13
                                 .Y_10(HDL_Algorithm_out1_10),  // sfix30_En13
                                 .Y_11(HDL_Algorithm_out1_11),  // sfix30_En13
                                 .Y_12(HDL_Algorithm_out1_12),  // sfix30_En13
                                 .Y_13(HDL_Algorithm_out1_13),  // sfix30_En13
                                 .Y_14(HDL_Algorithm_out1_14),  // sfix30_En13
                                 .Y_15(HDL_Algorithm_out1_15),  // sfix30_En13
                                 .Y_16(HDL_Algorithm_out1_16),  // sfix30_En13
                                 .Y_17(HDL_Algorithm_out1_17),  // sfix30_En13
                                 .Y_18(HDL_Algorithm_out1_18),  // sfix30_En13
                                 .Y_19(HDL_Algorithm_out1_19)  // sfix30_En13
                                 );
  assign Dw_L3s = HDL_Algorithm_out1_4;

  assign Up_L3s = HDL_Algorithm_out1_17;

  assign Dw_L2s = HDL_Algorithm_out1_2;

  assign Dw_L1s = HDL_Algorithm_out1_0;
  assign Up_L2s = HDL_Algorithm_out1_15;

  assign Up_L1s = HDL_Algorithm_out1_13;

  assign Dw_L1v = HDL_Algorithm_out1_1;

  assign Dw_L2v = HDL_Algorithm_out1_3;

  assign Dw_L3v = HDL_Algorithm_out1_5;

  assign Up_L1v = HDL_Algorithm_out1_14;

  assign Up_Lv = HDL_Algorithm_out1_16;

  assign Up_L3v = HDL_Algorithm_out1_18;

  assign I_load = HDL_Algorithm_out1_6;

  assign Ib = HDL_Algorithm_out1_7;

  assign Ia = HDL_Algorithm_out1_8;

  assign Ic = HDL_Algorithm_out1_9;

  assign Vc_3 = HDL_Algorithm_out1_10;

  assign Vc1 = Vc_3;

  assign Vb_3 = HDL_Algorithm_out1_11;

  assign Vb1 = Vb_3;

  assign Va_3 = HDL_Algorithm_out1_12;

  assign Va1 = Va_3;

  assign V_out = HDL_Algorithm_out1_19;

endmodule  // HDL_Subsystem

