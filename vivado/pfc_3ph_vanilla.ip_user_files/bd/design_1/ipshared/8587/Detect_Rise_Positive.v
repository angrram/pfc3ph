// -------------------------------------------------------------
// 
// File Name: verilog_1\hdlsrc\gm_pfcvan3ph_s\Detect_Rise_Positive.v
// Created: 2024-12-08 17:13:30
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Detect_Rise_Positive
// Source Path: gm_pfcvan3ph_s/FPGA/HDL Subsystem/HDL Algorithm/DA_MATRIX/Detect Rise Positive
// Hierarchy Level: 4
// Model version: 1.182
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Detect_Rise_Positive
          (clk,
           reset,
           enb,
           enb_1_200_1,
           U,
           Y);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_200_1;
  input   U;
  output  Y;


  wire U_k;
  reg  U_k_1;
  reg  Delay_Input1_bypass_reg;  // ufix1
  wire U_k_1_1;
  wire U_k_1_2;
  wire U_k_1_3;
  reg  [3:0] rd_1_reg;  // ufix1 [4]
  wire U_k_1_4;
  wire FixPt_Relational_Operator_out1;

  // U(k)
  // Edge


  Positive u_Positive (.clk(clk),
                       .reset(reset),
                       .enb(enb),
                       .u(U),
                       .y(U_k)
                       );
  always @(posedge clk or posedge reset)
    begin : rd_0_process
      if (reset == 1'b1) begin
        U_k_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          U_k_1 <= U_k;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay_Input1_bypass_process
      if (reset == 1'b1) begin
        Delay_Input1_bypass_reg <= 1'b0;
      end
      else begin
        if (enb_1_200_1) begin
          Delay_Input1_bypass_reg <= U_k;
        end
      end
    end

  assign U_k_1_1 = (enb_1_200_1 == 1'b1 ? U_k :
              Delay_Input1_bypass_reg);

  assign U_k_1_2 = U_k_1_1;

  assign U_k_1_3 = U_k_1_2;

  always @(posedge clk or posedge reset)
    begin : rd_1_process
      if (reset == 1'b1) begin
        rd_1_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          rd_1_reg[0] <= U_k_1_3;
          rd_1_reg[32'sd3:32'sd1] <= rd_1_reg[32'sd2:32'sd0];
        end
      end
    end

  assign U_k_1_4 = rd_1_reg[3];

  assign FixPt_Relational_Operator_out1 = U_k_1 > U_k_1_4;
  assign Y = FixPt_Relational_Operator_out1;

endmodule  // Detect_Rise_Positive

