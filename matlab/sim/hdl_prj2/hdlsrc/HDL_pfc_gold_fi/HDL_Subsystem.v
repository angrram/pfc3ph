// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi\HDL_Subsystem.v
// Created: 2025-02-26 17:03:08
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_Subsystem
// Source Path: HDL_pfc_gold_fi/simscape_system/HDL Subsystem
// Hierarchy Level: 1
// Model version: 1.167
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_Subsystem
          (clk,
           reset,
           enb_1_67_1,
           enb,
           enb_1_67_0,
           enb_1_1_1,
           I_load_in,
           ic_in_MOSFET,
           ic_in_MOSFET1,
           ic_in_MOSFET2,
           ic_in_MOSFET3,
           ic_in_MOSFET4,
           ic_in_MOSFET5,
           va,
           vb,
           vc,
           sch_ctr_66,
           I_load,
           is_out_MOSFET,
           vs_out_MOSFET,
           is_out_MOSFET1,
           vs_out_MOSFET1,
           is_out_MOSFET2,
           vs_out_MOSFET2,
           is_out_MOSFET3,
           vs_out_MOSFET3,
           is_out_MOSFET4,
           vs_out_MOSFET4,
           is_out_MOSFET5,
           vs_out_MOSFET5,
           Vout,
           Ib,
           Ic,
           Ia,
           Vb_1,
           Vc_1,
           Va_1);


  input   clk;
  input   reset;
  input   enb_1_67_1;
  input   enb;
  input   enb_1_67_0;
  input   enb_1_1_1;
  input   signed [17:0] I_load_in;  // sfix18_En8
  input   signed [17:0] ic_in_MOSFET;  // sfix18_En8
  input   signed [17:0] ic_in_MOSFET1;  // sfix18_En8
  input   signed [17:0] ic_in_MOSFET2;  // sfix18_En8
  input   signed [17:0] ic_in_MOSFET3;  // sfix18_En8
  input   signed [17:0] ic_in_MOSFET4;  // sfix18_En8
  input   signed [17:0] ic_in_MOSFET5;  // sfix18_En8
  input   signed [17:0] va;  // sfix18_En8
  input   signed [17:0] vb;  // sfix18_En8
  input   signed [17:0] vc;  // sfix18_En8
  input   [6:0] sch_ctr_66;  // ufix7
  output  signed [17:0] I_load;  // sfix18_En6
  output  signed [17:0] is_out_MOSFET;  // sfix18_En6
  output  signed [17:0] vs_out_MOSFET;  // sfix18_En6
  output  signed [17:0] is_out_MOSFET1;  // sfix18_En6
  output  signed [17:0] vs_out_MOSFET1;  // sfix18_En6
  output  signed [17:0] is_out_MOSFET2;  // sfix18_En6
  output  signed [17:0] vs_out_MOSFET2;  // sfix18_En6
  output  signed [17:0] is_out_MOSFET3;  // sfix18_En6
  output  signed [17:0] vs_out_MOSFET3;  // sfix18_En6
  output  signed [17:0] is_out_MOSFET4;  // sfix18_En6
  output  signed [17:0] vs_out_MOSFET4;  // sfix18_En6
  output  signed [17:0] is_out_MOSFET5;  // sfix18_En6
  output  signed [17:0] vs_out_MOSFET5;  // sfix18_En6
  output  signed [17:0] Vout;  // sfix18_En6
  output  signed [17:0] Ib;  // sfix18_En6
  output  signed [17:0] Ic;  // sfix18_En6
  output  signed [17:0] Ia;  // sfix18_En6
  output  signed [17:0] Vb_1;  // sfix18_En6
  output  signed [17:0] Vc_1;  // sfix18_En6
  output  signed [17:0] Va_1;  // sfix18_En6


  wire signed [17:0] Input_Concat_out1 [0:9];  // sfix18_En8 [10]
  wire signed [24:0] Data_Type_Conversion_out1 [0:9];  // sfix25_En13 [10]
  wire signed [24:0] matrixDOutSignal_0;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_1;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_2;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_3;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_4;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_5;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_6;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_7;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_8;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_9;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_10;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_11;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_12;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_13;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_14;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_15;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_16;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_17;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_18;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal_19;  // sfix25_En13
  wire signed [24:0] matrixDOutSignal [0:19];  // sfix25_En13 [20]
  reg signed [24:0] rd_2_reg [0:39];  // sfix25 [40]
  reg signed [24:0] rd_2_reg_next [0:39];  // sfix25_En13 [40]
  reg signed [24:0] matrixDOutSignal_20 [0:19];  // sfix25_En13 [20]
  wire State_ctrl_const_out;
  reg  State_ctrl_delay_out;
  wire State_ctrl_delay_out_1;
  reg  State_ctrl_delay_out_2;
  wire signed [24:0] State_Initial_Val_out [0:6];  // sfix25_En13 [7]
  wire signed [24:0] matrixBOutSignal_0;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal_1;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal_2;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal_3;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal_4;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal_5;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal_6;  // sfix25_En13
  wire signed [24:0] matrixBOutSignal [0:6];  // sfix25_En13 [7]
  reg signed [24:0] matrixBOutSignal_7 [0:6];  // sfix25_En13 [7]
  reg signed [24:0] State_out [0:6];  // sfix25_En13 [7]
  wire signed [24:0] sumStateEqOutSignal [0:6];  // sfix25_En13 [7]
  reg signed [24:0] delayOutSignal [0:6];  // sfix25_En13 [7]
  wire signed [24:0] matrixAOutSignal_0;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal_1;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal_2;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal_3;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal_4;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal_5;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal_6;  // sfix25_En13
  wire signed [24:0] matrixAOutSignal [0:6];  // sfix25_En13 [7]
  reg signed [24:0] matrixAOutSignal_7 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] delayInSignal [0:6];  // sfix25_En13 [7]
  reg signed [24:0] delayInSignal_1 [0:6];  // sfix25_En13 [7]
  reg signed [24:0] State_bypass_reg [0:6];  // sfix25 [7]
  reg signed [24:0] State_bypass_reg_next [0:6];  // sfix25_En13 [7]
  wire signed [24:0] State_out_1 [0:6];  // sfix25_En13 [7]
  reg signed [24:0] State_out_2 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] matrixCOutSignal_0;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_1;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_2;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_3;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_4;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_5;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_6;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_7;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_8;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_9;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_10;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_11;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_12;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_13;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_14;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_15;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_16;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_17;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_18;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal_19;  // sfix25_En13
  wire signed [24:0] matrixCOutSignal [0:19];  // sfix25_En13 [20]
  reg signed [24:0] matrixCOutSignal_20 [0:19];  // sfix25_En13 [20]
  wire signed [24:0] sumOutputEqOutSignal [0:19];  // sfix25_En13 [20]
  wire signed [24:0] out0 [0:19];  // sfix25_En13 [20]
  wire signed [17:0] Data_Type_Conversion1_out1 [0:19];  // sfix18_En6 [20]
  reg signed [31:0] rd_2_t_0_0;  // int32
  reg signed [31:0] rd_2_t_0_1;  // int32
  reg signed [31:0] rd_2_t_1;  // int32
  reg signed [31:0] rd_4_t_0_0;  // int32
  reg signed [31:0] rd_4_t_1;  // int32
  reg signed [31:0] rd_5_t_0_0;  // int32
  reg signed [31:0] rd_5_t_1;  // int32
  reg signed [31:0] crp_out_delay_t_0_0;  // int32
  reg signed [31:0] crp_out_delay_t_1;  // int32
  reg signed [31:0] State_bypass_t_0_0;  // int32
  reg signed [31:0] State_bypass_t_1;  // int32
  reg signed [31:0] State_bypass_t_2;  // int32
  reg signed [31:0] State_bypass_t_0_1;  // int32
  reg signed [31:0] State_bypass_t_1_0;  // int32
  reg signed [31:0] rd_0_t_0_0;  // int32
  reg signed [31:0] rd_0_t_1;  // int32
  reg signed [31:0] State_switch_t_0_0;  // int32
  reg signed [31:0] State_switch_t_1;  // int32
  reg signed [31:0] rd_3_t_0_0;  // int32
  reg signed [31:0] rd_3_t_1;  // int32


  assign Input_Concat_out1[0] = I_load_in;
  assign Input_Concat_out1[1] = ic_in_MOSFET;
  assign Input_Concat_out1[2] = ic_in_MOSFET1;
  assign Input_Concat_out1[3] = ic_in_MOSFET2;
  assign Input_Concat_out1[4] = ic_in_MOSFET3;
  assign Input_Concat_out1[5] = ic_in_MOSFET4;
  assign Input_Concat_out1[6] = ic_in_MOSFET5;
  assign Input_Concat_out1[7] = va;
  assign Input_Concat_out1[8] = vb;
  assign Input_Concat_out1[9] = vc;

  genvar ii2;
  generate
    for(ii2 = 32'sd0; ii2 <= 32'sd9; ii2 = ii2 + 32'sd1) begin:Data_Type_Conversion_out1_gen
      assign Data_Type_Conversion_out1[ii2] = {{2{Input_Concat_out1[ii2][17]}}, {Input_Concat_out1[ii2], 5'b00000}};
    end
  endgenerate
  hNNewMatrixD u_Sparse_Matrix_Vector_Product3 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .in0_0(Data_Type_Conversion_out1[0]),  // sfix25_En13
                                                .in0_1(Data_Type_Conversion_out1[1]),  // sfix25_En13
                                                .in0_2(Data_Type_Conversion_out1[2]),  // sfix25_En13
                                                .in0_3(Data_Type_Conversion_out1[3]),  // sfix25_En13
                                                .in0_4(Data_Type_Conversion_out1[4]),  // sfix25_En13
                                                .in0_5(Data_Type_Conversion_out1[5]),  // sfix25_En13
                                                .in0_6(Data_Type_Conversion_out1[6]),  // sfix25_En13
                                                .in0_7(Data_Type_Conversion_out1[7]),  // sfix25_En13
                                                .in0_8(Data_Type_Conversion_out1[8]),  // sfix25_En13
                                                .in0_9(Data_Type_Conversion_out1[9]),  // sfix25_En13
                                                .enb_counter(sch_ctr_66),  // ufix7
                                                .matrixDOutSignal_0(matrixDOutSignal_0),  // sfix25_En13
                                                .matrixDOutSignal_1(matrixDOutSignal_1),  // sfix25_En13
                                                .matrixDOutSignal_2(matrixDOutSignal_2),  // sfix25_En13
                                                .matrixDOutSignal_3(matrixDOutSignal_3),  // sfix25_En13
                                                .matrixDOutSignal_4(matrixDOutSignal_4),  // sfix25_En13
                                                .matrixDOutSignal_5(matrixDOutSignal_5),  // sfix25_En13
                                                .matrixDOutSignal_6(matrixDOutSignal_6),  // sfix25_En13
                                                .matrixDOutSignal_7(matrixDOutSignal_7),  // sfix25_En13
                                                .matrixDOutSignal_8(matrixDOutSignal_8),  // sfix25_En13
                                                .matrixDOutSignal_9(matrixDOutSignal_9),  // sfix25_En13
                                                .matrixDOutSignal_10(matrixDOutSignal_10),  // sfix25_En13
                                                .matrixDOutSignal_11(matrixDOutSignal_11),  // sfix25_En13
                                                .matrixDOutSignal_12(matrixDOutSignal_12),  // sfix25_En13
                                                .matrixDOutSignal_13(matrixDOutSignal_13),  // sfix25_En13
                                                .matrixDOutSignal_14(matrixDOutSignal_14),  // sfix25_En13
                                                .matrixDOutSignal_15(matrixDOutSignal_15),  // sfix25_En13
                                                .matrixDOutSignal_16(matrixDOutSignal_16),  // sfix25_En13
                                                .matrixDOutSignal_17(matrixDOutSignal_17),  // sfix25_En13
                                                .matrixDOutSignal_18(matrixDOutSignal_18),  // sfix25_En13
                                                .matrixDOutSignal_19(matrixDOutSignal_19)  // sfix25_En13
                                                );
  assign matrixDOutSignal[0] = matrixDOutSignal_0;
  assign matrixDOutSignal[1] = matrixDOutSignal_1;
  assign matrixDOutSignal[2] = matrixDOutSignal_2;
  assign matrixDOutSignal[3] = matrixDOutSignal_3;
  assign matrixDOutSignal[4] = matrixDOutSignal_4;
  assign matrixDOutSignal[5] = matrixDOutSignal_5;
  assign matrixDOutSignal[6] = matrixDOutSignal_6;
  assign matrixDOutSignal[7] = matrixDOutSignal_7;
  assign matrixDOutSignal[8] = matrixDOutSignal_8;
  assign matrixDOutSignal[9] = matrixDOutSignal_9;
  assign matrixDOutSignal[10] = matrixDOutSignal_10;
  assign matrixDOutSignal[11] = matrixDOutSignal_11;
  assign matrixDOutSignal[12] = matrixDOutSignal_12;
  assign matrixDOutSignal[13] = matrixDOutSignal_13;
  assign matrixDOutSignal[14] = matrixDOutSignal_14;
  assign matrixDOutSignal[15] = matrixDOutSignal_15;
  assign matrixDOutSignal[16] = matrixDOutSignal_16;
  assign matrixDOutSignal[17] = matrixDOutSignal_17;
  assign matrixDOutSignal[18] = matrixDOutSignal_18;
  assign matrixDOutSignal[19] = matrixDOutSignal_19;

  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        for(rd_2_t_1 = 32'sd0; rd_2_t_1 <= 32'sd39; rd_2_t_1 = rd_2_t_1 + 32'sd1) begin
          rd_2_reg[rd_2_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_2_t_0_1 = 32'sd0; rd_2_t_0_1 <= 32'sd39; rd_2_t_0_1 = rd_2_t_0_1 + 32'sd1) begin
            rd_2_reg[rd_2_t_0_1] <= rd_2_reg_next[rd_2_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(rd_2_t_0_0 = 32'sd0; rd_2_t_0_0 <= 32'sd19; rd_2_t_0_0 = rd_2_t_0_0 + 32'sd1) begin
      matrixDOutSignal_20[rd_2_t_0_0] = rd_2_reg[32'sd20 + rd_2_t_0_0];
      rd_2_reg_next[rd_2_t_0_0] = matrixDOutSignal[rd_2_t_0_0];
      rd_2_reg_next[rd_2_t_0_0 + 32'sd20] = rd_2_reg[rd_2_t_0_0];
    end

  end

  assign State_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : State_ctrl_delay_process
      if (reset == 1'b1) begin
        State_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb_1_67_0) begin
          State_ctrl_delay_out <= State_ctrl_const_out;
        end
      end
    end

  assign State_ctrl_delay_out_1 = State_ctrl_delay_out;

  always @(posedge clk)
    begin : rd_1_process
      if (reset == 1'b1) begin
        State_ctrl_delay_out_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          State_ctrl_delay_out_2 <= State_ctrl_delay_out_1;
        end
      end
    end

  assign State_Initial_Val_out[0] = 25'sb0000000000000000000000000;
  assign State_Initial_Val_out[1] = 25'sb0000000000000000000000000;
  assign State_Initial_Val_out[2] = 25'sb0000000000000000000000000;
  assign State_Initial_Val_out[3] = 25'sb0000000000000000000000000;
  assign State_Initial_Val_out[4] = 25'sb0000000000000000000000000;
  assign State_Initial_Val_out[5] = 25'sb0000000000000000000000000;
  assign State_Initial_Val_out[6] = 25'sb0010010001000000000000000;

  hNNewMatrixB u_Sparse_Matrix_Vector_Product (.clk(clk),
                                               .reset(reset),
                                               .enb(enb),
                                               .enb_1_1_1(enb_1_1_1),
                                               .in0_0(Data_Type_Conversion_out1[0]),  // sfix25_En13
                                               .in0_1(Data_Type_Conversion_out1[1]),  // sfix25_En13
                                               .in0_2(Data_Type_Conversion_out1[2]),  // sfix25_En13
                                               .in0_3(Data_Type_Conversion_out1[3]),  // sfix25_En13
                                               .in0_4(Data_Type_Conversion_out1[4]),  // sfix25_En13
                                               .in0_5(Data_Type_Conversion_out1[5]),  // sfix25_En13
                                               .in0_6(Data_Type_Conversion_out1[6]),  // sfix25_En13
                                               .in0_7(Data_Type_Conversion_out1[7]),  // sfix25_En13
                                               .in0_8(Data_Type_Conversion_out1[8]),  // sfix25_En13
                                               .in0_9(Data_Type_Conversion_out1[9]),  // sfix25_En13
                                               .enb_counter(sch_ctr_66),  // ufix7
                                               .matrixBOutSignal_0(matrixBOutSignal_0),  // sfix25_En13
                                               .matrixBOutSignal_1(matrixBOutSignal_1),  // sfix25_En13
                                               .matrixBOutSignal_2(matrixBOutSignal_2),  // sfix25_En13
                                               .matrixBOutSignal_3(matrixBOutSignal_3),  // sfix25_En13
                                               .matrixBOutSignal_4(matrixBOutSignal_4),  // sfix25_En13
                                               .matrixBOutSignal_5(matrixBOutSignal_5),  // sfix25_En13
                                               .matrixBOutSignal_6(matrixBOutSignal_6)  // sfix25_En13
                                               );
  assign matrixBOutSignal[0] = matrixBOutSignal_0;
  assign matrixBOutSignal[1] = matrixBOutSignal_1;
  assign matrixBOutSignal[2] = matrixBOutSignal_2;
  assign matrixBOutSignal[3] = matrixBOutSignal_3;
  assign matrixBOutSignal[4] = matrixBOutSignal_4;
  assign matrixBOutSignal[5] = matrixBOutSignal_5;
  assign matrixBOutSignal[6] = matrixBOutSignal_6;

  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        for(rd_4_t_1 = 32'sd0; rd_4_t_1 <= 32'sd6; rd_4_t_1 = rd_4_t_1 + 32'sd1) begin
          matrixBOutSignal_7[rd_4_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_4_t_0_0 = 32'sd0; rd_4_t_0_0 <= 32'sd6; rd_4_t_0_0 = rd_4_t_0_0 + 32'sd1) begin
            matrixBOutSignal_7[rd_4_t_0_0] <= matrixBOutSignal[rd_4_t_0_0];
          end
        end
      end
    end

  hNNewMatrixA u_Sparse_Matrix_Vector_Product1 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .delayOutSignal_0(delayOutSignal[0]),  // sfix25_En13
                                                .delayOutSignal_1(delayOutSignal[1]),  // sfix25_En13
                                                .delayOutSignal_2(delayOutSignal[2]),  // sfix25_En13
                                                .delayOutSignal_3(delayOutSignal[3]),  // sfix25_En13
                                                .delayOutSignal_4(delayOutSignal[4]),  // sfix25_En13
                                                .delayOutSignal_5(delayOutSignal[5]),  // sfix25_En13
                                                .delayOutSignal_6(delayOutSignal[6]),  // sfix25_En13
                                                .enb_counter(sch_ctr_66),  // ufix7
                                                .matrixAOutSignal_0(matrixAOutSignal_0),  // sfix25_En13
                                                .matrixAOutSignal_1(matrixAOutSignal_1),  // sfix25_En13
                                                .matrixAOutSignal_2(matrixAOutSignal_2),  // sfix25_En13
                                                .matrixAOutSignal_3(matrixAOutSignal_3),  // sfix25_En13
                                                .matrixAOutSignal_4(matrixAOutSignal_4),  // sfix25_En13
                                                .matrixAOutSignal_5(matrixAOutSignal_5),  // sfix25_En13
                                                .matrixAOutSignal_6(matrixAOutSignal_6)  // sfix25_En13
                                                );
  assign matrixAOutSignal[0] = matrixAOutSignal_0;
  assign matrixAOutSignal[1] = matrixAOutSignal_1;
  assign matrixAOutSignal[2] = matrixAOutSignal_2;
  assign matrixAOutSignal[3] = matrixAOutSignal_3;
  assign matrixAOutSignal[4] = matrixAOutSignal_4;
  assign matrixAOutSignal[5] = matrixAOutSignal_5;
  assign matrixAOutSignal[6] = matrixAOutSignal_6;

  always @(posedge clk)
    begin : rd_5_process
      if (reset == 1'b1) begin
        for(rd_5_t_1 = 32'sd0; rd_5_t_1 <= 32'sd6; rd_5_t_1 = rd_5_t_1 + 32'sd1) begin
          matrixAOutSignal_7[rd_5_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_5_t_0_0 = 32'sd0; rd_5_t_0_0 <= 32'sd6; rd_5_t_0_0 = rd_5_t_0_0 + 32'sd1) begin
            matrixAOutSignal_7[rd_5_t_0_0] <= matrixAOutSignal[rd_5_t_0_0];
          end
        end
      end
    end


  genvar t_0_02;
  generate
    for(t_0_02 = 32'sd0; t_0_02 <= 32'sd6; t_0_02 = t_0_02 + 32'sd1) begin:sumStateEqOutSignal_gen
      assign sumStateEqOutSignal[t_0_02] = matrixBOutSignal_7[t_0_02] + matrixAOutSignal_7[t_0_02];
    end
  endgenerate
  assign delayInSignal[0] = sumStateEqOutSignal[0];
  assign delayInSignal[1] = sumStateEqOutSignal[1];
  assign delayInSignal[2] = sumStateEqOutSignal[2];
  assign delayInSignal[3] = sumStateEqOutSignal[3];
  assign delayInSignal[4] = sumStateEqOutSignal[4];
  assign delayInSignal[5] = sumStateEqOutSignal[5];
  assign delayInSignal[6] = sumStateEqOutSignal[6];
  always @(posedge clk)
    begin : crp_out_delay_process
      if (reset == 1'b1) begin
        for(crp_out_delay_t_1 = 32'sd0; crp_out_delay_t_1 <= 32'sd6; crp_out_delay_t_1 = crp_out_delay_t_1 + 32'sd1) begin
          delayInSignal_1[crp_out_delay_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay_t_0_0 = 32'sd0; crp_out_delay_t_0_0 <= 32'sd6; crp_out_delay_t_0_0 = crp_out_delay_t_0_0 + 32'sd1) begin
            delayInSignal_1[crp_out_delay_t_0_0] <= delayInSignal[crp_out_delay_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : State_bypass_process
      if (reset == 1'b1) begin
        for(State_bypass_t_1_0 = 32'sd0; State_bypass_t_1_0 <= 32'sd6; State_bypass_t_1_0 = State_bypass_t_1_0 + 32'sd1) begin
          State_bypass_reg[State_bypass_t_1_0] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb_1_67_1) begin
          for(State_bypass_t_0_1 = 32'sd0; State_bypass_t_0_1 <= 32'sd6; State_bypass_t_0_1 = State_bypass_t_0_1 + 32'sd1) begin
            State_bypass_reg[State_bypass_t_0_1] <= State_bypass_reg_next[State_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_67_1 == 1'b1) begin
      for(State_bypass_t_1 = 32'sd0; State_bypass_t_1 <= 32'sd6; State_bypass_t_1 = State_bypass_t_1 + 32'sd1) begin
        State_out[State_bypass_t_1] = delayInSignal_1[State_bypass_t_1];
      end
    end
    else begin
      for(State_bypass_t_0_0 = 32'sd0; State_bypass_t_0_0 <= 32'sd6; State_bypass_t_0_0 = State_bypass_t_0_0 + 32'sd1) begin
        State_out[State_bypass_t_0_0] = State_bypass_reg[State_bypass_t_0_0];
      end
    end

    for(State_bypass_t_2 = 32'sd0; State_bypass_t_2 <= 32'sd6; State_bypass_t_2 = State_bypass_t_2 + 32'sd1) begin
      State_bypass_reg_next[State_bypass_t_2] = delayInSignal_1[State_bypass_t_2];
    end

  end

  assign State_out_1[0] = State_out[0];
  assign State_out_1[1] = State_out[1];
  assign State_out_1[2] = State_out[2];
  assign State_out_1[3] = State_out[3];
  assign State_out_1[4] = State_out[4];
  assign State_out_1[5] = State_out[5];
  assign State_out_1[6] = State_out[6];

  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        for(rd_0_t_1 = 32'sd0; rd_0_t_1 <= 32'sd6; rd_0_t_1 = rd_0_t_1 + 32'sd1) begin
          State_out_2[rd_0_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0 = 32'sd0; rd_0_t_0_0 <= 32'sd6; rd_0_t_0_0 = rd_0_t_0_0 + 32'sd1) begin
            State_out_2[rd_0_t_0_0] <= State_out_1[rd_0_t_0_0];
          end
        end
      end
    end

  always @* begin
    if (State_ctrl_delay_out_2 == 1'b0) begin
      for(State_switch_t_1 = 32'sd0; State_switch_t_1 <= 32'sd6; State_switch_t_1 = State_switch_t_1 + 32'sd1) begin
        delayOutSignal[State_switch_t_1] = State_Initial_Val_out[State_switch_t_1];
      end
    end
    else begin
      for(State_switch_t_0_0 = 32'sd0; State_switch_t_0_0 <= 32'sd6; State_switch_t_0_0 = State_switch_t_0_0 + 32'sd1) begin
        delayOutSignal[State_switch_t_0_0] = State_out_2[State_switch_t_0_0];
      end
    end
  end

  hNNewMatrixC u_Sparse_Matrix_Vector_Product2 (.clk(clk),
                                                .reset(reset),
                                                .enb(enb),
                                                .delayOutSignal_0(delayOutSignal[0]),  // sfix25_En13
                                                .delayOutSignal_1(delayOutSignal[1]),  // sfix25_En13
                                                .delayOutSignal_2(delayOutSignal[2]),  // sfix25_En13
                                                .delayOutSignal_3(delayOutSignal[3]),  // sfix25_En13
                                                .delayOutSignal_4(delayOutSignal[4]),  // sfix25_En13
                                                .delayOutSignal_5(delayOutSignal[5]),  // sfix25_En13
                                                .delayOutSignal_6(delayOutSignal[6]),  // sfix25_En13
                                                .enb_counter(sch_ctr_66),  // ufix7
                                                .matrixCOutSignal_0(matrixCOutSignal_0),  // sfix25_En13
                                                .matrixCOutSignal_1(matrixCOutSignal_1),  // sfix25_En13
                                                .matrixCOutSignal_2(matrixCOutSignal_2),  // sfix25_En13
                                                .matrixCOutSignal_3(matrixCOutSignal_3),  // sfix25_En13
                                                .matrixCOutSignal_4(matrixCOutSignal_4),  // sfix25_En13
                                                .matrixCOutSignal_5(matrixCOutSignal_5),  // sfix25_En13
                                                .matrixCOutSignal_6(matrixCOutSignal_6),  // sfix25_En13
                                                .matrixCOutSignal_7(matrixCOutSignal_7),  // sfix25_En13
                                                .matrixCOutSignal_8(matrixCOutSignal_8),  // sfix25_En13
                                                .matrixCOutSignal_9(matrixCOutSignal_9),  // sfix25_En13
                                                .matrixCOutSignal_10(matrixCOutSignal_10),  // sfix25_En13
                                                .matrixCOutSignal_11(matrixCOutSignal_11),  // sfix25_En13
                                                .matrixCOutSignal_12(matrixCOutSignal_12),  // sfix25_En13
                                                .matrixCOutSignal_13(matrixCOutSignal_13),  // sfix25_En13
                                                .matrixCOutSignal_14(matrixCOutSignal_14),  // sfix25_En13
                                                .matrixCOutSignal_15(matrixCOutSignal_15),  // sfix25_En13
                                                .matrixCOutSignal_16(matrixCOutSignal_16),  // sfix25_En13
                                                .matrixCOutSignal_17(matrixCOutSignal_17),  // sfix25_En13
                                                .matrixCOutSignal_18(matrixCOutSignal_18),  // sfix25_En13
                                                .matrixCOutSignal_19(matrixCOutSignal_19)  // sfix25_En13
                                                );
  assign matrixCOutSignal[0] = matrixCOutSignal_0;
  assign matrixCOutSignal[1] = matrixCOutSignal_1;
  assign matrixCOutSignal[2] = matrixCOutSignal_2;
  assign matrixCOutSignal[3] = matrixCOutSignal_3;
  assign matrixCOutSignal[4] = matrixCOutSignal_4;
  assign matrixCOutSignal[5] = matrixCOutSignal_5;
  assign matrixCOutSignal[6] = matrixCOutSignal_6;
  assign matrixCOutSignal[7] = matrixCOutSignal_7;
  assign matrixCOutSignal[8] = matrixCOutSignal_8;
  assign matrixCOutSignal[9] = matrixCOutSignal_9;
  assign matrixCOutSignal[10] = matrixCOutSignal_10;
  assign matrixCOutSignal[11] = matrixCOutSignal_11;
  assign matrixCOutSignal[12] = matrixCOutSignal_12;
  assign matrixCOutSignal[13] = matrixCOutSignal_13;
  assign matrixCOutSignal[14] = matrixCOutSignal_14;
  assign matrixCOutSignal[15] = matrixCOutSignal_15;
  assign matrixCOutSignal[16] = matrixCOutSignal_16;
  assign matrixCOutSignal[17] = matrixCOutSignal_17;
  assign matrixCOutSignal[18] = matrixCOutSignal_18;
  assign matrixCOutSignal[19] = matrixCOutSignal_19;

  always @(posedge clk)
    begin : rd_3_process
      if (reset == 1'b1) begin
        for(rd_3_t_1 = 32'sd0; rd_3_t_1 <= 32'sd19; rd_3_t_1 = rd_3_t_1 + 32'sd1) begin
          matrixCOutSignal_20[rd_3_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_3_t_0_0 = 32'sd0; rd_3_t_0_0 <= 32'sd19; rd_3_t_0_0 = rd_3_t_0_0 + 32'sd1) begin
            matrixCOutSignal_20[rd_3_t_0_0] <= matrixCOutSignal[rd_3_t_0_0];
          end
        end
      end
    end


  genvar t_0_011;
  generate
    for(t_0_011 = 32'sd0; t_0_011 <= 32'sd19; t_0_011 = t_0_011 + 32'sd1) begin:sumOutputEqOutSignal_gen
      assign sumOutputEqOutSignal[t_0_011] = matrixDOutSignal_20[t_0_011] + matrixCOutSignal_20[t_0_011];
    end
  endgenerate
  assign out0[0] = sumOutputEqOutSignal[0];
  assign out0[1] = sumOutputEqOutSignal[1];
  assign out0[2] = sumOutputEqOutSignal[2];
  assign out0[3] = sumOutputEqOutSignal[3];
  assign out0[4] = sumOutputEqOutSignal[4];
  assign out0[5] = sumOutputEqOutSignal[5];
  assign out0[6] = sumOutputEqOutSignal[6];
  assign out0[7] = sumOutputEqOutSignal[7];
  assign out0[8] = sumOutputEqOutSignal[8];
  assign out0[9] = sumOutputEqOutSignal[9];
  assign out0[10] = sumOutputEqOutSignal[10];
  assign out0[11] = sumOutputEqOutSignal[11];
  assign out0[12] = sumOutputEqOutSignal[12];
  assign out0[13] = sumOutputEqOutSignal[13];
  assign out0[14] = sumOutputEqOutSignal[14];
  assign out0[15] = sumOutputEqOutSignal[15];
  assign out0[16] = sumOutputEqOutSignal[16];
  assign out0[17] = sumOutputEqOutSignal[17];
  assign out0[18] = sumOutputEqOutSignal[18];
  assign out0[19] = sumOutputEqOutSignal[19];

  genvar ii11;
  generate
    for(ii11 = 32'sd0; ii11 <= 32'sd19; ii11 = ii11 + 32'sd1) begin:Data_Type_Conversion1_out1_gen
      assign Data_Type_Conversion1_out1[ii11] = out0[ii11][24:7];
    end
  endgenerate
  assign I_load = Data_Type_Conversion1_out1[0];
  assign is_out_MOSFET = Data_Type_Conversion1_out1[1];

  assign vs_out_MOSFET = Data_Type_Conversion1_out1[2];

  assign is_out_MOSFET1 = Data_Type_Conversion1_out1[3];

  assign vs_out_MOSFET1 = Data_Type_Conversion1_out1[4];

  assign is_out_MOSFET2 = Data_Type_Conversion1_out1[5];

  assign vs_out_MOSFET2 = Data_Type_Conversion1_out1[6];

  assign is_out_MOSFET3 = Data_Type_Conversion1_out1[7];

  assign vs_out_MOSFET3 = Data_Type_Conversion1_out1[8];

  assign is_out_MOSFET4 = Data_Type_Conversion1_out1[9];

  assign vs_out_MOSFET4 = Data_Type_Conversion1_out1[10];

  assign is_out_MOSFET5 = Data_Type_Conversion1_out1[11];

  assign vs_out_MOSFET5 = Data_Type_Conversion1_out1[12];

  assign Vout = Data_Type_Conversion1_out1[13];

  assign Ib = Data_Type_Conversion1_out1[14];

  assign Ic = Data_Type_Conversion1_out1[15];

  assign Ia = Data_Type_Conversion1_out1[16];

  assign Vb_1 = Data_Type_Conversion1_out1[17];

  assign Vc_1 = Data_Type_Conversion1_out1[18];

  assign Va_1 = Data_Type_Conversion1_out1[19];

endmodule  // HDL_Subsystem

