// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi\real2uint8.v
// Created: 2025-02-26 17:03:08
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: real2uint8
// Source Path: HDL_pfc_gold_fi/simscape_system/real2uint8
// Hierarchy Level: 1
// Model version: 1.167
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module real2uint8
          (clk,
           reset,
           enb_1_67_1,
           enb,
           I_load,
           Vout,
           Ib,
           Ic,
           Ia,
           Vb,
           Vc,
           Va,
           O_Ia,
           O_Ib,
           O_Ic,
           O_Vc,
           O_Vb,
           O_Va,
           O_Vout,
           O_I_load);


  input   clk;
  input   reset;
  input   enb_1_67_1;
  input   enb;
  input   signed [17:0] I_load;  // sfix18_En6
  input   signed [17:0] Vout;  // sfix18_En6
  input   signed [17:0] Ib;  // sfix18_En6
  input   signed [17:0] Ic;  // sfix18_En6
  input   signed [17:0] Ia;  // sfix18_En6
  input   signed [17:0] Vb;  // sfix18_En6
  input   signed [17:0] Vc;  // sfix18_En6
  input   signed [17:0] Va;  // sfix18_En6
  output  [7:0] O_Ia;  // uint8
  output  [7:0] O_Ib;  // uint8
  output  [7:0] O_Ic;  // uint8
  output  [7:0] O_Vc;  // uint8
  output  [7:0] O_Vb;  // uint8
  output  [7:0] O_Va;  // uint8
  output  [7:0] O_Vout;  // uint8
  output  [7:0] O_I_load;  // uint8


  wire signed [17:0] kconst;  // sfix18_En15
  reg signed [17:0] kconst_1;  // sfix18_En15
  wire signed [17:0] Constant_out1;  // sfix18_En6
  reg signed [17:0] Delay3_bypass_reg;  // sfix18
  wire signed [17:0] Delay3_out1;  // sfix18_En6
  wire signed [17:0] Delay3_out1_1;  // sfix18_En6
  reg signed [17:0] Delay3_out1_2;  // sfix18_En6
  wire signed [17:0] Add2_out1;  // sfix18_En6
  reg signed [17:0] Delay2_bypass_reg;  // sfix18
  wire signed [17:0] Delay2_out1;  // sfix18_En6
  wire signed [17:0] Delay2_out1_1;  // sfix18_En6
  reg signed [17:0] Delay2_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain2_out1;  // sfix36_En21
  reg signed [35:0] Gain2_out1_1;  // sfix36_En21
  wire signed [17:0] Gain2_out1_2;  // sfix18_En6
  reg signed [17:0] Delay_bypass_reg;  // sfix18
  wire signed [17:0] Delay_out1;  // sfix18_En6
  wire signed [17:0] Delay_out1_1;  // sfix18_En6
  reg signed [17:0] Delay_out1_2;  // sfix18_En6
  wire [7:0] Data_Type_Conversion5_out1;  // uint8
  reg [7:0] Delay1_bypass_reg;  // ufix8
  wire [7:0] Delay1_out1;  // uint8
  wire signed [17:0] kconst_2;  // sfix18_En15
  reg signed [17:0] kconst_3;  // sfix18_En15
  reg signed [17:0] Delay4_bypass_reg;  // sfix18
  wire signed [17:0] Delay4_out1;  // sfix18_En6
  wire signed [17:0] Delay4_out1_1;  // sfix18_En6
  reg signed [17:0] Delay4_out1_2;  // sfix18_En6
  wire signed [17:0] Add_out1;  // sfix18_En6
  reg signed [17:0] Delay14_bypass_reg;  // sfix18
  wire signed [17:0] Delay14_out1;  // sfix18_En6
  wire signed [17:0] Delay14_out1_1;  // sfix18_En6
  reg signed [17:0] Delay14_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain_out1;  // sfix36_En21
  reg signed [35:0] Gain_out1_1;  // sfix36_En21
  wire signed [17:0] Gain_out1_2;  // sfix18_En6
  reg signed [17:0] Delay18_bypass_reg;  // sfix18
  wire signed [17:0] Delay18_out1;  // sfix18_En6
  wire signed [17:0] Delay18_out1_1;  // sfix18_En6
  reg signed [17:0] Delay18_out1_2;  // sfix18_En6
  wire [7:0] Data_Type_Conversion7_out1;  // uint8
  reg [7:0] Delay27_bypass_reg;  // ufix8
  wire [7:0] Delay27_out1;  // uint8
  wire signed [17:0] kconst_4;  // sfix18_En15
  reg signed [17:0] kconst_5;  // sfix18_En15
  reg signed [17:0] Delay10_bypass_reg;  // sfix18
  wire signed [17:0] Delay10_out1;  // sfix18_En6
  wire signed [17:0] Delay10_out1_1;  // sfix18_En6
  reg signed [17:0] Delay10_out1_2;  // sfix18_En6
  wire signed [17:0] Add1_out1;  // sfix18_En6
  reg signed [17:0] Delay13_bypass_reg;  // sfix18
  wire signed [17:0] Delay13_out1;  // sfix18_En6
  wire signed [17:0] Delay13_out1_1;  // sfix18_En6
  reg signed [17:0] Delay13_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain1_out1;  // sfix36_En21
  reg signed [35:0] Gain1_out1_1;  // sfix36_En21
  wire signed [17:0] Gain1_out1_2;  // sfix18_En6
  reg signed [17:0] Delay23_bypass_reg;  // sfix18
  wire signed [17:0] Delay23_out1;  // sfix18_En6
  wire signed [17:0] Delay23_out1_1;  // sfix18_En6
  reg signed [17:0] Delay23_out1_2;  // sfix18_En6
  wire [7:0] Data_Type_Conversion6_out1;  // uint8
  reg [7:0] Delay26_bypass_reg;  // ufix8
  wire [7:0] Delay26_out1;  // uint8
  wire signed [18:0] kconst_6;  // sfix19_En19
  reg signed [18:0] kconst_7;  // sfix19_En19
  reg signed [17:0] Delay8_bypass_reg;  // sfix18
  wire signed [17:0] Delay8_out1;  // sfix18_En6
  wire signed [17:0] Delay8_out1_1;  // sfix18_En6
  reg signed [17:0] Delay8_out1_2;  // sfix18_En6
  wire signed [17:0] Constant1_out1;  // sfix18_En6
  wire signed [18:0] Add3_add_cast;  // sfix19_En6
  wire signed [18:0] Add3_add_cast_1;  // sfix19_En6
  wire signed [18:0] Add3_out1;  // sfix19_En6
  reg signed [18:0] Delay11_bypass_reg;  // sfix19
  wire signed [18:0] Delay11_out1;  // sfix19_En6
  wire signed [18:0] Delay11_out1_1;  // sfix19_En6
  reg signed [18:0] Delay11_out1_2;  // sfix19_En6
  (* use_dsp  = "no" *)   wire signed [37:0] Gain5_out1;  // sfix38_En25
  reg signed [37:0] Gain5_out1_1;  // sfix38_En25
  wire signed [18:0] Gain5_out1_2;  // sfix19_En6
  reg signed [18:0] Delay22_bypass_reg;  // sfix19
  wire signed [18:0] Delay22_out1;  // sfix19_En6
  wire signed [18:0] Delay22_out1_1;  // sfix19_En6
  reg signed [18:0] Delay22_out1_2;  // sfix19_En6
  wire [7:0] Data_Type_Conversion3_out1;  // uint8
  reg [7:0] Delay24_bypass_reg;  // ufix8
  wire [7:0] Delay24_out1;  // uint8
  wire signed [18:0] kconst_8;  // sfix19_En19
  reg signed [18:0] kconst_9;  // sfix19_En19
  reg signed [17:0] Delay5_bypass_reg;  // sfix18
  wire signed [17:0] Delay5_out1;  // sfix18_En6
  wire signed [17:0] Delay5_out1_1;  // sfix18_En6
  reg signed [17:0] Delay5_out1_2;  // sfix18_En6
  wire signed [18:0] Add4_add_cast;  // sfix19_En6
  wire signed [18:0] Add4_add_cast_1;  // sfix19_En6
  wire signed [18:0] Add4_out1;  // sfix19_En6
  reg signed [18:0] Delay15_bypass_reg;  // sfix19
  wire signed [18:0] Delay15_out1;  // sfix19_En6
  wire signed [18:0] Delay15_out1_1;  // sfix19_En6
  reg signed [18:0] Delay15_out1_2;  // sfix19_En6
  (* use_dsp  = "no" *)   wire signed [37:0] Gain6_out1;  // sfix38_En25
  reg signed [37:0] Gain6_out1_1;  // sfix38_En25
  wire signed [18:0] Gain6_out1_2;  // sfix19_En6
  reg signed [18:0] Delay19_bypass_reg;  // sfix19
  wire signed [18:0] Delay19_out1;  // sfix19_En6
  wire signed [18:0] Delay19_out1_1;  // sfix19_En6
  reg signed [18:0] Delay19_out1_2;  // sfix19_En6
  wire [7:0] Data_Type_Conversion4_out1;  // uint8
  reg [7:0] Delay28_bypass_reg;  // ufix8
  wire [7:0] Delay28_out1;  // uint8
  wire signed [18:0] kconst_10;  // sfix19_En19
  reg signed [18:0] kconst_11;  // sfix19_En19
  reg signed [17:0] Delay7_bypass_reg;  // sfix18
  wire signed [17:0] Delay7_out1;  // sfix18_En6
  wire signed [17:0] Delay7_out1_1;  // sfix18_En6
  reg signed [17:0] Delay7_out1_2;  // sfix18_En6
  wire signed [18:0] Add5_add_cast;  // sfix19_En6
  wire signed [18:0] Add5_add_cast_1;  // sfix19_En6
  wire signed [18:0] Add5_out1;  // sfix19_En6
  reg signed [18:0] Delay17_bypass_reg;  // sfix19
  wire signed [18:0] Delay17_out1;  // sfix19_En6
  wire signed [18:0] Delay17_out1_1;  // sfix19_En6
  reg signed [18:0] Delay17_out1_2;  // sfix19_En6
  (* use_dsp  = "no" *)   wire signed [37:0] Gain7_out1;  // sfix38_En25
  reg signed [37:0] Gain7_out1_1;  // sfix38_En25
  wire signed [18:0] Gain7_out1_2;  // sfix19_En6
  reg signed [18:0] Delay21_bypass_reg;  // sfix19
  wire signed [18:0] Delay21_out1;  // sfix19_En6
  wire signed [18:0] Delay21_out1_1;  // sfix19_En6
  reg signed [18:0] Delay21_out1_2;  // sfix19_En6
  wire [7:0] Data_Type_Conversion8_out1;  // uint8
  reg [7:0] Delay30_bypass_reg;  // ufix8
  wire [7:0] Delay30_out1;  // uint8
  wire signed [17:0] kconst_12;  // sfix18_En18
  reg signed [17:0] kconst_13;  // sfix18_En18
  reg signed [17:0] Delay9_bypass_reg;  // sfix18
  wire signed [17:0] Delay9_out1;  // sfix18_En6
  wire signed [17:0] Delay9_out1_1;  // sfix18_En6
  reg signed [17:0] Delay9_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain4_out1;  // sfix36_En24
  reg signed [35:0] Gain4_out1_1;  // sfix36_En24
  wire signed [17:0] Gain4_out1_2;  // sfix18_En6
  reg signed [17:0] Delay12_bypass_reg;  // sfix18
  wire signed [17:0] Delay12_out1;  // sfix18_En6
  wire signed [17:0] Delay12_out1_1;  // sfix18_En6
  reg signed [17:0] Delay12_out1_2;  // sfix18_En6
  wire [7:0] Data_Type_Conversion9_out1;  // uint8
  reg [7:0] Delay25_bypass_reg;  // ufix8
  wire [7:0] Delay25_out1;  // uint8
  wire signed [17:0] kconst_14;  // sfix18_En13
  reg signed [17:0] kconst_15;  // sfix18_En13
  reg signed [17:0] Delay6_bypass_reg;  // sfix18
  wire signed [17:0] Delay6_out1;  // sfix18_En6
  wire signed [17:0] Delay6_out1_1;  // sfix18_En6
  reg signed [17:0] Delay6_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain3_out1;  // sfix36_En19
  reg signed [35:0] Gain3_out1_1;  // sfix36_En19
  wire signed [17:0] Gain3_out1_2;  // sfix18_En6
  reg signed [17:0] Delay16_bypass_reg;  // sfix18
  wire signed [17:0] Delay16_out1;  // sfix18_En6
  wire signed [17:0] Delay16_out1_1;  // sfix18_En6
  reg signed [17:0] Delay16_out1_2;  // sfix18_En6
  wire [7:0] Data_Type_Conversion20_out1;  // uint8
  reg [7:0] Delay29_bypass_reg;  // ufix8
  wire [7:0] Delay29_out1;  // uint8


  assign kconst = 18'sb010011100010011110;

  always @(posedge clk)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        kconst_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end

  assign Constant_out1 = 18'sb000000110100000000;
  always @(posedge clk)
    begin : Delay3_bypass_process
      if (reset == 1'b1) begin
        Delay3_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay3_bypass_reg <= Ia;
        end
      end
    end

  assign Delay3_out1 = (enb_1_67_1 == 1'b1 ? Ia :
              Delay3_bypass_reg);

  assign Delay3_out1_1 = Delay3_out1;

  always @(posedge clk)
    begin : rd_121_process
      if (reset == 1'b1) begin
        Delay3_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_2 <= Delay3_out1_1;
        end
      end
    end

  assign Add2_out1 = Constant_out1 + Delay3_out1_2;
  always @(posedge clk)
    begin : Delay2_bypass_process
      if (reset == 1'b1) begin
        Delay2_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay2_bypass_reg <= Add2_out1;
        end
      end
    end

  assign Delay2_out1 = (enb_1_67_1 == 1'b1 ? Add2_out1 :
              Delay2_bypass_reg);

  assign Delay2_out1_1 = Delay2_out1;

  always @(posedge clk)
    begin : HwModeRegister7_process
      if (reset == 1'b1) begin
        Delay2_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_2 <= Delay2_out1_1;
        end
      end
    end

  assign Gain2_out1 = kconst_1 * Delay2_out1_2;
  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Gain2_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain2_out1_1 <= Gain2_out1;
        end
      end
    end

  assign Gain2_out1_2 = Gain2_out1_1[32:15];

  always @(posedge clk)
    begin : Delay_bypass_process
      if (reset == 1'b1) begin
        Delay_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay_bypass_reg <= Gain2_out1_2;
        end
      end
    end

  assign Delay_out1 = (enb_1_67_1 == 1'b1 ? Gain2_out1_2 :
              Delay_bypass_reg);

  assign Delay_out1_1 = Delay_out1;

  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        Delay_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_2 <= Delay_out1_1;
        end
      end
    end

  assign Data_Type_Conversion5_out1 = Delay_out1_2[13:6] + Delay_out1_2[5];
  always @(posedge clk)
    begin : Delay1_bypass_process
      if (reset == 1'b1) begin
        Delay1_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay1_bypass_reg <= Data_Type_Conversion5_out1;
        end
      end
    end

  assign Delay1_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion5_out1 :
              Delay1_bypass_reg);

  assign O_Ia = Delay1_out1;

  assign kconst_2 = 18'sb010011100010011110;

  always @(posedge clk)
    begin : HwModeRegister14_process
      if (reset == 1'b1) begin
        kconst_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end

  always @(posedge clk)
    begin : Delay4_bypass_process
      if (reset == 1'b1) begin
        Delay4_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay4_bypass_reg <= Ib;
        end
      end
    end

  assign Delay4_out1 = (enb_1_67_1 == 1'b1 ? Ib :
              Delay4_bypass_reg);

  assign Delay4_out1_1 = Delay4_out1;

  always @(posedge clk)
    begin : rd_10_process
      if (reset == 1'b1) begin
        Delay4_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_2 <= Delay4_out1_1;
        end
      end
    end

  assign Add_out1 = Delay4_out1_2 + Constant_out1;
  always @(posedge clk)
    begin : Delay14_bypass_process
      if (reset == 1'b1) begin
        Delay14_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay14_bypass_reg <= Add_out1;
        end
      end
    end

  assign Delay14_out1 = (enb_1_67_1 == 1'b1 ? Add_out1 :
              Delay14_bypass_reg);

  assign Delay14_out1_1 = Delay14_out1;

  always @(posedge clk)
    begin : HwModeRegister15_process
      if (reset == 1'b1) begin
        Delay14_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_2 <= Delay14_out1_1;
        end
      end
    end

  assign Gain_out1 = kconst_3 * Delay14_out1_2;
  always @(posedge clk)
    begin : PipelineRegister7_process
      if (reset == 1'b1) begin
        Gain_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain_out1_1 <= Gain_out1;
        end
      end
    end

  assign Gain_out1_2 = Gain_out1_1[32:15];

  always @(posedge clk)
    begin : Delay18_bypass_process
      if (reset == 1'b1) begin
        Delay18_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay18_bypass_reg <= Gain_out1_2;
        end
      end
    end

  assign Delay18_out1 = (enb_1_67_1 == 1'b1 ? Gain_out1_2 :
              Delay18_bypass_reg);

  assign Delay18_out1_1 = Delay18_out1;

  always @(posedge clk)
    begin : rd_6_process
      if (reset == 1'b1) begin
        Delay18_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay18_out1_2 <= Delay18_out1_1;
        end
      end
    end

  assign Data_Type_Conversion7_out1 = Delay18_out1_2[13:6] + Delay18_out1_2[5];
  always @(posedge clk)
    begin : Delay27_bypass_process
      if (reset == 1'b1) begin
        Delay27_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay27_bypass_reg <= Data_Type_Conversion7_out1;
        end
      end
    end

  assign Delay27_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion7_out1 :
              Delay27_bypass_reg);

  assign O_Ib = Delay27_out1;

  assign kconst_4 = 18'sb010011100010011110;

  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        kconst_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end

  always @(posedge clk)
    begin : Delay10_bypass_process
      if (reset == 1'b1) begin
        Delay10_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay10_bypass_reg <= Ic;
        end
      end
    end

  assign Delay10_out1 = (enb_1_67_1 == 1'b1 ? Ic :
              Delay10_bypass_reg);

  assign Delay10_out1_1 = Delay10_out1;

  always @(posedge clk)
    begin : rd_14_process
      if (reset == 1'b1) begin
        Delay10_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1_2 <= Delay10_out1_1;
        end
      end
    end

  assign Add1_out1 = Constant_out1 + Delay10_out1_2;
  always @(posedge clk)
    begin : Delay13_bypass_process
      if (reset == 1'b1) begin
        Delay13_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay13_bypass_reg <= Add1_out1;
        end
      end
    end

  assign Delay13_out1 = (enb_1_67_1 == 1'b1 ? Add1_out1 :
              Delay13_bypass_reg);

  assign Delay13_out1_1 = Delay13_out1;

  always @(posedge clk)
    begin : HwModeRegister5_process
      if (reset == 1'b1) begin
        Delay13_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1_2 <= Delay13_out1_1;
        end
      end
    end

  assign Gain1_out1 = kconst_5 * Delay13_out1_2;
  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Gain1_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain1_out1_1 <= Gain1_out1;
        end
      end
    end

  assign Gain1_out1_2 = Gain1_out1_1[32:15];

  always @(posedge clk)
    begin : Delay23_bypass_process
      if (reset == 1'b1) begin
        Delay23_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay23_bypass_reg <= Gain1_out1_2;
        end
      end
    end

  assign Delay23_out1 = (enb_1_67_1 == 1'b1 ? Gain1_out1_2 :
              Delay23_bypass_reg);

  assign Delay23_out1_1 = Delay23_out1;

  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        Delay23_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay23_out1_2 <= Delay23_out1_1;
        end
      end
    end

  assign Data_Type_Conversion6_out1 = Delay23_out1_2[13:6] + Delay23_out1_2[5];
  always @(posedge clk)
    begin : Delay26_bypass_process
      if (reset == 1'b1) begin
        Delay26_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay26_bypass_reg <= Data_Type_Conversion6_out1;
        end
      end
    end

  assign Delay26_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion6_out1 :
              Delay26_bypass_reg);

  assign O_Ic = Delay26_out1;

  assign kconst_6 = 19'sb0100110101101000111;

  always @(posedge clk)
    begin : HwModeRegister8_process
      if (reset == 1'b1) begin
        kconst_7 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end

  always @(posedge clk)
    begin : Delay8_bypass_process
      if (reset == 1'b1) begin
        Delay8_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay8_bypass_reg <= Vc;
        end
      end
    end

  assign Delay8_out1 = (enb_1_67_1 == 1'b1 ? Vc :
              Delay8_bypass_reg);

  assign Delay8_out1_1 = Delay8_out1;

  always @(posedge clk)
    begin : rd_01_process
      if (reset == 1'b1) begin
        Delay8_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_2 <= Delay8_out1_1;
        end
      end
    end

  assign Constant1_out1 = 18'sb000110100100000000;
  assign Add3_add_cast = {Delay8_out1_2[17], Delay8_out1_2};
  assign Add3_add_cast_1 = {Constant1_out1[17], Constant1_out1};
  assign Add3_out1 = Add3_add_cast + Add3_add_cast_1;
  always @(posedge clk)
    begin : Delay11_bypass_process
      if (reset == 1'b1) begin
        Delay11_bypass_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay11_bypass_reg <= Add3_out1;
        end
      end
    end

  assign Delay11_out1 = (enb_1_67_1 == 1'b1 ? Add3_out1 :
              Delay11_bypass_reg);

  assign Delay11_out1_1 = Delay11_out1;

  always @(posedge clk)
    begin : HwModeRegister9_process
      if (reset == 1'b1) begin
        Delay11_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_2 <= Delay11_out1_1;
        end
      end
    end

  assign Gain5_out1 = kconst_7 * Delay11_out1_2;
  always @(posedge clk)
    begin : PipelineRegister4_process
      if (reset == 1'b1) begin
        Gain5_out1_1 <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          Gain5_out1_1 <= Gain5_out1;
        end
      end
    end

  assign Gain5_out1_2 = Gain5_out1_1[37:19];

  always @(posedge clk)
    begin : Delay22_bypass_process
      if (reset == 1'b1) begin
        Delay22_bypass_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay22_bypass_reg <= Gain5_out1_2;
        end
      end
    end

  assign Delay22_out1 = (enb_1_67_1 == 1'b1 ? Gain5_out1_2 :
              Delay22_bypass_reg);

  assign Delay22_out1_1 = Delay22_out1;

  always @(posedge clk)
    begin : rd_12_process
      if (reset == 1'b1) begin
        Delay22_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1_2 <= Delay22_out1_1;
        end
      end
    end

  assign Data_Type_Conversion3_out1 = Delay22_out1_2[13:6] + Delay22_out1_2[5];
  always @(posedge clk)
    begin : Delay24_bypass_process
      if (reset == 1'b1) begin
        Delay24_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay24_bypass_reg <= Data_Type_Conversion3_out1;
        end
      end
    end

  assign Delay24_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion3_out1 :
              Delay24_bypass_reg);

  assign O_Vc = Delay24_out1;

  assign kconst_8 = 19'sb0100110101101000111;

  always @(posedge clk)
    begin : HwModeRegister10_process
      if (reset == 1'b1) begin
        kconst_9 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_9 <= kconst_8;
        end
      end
    end

  always @(posedge clk)
    begin : Delay5_bypass_process
      if (reset == 1'b1) begin
        Delay5_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay5_bypass_reg <= Vb;
        end
      end
    end

  assign Delay5_out1 = (enb_1_67_1 == 1'b1 ? Vb :
              Delay5_bypass_reg);

  assign Delay5_out1_1 = Delay5_out1;

  always @(posedge clk)
    begin : rd_21_process
      if (reset == 1'b1) begin
        Delay5_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_2 <= Delay5_out1_1;
        end
      end
    end

  assign Add4_add_cast = {Delay5_out1_2[17], Delay5_out1_2};
  assign Add4_add_cast_1 = {Constant1_out1[17], Constant1_out1};
  assign Add4_out1 = Add4_add_cast + Add4_add_cast_1;
  always @(posedge clk)
    begin : Delay15_bypass_process
      if (reset == 1'b1) begin
        Delay15_bypass_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay15_bypass_reg <= Add4_out1;
        end
      end
    end

  assign Delay15_out1 = (enb_1_67_1 == 1'b1 ? Add4_out1 :
              Delay15_bypass_reg);

  assign Delay15_out1_1 = Delay15_out1;

  always @(posedge clk)
    begin : HwModeRegister11_process
      if (reset == 1'b1) begin
        Delay15_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1_2 <= Delay15_out1_1;
        end
      end
    end

  assign Gain6_out1 = kconst_9 * Delay15_out1_2;
  always @(posedge clk)
    begin : PipelineRegister5_process
      if (reset == 1'b1) begin
        Gain6_out1_1 <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          Gain6_out1_1 <= Gain6_out1;
        end
      end
    end

  assign Gain6_out1_2 = Gain6_out1_1[37:19];

  always @(posedge clk)
    begin : Delay19_bypass_process
      if (reset == 1'b1) begin
        Delay19_bypass_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay19_bypass_reg <= Gain6_out1_2;
        end
      end
    end

  assign Delay19_out1 = (enb_1_67_1 == 1'b1 ? Gain6_out1_2 :
              Delay19_bypass_reg);

  assign Delay19_out1_1 = Delay19_out1;

  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        Delay19_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay19_out1_2 <= Delay19_out1_1;
        end
      end
    end

  assign Data_Type_Conversion4_out1 = Delay19_out1_2[13:6] + Delay19_out1_2[5];
  always @(posedge clk)
    begin : Delay28_bypass_process
      if (reset == 1'b1) begin
        Delay28_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay28_bypass_reg <= Data_Type_Conversion4_out1;
        end
      end
    end

  assign Delay28_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion4_out1 :
              Delay28_bypass_reg);

  assign O_Vb = Delay28_out1;

  assign kconst_10 = 19'sb0100110101101000111;

  always @(posedge clk)
    begin : HwModeRegister12_process
      if (reset == 1'b1) begin
        kconst_11 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_11 <= kconst_10;
        end
      end
    end

  always @(posedge clk)
    begin : Delay7_bypass_process
      if (reset == 1'b1) begin
        Delay7_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay7_bypass_reg <= Va;
        end
      end
    end

  assign Delay7_out1 = (enb_1_67_1 == 1'b1 ? Va :
              Delay7_bypass_reg);

  assign Delay7_out1_1 = Delay7_out1;

  always @(posedge clk)
    begin : rd_41_process
      if (reset == 1'b1) begin
        Delay7_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_2 <= Delay7_out1_1;
        end
      end
    end

  assign Add5_add_cast = {Constant1_out1[17], Constant1_out1};
  assign Add5_add_cast_1 = {Delay7_out1_2[17], Delay7_out1_2};
  assign Add5_out1 = Add5_add_cast + Add5_add_cast_1;
  always @(posedge clk)
    begin : Delay17_bypass_process
      if (reset == 1'b1) begin
        Delay17_bypass_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay17_bypass_reg <= Add5_out1;
        end
      end
    end

  assign Delay17_out1 = (enb_1_67_1 == 1'b1 ? Add5_out1 :
              Delay17_bypass_reg);

  assign Delay17_out1_1 = Delay17_out1;

  always @(posedge clk)
    begin : HwModeRegister13_process
      if (reset == 1'b1) begin
        Delay17_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay17_out1_2 <= Delay17_out1_1;
        end
      end
    end

  assign Gain7_out1 = kconst_11 * Delay17_out1_2;
  always @(posedge clk)
    begin : PipelineRegister6_process
      if (reset == 1'b1) begin
        Gain7_out1_1 <= 38'sh0000000000;
      end
      else begin
        if (enb) begin
          Gain7_out1_1 <= Gain7_out1;
        end
      end
    end

  assign Gain7_out1_2 = Gain7_out1_1[37:19];

  always @(posedge clk)
    begin : Delay21_bypass_process
      if (reset == 1'b1) begin
        Delay21_bypass_reg <= 19'sb0000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay21_bypass_reg <= Gain7_out1_2;
        end
      end
    end

  assign Delay21_out1 = (enb_1_67_1 == 1'b1 ? Gain7_out1_2 :
              Delay21_bypass_reg);

  assign Delay21_out1_1 = Delay21_out1;

  always @(posedge clk)
    begin : rd_8_process
      if (reset == 1'b1) begin
        Delay21_out1_2 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1_2 <= Delay21_out1_1;
        end
      end
    end

  assign Data_Type_Conversion8_out1 = Delay21_out1_2[13:6] + Delay21_out1_2[5];
  always @(posedge clk)
    begin : Delay30_bypass_process
      if (reset == 1'b1) begin
        Delay30_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay30_bypass_reg <= Data_Type_Conversion8_out1;
        end
      end
    end

  assign Delay30_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion8_out1 :
              Delay30_bypass_reg);

  assign O_Va = Delay30_out1;

  assign kconst_12 = 18'sb010001000111001001;

  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_13 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_13 <= kconst_12;
        end
      end
    end

  always @(posedge clk)
    begin : Delay9_bypass_process
      if (reset == 1'b1) begin
        Delay9_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay9_bypass_reg <= Vout;
        end
      end
    end

  assign Delay9_out1 = (enb_1_67_1 == 1'b1 ? Vout :
              Delay9_bypass_reg);

  assign Delay9_out1_1 = Delay9_out1;

  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Delay9_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_2 <= Delay9_out1_1;
        end
      end
    end

  assign Gain4_out1 = kconst_13 * Delay9_out1_2;
  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        Gain4_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain4_out1_1 <= Gain4_out1;
        end
      end
    end

  assign Gain4_out1_2 = Gain4_out1_1[35:18];

  always @(posedge clk)
    begin : Delay12_bypass_process
      if (reset == 1'b1) begin
        Delay12_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay12_bypass_reg <= Gain4_out1_2;
        end
      end
    end

  assign Delay12_out1 = (enb_1_67_1 == 1'b1 ? Gain4_out1_2 :
              Delay12_bypass_reg);

  assign Delay12_out1_1 = Delay12_out1;

  always @(posedge clk)
    begin : rd_81_process
      if (reset == 1'b1) begin
        Delay12_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_2 <= Delay12_out1_1;
        end
      end
    end

  assign Data_Type_Conversion9_out1 = Delay12_out1_2[13:6] + Delay12_out1_2[5];
  always @(posedge clk)
    begin : Delay25_bypass_process
      if (reset == 1'b1) begin
        Delay25_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay25_bypass_reg <= Data_Type_Conversion9_out1;
        end
      end
    end

  assign Delay25_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion9_out1 :
              Delay25_bypass_reg);

  assign O_Vout = Delay25_out1;

  assign kconst_14 = 18'sb011001011001100110;

  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_15 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_15 <= kconst_14;
        end
      end
    end

  always @(posedge clk)
    begin : Delay6_bypass_process
      if (reset == 1'b1) begin
        Delay6_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay6_bypass_reg <= I_load;
        end
      end
    end

  assign Delay6_out1 = (enb_1_67_1 == 1'b1 ? I_load :
              Delay6_bypass_reg);

  assign Delay6_out1_1 = Delay6_out1;

  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Delay6_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_2 <= Delay6_out1_1;
        end
      end
    end

  assign Gain3_out1 = kconst_15 * Delay6_out1_2;
  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        Gain3_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain3_out1_1 <= Gain3_out1;
        end
      end
    end

  assign Gain3_out1_2 = Gain3_out1_1[30:13];

  always @(posedge clk)
    begin : Delay16_bypass_process
      if (reset == 1'b1) begin
        Delay16_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay16_bypass_reg <= Gain3_out1_2;
        end
      end
    end

  assign Delay16_out1 = (enb_1_67_1 == 1'b1 ? Gain3_out1_2 :
              Delay16_bypass_reg);

  assign Delay16_out1_1 = Delay16_out1;

  always @(posedge clk)
    begin : rd_61_process
      if (reset == 1'b1) begin
        Delay16_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1_2 <= Delay16_out1_1;
        end
      end
    end

  assign Data_Type_Conversion20_out1 = Delay16_out1_2[13:6] + Delay16_out1_2[5];
  always @(posedge clk)
    begin : Delay29_bypass_process
      if (reset == 1'b1) begin
        Delay29_bypass_reg <= 8'b00000000;
      end
      else begin
        if (enb_1_67_1) begin
          Delay29_bypass_reg <= Data_Type_Conversion20_out1;
        end
      end
    end

  assign Delay29_out1 = (enb_1_67_1 == 1'b1 ? Data_Type_Conversion20_out1 :
              Delay29_bypass_reg);

  assign O_I_load = Delay29_out1;

endmodule  // real2uint8

