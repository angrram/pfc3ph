// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi\dot_product_7_block.v
// Created: 2025-02-26 17:03:08
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: dot_product_7_block
// Source Path: HDL_pfc_gold_fi/simscape_system/HDL Subsystem/Fixed-Point State-Space/hNNewMatrixD/dot_product_7
// Hierarchy Level: 3
// Model version: 1.167
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module dot_product_7_block
          (clk,
           reset,
           enb,
           in1_0,
           in1_1,
           in1_2,
           in1_3,
           in1_4,
           in1_5,
           in1_6,
           in2_0,
           in2_1,
           in2_2,
           in2_3,
           in2_4,
           in2_5,
           in2_6,
           out1);


  input   clk;
  input   reset;
  input   enb;
  input   signed [24:0] in1_0;  // sfix25_En19
  input   signed [24:0] in1_1;  // sfix25_En19
  input   signed [24:0] in1_2;  // sfix25_En19
  input   signed [24:0] in1_3;  // sfix25_En19
  input   signed [24:0] in1_4;  // sfix25_En19
  input   signed [24:0] in1_5;  // sfix25_En19
  input   signed [24:0] in1_6;  // sfix25_En19
  input   signed [24:0] in2_0;  // sfix25_En13
  input   signed [24:0] in2_1;  // sfix25_En13
  input   signed [24:0] in2_2;  // sfix25_En13
  input   signed [24:0] in2_3;  // sfix25_En13
  input   signed [24:0] in2_4;  // sfix25_En13
  input   signed [24:0] in2_5;  // sfix25_En13
  input   signed [24:0] in2_6;  // sfix25_En13
  output  signed [49:0] out1;  // sfix50_En32


  wire signed [24:0] mul_in1 [0:6];  // sfix25_En19 [7]
  reg signed [24:0] mul_in1_1 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] mul_in2 [0:6];  // sfix25_En13 [7]
  reg signed [24:0] mul_in2_1 [0:6];  // sfix25_En13 [7]
  wire signed [49:0] mul_out1 [0:6];  // sfix50_En32 [7]
  reg signed [49:0] mul_out1_1 [0:6];  // sfix50_En32 [7]
  wire signed [49:0] mul_out1_0;  // sfix50_En32
  reg signed [49:0] mul_out1_0_1;  // sfix50_En32
  wire signed [49:0] mul_out1_1_1;  // sfix50_En32
  reg signed [49:0] mul_out1_1_2;  // sfix50_En32
  wire signed [49:0] sum_stage1_1;  // sfix50_En32
  reg signed [49:0] sum_stage1_1_1;  // sfix50_En32
  wire signed [49:0] mul_out1_2;  // sfix50_En32
  reg signed [49:0] mul_out1_2_1;  // sfix50_En32
  wire signed [49:0] mul_out1_3;  // sfix50_En32
  reg signed [49:0] mul_out1_3_1;  // sfix50_En32
  wire signed [49:0] sum_stage1_2;  // sfix50_En32
  reg signed [49:0] sum_stage1_2_1;  // sfix50_En32
  wire signed [49:0] sum_stage2_1;  // sfix50_En32
  reg signed [49:0] sum_stage2_1_1;  // sfix50_En32
  wire signed [49:0] mul_out1_4;  // sfix50_En32
  reg signed [49:0] mul_out1_4_1;  // sfix50_En32
  wire signed [49:0] mul_out1_5;  // sfix50_En32
  reg signed [49:0] mul_out1_5_1;  // sfix50_En32
  wire signed [49:0] sum_stage1_3;  // sfix50_En32
  reg signed [49:0] sum_stage1_3_1;  // sfix50_En32
  wire signed [49:0] mul_out1_6;  // sfix50_En32
  reg signed [49:0] rd_10_reg [0:1];  // sfix50 [2]
  wire signed [49:0] rd_10_reg_next [0:1];  // sfix50_En32 [2]
  wire signed [49:0] sum_stage1_4;  // sfix50_En32
  wire signed [49:0] sum_stage2_2;  // sfix50_En32
  reg signed [49:0] sum_stage2_2_1;  // sfix50_En32
  wire signed [49:0] sum_stage3_1;  // sfix50_En32
  reg signed [31:0] HwModeRegister_t_0_0;  // int32
  reg signed [31:0] HwModeRegister_t_1;  // int32
  reg signed [31:0] HwModeRegister1_t_0_0;  // int32
  reg signed [31:0] HwModeRegister1_t_1;  // int32
  reg signed [31:0] PipelineRegister_t_0_0;  // int32
  reg signed [31:0] PipelineRegister_t_1;  // int32
  reg signed [31:0] rd_10_t_0_0;  // int32
  reg signed [31:0] rd_10_t_1;  // int32


  assign mul_in1[0] = in1_0;
  assign mul_in1[1] = in1_1;
  assign mul_in1[2] = in1_2;
  assign mul_in1[3] = in1_3;
  assign mul_in1[4] = in1_4;
  assign mul_in1[5] = in1_5;
  assign mul_in1[6] = in1_6;

  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        for(HwModeRegister_t_1 = 32'sd0; HwModeRegister_t_1 <= 32'sd6; HwModeRegister_t_1 = HwModeRegister_t_1 + 32'sd1) begin
          mul_in1_1[HwModeRegister_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister_t_0_0 = 32'sd0; HwModeRegister_t_0_0 <= 32'sd6; HwModeRegister_t_0_0 = HwModeRegister_t_0_0 + 32'sd1) begin
            mul_in1_1[HwModeRegister_t_0_0] <= mul_in1[HwModeRegister_t_0_0];
          end
        end
      end
    end

  assign mul_in2[0] = in2_0;
  assign mul_in2[1] = in2_1;
  assign mul_in2[2] = in2_2;
  assign mul_in2[3] = in2_3;
  assign mul_in2[4] = in2_4;
  assign mul_in2[5] = in2_5;
  assign mul_in2[6] = in2_6;

  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        for(HwModeRegister1_t_1 = 32'sd0; HwModeRegister1_t_1 <= 32'sd6; HwModeRegister1_t_1 = HwModeRegister1_t_1 + 32'sd1) begin
          mul_in2_1[HwModeRegister1_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister1_t_0_0 = 32'sd0; HwModeRegister1_t_0_0 <= 32'sd6; HwModeRegister1_t_0_0 = HwModeRegister1_t_0_0 + 32'sd1) begin
            mul_in2_1[HwModeRegister1_t_0_0] <= mul_in2[HwModeRegister1_t_0_0];
          end
        end
      end
    end


  genvar t_0_01;
  generate
    for(t_0_01 = 32'sd0; t_0_01 <= 32'sd6; t_0_01 = t_0_01 + 32'sd1) begin:mul_out1_gen
      assign mul_out1[t_0_01] = mul_in1_1[t_0_01] * mul_in2_1[t_0_01];
    end
  endgenerate
  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        for(PipelineRegister_t_1 = 32'sd0; PipelineRegister_t_1 <= 32'sd6; PipelineRegister_t_1 = PipelineRegister_t_1 + 32'sd1) begin
          mul_out1_1[PipelineRegister_t_1] <= 50'sh0000000000000;
        end
      end
      else begin
        if (enb) begin
          for(PipelineRegister_t_0_0 = 32'sd0; PipelineRegister_t_0_0 <= 32'sd6; PipelineRegister_t_0_0 = PipelineRegister_t_0_0 + 32'sd1) begin
            mul_out1_1[PipelineRegister_t_0_0] <= mul_out1[PipelineRegister_t_0_0];
          end
        end
      end
    end

  assign mul_out1_0 = mul_out1_1[0];
  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        mul_out1_0_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          mul_out1_0_1 <= mul_out1_0;
        end
      end
    end

  assign mul_out1_1_1 = mul_out1_1[1];

  always @(posedge clk)
    begin : rd_3_process
      if (reset == 1'b1) begin
        mul_out1_1_2 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          mul_out1_1_2 <= mul_out1_1_1;
        end
      end
    end

  assign sum_stage1_1 = mul_out1_0_1 + mul_out1_1_2;
  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        sum_stage1_1_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          sum_stage1_1_1 <= sum_stage1_1;
        end
      end
    end

  assign mul_out1_2 = mul_out1_1[2];

  always @(posedge clk)
    begin : rd_1_process
      if (reset == 1'b1) begin
        mul_out1_2_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          mul_out1_2_1 <= mul_out1_2;
        end
      end
    end

  assign mul_out1_3 = mul_out1_1[3];

  always @(posedge clk)
    begin : rd_5_process
      if (reset == 1'b1) begin
        mul_out1_3_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          mul_out1_3_1 <= mul_out1_3;
        end
      end
    end

  assign sum_stage1_2 = mul_out1_2_1 + mul_out1_3_1;
  always @(posedge clk)
    begin : rd_6_process
      if (reset == 1'b1) begin
        sum_stage1_2_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          sum_stage1_2_1 <= sum_stage1_2;
        end
      end
    end

  assign sum_stage2_1 = sum_stage1_1_1 + sum_stage1_2_1;
  always @(posedge clk)
    begin : rd_7_process
      if (reset == 1'b1) begin
        sum_stage2_1_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          sum_stage2_1_1 <= sum_stage2_1;
        end
      end
    end

  assign mul_out1_4 = mul_out1_1[4];

  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        mul_out1_4_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          mul_out1_4_1 <= mul_out1_4;
        end
      end
    end

  assign mul_out1_5 = mul_out1_1[5];

  always @(posedge clk)
    begin : rd_8_process
      if (reset == 1'b1) begin
        mul_out1_5_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          mul_out1_5_1 <= mul_out1_5;
        end
      end
    end

  assign sum_stage1_3 = mul_out1_4_1 + mul_out1_5_1;
  always @(posedge clk)
    begin : rd_9_process
      if (reset == 1'b1) begin
        sum_stage1_3_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          sum_stage1_3_1 <= sum_stage1_3;
        end
      end
    end

  assign mul_out1_6 = mul_out1_1[6];
  always @(posedge clk)
    begin : rd_10_process
      if (reset == 1'b1) begin
        for(rd_10_t_1 = 32'sd0; rd_10_t_1 <= 32'sd1; rd_10_t_1 = rd_10_t_1 + 32'sd1) begin
          rd_10_reg[rd_10_t_1] <= 50'sh0000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_10_t_0_0 = 32'sd0; rd_10_t_0_0 <= 32'sd1; rd_10_t_0_0 = rd_10_t_0_0 + 32'sd1) begin
            rd_10_reg[rd_10_t_0_0] <= rd_10_reg_next[rd_10_t_0_0];
          end
        end
      end
    end

  assign sum_stage1_4 = rd_10_reg[1];
  assign rd_10_reg_next[0] = mul_out1_6;
  assign rd_10_reg_next[1] = rd_10_reg[0];

  assign sum_stage2_2 = sum_stage1_3_1 + sum_stage1_4;
  always @(posedge clk)
    begin : rd_11_process
      if (reset == 1'b1) begin
        sum_stage2_2_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          sum_stage2_2_1 <= sum_stage2_2;
        end
      end
    end

  assign sum_stage3_1 = sum_stage2_1_1 + sum_stage2_2_1;
  assign out1 = sum_stage3_1;

endmodule  // dot_product_7_block

