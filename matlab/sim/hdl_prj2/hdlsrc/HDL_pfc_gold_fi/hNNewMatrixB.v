// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi\hNNewMatrixB.v
// Created: 2025-02-26 17:03:08
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: hNNewMatrixB
// Source Path: HDL_pfc_gold_fi/simscape_system/HDL Subsystem/Fixed-Point State-Space/hNNewMatrixB
// Hierarchy Level: 2
// Model version: 1.167
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hNNewMatrixB
          (clk,
           reset,
           enb,
           enb_1_1_1,
           in0_0,
           in0_1,
           in0_2,
           in0_3,
           in0_4,
           in0_5,
           in0_6,
           in0_7,
           in0_8,
           in0_9,
           enb_counter,
           matrixBOutSignal_0,
           matrixBOutSignal_1,
           matrixBOutSignal_2,
           matrixBOutSignal_3,
           matrixBOutSignal_4,
           matrixBOutSignal_5,
           matrixBOutSignal_6);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_1_1;
  input   signed [24:0] in0_0;  // sfix25_En13
  input   signed [24:0] in0_1;  // sfix25_En13
  input   signed [24:0] in0_2;  // sfix25_En13
  input   signed [24:0] in0_3;  // sfix25_En13
  input   signed [24:0] in0_4;  // sfix25_En13
  input   signed [24:0] in0_5;  // sfix25_En13
  input   signed [24:0] in0_6;  // sfix25_En13
  input   signed [24:0] in0_7;  // sfix25_En13
  input   signed [24:0] in0_8;  // sfix25_En13
  input   signed [24:0] in0_9;  // sfix25_En13
  input   [6:0] enb_counter;  // ufix7
  output  signed [24:0] matrixBOutSignal_0;  // sfix25_En13
  output  signed [24:0] matrixBOutSignal_1;  // sfix25_En13
  output  signed [24:0] matrixBOutSignal_2;  // sfix25_En13
  output  signed [24:0] matrixBOutSignal_3;  // sfix25_En13
  output  signed [24:0] matrixBOutSignal_4;  // sfix25_En13
  output  signed [24:0] matrixBOutSignal_5;  // sfix25_En13
  output  signed [24:0] matrixBOutSignal_6;  // sfix25_En13


  wire HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_8_0;
  reg  [5:0] rd_5_reg;  // ufix1 [6]
  wire HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_8_0_1;
  wire HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6;
  reg  HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6_1;
  wire enb_gated;
  reg [2:0] counterSig;  // ufix3
  wire signed [24:0] configuration1 [0:62];  // sfix25_En31 [63]
  wire signed [24:0] ratechange_splitcomp_out0 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out1 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out2 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out3 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out4 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out5 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out6 [0:8];  // sfix25_En31 [9]
  reg signed [24:0] row7 [0:8];  // sfix25_En31 [9]
  wire signed [24:0] ratechange_splitcomp_out0_1 [0:8];  // sfix25_En13 [9]
  wire signed [24:0] ratechange_splitcomp_out1_1 [0:8];  // sfix25_En13 [9]
  wire signed [24:0] ratechange_splitcomp_out2_1 [0:8];  // sfix25_En13 [9]
  wire signed [24:0] ratechange_splitcomp_out3_1 [0:8];  // sfix25_En13 [9]
  wire signed [24:0] ratechange_splitcomp_out4_1 [0:8];  // sfix25_En13 [9]
  wire signed [24:0] ratechange_splitcomp_out5_1 [0:8];  // sfix25_En13 [9]
  wire signed [24:0] ratechange_splitcomp_out6_1 [0:8];  // sfix25_En13 [9]
  reg signed [24:0] col7 [0:8];  // sfix25_En13 [9]
  wire signed [49:0] dot_product7;  // sfix50_En44
  reg signed [49:0] dot_product7_1;  // sfix50_En44
  wire signed [49:0] dot_product1;  // sfix50_En44
  reg signed [49:0] dot_product1_held;  // sfix50_En44
  reg signed [49:0] dot_product1_1;  // sfix50_En44
  wire signed [24:0] out_DTC1;  // sfix25_En13
  wire enb_counter_ge_2_1;
  reg  enb_counter_ge_2_2;
  wire enb_counter_le_7_1;
  reg  enb_counter_le_7_2;
  wire HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_2_5;
  reg  [3:0] rd_3_reg;  // ufix1 [4]
  wire HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_2_5_1;
  wire enb_gated_1;
  reg signed [49:0] tappedDelay_reg [0:5];  // sfix50 [6]
  reg signed [49:0] tappedDelay_reg_next [0:5];  // sfix50_En44 [6]
  reg signed [49:0] c0_serialOut_0 [0:5];  // sfix50_En44 [6]
  wire signed [49:0] c0_serialOut_0_5;  // sfix50_En44
  reg signed [49:0] dot_product2;  // sfix50_En44
  wire signed [24:0] out_DTC2;  // sfix25_En13
  reg signed [24:0] out_DTC2_1;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_4;  // sfix50_En44
  reg signed [49:0] dot_product3;  // sfix50_En44
  wire signed [24:0] out_DTC3;  // sfix25_En13
  reg signed [24:0] out_DTC3_1;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_3;  // sfix50_En44
  reg signed [49:0] dot_product4;  // sfix50_En44
  wire signed [24:0] out_DTC4;  // sfix25_En13
  reg signed [24:0] out_DTC4_1;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_2;  // sfix50_En44
  reg signed [49:0] dot_product5;  // sfix50_En44
  wire signed [24:0] out_DTC5;  // sfix25_En13
  reg signed [24:0] out_DTC5_1;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_1;  // sfix50_En44
  reg signed [49:0] dot_product6;  // sfix50_En44
  wire signed [24:0] out_DTC6;  // sfix25_En13
  reg signed [24:0] out_DTC6_1;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_0;  // sfix50_En44
  reg signed [49:0] dot_product7_2;  // sfix50_En44
  wire signed [24:0] out_DTC7;  // sfix25_En13
  reg signed [24:0] out_DTC7_1;  // sfix25_En13
  reg signed [31:0] splitcomp_multiport_t_0_0;  // int32
  reg signed [31:0] splitcomp_multiport_t_1;  // int32
  reg signed [31:0] splitcomp_multiport_t_2_0;  // int32
  reg signed [31:0] splitcomp_multiport_t_3;  // int32
  reg signed [31:0] splitcomp_multiport_t_4;  // int32
  reg signed [31:0] splitcomp_multiport_t_5;  // int32
  reg signed [31:0] splitcomp_multiport_t_6;  // int32
  reg signed [31:0] splitcomp_multiport_t_0_01;  // int32
  reg signed [31:0] splitcomp_multiport_t_11;  // int32
  reg signed [31:0] splitcomp_multiport_t_2_01;  // int32
  reg signed [31:0] splitcomp_multiport_t_31;  // int32
  reg signed [31:0] splitcomp_multiport_t_41;  // int32
  reg signed [31:0] splitcomp_multiport_t_51;  // int32
  reg signed [31:0] splitcomp_multiport_t_61;  // int32
  reg signed [31:0] tappedDelay_t_0_0;  // int32
  reg signed [31:0] tappedDelay_t_1;  // int32
  reg signed [31:0] tappedDelay_t_0_1;  // int32
  reg signed [31:0] tappedDelay_t_1_0;  // int32


  assign HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_8_0 = enb_counter == 7'b0001000;

  always @(posedge clk)
    begin : rd_5_process
      if (reset == 1'b1) begin
        rd_5_reg <= {6{1'b0}};
      end
      else begin
        if (enb) begin
          rd_5_reg[0] <= HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_8_0;
          rd_5_reg[32'sd5:32'sd1] <= rd_5_reg[32'sd4:32'sd0];
        end
      end
    end

  assign HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_8_0_1 = rd_5_reg[5];

  assign HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6 = enb_counter <= 7'b0000110;

  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6_1 <= HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6;
        end
      end
    end

  assign enb_gated = HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_0_6_1 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 6
  always @(posedge clk)
    begin : ctr_0_6_process
      if (reset == 1'b1) begin
        counterSig <= 3'b000;
      end
      else begin
        if (enb_gated) begin
          if (counterSig >= 3'b110) begin
            counterSig <= 3'b000;
          end
          else begin
            counterSig <= counterSig + 3'b001;
          end
        end
      end
    end

  assign configuration1[0] = 25'sb1111000010101110001010000;
  assign configuration1[1] = 25'sb0110010011000111111101100;
  assign configuration1[2] = 25'sb1100110110011100000001010;
  assign configuration1[3] = 25'sb1100110110011100000001010;
  assign configuration1[4] = 25'sb1100110110011011111111110;
  assign configuration1[5] = 25'sb1100110110011011111111110;
  assign configuration1[6] = 25'sb0110010011001000000000101;
  assign configuration1[7] = 25'sb0000011110101000111011000;
  assign configuration1[8] = 25'sb1001101100111000000010100;
  assign configuration1[9] = 25'sb0011001001100011111110110;
  assign configuration1[10] = 25'sb0011001001100011111110110;
  assign configuration1[11] = 25'sb0011001001100100000000010;
  assign configuration1[12] = 25'sb0011001001100100000000010;
  assign configuration1[13] = 25'sb1001101100110111111111011;
  assign configuration1[14] = 25'sb0000011110101000111011000;
  assign configuration1[15] = 25'sb0011001001100011111110110;
  assign configuration1[16] = 25'sb1001101100111000000010100;
  assign configuration1[17] = 25'sb0011001001100011111110110;
  assign configuration1[18] = 25'sb1001101100110111111111011;
  assign configuration1[19] = 25'sb0011001001100100000000010;
  assign configuration1[20] = 25'sb0011001001100100000000010;
  assign configuration1[21] = 25'sb0000011110101000111011000;
  assign configuration1[22] = 25'sb0011001001100011111110110;
  assign configuration1[23] = 25'sb0011001001100011111110110;
  assign configuration1[24] = 25'sb1001101100111000000010100;
  assign configuration1[25] = 25'sb0011001001100100000000010;
  assign configuration1[26] = 25'sb1001101100110111111111011;
  assign configuration1[27] = 25'sb0011001001100100000000010;
  assign configuration1[28] = 25'sb0000011110101000111011000;
  assign configuration1[29] = 25'sb1100110110011100000001010;
  assign configuration1[30] = 25'sb0110010011000111111101100;
  assign configuration1[31] = 25'sb1100110110011100000001010;
  assign configuration1[32] = 25'sb0110010011001000000000101;
  assign configuration1[33] = 25'sb1100110110011011111111110;
  assign configuration1[34] = 25'sb1100110110011011111111110;
  assign configuration1[35] = 25'sb0000011110101000111011000;
  assign configuration1[36] = 25'sb1100110110011100000001010;
  assign configuration1[37] = 25'sb1100110110011100000001010;
  assign configuration1[38] = 25'sb0110010011000111111101100;
  assign configuration1[39] = 25'sb1100110110011011111111110;
  assign configuration1[40] = 25'sb0110010011001000000000101;
  assign configuration1[41] = 25'sb1100110110011011111111110;
  assign configuration1[42] = 25'sb0000011110101000111011000;
  assign configuration1[43] = 25'sb0000010000000111111111111;
  assign configuration1[44] = 25'sb1111110111111100000000000;
  assign configuration1[45] = 25'sb1111110111111100000000000;
  assign configuration1[46] = 25'sb1111110111111100000000000;
  assign configuration1[47] = 25'sb1111110111111100000000000;
  assign configuration1[48] = 25'sb0000010000001000000000000;
  assign configuration1[49] = 25'sb0000000000000000000000000;
  assign configuration1[50] = 25'sb1111110111111100000000000;
  assign configuration1[51] = 25'sb0000010000000111111111111;
  assign configuration1[52] = 25'sb1111110111111100000000000;
  assign configuration1[53] = 25'sb0000010000001000000000000;
  assign configuration1[54] = 25'sb1111110111111100000000000;
  assign configuration1[55] = 25'sb1111110111111100000000000;
  assign configuration1[56] = 25'sb0000000000000000000000000;
  assign configuration1[57] = 25'sb1111110111111100000000000;
  assign configuration1[58] = 25'sb1111110111111100000000000;
  assign configuration1[59] = 25'sb0000010000000111111111111;
  assign configuration1[60] = 25'sb1111110111111100000000000;
  assign configuration1[61] = 25'sb0000010000001000000000000;
  assign configuration1[62] = 25'sb1111110111111100000000000;
  assign ratechange_splitcomp_out0[0] = configuration1[0];
  assign ratechange_splitcomp_out0[1] = configuration1[7];
  assign ratechange_splitcomp_out0[2] = configuration1[14];
  assign ratechange_splitcomp_out0[3] = configuration1[21];
  assign ratechange_splitcomp_out0[4] = configuration1[28];
  assign ratechange_splitcomp_out0[5] = configuration1[35];
  assign ratechange_splitcomp_out0[6] = configuration1[42];
  assign ratechange_splitcomp_out0[7] = configuration1[49];
  assign ratechange_splitcomp_out0[8] = configuration1[56];
  assign ratechange_splitcomp_out1[0] = configuration1[6];
  assign ratechange_splitcomp_out1[1] = configuration1[13];
  assign ratechange_splitcomp_out1[2] = configuration1[20];
  assign ratechange_splitcomp_out1[3] = configuration1[27];
  assign ratechange_splitcomp_out1[4] = configuration1[34];
  assign ratechange_splitcomp_out1[5] = configuration1[41];
  assign ratechange_splitcomp_out1[6] = configuration1[48];
  assign ratechange_splitcomp_out1[7] = configuration1[55];
  assign ratechange_splitcomp_out1[8] = configuration1[62];
  assign ratechange_splitcomp_out2[0] = configuration1[5];
  assign ratechange_splitcomp_out2[1] = configuration1[12];
  assign ratechange_splitcomp_out2[2] = configuration1[19];
  assign ratechange_splitcomp_out2[3] = configuration1[26];
  assign ratechange_splitcomp_out2[4] = configuration1[33];
  assign ratechange_splitcomp_out2[5] = configuration1[40];
  assign ratechange_splitcomp_out2[6] = configuration1[47];
  assign ratechange_splitcomp_out2[7] = configuration1[54];
  assign ratechange_splitcomp_out2[8] = configuration1[61];
  assign ratechange_splitcomp_out3[0] = configuration1[4];
  assign ratechange_splitcomp_out3[1] = configuration1[11];
  assign ratechange_splitcomp_out3[2] = configuration1[18];
  assign ratechange_splitcomp_out3[3] = configuration1[25];
  assign ratechange_splitcomp_out3[4] = configuration1[32];
  assign ratechange_splitcomp_out3[5] = configuration1[39];
  assign ratechange_splitcomp_out3[6] = configuration1[46];
  assign ratechange_splitcomp_out3[7] = configuration1[53];
  assign ratechange_splitcomp_out3[8] = configuration1[60];
  assign ratechange_splitcomp_out4[0] = configuration1[3];
  assign ratechange_splitcomp_out4[1] = configuration1[10];
  assign ratechange_splitcomp_out4[2] = configuration1[17];
  assign ratechange_splitcomp_out4[3] = configuration1[24];
  assign ratechange_splitcomp_out4[4] = configuration1[31];
  assign ratechange_splitcomp_out4[5] = configuration1[38];
  assign ratechange_splitcomp_out4[6] = configuration1[45];
  assign ratechange_splitcomp_out4[7] = configuration1[52];
  assign ratechange_splitcomp_out4[8] = configuration1[59];
  assign ratechange_splitcomp_out5[0] = configuration1[2];
  assign ratechange_splitcomp_out5[1] = configuration1[9];
  assign ratechange_splitcomp_out5[2] = configuration1[16];
  assign ratechange_splitcomp_out5[3] = configuration1[23];
  assign ratechange_splitcomp_out5[4] = configuration1[30];
  assign ratechange_splitcomp_out5[5] = configuration1[37];
  assign ratechange_splitcomp_out5[6] = configuration1[44];
  assign ratechange_splitcomp_out5[7] = configuration1[51];
  assign ratechange_splitcomp_out5[8] = configuration1[58];
  assign ratechange_splitcomp_out6[0] = configuration1[1];
  assign ratechange_splitcomp_out6[1] = configuration1[8];
  assign ratechange_splitcomp_out6[2] = configuration1[15];
  assign ratechange_splitcomp_out6[3] = configuration1[22];
  assign ratechange_splitcomp_out6[4] = configuration1[29];
  assign ratechange_splitcomp_out6[5] = configuration1[36];
  assign ratechange_splitcomp_out6[6] = configuration1[43];
  assign ratechange_splitcomp_out6[7] = configuration1[50];
  assign ratechange_splitcomp_out6[8] = configuration1[57];
  always @* begin
    if (counterSig == 3'b000) begin
      for(splitcomp_multiport_t_0_0 = 32'sd0; splitcomp_multiport_t_0_0 <= 32'sd8; splitcomp_multiport_t_0_0 = splitcomp_multiport_t_0_0 + 32'sd1) begin
        row7[splitcomp_multiport_t_0_0] = ratechange_splitcomp_out0[splitcomp_multiport_t_0_0];
      end
    end
    else if (counterSig == 3'b001) begin
      for(splitcomp_multiport_t_1 = 32'sd0; splitcomp_multiport_t_1 <= 32'sd8; splitcomp_multiport_t_1 = splitcomp_multiport_t_1 + 32'sd1) begin
        row7[splitcomp_multiport_t_1] = ratechange_splitcomp_out1[splitcomp_multiport_t_1];
      end
    end
    else if (counterSig == 3'b010) begin
      for(splitcomp_multiport_t_2_0 = 32'sd0; splitcomp_multiport_t_2_0 <= 32'sd8; splitcomp_multiport_t_2_0 = splitcomp_multiport_t_2_0 + 32'sd1) begin
        row7[splitcomp_multiport_t_2_0] = ratechange_splitcomp_out2[splitcomp_multiport_t_2_0];
      end
    end
    else if (counterSig == 3'b011) begin
      for(splitcomp_multiport_t_3 = 32'sd0; splitcomp_multiport_t_3 <= 32'sd8; splitcomp_multiport_t_3 = splitcomp_multiport_t_3 + 32'sd1) begin
        row7[splitcomp_multiport_t_3] = ratechange_splitcomp_out3[splitcomp_multiport_t_3];
      end
    end
    else if (counterSig == 3'b100) begin
      for(splitcomp_multiport_t_4 = 32'sd0; splitcomp_multiport_t_4 <= 32'sd8; splitcomp_multiport_t_4 = splitcomp_multiport_t_4 + 32'sd1) begin
        row7[splitcomp_multiport_t_4] = ratechange_splitcomp_out4[splitcomp_multiport_t_4];
      end
    end
    else if (counterSig == 3'b101) begin
      for(splitcomp_multiport_t_6 = 32'sd0; splitcomp_multiport_t_6 <= 32'sd8; splitcomp_multiport_t_6 = splitcomp_multiport_t_6 + 32'sd1) begin
        row7[splitcomp_multiport_t_6] = ratechange_splitcomp_out5[splitcomp_multiport_t_6];
      end
    end
    else begin
      for(splitcomp_multiport_t_5 = 32'sd0; splitcomp_multiport_t_5 <= 32'sd8; splitcomp_multiport_t_5 = splitcomp_multiport_t_5 + 32'sd1) begin
        row7[splitcomp_multiport_t_5] = ratechange_splitcomp_out6[splitcomp_multiport_t_5];
      end
    end
  end

  assign ratechange_splitcomp_out0_1[0] = in0_0;
  assign ratechange_splitcomp_out0_1[1] = in0_1;
  assign ratechange_splitcomp_out0_1[2] = in0_2;
  assign ratechange_splitcomp_out0_1[3] = in0_3;
  assign ratechange_splitcomp_out0_1[4] = in0_4;
  assign ratechange_splitcomp_out0_1[5] = in0_5;
  assign ratechange_splitcomp_out0_1[6] = in0_6;
  assign ratechange_splitcomp_out0_1[7] = in0_7;
  assign ratechange_splitcomp_out0_1[8] = in0_8;
  assign ratechange_splitcomp_out1_1[0] = in0_1;
  assign ratechange_splitcomp_out1_1[1] = in0_2;
  assign ratechange_splitcomp_out1_1[2] = in0_3;
  assign ratechange_splitcomp_out1_1[3] = in0_4;
  assign ratechange_splitcomp_out1_1[4] = in0_5;
  assign ratechange_splitcomp_out1_1[5] = in0_6;
  assign ratechange_splitcomp_out1_1[6] = in0_7;
  assign ratechange_splitcomp_out1_1[7] = in0_8;
  assign ratechange_splitcomp_out1_1[8] = in0_9;
  assign ratechange_splitcomp_out2_1[0] = in0_1;
  assign ratechange_splitcomp_out2_1[1] = in0_2;
  assign ratechange_splitcomp_out2_1[2] = in0_3;
  assign ratechange_splitcomp_out2_1[3] = in0_4;
  assign ratechange_splitcomp_out2_1[4] = in0_5;
  assign ratechange_splitcomp_out2_1[5] = in0_6;
  assign ratechange_splitcomp_out2_1[6] = in0_7;
  assign ratechange_splitcomp_out2_1[7] = in0_8;
  assign ratechange_splitcomp_out2_1[8] = in0_9;
  assign ratechange_splitcomp_out3_1[0] = in0_1;
  assign ratechange_splitcomp_out3_1[1] = in0_2;
  assign ratechange_splitcomp_out3_1[2] = in0_3;
  assign ratechange_splitcomp_out3_1[3] = in0_4;
  assign ratechange_splitcomp_out3_1[4] = in0_5;
  assign ratechange_splitcomp_out3_1[5] = in0_6;
  assign ratechange_splitcomp_out3_1[6] = in0_7;
  assign ratechange_splitcomp_out3_1[7] = in0_8;
  assign ratechange_splitcomp_out3_1[8] = in0_9;
  assign ratechange_splitcomp_out4_1[0] = in0_1;
  assign ratechange_splitcomp_out4_1[1] = in0_2;
  assign ratechange_splitcomp_out4_1[2] = in0_3;
  assign ratechange_splitcomp_out4_1[3] = in0_4;
  assign ratechange_splitcomp_out4_1[4] = in0_5;
  assign ratechange_splitcomp_out4_1[5] = in0_6;
  assign ratechange_splitcomp_out4_1[6] = in0_7;
  assign ratechange_splitcomp_out4_1[7] = in0_8;
  assign ratechange_splitcomp_out4_1[8] = in0_9;
  assign ratechange_splitcomp_out5_1[0] = in0_1;
  assign ratechange_splitcomp_out5_1[1] = in0_2;
  assign ratechange_splitcomp_out5_1[2] = in0_3;
  assign ratechange_splitcomp_out5_1[3] = in0_4;
  assign ratechange_splitcomp_out5_1[4] = in0_5;
  assign ratechange_splitcomp_out5_1[5] = in0_6;
  assign ratechange_splitcomp_out5_1[6] = in0_7;
  assign ratechange_splitcomp_out5_1[7] = in0_8;
  assign ratechange_splitcomp_out5_1[8] = in0_9;
  assign ratechange_splitcomp_out6_1[0] = in0_1;
  assign ratechange_splitcomp_out6_1[1] = in0_2;
  assign ratechange_splitcomp_out6_1[2] = in0_3;
  assign ratechange_splitcomp_out6_1[3] = in0_4;
  assign ratechange_splitcomp_out6_1[4] = in0_5;
  assign ratechange_splitcomp_out6_1[5] = in0_6;
  assign ratechange_splitcomp_out6_1[6] = in0_7;
  assign ratechange_splitcomp_out6_1[7] = in0_8;
  assign ratechange_splitcomp_out6_1[8] = in0_9;
  always @* begin
    if (counterSig == 3'b000) begin
      for(splitcomp_multiport_t_0_01 = 32'sd0; splitcomp_multiport_t_0_01 <= 32'sd8; splitcomp_multiport_t_0_01 = splitcomp_multiport_t_0_01 + 32'sd1) begin
        col7[splitcomp_multiport_t_0_01] = ratechange_splitcomp_out0_1[splitcomp_multiport_t_0_01];
      end
    end
    else if (counterSig == 3'b001) begin
      for(splitcomp_multiport_t_11 = 32'sd0; splitcomp_multiport_t_11 <= 32'sd8; splitcomp_multiport_t_11 = splitcomp_multiport_t_11 + 32'sd1) begin
        col7[splitcomp_multiport_t_11] = ratechange_splitcomp_out1_1[splitcomp_multiport_t_11];
      end
    end
    else if (counterSig == 3'b010) begin
      for(splitcomp_multiport_t_2_01 = 32'sd0; splitcomp_multiport_t_2_01 <= 32'sd8; splitcomp_multiport_t_2_01 = splitcomp_multiport_t_2_01 + 32'sd1) begin
        col7[splitcomp_multiport_t_2_01] = ratechange_splitcomp_out2_1[splitcomp_multiport_t_2_01];
      end
    end
    else if (counterSig == 3'b011) begin
      for(splitcomp_multiport_t_31 = 32'sd0; splitcomp_multiport_t_31 <= 32'sd8; splitcomp_multiport_t_31 = splitcomp_multiport_t_31 + 32'sd1) begin
        col7[splitcomp_multiport_t_31] = ratechange_splitcomp_out3_1[splitcomp_multiport_t_31];
      end
    end
    else if (counterSig == 3'b100) begin
      for(splitcomp_multiport_t_41 = 32'sd0; splitcomp_multiport_t_41 <= 32'sd8; splitcomp_multiport_t_41 = splitcomp_multiport_t_41 + 32'sd1) begin
        col7[splitcomp_multiport_t_41] = ratechange_splitcomp_out4_1[splitcomp_multiport_t_41];
      end
    end
    else if (counterSig == 3'b101) begin
      for(splitcomp_multiport_t_61 = 32'sd0; splitcomp_multiport_t_61 <= 32'sd8; splitcomp_multiport_t_61 = splitcomp_multiport_t_61 + 32'sd1) begin
        col7[splitcomp_multiport_t_61] = ratechange_splitcomp_out5_1[splitcomp_multiport_t_61];
      end
    end
    else begin
      for(splitcomp_multiport_t_51 = 32'sd0; splitcomp_multiport_t_51 <= 32'sd8; splitcomp_multiport_t_51 = splitcomp_multiport_t_51 + 32'sd1) begin
        col7[splitcomp_multiport_t_51] = ratechange_splitcomp_out6_1[splitcomp_multiport_t_51];
      end
    end
  end

  dot_product_9 u_dot_product_9 (.clk(clk),
                                 .reset(reset),
                                 .enb(enb),
                                 .enb_1_1_1(enb_1_1_1),
                                 .in1_0(row7[0]),  // sfix25_En31
                                 .in1_1(row7[1]),  // sfix25_En31
                                 .in1_2(row7[2]),  // sfix25_En31
                                 .in1_3(row7[3]),  // sfix25_En31
                                 .in1_4(row7[4]),  // sfix25_En31
                                 .in1_5(row7[5]),  // sfix25_En31
                                 .in1_6(row7[6]),  // sfix25_En31
                                 .in1_7(row7[7]),  // sfix25_En31
                                 .in1_8(row7[8]),  // sfix25_En31
                                 .in2_0(col7[0]),  // sfix25_En13
                                 .in2_1(col7[1]),  // sfix25_En13
                                 .in2_2(col7[2]),  // sfix25_En13
                                 .in2_3(col7[3]),  // sfix25_En13
                                 .in2_4(col7[4]),  // sfix25_En13
                                 .in2_5(col7[5]),  // sfix25_En13
                                 .in2_6(col7[6]),  // sfix25_En13
                                 .in2_7(col7[7]),  // sfix25_En13
                                 .in2_8(col7[8]),  // sfix25_En13
                                 .out1(dot_product7)  // sfix50_En44
                                 );
  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        dot_product7_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product7_1 <= dot_product7;
        end
      end
    end

  always @(posedge clk)
    begin : dot_product1_state_process
      if (reset == 1'b1) begin
        dot_product1_held <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product1_held <= dot_product1;
        end
      end
    end

  assign dot_product1 = (HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_8_0_1 == 1'b0 ? dot_product1_held :
              dot_product7_1);

  always @(posedge clk)
    begin : rd_0_1_process
      if (reset == 1'b1) begin
        dot_product1_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product1_1 <= dot_product1;
        end
      end
    end

  assign out_DTC1 = ({{6{dot_product1_1[49]}}, dot_product1_1[49:31]}) + $signed({1'b0, dot_product1_1[30]});
  assign matrixBOutSignal_0 = out_DTC1;
  assign enb_counter_ge_2_1 = enb_counter >= 7'b0000010;

  always @(posedge clk)
    begin : rd_1_process
      if (reset == 1'b1) begin
        enb_counter_ge_2_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_ge_2_2 <= enb_counter_ge_2_1;
        end
      end
    end

  assign enb_counter_le_7_1 = enb_counter <= 7'b0000111;

  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        enb_counter_le_7_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_le_7_2 <= enb_counter_le_7_1;
        end
      end
    end

  assign HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_2_5 = enb_counter_ge_2_2 & enb_counter_le_7_2;

  always @(posedge clk)
    begin : rd_3_process
      if (reset == 1'b1) begin
        rd_3_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          rd_3_reg[0] <= HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_2_5;
          rd_3_reg[32'sd3:32'sd1] <= rd_3_reg[32'sd2:32'sd0];
        end
      end
    end

  assign HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_2_5_1 = rd_3_reg[3];

  assign enb_gated_1 = HDL_pfc_gold_fi_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixB_shared_enb_phase_2_5_1 && enb;

  always @(posedge clk)
    begin : tappedDelay_process
      if (reset == 1'b1) begin
        for(tappedDelay_t_1_0 = 32'sd0; tappedDelay_t_1_0 <= 32'sd5; tappedDelay_t_1_0 = tappedDelay_t_1_0 + 32'sd1) begin
          tappedDelay_reg[tappedDelay_t_1_0] <= 50'sh0000000000000;
        end
      end
      else begin
        if (enb_gated_1) begin
          for(tappedDelay_t_0_1 = 32'sd0; tappedDelay_t_0_1 <= 32'sd5; tappedDelay_t_0_1 = tappedDelay_t_0_1 + 32'sd1) begin
            tappedDelay_reg[tappedDelay_t_0_1] <= tappedDelay_reg_next[tappedDelay_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(tappedDelay_t_0_0 = 32'sd0; tappedDelay_t_0_0 <= 32'sd5; tappedDelay_t_0_0 = tappedDelay_t_0_0 + 32'sd1) begin
      c0_serialOut_0[tappedDelay_t_0_0] = tappedDelay_reg[tappedDelay_t_0_0];
    end
    for(tappedDelay_t_1 = 32'sd0; tappedDelay_t_1 <= 32'sd4; tappedDelay_t_1 = tappedDelay_t_1 + 32'sd1) begin
      tappedDelay_reg_next[tappedDelay_t_1] = tappedDelay_reg[32'sd1 + tappedDelay_t_1];
    end

    tappedDelay_reg_next[5] = dot_product7;
  end

  assign c0_serialOut_0_5 = c0_serialOut_0[5];

  always @(posedge clk)
    begin : rd_1_1_process
      if (reset == 1'b1) begin
        dot_product2 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product2 <= c0_serialOut_0_5;
        end
      end
    end

  assign out_DTC2 = ({{6{dot_product2[49]}}, dot_product2[49:31]}) + $signed({1'b0, dot_product2[30]});
  always @(posedge clk)
    begin : rd_2_1_process
      if (reset == 1'b1) begin
        out_DTC2_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          out_DTC2_1 <= out_DTC2;
        end
      end
    end

  assign matrixBOutSignal_1 = out_DTC2_1;

  assign c0_serialOut_0_4 = c0_serialOut_0[4];

  always @(posedge clk)
    begin : rd_3_1_process
      if (reset == 1'b1) begin
        dot_product3 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product3 <= c0_serialOut_0_4;
        end
      end
    end

  assign out_DTC3 = ({{6{dot_product3[49]}}, dot_product3[49:31]}) + $signed({1'b0, dot_product3[30]});
  always @(posedge clk)
    begin : rd_4_1_process
      if (reset == 1'b1) begin
        out_DTC3_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          out_DTC3_1 <= out_DTC3;
        end
      end
    end

  assign matrixBOutSignal_2 = out_DTC3_1;

  assign c0_serialOut_0_3 = c0_serialOut_0[3];

  always @(posedge clk)
    begin : rd_5_1_process
      if (reset == 1'b1) begin
        dot_product4 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product4 <= c0_serialOut_0_3;
        end
      end
    end

  assign out_DTC4 = ({{6{dot_product4[49]}}, dot_product4[49:31]}) + $signed({1'b0, dot_product4[30]});
  always @(posedge clk)
    begin : rd_6_process
      if (reset == 1'b1) begin
        out_DTC4_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          out_DTC4_1 <= out_DTC4;
        end
      end
    end

  assign matrixBOutSignal_3 = out_DTC4_1;

  assign c0_serialOut_0_2 = c0_serialOut_0[2];

  always @(posedge clk)
    begin : rd_7_process
      if (reset == 1'b1) begin
        dot_product5 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product5 <= c0_serialOut_0_2;
        end
      end
    end

  assign out_DTC5 = ({{6{dot_product5[49]}}, dot_product5[49:31]}) + $signed({1'b0, dot_product5[30]});
  always @(posedge clk)
    begin : rd_8_process
      if (reset == 1'b1) begin
        out_DTC5_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          out_DTC5_1 <= out_DTC5;
        end
      end
    end

  assign matrixBOutSignal_4 = out_DTC5_1;

  assign c0_serialOut_0_1 = c0_serialOut_0[1];

  always @(posedge clk)
    begin : rd_9_process
      if (reset == 1'b1) begin
        dot_product6 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product6 <= c0_serialOut_0_1;
        end
      end
    end

  assign out_DTC6 = ({{6{dot_product6[49]}}, dot_product6[49:31]}) + $signed({1'b0, dot_product6[30]});
  always @(posedge clk)
    begin : rd_10_process
      if (reset == 1'b1) begin
        out_DTC6_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          out_DTC6_1 <= out_DTC6;
        end
      end
    end

  assign matrixBOutSignal_5 = out_DTC6_1;

  assign c0_serialOut_0_0 = c0_serialOut_0[0];

  always @(posedge clk)
    begin : rd_11_process
      if (reset == 1'b1) begin
        dot_product7_2 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product7_2 <= c0_serialOut_0_0;
        end
      end
    end

  assign out_DTC7 = ({{6{dot_product7_2[49]}}, dot_product7_2[49:31]}) + $signed({1'b0, dot_product7_2[30]});
  always @(posedge clk)
    begin : rd_12_process
      if (reset == 1'b1) begin
        out_DTC7_1 <= 25'sb0000000000000000000000000;
      end
      else begin
        if (enb) begin
          out_DTC7_1 <= out_DTC7;
        end
      end
    end

  assign matrixBOutSignal_6 = out_DTC7_1;

endmodule  // hNNewMatrixB

