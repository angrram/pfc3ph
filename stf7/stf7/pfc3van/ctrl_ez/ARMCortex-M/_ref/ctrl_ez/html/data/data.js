var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"ctrl_ez","ref":true,"files":[{"name":"ctrl_ez.c","type":"source","group":"model","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_ref\\ctrl_ez","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ctrl_ez.c\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.631\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 14:19:19 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"ctrl_ez.h\"\r\n#include <stdbool.h>\r\n#include \"ctrl_ez_private.h\"\r\n#include <math.h>\r\n#include <stdint.h>\r\n#include \"plook_u32ff_evenc.h\"\r\n#include \"intrp1d_fu32fl.h\"\r\n\r\n/* Exported block states */\r\nfloat filter_IA;                       /* 'Data Store Memory' (':2047') */\r\nfloat filter_IB;                       /* 'Data Store Memory1' (':2049') */\r\nfloat filter_IC;                       /* 'Data Store Memory2' (':2051') */\r\n\r\n/* Block states (default storage) */\r\nDW_ctrl_ez_f_T ctrl_ez_DW;\r\n\r\n/* System initialize for referenced model: 'ctrl_ez' */\r\nvoid ctrl_ez_Init(float *rty_Qa)\r\n{\r\n  /* SystemInitialize for RootInportFunctionCallGenerator generated from: 'trigger_ctrl_ez' (':21') incorporates:\r\n   *  SubSystem: 'ctrl_ez_fcn' (':498')\r\n   */\r\n  /* InitializeConditions for Memory: 'Memory' (':561') */\r\n  ctrl_ez_DW.Memory_PreviousInput = true;\r\n\r\n  /* SystemInitialize for Enabled SubSystem: 'ctrl' (':1270') */\r\n  /* InitializeConditions for DiscreteIntegrator: 'Accumulator' (':1396') */\r\n  ctrl_ez_DW.Accumulator_PrevResetState = 2;\r\n\r\n  /* End of SystemInitialize for SubSystem: 'ctrl' (':1270') */\r\n\r\n  /* SystemInitialize for SignalConversion generated from: 'Qa' (':570') */\r\n  *rty_Qa = ctrl_ez_DW.T2[0];\r\n\r\n  /* End of SystemInitialize for RootInportFunctionCallGenerator generated from: 'trigger_ctrl_ez' (':21') */\r\n}\r\n\r\n/* Output and update for referenced model: 'ctrl_ez' */\r\nvoid ctrl_ez_trigger_ctrl_ez(const float *rtu_ia, const float *rtu_ib, const\r\n  float *rtu_ic, const float *rtu_ov_out, const float *rtu_w, const float\r\n  *rtu_lock_pll, const float *rtu_sine, const float *rtu_cos, const float\r\n  *rtu_va, const float *rtu_vc, const float *rtu_vb, float *rty_Qa, float\r\n  *rty_Qb, float *rty_Qc, bool *rty_lock)\r\n{\r\n  float rtb_Add1_idx_0;\r\n  float rtb_Add1_idx_1;\r\n  float rtb_Add1_idx_2;\r\n  float rtb_Gain;\r\n  float rtb_Kalphabeta0_d_idx_0;\r\n  float rtb_Kalphabeta0_d_idx_1;\r\n  float rtb_Kalphabeta0_idx_0;\r\n  float rtb_Sin;\r\n  float rtb_Switch1_idx_0;\r\n  float rtb_Switch1_idx_1;\r\n  float rtb_vd_ctrl;\r\n  float rtb_vd_park_l;\r\n  float rtb_vq_park_o;\r\n  int32_t rtb_Accumulator_o2;\r\n  uint32_t bpIdx;\r\n  uint8_t quadrantInfo;\r\n  bool isReciprocal;\r\n  static const float tableData_c[16] = { 0.0F, 0.010594652F, 0.0210962314F,\r\n    0.0314164795F, 0.0414761603F, 0.0512081906F, 0.0605594702F, 0.0694913715F,\r\n    0.0779791325F, 0.0860104337F, 0.0935835242F, 0.100705102F, 0.107388355F,\r\n    0.113651067F, 0.11951407F, 0.125F };\r\n\r\n  /* RootInportFunctionCallGenerator generated from: 'trigger_ctrl_ez' (':21') incorporates:\r\n   *  SubSystem: 'ctrl_ez_fcn' (':498')\r\n   */\r\n  /* Sum: 'Add1' (':831:360') incorporates:\r\n   *  Product: 'Product' (':831:364')\r\n   *  Product: 'Product1' (':831:365')\r\n   *  UnitDelay: 'Unit Delay' (':831:366')\r\n   */\r\n  rtb_Add1_idx_0 = *rtu_ia * 0.1F + ctrl_ez_DW.UnitDelay_DSTATE[0] * 0.9F;\r\n  rtb_Add1_idx_1 = *rtu_ib * 0.1F + 0.9F * ctrl_ez_DW.UnitDelay_DSTATE[1];\r\n  rtb_Add1_idx_2 = *rtu_ic * 0.1F + 0.9F * ctrl_ez_DW.UnitDelay_DSTATE[2];\r\n\r\n  /* DataStoreWrite: 'Data Store Write' (':2046') */\r\n  filter_IA = rtb_Add1_idx_0;\r\n\r\n  /* DataStoreWrite: 'Data Store Write1' (':2048') */\r\n  filter_IB = rtb_Add1_idx_1;\r\n\r\n  /* DataStoreWrite: 'Data Store Write2' (':2050') */\r\n  filter_IC = rtb_Add1_idx_2;\r\n\r\n  /* Switch: 'Switch' (':562') incorporates:\r\n   *  Constant: 'Pi1' (':1837')\r\n   *  Logic: 'AND' (':1985')\r\n   *  Memory: 'Memory' (':561')\r\n   *  RelationalOperator: 'Equal' (':1807')\r\n   */\r\n  *rty_lock = (((*rtu_w <= 0.0F) || (*rtu_lock_pll == 0.0F)) &&\r\n               ctrl_ez_DW.Memory_PreviousInput);\r\n\r\n  /* Gain: 'Kalphabeta0' (':2058:641') incorporates:\r\n   *  Gain: 'one_by_3' (':2058:648')\r\n   *  Gain: 'one_by_sqrt3_' (':2058:649')\r\n   *  Sum: 'Sum' (':2058:644')\r\n   *  Sum: 'Sum1' (':2058:645')\r\n   *  Sum: 'Sum2' (':2058:646')\r\n   */\r\n  rtb_Kalphabeta0_idx_0 = (*rtu_va - ((*rtu_va + *rtu_vb) + *rtu_vc) *\r\n    0.333333343F) * 1.22474492F;\r\n  rtb_Switch1_idx_0 = (*rtu_vb - *rtu_vc) * 0.577350259F * 1.22474492F;\r\n\r\n  /* Outputs for Enabled SubSystem: 'ctrl' (':1270') incorporates:\r\n   *  EnablePort: 'Enable' (':1272')\r\n   */\r\n  /* Logic: 'NOT' (':591') */\r\n  if (!*rty_lock) {\r\n    /* Gain: 'Kalphabeta0' (':1278:641') incorporates:\r\n     *  Gain: 'one_by_3' (':1278:648')\r\n     *  Gain: 'one_by_sqrt3_' (':1278:649')\r\n     *  Sum: 'Sum' (':1278:644')\r\n     *  Sum: 'Sum1' (':1278:645')\r\n     *  Sum: 'Sum2' (':1278:646')\r\n     */\r\n    rtb_Kalphabeta0_d_idx_0 = (rtb_Add1_idx_0 - ((rtb_Add1_idx_0 +\r\n      rtb_Add1_idx_1) + rtb_Add1_idx_2) * 0.333333343F) * 1.22474492F;\r\n    rtb_Kalphabeta0_d_idx_1 = (rtb_Add1_idx_1 - rtb_Add1_idx_2) * 0.577350259F *\r\n      1.22474492F;\r\n\r\n    /* MATLAB Function: 'park_tf' (':2017') */\r\n    rtb_vq_park_o = *rtu_sine * rtb_Kalphabeta0_d_idx_1 + *rtu_cos *\r\n      rtb_Kalphabeta0_d_idx_0;\r\n    rtb_vd_park_l = *rtu_sine * rtb_Kalphabeta0_d_idx_0 - *rtu_cos *\r\n      rtb_Kalphabeta0_d_idx_1;\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1374') */\r\n    if (ctrl_ez_DW.Accumulator_DSTATE == 50.0F) {\r\n      rtb_Accumulator_o2 = 1;\r\n    } else if (ctrl_ez_DW.Accumulator_DSTATE == -50.0F) {\r\n      rtb_Accumulator_o2 = -1;\r\n    } else {\r\n      rtb_Accumulator_o2 = 0;\r\n    }\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1385') */\r\n    rtb_Kalphabeta0_d_idx_0 = ctrl_ez_DW.Accumulator_DSTATE_a;\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1385') */\r\n    if (ctrl_ez_DW.Accumulator_DSTATE_a > 100.0F) {\r\n      /* DiscreteIntegrator: 'Accumulator' (':1385') */\r\n      rtb_Kalphabeta0_d_idx_0 = 100.0F;\r\n    } else if (ctrl_ez_DW.Accumulator_DSTATE_a < -100.0F) {\r\n      /* DiscreteIntegrator: 'Accumulator' (':1385') */\r\n      rtb_Kalphabeta0_d_idx_0 = -100.0F;\r\n    }\r\n\r\n    /* Sum: 'Sum3' (':1332') incorporates:\r\n     *  Constant: 'Constant' (':1324')\r\n     *  DiscreteIntegrator: 'Accumulator' (':1374')\r\n     *  Gain: 'Gain1' (':1389')\r\n     *  Gain: 'Gain1' (':1378')\r\n     *  Gain: 'Gain' (':1333')\r\n     *  MATLAB Function: 'park_tf' (':2016')\r\n     *  Sum: 'Add2' (':1386')\r\n     *  Sum: 'Add2' (':1375')\r\n     *  Sum: 'Sum1' (':1323')\r\n     *  Sum: 'Sum2' (':1328')\r\n     */\r\n    rtb_vd_ctrl = ((*rtu_sine * rtb_Kalphabeta0_idx_0 - *rtu_cos *\r\n                    rtb_Switch1_idx_0) + 0.0471238904F * rtb_vq_park_o) -\r\n      ((((700.0F - *rtu_ov_out) * 0.3F + ctrl_ez_DW.Accumulator_DSTATE) -\r\n        rtb_vd_park_l) * 8.0F + rtb_Kalphabeta0_d_idx_0);\r\n\r\n    /* Sum: 'Sum4' (':1336') incorporates:\r\n     *  Constant: 'Constant1' (':1337')\r\n     */\r\n    rtb_Sin = 0.0F - rtb_vq_park_o;\r\n\r\n    /* Delay: 'Delay1' (':1399') */\r\n    rtb_vq_park_o = ctrl_ez_DW.Delay1_DSTATE;\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1396') incorporates:\r\n     *  Delay: 'Delay1' (':1399')\r\n     */\r\n    if ((ctrl_ez_DW.Delay1_DSTATE > 0.0F) &&\r\n        (ctrl_ez_DW.Accumulator_PrevResetState <= 0)) {\r\n      ctrl_ez_DW.Accumulator_DSTATE_p = 0.0F;\r\n    }\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1396') */\r\n    rtb_Kalphabeta0_d_idx_1 = ctrl_ez_DW.Accumulator_DSTATE_p;\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1396') */\r\n    if (ctrl_ez_DW.Accumulator_DSTATE_p > 500.0F) {\r\n      /* DiscreteIntegrator: 'Accumulator' (':1396') */\r\n      rtb_Kalphabeta0_d_idx_1 = 500.0F;\r\n    } else if (ctrl_ez_DW.Accumulator_DSTATE_p < -500.0F) {\r\n      /* DiscreteIntegrator: 'Accumulator' (':1396') */\r\n      rtb_Kalphabeta0_d_idx_1 = -500.0F;\r\n    }\r\n\r\n    /* Sum: 'Sum5' (':1341') incorporates:\r\n     *  Gain: 'Gain1' (':1400')\r\n     *  Gain: 'Gain1' (':1342')\r\n     *  MATLAB Function: 'park_tf' (':2016')\r\n     *  Sum: 'Add2' (':1397')\r\n     */\r\n    rtb_vd_park_l = ((*rtu_sine * rtb_Switch1_idx_0 + *rtu_cos *\r\n                      rtb_Kalphabeta0_idx_0) - 0.0471238904F * rtb_vd_park_l) -\r\n      (8.0F * rtb_Sin + rtb_Kalphabeta0_d_idx_1);\r\n\r\n    /* Outputs for Atomic SubSystem: 'Two inputs CRL' (':2068:778') */\r\n    /* Switch: 'Switch' (':2068:755') incorporates:\r\n     *  Product: 'dcos' (':2068:431')\r\n     *  Product: 'dsin' (':2068:435')\r\n     *  Product: 'qcos' (':2068:434')\r\n     *  Product: 'qsin' (':2068:433')\r\n     *  Sum: 'sum_alpha' (':2068:432')\r\n     *  Sum: 'sum_beta' (':2068:436')\r\n     *  UnaryMinus: 'Unary_Minus' (':2068:756')\r\n     */\r\n    rtb_Switch1_idx_0 = rtb_vd_park_l * *rtu_cos + rtb_vd_ctrl * *rtu_sine;\r\n    rtb_Switch1_idx_1 = -(rtb_vd_ctrl * *rtu_cos - rtb_vd_park_l * *rtu_sine);\r\n\r\n    /* Outputs for Atomic SubSystem: 'atan2' (':2028') */\r\n    /* Trigonometry: 'Atan2' (':2028:325') incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: 'a16' (':2068:761')\r\n     */\r\n    if ((rtb_Switch1_idx_0 == 0.0F) && (rtb_Switch1_idx_1 == 0.0F)) {\r\n      rtb_Gain = 0.0F;\r\n    } else {\r\n      isReciprocal = false;\r\n      if (rtb_Switch1_idx_1 < 0.0F) {\r\n        if (rtb_Switch1_idx_0 < 0.0F) {\r\n          quadrantInfo = 3U;\r\n        } else {\r\n          quadrantInfo = 4U;\r\n        }\r\n      } else if (rtb_Switch1_idx_0 < 0.0F) {\r\n        quadrantInfo = 2U;\r\n      } else {\r\n        quadrantInfo = 1U;\r\n      }\r\n\r\n      rtb_Kalphabeta0_idx_0 = (float)fabs(rtb_Switch1_idx_0);\r\n      rtb_Gain = (float)fabs(rtb_Switch1_idx_1);\r\n      if (rtb_Gain > rtb_Kalphabeta0_idx_0) {\r\n        rtb_Sin = rtb_Gain;\r\n        rtb_Gain = rtb_Kalphabeta0_idx_0;\r\n        isReciprocal = true;\r\n      } else {\r\n        rtb_Sin = rtb_Kalphabeta0_idx_0;\r\n      }\r\n\r\n      bpIdx = plook_u32ff_evenc(rtb_Gain / rtb_Sin, 0.0F, 0.0666666701F, 15U,\r\n        &rtb_Kalphabeta0_idx_0);\r\n      rtb_Gain = intrp1d_fu32fl(bpIdx, rtb_Kalphabeta0_idx_0, tableData_c);\r\n      if (isReciprocal) {\r\n        rtb_Gain = 0.25F - rtb_Gain;\r\n      }\r\n\r\n      if (quadrantInfo == 2) {\r\n        rtb_Gain = 0.5F - rtb_Gain;\r\n      } else if (quadrantInfo == 3) {\r\n        rtb_Gain -= 0.5F;\r\n      } else if (quadrantInfo == 4) {\r\n        rtb_Gain = -rtb_Gain;\r\n      }\r\n    }\r\n\r\n    /* End of Outputs for SubSystem: 'Two inputs CRL' (':2068:778') */\r\n    rtb_Gain *= 6.28318548F;\r\n\r\n    /* End of Trigonometry: 'Atan2' (':2028:325') */\r\n\r\n    /* MATLAB Function: 'mod_fcn' (':2052') incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: 'a16' (':2028:305')\r\n     */\r\n    if (rtb_Gain == 0.0F) {\r\n      rtb_vd_park_l = 0.0F;\r\n    } else {\r\n      rtb_vd_park_l = (float)fmod(rtb_Gain, 6.2831854820251465);\r\n      isReciprocal = (rtb_vd_park_l == 0.0F);\r\n      if (!isReciprocal) {\r\n        rtb_Gain = (float)fabs(rtb_Gain / 6.28318548F);\r\n        isReciprocal = ((float)fabs(rtb_Gain - (float)floor(rtb_Gain + 0.5F)) <=\r\n                        1.1920929E-7F * rtb_Gain);\r\n      }\r\n\r\n      if (isReciprocal) {\r\n        rtb_vd_park_l = 0.0F;\r\n      } else if (rtb_vd_park_l < 0.0F) {\r\n        rtb_vd_park_l += 6.28318548F;\r\n      }\r\n    }\r\n\r\n    /* End of MATLAB Function: 'mod_fcn' (':2052') */\r\n    /* End of Outputs for SubSystem: 'atan2' (':2028') */\r\n\r\n    /* MATLAB Function: 'sector_selection' (':1809') */\r\n    if ((rtb_vd_park_l >= 0.0F) && (rtb_vd_park_l < 1.04719758F)) {\r\n      ctrl_ez_DW.y = 0;\r\n      isReciprocal = true;\r\n    } else if ((rtb_vd_park_l >= 1.04719758F) && (rtb_vd_park_l < 2.09439516F))\r\n    {\r\n      ctrl_ez_DW.y = 1;\r\n      isReciprocal = false;\r\n    } else if ((rtb_vd_park_l >= 2.09439516F) && (rtb_vd_park_l < 3.14159274F))\r\n    {\r\n      ctrl_ez_DW.y = 2;\r\n      isReciprocal = true;\r\n    } else if ((rtb_vd_park_l >= 3.14159274F) && (rtb_vd_park_l < 4.18879032F))\r\n    {\r\n      ctrl_ez_DW.y = 3;\r\n      isReciprocal = false;\r\n    } else if ((rtb_vd_park_l >= 4.18879032F) && (rtb_vd_park_l < 5.23598766F))\r\n    {\r\n      ctrl_ez_DW.y = 4;\r\n      isReciprocal = true;\r\n    } else if ((rtb_vd_park_l >= 5.23598766F) && (rtb_vd_park_l < 6.28318548F))\r\n    {\r\n      ctrl_ez_DW.y = 5;\r\n      isReciprocal = false;\r\n    } else {\r\n      ctrl_ez_DW.y = 1;\r\n      isReciprocal = false;\r\n    }\r\n\r\n    rtb_vd_ctrl = rtb_vd_park_l - (float)ctrl_ez_DW.y * 1.04719758F;\r\n\r\n    /* Outputs for Atomic SubSystem: 'Two inputs CRL' (':2068:778') */\r\n    /* Sqrt: 'Sqrt' (':2027') incorporates:\r\n     *  AlgorithmDescriptorDelegate generated from: 'a16' (':2068:761')\r\n     *  Product: 'Product' (':2024')\r\n     *  Product: 'Product1' (':2025')\r\n     *  Sum: 'Add' (':2026')\r\n     */\r\n    rtb_Sin = (float)sqrt(rtb_Switch1_idx_0 * rtb_Switch1_idx_0 +\r\n                          rtb_Switch1_idx_1 * rtb_Switch1_idx_1);\r\n\r\n    /* End of Outputs for SubSystem: 'Two inputs CRL' (':2068:778') */\r\n\r\n    /* Sum: 'Add1' (':1981:360') incorporates:\r\n     *  Product: 'Product' (':1981:364')\r\n     *  Product: 'Product1' (':1981:365')\r\n     *  UnitDelay: 'Unit Delay' (':1981:366')\r\n     */\r\n    rtb_vd_park_l = *rtu_ov_out * 0.01F + 0.99F * ctrl_ez_DW.UnitDelay_DSTATE_f;\r\n\r\n    /* Saturate: 'Saturation3' (':1853') */\r\n    if (rtb_vd_park_l > 2000.0F) {\r\n      rtb_Gain = 2000.0F;\r\n    } else if (rtb_vd_park_l < 100.0F) {\r\n      rtb_Gain = 100.0F;\r\n    } else {\r\n      rtb_Gain = rtb_vd_park_l;\r\n    }\r\n\r\n    /* End of Saturate: 'Saturation3' (':1853') */\r\n\r\n    /* Product: 'Divide1' (':1795') incorporates:\r\n     *  Constant: 'Constant' (':1789')\r\n     *  Constant: 'Constant1' (':1792')\r\n     *  Sum: 'Add1' (':1790')\r\n     *  Trigonometry: 'Sin' (':2063')\r\n     */\r\n    rtb_Switch1_idx_0 = (float)sin(1.04719758F - rtb_vd_ctrl) * rtb_Sin *\r\n      1.73205078F / rtb_Gain;\r\n\r\n    /* Saturate: 'Saturation' (':1823') */\r\n    if (rtb_Switch1_idx_0 > 1.0F) {\r\n      rtb_Switch1_idx_0 = 1.0F;\r\n    } else if (rtb_Switch1_idx_0 < 0.0F) {\r\n      rtb_Switch1_idx_0 = 0.0F;\r\n    }\r\n\r\n    /* Product: 'Divide1' (':1795') incorporates:\r\n     *  Constant: 'Constant1' (':1792')\r\n     *  Trigonometry: 'Sin1' (':2064')\r\n     */\r\n    rtb_Switch1_idx_1 = (float)sin(rtb_vd_ctrl) * rtb_Sin * 1.73205078F /\r\n      rtb_Gain;\r\n\r\n    /* Saturate: 'Saturation' (':1823') */\r\n    if (rtb_Switch1_idx_1 > 1.0F) {\r\n      rtb_Switch1_idx_1 = 1.0F;\r\n    } else if (rtb_Switch1_idx_1 < 0.0F) {\r\n      rtb_Switch1_idx_1 = 0.0F;\r\n    }\r\n\r\n    /* Sum: 'Sum of Elements' (':1941') */\r\n    rtb_Sin = rtb_Switch1_idx_0 + rtb_Switch1_idx_1;\r\n\r\n    /* Switch: 'Switch' (':1877') */\r\n    if (isReciprocal) {\r\n      rtb_Kalphabeta0_idx_0 = rtb_Switch1_idx_0;\r\n      rtb_Switch1_idx_0 = rtb_Switch1_idx_1;\r\n    } else {\r\n      rtb_Kalphabeta0_idx_0 = rtb_Switch1_idx_1;\r\n    }\r\n\r\n    /* End of Switch: 'Switch' (':1877') */\r\n\r\n    /* Saturate: 'Saturation2' (':1825') incorporates:\r\n     *  Constant: 'Constant2' (':1797')\r\n     *  Sum: 'Add2' (':1799')\r\n     */\r\n    if (1.0F - rtb_Sin < 0.0F) {\r\n      rtb_Gain = 0.0F;\r\n    } else {\r\n      rtb_Gain = 1.0F - rtb_Sin;\r\n    }\r\n\r\n    /* Gain: 'Gain' (':1802') incorporates:\r\n     *  Saturate: 'Saturation2' (':1825')\r\n     */\r\n    rtb_Gain *= 0.5F;\r\n\r\n    /* Sum: 'Add3' (':1803') */\r\n    rtb_Sin = rtb_Switch1_idx_0 + rtb_Gain;\r\n\r\n    /* Saturate: 'Saturation4' (':1872') */\r\n    if (rtb_Sin > 1.0F) {\r\n      rtb_Sin = 1.0F;\r\n    }\r\n\r\n    /* End of Saturate: 'Saturation4' (':1872') */\r\n\r\n    /* LookupNDDirect: 'Direct Lookup Table (n-D)' (':1813') incorporates:\r\n     *  MATLAB Function: 'sector_selection' (':1809')\r\n     *\r\n     * About 'Direct Lookup Table (n-D)' (':1813'):\r\n     *  2-dimensional Direct Look-Up returning a Column,\r\n     *  which is contiguous for column-major array\r\n     *     Remove protection against out-of-range input in generated code: 'on'\r\n     *   */\r\n    ctrl_ez_DW.y *= 3;\r\n\r\n    /* Sum: 'Add4' (':1804') */\r\n    rtb_Switch1_idx_0 = rtb_Kalphabeta0_idx_0 + rtb_Sin;\r\n\r\n    /* SignalConversion generated from: 'Selector' (':1810') */\r\n    ctrl_ez_DW.rtb_Gain_m[0] = rtb_Gain;\r\n    ctrl_ez_DW.rtb_Gain_m[1] = rtb_Sin;\r\n\r\n    /* Saturate: 'Saturation5' (':1873') */\r\n    if (rtb_Switch1_idx_0 > 1.0F) {\r\n      /* SignalConversion generated from: 'Selector' (':1810') */\r\n      ctrl_ez_DW.rtb_Gain_m[2] = 1.0F;\r\n    } else {\r\n      /* SignalConversion generated from: 'Selector' (':1810') */\r\n      ctrl_ez_DW.rtb_Gain_m[2] = rtb_Switch1_idx_0;\r\n    }\r\n\r\n    /* End of Saturate: 'Saturation5' (':1873') */\r\n\r\n    /* Saturate: 'Saturation1' (':1937') incorporates:\r\n     *  LookupNDDirect: 'Direct Lookup Table (n-D)' (':1813')\r\n     *  Selector: 'Selector' (':1810')\r\n     *\r\n     * About 'Direct Lookup Table (n-D)' (':1813'):\r\n     *  2-dimensional Direct Look-Up returning a Column,\r\n     *  which is contiguous for column-major array\r\n     *     Remove protection against out-of-range input in generated code: 'on'\r\n     *   */\r\n    rtb_Switch1_idx_0 = ctrl_ez_DW.rtb_Gain_m[(int32_t)\r\n      rtCP_DirectLookupTablenD_table[ctrl_ez_DW.y] - 1];\r\n    if (rtb_Switch1_idx_0 > 0.97F) {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[0] = 0.97F;\r\n    } else if (rtb_Switch1_idx_0 < 0.03F) {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[0] = 0.03F;\r\n    } else {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[0] = rtb_Switch1_idx_0;\r\n    }\r\n\r\n    rtb_Switch1_idx_0 = ctrl_ez_DW.rtb_Gain_m[(int32_t)\r\n      rtCP_DirectLookupTablenD_table[ctrl_ez_DW.y + 1] - 1];\r\n    if (rtb_Switch1_idx_0 > 0.97F) {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[1] = 0.97F;\r\n    } else if (rtb_Switch1_idx_0 < 0.03F) {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[1] = 0.03F;\r\n    } else {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[1] = rtb_Switch1_idx_0;\r\n    }\r\n\r\n    rtb_Switch1_idx_0 = ctrl_ez_DW.rtb_Gain_m[(int32_t)\r\n      rtCP_DirectLookupTablenD_table[ctrl_ez_DW.y + 2] - 1];\r\n    if (rtb_Switch1_idx_0 > 0.97F) {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[2] = 0.97F;\r\n    } else if (rtb_Switch1_idx_0 < 0.03F) {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[2] = 0.03F;\r\n    } else {\r\n      /* Saturate: 'Saturation1' (':1937') */\r\n      ctrl_ez_DW.T2[2] = rtb_Switch1_idx_0;\r\n    }\r\n\r\n    /* End of Saturate: 'Saturation1' (':1937') */\r\n\r\n    /* SignalConversion generated from: 'Qb' (':1369') */\r\n    *rty_Qb = ctrl_ez_DW.T2[1];\r\n\r\n    /* SignalConversion generated from: 'Qc' (':1370') */\r\n    *rty_Qc = ctrl_ez_DW.T2[2];\r\n\r\n    /* Update for DiscreteIntegrator: 'Accumulator' (':1374') */\r\n    if (ctrl_ez_DW.Accumulator_DSTATE > 50.0F) {\r\n      ctrl_ez_DW.Accumulator_DSTATE = 50.0F;\r\n    } else if (ctrl_ez_DW.Accumulator_DSTATE < -50.0F) {\r\n      ctrl_ez_DW.Accumulator_DSTATE = -50.0F;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: 'Accumulator' (':1374') */\r\n\r\n    /* Update for Delay: 'Delay' (':1933') */\r\n    ctrl_ez_DW.Delay_DSTATE[0] = ctrl_ez_DW.Delay_DSTATE[1];\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1385') */\r\n    if (rtb_Kalphabeta0_d_idx_0 == 100.0F) {\r\n      /* Update for Delay: 'Delay' (':1933') */\r\n      ctrl_ez_DW.Delay_DSTATE[1] = 1.0F;\r\n    } else if (rtb_Kalphabeta0_d_idx_0 == -100.0F) {\r\n      /* Update for Delay: 'Delay' (':1933') */\r\n      ctrl_ez_DW.Delay_DSTATE[1] = -1.0F;\r\n    } else {\r\n      /* Update for Delay: 'Delay' (':1933') */\r\n      ctrl_ez_DW.Delay_DSTATE[1] = 0.0F;\r\n    }\r\n\r\n    /* Update for DiscreteIntegrator: 'Accumulator' (':1385') */\r\n    ctrl_ez_DW.Accumulator_DSTATE_a = rtb_Kalphabeta0_d_idx_0;\r\n\r\n    /* DiscreteIntegrator: 'Accumulator' (':1396') */\r\n    if (rtb_Kalphabeta0_d_idx_1 == 500.0F) {\r\n      /* Update for Delay: 'Delay1' (':1399') */\r\n      ctrl_ez_DW.Delay1_DSTATE = 1.0F;\r\n    } else if (rtb_Kalphabeta0_d_idx_1 == -500.0F) {\r\n      /* Update for Delay: 'Delay1' (':1399') */\r\n      ctrl_ez_DW.Delay1_DSTATE = -1.0F;\r\n    } else {\r\n      /* Update for Delay: 'Delay1' (':1399') */\r\n      ctrl_ez_DW.Delay1_DSTATE = 0.0F;\r\n    }\r\n\r\n    /* Update for DiscreteIntegrator: 'Accumulator' (':1396') */\r\n    ctrl_ez_DW.Accumulator_DSTATE_p = rtb_Kalphabeta0_d_idx_1;\r\n    if (rtb_vq_park_o > 0.0F) {\r\n      ctrl_ez_DW.Accumulator_PrevResetState = 1;\r\n    } else if (rtb_vq_park_o < 0.0F) {\r\n      ctrl_ez_DW.Accumulator_PrevResetState = -1;\r\n    } else if (rtb_vq_park_o == 0.0F) {\r\n      ctrl_ez_DW.Accumulator_PrevResetState = 0;\r\n    } else {\r\n      ctrl_ez_DW.Accumulator_PrevResetState = 2;\r\n    }\r\n\r\n    /* End of Update for DiscreteIntegrator: 'Accumulator' (':1396') */\r\n\r\n    /* Update for UnitDelay: 'Unit Delay' (':1981:366') */\r\n    ctrl_ez_DW.UnitDelay_DSTATE_f = rtb_vd_park_l;\r\n\r\n    /* Update for Delay: 'Delay1' (':1377') */\r\n    ctrl_ez_DW.Delay1_DSTATE_e = (float)rtb_Accumulator_o2;\r\n  }\r\n\r\n  /* End of Logic: 'NOT' (':591') */\r\n  /* End of Outputs for SubSystem: 'ctrl' (':1270') */\r\n\r\n  /* SignalConversion generated from: 'Qa' (':570') */\r\n  *rty_Qa = ctrl_ez_DW.T2[0];\r\n\r\n  /* Update for UnitDelay: 'Unit Delay' (':831:366') */\r\n  ctrl_ez_DW.UnitDelay_DSTATE[0] = rtb_Add1_idx_0;\r\n  ctrl_ez_DW.UnitDelay_DSTATE[1] = rtb_Add1_idx_1;\r\n  ctrl_ez_DW.UnitDelay_DSTATE[2] = rtb_Add1_idx_2;\r\n\r\n  /* Update for Memory: 'Memory' (':561') */\r\n  ctrl_ez_DW.Memory_PreviousInput = *rty_lock;\r\n\r\n  /* End of Outputs for RootInportFunctionCallGenerator generated from: 'trigger_ctrl_ez' (':21') */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ctrl_ez.h","type":"header","group":"model","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_ref\\ctrl_ez","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ctrl_ez.h\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.631\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 14:19:19 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ctrl_ez_h_\r\n#define ctrl_ez_h_\r\n#ifndef ctrl_ez_COMMON_INCLUDES_\r\n#define ctrl_ez_COMMON_INCLUDES_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#endif                                 /* ctrl_ez_COMMON_INCLUDES_ */\r\n\r\n#include \"ctrl_ez_types.h\"\r\n\r\n/*\r\n * Exported States\r\n *\r\n * Note: Exported states are block states with an exported global\r\n * storage class designation.  Code generation will declare the memory for these\r\n * states and exports their symbols.\r\n *\r\n */\r\nextern float filter_IA;                /* 'Data Store Memory' (':2047') */\r\nextern float filter_IB;                /* 'Data Store Memory1' (':2049') */\r\nextern float filter_IC;                /* 'Data Store Memory2' (':2051') */\r\nextern void ctrl_ez_Init(float *rty_Qa);\r\nextern void ctrl_ez_trigger_ctrl_ez(const float *rtu_ia, const float *rtu_ib,\r\n  const float *rtu_ic, const float *rtu_ov_out, const float *rtu_w, const float *\r\n  rtu_lock_pll, const float *rtu_sine, const float *rtu_cos, const float *rtu_va,\r\n  const float *rtu_vc, const float *rtu_vb, float *rty_Qa, float *rty_Qb, float *\r\n  rty_Qc, bool *rty_lock);\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block 'Delay' (':869') : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block 'Gain' (':1968') : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block 'indexing' (':2053:76:605') : Unused code path elimination\r\n * Block 'offset' (':2053:76:657') : Unused code path elimination\r\n * Block 'sine_table_values' (':2053:76:549') : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block 'indexing' (':2056:76:605') : Unused code path elimination\r\n * Block 'offset' (':2056:76:657') : Unused code path elimination\r\n * Block 'sine_table_values' (':2056:76:549') : Unused code path elimination\r\n * Block 'Bias' (':1856') : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block 'convert_pu' (':2053:76:652') : Eliminated nontunable gain of 1\r\n * Block 'convert_pu' (':2056:76:652') : Eliminated nontunable gain of 1\r\n * Block synthesized block : Eliminate redundant data type conversion\r\n * Block 'Offset' (':2068:753') : Unused code path elimination\r\n * Block 'One' (':1981:479') : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block 'UseInputPort' (':1981:484') : Unused code path elimination\r\n * Block 'a' (':1981:844') : Unused code path elimination\r\n * Block 'One' (':831:479') : Unused code path elimination\r\n * Block synthesized block : Unused code path elimination\r\n * Block 'UseInputPort' (':831:484') : Unused code path elimination\r\n * Block 'a' (':831:844') : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is 'block_name' ('SID'), where block_name is the name of the block\r\n * and SID is the Simulink identifier of the block without the model name.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system(':3')    - opens block with Simulink identifier 'model:3'\r\n */\r\n\r\n/*-\r\n * Requirements for model: ctrl_ez\r\n\r\n\r\n */\r\n#endif                                 /* ctrl_ez_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ctrl_ez_private.h","type":"header","group":"model","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_ref\\ctrl_ez","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ctrl_ez_private.h\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.631\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 14:19:19 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ctrl_ez_private_h_\r\n#define ctrl_ez_private_h_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#include \"ctrl_ez_types.h\"\r\n\r\n/* Block signals and states (default storage) for model 'ctrl_ez' */\r\ntypedef struct {\r\n  float T2[3];                         /* 'Saturation1' (':1937') */\r\n  float UnitDelay_DSTATE[3];           /* 'Unit Delay' (':831:366') */\r\n  float Delay_DSTATE[2];               /* 'Delay' (':1933') */\r\n  float rtb_Gain_m[3];\r\n  float Accumulator_DSTATE;            /* 'Accumulator' (':1374') */\r\n  float Accumulator_DSTATE_a;          /* 'Accumulator' (':1385') */\r\n  float Delay1_DSTATE;                 /* 'Delay1' (':1399') */\r\n  float Accumulator_DSTATE_p;          /* 'Accumulator' (':1396') */\r\n  float UnitDelay_DSTATE_f;            /* 'Unit Delay' (':1981:366') */\r\n  float Delay1_DSTATE_e;               /* 'Delay1' (':1377') */\r\n  int32_t y;\r\n  int8_t Accumulator_PrevResetState;   /* 'Accumulator' (':1396') */\r\n  bool Memory_PreviousInput;           /* 'Memory' (':561') */\r\n} DW_ctrl_ez_f_T;\r\n\r\nextern const float rtCP_pooled_c9mIltOBYHuW[18];\r\n\r\n#define rtCP_DirectLookupTablenD_table rtCP_pooled_c9mIltOBYHuW  /* Computed Parameter: rtCP_DirectLookupTablenD_table\r\n                                                                  * Referenced by: 'Direct Lookup Table (n-D)' (':1813')\r\n                                                                  */\r\n\r\n/* Block states (default storage) */\r\nextern DW_ctrl_ez_f_T ctrl_ez_DW;\r\n\r\n#endif                                 /* ctrl_ez_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ctrl_ez_types.h","type":"header","group":"model","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_ref\\ctrl_ez","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ctrl_ez_types.h\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.631\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 14:19:19 2025\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef ctrl_ez_types_h_\r\n#define ctrl_ez_types_h_\r\n#endif                                 /* ctrl_ez_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"const_params.c","type":"source","group":"sharedutility","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_shared","tag":"","groupDisplay":"Shared files","code":"/*\r\n * const_params.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"ctrl_ez\".\r\n *\r\n * Model version              : 1.628\r\n * Simulink Coder version : 24.2 (R2024b) 21-Jun-2024\r\n * C source code generated on : Thu May  1 12:13:47 2025\r\n */\r\n#include <stdbool.h>\n#include <stdint.h>\n\nextern const float rtCP_pooled_c9mIltOBYHuW[18];\nconst float rtCP_pooled_c9mIltOBYHuW[18] = {   3.0F, 2.0F, 1.0F, 2.0F, 3.0F, 1.0F, 1.0F, 3.0F, 2.0F, 1.0F, 2.0F, 3.0F, 2.0F, 1.0F, 3.0F, 3.0F, 1.0F, 2.0F } ;\n"},{"name":"intrp1d_fu32fl.c","type":"source","group":"sharedutility","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_shared","tag":"","groupDisplay":"Shared files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: intrp1d_fu32fl.c\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.628\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 12:13:47 2025\r\n */\r\n\r\n#include \"intrp1d_fu32fl.h\"\r\n#include <stdint.h>\r\n\r\nfloat intrp1d_fu32fl(uint32_t bpIndex, float frac, const float table[])\r\n{\r\n  float yL_0d0;\r\n\r\n  /* Column-major Interpolation 1-D\r\n     Interpolation method: 'Linear point-slope'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Overflow mode: 'wrapping'\r\n   */\r\n  yL_0d0 = table[bpIndex];\r\n  return (table[bpIndex + 1U] - yL_0d0) * frac + yL_0d0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"intrp1d_fu32fl.h","type":"header","group":"sharedutility","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_shared","tag":"","groupDisplay":"Shared files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: intrp1d_fu32fl.h\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.628\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 12:13:47 2025\r\n */\r\n\r\n#ifndef intrp1d_fu32fl_h_\r\n#define intrp1d_fu32fl_h_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n\r\nextern float intrp1d_fu32fl(uint32_t bpIndex, float frac, const float table[]);\r\n\r\n#endif                                 /* intrp1d_fu32fl_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"plook_u32ff_evenc.c","type":"source","group":"sharedutility","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_shared","tag":"","groupDisplay":"Shared files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: plook_u32ff_evenc.c\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.628\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 12:13:47 2025\r\n */\r\n\r\n#include \"plook_u32ff_evenc.h\"\r\n#include <stdint.h>\r\n\r\nuint32_t plook_u32ff_evenc(float u, float bp0, float bpSpace, uint32_t maxIndex,\r\n  float *fraction)\r\n{\r\n  float fbpIndex;\r\n  float invSpc;\r\n  uint32_t bpIndex;\r\n\r\n  /* Prelookup - Index and Fraction\r\n     Index Search method: 'even'\r\n     Extrapolation method: 'Clip'\r\n     Use previous index: 'off'\r\n     Use last breakpoint for index at or above upper limit: 'off'\r\n     Remove protection against out-of-range input in generated code: 'off'\r\n   */\r\n  if (u <= bp0) {\r\n    bpIndex = 0U;\r\n    *fraction = 0.0F;\r\n  } else {\r\n    invSpc = 1.0F / bpSpace;\r\n    fbpIndex = (u - bp0) * invSpc;\r\n    if (fbpIndex < maxIndex) {\r\n      bpIndex = (uint32_t)fbpIndex;\r\n      *fraction = (u - ((float)(uint32_t)fbpIndex * bpSpace + bp0)) * invSpc;\r\n    } else {\r\n      bpIndex = maxIndex - 1U;\r\n      *fraction = 1.0F;\r\n    }\r\n  }\r\n\r\n  return bpIndex;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"plook_u32ff_evenc.h","type":"header","group":"sharedutility","path":"C:\\Users\\Angel\\Desktop\\hil\\pfc3ph\\stf7\\matlab\\ctrl_ez\\ARMCortex-M\\_shared","tag":"","groupDisplay":"Shared files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: plook_u32ff_evenc.h\r\n *\r\n * Code generated for Simulink model 'ctrl_ez'.\r\n *\r\n * Model version                  : 1.628\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Thu May  1 12:13:47 2025\r\n */\r\n\r\n#ifndef plook_u32ff_evenc_h_\r\n#define plook_u32ff_evenc_h_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n\r\nextern uint32_t plook_u32ff_evenc(float u, float bp0, float bpSpace, uint32_t\r\n  maxIndex, float *fraction);\r\n\r\n#endif                                 /* plook_u32ff_evenc_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};