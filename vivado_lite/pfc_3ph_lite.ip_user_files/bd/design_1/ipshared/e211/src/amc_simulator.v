// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\amc_simulator\amc_simulator.v
// Created: 2025-04-21 11:28:28
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1e-08
// Target subsystem base rate: 1e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pwm                           ce_out        1e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: amc_simulator
// Source Path: amc_simulator/amc_simulator
// Hierarchy Level: 0
// Model version: 3.14
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module amc_simulator
          (clk,
           rst,
           clk_enable,
           v,
           ce_out,
           pwm);


  input   clk;
  input   rst;
  input   clk_enable;
  input   [15:0] v;  // uint16
  output  ce_out;
  output  pwm;


  wire enb;
  wire [15:0] cnt;  // uint16
  wire [15:0] const_50_out1;  // uint16
  wire [15:0] Constant_out1;  // uint16
  wire hit_cnt;
  reg [15:0] Delay_bypass_delay;  // ufix16
  reg [15:0] Delay_reg;  // ufix16
  wire [15:0] delay_out;  // uint16
  wire [15:0] dc_vb;  // uint16


  cnter u_cnter (.clk(clk),
                 .rst(rst),
                 .enb(clk_enable),
                 .y(cnt)  // uint16
                 );
  assign const_50_out1 = 16'b0000000110011001;
  assign Constant_out1 = 16'b0001001101100000;
  assign hit_cnt = cnt == Constant_out1;
  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay_process
      if (rst == 1'b1) begin
        Delay_bypass_delay <= 16'b0000000000000000;
        Delay_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb && hit_cnt) begin
          Delay_bypass_delay <= Delay_reg;
          Delay_reg <= v;
        end
      end
    end

  assign delay_out = (hit_cnt == 1'b1 ? Delay_reg :
              Delay_bypass_delay);
  assign dc_vb = const_50_out1 + delay_out;
  assign pwm = cnt <= dc_vb;
  assign ce_out = clk_enable;

endmodule  // amc_simulator

