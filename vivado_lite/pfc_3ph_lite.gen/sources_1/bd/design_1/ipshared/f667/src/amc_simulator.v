// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\amc_simulator\amc_simulator.v
// Created: 2025-05-11 19:37:22
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 3.33333e-08
// Target subsystem base rate: 3.33333e-08
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        3.33333e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// pwm                           ce_out        3.33333e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: amc_simulator
// Source Path: amc_simulator/amc_simulator
// Hierarchy Level: 0
// Model version: 3.48
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module amc_simulator
          (clk,
           rst,
           clk_enable,
           v,
           ce_out,
           pwm);


  input   clk;
  input   rst;
  input   clk_enable;
  input   [15:0] v;  // uint16
  output  ce_out;
  output  pwm;


  wire enb;
  wire [15:0] Constant1_out1;  // uint16
  reg [15:0] Delay2_out1;  // uint16
  wire [15:0] Constant_out1;  // uint16
  wire [15:0] Max_stage1_val;  // uint16
  reg [15:0] Delay4_out1;  // uint16
  wire [15:0] Min_stage1_val;  // uint16
  wire [15:0] v_1;  // uint16
  reg [15:0] Delay3_out1;  // uint16
  wire pwm_1;
  reg  Delay1_out1;


  assign Constant1_out1 = 16'b0000111001100110;
  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay2_process
      if (rst == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000001;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= v;
        end
      end
    end
  assign Constant_out1 = 16'b0000000110011001;
  // ---- Tree max implementation ----
  assign Max_stage1_val = (Delay2_out1 >= Constant_out1 ? Delay2_out1 :
              Constant_out1);
  always @(posedge clk)
    begin : Delay4_process
      if (rst == 1'b1) begin
        Delay4_out1 <= 16'b0000000110011001;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Max_stage1_val;
        end
      end
    end
  // ---- Tree min implementation ----
  assign Min_stage1_val = (Constant1_out1 <= Delay4_out1 ? Constant1_out1 :
              Delay4_out1);
  assign v_1 = Min_stage1_val;
  always @(posedge clk)
    begin : Delay3_process
      if (rst == 1'b1) begin
        Delay3_out1 <= 16'b0000000110011001;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= v_1;
        end
      end
    end
  hope_amc u_hope_amc (.clk(clk),
                       .rst(rst),
                       .enb(clk_enable),
                       .v(Delay3_out1),  // uint16
                       .pwm(pwm_1)
                       );
  always @(posedge clk)
    begin : Delay1_process
      if (rst == 1'b1) begin
        Delay1_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= pwm_1;
        end
      end
    end
  assign pwm = Delay1_out1;

  assign ce_out = clk_enable;

endmodule  // amc_simulator

