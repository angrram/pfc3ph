// -------------------------------------------------------------
// 
// File Name: .\hdlsrc\amc_simulator\hope_amc.v
// Created: 2025-05-12 19:55:34
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: hope_amc
// Source Path: amc_simulator/amc_simulator/hope_amc
// Hierarchy Level: 1
// Model version: 3.52
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hope_amc
          (clk,
           rst,
           enb,
           v,
           pwm);

  // Default encoded enumeration values for type state_type_is_hope_amc
  parameter state_type_is_hope_amc_IN_NO_ACTIVE_CHILD = 2'd0, state_type_is_hope_amc_IN_inc_cnt = 2'd1, state_type_is_hope_amc_IN_init = 2'd2;

  input   clk;
  input   rst;
  input   enb;
  input   [15:0] v;  // uint16
  output  pwm;


  reg [15:0] v_reg;  // uint16
  reg [15:0] cnt;  // uint16
  reg [7:0] is_active_hope_amc;  // uint8
  reg [1:0] is_hope_amc;  // uint8
  reg  pwm_reg;
  reg [15:0] v_reg_next;  // uint16
  reg [15:0] cnt_next;  // uint16
  reg [7:0] is_active_hope_amc_next;  // uint8
  reg [1:0] is_hope_amc_next;  // enum type state_type_is_hope_amc (3 enums)
  reg  pwm_reg_next;
  reg  guard1;
  reg  guard2;
  reg [15:0] cnt_temp;  // uint16
  reg [16:0] add_temp;  // ufix17
  reg [16:0] t_0;  // ufix17


  always @(posedge clk)
    begin : hope_amc_1_process
      if (rst == 1'b1) begin
        pwm_reg <= 1'b0;
        v_reg <= 16'd0;
        cnt <= 16'd0;
        is_active_hope_amc <= 8'd0;
        is_hope_amc <= state_type_is_hope_amc_IN_NO_ACTIVE_CHILD;
      end
      else begin
        if (enb) begin
          v_reg <= v_reg_next;
          cnt <= cnt_next;
          is_active_hope_amc <= is_active_hope_amc_next;
          is_hope_amc <= is_hope_amc_next;
          pwm_reg <= pwm_reg_next;
        end
      end
    end

  always @(cnt, is_active_hope_amc, is_hope_amc, pwm_reg, v, v_reg) begin
    guard1 = 1'b0;
    guard2 = 1'b0;
    add_temp = 17'b00000000000000000;
    t_0 = 17'b00000000000000000;
    cnt_temp = cnt;
    pwm_reg_next = pwm_reg;
    v_reg_next = v_reg;
    is_active_hope_amc_next = is_active_hope_amc;
    is_hope_amc_next = is_hope_amc;
    //Gateway: amc_simulator/hope_amc
    //During: amc_simulator/hope_amc
    if (is_active_hope_amc == 8'b00000000) begin
      //Entry: amc_simulator/hope_amc
      is_active_hope_amc_next = 8'd1;
      //Entry Internal: amc_simulator/hope_amc
      //Transition
      is_hope_amc_next = state_type_is_hope_amc_IN_init;
      //Entry 'init'
      v_reg_next = v;
      pwm_reg_next = 1'b0;
      cnt_temp = 16'd0;
    end
    else begin
      case ( is_hope_amc)
        state_type_is_hope_amc_IN_inc_cnt :
          begin
            //During 'inc_cnt'
            guard1 = 1'b0;
            guard2 = 1'b0;
            if (cnt < 16'b0001000000000000) begin
              //Transition
              if (v_reg > cnt) begin
                //Transition
                pwm_reg_next = 1'b1;
                guard2 = 1'b1;
              end
              else if (v_reg <= cnt) begin
                //Transition
                pwm_reg_next = 1'b0;
                //Transition
                //Transition
                guard2 = 1'b1;
              end
              else begin
                guard1 = 1'b1;
              end
            end
            else begin
              guard1 = 1'b1;
            end
            if (guard2) begin
              //Transition
              t_0 = {1'b0, cnt};
              add_temp = t_0 + 17'b00000000000000001;
              if (add_temp[16] != 1'b0) begin
                cnt_temp = 16'b1111111111111111;
              end
              else begin
                cnt_temp = add_temp[15:0];
              end
              //Transition
              //Transition
              is_hope_amc_next = state_type_is_hope_amc_IN_inc_cnt;
              //Entry 'inc_cnt'
            end
            if (guard1) begin
              if (cnt_temp >= 16'b0001000000000000) begin
                //Transition
                //Transition
                //Transition
                is_hope_amc_next = state_type_is_hope_amc_IN_init;
                //Entry 'init'
                v_reg_next = v;
                pwm_reg_next = 1'b0;
                cnt_temp = 16'd0;
              end
            end
          end
        default :
          begin
            //case IN_init:
            //During 'init'
            //Transition
            is_hope_amc_next = state_type_is_hope_amc_IN_inc_cnt;
            //Entry 'inc_cnt'
          end
      endcase
    end
    cnt_next = cnt_temp;
  end

  assign pwm = pwm_reg_next;
endmodule  // hope_amc

