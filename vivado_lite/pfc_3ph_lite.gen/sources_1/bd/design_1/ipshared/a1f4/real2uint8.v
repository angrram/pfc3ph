// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi_og\real2uint8.v
// Created: 2025-05-12 20:29:20
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: real2uint8
// Source Path: HDL_pfc_gold_fi_og/simscape_system/real2uint8
// Hierarchy Level: 1
// Model version: 1.239
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module real2uint8
          (clk,
           reset,
           enb_1_49_1,
           enb,
           enb_1_49_0,
           I_load,
           Vout,
           Ib,
           Ic,
           Ia,
           Vb,
           Vc,
           Va,
           O_Ia,
           O_Ib,
           O_Ic,
           O_Vc,
           O_Vb,
           O_Va,
           O_Vout,
           O_I_load,
           O_Ia1,
           O_Ib1,
           O_Ic1);


  input   clk;
  input   reset;
  input   enb_1_49_1;
  input   enb;
  input   enb_1_49_0;
  input   signed [17:0] I_load;  // sfix18_En6
  input   signed [17:0] Vout;  // sfix18_En6
  input   signed [17:0] Ib;  // sfix18_En6
  input   signed [17:0] Ic;  // sfix18_En6
  input   signed [17:0] Ia;  // sfix18_En6
  input   signed [17:0] Vb;  // sfix18_En6
  input   signed [17:0] Vc;  // sfix18_En6
  input   signed [17:0] Va;  // sfix18_En6
  output  [15:0] O_Ia;  // uint16
  output  [15:0] O_Ib;  // uint16
  output  [15:0] O_Ic;  // uint16
  output  [15:0] O_Vc;  // uint16
  output  [15:0] O_Vb;  // uint16
  output  [15:0] O_Va;  // uint16
  output  [15:0] O_Vout;  // uint16
  output  [15:0] O_I_load;  // uint16
  output  [15:0] O_Ia1;  // uint16
  output  [15:0] O_Ib1;  // uint16
  output  [15:0] O_Ic1;  // uint16


  wire signed [17:0] Constant_out1;  // sfix18_En6
  wire signed [17:0] Mux1_out1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Mux1_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Mux1_out1_2 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay3_out1 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Delay3_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay3_out1_2 [0:2];  // sfix18_En6 [3]
  wire signed [18:0] Add2_u;  // sfix19_En6
  wire signed [18:0] Add2_add_cast [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Add2_out1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Add2_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Add2_out1_2 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay2_out1 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Delay2_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay2_out1_2 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] kconst;  // sfix19_En12
  reg signed [18:0] kconst_1;  // sfix19_En12
  (* use_dsp  = "no" *)   wire signed [37:0] Gain2_out1 [0:2];  // sfix38_En18 [3]
  reg signed [37:0] crp_out_delay13_reg [0:5];  // sfix38 [6]
  reg signed [37:0] crp_out_delay13_reg_next [0:5];  // sfix38_En18 [6]
  reg signed [37:0] Gain2_out1_1 [0:2];  // sfix38_En18 [3]
  reg signed [37:0] Gain2_out1_2 [0:2];  // sfix38_En18 [3]
  reg signed [37:0] Delay_out1 [0:2];  // sfix38_En18 [3]
  wire signed [37:0] Delay_out1_1 [0:2];  // sfix38_En18 [3]
  wire [15:0] Data_Type_Conversion5_out1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion5_out1_1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion5_out1_2 [0:2];  // uint16 [3]
  reg [15:0] Delay1_out1 [0:2];  // uint16 [3]
  wire signed [17:0] Mux_out1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Mux_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay8_bypass_reg [0:2];  // sfix18 [3]
  reg signed [17:0] Delay8_bypass_reg_next [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay8_out1 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Delay8_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay8_out1_2 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Constant1_out1;  // sfix18_En6
  wire signed [18:0] Add3_v;  // sfix19_En6
  wire signed [18:0] Add3_add_cast [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Add3_out1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Add3_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Add3_out1_2 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay11_out1 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Delay11_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay11_out1_2 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] kconst_2;  // sfix19_En15
  reg signed [18:0] kconst_3;  // sfix19_En15
  (* use_dsp  = "no" *)   wire signed [37:0] Gain5_out1 [0:2];  // sfix38_En21 [3]
  reg signed [37:0] crp_out_delay14_reg [0:5];  // sfix38 [6]
  reg signed [37:0] crp_out_delay14_reg_next [0:5];  // sfix38_En21 [6]
  reg signed [37:0] Gain5_out1_1 [0:2];  // sfix38_En21 [3]
  reg signed [37:0] Gain5_out1_2 [0:2];  // sfix38_En21 [3]
  reg signed [37:0] Delay22_out1 [0:2];  // sfix38_En21 [3]
  wire signed [37:0] Delay22_out1_1 [0:2];  // sfix38_En21 [3]
  wire [15:0] Data_Type_Conversion2_out1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion2_out1_1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion2_out1_2 [0:2];  // uint16 [3]
  reg [15:0] Delay24_out1 [0:2];  // uint16 [3]
  wire signed [17:0] kconst_4;  // sfix18_En14
  reg signed [17:0] kconst_5;  // sfix18_En14
  reg signed [17:0] Vout_1;  // sfix18_En6
  reg signed [17:0] Vout_2;  // sfix18_En6
  reg signed [17:0] Delay9_out1;  // sfix18_En6
  wire signed [17:0] Delay9_out1_1;  // sfix18_En6
  reg signed [17:0] Delay9_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain4_out1;  // sfix36_En20
  reg signed [35:0] crp_out_delay5_reg [0:1];  // sfix36 [2]
  wire signed [35:0] crp_out_delay5_reg_next [0:1];  // sfix36_En20 [2]
  wire signed [35:0] Gain4_out1_1;  // sfix36_En20
  reg signed [35:0] Gain4_out1_2;  // sfix36_En20
  reg signed [35:0] Delay12_out1;  // sfix36_En20
  wire signed [35:0] Delay12_out1_1;  // sfix36_En20
  wire [15:0] Data_Type_Conversion3_out1;  // uint16
  reg [15:0] Data_Type_Conversion3_out1_1;  // uint16
  reg [15:0] Data_Type_Conversion3_out1_2;  // uint16
  reg [15:0] Delay25_out1;  // uint16
  wire signed [17:0] kconst_6;  // sfix18_En9
  reg signed [17:0] kconst_7;  // sfix18_En9
  reg signed [17:0] I_load_1;  // sfix18_En6
  reg signed [17:0] I_load_2;  // sfix18_En6
  reg signed [17:0] Delay6_out1;  // sfix18_En6
  wire signed [17:0] Delay6_out1_1;  // sfix18_En6
  reg signed [17:0] Delay6_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain3_out1;  // sfix36_En15
  reg signed [35:0] crp_out_delay4_reg [0:1];  // sfix36 [2]
  wire signed [35:0] crp_out_delay4_reg_next [0:1];  // sfix36_En15 [2]
  wire signed [35:0] Gain3_out1_1;  // sfix36_En15
  reg signed [35:0] Gain3_out1_2;  // sfix36_En15
  reg signed [35:0] Delay16_out1;  // sfix36_En15
  wire signed [35:0] Delay16_out1_1;  // sfix36_En15
  wire [15:0] Data_Type_Conversion1_out1;  // uint16
  reg [15:0] Data_Type_Conversion1_out1_1;  // uint16
  reg [15:0] Data_Type_Conversion1_out1_2;  // uint16
  reg [15:0] Delay29_out1;  // uint16
  reg signed [18:0] Delay2_out1_3 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] kconst_8;  // sfix19_En13
  reg signed [18:0] kconst_9;  // sfix19_En13
  (* use_dsp  = "no" *)   wire signed [37:0] Gain1_out1 [0:2];  // sfix38_En19 [3]
  reg signed [37:0] crp_out_delay15_reg [0:5];  // sfix38 [6]
  reg signed [37:0] crp_out_delay15_reg_next [0:5];  // sfix38_En19 [6]
  reg signed [37:0] Gain1_out1_1 [0:2];  // sfix38_En19 [3]
  reg signed [37:0] Gain1_out1_2 [0:2];  // sfix38_En19 [3]
  reg signed [37:0] Delay4_out1 [0:2];  // sfix38_En19 [3]
  wire signed [37:0] Delay4_out1_1 [0:2];  // sfix38_En19 [3]
  wire [15:0] Data_Type_Conversion4_out1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion4_out1_1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion4_out1_2 [0:2];  // uint16 [3]
  reg [15:0] Delay5_out1 [0:2];  // uint16 [3]
  reg signed [31:0] crp_out_delay_t_0_0;  // int32
  reg signed [31:0] crp_out_delay_t_1;  // int32
  reg signed [31:0] Delay31_output_t_0_0;  // int32
  reg signed [31:0] Delay31_output_t_1;  // int32
  reg signed [31:0] Delay3_t_0_0;  // int32
  reg signed [31:0] Delay3_t_1;  // int32
  reg signed [31:0] rd_4_t_0_0;  // int32
  reg signed [31:0] rd_4_t_1;  // int32
  reg signed [31:0] crp_out_delay10_t_0_0;  // int32
  reg signed [31:0] crp_out_delay10_t_1;  // int32
  reg signed [31:0] Delay2_output_t_0_0;  // int32
  reg signed [31:0] Delay2_output_t_1;  // int32
  reg signed [31:0] Delay21_t_0_0;  // int32
  reg signed [31:0] Delay21_t_1;  // int32
  reg signed [31:0] HwModeRegister4_t_0_0;  // int32
  reg signed [31:0] HwModeRegister4_t_1;  // int32
  reg signed [31:0] crp_out_delay13_t_0_0;  // int32
  reg signed [31:0] crp_out_delay13_t_0_1;  // int32
  reg signed [31:0] crp_out_delay13_t_1;  // int32
  reg signed [31:0] Delay_output_t_0_0;  // int32
  reg signed [31:0] Delay_output_t_1;  // int32
  reg signed [31:0] Delay7_t_0_0;  // int32
  reg signed [31:0] Delay7_t_1;  // int32
  reg signed [31:0] crp_out_delay3_t_0_0;  // int32
  reg signed [31:0] crp_out_delay3_t_1;  // int32
  reg signed [31:0] Delay1_output_t_0_0;  // int32
  reg signed [31:0] Delay1_output_t_1;  // int32
  reg signed [31:0] Delay11_t_0_0;  // int32
  reg signed [31:0] Delay11_t_1;  // int32
  reg signed [31:0] crp_out_delay1_t_0_0;  // int32
  reg signed [31:0] crp_out_delay1_t_1;  // int32
  reg signed [31:0] Delay8_bypass_t_0_0;  // int32
  reg signed [31:0] Delay8_bypass_t_1;  // int32
  reg signed [31:0] Delay8_bypass_t_2;  // int32
  reg signed [31:0] Delay8_bypass_t_0_1;  // int32
  reg signed [31:0] Delay8_bypass_t_1_0;  // int32
  reg signed [31:0] rd_0_t_0_0;  // int32
  reg signed [31:0] rd_0_t_1;  // int32
  reg signed [31:0] crp_out_delay7_t_0_0;  // int32
  reg signed [31:0] crp_out_delay7_t_1;  // int32
  reg signed [31:0] Delay111_output_t_0_0;  // int32
  reg signed [31:0] Delay111_output_t_1;  // int32
  reg signed [31:0] Delay112_t_0_0;  // int32
  reg signed [31:0] Delay112_t_1;  // int32
  reg signed [31:0] HwModeRegister6_t_0_0;  // int32
  reg signed [31:0] HwModeRegister6_t_1;  // int32
  reg signed [31:0] crp_out_delay14_t_0_0;  // int32
  reg signed [31:0] crp_out_delay14_t_0_1;  // int32
  reg signed [31:0] crp_out_delay14_t_1;  // int32
  reg signed [31:0] Delay22_output_t_0_0;  // int32
  reg signed [31:0] Delay22_output_t_1;  // int32
  reg signed [31:0] Delay221_t_0_0;  // int32
  reg signed [31:0] Delay221_t_1;  // int32
  reg signed [31:0] crp_out_delay6_t_0_0;  // int32
  reg signed [31:0] crp_out_delay6_t_1;  // int32
  reg signed [31:0] Delay24_output_t_0_0;  // int32
  reg signed [31:0] Delay24_output_t_1;  // int32
  reg signed [31:0] Delay241_t_0_0;  // int32
  reg signed [31:0] Delay241_t_1;  // int32
  reg signed [31:0] crp_out_delay5_t_0_0;  // int32
  reg signed [31:0] crp_out_delay5_t_1;  // int32
  reg signed [31:0] crp_out_delay4_t_0_0;  // int32
  reg signed [31:0] crp_out_delay4_t_1;  // int32
  reg signed [31:0] HwModeRegister8_t_0_0;  // int32
  reg signed [31:0] HwModeRegister8_t_1;  // int32
  reg signed [31:0] crp_out_delay15_t_0_0;  // int32
  reg signed [31:0] crp_out_delay15_t_0_1;  // int32
  reg signed [31:0] crp_out_delay15_t_1;  // int32
  reg signed [31:0] Delay4_output_t_0_0;  // int32
  reg signed [31:0] Delay4_output_t_1;  // int32
  reg signed [31:0] Delay41_t_0_0;  // int32
  reg signed [31:0] Delay41_t_1;  // int32
  reg signed [31:0] crp_out_delay2_t_0_0;  // int32
  reg signed [31:0] crp_out_delay2_t_1;  // int32
  reg signed [31:0] Delay5_output_t_0_0;  // int32
  reg signed [31:0] Delay5_output_t_1;  // int32
  reg signed [31:0] Delay51_t_0_0;  // int32
  reg signed [31:0] Delay51_t_1;  // int32


  // <S180>/Constant
  assign Constant_out1 = 18'sb000000101000000000;

  // <S180>/Mux1
  assign Mux1_out1[0] = Ib;
  assign Mux1_out1[1] = Ia;
  assign Mux1_out1[2] = Ic;

  always @(posedge clk)
    begin : crp_out_delay_process
      if (reset == 1'b1) begin
        for(crp_out_delay_t_1 = 32'sd0; crp_out_delay_t_1 <= 32'sd2; crp_out_delay_t_1 = crp_out_delay_t_1 + 32'sd1) begin
          Mux1_out1_1[crp_out_delay_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay_t_0_0 = 32'sd0; crp_out_delay_t_0_0 <= 32'sd2; crp_out_delay_t_0_0 = crp_out_delay_t_0_0 + 32'sd1) begin
            Mux1_out1_1[crp_out_delay_t_0_0] <= Mux1_out1[crp_out_delay_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay31_output_process
      if (reset == 1'b1) begin
        for(Delay31_output_t_1 = 32'sd0; Delay31_output_t_1 <= 32'sd2; Delay31_output_t_1 = Delay31_output_t_1 + 32'sd1) begin
          Mux1_out1_2[Delay31_output_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay31_output_t_0_0 = 32'sd0; Delay31_output_t_0_0 <= 32'sd2; Delay31_output_t_0_0 = Delay31_output_t_0_0 + 32'sd1) begin
            Mux1_out1_2[Delay31_output_t_0_0] <= Mux1_out1_1[Delay31_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay3
  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        for(Delay3_t_1 = 32'sd0; Delay3_t_1 <= 32'sd2; Delay3_t_1 = Delay3_t_1 + 32'sd1) begin
          Delay3_out1[Delay3_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay3_t_0_0 = 32'sd0; Delay3_t_0_0 <= 32'sd2; Delay3_t_0_0 = Delay3_t_0_0 + 32'sd1) begin
            Delay3_out1[Delay3_t_0_0] <= Mux1_out1_2[Delay3_t_0_0];
          end
        end
      end
    end

  assign Delay3_out1_1[0] = Delay3_out1[0];
  assign Delay3_out1_1[1] = Delay3_out1[1];
  assign Delay3_out1_1[2] = Delay3_out1[2];

  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        for(rd_4_t_1 = 32'sd0; rd_4_t_1 <= 32'sd2; rd_4_t_1 = rd_4_t_1 + 32'sd1) begin
          Delay3_out1_2[rd_4_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_4_t_0_0 = 32'sd0; rd_4_t_0_0 <= 32'sd2; rd_4_t_0_0 = rd_4_t_0_0 + 32'sd1) begin
            Delay3_out1_2[rd_4_t_0_0] <= Delay3_out1_1[rd_4_t_0_0];
          end
        end
      end
    end

  // <S180>/Add2
  assign Add2_u = {Constant_out1[17], Constant_out1};

  genvar t_0_05;
  generate
    for(t_0_05 = 32'sd0; t_0_05 <= 32'sd2; t_0_05 = t_0_05 + 32'sd1) begin:Add2_out1_gen
      assign Add2_add_cast[t_0_05] = {Delay3_out1_2[t_0_05][17], Delay3_out1_2[t_0_05]};
      assign Add2_out1[t_0_05] = Add2_u + Add2_add_cast[t_0_05];
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay10_process
      if (reset == 1'b1) begin
        for(crp_out_delay10_t_1 = 32'sd0; crp_out_delay10_t_1 <= 32'sd2; crp_out_delay10_t_1 = crp_out_delay10_t_1 + 32'sd1) begin
          Add2_out1_1[crp_out_delay10_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay10_t_0_0 = 32'sd0; crp_out_delay10_t_0_0 <= 32'sd2; crp_out_delay10_t_0_0 = crp_out_delay10_t_0_0 + 32'sd1) begin
            Add2_out1_1[crp_out_delay10_t_0_0] <= Add2_out1[crp_out_delay10_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay2_output_process
      if (reset == 1'b1) begin
        for(Delay2_output_t_1 = 32'sd0; Delay2_output_t_1 <= 32'sd2; Delay2_output_t_1 = Delay2_output_t_1 + 32'sd1) begin
          Add2_out1_2[Delay2_output_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay2_output_t_0_0 = 32'sd0; Delay2_output_t_0_0 <= 32'sd2; Delay2_output_t_0_0 = Delay2_output_t_0_0 + 32'sd1) begin
            Add2_out1_2[Delay2_output_t_0_0] <= Add2_out1_1[Delay2_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay2
  always @(posedge clk)
    begin : Delay21_process
      if (reset == 1'b1) begin
        for(Delay21_t_1 = 32'sd0; Delay21_t_1 <= 32'sd2; Delay21_t_1 = Delay21_t_1 + 32'sd1) begin
          Delay2_out1[Delay21_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay21_t_0_0 = 32'sd0; Delay21_t_0_0 <= 32'sd2; Delay21_t_0_0 = Delay21_t_0_0 + 32'sd1) begin
            Delay2_out1[Delay21_t_0_0] <= Add2_out1_2[Delay21_t_0_0];
          end
        end
      end
    end

  assign Delay2_out1_1[0] = Delay2_out1[0];
  assign Delay2_out1_1[1] = Delay2_out1[1];
  assign Delay2_out1_1[2] = Delay2_out1[2];

  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        for(HwModeRegister4_t_1 = 32'sd0; HwModeRegister4_t_1 <= 32'sd2; HwModeRegister4_t_1 = HwModeRegister4_t_1 + 32'sd1) begin
          Delay2_out1_2[HwModeRegister4_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister4_t_0_0 = 32'sd0; HwModeRegister4_t_0_0 <= 32'sd2; HwModeRegister4_t_0_0 = HwModeRegister4_t_0_0 + 32'sd1) begin
            Delay2_out1_2[HwModeRegister4_t_0_0] <= Delay2_out1_1[HwModeRegister4_t_0_0];
          end
        end
      end
    end

  assign kconst = 19'sb0110011001011001101;

  always @(posedge clk)
    begin : HwModeRegister5_process
      if (reset == 1'b1) begin
        kconst_1 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end

  // <S180>/Gain2

  genvar t_0_011;
  generate
    for(t_0_011 = 32'sd0; t_0_011 <= 32'sd2; t_0_011 = t_0_011 + 32'sd1) begin:Gain2_out1_gen
      assign Gain2_out1[t_0_011] = Delay2_out1_2[t_0_011] * kconst_1;
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay13_process
      if (reset == 1'b1) begin
        for(crp_out_delay13_t_1 = 32'sd0; crp_out_delay13_t_1 <= 32'sd5; crp_out_delay13_t_1 = crp_out_delay13_t_1 + 32'sd1) begin
          crp_out_delay13_reg[crp_out_delay13_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay13_t_0_1 = 32'sd0; crp_out_delay13_t_0_1 <= 32'sd5; crp_out_delay13_t_0_1 = crp_out_delay13_t_0_1 + 32'sd1) begin
            crp_out_delay13_reg[crp_out_delay13_t_0_1] <= crp_out_delay13_reg_next[crp_out_delay13_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(crp_out_delay13_t_0_0 = 32'sd0; crp_out_delay13_t_0_0 <= 32'sd2; crp_out_delay13_t_0_0 = crp_out_delay13_t_0_0 + 32'sd1) begin
      Gain2_out1_1[crp_out_delay13_t_0_0] = crp_out_delay13_reg[32'sd3 + crp_out_delay13_t_0_0];
      crp_out_delay13_reg_next[crp_out_delay13_t_0_0] = Gain2_out1[crp_out_delay13_t_0_0];
      crp_out_delay13_reg_next[crp_out_delay13_t_0_0 + 32'sd3] = crp_out_delay13_reg[crp_out_delay13_t_0_0];
    end

  end

  always @(posedge clk)
    begin : Delay_output_process
      if (reset == 1'b1) begin
        for(Delay_output_t_1 = 32'sd0; Delay_output_t_1 <= 32'sd2; Delay_output_t_1 = Delay_output_t_1 + 32'sd1) begin
          Gain2_out1_2[Delay_output_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay_output_t_0_0 = 32'sd0; Delay_output_t_0_0 <= 32'sd2; Delay_output_t_0_0 = Delay_output_t_0_0 + 32'sd1) begin
            Gain2_out1_2[Delay_output_t_0_0] <= Gain2_out1_1[Delay_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay
  always @(posedge clk)
    begin : Delay7_process
      if (reset == 1'b1) begin
        for(Delay7_t_1 = 32'sd0; Delay7_t_1 <= 32'sd2; Delay7_t_1 = Delay7_t_1 + 32'sd1) begin
          Delay_out1[Delay7_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay7_t_0_0 = 32'sd0; Delay7_t_0_0 <= 32'sd2; Delay7_t_0_0 = Delay7_t_0_0 + 32'sd1) begin
            Delay_out1[Delay7_t_0_0] <= Gain2_out1_2[Delay7_t_0_0];
          end
        end
      end
    end

  assign Delay_out1_1[0] = Delay_out1[0];
  assign Delay_out1_1[1] = Delay_out1[1];
  assign Delay_out1_1[2] = Delay_out1[2];

  // <S180>/Data Type Conversion5

  genvar ii3;
  generate
    for(ii3 = 32'sd0; ii3 <= 32'sd2; ii3 = ii3 + 32'sd1) begin:Data_Type_Conversion5_out1_gen
      assign Data_Type_Conversion5_out1[ii3] = Delay_out1_1[ii3][33:18];
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay3_process
      if (reset == 1'b1) begin
        for(crp_out_delay3_t_1 = 32'sd0; crp_out_delay3_t_1 <= 32'sd2; crp_out_delay3_t_1 = crp_out_delay3_t_1 + 32'sd1) begin
          Data_Type_Conversion5_out1_1[crp_out_delay3_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay3_t_0_0 = 32'sd0; crp_out_delay3_t_0_0 <= 32'sd2; crp_out_delay3_t_0_0 = crp_out_delay3_t_0_0 + 32'sd1) begin
            Data_Type_Conversion5_out1_1[crp_out_delay3_t_0_0] <= Data_Type_Conversion5_out1[crp_out_delay3_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay1_output_process
      if (reset == 1'b1) begin
        for(Delay1_output_t_1 = 32'sd0; Delay1_output_t_1 <= 32'sd2; Delay1_output_t_1 = Delay1_output_t_1 + 32'sd1) begin
          Data_Type_Conversion5_out1_2[Delay1_output_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay1_output_t_0_0 = 32'sd0; Delay1_output_t_0_0 <= 32'sd2; Delay1_output_t_0_0 = Delay1_output_t_0_0 + 32'sd1) begin
            Data_Type_Conversion5_out1_2[Delay1_output_t_0_0] <= Data_Type_Conversion5_out1_1[Delay1_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay1
  always @(posedge clk)
    begin : Delay11_process
      if (reset == 1'b1) begin
        for(Delay11_t_1 = 32'sd0; Delay11_t_1 <= 32'sd2; Delay11_t_1 = Delay11_t_1 + 32'sd1) begin
          Delay1_out1[Delay11_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay11_t_0_0 = 32'sd0; Delay11_t_0_0 <= 32'sd2; Delay11_t_0_0 = Delay11_t_0_0 + 32'sd1) begin
            Delay1_out1[Delay11_t_0_0] <= Data_Type_Conversion5_out1_2[Delay11_t_0_0];
          end
        end
      end
    end

  assign O_Ia = Delay1_out1[1];

  // <S180>/Demux1
  assign O_Ib = Delay1_out1[0];

  assign O_Ic = Delay1_out1[2];

  // <S180>/Mux
  assign Mux_out1[0] = Vb;
  assign Mux_out1[1] = Vc;
  assign Mux_out1[2] = Va;

  always @(posedge clk)
    begin : crp_out_delay1_process
      if (reset == 1'b1) begin
        for(crp_out_delay1_t_1 = 32'sd0; crp_out_delay1_t_1 <= 32'sd2; crp_out_delay1_t_1 = crp_out_delay1_t_1 + 32'sd1) begin
          Mux_out1_1[crp_out_delay1_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay1_t_0_0 = 32'sd0; crp_out_delay1_t_0_0 <= 32'sd2; crp_out_delay1_t_0_0 = crp_out_delay1_t_0_0 + 32'sd1) begin
            Mux_out1_1[crp_out_delay1_t_0_0] <= Mux_out1[crp_out_delay1_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay8_bypass_process
      if (reset == 1'b1) begin
        for(Delay8_bypass_t_1_0 = 32'sd0; Delay8_bypass_t_1_0 <= 32'sd2; Delay8_bypass_t_1_0 = Delay8_bypass_t_1_0 + 32'sd1) begin
          Delay8_bypass_reg[Delay8_bypass_t_1_0] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay8_bypass_t_0_1 = 32'sd0; Delay8_bypass_t_0_1 <= 32'sd2; Delay8_bypass_t_0_1 = Delay8_bypass_t_0_1 + 32'sd1) begin
            Delay8_bypass_reg[Delay8_bypass_t_0_1] <= Delay8_bypass_reg_next[Delay8_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_49_1 == 1'b1) begin
      for(Delay8_bypass_t_1 = 32'sd0; Delay8_bypass_t_1 <= 32'sd2; Delay8_bypass_t_1 = Delay8_bypass_t_1 + 32'sd1) begin
        Delay8_out1[Delay8_bypass_t_1] = Mux_out1_1[Delay8_bypass_t_1];
      end
    end
    else begin
      for(Delay8_bypass_t_0_0 = 32'sd0; Delay8_bypass_t_0_0 <= 32'sd2; Delay8_bypass_t_0_0 = Delay8_bypass_t_0_0 + 32'sd1) begin
        Delay8_out1[Delay8_bypass_t_0_0] = Delay8_bypass_reg[Delay8_bypass_t_0_0];
      end
    end

    for(Delay8_bypass_t_2 = 32'sd0; Delay8_bypass_t_2 <= 32'sd2; Delay8_bypass_t_2 = Delay8_bypass_t_2 + 32'sd1) begin
      Delay8_bypass_reg_next[Delay8_bypass_t_2] = Mux_out1_1[Delay8_bypass_t_2];
    end

  end

  assign Delay8_out1_1[0] = Delay8_out1[0];
  assign Delay8_out1_1[1] = Delay8_out1[1];
  assign Delay8_out1_1[2] = Delay8_out1[2];

  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        for(rd_0_t_1 = 32'sd0; rd_0_t_1 <= 32'sd2; rd_0_t_1 = rd_0_t_1 + 32'sd1) begin
          Delay8_out1_2[rd_0_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0 = 32'sd0; rd_0_t_0_0 <= 32'sd2; rd_0_t_0_0 = rd_0_t_0_0 + 32'sd1) begin
            Delay8_out1_2[rd_0_t_0_0] <= Delay8_out1_1[rd_0_t_0_0];
          end
        end
      end
    end

  // <S180>/Constant1
  assign Constant1_out1 = 18'sb000110100100000000;

  // <S180>/Add3
  assign Add3_v = {Constant1_out1[17], Constant1_out1};

  genvar t_0_021;
  generate
    for(t_0_021 = 32'sd0; t_0_021 <= 32'sd2; t_0_021 = t_0_021 + 32'sd1) begin:Add3_out1_gen
      assign Add3_add_cast[t_0_021] = {Delay8_out1_2[t_0_021][17], Delay8_out1_2[t_0_021]};
      assign Add3_out1[t_0_021] = Add3_add_cast[t_0_021] + Add3_v;
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay7_process
      if (reset == 1'b1) begin
        for(crp_out_delay7_t_1 = 32'sd0; crp_out_delay7_t_1 <= 32'sd2; crp_out_delay7_t_1 = crp_out_delay7_t_1 + 32'sd1) begin
          Add3_out1_1[crp_out_delay7_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay7_t_0_0 = 32'sd0; crp_out_delay7_t_0_0 <= 32'sd2; crp_out_delay7_t_0_0 = crp_out_delay7_t_0_0 + 32'sd1) begin
            Add3_out1_1[crp_out_delay7_t_0_0] <= Add3_out1[crp_out_delay7_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay111_output_process
      if (reset == 1'b1) begin
        for(Delay111_output_t_1 = 32'sd0; Delay111_output_t_1 <= 32'sd2; Delay111_output_t_1 = Delay111_output_t_1 + 32'sd1) begin
          Add3_out1_2[Delay111_output_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay111_output_t_0_0 = 32'sd0; Delay111_output_t_0_0 <= 32'sd2; Delay111_output_t_0_0 = Delay111_output_t_0_0 + 32'sd1) begin
            Add3_out1_2[Delay111_output_t_0_0] <= Add3_out1_1[Delay111_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay11
  always @(posedge clk)
    begin : Delay112_process
      if (reset == 1'b1) begin
        for(Delay112_t_1 = 32'sd0; Delay112_t_1 <= 32'sd2; Delay112_t_1 = Delay112_t_1 + 32'sd1) begin
          Delay11_out1[Delay112_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay112_t_0_0 = 32'sd0; Delay112_t_0_0 <= 32'sd2; Delay112_t_0_0 = Delay112_t_0_0 + 32'sd1) begin
            Delay11_out1[Delay112_t_0_0] <= Add3_out1_2[Delay112_t_0_0];
          end
        end
      end
    end

  assign Delay11_out1_1[0] = Delay11_out1[0];
  assign Delay11_out1_1[1] = Delay11_out1[1];
  assign Delay11_out1_1[2] = Delay11_out1[2];

  always @(posedge clk)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        for(HwModeRegister6_t_1 = 32'sd0; HwModeRegister6_t_1 <= 32'sd2; HwModeRegister6_t_1 = HwModeRegister6_t_1 + 32'sd1) begin
          Delay11_out1_2[HwModeRegister6_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister6_t_0_0 = 32'sd0; HwModeRegister6_t_0_0 <= 32'sd2; HwModeRegister6_t_0_0 = HwModeRegister6_t_0_0 + 32'sd1) begin
            Delay11_out1_2[HwModeRegister6_t_0_0] <= Delay11_out1_1[HwModeRegister6_t_0_0];
          end
        end
      end
    end

  assign kconst_2 = 19'sb0100110111111011001;

  always @(posedge clk)
    begin : HwModeRegister7_process
      if (reset == 1'b1) begin
        kconst_3 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end

  // <S180>/Gain5

  genvar t_0_031;
  generate
    for(t_0_031 = 32'sd0; t_0_031 <= 32'sd2; t_0_031 = t_0_031 + 32'sd1) begin:Gain5_out1_gen
      assign Gain5_out1[t_0_031] = Delay11_out1_2[t_0_031] * kconst_3;
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay14_process
      if (reset == 1'b1) begin
        for(crp_out_delay14_t_1 = 32'sd0; crp_out_delay14_t_1 <= 32'sd5; crp_out_delay14_t_1 = crp_out_delay14_t_1 + 32'sd1) begin
          crp_out_delay14_reg[crp_out_delay14_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay14_t_0_1 = 32'sd0; crp_out_delay14_t_0_1 <= 32'sd5; crp_out_delay14_t_0_1 = crp_out_delay14_t_0_1 + 32'sd1) begin
            crp_out_delay14_reg[crp_out_delay14_t_0_1] <= crp_out_delay14_reg_next[crp_out_delay14_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(crp_out_delay14_t_0_0 = 32'sd0; crp_out_delay14_t_0_0 <= 32'sd2; crp_out_delay14_t_0_0 = crp_out_delay14_t_0_0 + 32'sd1) begin
      Gain5_out1_1[crp_out_delay14_t_0_0] = crp_out_delay14_reg[32'sd3 + crp_out_delay14_t_0_0];
      crp_out_delay14_reg_next[crp_out_delay14_t_0_0] = Gain5_out1[crp_out_delay14_t_0_0];
      crp_out_delay14_reg_next[crp_out_delay14_t_0_0 + 32'sd3] = crp_out_delay14_reg[crp_out_delay14_t_0_0];
    end

  end

  always @(posedge clk)
    begin : Delay22_output_process
      if (reset == 1'b1) begin
        for(Delay22_output_t_1 = 32'sd0; Delay22_output_t_1 <= 32'sd2; Delay22_output_t_1 = Delay22_output_t_1 + 32'sd1) begin
          Gain5_out1_2[Delay22_output_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay22_output_t_0_0 = 32'sd0; Delay22_output_t_0_0 <= 32'sd2; Delay22_output_t_0_0 = Delay22_output_t_0_0 + 32'sd1) begin
            Gain5_out1_2[Delay22_output_t_0_0] <= Gain5_out1_1[Delay22_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay22
  always @(posedge clk)
    begin : Delay221_process
      if (reset == 1'b1) begin
        for(Delay221_t_1 = 32'sd0; Delay221_t_1 <= 32'sd2; Delay221_t_1 = Delay221_t_1 + 32'sd1) begin
          Delay22_out1[Delay221_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay221_t_0_0 = 32'sd0; Delay221_t_0_0 <= 32'sd2; Delay221_t_0_0 = Delay221_t_0_0 + 32'sd1) begin
            Delay22_out1[Delay221_t_0_0] <= Gain5_out1_2[Delay221_t_0_0];
          end
        end
      end
    end

  assign Delay22_out1_1[0] = Delay22_out1[0];
  assign Delay22_out1_1[1] = Delay22_out1[1];
  assign Delay22_out1_1[2] = Delay22_out1[2];

  // <S180>/Data Type Conversion2

  genvar ii11;
  generate
    for(ii11 = 32'sd0; ii11 <= 32'sd2; ii11 = ii11 + 32'sd1) begin:Data_Type_Conversion2_out1_gen
      assign Data_Type_Conversion2_out1[ii11] = Delay22_out1_1[ii11][36:21];
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay6_process
      if (reset == 1'b1) begin
        for(crp_out_delay6_t_1 = 32'sd0; crp_out_delay6_t_1 <= 32'sd2; crp_out_delay6_t_1 = crp_out_delay6_t_1 + 32'sd1) begin
          Data_Type_Conversion2_out1_1[crp_out_delay6_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay6_t_0_0 = 32'sd0; crp_out_delay6_t_0_0 <= 32'sd2; crp_out_delay6_t_0_0 = crp_out_delay6_t_0_0 + 32'sd1) begin
            Data_Type_Conversion2_out1_1[crp_out_delay6_t_0_0] <= Data_Type_Conversion2_out1[crp_out_delay6_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay24_output_process
      if (reset == 1'b1) begin
        for(Delay24_output_t_1 = 32'sd0; Delay24_output_t_1 <= 32'sd2; Delay24_output_t_1 = Delay24_output_t_1 + 32'sd1) begin
          Data_Type_Conversion2_out1_2[Delay24_output_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay24_output_t_0_0 = 32'sd0; Delay24_output_t_0_0 <= 32'sd2; Delay24_output_t_0_0 = Delay24_output_t_0_0 + 32'sd1) begin
            Data_Type_Conversion2_out1_2[Delay24_output_t_0_0] <= Data_Type_Conversion2_out1_1[Delay24_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay24
  always @(posedge clk)
    begin : Delay241_process
      if (reset == 1'b1) begin
        for(Delay241_t_1 = 32'sd0; Delay241_t_1 <= 32'sd2; Delay241_t_1 = Delay241_t_1 + 32'sd1) begin
          Delay24_out1[Delay241_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay241_t_0_0 = 32'sd0; Delay241_t_0_0 <= 32'sd2; Delay241_t_0_0 = Delay241_t_0_0 + 32'sd1) begin
            Delay24_out1[Delay241_t_0_0] <= Data_Type_Conversion2_out1_2[Delay241_t_0_0];
          end
        end
      end
    end

  assign O_Vc = Delay24_out1[1];

  // <S180>/Demux
  assign O_Vb = Delay24_out1[0];

  assign O_Va = Delay24_out1[2];

  assign kconst_4 = 18'sb010001001111001110;

  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        kconst_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end

  always @(posedge clk)
    begin : crp_out_delay12_process
      if (reset == 1'b1) begin
        Vout_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Vout_1 <= Vout;
        end
      end
    end

  always @(posedge clk)
    begin : Delay9_output_process
      if (reset == 1'b1) begin
        Vout_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_49_1) begin
          Vout_2 <= Vout_1;
        end
      end
    end

  // <S180>/Delay9
  always @(posedge clk)
    begin : Delay91_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_49_0) begin
          Delay9_out1 <= Vout_2;
        end
      end
    end

  assign Delay9_out1_1 = Delay9_out1;

  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        Delay9_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_2 <= Delay9_out1_1;
        end
      end
    end

  // <S180>/Gain4
  assign Gain4_out1 = kconst_5 * Delay9_out1_2;

  always @(posedge clk)
    begin : crp_out_delay5_process
      if (reset == 1'b1) begin
        for(crp_out_delay5_t_1 = 32'sd0; crp_out_delay5_t_1 <= 32'sd1; crp_out_delay5_t_1 = crp_out_delay5_t_1 + 32'sd1) begin
          crp_out_delay5_reg[crp_out_delay5_t_1] <= 36'sh000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay5_t_0_0 = 32'sd0; crp_out_delay5_t_0_0 <= 32'sd1; crp_out_delay5_t_0_0 = crp_out_delay5_t_0_0 + 32'sd1) begin
            crp_out_delay5_reg[crp_out_delay5_t_0_0] <= crp_out_delay5_reg_next[crp_out_delay5_t_0_0];
          end
        end
      end
    end

  assign Gain4_out1_1 = crp_out_delay5_reg[1];
  assign crp_out_delay5_reg_next[0] = Gain4_out1;
  assign crp_out_delay5_reg_next[1] = crp_out_delay5_reg[0];

  always @(posedge clk)
    begin : Delay12_output_process
      if (reset == 1'b1) begin
        Gain4_out1_2 <= 36'sh000000000;
      end
      else begin
        if (enb_1_49_1) begin
          Gain4_out1_2 <= Gain4_out1_1;
        end
      end
    end

  // <S180>/Delay12
  always @(posedge clk)
    begin : Delay121_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 36'sh000000000;
      end
      else begin
        if (enb_1_49_0) begin
          Delay12_out1 <= Gain4_out1_2;
        end
      end
    end

  assign Delay12_out1_1 = Delay12_out1;

  // <S180>/Data Type Conversion3
  assign Data_Type_Conversion3_out1 = Delay12_out1_1[35:20];

  always @(posedge clk)
    begin : crp_out_delay9_process
      if (reset == 1'b1) begin
        Data_Type_Conversion3_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Data_Type_Conversion3_out1_1 <= Data_Type_Conversion3_out1;
        end
      end
    end

  always @(posedge clk)
    begin : Delay251_output_process
      if (reset == 1'b1) begin
        Data_Type_Conversion3_out1_2 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_49_1) begin
          Data_Type_Conversion3_out1_2 <= Data_Type_Conversion3_out1_1;
        end
      end
    end

  // <S180>/Delay25
  always @(posedge clk)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_49_0) begin
          Delay25_out1 <= Data_Type_Conversion3_out1_2;
        end
      end
    end

  assign O_Vout = Delay25_out1;

  assign kconst_6 = 18'sb011001100101100110;

  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        kconst_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end

  always @(posedge clk)
    begin : crp_out_delay11_process
      if (reset == 1'b1) begin
        I_load_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          I_load_1 <= I_load;
        end
      end
    end

  always @(posedge clk)
    begin : Delay6_output_process
      if (reset == 1'b1) begin
        I_load_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_49_1) begin
          I_load_2 <= I_load_1;
        end
      end
    end

  // <S180>/Delay6
  always @(posedge clk)
    begin : Delay61_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_49_0) begin
          Delay6_out1 <= I_load_2;
        end
      end
    end

  assign Delay6_out1_1 = Delay6_out1;

  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        Delay6_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_2 <= Delay6_out1_1;
        end
      end
    end

  // <S180>/Gain3
  assign Gain3_out1 = kconst_7 * Delay6_out1_2;

  always @(posedge clk)
    begin : crp_out_delay4_process
      if (reset == 1'b1) begin
        for(crp_out_delay4_t_1 = 32'sd0; crp_out_delay4_t_1 <= 32'sd1; crp_out_delay4_t_1 = crp_out_delay4_t_1 + 32'sd1) begin
          crp_out_delay4_reg[crp_out_delay4_t_1] <= 36'sh000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay4_t_0_0 = 32'sd0; crp_out_delay4_t_0_0 <= 32'sd1; crp_out_delay4_t_0_0 = crp_out_delay4_t_0_0 + 32'sd1) begin
            crp_out_delay4_reg[crp_out_delay4_t_0_0] <= crp_out_delay4_reg_next[crp_out_delay4_t_0_0];
          end
        end
      end
    end

  assign Gain3_out1_1 = crp_out_delay4_reg[1];
  assign crp_out_delay4_reg_next[0] = Gain3_out1;
  assign crp_out_delay4_reg_next[1] = crp_out_delay4_reg[0];

  always @(posedge clk)
    begin : Delay16_output_process
      if (reset == 1'b1) begin
        Gain3_out1_2 <= 36'sh000000000;
      end
      else begin
        if (enb_1_49_1) begin
          Gain3_out1_2 <= Gain3_out1_1;
        end
      end
    end

  // <S180>/Delay16
  always @(posedge clk)
    begin : Delay161_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 36'sh000000000;
      end
      else begin
        if (enb_1_49_0) begin
          Delay16_out1 <= Gain3_out1_2;
        end
      end
    end

  assign Delay16_out1_1 = Delay16_out1;

  // <S180>/Data Type Conversion1
  assign Data_Type_Conversion1_out1 = Delay16_out1_1[30:15];

  always @(posedge clk)
    begin : crp_out_delay8_process
      if (reset == 1'b1) begin
        Data_Type_Conversion1_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Data_Type_Conversion1_out1_1 <= Data_Type_Conversion1_out1;
        end
      end
    end

  always @(posedge clk)
    begin : Delay291_output_process
      if (reset == 1'b1) begin
        Data_Type_Conversion1_out1_2 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_49_1) begin
          Data_Type_Conversion1_out1_2 <= Data_Type_Conversion1_out1_1;
        end
      end
    end

  // <S180>/Delay29
  always @(posedge clk)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_49_0) begin
          Delay29_out1 <= Data_Type_Conversion1_out1_2;
        end
      end
    end

  assign O_I_load = Delay29_out1;

  always @(posedge clk)
    begin : HwModeRegister8_process
      if (reset == 1'b1) begin
        for(HwModeRegister8_t_1 = 32'sd0; HwModeRegister8_t_1 <= 32'sd2; HwModeRegister8_t_1 = HwModeRegister8_t_1 + 32'sd1) begin
          Delay2_out1_3[HwModeRegister8_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister8_t_0_0 = 32'sd0; HwModeRegister8_t_0_0 <= 32'sd2; HwModeRegister8_t_0_0 = HwModeRegister8_t_0_0 + 32'sd1) begin
            Delay2_out1_3[HwModeRegister8_t_0_0] <= Delay2_out1_1[HwModeRegister8_t_0_0];
          end
        end
      end
    end

  assign kconst_8 = 19'sb0110011001001100110;

  always @(posedge clk)
    begin : HwModeRegister9_process
      if (reset == 1'b1) begin
        kconst_9 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_9 <= kconst_8;
        end
      end
    end

  // <S180>/Gain1

  genvar t_0_041;
  generate
    for(t_0_041 = 32'sd0; t_0_041 <= 32'sd2; t_0_041 = t_0_041 + 32'sd1) begin:Gain1_out1_gen
      assign Gain1_out1[t_0_041] = Delay2_out1_3[t_0_041] * kconst_9;
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay15_process
      if (reset == 1'b1) begin
        for(crp_out_delay15_t_1 = 32'sd0; crp_out_delay15_t_1 <= 32'sd5; crp_out_delay15_t_1 = crp_out_delay15_t_1 + 32'sd1) begin
          crp_out_delay15_reg[crp_out_delay15_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay15_t_0_1 = 32'sd0; crp_out_delay15_t_0_1 <= 32'sd5; crp_out_delay15_t_0_1 = crp_out_delay15_t_0_1 + 32'sd1) begin
            crp_out_delay15_reg[crp_out_delay15_t_0_1] <= crp_out_delay15_reg_next[crp_out_delay15_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(crp_out_delay15_t_0_0 = 32'sd0; crp_out_delay15_t_0_0 <= 32'sd2; crp_out_delay15_t_0_0 = crp_out_delay15_t_0_0 + 32'sd1) begin
      Gain1_out1_1[crp_out_delay15_t_0_0] = crp_out_delay15_reg[32'sd3 + crp_out_delay15_t_0_0];
      crp_out_delay15_reg_next[crp_out_delay15_t_0_0] = Gain1_out1[crp_out_delay15_t_0_0];
      crp_out_delay15_reg_next[crp_out_delay15_t_0_0 + 32'sd3] = crp_out_delay15_reg[crp_out_delay15_t_0_0];
    end

  end

  always @(posedge clk)
    begin : Delay4_output_process
      if (reset == 1'b1) begin
        for(Delay4_output_t_1 = 32'sd0; Delay4_output_t_1 <= 32'sd2; Delay4_output_t_1 = Delay4_output_t_1 + 32'sd1) begin
          Gain1_out1_2[Delay4_output_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay4_output_t_0_0 = 32'sd0; Delay4_output_t_0_0 <= 32'sd2; Delay4_output_t_0_0 = Delay4_output_t_0_0 + 32'sd1) begin
            Gain1_out1_2[Delay4_output_t_0_0] <= Gain1_out1_1[Delay4_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay4
  always @(posedge clk)
    begin : Delay41_process
      if (reset == 1'b1) begin
        for(Delay41_t_1 = 32'sd0; Delay41_t_1 <= 32'sd2; Delay41_t_1 = Delay41_t_1 + 32'sd1) begin
          Delay4_out1[Delay41_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay41_t_0_0 = 32'sd0; Delay41_t_0_0 <= 32'sd2; Delay41_t_0_0 = Delay41_t_0_0 + 32'sd1) begin
            Delay4_out1[Delay41_t_0_0] <= Gain1_out1_2[Delay41_t_0_0];
          end
        end
      end
    end

  assign Delay4_out1_1[0] = Delay4_out1[0];
  assign Delay4_out1_1[1] = Delay4_out1[1];
  assign Delay4_out1_1[2] = Delay4_out1[2];

  // <S180>/Data Type Conversion4

  genvar ii21;
  generate
    for(ii21 = 32'sd0; ii21 <= 32'sd2; ii21 = ii21 + 32'sd1) begin:Data_Type_Conversion4_out1_gen
      assign Data_Type_Conversion4_out1[ii21] = Delay4_out1_1[ii21][34:19];
    end
  endgenerate

  always @(posedge clk)
    begin : crp_out_delay2_process
      if (reset == 1'b1) begin
        for(crp_out_delay2_t_1 = 32'sd0; crp_out_delay2_t_1 <= 32'sd2; crp_out_delay2_t_1 = crp_out_delay2_t_1 + 32'sd1) begin
          Data_Type_Conversion4_out1_1[crp_out_delay2_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(crp_out_delay2_t_0_0 = 32'sd0; crp_out_delay2_t_0_0 <= 32'sd2; crp_out_delay2_t_0_0 = crp_out_delay2_t_0_0 + 32'sd1) begin
            Data_Type_Conversion4_out1_1[crp_out_delay2_t_0_0] <= Data_Type_Conversion4_out1[crp_out_delay2_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay5_output_process
      if (reset == 1'b1) begin
        for(Delay5_output_t_1 = 32'sd0; Delay5_output_t_1 <= 32'sd2; Delay5_output_t_1 = Delay5_output_t_1 + 32'sd1) begin
          Data_Type_Conversion4_out1_2[Delay5_output_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_49_1) begin
          for(Delay5_output_t_0_0 = 32'sd0; Delay5_output_t_0_0 <= 32'sd2; Delay5_output_t_0_0 = Delay5_output_t_0_0 + 32'sd1) begin
            Data_Type_Conversion4_out1_2[Delay5_output_t_0_0] <= Data_Type_Conversion4_out1_1[Delay5_output_t_0_0];
          end
        end
      end
    end

  // <S180>/Delay5
  always @(posedge clk)
    begin : Delay51_process
      if (reset == 1'b1) begin
        for(Delay51_t_1 = 32'sd0; Delay51_t_1 <= 32'sd2; Delay51_t_1 = Delay51_t_1 + 32'sd1) begin
          Delay5_out1[Delay51_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_49_0) begin
          for(Delay51_t_0_0 = 32'sd0; Delay51_t_0_0 <= 32'sd2; Delay51_t_0_0 = Delay51_t_0_0 + 32'sd1) begin
            Delay5_out1[Delay51_t_0_0] <= Data_Type_Conversion4_out1_2[Delay51_t_0_0];
          end
        end
      end
    end

  assign O_Ia1 = Delay5_out1[1];

  // <S180>/Demux2
  assign O_Ib1 = Delay5_out1[0];

  assign O_Ic1 = Delay5_out1[2];

endmodule  // real2uint8

