// -------------------------------------------------------------
// 
// File Name: C:\Users\Angel\Desktop\hil\ips\MCP_DRIVER\hdlsrc\int2bin_sdi\SPI_MNGR.v
// Created: 2025-05-02 20:52:58
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SPI_MNGR
// Source Path: int2bin_sdi/SPI_DAC/SPI_MNGR
// Hierarchy Level: 1
// Model version: 3.111
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SPI_MNGR
          (clk,
           rst,
           enb,
           v3_2,
           v3_1,
           v1_2,
           v2_1,
           v2_2,
           v1_1,
           v4_2,
           v4_1,
           SDI,
           SCK,
           nCS1,
           nCS2,
           nCS3,
           nCS4);

  // Default encoded enumeration values for type state_type_is_SPI_MNGR
  parameter state_type_is_SPI_MNGR_IN_NOP = 5'd0, state_type_is_SPI_MNGR_IN_NOP1 = 5'd1, state_type_is_SPI_MNGR_IN_off = 5'd2, state_type_is_SPI_MNGR_IN_on = 5'd3, state_type_is_SPI_MNGR_IN_sender_at_SCK = 5'd4, state_type_is_SPI_MNGR_IN_sender_at_SCK1 = 5'd5, state_type_is_SPI_MNGR_IN_sender_pre_SCK = 5'd6, state_type_is_SPI_MNGR_IN_toBsend_CH_A = 5'd7, state_type_is_SPI_MNGR_IN_toBsend_CH_B = 5'd8, state_type_is_SPI_MNGR_IN_toBsend_v1_1 = 5'd9, state_type_is_SPI_MNGR_IN_toBsend_v1_2 = 5'd10, state_type_is_SPI_MNGR_IN_toBsend_v2_1 = 5'd11, state_type_is_SPI_MNGR_IN_toBsend_v2_2 = 5'd12, state_type_is_SPI_MNGR_IN_toBsend_v3_1 = 5'd13, state_type_is_SPI_MNGR_IN_toBsend_v3_2 = 5'd14, state_type_is_SPI_MNGR_IN_toBsend_v3_3 = 5'd15, state_type_is_SPI_MNGR_IN_toBsend_v3_4 = 5'd16;

  input   clk;
  input   rst;
  input   enb;
  input   [15:0] v3_2;  // uint16
  input   [15:0] v3_1;  // uint16
  input   [15:0] v1_2;  // uint16
  input   [15:0] v2_1;  // uint16
  input   [15:0] v2_2;  // uint16
  input   [15:0] v1_1;  // uint16
  input   [15:0] v4_2;  // uint16
  input   [15:0] v4_1;  // uint16
  output  SDI;
  output  SCK;
  output  nCS1;
  output  nCS2;
  output  nCS3;
  output  nCS4;


  wire is_SPI_MNGR_reg_ctrl_const_out;
  wire [4:0] is_SPI_MNGR;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_1;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_2;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_3;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_4;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_5;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_6;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_7;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_8;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire cnt_clk_reg_ctrl_const_out;
  wire [15:0] cnt_clk_reg_Initial_Val_out;  // uint16
  wire [15:0] cnt_clk;  // uint16
  wire [15:0] s;  // uint16
  wire [15:0] cnt_clk_1;  // uint16
  wire [15:0] s_1;  // uint16
  wire [15:0] s_2;  // uint16
  wire [15:0] cnt_clk_2;  // uint16
  wire [15:0] cnt_clk_3;  // uint16
  wire [15:0] s_3;  // uint16
  wire [15:0] s_4;  // uint16
  wire [15:0] cnt_clk_4;  // uint16
  wire [4:0] is_SPI_MNGR_9;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_10;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_11;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_12;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_13;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire cnt_reg_ctrl_const_out;
  wire [15:0] cnt_reg_Initial_Val_out;  // uint16
  wire [15:0] s_5;  // uint16
  wire [15:0] cnt;  // uint16
  wire [4:0] is_SPI_MNGR_14;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_15;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_16;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire selector_reg_ctrl_const_out;
  wire [15:0] selector_reg_Initial_Val_out;  // uint16
  wire [15:0] selector;  // uint16
  wire [15:0] s_6;  // uint16
  wire [4:0] is_SPI_MNGR_17;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_18;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_19;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_20;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_21;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_22;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_23;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_24;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_25;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_26;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_27;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_28;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_29;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_30;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_31;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_32;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_33;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_34;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_35;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_36;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_reg_Initial_Val_out;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] is_SPI_MNGR_37;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_7;
  wire [4:0] is_SPI_MNGR_38;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] tmp;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_8;
  wire [4:0] tmp_1;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_2;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [15:0] tmp_3;  // uint16
  wire tmp_4;
  wire [4:0] tmp_5;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_6;
  wire [4:0] tmp_7;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_8;
  wire [4:0] tmp_9;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_10;
  wire [4:0] tmp_11;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_12;
  wire [4:0] tmp_13;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_14;
  wire [4:0] tmp_15;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_16;
  wire [4:0] tmp_17;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_18;
  wire [4:0] tmp_19;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_9;
  wire [4:0] tmp_20;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_10;
  wire [4:0] tmp_21;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_11;
  wire [4:0] tmp_22;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_23;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_12;
  reg  s_13;
  wire [4:0] tmp_24;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [15:0] selector_1;  // uint16
  wire s_14;
  wire [4:0] tmp_25;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_15;
  wire [4:0] tmp_26;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_16;
  wire [4:0] tmp_27;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_17;
  wire [4:0] tmp_28;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_18;
  wire [4:0] tmp_29;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_19;
  wire [4:0] tmp_30;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_20;
  wire [4:0] tmp_31;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [16:0] adder_add_temp;  // ufix17
  wire [16:0] adder_1;  // ufix17
  wire [16:0] adder_2;  // ufix17
  wire [15:0] tmp_32;  // uint16
  wire [15:0] tmp_33;  // uint16
  wire [15:0] tmp_34;  // uint16
  wire [15:0] tmp_35;  // uint16
  reg [15:0] tmp_36;  // uint16
  reg [15:0] tmp_37;  // uint16
  wire s_21;
  wire [4:0] tmp_38;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_39;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [15:0] cnt_1;  // uint16
  wire [16:0] adder_add_temp_1;  // ufix17
  wire [16:0] adder_4;  // ufix17
  wire [16:0] adder_5;  // ufix17
  wire [15:0] tmp_40;  // uint16
  wire s_22;
  wire [15:0] tmp_41;  // uint16
  wire s_23;
  wire [15:0] tmp_42;  // uint16
  reg [15:0] tmp_43;  // uint16
  reg [15:0] tmp_44;  // uint16
  wire [4:0] tmp_45;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_24;
  wire [4:0] tmp_46;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [4:0] tmp_47;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_48;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_25;
  wire [4:0] tmp_49;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_26;
  wire [4:0] tmp_50;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_51;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire s_27;
  wire [4:0] tmp_52;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [15:0] cnt_clk_5;  // uint16
  wire [16:0] adder_add_temp_2;  // ufix17
  wire [16:0] adder_7;  // ufix17
  wire [16:0] adder_8;  // ufix17
  wire [15:0] tmp_53;  // uint16
  wire [15:0] tmp_54;  // uint16
  wire [15:0] tmp_55;  // uint16
  wire [16:0] adder_add_temp_3;  // ufix17
  wire [16:0] adder_10;  // ufix17
  wire [16:0] adder_11;  // ufix17
  wire [15:0] tmp_56;  // uint16
  wire [15:0] tmp_57;  // uint16
  wire [15:0] tmp_58;  // uint16
  wire [16:0] adder_add_temp_4;  // ufix17
  wire [16:0] adder_13;  // ufix17
  wire [16:0] adder_14;  // ufix17
  wire [15:0] tmp_59;  // uint16
  wire [15:0] tmp_60;  // uint16
  wire [15:0] tmp_61;  // uint16
  wire [16:0] adder_add_temp_5;  // ufix17
  wire [16:0] adder_16;  // ufix17
  wire [16:0] adder_17;  // ufix17
  wire [15:0] tmp_62;  // uint16
  wire [15:0] tmp_63;  // uint16
  wire [15:0] tmp_64;  // uint16
  wire [16:0] adder_add_temp_6;  // ufix17
  wire [16:0] adder_19;  // ufix17
  wire [16:0] adder_20;  // ufix17
  wire [15:0] tmp_65;  // uint16
  wire [15:0] tmp_66;  // uint16
  wire s_28;
  wire [15:0] tmp_67;  // uint16
  reg [15:0] tmp_68;  // uint16
  reg [15:0] tmp_69;  // uint16
  wire [4:0] tmp_70;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_71;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] is_SPI_MNGR_39;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg [4:0] tmp_72;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire tmp_73;
  wire tmp_74;
  wire tmp_75;
  wire tmp_76;
  wire tmp_77;
  wire tmp_78;
  wire tmp_79;
  wire sel;
  wire sel_1;
  wire sel_2;
  wire sel_3;
  wire sel_4;
  wire sel_5;
  wire sel_6;
  wire sel_7;
  wire sel_8;
  wire tmp_80;
  reg  sel_1_1;
  wire s_29;
  wire s_30;
  wire s_31;
  wire s_32;
  wire s_33;
  wire s_34;
  wire s_35;
  wire sel_9;
  wire sel_10;
  wire sel_11;
  wire sel_12;
  wire sel_13;
  wire sel_14;
  wire sel_15;
  wire sel_16;
  wire sel_17;
  wire s_36;
  reg  sel_2_1;
  wire tmp_81;
  wire s_37;
  wire s_38;
  wire s_39;
  wire s_40;
  wire s_41;
  wire s_42;
  wire s_43;
  wire sel_18;
  wire sel_19;
  wire sel_20;
  wire sel_21;
  wire sel_22;
  wire sel_23;
  wire sel_24;
  wire sel_25;
  wire sel_26;
  wire s_44;
  reg  sel_2_2;
  wire tmp_82;
  wire s_45;
  wire s_46;
  wire s_47;
  wire s_48;
  wire s_49;
  wire s_50;
  wire s_51;
  wire sel_27;
  wire sel_28;
  wire sel_29;
  wire sel_30;
  wire sel_31;
  wire sel_32;
  wire sel_33;
  wire sel_34;
  wire sel_35;
  wire s_52;
  reg  sel_2_3;
  wire tmp_83;
  wire s_53;
  wire s_54;
  wire s_55;
  wire s_56;
  wire s_57;
  wire s_58;
  wire s_59;
  wire sel_36;
  wire sel_37;
  wire sel_38;
  wire sel_39;
  wire sel_40;
  wire sel_41;
  wire sel_42;
  wire sel_43;
  wire sel_44;
  wire s_60;
  reg  sel_2_4;
  reg [4:0] is_SPI_MNGR_40;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_45;  // uint8
  wire [7:0] sel_46;  // uint8
  wire [7:0] sel_47;  // uint8
  wire [7:0] sel_48;  // uint8
  wire [7:0] sel_49;  // uint8
  wire [7:0] sel_50;  // uint8
  wire [7:0] sel_51;  // uint8
  wire [7:0] sel_52;  // uint8
  wire [7:0] sel_53;  // uint8
  wire [7:0] sel_54;  // uint8
  wire [7:0] sel_55;  // uint8
  wire [7:0] sel_56;  // uint8
  reg  s_61;
  reg [4:0] is_SPI_MNGR_41;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_62;
  reg  s_63;
  reg  s_64;
  reg  s_65;
  reg  s_66;
  reg  s_67;
  reg  s_68;
  reg  s_69;
  reg [15:0] tmp_84;  // uint16
  reg [15:0] tmp_85;  // uint16
  reg [15:0] tmp_86;  // uint16
  reg [15:0] tmp_87;  // uint16
  reg [15:0] tmp_88;  // uint16
  reg [15:0] tmp_89;  // uint16
  reg [15:0] tmp_90;  // uint16
  reg [15:0] tmp_91;  // uint16
  reg [15:0] tmp_92;  // uint16
  wire [15:0] tmp_93;  // uint16
  wire [15:0] tmp_94;  // uint16
  wire [15:0] tmp_95;  // uint16
  wire [15:0] tmp_96;  // uint16
  wire [15:0] tmp_97;  // uint16
  wire [15:0] tmp_98;  // uint16
  wire [15:0] tmp_99;  // uint16
  wire [15:0] tmp_100;  // uint16
  reg [15:0] tmp_101;  // uint16
  wire [7:0] functionOutput_0;  // uint8
  wire [7:0] functionOutput_1;  // uint8
  wire [7:0] functionOutput_2;  // uint8
  wire [7:0] functionOutput_3;  // uint8
  wire [7:0] functionOutput_4;  // uint8
  wire [7:0] functionOutput_5;  // uint8
  wire [7:0] functionOutput_6;  // uint8
  wire [7:0] functionOutput_7;  // uint8
  wire [7:0] functionOutput_8;  // uint8
  wire [7:0] functionOutput_9;  // uint8
  wire [7:0] functionOutput_10;  // uint8
  wire [7:0] functionOutput_11;  // uint8
  wire [7:0] functionOutput [0:11];  // uint8 [12]
  wire signed [31:0] sel_57;  // int32
  wire signed [31:0] sel_58;  // int32
  wire signed [31:0] sel_59;  // int32
  wire signed [31:0] sel_60;  // int32
  wire signed [31:0] sel_61;  // int32
  wire signed [31:0] sel_62;  // int32
  wire signed [31:0] sel_63;  // int32
  wire signed [31:0] sel_64;  // int32
  wire signed [31:0] sel_65;  // int32
  wire signed [31:0] sel_66;  // int32
  wire signed [31:0] sel_67;  // int32
  wire signed [31:0] sel_68;  // int32
  wire signed [31:0] sel_69;  // int32
  wire signed [31:0] sel_70;  // int32
  wire signed [31:0] s_70;  // int32
  wire signed [31:0] sel_1_2;  // int32
  wire signed [31:0] sel_71;  // int32
  wire signed [31:0] sel_1_3;  // int32
  wire signed [31:0] sel_72;  // int32
  wire signed [31:0] sel_1_4;  // int32
  wire signed [31:0] sel_73;  // int32
  wire signed [31:0] sel_1_5;  // int32
  wire signed [31:0] sel_74;  // int32
  wire signed [31:0] sel_1_6;  // int32
  wire signed [31:0] sel_75;  // int32
  wire signed [31:0] sel_1_7;  // int32
  wire signed [31:0] sel_76;  // int32
  wire signed [31:0] sel_1_8;  // int32
  wire signed [31:0] sel_77;  // int32
  wire signed [31:0] sel_1_9;  // int32
  wire signed [31:0] sel_78;  // int32
  wire signed [31:0] sel_79;  // int32
  wire signed [31:0] sel_80;  // int32
  reg signed [31:0] sel_1_10;  // int32
  wire [7:0] tmp_102;  // uint8
  reg [4:0] is_SPI_MNGR_42;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_71;
  reg  s_72;
  reg  s_73;
  reg  s_74;
  reg  s_75;
  reg  s_76;
  reg  s_77;
  reg  s_78;
  reg [15:0] tmp_103;  // uint16
  reg [15:0] tmp_104;  // uint16
  reg [15:0] tmp_105;  // uint16
  reg [15:0] tmp_106;  // uint16
  reg [15:0] tmp_107;  // uint16
  reg [15:0] tmp_108;  // uint16
  reg [15:0] tmp_109;  // uint16
  reg [15:0] tmp_110;  // uint16
  reg [15:0] tmp_111;  // uint16
  wire [15:0] tmp_112;  // uint16
  wire [15:0] tmp_113;  // uint16
  wire [15:0] tmp_114;  // uint16
  wire [15:0] tmp_115;  // uint16
  wire [15:0] tmp_116;  // uint16
  wire [15:0] tmp_117;  // uint16
  wire [15:0] tmp_118;  // uint16
  wire [15:0] tmp_119;  // uint16
  reg [15:0] tmp_120;  // uint16
  wire [7:0] functionOutput_0_1;  // uint8
  wire [7:0] functionOutput_1_1;  // uint8
  wire [7:0] functionOutput_2_1;  // uint8
  wire [7:0] functionOutput_3_1;  // uint8
  wire [7:0] functionOutput_4_1;  // uint8
  wire [7:0] functionOutput_5_1;  // uint8
  wire [7:0] functionOutput_6_1;  // uint8
  wire [7:0] functionOutput_7_1;  // uint8
  wire [7:0] functionOutput_8_1;  // uint8
  wire [7:0] functionOutput_9_1;  // uint8
  wire [7:0] functionOutput_10_1;  // uint8
  wire [7:0] functionOutput_11_1;  // uint8
  wire [7:0] functionOutput_12 [0:11];  // uint8 [12]
  wire signed [31:0] sel_81;  // int32
  wire signed [31:0] sel_82;  // int32
  wire signed [31:0] sel_83;  // int32
  wire signed [31:0] sel_84;  // int32
  wire signed [31:0] sel_85;  // int32
  wire signed [31:0] sel_86;  // int32
  wire signed [31:0] sel_87;  // int32
  wire signed [31:0] sel_88;  // int32
  wire signed [31:0] sel_89;  // int32
  wire signed [31:0] sel_90;  // int32
  wire signed [31:0] sel_91;  // int32
  wire signed [31:0] sel_92;  // int32
  wire signed [31:0] sel_93;  // int32
  wire signed [31:0] sel_94;  // int32
  wire signed [31:0] s_79;  // int32
  wire signed [31:0] sel_1_11;  // int32
  wire signed [31:0] sel_95;  // int32
  wire signed [31:0] sel_1_12;  // int32
  wire signed [31:0] sel_96;  // int32
  wire signed [31:0] sel_1_13;  // int32
  wire signed [31:0] sel_97;  // int32
  wire signed [31:0] sel_1_14;  // int32
  wire signed [31:0] sel_98;  // int32
  wire signed [31:0] sel_1_15;  // int32
  wire signed [31:0] sel_99;  // int32
  wire signed [31:0] sel_1_16;  // int32
  wire signed [31:0] sel_100;  // int32
  wire signed [31:0] sel_1_17;  // int32
  wire signed [31:0] sel_101;  // int32
  wire signed [31:0] sel_102;  // int32
  wire signed [31:0] sel_103;  // int32
  reg signed [31:0] sel_1_18;  // int32
  wire [7:0] tmp_121;  // uint8
  wire [7:0] sel_1_19;  // uint8
  reg [4:0] is_SPI_MNGR_43;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_80;
  reg  s_81;
  reg  s_82;
  reg  s_83;
  reg  s_84;
  reg  s_85;
  reg  s_86;
  reg  s_87;
  reg [15:0] tmp_122;  // uint16
  reg [15:0] tmp_123;  // uint16
  reg [15:0] tmp_124;  // uint16
  reg [15:0] tmp_125;  // uint16
  reg [15:0] tmp_126;  // uint16
  reg [15:0] tmp_127;  // uint16
  reg [15:0] tmp_128;  // uint16
  reg [15:0] tmp_129;  // uint16
  reg [15:0] tmp_130;  // uint16
  wire [15:0] tmp_131;  // uint16
  wire [15:0] tmp_132;  // uint16
  wire [15:0] tmp_133;  // uint16
  wire [15:0] tmp_134;  // uint16
  wire [15:0] tmp_135;  // uint16
  wire [15:0] tmp_136;  // uint16
  wire [15:0] tmp_137;  // uint16
  wire [15:0] tmp_138;  // uint16
  reg [15:0] tmp_139;  // uint16
  wire [7:0] functionOutput_0_2;  // uint8
  wire [7:0] functionOutput_1_2;  // uint8
  wire [7:0] functionOutput_2_2;  // uint8
  wire [7:0] functionOutput_3_2;  // uint8
  wire [7:0] functionOutput_4_2;  // uint8
  wire [7:0] functionOutput_5_2;  // uint8
  wire [7:0] functionOutput_6_2;  // uint8
  wire [7:0] functionOutput_7_2;  // uint8
  wire [7:0] functionOutput_8_2;  // uint8
  wire [7:0] functionOutput_9_2;  // uint8
  wire [7:0] functionOutput_10_2;  // uint8
  wire [7:0] functionOutput_11_2;  // uint8
  wire [7:0] functionOutput_13 [0:11];  // uint8 [12]
  wire signed [31:0] sel_104;  // int32
  wire signed [31:0] sel_105;  // int32
  wire signed [31:0] sel_106;  // int32
  wire signed [31:0] sel_107;  // int32
  wire signed [31:0] sel_108;  // int32
  wire signed [31:0] sel_109;  // int32
  wire signed [31:0] sel_110;  // int32
  wire signed [31:0] sel_111;  // int32
  wire signed [31:0] sel_112;  // int32
  wire signed [31:0] sel_113;  // int32
  wire signed [31:0] sel_114;  // int32
  wire signed [31:0] sel_115;  // int32
  wire signed [31:0] sel_116;  // int32
  wire signed [31:0] sel_117;  // int32
  wire signed [31:0] s_88;  // int32
  wire signed [31:0] sel_1_20;  // int32
  wire signed [31:0] sel_118;  // int32
  wire signed [31:0] sel_1_21;  // int32
  wire signed [31:0] sel_119;  // int32
  wire signed [31:0] sel_1_22;  // int32
  wire signed [31:0] sel_120;  // int32
  wire signed [31:0] sel_1_23;  // int32
  wire signed [31:0] sel_121;  // int32
  wire signed [31:0] sel_1_24;  // int32
  wire signed [31:0] sel_122;  // int32
  wire signed [31:0] sel_1_25;  // int32
  wire signed [31:0] sel_123;  // int32
  wire signed [31:0] sel_124;  // int32
  wire signed [31:0] sel_125;  // int32
  reg signed [31:0] sel_1_26;  // int32
  wire [7:0] tmp_140;  // uint8
  wire [7:0] sel_1_27;  // uint8
  reg [4:0] is_SPI_MNGR_44;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_89;
  reg  s_90;
  reg  s_91;
  reg  s_92;
  reg  s_93;
  reg  s_94;
  reg  s_95;
  reg  s_96;
  reg [15:0] tmp_141;  // uint16
  reg [15:0] tmp_142;  // uint16
  reg [15:0] tmp_143;  // uint16
  reg [15:0] tmp_144;  // uint16
  reg [15:0] tmp_145;  // uint16
  reg [15:0] tmp_146;  // uint16
  reg [15:0] tmp_147;  // uint16
  reg [15:0] tmp_148;  // uint16
  reg [15:0] tmp_149;  // uint16
  wire [15:0] tmp_150;  // uint16
  wire [15:0] tmp_151;  // uint16
  wire [15:0] tmp_152;  // uint16
  wire [15:0] tmp_153;  // uint16
  wire [15:0] tmp_154;  // uint16
  wire [15:0] tmp_155;  // uint16
  wire [15:0] tmp_156;  // uint16
  wire [15:0] tmp_157;  // uint16
  reg [15:0] tmp_158;  // uint16
  wire [7:0] functionOutput_0_3;  // uint8
  wire [7:0] functionOutput_1_3;  // uint8
  wire [7:0] functionOutput_2_3;  // uint8
  wire [7:0] functionOutput_3_3;  // uint8
  wire [7:0] functionOutput_4_3;  // uint8
  wire [7:0] functionOutput_5_3;  // uint8
  wire [7:0] functionOutput_6_3;  // uint8
  wire [7:0] functionOutput_7_3;  // uint8
  wire [7:0] functionOutput_8_3;  // uint8
  wire [7:0] functionOutput_9_3;  // uint8
  wire [7:0] functionOutput_10_3;  // uint8
  wire [7:0] functionOutput_11_3;  // uint8
  wire [7:0] functionOutput_14 [0:11];  // uint8 [12]
  wire signed [31:0] sel_126;  // int32
  wire signed [31:0] sel_127;  // int32
  wire signed [31:0] sel_128;  // int32
  wire signed [31:0] sel_129;  // int32
  wire signed [31:0] sel_130;  // int32
  wire signed [31:0] sel_131;  // int32
  wire signed [31:0] sel_132;  // int32
  wire signed [31:0] sel_133;  // int32
  wire signed [31:0] sel_134;  // int32
  wire signed [31:0] sel_135;  // int32
  wire signed [31:0] sel_136;  // int32
  wire signed [31:0] sel_137;  // int32
  wire signed [31:0] sel_138;  // int32
  wire signed [31:0] sel_139;  // int32
  wire signed [31:0] s_97;  // int32
  wire signed [31:0] sel_1_28;  // int32
  wire signed [31:0] sel_140;  // int32
  wire signed [31:0] sel_1_29;  // int32
  wire signed [31:0] sel_141;  // int32
  wire signed [31:0] sel_1_30;  // int32
  wire signed [31:0] sel_142;  // int32
  wire signed [31:0] sel_1_31;  // int32
  wire signed [31:0] sel_143;  // int32
  wire signed [31:0] sel_1_32;  // int32
  wire signed [31:0] sel_144;  // int32
  wire signed [31:0] sel_145;  // int32
  wire signed [31:0] sel_146;  // int32
  reg signed [31:0] sel_1_33;  // int32
  wire [7:0] tmp_159;  // uint8
  wire [7:0] sel_1_34;  // uint8
  reg [7:0] sel_1_35;  // uint8
  reg [4:0] is_SPI_MNGR_45;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_98;
  reg  s_99;
  reg  s_100;
  reg  s_101;
  reg  s_102;
  reg  s_103;
  reg  s_104;
  reg  s_105;
  reg [15:0] tmp_160;  // uint16
  reg [15:0] tmp_161;  // uint16
  reg [15:0] tmp_162;  // uint16
  reg [15:0] tmp_163;  // uint16
  reg [15:0] tmp_164;  // uint16
  reg [15:0] tmp_165;  // uint16
  reg [15:0] tmp_166;  // uint16
  reg [15:0] tmp_167;  // uint16
  reg [15:0] tmp_168;  // uint16
  wire [15:0] tmp_169;  // uint16
  wire [15:0] tmp_170;  // uint16
  wire [15:0] tmp_171;  // uint16
  wire [15:0] tmp_172;  // uint16
  wire [15:0] tmp_173;  // uint16
  wire [15:0] tmp_174;  // uint16
  wire [15:0] tmp_175;  // uint16
  wire [15:0] tmp_176;  // uint16
  reg [15:0] tmp_177;  // uint16
  wire [7:0] functionOutput_0_4;  // uint8
  wire [7:0] functionOutput_1_4;  // uint8
  wire [7:0] functionOutput_2_4;  // uint8
  wire [7:0] functionOutput_3_4;  // uint8
  wire [7:0] functionOutput_4_4;  // uint8
  wire [7:0] functionOutput_5_4;  // uint8
  wire [7:0] functionOutput_6_4;  // uint8
  wire [7:0] functionOutput_7_4;  // uint8
  wire [7:0] functionOutput_8_4;  // uint8
  wire [7:0] functionOutput_9_4;  // uint8
  wire [7:0] functionOutput_10_4;  // uint8
  wire [7:0] functionOutput_11_4;  // uint8
  wire [7:0] functionOutput_15 [0:11];  // uint8 [12]
  wire signed [31:0] sel_147;  // int32
  wire signed [31:0] sel_148;  // int32
  wire signed [31:0] sel_149;  // int32
  wire signed [31:0] sel_150;  // int32
  wire signed [31:0] sel_151;  // int32
  wire signed [31:0] sel_152;  // int32
  wire signed [31:0] sel_153;  // int32
  wire signed [31:0] sel_154;  // int32
  wire signed [31:0] sel_155;  // int32
  wire signed [31:0] sel_156;  // int32
  wire signed [31:0] sel_157;  // int32
  wire signed [31:0] sel_158;  // int32
  wire signed [31:0] sel_159;  // int32
  wire signed [31:0] sel_160;  // int32
  wire signed [31:0] s_106;  // int32
  wire signed [31:0] sel_1_36;  // int32
  wire signed [31:0] sel_161;  // int32
  wire signed [31:0] sel_1_37;  // int32
  wire signed [31:0] sel_162;  // int32
  wire signed [31:0] sel_1_38;  // int32
  wire signed [31:0] sel_163;  // int32
  wire signed [31:0] sel_1_39;  // int32
  wire signed [31:0] sel_164;  // int32
  wire signed [31:0] sel_165;  // int32
  wire signed [31:0] sel_166;  // int32
  reg signed [31:0] sel_1_40;  // int32
  wire [7:0] tmp_178;  // uint8
  reg  s_107;
  reg [7:0] tmp_179;  // uint8
  wire [7:0] sel_1_41;  // uint8
  reg [4:0] is_SPI_MNGR_46;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_108;
  reg  s_109;
  reg  s_110;
  reg  s_111;
  reg  s_112;
  reg  s_113;
  reg  s_114;
  reg  s_115;
  reg [15:0] tmp_180;  // uint16
  reg [15:0] tmp_181;  // uint16
  reg [15:0] tmp_182;  // uint16
  reg [15:0] tmp_183;  // uint16
  reg [15:0] tmp_184;  // uint16
  reg [15:0] tmp_185;  // uint16
  reg [15:0] tmp_186;  // uint16
  reg [15:0] tmp_187;  // uint16
  reg [15:0] tmp_188;  // uint16
  wire [15:0] tmp_189;  // uint16
  wire [15:0] tmp_190;  // uint16
  wire [15:0] tmp_191;  // uint16
  wire [15:0] tmp_192;  // uint16
  wire [15:0] tmp_193;  // uint16
  wire [15:0] tmp_194;  // uint16
  wire [15:0] tmp_195;  // uint16
  wire [15:0] tmp_196;  // uint16
  reg [15:0] tmp_197;  // uint16
  wire [7:0] functionOutput_0_5;  // uint8
  wire [7:0] functionOutput_1_5;  // uint8
  wire [7:0] functionOutput_2_5;  // uint8
  wire [7:0] functionOutput_3_5;  // uint8
  wire [7:0] functionOutput_4_5;  // uint8
  wire [7:0] functionOutput_5_5;  // uint8
  wire [7:0] functionOutput_6_5;  // uint8
  wire [7:0] functionOutput_7_5;  // uint8
  wire [7:0] functionOutput_8_5;  // uint8
  wire [7:0] functionOutput_9_5;  // uint8
  wire [7:0] functionOutput_10_5;  // uint8
  wire [7:0] functionOutput_11_5;  // uint8
  wire [7:0] functionOutput_16 [0:11];  // uint8 [12]
  wire signed [31:0] sel_167;  // int32
  wire signed [31:0] sel_168;  // int32
  wire signed [31:0] sel_169;  // int32
  wire signed [31:0] sel_170;  // int32
  wire signed [31:0] sel_171;  // int32
  wire signed [31:0] sel_172;  // int32
  wire signed [31:0] sel_173;  // int32
  wire signed [31:0] sel_174;  // int32
  wire signed [31:0] sel_175;  // int32
  wire signed [31:0] sel_176;  // int32
  wire signed [31:0] sel_177;  // int32
  wire signed [31:0] sel_178;  // int32
  wire signed [31:0] sel_179;  // int32
  wire signed [31:0] sel_180;  // int32
  wire signed [31:0] s_116;  // int32
  wire signed [31:0] sel_1_42;  // int32
  wire signed [31:0] sel_181;  // int32
  wire signed [31:0] sel_1_43;  // int32
  wire signed [31:0] sel_182;  // int32
  wire signed [31:0] sel_1_44;  // int32
  wire signed [31:0] sel_183;  // int32
  wire signed [31:0] sel_184;  // int32
  wire signed [31:0] sel_185;  // int32
  reg signed [31:0] sel_1_45;  // int32
  wire [7:0] tmp_198;  // uint8
  reg  s_117;
  reg [7:0] tmp_199;  // uint8
  wire [7:0] sel_1_46;  // uint8
  reg [4:0] is_SPI_MNGR_47;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_118;
  reg  s_119;
  reg  s_120;
  reg  s_121;
  reg  s_122;
  reg  s_123;
  reg  s_124;
  reg  s_125;
  reg [15:0] tmp_200;  // uint16
  reg [15:0] tmp_201;  // uint16
  reg [15:0] tmp_202;  // uint16
  reg [15:0] tmp_203;  // uint16
  reg [15:0] tmp_204;  // uint16
  reg [15:0] tmp_205;  // uint16
  reg [15:0] tmp_206;  // uint16
  reg [15:0] tmp_207;  // uint16
  reg [15:0] tmp_208;  // uint16
  wire [15:0] tmp_209;  // uint16
  wire [15:0] tmp_210;  // uint16
  wire [15:0] tmp_211;  // uint16
  wire [15:0] tmp_212;  // uint16
  wire [15:0] tmp_213;  // uint16
  wire [15:0] tmp_214;  // uint16
  wire [15:0] tmp_215;  // uint16
  wire [15:0] tmp_216;  // uint16
  reg [15:0] tmp_217;  // uint16
  wire [7:0] functionOutput_0_6;  // uint8
  wire [7:0] functionOutput_1_6;  // uint8
  wire [7:0] functionOutput_2_6;  // uint8
  wire [7:0] functionOutput_3_6;  // uint8
  wire [7:0] functionOutput_4_6;  // uint8
  wire [7:0] functionOutput_5_6;  // uint8
  wire [7:0] functionOutput_6_6;  // uint8
  wire [7:0] functionOutput_7_6;  // uint8
  wire [7:0] functionOutput_8_6;  // uint8
  wire [7:0] functionOutput_9_6;  // uint8
  wire [7:0] functionOutput_10_6;  // uint8
  wire [7:0] functionOutput_11_6;  // uint8
  wire [7:0] functionOutput_17 [0:11];  // uint8 [12]
  wire signed [31:0] sel_186;  // int32
  wire signed [31:0] sel_187;  // int32
  wire signed [31:0] sel_188;  // int32
  wire signed [31:0] sel_189;  // int32
  wire signed [31:0] sel_190;  // int32
  wire signed [31:0] sel_191;  // int32
  wire signed [31:0] sel_192;  // int32
  wire signed [31:0] sel_193;  // int32
  wire signed [31:0] sel_194;  // int32
  wire signed [31:0] sel_195;  // int32
  wire signed [31:0] sel_196;  // int32
  wire signed [31:0] sel_197;  // int32
  wire signed [31:0] sel_198;  // int32
  wire signed [31:0] sel_199;  // int32
  wire signed [31:0] s_126;  // int32
  wire signed [31:0] sel_1_47;  // int32
  wire signed [31:0] sel_200;  // int32
  wire signed [31:0] sel_1_48;  // int32
  wire signed [31:0] sel_201;  // int32
  wire signed [31:0] sel_202;  // int32
  wire signed [31:0] sel_203;  // int32
  reg signed [31:0] sel_1_49;  // int32
  wire [7:0] tmp_218;  // uint8
  reg  s_127;
  reg [7:0] tmp_219;  // uint8
  wire [7:0] sel_1_50;  // uint8
  reg [4:0] is_SPI_MNGR_48;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  s_128;
  reg  s_129;
  reg  s_130;
  reg  s_131;
  reg  s_132;
  reg  s_133;
  reg  s_134;
  reg  s_135;
  reg [15:0] tmp_220;  // uint16
  reg [15:0] tmp_221;  // uint16
  reg [15:0] tmp_222;  // uint16
  reg [15:0] tmp_223;  // uint16
  reg [15:0] tmp_224;  // uint16
  reg [15:0] tmp_225;  // uint16
  reg [15:0] tmp_226;  // uint16
  reg [15:0] tmp_227;  // uint16
  reg [15:0] tmp_228;  // uint16
  wire [15:0] tmp_229;  // uint16
  wire [15:0] tmp_230;  // uint16
  wire [15:0] tmp_231;  // uint16
  wire [15:0] tmp_232;  // uint16
  wire [15:0] tmp_233;  // uint16
  wire [15:0] tmp_234;  // uint16
  wire [15:0] tmp_235;  // uint16
  wire [15:0] tmp_236;  // uint16
  reg [15:0] tmp_237;  // uint16
  wire [7:0] functionOutput_0_7;  // uint8
  wire [7:0] functionOutput_1_7;  // uint8
  wire [7:0] functionOutput_2_7;  // uint8
  wire [7:0] functionOutput_3_7;  // uint8
  wire [7:0] functionOutput_4_7;  // uint8
  wire [7:0] functionOutput_5_7;  // uint8
  wire [7:0] functionOutput_6_7;  // uint8
  wire [7:0] functionOutput_7_7;  // uint8
  wire [7:0] functionOutput_8_7;  // uint8
  wire [7:0] functionOutput_9_7;  // uint8
  wire [7:0] functionOutput_10_7;  // uint8
  wire [7:0] functionOutput_11_7;  // uint8
  wire [7:0] functionOutput_18 [0:11];  // uint8 [12]
  wire signed [31:0] sel_204;  // int32
  wire signed [31:0] sel_205;  // int32
  wire signed [31:0] sel_206;  // int32
  wire signed [31:0] sel_207;  // int32
  wire signed [31:0] sel_208;  // int32
  wire signed [31:0] sel_209;  // int32
  wire signed [31:0] sel_210;  // int32
  wire signed [31:0] sel_211;  // int32
  wire signed [31:0] sel_212;  // int32
  wire signed [31:0] sel_213;  // int32
  wire signed [31:0] sel_214;  // int32
  wire signed [31:0] sel_215;  // int32
  wire signed [31:0] sel_216;  // int32
  wire signed [31:0] sel_217;  // int32
  wire signed [31:0] s_136;  // int32
  wire signed [31:0] sel_1_51;  // int32
  wire signed [31:0] sel_218;  // int32
  wire signed [31:0] sel_219;  // int32
  wire signed [31:0] sel_220;  // int32
  reg signed [31:0] sel_1_52;  // int32
  wire [7:0] tmp_238;  // uint8
  wire [7:0] functionOutput_0_8;  // uint8
  wire [7:0] functionOutput_1_8;  // uint8
  wire [7:0] functionOutput_2_8;  // uint8
  wire [7:0] functionOutput_3_8;  // uint8
  wire [7:0] functionOutput_4_8;  // uint8
  wire [7:0] functionOutput_5_8;  // uint8
  wire [7:0] functionOutput_6_8;  // uint8
  wire [7:0] functionOutput_7_8;  // uint8
  wire [7:0] functionOutput_8_8;  // uint8
  wire [7:0] functionOutput_9_8;  // uint8
  wire [7:0] functionOutput_10_8;  // uint8
  wire [7:0] functionOutput_11_8;  // uint8
  wire [7:0] functionOutput_19 [0:11];  // uint8 [12]
  reg [4:0] is_SPI_MNGR_49;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_221;  // int32
  wire signed [31:0] sel_222;  // int32
  wire signed [31:0] sel_223;  // int32
  wire signed [31:0] sel_224;  // int32
  wire signed [31:0] sel_225;  // int32
  wire signed [31:0] sel_226;  // int32
  wire signed [31:0] sel_227;  // int32
  wire signed [31:0] sel_228;  // int32
  wire signed [31:0] sel_229;  // int32
  wire signed [31:0] sel_230;  // int32
  wire signed [31:0] sel_231;  // int32
  wire signed [31:0] sel_232;  // int32
  wire signed [31:0] sel_233;  // int32
  reg  s_137;
  wire signed [31:0] sel_234;  // int32
  wire signed [31:0] sel_235;  // int32
  wire signed [31:0] sel_236;  // int32
  wire signed [31:0] s_138;  // int32
  wire signed [31:0] sel_1_53;  // int32
  wire signed [31:0] sel_237;  // int32
  wire signed [31:0] sel_1_54;  // int32
  wire signed [31:0] sel_238;  // int32
  wire signed [31:0] sel_1_55;  // int32
  wire signed [31:0] sel_239;  // int32
  wire signed [31:0] sel_1_56;  // int32
  wire signed [31:0] sel_240;  // int32
  wire signed [31:0] sel_1_57;  // int32
  wire signed [31:0] sel_241;  // int32
  wire signed [31:0] sel_1_58;  // int32
  wire signed [31:0] sel_242;  // int32
  wire signed [31:0] sel_1_59;  // int32
  wire signed [31:0] sel_243;  // int32
  wire signed [31:0] sel_1_60;  // int32
  wire signed [31:0] sel_1_61;  // int32
  wire signed [31:0] sel_1_62;  // int32
  reg signed [31:0] sel_1_63;  // int32
  wire signed [31:0] sel_244;  // int32
  wire signed [31:0] sel_245;  // int32
  wire signed [31:0] sel_1_64;  // int32
  wire signed [31:0] sel_246;  // int32
  reg  tmp_239;
  reg [7:0] rd_182_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_182_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_20 [0:11];  // uint8 [12]
  wire signed [31:0] sel_247;  // int32
  reg signed [31:0] sel_1_65;  // int32
  wire [7:0] tmp_240;  // uint8
  wire [7:0] functionOutput_0_9;  // uint8
  wire [7:0] functionOutput_1_9;  // uint8
  wire [7:0] functionOutput_2_9;  // uint8
  wire [7:0] functionOutput_3_9;  // uint8
  wire [7:0] functionOutput_4_9;  // uint8
  wire [7:0] functionOutput_5_9;  // uint8
  wire [7:0] functionOutput_6_9;  // uint8
  wire [7:0] functionOutput_7_9;  // uint8
  wire [7:0] functionOutput_8_9;  // uint8
  wire [7:0] functionOutput_9_9;  // uint8
  wire [7:0] functionOutput_10_9;  // uint8
  wire [7:0] functionOutput_11_9;  // uint8
  wire [7:0] functionOutput_21 [0:11];  // uint8 [12]
  wire signed [31:0] sel_248;  // int32
  wire signed [31:0] sel_249;  // int32
  wire signed [31:0] sel_250;  // int32
  wire signed [31:0] sel_251;  // int32
  wire signed [31:0] sel_252;  // int32
  wire signed [31:0] sel_253;  // int32
  wire signed [31:0] sel_254;  // int32
  wire signed [31:0] sel_255;  // int32
  wire signed [31:0] sel_256;  // int32
  wire signed [31:0] sel_257;  // int32
  wire signed [31:0] sel_258;  // int32
  wire signed [31:0] sel_259;  // int32
  wire signed [31:0] sel_260;  // int32
  wire signed [31:0] sel_261;  // int32
  wire signed [31:0] sel_262;  // int32
  wire signed [31:0] sel_263;  // int32
  wire signed [31:0] sel_264;  // int32
  wire signed [31:0] s_139;  // int32
  wire signed [31:0] sel_1_66;  // int32
  wire signed [31:0] sel_265;  // int32
  wire signed [31:0] sel_1_67;  // int32
  wire signed [31:0] sel_266;  // int32
  wire signed [31:0] sel_1_68;  // int32
  wire signed [31:0] sel_267;  // int32
  wire signed [31:0] sel_1_69;  // int32
  wire signed [31:0] sel_268;  // int32
  wire signed [31:0] sel_1_70;  // int32
  wire signed [31:0] sel_269;  // int32
  wire signed [31:0] sel_1_71;  // int32
  wire signed [31:0] sel_270;  // int32
  wire signed [31:0] sel_1_72;  // int32
  wire signed [31:0] sel_1_73;  // int32
  wire signed [31:0] sel_1_74;  // int32
  wire signed [31:0] sel_271;  // int32
  wire signed [31:0] sel_1_75;  // int32
  wire signed [31:0] sel_272;  // int32
  wire signed [31:0] sel_273;  // int32
  reg signed [31:0] sel_1_76;  // int32
  wire [7:0] tmp_241;  // uint8
  reg  tmp_242;
  reg [7:0] tmp_243;  // uint8
  wire [7:0] sel_1_77;  // uint8
  wire [7:0] functionOutput_0_10;  // uint8
  wire [7:0] functionOutput_1_10;  // uint8
  wire [7:0] functionOutput_2_10;  // uint8
  wire [7:0] functionOutput_3_10;  // uint8
  wire [7:0] functionOutput_4_10;  // uint8
  wire [7:0] functionOutput_5_10;  // uint8
  wire [7:0] functionOutput_6_10;  // uint8
  wire [7:0] functionOutput_7_10;  // uint8
  wire [7:0] functionOutput_8_10;  // uint8
  wire [7:0] functionOutput_9_10;  // uint8
  wire [7:0] functionOutput_10_10;  // uint8
  wire [7:0] functionOutput_11_10;  // uint8
  wire [7:0] functionOutput_22 [0:11];  // uint8 [12]
  wire signed [31:0] sel_274;  // int32
  wire signed [31:0] sel_275;  // int32
  wire signed [31:0] sel_276;  // int32
  wire signed [31:0] sel_277;  // int32
  wire signed [31:0] sel_278;  // int32
  wire signed [31:0] sel_279;  // int32
  wire signed [31:0] sel_280;  // int32
  wire signed [31:0] sel_281;  // int32
  wire signed [31:0] sel_282;  // int32
  wire signed [31:0] sel_283;  // int32
  wire signed [31:0] sel_284;  // int32
  wire signed [31:0] sel_285;  // int32
  wire signed [31:0] sel_286;  // int32
  wire signed [31:0] sel_287;  // int32
  wire signed [31:0] sel_288;  // int32
  wire signed [31:0] sel_289;  // int32
  wire signed [31:0] sel_290;  // int32
  wire signed [31:0] s_140;  // int32
  wire signed [31:0] sel_1_78;  // int32
  wire signed [31:0] sel_291;  // int32
  wire signed [31:0] sel_1_79;  // int32
  wire signed [31:0] sel_292;  // int32
  wire signed [31:0] sel_1_80;  // int32
  wire signed [31:0] sel_293;  // int32
  wire signed [31:0] sel_1_81;  // int32
  wire signed [31:0] sel_294;  // int32
  wire signed [31:0] sel_1_82;  // int32
  wire signed [31:0] sel_295;  // int32
  wire signed [31:0] sel_1_83;  // int32
  wire signed [31:0] sel_1_84;  // int32
  wire signed [31:0] sel_1_85;  // int32
  wire signed [31:0] sel_296;  // int32
  wire signed [31:0] sel_1_86;  // int32
  wire signed [31:0] sel_297;  // int32
  wire signed [31:0] sel_298;  // int32
  reg signed [31:0] sel_1_87;  // int32
  wire [7:0] tmp_244;  // uint8
  reg  tmp_245;
  reg [7:0] tmp_246;  // uint8
  wire [7:0] sel_1_88;  // uint8
  wire [7:0] functionOutput_0_11;  // uint8
  wire [7:0] functionOutput_1_11;  // uint8
  wire [7:0] functionOutput_2_11;  // uint8
  wire [7:0] functionOutput_3_11;  // uint8
  wire [7:0] functionOutput_4_11;  // uint8
  wire [7:0] functionOutput_5_11;  // uint8
  wire [7:0] functionOutput_6_11;  // uint8
  wire [7:0] functionOutput_7_11;  // uint8
  wire [7:0] functionOutput_8_11;  // uint8
  wire [7:0] functionOutput_9_11;  // uint8
  wire [7:0] functionOutput_10_11;  // uint8
  wire [7:0] functionOutput_11_11;  // uint8
  wire [7:0] functionOutput_23 [0:11];  // uint8 [12]
  wire signed [31:0] sel_299;  // int32
  wire signed [31:0] sel_300;  // int32
  wire signed [31:0] sel_301;  // int32
  wire signed [31:0] sel_302;  // int32
  wire signed [31:0] sel_303;  // int32
  wire signed [31:0] sel_304;  // int32
  wire signed [31:0] sel_305;  // int32
  wire signed [31:0] sel_306;  // int32
  wire signed [31:0] sel_307;  // int32
  wire signed [31:0] sel_308;  // int32
  wire signed [31:0] sel_309;  // int32
  wire signed [31:0] sel_310;  // int32
  wire signed [31:0] sel_311;  // int32
  wire signed [31:0] sel_312;  // int32
  wire signed [31:0] sel_313;  // int32
  wire signed [31:0] sel_314;  // int32
  wire signed [31:0] sel_315;  // int32
  wire signed [31:0] s_141;  // int32
  wire signed [31:0] sel_1_89;  // int32
  wire signed [31:0] sel_316;  // int32
  wire signed [31:0] sel_1_90;  // int32
  wire signed [31:0] sel_317;  // int32
  wire signed [31:0] sel_1_91;  // int32
  wire signed [31:0] sel_318;  // int32
  wire signed [31:0] sel_1_92;  // int32
  wire signed [31:0] sel_319;  // int32
  wire signed [31:0] sel_1_93;  // int32
  wire signed [31:0] sel_1_94;  // int32
  wire signed [31:0] sel_1_95;  // int32
  wire signed [31:0] sel_320;  // int32
  wire signed [31:0] sel_1_96;  // int32
  wire signed [31:0] sel_321;  // int32
  wire signed [31:0] sel_322;  // int32
  reg signed [31:0] sel_1_97;  // int32
  wire [7:0] tmp_247;  // uint8
  reg  tmp_248;
  reg [7:0] tmp_249;  // uint8
  wire [7:0] sel_1_98;  // uint8
  wire [7:0] functionOutput_0_12;  // uint8
  wire [7:0] functionOutput_1_12;  // uint8
  wire [7:0] functionOutput_2_12;  // uint8
  wire [7:0] functionOutput_3_12;  // uint8
  wire [7:0] functionOutput_4_12;  // uint8
  wire [7:0] functionOutput_5_12;  // uint8
  wire [7:0] functionOutput_6_12;  // uint8
  wire [7:0] functionOutput_7_12;  // uint8
  wire [7:0] functionOutput_8_12;  // uint8
  wire [7:0] functionOutput_9_12;  // uint8
  wire [7:0] functionOutput_10_12;  // uint8
  wire [7:0] functionOutput_11_12;  // uint8
  wire [7:0] functionOutput_24 [0:11];  // uint8 [12]
  wire signed [31:0] sel_323;  // int32
  wire signed [31:0] sel_324;  // int32
  wire signed [31:0] sel_325;  // int32
  wire signed [31:0] sel_326;  // int32
  wire signed [31:0] sel_327;  // int32
  wire signed [31:0] sel_328;  // int32
  wire signed [31:0] sel_329;  // int32
  wire signed [31:0] sel_330;  // int32
  wire signed [31:0] sel_331;  // int32
  wire signed [31:0] sel_332;  // int32
  wire signed [31:0] sel_333;  // int32
  wire signed [31:0] sel_334;  // int32
  wire signed [31:0] sel_335;  // int32
  wire signed [31:0] sel_336;  // int32
  wire signed [31:0] sel_337;  // int32
  wire signed [31:0] sel_338;  // int32
  wire signed [31:0] sel_339;  // int32
  wire signed [31:0] s_142;  // int32
  wire signed [31:0] sel_1_99;  // int32
  wire signed [31:0] sel_340;  // int32
  wire signed [31:0] sel_1_100;  // int32
  wire signed [31:0] sel_341;  // int32
  wire signed [31:0] sel_1_101;  // int32
  wire signed [31:0] sel_342;  // int32
  wire signed [31:0] sel_1_102;  // int32
  wire signed [31:0] sel_1_103;  // int32
  wire signed [31:0] sel_1_104;  // int32
  wire signed [31:0] sel_343;  // int32
  wire signed [31:0] sel_1_105;  // int32
  wire signed [31:0] sel_344;  // int32
  wire signed [31:0] sel_345;  // int32
  reg signed [31:0] sel_1_106;  // int32
  wire [7:0] tmp_250;  // uint8
  reg  tmp_251;
  reg [7:0] tmp_252;  // uint8
  wire [7:0] sel_1_107;  // uint8
  wire [7:0] functionOutput_0_13;  // uint8
  wire [7:0] functionOutput_1_13;  // uint8
  wire [7:0] functionOutput_2_13;  // uint8
  wire [7:0] functionOutput_3_13;  // uint8
  wire [7:0] functionOutput_4_13;  // uint8
  wire [7:0] functionOutput_5_13;  // uint8
  wire [7:0] functionOutput_6_13;  // uint8
  wire [7:0] functionOutput_7_13;  // uint8
  wire [7:0] functionOutput_8_13;  // uint8
  wire [7:0] functionOutput_9_13;  // uint8
  wire [7:0] functionOutput_10_13;  // uint8
  wire [7:0] functionOutput_11_13;  // uint8
  wire [7:0] functionOutput_25 [0:11];  // uint8 [12]
  wire signed [31:0] sel_346;  // int32
  wire signed [31:0] sel_347;  // int32
  wire signed [31:0] sel_348;  // int32
  wire signed [31:0] sel_349;  // int32
  wire signed [31:0] sel_350;  // int32
  wire signed [31:0] sel_351;  // int32
  wire signed [31:0] sel_352;  // int32
  wire signed [31:0] sel_353;  // int32
  wire signed [31:0] sel_354;  // int32
  wire signed [31:0] sel_355;  // int32
  wire signed [31:0] sel_356;  // int32
  wire signed [31:0] sel_357;  // int32
  wire signed [31:0] sel_358;  // int32
  wire signed [31:0] sel_359;  // int32
  wire signed [31:0] sel_360;  // int32
  wire signed [31:0] sel_361;  // int32
  wire signed [31:0] sel_362;  // int32
  wire signed [31:0] s_143;  // int32
  wire signed [31:0] sel_1_108;  // int32
  wire signed [31:0] sel_363;  // int32
  wire signed [31:0] sel_1_109;  // int32
  wire signed [31:0] sel_364;  // int32
  wire signed [31:0] sel_1_110;  // int32
  wire signed [31:0] sel_1_111;  // int32
  wire signed [31:0] sel_1_112;  // int32
  wire signed [31:0] sel_365;  // int32
  wire signed [31:0] sel_1_113;  // int32
  wire signed [31:0] sel_366;  // int32
  wire signed [31:0] sel_367;  // int32
  reg signed [31:0] sel_1_114;  // int32
  wire [7:0] tmp_253;  // uint8
  reg  tmp_254;
  reg [7:0] tmp_255;  // uint8
  wire [7:0] sel_1_115;  // uint8
  wire [7:0] functionOutput_0_14;  // uint8
  wire [7:0] functionOutput_1_14;  // uint8
  wire [7:0] functionOutput_2_14;  // uint8
  wire [7:0] functionOutput_3_14;  // uint8
  wire [7:0] functionOutput_4_14;  // uint8
  wire [7:0] functionOutput_5_14;  // uint8
  wire [7:0] functionOutput_6_14;  // uint8
  wire [7:0] functionOutput_7_14;  // uint8
  wire [7:0] functionOutput_8_14;  // uint8
  wire [7:0] functionOutput_9_14;  // uint8
  wire [7:0] functionOutput_10_14;  // uint8
  wire [7:0] functionOutput_11_14;  // uint8
  wire [7:0] functionOutput_26 [0:11];  // uint8 [12]
  wire signed [31:0] sel_368;  // int32
  wire signed [31:0] sel_369;  // int32
  wire signed [31:0] sel_370;  // int32
  wire signed [31:0] sel_371;  // int32
  wire signed [31:0] sel_372;  // int32
  wire signed [31:0] sel_373;  // int32
  wire signed [31:0] sel_374;  // int32
  wire signed [31:0] sel_375;  // int32
  wire signed [31:0] sel_376;  // int32
  wire signed [31:0] sel_377;  // int32
  wire signed [31:0] sel_378;  // int32
  wire signed [31:0] sel_379;  // int32
  wire signed [31:0] sel_380;  // int32
  wire signed [31:0] sel_381;  // int32
  wire signed [31:0] sel_382;  // int32
  wire signed [31:0] sel_383;  // int32
  wire signed [31:0] sel_384;  // int32
  wire signed [31:0] s_144;  // int32
  wire signed [31:0] sel_1_116;  // int32
  wire signed [31:0] sel_385;  // int32
  wire signed [31:0] sel_1_117;  // int32
  wire signed [31:0] sel_1_118;  // int32
  wire signed [31:0] sel_1_119;  // int32
  wire signed [31:0] sel_386;  // int32
  wire signed [31:0] sel_1_120;  // int32
  wire signed [31:0] sel_387;  // int32
  wire signed [31:0] sel_388;  // int32
  reg signed [31:0] sel_1_121;  // int32
  wire [7:0] tmp_256;  // uint8
  reg  tmp_257;
  reg [7:0] tmp_258;  // uint8
  wire [7:0] sel_1_122;  // uint8
  wire [7:0] functionOutput_0_15;  // uint8
  wire [7:0] functionOutput_1_15;  // uint8
  wire [7:0] functionOutput_2_15;  // uint8
  wire [7:0] functionOutput_3_15;  // uint8
  wire [7:0] functionOutput_4_15;  // uint8
  wire [7:0] functionOutput_5_15;  // uint8
  wire [7:0] functionOutput_6_15;  // uint8
  wire [7:0] functionOutput_7_15;  // uint8
  wire [7:0] functionOutput_8_15;  // uint8
  wire [7:0] functionOutput_9_15;  // uint8
  wire [7:0] functionOutput_10_15;  // uint8
  wire [7:0] functionOutput_11_15;  // uint8
  wire [7:0] functionOutput_27 [0:11];  // uint8 [12]
  wire signed [31:0] sel_389;  // int32
  wire signed [31:0] sel_390;  // int32
  wire signed [31:0] sel_391;  // int32
  wire signed [31:0] sel_392;  // int32
  wire signed [31:0] sel_393;  // int32
  wire signed [31:0] sel_394;  // int32
  wire signed [31:0] sel_395;  // int32
  wire signed [31:0] sel_396;  // int32
  wire signed [31:0] sel_397;  // int32
  wire signed [31:0] sel_398;  // int32
  wire signed [31:0] sel_399;  // int32
  wire signed [31:0] sel_400;  // int32
  wire signed [31:0] sel_401;  // int32
  wire signed [31:0] sel_402;  // int32
  wire signed [31:0] sel_403;  // int32
  wire signed [31:0] sel_404;  // int32
  wire signed [31:0] sel_405;  // int32
  wire signed [31:0] s_145;  // int32
  wire signed [31:0] sel_1_123;  // int32
  wire signed [31:0] sel_1_124;  // int32
  wire signed [31:0] sel_1_125;  // int32
  wire signed [31:0] sel_406;  // int32
  wire signed [31:0] sel_1_126;  // int32
  wire signed [31:0] sel_407;  // int32
  wire signed [31:0] sel_408;  // int32
  reg signed [31:0] sel_1_127;  // int32
  wire [7:0] tmp_259;  // uint8
  wire [7:0] sel_409;  // uint8
  reg [7:0] tmp_260;  // uint8
  wire [7:0] sel_1_128;  // uint8
  reg [7:0] tmp_261;  // uint8
  wire [7:0] sel_1_129;  // uint8
  wire [7:0] sel_410;  // uint8
  reg [4:0] is_SPI_MNGR_50;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_411;
  wire sel_412;
  wire sel_413;
  wire sel_414;
  wire sel_415;
  wire sel_416;
  wire sel_417;
  wire sel_418;
  wire sel_419;
  wire sel_420;
  wire sel_421;
  wire sel_422;
  wire sel_423;
  wire sel_424;
  wire s_146;
  wire sel_2_5;
  wire s_147;
  wire sel_2_6;
  wire s_148;
  wire sel_2_7;
  wire s_149;
  wire sel_2_8;
  wire s_150;
  wire sel_2_9;
  wire s_151;
  wire sel_2_10;
  wire s_152;
  wire sel_2_11;
  wire s_153;
  wire sel_2_12;
  reg  s_154;
  wire sel_425;
  wire sel_426;
  wire sel_427;
  wire s_155;
  wire sel_2_13;
  wire s_156;
  wire sel_2_14;
  wire s_157;
  wire sel_2_15;
  wire s_158;
  wire sel_2_16;
  wire s_159;
  wire sel_2_17;
  wire s_160;
  wire sel_2_18;
  wire s_161;
  wire sel_2_19;
  wire s_162;
  wire sel_2_20;
  wire sel_2_21;
  wire sel_2_22;
  reg  sel_2_23;
  reg  sel_2_24;
  wire sel_428;
  wire sel_2_25;
  wire sel_429;
  reg [4:0] is_SPI_MNGR_51;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_430;  // uint8
  wire [7:0] sel_431;  // uint8
  wire [7:0] sel_432;  // uint8
  wire [7:0] sel_433;  // uint8
  wire [7:0] sel_434;  // uint8
  wire [7:0] sel_435;  // uint8
  wire [7:0] sel_436;  // uint8
  wire [7:0] sel_437;  // uint8
  wire [7:0] sel_438;  // uint8
  wire [7:0] sel_439;  // uint8
  wire [7:0] sel_440;  // uint8
  wire [7:0] sel_441;  // uint8
  reg  s_163;
  wire signed [31:0] sel_442;  // int32
  wire signed [31:0] sel_443;  // int32
  wire signed [31:0] sel_444;  // int32
  wire signed [31:0] sel_445;  // int32
  wire signed [31:0] sel_446;  // int32
  wire signed [31:0] sel_447;  // int32
  wire signed [31:0] sel_448;  // int32
  wire signed [31:0] sel_449;  // int32
  wire signed [31:0] sel_450;  // int32
  wire signed [31:0] sel_451;  // int32
  wire signed [31:0] sel_452;  // int32
  wire signed [31:0] sel_453;  // int32
  wire signed [31:0] sel_454;  // int32
  wire signed [31:0] sel_455;  // int32
  wire signed [31:0] s_164;  // int32
  wire signed [31:0] sel_1_130;  // int32
  wire signed [31:0] sel_456;  // int32
  wire signed [31:0] sel_1_131;  // int32
  wire signed [31:0] sel_457;  // int32
  wire signed [31:0] sel_1_132;  // int32
  wire signed [31:0] sel_458;  // int32
  wire signed [31:0] sel_1_133;  // int32
  wire signed [31:0] sel_459;  // int32
  wire signed [31:0] sel_1_134;  // int32
  wire signed [31:0] sel_460;  // int32
  wire signed [31:0] sel_1_135;  // int32
  wire signed [31:0] sel_461;  // int32
  wire signed [31:0] sel_1_136;  // int32
  wire signed [31:0] sel_462;  // int32
  wire signed [31:0] sel_1_137;  // int32
  wire signed [31:0] sel_463;  // int32
  wire signed [31:0] sel_464;  // int32
  wire signed [31:0] sel_465;  // int32
  reg signed [31:0] sel_1_138;  // int32
  wire [7:0] tmp_262;  // uint8
  wire signed [31:0] sel_466;  // int32
  wire signed [31:0] sel_467;  // int32
  wire signed [31:0] sel_468;  // int32
  wire signed [31:0] sel_469;  // int32
  wire signed [31:0] sel_470;  // int32
  wire signed [31:0] sel_471;  // int32
  wire signed [31:0] sel_472;  // int32
  wire signed [31:0] sel_473;  // int32
  wire signed [31:0] sel_474;  // int32
  wire signed [31:0] sel_475;  // int32
  wire signed [31:0] sel_476;  // int32
  wire signed [31:0] sel_477;  // int32
  wire signed [31:0] sel_478;  // int32
  wire signed [31:0] sel_479;  // int32
  wire signed [31:0] s_165;  // int32
  wire signed [31:0] sel_1_139;  // int32
  wire signed [31:0] sel_480;  // int32
  wire signed [31:0] sel_1_140;  // int32
  wire signed [31:0] sel_481;  // int32
  wire signed [31:0] sel_1_141;  // int32
  wire signed [31:0] sel_482;  // int32
  wire signed [31:0] sel_1_142;  // int32
  wire signed [31:0] sel_483;  // int32
  wire signed [31:0] sel_1_143;  // int32
  wire signed [31:0] sel_484;  // int32
  wire signed [31:0] sel_1_144;  // int32
  wire signed [31:0] sel_485;  // int32
  wire signed [31:0] sel_1_145;  // int32
  wire signed [31:0] sel_486;  // int32
  wire signed [31:0] sel_487;  // int32
  wire signed [31:0] sel_488;  // int32
  reg signed [31:0] sel_1_146;  // int32
  wire [7:0] tmp_263;  // uint8
  wire [7:0] sel_1_147;  // uint8
  wire signed [31:0] sel_489;  // int32
  wire signed [31:0] sel_490;  // int32
  wire signed [31:0] sel_491;  // int32
  wire signed [31:0] sel_492;  // int32
  wire signed [31:0] sel_493;  // int32
  wire signed [31:0] sel_494;  // int32
  wire signed [31:0] sel_495;  // int32
  wire signed [31:0] sel_496;  // int32
  wire signed [31:0] sel_497;  // int32
  wire signed [31:0] sel_498;  // int32
  wire signed [31:0] sel_499;  // int32
  wire signed [31:0] sel_500;  // int32
  wire signed [31:0] sel_501;  // int32
  wire signed [31:0] sel_502;  // int32
  wire signed [31:0] s_166;  // int32
  wire signed [31:0] sel_1_148;  // int32
  wire signed [31:0] sel_503;  // int32
  wire signed [31:0] sel_1_149;  // int32
  wire signed [31:0] sel_504;  // int32
  wire signed [31:0] sel_1_150;  // int32
  wire signed [31:0] sel_505;  // int32
  wire signed [31:0] sel_1_151;  // int32
  wire signed [31:0] sel_506;  // int32
  wire signed [31:0] sel_1_152;  // int32
  wire signed [31:0] sel_507;  // int32
  wire signed [31:0] sel_1_153;  // int32
  wire signed [31:0] sel_508;  // int32
  wire signed [31:0] sel_509;  // int32
  wire signed [31:0] sel_510;  // int32
  reg signed [31:0] sel_1_154;  // int32
  wire [7:0] tmp_264;  // uint8
  wire [7:0] sel_1_155;  // uint8
  wire signed [31:0] sel_511;  // int32
  wire signed [31:0] sel_512;  // int32
  wire signed [31:0] sel_513;  // int32
  wire signed [31:0] sel_514;  // int32
  wire signed [31:0] sel_515;  // int32
  wire signed [31:0] sel_516;  // int32
  wire signed [31:0] sel_517;  // int32
  wire signed [31:0] sel_518;  // int32
  wire signed [31:0] sel_519;  // int32
  wire signed [31:0] sel_520;  // int32
  wire signed [31:0] sel_521;  // int32
  wire signed [31:0] sel_522;  // int32
  wire signed [31:0] sel_523;  // int32
  wire signed [31:0] sel_524;  // int32
  wire signed [31:0] s_167;  // int32
  wire signed [31:0] sel_1_156;  // int32
  wire signed [31:0] sel_525;  // int32
  wire signed [31:0] sel_1_157;  // int32
  wire signed [31:0] sel_526;  // int32
  wire signed [31:0] sel_1_158;  // int32
  wire signed [31:0] sel_527;  // int32
  wire signed [31:0] sel_1_159;  // int32
  wire signed [31:0] sel_528;  // int32
  wire signed [31:0] sel_1_160;  // int32
  wire signed [31:0] sel_529;  // int32
  wire signed [31:0] sel_530;  // int32
  wire signed [31:0] sel_531;  // int32
  reg signed [31:0] sel_1_161;  // int32
  wire [7:0] tmp_265;  // uint8
  wire [7:0] sel_1_162;  // uint8
  reg [7:0] sel_1_163;  // uint8
  wire signed [31:0] sel_532;  // int32
  wire signed [31:0] sel_533;  // int32
  wire signed [31:0] sel_534;  // int32
  wire signed [31:0] sel_535;  // int32
  wire signed [31:0] sel_536;  // int32
  wire signed [31:0] sel_537;  // int32
  wire signed [31:0] sel_538;  // int32
  wire signed [31:0] sel_539;  // int32
  wire signed [31:0] sel_540;  // int32
  wire signed [31:0] sel_541;  // int32
  wire signed [31:0] sel_542;  // int32
  wire signed [31:0] sel_543;  // int32
  wire signed [31:0] sel_544;  // int32
  wire signed [31:0] sel_545;  // int32
  wire signed [31:0] s_168;  // int32
  wire signed [31:0] sel_1_164;  // int32
  wire signed [31:0] sel_546;  // int32
  wire signed [31:0] sel_1_165;  // int32
  wire signed [31:0] sel_547;  // int32
  wire signed [31:0] sel_1_166;  // int32
  wire signed [31:0] sel_548;  // int32
  wire signed [31:0] sel_1_167;  // int32
  wire signed [31:0] sel_549;  // int32
  wire signed [31:0] sel_550;  // int32
  wire signed [31:0] sel_551;  // int32
  reg signed [31:0] sel_1_168;  // int32
  wire [7:0] tmp_266;  // uint8
  reg  s_169;
  reg [7:0] tmp_267;  // uint8
  wire [7:0] sel_1_169;  // uint8
  wire signed [31:0] sel_552;  // int32
  wire signed [31:0] sel_553;  // int32
  wire signed [31:0] sel_554;  // int32
  wire signed [31:0] sel_555;  // int32
  wire signed [31:0] sel_556;  // int32
  wire signed [31:0] sel_557;  // int32
  wire signed [31:0] sel_558;  // int32
  wire signed [31:0] sel_559;  // int32
  wire signed [31:0] sel_560;  // int32
  wire signed [31:0] sel_561;  // int32
  wire signed [31:0] sel_562;  // int32
  wire signed [31:0] sel_563;  // int32
  wire signed [31:0] sel_564;  // int32
  wire signed [31:0] sel_565;  // int32
  wire signed [31:0] s_170;  // int32
  wire signed [31:0] sel_1_170;  // int32
  wire signed [31:0] sel_566;  // int32
  wire signed [31:0] sel_1_171;  // int32
  wire signed [31:0] sel_567;  // int32
  wire signed [31:0] sel_1_172;  // int32
  wire signed [31:0] sel_568;  // int32
  wire signed [31:0] sel_569;  // int32
  wire signed [31:0] sel_570;  // int32
  reg signed [31:0] sel_1_173;  // int32
  wire [7:0] tmp_268;  // uint8
  reg  s_171;
  reg [7:0] tmp_269;  // uint8
  wire [7:0] sel_1_174;  // uint8
  wire signed [31:0] sel_571;  // int32
  wire signed [31:0] sel_572;  // int32
  wire signed [31:0] sel_573;  // int32
  wire signed [31:0] sel_574;  // int32
  wire signed [31:0] sel_575;  // int32
  wire signed [31:0] sel_576;  // int32
  wire signed [31:0] sel_577;  // int32
  wire signed [31:0] sel_578;  // int32
  wire signed [31:0] sel_579;  // int32
  wire signed [31:0] sel_580;  // int32
  wire signed [31:0] sel_581;  // int32
  wire signed [31:0] sel_582;  // int32
  wire signed [31:0] sel_583;  // int32
  wire signed [31:0] sel_584;  // int32
  wire signed [31:0] s_172;  // int32
  wire signed [31:0] sel_1_175;  // int32
  wire signed [31:0] sel_585;  // int32
  wire signed [31:0] sel_1_176;  // int32
  wire signed [31:0] sel_586;  // int32
  wire signed [31:0] sel_587;  // int32
  wire signed [31:0] sel_588;  // int32
  reg signed [31:0] sel_1_177;  // int32
  wire [7:0] tmp_270;  // uint8
  reg  s_173;
  reg [7:0] tmp_271;  // uint8
  wire [7:0] sel_1_178;  // uint8
  wire signed [31:0] sel_589;  // int32
  wire signed [31:0] sel_590;  // int32
  wire signed [31:0] sel_591;  // int32
  wire signed [31:0] sel_592;  // int32
  wire signed [31:0] sel_593;  // int32
  wire signed [31:0] sel_594;  // int32
  wire signed [31:0] sel_595;  // int32
  wire signed [31:0] sel_596;  // int32
  wire signed [31:0] sel_597;  // int32
  wire signed [31:0] sel_598;  // int32
  wire signed [31:0] sel_599;  // int32
  wire signed [31:0] sel_600;  // int32
  wire signed [31:0] sel_601;  // int32
  wire signed [31:0] sel_602;  // int32
  wire signed [31:0] s_174;  // int32
  wire signed [31:0] sel_1_179;  // int32
  wire signed [31:0] sel_603;  // int32
  wire signed [31:0] sel_604;  // int32
  wire signed [31:0] sel_605;  // int32
  reg signed [31:0] sel_1_180;  // int32
  wire [7:0] tmp_272;  // uint8
  reg [4:0] is_SPI_MNGR_52;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_606;  // int32
  wire signed [31:0] sel_607;  // int32
  wire signed [31:0] sel_608;  // int32
  wire signed [31:0] sel_609;  // int32
  wire signed [31:0] sel_610;  // int32
  wire signed [31:0] sel_611;  // int32
  wire signed [31:0] sel_612;  // int32
  wire signed [31:0] sel_613;  // int32
  wire signed [31:0] sel_614;  // int32
  wire signed [31:0] sel_615;  // int32
  wire signed [31:0] sel_616;  // int32
  wire signed [31:0] sel_617;  // int32
  wire signed [31:0] sel_618;  // int32
  reg  s_175;
  wire signed [31:0] sel_619;  // int32
  wire signed [31:0] sel_620;  // int32
  wire signed [31:0] sel_621;  // int32
  wire signed [31:0] s_176;  // int32
  wire signed [31:0] sel_1_181;  // int32
  wire signed [31:0] sel_622;  // int32
  wire signed [31:0] sel_1_182;  // int32
  wire signed [31:0] sel_623;  // int32
  wire signed [31:0] sel_1_183;  // int32
  wire signed [31:0] sel_624;  // int32
  wire signed [31:0] sel_1_184;  // int32
  wire signed [31:0] sel_625;  // int32
  wire signed [31:0] sel_1_185;  // int32
  wire signed [31:0] sel_626;  // int32
  wire signed [31:0] sel_1_186;  // int32
  wire signed [31:0] sel_627;  // int32
  wire signed [31:0] sel_1_187;  // int32
  wire signed [31:0] sel_628;  // int32
  wire signed [31:0] sel_1_188;  // int32
  wire signed [31:0] sel_1_189;  // int32
  wire signed [31:0] sel_1_190;  // int32
  reg signed [31:0] sel_1_191;  // int32
  wire signed [31:0] sel_629;  // int32
  wire signed [31:0] sel_630;  // int32
  wire signed [31:0] sel_1_192;  // int32
  wire signed [31:0] sel_631;  // int32
  reg  tmp_273;
  reg [7:0] rd_214_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_214_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_28 [0:11];  // uint8 [12]
  wire signed [31:0] sel_632;  // int32
  reg signed [31:0] sel_1_193;  // int32
  wire [7:0] tmp_274;  // uint8
  wire signed [31:0] sel_633;  // int32
  wire signed [31:0] sel_634;  // int32
  wire signed [31:0] sel_635;  // int32
  wire signed [31:0] sel_636;  // int32
  wire signed [31:0] sel_637;  // int32
  wire signed [31:0] sel_638;  // int32
  wire signed [31:0] sel_639;  // int32
  wire signed [31:0] sel_640;  // int32
  wire signed [31:0] sel_641;  // int32
  wire signed [31:0] sel_642;  // int32
  wire signed [31:0] sel_643;  // int32
  wire signed [31:0] sel_644;  // int32
  wire signed [31:0] sel_645;  // int32
  wire signed [31:0] sel_646;  // int32
  wire signed [31:0] sel_647;  // int32
  wire signed [31:0] sel_648;  // int32
  wire signed [31:0] sel_649;  // int32
  wire signed [31:0] s_177;  // int32
  wire signed [31:0] sel_1_194;  // int32
  wire signed [31:0] sel_650;  // int32
  wire signed [31:0] sel_1_195;  // int32
  wire signed [31:0] sel_651;  // int32
  wire signed [31:0] sel_1_196;  // int32
  wire signed [31:0] sel_652;  // int32
  wire signed [31:0] sel_1_197;  // int32
  wire signed [31:0] sel_653;  // int32
  wire signed [31:0] sel_1_198;  // int32
  wire signed [31:0] sel_654;  // int32
  wire signed [31:0] sel_1_199;  // int32
  wire signed [31:0] sel_655;  // int32
  wire signed [31:0] sel_1_200;  // int32
  wire signed [31:0] sel_1_201;  // int32
  wire signed [31:0] sel_1_202;  // int32
  wire signed [31:0] sel_656;  // int32
  wire signed [31:0] sel_1_203;  // int32
  wire signed [31:0] sel_657;  // int32
  wire signed [31:0] sel_658;  // int32
  reg signed [31:0] sel_1_204;  // int32
  wire [7:0] tmp_275;  // uint8
  reg  tmp_276;
  reg [7:0] tmp_277;  // uint8
  wire [7:0] sel_1_205;  // uint8
  wire signed [31:0] sel_659;  // int32
  wire signed [31:0] sel_660;  // int32
  wire signed [31:0] sel_661;  // int32
  wire signed [31:0] sel_662;  // int32
  wire signed [31:0] sel_663;  // int32
  wire signed [31:0] sel_664;  // int32
  wire signed [31:0] sel_665;  // int32
  wire signed [31:0] sel_666;  // int32
  wire signed [31:0] sel_667;  // int32
  wire signed [31:0] sel_668;  // int32
  wire signed [31:0] sel_669;  // int32
  wire signed [31:0] sel_670;  // int32
  wire signed [31:0] sel_671;  // int32
  wire signed [31:0] sel_672;  // int32
  wire signed [31:0] sel_673;  // int32
  wire signed [31:0] sel_674;  // int32
  wire signed [31:0] sel_675;  // int32
  wire signed [31:0] s_178;  // int32
  wire signed [31:0] sel_1_206;  // int32
  wire signed [31:0] sel_676;  // int32
  wire signed [31:0] sel_1_207;  // int32
  wire signed [31:0] sel_677;  // int32
  wire signed [31:0] sel_1_208;  // int32
  wire signed [31:0] sel_678;  // int32
  wire signed [31:0] sel_1_209;  // int32
  wire signed [31:0] sel_679;  // int32
  wire signed [31:0] sel_1_210;  // int32
  wire signed [31:0] sel_680;  // int32
  wire signed [31:0] sel_1_211;  // int32
  wire signed [31:0] sel_1_212;  // int32
  wire signed [31:0] sel_1_213;  // int32
  wire signed [31:0] sel_681;  // int32
  wire signed [31:0] sel_1_214;  // int32
  wire signed [31:0] sel_682;  // int32
  wire signed [31:0] sel_683;  // int32
  reg signed [31:0] sel_1_215;  // int32
  wire [7:0] tmp_278;  // uint8
  reg  tmp_279;
  reg [7:0] tmp_280;  // uint8
  wire [7:0] sel_1_216;  // uint8
  wire signed [31:0] sel_684;  // int32
  wire signed [31:0] sel_685;  // int32
  wire signed [31:0] sel_686;  // int32
  wire signed [31:0] sel_687;  // int32
  wire signed [31:0] sel_688;  // int32
  wire signed [31:0] sel_689;  // int32
  wire signed [31:0] sel_690;  // int32
  wire signed [31:0] sel_691;  // int32
  wire signed [31:0] sel_692;  // int32
  wire signed [31:0] sel_693;  // int32
  wire signed [31:0] sel_694;  // int32
  wire signed [31:0] sel_695;  // int32
  wire signed [31:0] sel_696;  // int32
  wire signed [31:0] sel_697;  // int32
  wire signed [31:0] sel_698;  // int32
  wire signed [31:0] sel_699;  // int32
  wire signed [31:0] sel_700;  // int32
  wire signed [31:0] s_179;  // int32
  wire signed [31:0] sel_1_217;  // int32
  wire signed [31:0] sel_701;  // int32
  wire signed [31:0] sel_1_218;  // int32
  wire signed [31:0] sel_702;  // int32
  wire signed [31:0] sel_1_219;  // int32
  wire signed [31:0] sel_703;  // int32
  wire signed [31:0] sel_1_220;  // int32
  wire signed [31:0] sel_704;  // int32
  wire signed [31:0] sel_1_221;  // int32
  wire signed [31:0] sel_1_222;  // int32
  wire signed [31:0] sel_1_223;  // int32
  wire signed [31:0] sel_705;  // int32
  wire signed [31:0] sel_1_224;  // int32
  wire signed [31:0] sel_706;  // int32
  wire signed [31:0] sel_707;  // int32
  reg signed [31:0] sel_1_225;  // int32
  wire [7:0] tmp_281;  // uint8
  reg  tmp_282;
  reg [7:0] tmp_283;  // uint8
  wire [7:0] sel_1_226;  // uint8
  wire signed [31:0] sel_708;  // int32
  wire signed [31:0] sel_709;  // int32
  wire signed [31:0] sel_710;  // int32
  wire signed [31:0] sel_711;  // int32
  wire signed [31:0] sel_712;  // int32
  wire signed [31:0] sel_713;  // int32
  wire signed [31:0] sel_714;  // int32
  wire signed [31:0] sel_715;  // int32
  wire signed [31:0] sel_716;  // int32
  wire signed [31:0] sel_717;  // int32
  wire signed [31:0] sel_718;  // int32
  wire signed [31:0] sel_719;  // int32
  wire signed [31:0] sel_720;  // int32
  wire signed [31:0] sel_721;  // int32
  wire signed [31:0] sel_722;  // int32
  wire signed [31:0] sel_723;  // int32
  wire signed [31:0] sel_724;  // int32
  wire signed [31:0] s_180;  // int32
  wire signed [31:0] sel_1_227;  // int32
  wire signed [31:0] sel_725;  // int32
  wire signed [31:0] sel_1_228;  // int32
  wire signed [31:0] sel_726;  // int32
  wire signed [31:0] sel_1_229;  // int32
  wire signed [31:0] sel_727;  // int32
  wire signed [31:0] sel_1_230;  // int32
  wire signed [31:0] sel_1_231;  // int32
  wire signed [31:0] sel_1_232;  // int32
  wire signed [31:0] sel_728;  // int32
  wire signed [31:0] sel_1_233;  // int32
  wire signed [31:0] sel_729;  // int32
  wire signed [31:0] sel_730;  // int32
  reg signed [31:0] sel_1_234;  // int32
  wire [7:0] tmp_284;  // uint8
  reg  tmp_285;
  reg [7:0] tmp_286;  // uint8
  wire [7:0] sel_1_235;  // uint8
  wire signed [31:0] sel_731;  // int32
  wire signed [31:0] sel_732;  // int32
  wire signed [31:0] sel_733;  // int32
  wire signed [31:0] sel_734;  // int32
  wire signed [31:0] sel_735;  // int32
  wire signed [31:0] sel_736;  // int32
  wire signed [31:0] sel_737;  // int32
  wire signed [31:0] sel_738;  // int32
  wire signed [31:0] sel_739;  // int32
  wire signed [31:0] sel_740;  // int32
  wire signed [31:0] sel_741;  // int32
  wire signed [31:0] sel_742;  // int32
  wire signed [31:0] sel_743;  // int32
  wire signed [31:0] sel_744;  // int32
  wire signed [31:0] sel_745;  // int32
  wire signed [31:0] sel_746;  // int32
  wire signed [31:0] sel_747;  // int32
  wire signed [31:0] s_181;  // int32
  wire signed [31:0] sel_1_236;  // int32
  wire signed [31:0] sel_748;  // int32
  wire signed [31:0] sel_1_237;  // int32
  wire signed [31:0] sel_749;  // int32
  wire signed [31:0] sel_1_238;  // int32
  wire signed [31:0] sel_1_239;  // int32
  wire signed [31:0] sel_1_240;  // int32
  wire signed [31:0] sel_750;  // int32
  wire signed [31:0] sel_1_241;  // int32
  wire signed [31:0] sel_751;  // int32
  wire signed [31:0] sel_752;  // int32
  reg signed [31:0] sel_1_242;  // int32
  wire [7:0] tmp_287;  // uint8
  reg  tmp_288;
  reg [7:0] tmp_289;  // uint8
  wire [7:0] sel_1_243;  // uint8
  wire signed [31:0] sel_753;  // int32
  wire signed [31:0] sel_754;  // int32
  wire signed [31:0] sel_755;  // int32
  wire signed [31:0] sel_756;  // int32
  wire signed [31:0] sel_757;  // int32
  wire signed [31:0] sel_758;  // int32
  wire signed [31:0] sel_759;  // int32
  wire signed [31:0] sel_760;  // int32
  wire signed [31:0] sel_761;  // int32
  wire signed [31:0] sel_762;  // int32
  wire signed [31:0] sel_763;  // int32
  wire signed [31:0] sel_764;  // int32
  wire signed [31:0] sel_765;  // int32
  wire signed [31:0] sel_766;  // int32
  wire signed [31:0] sel_767;  // int32
  wire signed [31:0] sel_768;  // int32
  wire signed [31:0] sel_769;  // int32
  wire signed [31:0] s_182;  // int32
  wire signed [31:0] sel_1_244;  // int32
  wire signed [31:0] sel_770;  // int32
  wire signed [31:0] sel_1_245;  // int32
  wire signed [31:0] sel_1_246;  // int32
  wire signed [31:0] sel_1_247;  // int32
  wire signed [31:0] sel_771;  // int32
  wire signed [31:0] sel_1_248;  // int32
  wire signed [31:0] sel_772;  // int32
  wire signed [31:0] sel_773;  // int32
  reg signed [31:0] sel_1_249;  // int32
  wire [7:0] tmp_290;  // uint8
  reg  tmp_291;
  reg [7:0] tmp_292;  // uint8
  wire [7:0] sel_1_250;  // uint8
  wire signed [31:0] sel_774;  // int32
  wire signed [31:0] sel_775;  // int32
  wire signed [31:0] sel_776;  // int32
  wire signed [31:0] sel_777;  // int32
  wire signed [31:0] sel_778;  // int32
  wire signed [31:0] sel_779;  // int32
  wire signed [31:0] sel_780;  // int32
  wire signed [31:0] sel_781;  // int32
  wire signed [31:0] sel_782;  // int32
  wire signed [31:0] sel_783;  // int32
  wire signed [31:0] sel_784;  // int32
  wire signed [31:0] sel_785;  // int32
  wire signed [31:0] sel_786;  // int32
  wire signed [31:0] sel_787;  // int32
  wire signed [31:0] sel_788;  // int32
  wire signed [31:0] sel_789;  // int32
  wire signed [31:0] sel_790;  // int32
  wire signed [31:0] s_183;  // int32
  wire signed [31:0] sel_1_251;  // int32
  wire signed [31:0] sel_1_252;  // int32
  wire signed [31:0] sel_1_253;  // int32
  wire signed [31:0] sel_791;  // int32
  wire signed [31:0] sel_1_254;  // int32
  wire signed [31:0] sel_792;  // int32
  wire signed [31:0] sel_793;  // int32
  reg signed [31:0] sel_1_255;  // int32
  wire [7:0] tmp_293;  // uint8
  wire [7:0] sel_794;  // uint8
  reg [7:0] tmp_294;  // uint8
  wire [7:0] sel_1_256;  // uint8
  reg [7:0] tmp_295;  // uint8
  wire [7:0] sel_1_257;  // uint8
  wire [7:0] sel_795;  // uint8
  reg [4:0] is_SPI_MNGR_53;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_796;
  wire sel_797;
  wire sel_798;
  wire sel_799;
  wire sel_800;
  wire sel_801;
  wire sel_802;
  wire sel_803;
  wire sel_804;
  wire sel_805;
  wire sel_806;
  wire sel_807;
  wire sel_808;
  wire sel_809;
  wire s_184;
  wire sel_2_26;
  wire s_185;
  wire sel_2_27;
  wire s_186;
  wire sel_2_28;
  wire s_187;
  wire sel_2_29;
  wire s_188;
  wire sel_2_30;
  wire s_189;
  wire sel_2_31;
  wire s_190;
  wire sel_2_32;
  wire s_191;
  wire sel_2_33;
  reg  s_192;
  wire sel_810;
  wire sel_811;
  wire sel_812;
  wire s_193;
  wire sel_2_34;
  wire s_194;
  wire sel_2_35;
  wire s_195;
  wire sel_2_36;
  wire s_196;
  wire sel_2_37;
  wire s_197;
  wire sel_2_38;
  wire s_198;
  wire sel_2_39;
  wire s_199;
  wire sel_2_40;
  wire s_200;
  wire sel_2_41;
  wire sel_2_42;
  wire sel_2_43;
  reg  sel_2_44;
  reg  sel_2_45;
  wire sel_813;
  wire sel_2_46;
  wire sel_814;
  reg [4:0] is_SPI_MNGR_54;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_815;  // uint8
  wire [7:0] sel_816;  // uint8
  wire [7:0] sel_817;  // uint8
  wire [7:0] sel_818;  // uint8
  wire [7:0] sel_819;  // uint8
  wire [7:0] sel_820;  // uint8
  wire [7:0] sel_821;  // uint8
  wire [7:0] sel_822;  // uint8
  wire [7:0] sel_823;  // uint8
  wire [7:0] sel_824;  // uint8
  wire [7:0] sel_825;  // uint8
  wire [7:0] sel_826;  // uint8
  reg  s_201;
  wire signed [31:0] sel_827;  // int32
  wire signed [31:0] sel_828;  // int32
  wire signed [31:0] sel_829;  // int32
  wire signed [31:0] sel_830;  // int32
  wire signed [31:0] sel_831;  // int32
  wire signed [31:0] sel_832;  // int32
  wire signed [31:0] sel_833;  // int32
  wire signed [31:0] sel_834;  // int32
  wire signed [31:0] sel_835;  // int32
  wire signed [31:0] sel_836;  // int32
  wire signed [31:0] sel_837;  // int32
  wire signed [31:0] sel_838;  // int32
  wire signed [31:0] sel_839;  // int32
  wire signed [31:0] sel_840;  // int32
  wire signed [31:0] s_202;  // int32
  wire signed [31:0] sel_1_258;  // int32
  wire signed [31:0] sel_841;  // int32
  wire signed [31:0] sel_1_259;  // int32
  wire signed [31:0] sel_842;  // int32
  wire signed [31:0] sel_1_260;  // int32
  wire signed [31:0] sel_843;  // int32
  wire signed [31:0] sel_1_261;  // int32
  wire signed [31:0] sel_844;  // int32
  wire signed [31:0] sel_1_262;  // int32
  wire signed [31:0] sel_845;  // int32
  wire signed [31:0] sel_1_263;  // int32
  wire signed [31:0] sel_846;  // int32
  wire signed [31:0] sel_1_264;  // int32
  wire signed [31:0] sel_847;  // int32
  wire signed [31:0] sel_1_265;  // int32
  wire signed [31:0] sel_848;  // int32
  wire signed [31:0] sel_849;  // int32
  wire signed [31:0] sel_850;  // int32
  reg signed [31:0] sel_1_266;  // int32
  wire [7:0] tmp_296;  // uint8
  wire signed [31:0] sel_851;  // int32
  wire signed [31:0] sel_852;  // int32
  wire signed [31:0] sel_853;  // int32
  wire signed [31:0] sel_854;  // int32
  wire signed [31:0] sel_855;  // int32
  wire signed [31:0] sel_856;  // int32
  wire signed [31:0] sel_857;  // int32
  wire signed [31:0] sel_858;  // int32
  wire signed [31:0] sel_859;  // int32
  wire signed [31:0] sel_860;  // int32
  wire signed [31:0] sel_861;  // int32
  wire signed [31:0] sel_862;  // int32
  wire signed [31:0] sel_863;  // int32
  wire signed [31:0] sel_864;  // int32
  wire signed [31:0] s_203;  // int32
  wire signed [31:0] sel_1_267;  // int32
  wire signed [31:0] sel_865;  // int32
  wire signed [31:0] sel_1_268;  // int32
  wire signed [31:0] sel_866;  // int32
  wire signed [31:0] sel_1_269;  // int32
  wire signed [31:0] sel_867;  // int32
  wire signed [31:0] sel_1_270;  // int32
  wire signed [31:0] sel_868;  // int32
  wire signed [31:0] sel_1_271;  // int32
  wire signed [31:0] sel_869;  // int32
  wire signed [31:0] sel_1_272;  // int32
  wire signed [31:0] sel_870;  // int32
  wire signed [31:0] sel_1_273;  // int32
  wire signed [31:0] sel_871;  // int32
  wire signed [31:0] sel_872;  // int32
  wire signed [31:0] sel_873;  // int32
  reg signed [31:0] sel_1_274;  // int32
  wire [7:0] tmp_297;  // uint8
  wire [7:0] sel_1_275;  // uint8
  wire signed [31:0] sel_874;  // int32
  wire signed [31:0] sel_875;  // int32
  wire signed [31:0] sel_876;  // int32
  wire signed [31:0] sel_877;  // int32
  wire signed [31:0] sel_878;  // int32
  wire signed [31:0] sel_879;  // int32
  wire signed [31:0] sel_880;  // int32
  wire signed [31:0] sel_881;  // int32
  wire signed [31:0] sel_882;  // int32
  wire signed [31:0] sel_883;  // int32
  wire signed [31:0] sel_884;  // int32
  wire signed [31:0] sel_885;  // int32
  wire signed [31:0] sel_886;  // int32
  wire signed [31:0] sel_887;  // int32
  wire signed [31:0] s_204;  // int32
  wire signed [31:0] sel_1_276;  // int32
  wire signed [31:0] sel_888;  // int32
  wire signed [31:0] sel_1_277;  // int32
  wire signed [31:0] sel_889;  // int32
  wire signed [31:0] sel_1_278;  // int32
  wire signed [31:0] sel_890;  // int32
  wire signed [31:0] sel_1_279;  // int32
  wire signed [31:0] sel_891;  // int32
  wire signed [31:0] sel_1_280;  // int32
  wire signed [31:0] sel_892;  // int32
  wire signed [31:0] sel_1_281;  // int32
  wire signed [31:0] sel_893;  // int32
  wire signed [31:0] sel_894;  // int32
  wire signed [31:0] sel_895;  // int32
  reg signed [31:0] sel_1_282;  // int32
  wire [7:0] tmp_298;  // uint8
  wire [7:0] sel_1_283;  // uint8
  wire signed [31:0] sel_896;  // int32
  wire signed [31:0] sel_897;  // int32
  wire signed [31:0] sel_898;  // int32
  wire signed [31:0] sel_899;  // int32
  wire signed [31:0] sel_900;  // int32
  wire signed [31:0] sel_901;  // int32
  wire signed [31:0] sel_902;  // int32
  wire signed [31:0] sel_903;  // int32
  wire signed [31:0] sel_904;  // int32
  wire signed [31:0] sel_905;  // int32
  wire signed [31:0] sel_906;  // int32
  wire signed [31:0] sel_907;  // int32
  wire signed [31:0] sel_908;  // int32
  wire signed [31:0] sel_909;  // int32
  wire signed [31:0] s_205;  // int32
  wire signed [31:0] sel_1_284;  // int32
  wire signed [31:0] sel_910;  // int32
  wire signed [31:0] sel_1_285;  // int32
  wire signed [31:0] sel_911;  // int32
  wire signed [31:0] sel_1_286;  // int32
  wire signed [31:0] sel_912;  // int32
  wire signed [31:0] sel_1_287;  // int32
  wire signed [31:0] sel_913;  // int32
  wire signed [31:0] sel_1_288;  // int32
  wire signed [31:0] sel_914;  // int32
  wire signed [31:0] sel_915;  // int32
  wire signed [31:0] sel_916;  // int32
  reg signed [31:0] sel_1_289;  // int32
  wire [7:0] tmp_299;  // uint8
  wire [7:0] sel_1_290;  // uint8
  reg [7:0] sel_1_291;  // uint8
  wire signed [31:0] sel_917;  // int32
  wire signed [31:0] sel_918;  // int32
  wire signed [31:0] sel_919;  // int32
  wire signed [31:0] sel_920;  // int32
  wire signed [31:0] sel_921;  // int32
  wire signed [31:0] sel_922;  // int32
  wire signed [31:0] sel_923;  // int32
  wire signed [31:0] sel_924;  // int32
  wire signed [31:0] sel_925;  // int32
  wire signed [31:0] sel_926;  // int32
  wire signed [31:0] sel_927;  // int32
  wire signed [31:0] sel_928;  // int32
  wire signed [31:0] sel_929;  // int32
  wire signed [31:0] sel_930;  // int32
  wire signed [31:0] s_206;  // int32
  wire signed [31:0] sel_1_292;  // int32
  wire signed [31:0] sel_931;  // int32
  wire signed [31:0] sel_1_293;  // int32
  wire signed [31:0] sel_932;  // int32
  wire signed [31:0] sel_1_294;  // int32
  wire signed [31:0] sel_933;  // int32
  wire signed [31:0] sel_1_295;  // int32
  wire signed [31:0] sel_934;  // int32
  wire signed [31:0] sel_935;  // int32
  wire signed [31:0] sel_936;  // int32
  reg signed [31:0] sel_1_296;  // int32
  wire [7:0] tmp_300;  // uint8
  reg  s_207;
  reg [7:0] tmp_301;  // uint8
  wire [7:0] sel_1_297;  // uint8
  wire signed [31:0] sel_937;  // int32
  wire signed [31:0] sel_938;  // int32
  wire signed [31:0] sel_939;  // int32
  wire signed [31:0] sel_940;  // int32
  wire signed [31:0] sel_941;  // int32
  wire signed [31:0] sel_942;  // int32
  wire signed [31:0] sel_943;  // int32
  wire signed [31:0] sel_944;  // int32
  wire signed [31:0] sel_945;  // int32
  wire signed [31:0] sel_946;  // int32
  wire signed [31:0] sel_947;  // int32
  wire signed [31:0] sel_948;  // int32
  wire signed [31:0] sel_949;  // int32
  wire signed [31:0] sel_950;  // int32
  wire signed [31:0] s_208;  // int32
  wire signed [31:0] sel_1_298;  // int32
  wire signed [31:0] sel_951;  // int32
  wire signed [31:0] sel_1_299;  // int32
  wire signed [31:0] sel_952;  // int32
  wire signed [31:0] sel_1_300;  // int32
  wire signed [31:0] sel_953;  // int32
  wire signed [31:0] sel_954;  // int32
  wire signed [31:0] sel_955;  // int32
  reg signed [31:0] sel_1_301;  // int32
  wire [7:0] tmp_302;  // uint8
  reg  s_209;
  reg [7:0] tmp_303;  // uint8
  wire [7:0] sel_1_302;  // uint8
  wire signed [31:0] sel_956;  // int32
  wire signed [31:0] sel_957;  // int32
  wire signed [31:0] sel_958;  // int32
  wire signed [31:0] sel_959;  // int32
  wire signed [31:0] sel_960;  // int32
  wire signed [31:0] sel_961;  // int32
  wire signed [31:0] sel_962;  // int32
  wire signed [31:0] sel_963;  // int32
  wire signed [31:0] sel_964;  // int32
  wire signed [31:0] sel_965;  // int32
  wire signed [31:0] sel_966;  // int32
  wire signed [31:0] sel_967;  // int32
  wire signed [31:0] sel_968;  // int32
  wire signed [31:0] sel_969;  // int32
  wire signed [31:0] s_210;  // int32
  wire signed [31:0] sel_1_303;  // int32
  wire signed [31:0] sel_970;  // int32
  wire signed [31:0] sel_1_304;  // int32
  wire signed [31:0] sel_971;  // int32
  wire signed [31:0] sel_972;  // int32
  wire signed [31:0] sel_973;  // int32
  reg signed [31:0] sel_1_305;  // int32
  wire [7:0] tmp_304;  // uint8
  reg  s_211;
  reg [7:0] tmp_305;  // uint8
  wire [7:0] sel_1_306;  // uint8
  wire signed [31:0] sel_974;  // int32
  wire signed [31:0] sel_975;  // int32
  wire signed [31:0] sel_976;  // int32
  wire signed [31:0] sel_977;  // int32
  wire signed [31:0] sel_978;  // int32
  wire signed [31:0] sel_979;  // int32
  wire signed [31:0] sel_980;  // int32
  wire signed [31:0] sel_981;  // int32
  wire signed [31:0] sel_982;  // int32
  wire signed [31:0] sel_983;  // int32
  wire signed [31:0] sel_984;  // int32
  wire signed [31:0] sel_985;  // int32
  wire signed [31:0] sel_986;  // int32
  wire signed [31:0] sel_987;  // int32
  wire signed [31:0] s_212;  // int32
  wire signed [31:0] sel_1_307;  // int32
  wire signed [31:0] sel_988;  // int32
  wire signed [31:0] sel_989;  // int32
  wire signed [31:0] sel_990;  // int32
  reg signed [31:0] sel_1_308;  // int32
  wire [7:0] tmp_306;  // uint8
  reg [4:0] is_SPI_MNGR_55;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_991;  // int32
  wire signed [31:0] sel_992;  // int32
  wire signed [31:0] sel_993;  // int32
  wire signed [31:0] sel_994;  // int32
  wire signed [31:0] sel_995;  // int32
  wire signed [31:0] sel_996;  // int32
  wire signed [31:0] sel_997;  // int32
  wire signed [31:0] sel_998;  // int32
  wire signed [31:0] sel_999;  // int32
  wire signed [31:0] sel_1000;  // int32
  wire signed [31:0] sel_1001;  // int32
  wire signed [31:0] sel_1002;  // int32
  wire signed [31:0] sel_1003;  // int32
  reg  s_213;
  wire signed [31:0] sel_1004;  // int32
  wire signed [31:0] sel_1005;  // int32
  wire signed [31:0] sel_1006;  // int32
  wire signed [31:0] s_214;  // int32
  wire signed [31:0] sel_1_309;  // int32
  wire signed [31:0] sel_1007;  // int32
  wire signed [31:0] sel_1_310;  // int32
  wire signed [31:0] sel_1008;  // int32
  wire signed [31:0] sel_1_311;  // int32
  wire signed [31:0] sel_1009;  // int32
  wire signed [31:0] sel_1_312;  // int32
  wire signed [31:0] sel_1010;  // int32
  wire signed [31:0] sel_1_313;  // int32
  wire signed [31:0] sel_1011;  // int32
  wire signed [31:0] sel_1_314;  // int32
  wire signed [31:0] sel_1012;  // int32
  wire signed [31:0] sel_1_315;  // int32
  wire signed [31:0] sel_1013;  // int32
  wire signed [31:0] sel_1_316;  // int32
  wire signed [31:0] sel_1_317;  // int32
  wire signed [31:0] sel_1_318;  // int32
  reg signed [31:0] sel_1_319;  // int32
  wire signed [31:0] sel_1014;  // int32
  wire signed [31:0] sel_1015;  // int32
  wire signed [31:0] sel_1_320;  // int32
  wire signed [31:0] sel_1016;  // int32
  reg  tmp_307;
  reg [7:0] rd_246_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_246_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_29 [0:11];  // uint8 [12]
  wire signed [31:0] sel_1017;  // int32
  reg signed [31:0] sel_1_321;  // int32
  wire [7:0] tmp_308;  // uint8
  wire signed [31:0] sel_1018;  // int32
  wire signed [31:0] sel_1019;  // int32
  wire signed [31:0] sel_1020;  // int32
  wire signed [31:0] sel_1021;  // int32
  wire signed [31:0] sel_1022;  // int32
  wire signed [31:0] sel_1023;  // int32
  wire signed [31:0] sel_1024;  // int32
  wire signed [31:0] sel_1025;  // int32
  wire signed [31:0] sel_1026;  // int32
  wire signed [31:0] sel_1027;  // int32
  wire signed [31:0] sel_1028;  // int32
  wire signed [31:0] sel_1029;  // int32
  wire signed [31:0] sel_1030;  // int32
  wire signed [31:0] sel_1031;  // int32
  wire signed [31:0] sel_1032;  // int32
  wire signed [31:0] sel_1033;  // int32
  wire signed [31:0] sel_1034;  // int32
  wire signed [31:0] s_215;  // int32
  wire signed [31:0] sel_1_322;  // int32
  wire signed [31:0] sel_1035;  // int32
  wire signed [31:0] sel_1_323;  // int32
  wire signed [31:0] sel_1036;  // int32
  wire signed [31:0] sel_1_324;  // int32
  wire signed [31:0] sel_1037;  // int32
  wire signed [31:0] sel_1_325;  // int32
  wire signed [31:0] sel_1038;  // int32
  wire signed [31:0] sel_1_326;  // int32
  wire signed [31:0] sel_1039;  // int32
  wire signed [31:0] sel_1_327;  // int32
  wire signed [31:0] sel_1040;  // int32
  wire signed [31:0] sel_1_328;  // int32
  wire signed [31:0] sel_1_329;  // int32
  wire signed [31:0] sel_1_330;  // int32
  wire signed [31:0] sel_1041;  // int32
  wire signed [31:0] sel_1_331;  // int32
  wire signed [31:0] sel_1042;  // int32
  wire signed [31:0] sel_1043;  // int32
  reg signed [31:0] sel_1_332;  // int32
  wire [7:0] tmp_309;  // uint8
  reg  tmp_310;
  reg [7:0] tmp_311;  // uint8
  wire [7:0] sel_1_333;  // uint8
  wire signed [31:0] sel_1044;  // int32
  wire signed [31:0] sel_1045;  // int32
  wire signed [31:0] sel_1046;  // int32
  wire signed [31:0] sel_1047;  // int32
  wire signed [31:0] sel_1048;  // int32
  wire signed [31:0] sel_1049;  // int32
  wire signed [31:0] sel_1050;  // int32
  wire signed [31:0] sel_1051;  // int32
  wire signed [31:0] sel_1052;  // int32
  wire signed [31:0] sel_1053;  // int32
  wire signed [31:0] sel_1054;  // int32
  wire signed [31:0] sel_1055;  // int32
  wire signed [31:0] sel_1056;  // int32
  wire signed [31:0] sel_1057;  // int32
  wire signed [31:0] sel_1058;  // int32
  wire signed [31:0] sel_1059;  // int32
  wire signed [31:0] sel_1060;  // int32
  wire signed [31:0] s_216;  // int32
  wire signed [31:0] sel_1_334;  // int32
  wire signed [31:0] sel_1061;  // int32
  wire signed [31:0] sel_1_335;  // int32
  wire signed [31:0] sel_1062;  // int32
  wire signed [31:0] sel_1_336;  // int32
  wire signed [31:0] sel_1063;  // int32
  wire signed [31:0] sel_1_337;  // int32
  wire signed [31:0] sel_1064;  // int32
  wire signed [31:0] sel_1_338;  // int32
  wire signed [31:0] sel_1065;  // int32
  wire signed [31:0] sel_1_339;  // int32
  wire signed [31:0] sel_1_340;  // int32
  wire signed [31:0] sel_1_341;  // int32
  wire signed [31:0] sel_1066;  // int32
  wire signed [31:0] sel_1_342;  // int32
  wire signed [31:0] sel_1067;  // int32
  wire signed [31:0] sel_1068;  // int32
  reg signed [31:0] sel_1_343;  // int32
  wire [7:0] tmp_312;  // uint8
  reg  tmp_313;
  reg [7:0] tmp_314;  // uint8
  wire [7:0] sel_1_344;  // uint8
  wire signed [31:0] sel_1069;  // int32
  wire signed [31:0] sel_1070;  // int32
  wire signed [31:0] sel_1071;  // int32
  wire signed [31:0] sel_1072;  // int32
  wire signed [31:0] sel_1073;  // int32
  wire signed [31:0] sel_1074;  // int32
  wire signed [31:0] sel_1075;  // int32
  wire signed [31:0] sel_1076;  // int32
  wire signed [31:0] sel_1077;  // int32
  wire signed [31:0] sel_1078;  // int32
  wire signed [31:0] sel_1079;  // int32
  wire signed [31:0] sel_1080;  // int32
  wire signed [31:0] sel_1081;  // int32
  wire signed [31:0] sel_1082;  // int32
  wire signed [31:0] sel_1083;  // int32
  wire signed [31:0] sel_1084;  // int32
  wire signed [31:0] sel_1085;  // int32
  wire signed [31:0] s_217;  // int32
  wire signed [31:0] sel_1_345;  // int32
  wire signed [31:0] sel_1086;  // int32
  wire signed [31:0] sel_1_346;  // int32
  wire signed [31:0] sel_1087;  // int32
  wire signed [31:0] sel_1_347;  // int32
  wire signed [31:0] sel_1088;  // int32
  wire signed [31:0] sel_1_348;  // int32
  wire signed [31:0] sel_1089;  // int32
  wire signed [31:0] sel_1_349;  // int32
  wire signed [31:0] sel_1_350;  // int32
  wire signed [31:0] sel_1_351;  // int32
  wire signed [31:0] sel_1090;  // int32
  wire signed [31:0] sel_1_352;  // int32
  wire signed [31:0] sel_1091;  // int32
  wire signed [31:0] sel_1092;  // int32
  reg signed [31:0] sel_1_353;  // int32
  wire [7:0] tmp_315;  // uint8
  reg  tmp_316;
  reg [7:0] tmp_317;  // uint8
  wire [7:0] sel_1_354;  // uint8
  wire signed [31:0] sel_1093;  // int32
  wire signed [31:0] sel_1094;  // int32
  wire signed [31:0] sel_1095;  // int32
  wire signed [31:0] sel_1096;  // int32
  wire signed [31:0] sel_1097;  // int32
  wire signed [31:0] sel_1098;  // int32
  wire signed [31:0] sel_1099;  // int32
  wire signed [31:0] sel_1100;  // int32
  wire signed [31:0] sel_1101;  // int32
  wire signed [31:0] sel_1102;  // int32
  wire signed [31:0] sel_1103;  // int32
  wire signed [31:0] sel_1104;  // int32
  wire signed [31:0] sel_1105;  // int32
  wire signed [31:0] sel_1106;  // int32
  wire signed [31:0] sel_1107;  // int32
  wire signed [31:0] sel_1108;  // int32
  wire signed [31:0] sel_1109;  // int32
  wire signed [31:0] s_218;  // int32
  wire signed [31:0] sel_1_355;  // int32
  wire signed [31:0] sel_1110;  // int32
  wire signed [31:0] sel_1_356;  // int32
  wire signed [31:0] sel_1111;  // int32
  wire signed [31:0] sel_1_357;  // int32
  wire signed [31:0] sel_1112;  // int32
  wire signed [31:0] sel_1_358;  // int32
  wire signed [31:0] sel_1_359;  // int32
  wire signed [31:0] sel_1_360;  // int32
  wire signed [31:0] sel_1113;  // int32
  wire signed [31:0] sel_1_361;  // int32
  wire signed [31:0] sel_1114;  // int32
  wire signed [31:0] sel_1115;  // int32
  reg signed [31:0] sel_1_362;  // int32
  wire [7:0] tmp_318;  // uint8
  reg  tmp_319;
  reg [7:0] tmp_320;  // uint8
  wire [7:0] sel_1_363;  // uint8
  wire signed [31:0] sel_1116;  // int32
  wire signed [31:0] sel_1117;  // int32
  wire signed [31:0] sel_1118;  // int32
  wire signed [31:0] sel_1119;  // int32
  wire signed [31:0] sel_1120;  // int32
  wire signed [31:0] sel_1121;  // int32
  wire signed [31:0] sel_1122;  // int32
  wire signed [31:0] sel_1123;  // int32
  wire signed [31:0] sel_1124;  // int32
  wire signed [31:0] sel_1125;  // int32
  wire signed [31:0] sel_1126;  // int32
  wire signed [31:0] sel_1127;  // int32
  wire signed [31:0] sel_1128;  // int32
  wire signed [31:0] sel_1129;  // int32
  wire signed [31:0] sel_1130;  // int32
  wire signed [31:0] sel_1131;  // int32
  wire signed [31:0] sel_1132;  // int32
  wire signed [31:0] s_219;  // int32
  wire signed [31:0] sel_1_364;  // int32
  wire signed [31:0] sel_1133;  // int32
  wire signed [31:0] sel_1_365;  // int32
  wire signed [31:0] sel_1134;  // int32
  wire signed [31:0] sel_1_366;  // int32
  wire signed [31:0] sel_1_367;  // int32
  wire signed [31:0] sel_1_368;  // int32
  wire signed [31:0] sel_1135;  // int32
  wire signed [31:0] sel_1_369;  // int32
  wire signed [31:0] sel_1136;  // int32
  wire signed [31:0] sel_1137;  // int32
  reg signed [31:0] sel_1_370;  // int32
  wire [7:0] tmp_321;  // uint8
  reg  tmp_322;
  reg [7:0] tmp_323;  // uint8
  wire [7:0] sel_1_371;  // uint8
  wire signed [31:0] sel_1138;  // int32
  wire signed [31:0] sel_1139;  // int32
  wire signed [31:0] sel_1140;  // int32
  wire signed [31:0] sel_1141;  // int32
  wire signed [31:0] sel_1142;  // int32
  wire signed [31:0] sel_1143;  // int32
  wire signed [31:0] sel_1144;  // int32
  wire signed [31:0] sel_1145;  // int32
  wire signed [31:0] sel_1146;  // int32
  wire signed [31:0] sel_1147;  // int32
  wire signed [31:0] sel_1148;  // int32
  wire signed [31:0] sel_1149;  // int32
  wire signed [31:0] sel_1150;  // int32
  wire signed [31:0] sel_1151;  // int32
  wire signed [31:0] sel_1152;  // int32
  wire signed [31:0] sel_1153;  // int32
  wire signed [31:0] sel_1154;  // int32
  wire signed [31:0] s_220;  // int32
  wire signed [31:0] sel_1_372;  // int32
  wire signed [31:0] sel_1155;  // int32
  wire signed [31:0] sel_1_373;  // int32
  wire signed [31:0] sel_1_374;  // int32
  wire signed [31:0] sel_1_375;  // int32
  wire signed [31:0] sel_1156;  // int32
  wire signed [31:0] sel_1_376;  // int32
  wire signed [31:0] sel_1157;  // int32
  wire signed [31:0] sel_1158;  // int32
  reg signed [31:0] sel_1_377;  // int32
  wire [7:0] tmp_324;  // uint8
  reg  tmp_325;
  reg [7:0] tmp_326;  // uint8
  wire [7:0] sel_1_378;  // uint8
  wire signed [31:0] sel_1159;  // int32
  wire signed [31:0] sel_1160;  // int32
  wire signed [31:0] sel_1161;  // int32
  wire signed [31:0] sel_1162;  // int32
  wire signed [31:0] sel_1163;  // int32
  wire signed [31:0] sel_1164;  // int32
  wire signed [31:0] sel_1165;  // int32
  wire signed [31:0] sel_1166;  // int32
  wire signed [31:0] sel_1167;  // int32
  wire signed [31:0] sel_1168;  // int32
  wire signed [31:0] sel_1169;  // int32
  wire signed [31:0] sel_1170;  // int32
  wire signed [31:0] sel_1171;  // int32
  wire signed [31:0] sel_1172;  // int32
  wire signed [31:0] sel_1173;  // int32
  wire signed [31:0] sel_1174;  // int32
  wire signed [31:0] sel_1175;  // int32
  wire signed [31:0] s_221;  // int32
  wire signed [31:0] sel_1_379;  // int32
  wire signed [31:0] sel_1_380;  // int32
  wire signed [31:0] sel_1_381;  // int32
  wire signed [31:0] sel_1176;  // int32
  wire signed [31:0] sel_1_382;  // int32
  wire signed [31:0] sel_1177;  // int32
  wire signed [31:0] sel_1178;  // int32
  reg signed [31:0] sel_1_383;  // int32
  wire [7:0] tmp_327;  // uint8
  wire [7:0] sel_1179;  // uint8
  reg [7:0] tmp_328;  // uint8
  wire [7:0] sel_1_384;  // uint8
  reg [7:0] tmp_329;  // uint8
  wire [7:0] sel_1_385;  // uint8
  wire [7:0] sel_1180;  // uint8
  reg [4:0] is_SPI_MNGR_56;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_1181;
  wire sel_1182;
  wire sel_1183;
  wire sel_1184;
  wire sel_1185;
  wire sel_1186;
  wire sel_1187;
  wire sel_1188;
  wire sel_1189;
  wire sel_1190;
  wire sel_1191;
  wire sel_1192;
  wire sel_1193;
  wire sel_1194;
  wire s_222;
  wire sel_2_47;
  wire s_223;
  wire sel_2_48;
  wire s_224;
  wire sel_2_49;
  wire s_225;
  wire sel_2_50;
  wire s_226;
  wire sel_2_51;
  wire s_227;
  wire sel_2_52;
  wire s_228;
  wire sel_2_53;
  wire s_229;
  wire sel_2_54;
  reg  s_230;
  wire sel_1195;
  wire sel_1196;
  wire sel_1197;
  wire s_231;
  wire sel_2_55;
  wire s_232;
  wire sel_2_56;
  wire s_233;
  wire sel_2_57;
  wire s_234;
  wire sel_2_58;
  wire s_235;
  wire sel_2_59;
  wire s_236;
  wire sel_2_60;
  wire s_237;
  wire sel_2_61;
  wire s_238;
  wire sel_2_62;
  wire sel_2_63;
  wire sel_2_64;
  reg  sel_2_65;
  reg  sel_2_66;
  wire sel_1198;
  wire sel_2_67;
  wire sel_1199;
  reg [4:0] is_SPI_MNGR_57;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_1200;  // uint8
  wire [7:0] sel_1201;  // uint8
  wire [7:0] sel_1202;  // uint8
  wire [7:0] sel_1203;  // uint8
  wire [7:0] sel_1204;  // uint8
  wire [7:0] sel_1205;  // uint8
  wire [7:0] sel_1206;  // uint8
  wire [7:0] sel_1207;  // uint8
  wire [7:0] sel_1208;  // uint8
  wire [7:0] sel_1209;  // uint8
  wire [7:0] sel_1210;  // uint8
  wire [7:0] sel_1211;  // uint8
  reg  s_239;
  wire signed [31:0] sel_1212;  // int32
  wire signed [31:0] sel_1213;  // int32
  wire signed [31:0] sel_1214;  // int32
  wire signed [31:0] sel_1215;  // int32
  wire signed [31:0] sel_1216;  // int32
  wire signed [31:0] sel_1217;  // int32
  wire signed [31:0] sel_1218;  // int32
  wire signed [31:0] sel_1219;  // int32
  wire signed [31:0] sel_1220;  // int32
  wire signed [31:0] sel_1221;  // int32
  wire signed [31:0] sel_1222;  // int32
  wire signed [31:0] sel_1223;  // int32
  wire signed [31:0] sel_1224;  // int32
  wire signed [31:0] sel_1225;  // int32
  wire signed [31:0] s_240;  // int32
  wire signed [31:0] sel_1_386;  // int32
  wire signed [31:0] sel_1226;  // int32
  wire signed [31:0] sel_1_387;  // int32
  wire signed [31:0] sel_1227;  // int32
  wire signed [31:0] sel_1_388;  // int32
  wire signed [31:0] sel_1228;  // int32
  wire signed [31:0] sel_1_389;  // int32
  wire signed [31:0] sel_1229;  // int32
  wire signed [31:0] sel_1_390;  // int32
  wire signed [31:0] sel_1230;  // int32
  wire signed [31:0] sel_1_391;  // int32
  wire signed [31:0] sel_1231;  // int32
  wire signed [31:0] sel_1_392;  // int32
  wire signed [31:0] sel_1232;  // int32
  wire signed [31:0] sel_1_393;  // int32
  wire signed [31:0] sel_1233;  // int32
  wire signed [31:0] sel_1234;  // int32
  wire signed [31:0] sel_1235;  // int32
  reg signed [31:0] sel_1_394;  // int32
  wire [7:0] tmp_330;  // uint8
  wire signed [31:0] sel_1236;  // int32
  wire signed [31:0] sel_1237;  // int32
  wire signed [31:0] sel_1238;  // int32
  wire signed [31:0] sel_1239;  // int32
  wire signed [31:0] sel_1240;  // int32
  wire signed [31:0] sel_1241;  // int32
  wire signed [31:0] sel_1242;  // int32
  wire signed [31:0] sel_1243;  // int32
  wire signed [31:0] sel_1244;  // int32
  wire signed [31:0] sel_1245;  // int32
  wire signed [31:0] sel_1246;  // int32
  wire signed [31:0] sel_1247;  // int32
  wire signed [31:0] sel_1248;  // int32
  wire signed [31:0] sel_1249;  // int32
  wire signed [31:0] s_241;  // int32
  wire signed [31:0] sel_1_395;  // int32
  wire signed [31:0] sel_1250;  // int32
  wire signed [31:0] sel_1_396;  // int32
  wire signed [31:0] sel_1251;  // int32
  wire signed [31:0] sel_1_397;  // int32
  wire signed [31:0] sel_1252;  // int32
  wire signed [31:0] sel_1_398;  // int32
  wire signed [31:0] sel_1253;  // int32
  wire signed [31:0] sel_1_399;  // int32
  wire signed [31:0] sel_1254;  // int32
  wire signed [31:0] sel_1_400;  // int32
  wire signed [31:0] sel_1255;  // int32
  wire signed [31:0] sel_1_401;  // int32
  wire signed [31:0] sel_1256;  // int32
  wire signed [31:0] sel_1257;  // int32
  wire signed [31:0] sel_1258;  // int32
  reg signed [31:0] sel_1_402;  // int32
  wire [7:0] tmp_331;  // uint8
  wire [7:0] sel_1_403;  // uint8
  wire signed [31:0] sel_1259;  // int32
  wire signed [31:0] sel_1260;  // int32
  wire signed [31:0] sel_1261;  // int32
  wire signed [31:0] sel_1262;  // int32
  wire signed [31:0] sel_1263;  // int32
  wire signed [31:0] sel_1264;  // int32
  wire signed [31:0] sel_1265;  // int32
  wire signed [31:0] sel_1266;  // int32
  wire signed [31:0] sel_1267;  // int32
  wire signed [31:0] sel_1268;  // int32
  wire signed [31:0] sel_1269;  // int32
  wire signed [31:0] sel_1270;  // int32
  wire signed [31:0] sel_1271;  // int32
  wire signed [31:0] sel_1272;  // int32
  wire signed [31:0] s_242;  // int32
  wire signed [31:0] sel_1_404;  // int32
  wire signed [31:0] sel_1273;  // int32
  wire signed [31:0] sel_1_405;  // int32
  wire signed [31:0] sel_1274;  // int32
  wire signed [31:0] sel_1_406;  // int32
  wire signed [31:0] sel_1275;  // int32
  wire signed [31:0] sel_1_407;  // int32
  wire signed [31:0] sel_1276;  // int32
  wire signed [31:0] sel_1_408;  // int32
  wire signed [31:0] sel_1277;  // int32
  wire signed [31:0] sel_1_409;  // int32
  wire signed [31:0] sel_1278;  // int32
  wire signed [31:0] sel_1279;  // int32
  wire signed [31:0] sel_1280;  // int32
  reg signed [31:0] sel_1_410;  // int32
  wire [7:0] tmp_332;  // uint8
  wire [7:0] sel_1_411;  // uint8
  wire signed [31:0] sel_1281;  // int32
  wire signed [31:0] sel_1282;  // int32
  wire signed [31:0] sel_1283;  // int32
  wire signed [31:0] sel_1284;  // int32
  wire signed [31:0] sel_1285;  // int32
  wire signed [31:0] sel_1286;  // int32
  wire signed [31:0] sel_1287;  // int32
  wire signed [31:0] sel_1288;  // int32
  wire signed [31:0] sel_1289;  // int32
  wire signed [31:0] sel_1290;  // int32
  wire signed [31:0] sel_1291;  // int32
  wire signed [31:0] sel_1292;  // int32
  wire signed [31:0] sel_1293;  // int32
  wire signed [31:0] sel_1294;  // int32
  wire signed [31:0] s_243;  // int32
  wire signed [31:0] sel_1_412;  // int32
  wire signed [31:0] sel_1295;  // int32
  wire signed [31:0] sel_1_413;  // int32
  wire signed [31:0] sel_1296;  // int32
  wire signed [31:0] sel_1_414;  // int32
  wire signed [31:0] sel_1297;  // int32
  wire signed [31:0] sel_1_415;  // int32
  wire signed [31:0] sel_1298;  // int32
  wire signed [31:0] sel_1_416;  // int32
  wire signed [31:0] sel_1299;  // int32
  wire signed [31:0] sel_1300;  // int32
  wire signed [31:0] sel_1301;  // int32
  reg signed [31:0] sel_1_417;  // int32
  wire [7:0] tmp_333;  // uint8
  wire [7:0] sel_1_418;  // uint8
  reg [7:0] sel_1_419;  // uint8
  wire signed [31:0] sel_1302;  // int32
  wire signed [31:0] sel_1303;  // int32
  wire signed [31:0] sel_1304;  // int32
  wire signed [31:0] sel_1305;  // int32
  wire signed [31:0] sel_1306;  // int32
  wire signed [31:0] sel_1307;  // int32
  wire signed [31:0] sel_1308;  // int32
  wire signed [31:0] sel_1309;  // int32
  wire signed [31:0] sel_1310;  // int32
  wire signed [31:0] sel_1311;  // int32
  wire signed [31:0] sel_1312;  // int32
  wire signed [31:0] sel_1313;  // int32
  wire signed [31:0] sel_1314;  // int32
  wire signed [31:0] sel_1315;  // int32
  wire signed [31:0] s_244;  // int32
  wire signed [31:0] sel_1_420;  // int32
  wire signed [31:0] sel_1316;  // int32
  wire signed [31:0] sel_1_421;  // int32
  wire signed [31:0] sel_1317;  // int32
  wire signed [31:0] sel_1_422;  // int32
  wire signed [31:0] sel_1318;  // int32
  wire signed [31:0] sel_1_423;  // int32
  wire signed [31:0] sel_1319;  // int32
  wire signed [31:0] sel_1320;  // int32
  wire signed [31:0] sel_1321;  // int32
  reg signed [31:0] sel_1_424;  // int32
  wire [7:0] tmp_334;  // uint8
  reg  s_245;
  reg [7:0] tmp_335;  // uint8
  wire [7:0] sel_1_425;  // uint8
  wire signed [31:0] sel_1322;  // int32
  wire signed [31:0] sel_1323;  // int32
  wire signed [31:0] sel_1324;  // int32
  wire signed [31:0] sel_1325;  // int32
  wire signed [31:0] sel_1326;  // int32
  wire signed [31:0] sel_1327;  // int32
  wire signed [31:0] sel_1328;  // int32
  wire signed [31:0] sel_1329;  // int32
  wire signed [31:0] sel_1330;  // int32
  wire signed [31:0] sel_1331;  // int32
  wire signed [31:0] sel_1332;  // int32
  wire signed [31:0] sel_1333;  // int32
  wire signed [31:0] sel_1334;  // int32
  wire signed [31:0] sel_1335;  // int32
  wire signed [31:0] s_246;  // int32
  wire signed [31:0] sel_1_426;  // int32
  wire signed [31:0] sel_1336;  // int32
  wire signed [31:0] sel_1_427;  // int32
  wire signed [31:0] sel_1337;  // int32
  wire signed [31:0] sel_1_428;  // int32
  wire signed [31:0] sel_1338;  // int32
  wire signed [31:0] sel_1339;  // int32
  wire signed [31:0] sel_1340;  // int32
  reg signed [31:0] sel_1_429;  // int32
  wire [7:0] tmp_336;  // uint8
  reg  s_247;
  reg [7:0] tmp_337;  // uint8
  wire [7:0] sel_1_430;  // uint8
  wire signed [31:0] sel_1341;  // int32
  wire signed [31:0] sel_1342;  // int32
  wire signed [31:0] sel_1343;  // int32
  wire signed [31:0] sel_1344;  // int32
  wire signed [31:0] sel_1345;  // int32
  wire signed [31:0] sel_1346;  // int32
  wire signed [31:0] sel_1347;  // int32
  wire signed [31:0] sel_1348;  // int32
  wire signed [31:0] sel_1349;  // int32
  wire signed [31:0] sel_1350;  // int32
  wire signed [31:0] sel_1351;  // int32
  wire signed [31:0] sel_1352;  // int32
  wire signed [31:0] sel_1353;  // int32
  wire signed [31:0] sel_1354;  // int32
  wire signed [31:0] s_248;  // int32
  wire signed [31:0] sel_1_431;  // int32
  wire signed [31:0] sel_1355;  // int32
  wire signed [31:0] sel_1_432;  // int32
  wire signed [31:0] sel_1356;  // int32
  wire signed [31:0] sel_1357;  // int32
  wire signed [31:0] sel_1358;  // int32
  reg signed [31:0] sel_1_433;  // int32
  wire [7:0] tmp_338;  // uint8
  reg  s_249;
  reg [7:0] tmp_339;  // uint8
  wire [7:0] sel_1_434;  // uint8
  wire signed [31:0] sel_1359;  // int32
  wire signed [31:0] sel_1360;  // int32
  wire signed [31:0] sel_1361;  // int32
  wire signed [31:0] sel_1362;  // int32
  wire signed [31:0] sel_1363;  // int32
  wire signed [31:0] sel_1364;  // int32
  wire signed [31:0] sel_1365;  // int32
  wire signed [31:0] sel_1366;  // int32
  wire signed [31:0] sel_1367;  // int32
  wire signed [31:0] sel_1368;  // int32
  wire signed [31:0] sel_1369;  // int32
  wire signed [31:0] sel_1370;  // int32
  wire signed [31:0] sel_1371;  // int32
  wire signed [31:0] sel_1372;  // int32
  wire signed [31:0] s_250;  // int32
  wire signed [31:0] sel_1_435;  // int32
  wire signed [31:0] sel_1373;  // int32
  wire signed [31:0] sel_1374;  // int32
  wire signed [31:0] sel_1375;  // int32
  reg signed [31:0] sel_1_436;  // int32
  wire [7:0] tmp_340;  // uint8
  reg [4:0] is_SPI_MNGR_58;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_1376;  // int32
  wire signed [31:0] sel_1377;  // int32
  wire signed [31:0] sel_1378;  // int32
  wire signed [31:0] sel_1379;  // int32
  wire signed [31:0] sel_1380;  // int32
  wire signed [31:0] sel_1381;  // int32
  wire signed [31:0] sel_1382;  // int32
  wire signed [31:0] sel_1383;  // int32
  wire signed [31:0] sel_1384;  // int32
  wire signed [31:0] sel_1385;  // int32
  wire signed [31:0] sel_1386;  // int32
  wire signed [31:0] sel_1387;  // int32
  wire signed [31:0] sel_1388;  // int32
  reg  s_251;
  wire signed [31:0] sel_1389;  // int32
  wire signed [31:0] sel_1390;  // int32
  wire signed [31:0] sel_1391;  // int32
  wire signed [31:0] s_252;  // int32
  wire signed [31:0] sel_1_437;  // int32
  wire signed [31:0] sel_1392;  // int32
  wire signed [31:0] sel_1_438;  // int32
  wire signed [31:0] sel_1393;  // int32
  wire signed [31:0] sel_1_439;  // int32
  wire signed [31:0] sel_1394;  // int32
  wire signed [31:0] sel_1_440;  // int32
  wire signed [31:0] sel_1395;  // int32
  wire signed [31:0] sel_1_441;  // int32
  wire signed [31:0] sel_1396;  // int32
  wire signed [31:0] sel_1_442;  // int32
  wire signed [31:0] sel_1397;  // int32
  wire signed [31:0] sel_1_443;  // int32
  wire signed [31:0] sel_1398;  // int32
  wire signed [31:0] sel_1_444;  // int32
  wire signed [31:0] sel_1_445;  // int32
  wire signed [31:0] sel_1_446;  // int32
  reg signed [31:0] sel_1_447;  // int32
  wire signed [31:0] sel_1399;  // int32
  wire signed [31:0] sel_1400;  // int32
  wire signed [31:0] sel_1_448;  // int32
  wire signed [31:0] sel_1401;  // int32
  reg  tmp_341;
  reg [7:0] rd_278_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_278_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_30 [0:11];  // uint8 [12]
  wire signed [31:0] sel_1402;  // int32
  reg signed [31:0] sel_1_449;  // int32
  wire [7:0] tmp_342;  // uint8
  wire signed [31:0] sel_1403;  // int32
  wire signed [31:0] sel_1404;  // int32
  wire signed [31:0] sel_1405;  // int32
  wire signed [31:0] sel_1406;  // int32
  wire signed [31:0] sel_1407;  // int32
  wire signed [31:0] sel_1408;  // int32
  wire signed [31:0] sel_1409;  // int32
  wire signed [31:0] sel_1410;  // int32
  wire signed [31:0] sel_1411;  // int32
  wire signed [31:0] sel_1412;  // int32
  wire signed [31:0] sel_1413;  // int32
  wire signed [31:0] sel_1414;  // int32
  wire signed [31:0] sel_1415;  // int32
  wire signed [31:0] sel_1416;  // int32
  wire signed [31:0] sel_1417;  // int32
  wire signed [31:0] sel_1418;  // int32
  wire signed [31:0] sel_1419;  // int32
  wire signed [31:0] s_253;  // int32
  wire signed [31:0] sel_1_450;  // int32
  wire signed [31:0] sel_1420;  // int32
  wire signed [31:0] sel_1_451;  // int32
  wire signed [31:0] sel_1421;  // int32
  wire signed [31:0] sel_1_452;  // int32
  wire signed [31:0] sel_1422;  // int32
  wire signed [31:0] sel_1_453;  // int32
  wire signed [31:0] sel_1423;  // int32
  wire signed [31:0] sel_1_454;  // int32
  wire signed [31:0] sel_1424;  // int32
  wire signed [31:0] sel_1_455;  // int32
  wire signed [31:0] sel_1425;  // int32
  wire signed [31:0] sel_1_456;  // int32
  wire signed [31:0] sel_1_457;  // int32
  wire signed [31:0] sel_1_458;  // int32
  wire signed [31:0] sel_1426;  // int32
  wire signed [31:0] sel_1_459;  // int32
  wire signed [31:0] sel_1427;  // int32
  wire signed [31:0] sel_1428;  // int32
  reg signed [31:0] sel_1_460;  // int32
  wire [7:0] tmp_343;  // uint8
  reg  tmp_344;
  reg [7:0] tmp_345;  // uint8
  wire [7:0] sel_1_461;  // uint8
  wire signed [31:0] sel_1429;  // int32
  wire signed [31:0] sel_1430;  // int32
  wire signed [31:0] sel_1431;  // int32
  wire signed [31:0] sel_1432;  // int32
  wire signed [31:0] sel_1433;  // int32
  wire signed [31:0] sel_1434;  // int32
  wire signed [31:0] sel_1435;  // int32
  wire signed [31:0] sel_1436;  // int32
  wire signed [31:0] sel_1437;  // int32
  wire signed [31:0] sel_1438;  // int32
  wire signed [31:0] sel_1439;  // int32
  wire signed [31:0] sel_1440;  // int32
  wire signed [31:0] sel_1441;  // int32
  wire signed [31:0] sel_1442;  // int32
  wire signed [31:0] sel_1443;  // int32
  wire signed [31:0] sel_1444;  // int32
  wire signed [31:0] sel_1445;  // int32
  wire signed [31:0] s_254;  // int32
  wire signed [31:0] sel_1_462;  // int32
  wire signed [31:0] sel_1446;  // int32
  wire signed [31:0] sel_1_463;  // int32
  wire signed [31:0] sel_1447;  // int32
  wire signed [31:0] sel_1_464;  // int32
  wire signed [31:0] sel_1448;  // int32
  wire signed [31:0] sel_1_465;  // int32
  wire signed [31:0] sel_1449;  // int32
  wire signed [31:0] sel_1_466;  // int32
  wire signed [31:0] sel_1450;  // int32
  wire signed [31:0] sel_1_467;  // int32
  wire signed [31:0] sel_1_468;  // int32
  wire signed [31:0] sel_1_469;  // int32
  wire signed [31:0] sel_1451;  // int32
  wire signed [31:0] sel_1_470;  // int32
  wire signed [31:0] sel_1452;  // int32
  wire signed [31:0] sel_1453;  // int32
  reg signed [31:0] sel_1_471;  // int32
  wire [7:0] tmp_346;  // uint8
  reg  tmp_347;
  reg [7:0] tmp_348;  // uint8
  wire [7:0] sel_1_472;  // uint8
  wire signed [31:0] sel_1454;  // int32
  wire signed [31:0] sel_1455;  // int32
  wire signed [31:0] sel_1456;  // int32
  wire signed [31:0] sel_1457;  // int32
  wire signed [31:0] sel_1458;  // int32
  wire signed [31:0] sel_1459;  // int32
  wire signed [31:0] sel_1460;  // int32
  wire signed [31:0] sel_1461;  // int32
  wire signed [31:0] sel_1462;  // int32
  wire signed [31:0] sel_1463;  // int32
  wire signed [31:0] sel_1464;  // int32
  wire signed [31:0] sel_1465;  // int32
  wire signed [31:0] sel_1466;  // int32
  wire signed [31:0] sel_1467;  // int32
  wire signed [31:0] sel_1468;  // int32
  wire signed [31:0] sel_1469;  // int32
  wire signed [31:0] sel_1470;  // int32
  wire signed [31:0] s_255;  // int32
  wire signed [31:0] sel_1_473;  // int32
  wire signed [31:0] sel_1471;  // int32
  wire signed [31:0] sel_1_474;  // int32
  wire signed [31:0] sel_1472;  // int32
  wire signed [31:0] sel_1_475;  // int32
  wire signed [31:0] sel_1473;  // int32
  wire signed [31:0] sel_1_476;  // int32
  wire signed [31:0] sel_1474;  // int32
  wire signed [31:0] sel_1_477;  // int32
  wire signed [31:0] sel_1_478;  // int32
  wire signed [31:0] sel_1_479;  // int32
  wire signed [31:0] sel_1475;  // int32
  wire signed [31:0] sel_1_480;  // int32
  wire signed [31:0] sel_1476;  // int32
  wire signed [31:0] sel_1477;  // int32
  reg signed [31:0] sel_1_481;  // int32
  wire [7:0] tmp_349;  // uint8
  reg  tmp_350;
  reg [7:0] tmp_351;  // uint8
  wire [7:0] sel_1_482;  // uint8
  wire signed [31:0] sel_1478;  // int32
  wire signed [31:0] sel_1479;  // int32
  wire signed [31:0] sel_1480;  // int32
  wire signed [31:0] sel_1481;  // int32
  wire signed [31:0] sel_1482;  // int32
  wire signed [31:0] sel_1483;  // int32
  wire signed [31:0] sel_1484;  // int32
  wire signed [31:0] sel_1485;  // int32
  wire signed [31:0] sel_1486;  // int32
  wire signed [31:0] sel_1487;  // int32
  wire signed [31:0] sel_1488;  // int32
  wire signed [31:0] sel_1489;  // int32
  wire signed [31:0] sel_1490;  // int32
  wire signed [31:0] sel_1491;  // int32
  wire signed [31:0] sel_1492;  // int32
  wire signed [31:0] sel_1493;  // int32
  wire signed [31:0] sel_1494;  // int32
  wire signed [31:0] s_256;  // int32
  wire signed [31:0] sel_1_483;  // int32
  wire signed [31:0] sel_1495;  // int32
  wire signed [31:0] sel_1_484;  // int32
  wire signed [31:0] sel_1496;  // int32
  wire signed [31:0] sel_1_485;  // int32
  wire signed [31:0] sel_1497;  // int32
  wire signed [31:0] sel_1_486;  // int32
  wire signed [31:0] sel_1_487;  // int32
  wire signed [31:0] sel_1_488;  // int32
  wire signed [31:0] sel_1498;  // int32
  wire signed [31:0] sel_1_489;  // int32
  wire signed [31:0] sel_1499;  // int32
  wire signed [31:0] sel_1500;  // int32
  reg signed [31:0] sel_1_490;  // int32
  wire [7:0] tmp_352;  // uint8
  reg  tmp_353;
  reg [7:0] tmp_354;  // uint8
  wire [7:0] sel_1_491;  // uint8
  wire signed [31:0] sel_1501;  // int32
  wire signed [31:0] sel_1502;  // int32
  wire signed [31:0] sel_1503;  // int32
  wire signed [31:0] sel_1504;  // int32
  wire signed [31:0] sel_1505;  // int32
  wire signed [31:0] sel_1506;  // int32
  wire signed [31:0] sel_1507;  // int32
  wire signed [31:0] sel_1508;  // int32
  wire signed [31:0] sel_1509;  // int32
  wire signed [31:0] sel_1510;  // int32
  wire signed [31:0] sel_1511;  // int32
  wire signed [31:0] sel_1512;  // int32
  wire signed [31:0] sel_1513;  // int32
  wire signed [31:0] sel_1514;  // int32
  wire signed [31:0] sel_1515;  // int32
  wire signed [31:0] sel_1516;  // int32
  wire signed [31:0] sel_1517;  // int32
  wire signed [31:0] s_257;  // int32
  wire signed [31:0] sel_1_492;  // int32
  wire signed [31:0] sel_1518;  // int32
  wire signed [31:0] sel_1_493;  // int32
  wire signed [31:0] sel_1519;  // int32
  wire signed [31:0] sel_1_494;  // int32
  wire signed [31:0] sel_1_495;  // int32
  wire signed [31:0] sel_1_496;  // int32
  wire signed [31:0] sel_1520;  // int32
  wire signed [31:0] sel_1_497;  // int32
  wire signed [31:0] sel_1521;  // int32
  wire signed [31:0] sel_1522;  // int32
  reg signed [31:0] sel_1_498;  // int32
  wire [7:0] tmp_355;  // uint8
  reg  tmp_356;
  reg [7:0] tmp_357;  // uint8
  wire [7:0] sel_1_499;  // uint8
  wire signed [31:0] sel_1523;  // int32
  wire signed [31:0] sel_1524;  // int32
  wire signed [31:0] sel_1525;  // int32
  wire signed [31:0] sel_1526;  // int32
  wire signed [31:0] sel_1527;  // int32
  wire signed [31:0] sel_1528;  // int32
  wire signed [31:0] sel_1529;  // int32
  wire signed [31:0] sel_1530;  // int32
  wire signed [31:0] sel_1531;  // int32
  wire signed [31:0] sel_1532;  // int32
  wire signed [31:0] sel_1533;  // int32
  wire signed [31:0] sel_1534;  // int32
  wire signed [31:0] sel_1535;  // int32
  wire signed [31:0] sel_1536;  // int32
  wire signed [31:0] sel_1537;  // int32
  wire signed [31:0] sel_1538;  // int32
  wire signed [31:0] sel_1539;  // int32
  wire signed [31:0] s_258;  // int32
  wire signed [31:0] sel_1_500;  // int32
  wire signed [31:0] sel_1540;  // int32
  wire signed [31:0] sel_1_501;  // int32
  wire signed [31:0] sel_1_502;  // int32
  wire signed [31:0] sel_1_503;  // int32
  wire signed [31:0] sel_1541;  // int32
  wire signed [31:0] sel_1_504;  // int32
  wire signed [31:0] sel_1542;  // int32
  wire signed [31:0] sel_1543;  // int32
  reg signed [31:0] sel_1_505;  // int32
  wire [7:0] tmp_358;  // uint8
  reg  tmp_359;
  reg [7:0] tmp_360;  // uint8
  wire [7:0] sel_1_506;  // uint8
  wire signed [31:0] sel_1544;  // int32
  wire signed [31:0] sel_1545;  // int32
  wire signed [31:0] sel_1546;  // int32
  wire signed [31:0] sel_1547;  // int32
  wire signed [31:0] sel_1548;  // int32
  wire signed [31:0] sel_1549;  // int32
  wire signed [31:0] sel_1550;  // int32
  wire signed [31:0] sel_1551;  // int32
  wire signed [31:0] sel_1552;  // int32
  wire signed [31:0] sel_1553;  // int32
  wire signed [31:0] sel_1554;  // int32
  wire signed [31:0] sel_1555;  // int32
  wire signed [31:0] sel_1556;  // int32
  wire signed [31:0] sel_1557;  // int32
  wire signed [31:0] sel_1558;  // int32
  wire signed [31:0] sel_1559;  // int32
  wire signed [31:0] sel_1560;  // int32
  wire signed [31:0] s_259;  // int32
  wire signed [31:0] sel_1_507;  // int32
  wire signed [31:0] sel_1_508;  // int32
  wire signed [31:0] sel_1_509;  // int32
  wire signed [31:0] sel_1561;  // int32
  wire signed [31:0] sel_1_510;  // int32
  wire signed [31:0] sel_1562;  // int32
  wire signed [31:0] sel_1563;  // int32
  reg signed [31:0] sel_1_511;  // int32
  wire [7:0] tmp_361;  // uint8
  wire [7:0] sel_1564;  // uint8
  reg [7:0] tmp_362;  // uint8
  wire [7:0] sel_1_512;  // uint8
  reg [7:0] tmp_363;  // uint8
  wire [7:0] sel_1_513;  // uint8
  wire [7:0] sel_1565;  // uint8
  reg [4:0] is_SPI_MNGR_59;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_1566;
  wire sel_1567;
  wire sel_1568;
  wire sel_1569;
  wire sel_1570;
  wire sel_1571;
  wire sel_1572;
  wire sel_1573;
  wire sel_1574;
  wire sel_1575;
  wire sel_1576;
  wire sel_1577;
  wire sel_1578;
  wire sel_1579;
  wire s_260;
  wire sel_2_68;
  wire s_261;
  wire sel_2_69;
  wire s_262;
  wire sel_2_70;
  wire s_263;
  wire sel_2_71;
  wire s_264;
  wire sel_2_72;
  wire s_265;
  wire sel_2_73;
  wire s_266;
  wire sel_2_74;
  wire s_267;
  wire sel_2_75;
  reg  s_268;
  wire sel_1580;
  wire sel_1581;
  wire sel_1582;
  wire s_269;
  wire sel_2_76;
  wire s_270;
  wire sel_2_77;
  wire s_271;
  wire sel_2_78;
  wire s_272;
  wire sel_2_79;
  wire s_273;
  wire sel_2_80;
  wire s_274;
  wire sel_2_81;
  wire s_275;
  wire sel_2_82;
  wire s_276;
  wire sel_2_83;
  wire sel_2_84;
  wire sel_2_85;
  reg  sel_2_86;
  reg  sel_2_87;
  wire sel_1583;
  wire sel_2_88;
  wire sel_1584;
  reg [4:0] is_SPI_MNGR_60;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_1585;  // uint8
  wire [7:0] sel_1586;  // uint8
  wire [7:0] sel_1587;  // uint8
  wire [7:0] sel_1588;  // uint8
  wire [7:0] sel_1589;  // uint8
  wire [7:0] sel_1590;  // uint8
  wire [7:0] sel_1591;  // uint8
  wire [7:0] sel_1592;  // uint8
  wire [7:0] sel_1593;  // uint8
  wire [7:0] sel_1594;  // uint8
  wire [7:0] sel_1595;  // uint8
  wire [7:0] sel_1596;  // uint8
  reg  s_277;
  wire signed [31:0] sel_1597;  // int32
  wire signed [31:0] sel_1598;  // int32
  wire signed [31:0] sel_1599;  // int32
  wire signed [31:0] sel_1600;  // int32
  wire signed [31:0] sel_1601;  // int32
  wire signed [31:0] sel_1602;  // int32
  wire signed [31:0] sel_1603;  // int32
  wire signed [31:0] sel_1604;  // int32
  wire signed [31:0] sel_1605;  // int32
  wire signed [31:0] sel_1606;  // int32
  wire signed [31:0] sel_1607;  // int32
  wire signed [31:0] sel_1608;  // int32
  wire signed [31:0] sel_1609;  // int32
  wire signed [31:0] sel_1610;  // int32
  wire signed [31:0] s_278;  // int32
  wire signed [31:0] sel_1_514;  // int32
  wire signed [31:0] sel_1611;  // int32
  wire signed [31:0] sel_1_515;  // int32
  wire signed [31:0] sel_1612;  // int32
  wire signed [31:0] sel_1_516;  // int32
  wire signed [31:0] sel_1613;  // int32
  wire signed [31:0] sel_1_517;  // int32
  wire signed [31:0] sel_1614;  // int32
  wire signed [31:0] sel_1_518;  // int32
  wire signed [31:0] sel_1615;  // int32
  wire signed [31:0] sel_1_519;  // int32
  wire signed [31:0] sel_1616;  // int32
  wire signed [31:0] sel_1_520;  // int32
  wire signed [31:0] sel_1617;  // int32
  wire signed [31:0] sel_1_521;  // int32
  wire signed [31:0] sel_1618;  // int32
  wire signed [31:0] sel_1619;  // int32
  wire signed [31:0] sel_1620;  // int32
  reg signed [31:0] sel_1_522;  // int32
  wire [7:0] tmp_364;  // uint8
  wire signed [31:0] sel_1621;  // int32
  wire signed [31:0] sel_1622;  // int32
  wire signed [31:0] sel_1623;  // int32
  wire signed [31:0] sel_1624;  // int32
  wire signed [31:0] sel_1625;  // int32
  wire signed [31:0] sel_1626;  // int32
  wire signed [31:0] sel_1627;  // int32
  wire signed [31:0] sel_1628;  // int32
  wire signed [31:0] sel_1629;  // int32
  wire signed [31:0] sel_1630;  // int32
  wire signed [31:0] sel_1631;  // int32
  wire signed [31:0] sel_1632;  // int32
  wire signed [31:0] sel_1633;  // int32
  wire signed [31:0] sel_1634;  // int32
  wire signed [31:0] s_279;  // int32
  wire signed [31:0] sel_1_523;  // int32
  wire signed [31:0] sel_1635;  // int32
  wire signed [31:0] sel_1_524;  // int32
  wire signed [31:0] sel_1636;  // int32
  wire signed [31:0] sel_1_525;  // int32
  wire signed [31:0] sel_1637;  // int32
  wire signed [31:0] sel_1_526;  // int32
  wire signed [31:0] sel_1638;  // int32
  wire signed [31:0] sel_1_527;  // int32
  wire signed [31:0] sel_1639;  // int32
  wire signed [31:0] sel_1_528;  // int32
  wire signed [31:0] sel_1640;  // int32
  wire signed [31:0] sel_1_529;  // int32
  wire signed [31:0] sel_1641;  // int32
  wire signed [31:0] sel_1642;  // int32
  wire signed [31:0] sel_1643;  // int32
  reg signed [31:0] sel_1_530;  // int32
  wire [7:0] tmp_365;  // uint8
  wire [7:0] sel_1_531;  // uint8
  wire signed [31:0] sel_1644;  // int32
  wire signed [31:0] sel_1645;  // int32
  wire signed [31:0] sel_1646;  // int32
  wire signed [31:0] sel_1647;  // int32
  wire signed [31:0] sel_1648;  // int32
  wire signed [31:0] sel_1649;  // int32
  wire signed [31:0] sel_1650;  // int32
  wire signed [31:0] sel_1651;  // int32
  wire signed [31:0] sel_1652;  // int32
  wire signed [31:0] sel_1653;  // int32
  wire signed [31:0] sel_1654;  // int32
  wire signed [31:0] sel_1655;  // int32
  wire signed [31:0] sel_1656;  // int32
  wire signed [31:0] sel_1657;  // int32
  wire signed [31:0] s_280;  // int32
  wire signed [31:0] sel_1_532;  // int32
  wire signed [31:0] sel_1658;  // int32
  wire signed [31:0] sel_1_533;  // int32
  wire signed [31:0] sel_1659;  // int32
  wire signed [31:0] sel_1_534;  // int32
  wire signed [31:0] sel_1660;  // int32
  wire signed [31:0] sel_1_535;  // int32
  wire signed [31:0] sel_1661;  // int32
  wire signed [31:0] sel_1_536;  // int32
  wire signed [31:0] sel_1662;  // int32
  wire signed [31:0] sel_1_537;  // int32
  wire signed [31:0] sel_1663;  // int32
  wire signed [31:0] sel_1664;  // int32
  wire signed [31:0] sel_1665;  // int32
  reg signed [31:0] sel_1_538;  // int32
  wire [7:0] tmp_366;  // uint8
  wire [7:0] sel_1_539;  // uint8
  wire signed [31:0] sel_1666;  // int32
  wire signed [31:0] sel_1667;  // int32
  wire signed [31:0] sel_1668;  // int32
  wire signed [31:0] sel_1669;  // int32
  wire signed [31:0] sel_1670;  // int32
  wire signed [31:0] sel_1671;  // int32
  wire signed [31:0] sel_1672;  // int32
  wire signed [31:0] sel_1673;  // int32
  wire signed [31:0] sel_1674;  // int32
  wire signed [31:0] sel_1675;  // int32
  wire signed [31:0] sel_1676;  // int32
  wire signed [31:0] sel_1677;  // int32
  wire signed [31:0] sel_1678;  // int32
  wire signed [31:0] sel_1679;  // int32
  wire signed [31:0] s_281;  // int32
  wire signed [31:0] sel_1_540;  // int32
  wire signed [31:0] sel_1680;  // int32
  wire signed [31:0] sel_1_541;  // int32
  wire signed [31:0] sel_1681;  // int32
  wire signed [31:0] sel_1_542;  // int32
  wire signed [31:0] sel_1682;  // int32
  wire signed [31:0] sel_1_543;  // int32
  wire signed [31:0] sel_1683;  // int32
  wire signed [31:0] sel_1_544;  // int32
  wire signed [31:0] sel_1684;  // int32
  wire signed [31:0] sel_1685;  // int32
  wire signed [31:0] sel_1686;  // int32
  reg signed [31:0] sel_1_545;  // int32
  wire [7:0] tmp_367;  // uint8
  wire [7:0] sel_1_546;  // uint8
  reg [7:0] sel_1_547;  // uint8
  wire signed [31:0] sel_1687;  // int32
  wire signed [31:0] sel_1688;  // int32
  wire signed [31:0] sel_1689;  // int32
  wire signed [31:0] sel_1690;  // int32
  wire signed [31:0] sel_1691;  // int32
  wire signed [31:0] sel_1692;  // int32
  wire signed [31:0] sel_1693;  // int32
  wire signed [31:0] sel_1694;  // int32
  wire signed [31:0] sel_1695;  // int32
  wire signed [31:0] sel_1696;  // int32
  wire signed [31:0] sel_1697;  // int32
  wire signed [31:0] sel_1698;  // int32
  wire signed [31:0] sel_1699;  // int32
  wire signed [31:0] sel_1700;  // int32
  wire signed [31:0] s_282;  // int32
  wire signed [31:0] sel_1_548;  // int32
  wire signed [31:0] sel_1701;  // int32
  wire signed [31:0] sel_1_549;  // int32
  wire signed [31:0] sel_1702;  // int32
  wire signed [31:0] sel_1_550;  // int32
  wire signed [31:0] sel_1703;  // int32
  wire signed [31:0] sel_1_551;  // int32
  wire signed [31:0] sel_1704;  // int32
  wire signed [31:0] sel_1705;  // int32
  wire signed [31:0] sel_1706;  // int32
  reg signed [31:0] sel_1_552;  // int32
  wire [7:0] tmp_368;  // uint8
  reg  s_283;
  reg [7:0] tmp_369;  // uint8
  wire [7:0] sel_1_553;  // uint8
  wire signed [31:0] sel_1707;  // int32
  wire signed [31:0] sel_1708;  // int32
  wire signed [31:0] sel_1709;  // int32
  wire signed [31:0] sel_1710;  // int32
  wire signed [31:0] sel_1711;  // int32
  wire signed [31:0] sel_1712;  // int32
  wire signed [31:0] sel_1713;  // int32
  wire signed [31:0] sel_1714;  // int32
  wire signed [31:0] sel_1715;  // int32
  wire signed [31:0] sel_1716;  // int32
  wire signed [31:0] sel_1717;  // int32
  wire signed [31:0] sel_1718;  // int32
  wire signed [31:0] sel_1719;  // int32
  wire signed [31:0] sel_1720;  // int32
  wire signed [31:0] s_284;  // int32
  wire signed [31:0] sel_1_554;  // int32
  wire signed [31:0] sel_1721;  // int32
  wire signed [31:0] sel_1_555;  // int32
  wire signed [31:0] sel_1722;  // int32
  wire signed [31:0] sel_1_556;  // int32
  wire signed [31:0] sel_1723;  // int32
  wire signed [31:0] sel_1724;  // int32
  wire signed [31:0] sel_1725;  // int32
  reg signed [31:0] sel_1_557;  // int32
  wire [7:0] tmp_370;  // uint8
  reg  s_285;
  reg [7:0] tmp_371;  // uint8
  wire [7:0] sel_1_558;  // uint8
  wire signed [31:0] sel_1726;  // int32
  wire signed [31:0] sel_1727;  // int32
  wire signed [31:0] sel_1728;  // int32
  wire signed [31:0] sel_1729;  // int32
  wire signed [31:0] sel_1730;  // int32
  wire signed [31:0] sel_1731;  // int32
  wire signed [31:0] sel_1732;  // int32
  wire signed [31:0] sel_1733;  // int32
  wire signed [31:0] sel_1734;  // int32
  wire signed [31:0] sel_1735;  // int32
  wire signed [31:0] sel_1736;  // int32
  wire signed [31:0] sel_1737;  // int32
  wire signed [31:0] sel_1738;  // int32
  wire signed [31:0] sel_1739;  // int32
  wire signed [31:0] s_286;  // int32
  wire signed [31:0] sel_1_559;  // int32
  wire signed [31:0] sel_1740;  // int32
  wire signed [31:0] sel_1_560;  // int32
  wire signed [31:0] sel_1741;  // int32
  wire signed [31:0] sel_1742;  // int32
  wire signed [31:0] sel_1743;  // int32
  reg signed [31:0] sel_1_561;  // int32
  wire [7:0] tmp_372;  // uint8
  reg  s_287;
  reg [7:0] tmp_373;  // uint8
  wire [7:0] sel_1_562;  // uint8
  wire signed [31:0] sel_1744;  // int32
  wire signed [31:0] sel_1745;  // int32
  wire signed [31:0] sel_1746;  // int32
  wire signed [31:0] sel_1747;  // int32
  wire signed [31:0] sel_1748;  // int32
  wire signed [31:0] sel_1749;  // int32
  wire signed [31:0] sel_1750;  // int32
  wire signed [31:0] sel_1751;  // int32
  wire signed [31:0] sel_1752;  // int32
  wire signed [31:0] sel_1753;  // int32
  wire signed [31:0] sel_1754;  // int32
  wire signed [31:0] sel_1755;  // int32
  wire signed [31:0] sel_1756;  // int32
  wire signed [31:0] sel_1757;  // int32
  wire signed [31:0] s_288;  // int32
  wire signed [31:0] sel_1_563;  // int32
  wire signed [31:0] sel_1758;  // int32
  wire signed [31:0] sel_1759;  // int32
  wire signed [31:0] sel_1760;  // int32
  reg signed [31:0] sel_1_564;  // int32
  wire [7:0] tmp_374;  // uint8
  reg [4:0] is_SPI_MNGR_61;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_1761;  // int32
  wire signed [31:0] sel_1762;  // int32
  wire signed [31:0] sel_1763;  // int32
  wire signed [31:0] sel_1764;  // int32
  wire signed [31:0] sel_1765;  // int32
  wire signed [31:0] sel_1766;  // int32
  wire signed [31:0] sel_1767;  // int32
  wire signed [31:0] sel_1768;  // int32
  wire signed [31:0] sel_1769;  // int32
  wire signed [31:0] sel_1770;  // int32
  wire signed [31:0] sel_1771;  // int32
  wire signed [31:0] sel_1772;  // int32
  wire signed [31:0] sel_1773;  // int32
  reg  s_289;
  wire signed [31:0] sel_1774;  // int32
  wire signed [31:0] sel_1775;  // int32
  wire signed [31:0] sel_1776;  // int32
  wire signed [31:0] s_290;  // int32
  wire signed [31:0] sel_1_565;  // int32
  wire signed [31:0] sel_1777;  // int32
  wire signed [31:0] sel_1_566;  // int32
  wire signed [31:0] sel_1778;  // int32
  wire signed [31:0] sel_1_567;  // int32
  wire signed [31:0] sel_1779;  // int32
  wire signed [31:0] sel_1_568;  // int32
  wire signed [31:0] sel_1780;  // int32
  wire signed [31:0] sel_1_569;  // int32
  wire signed [31:0] sel_1781;  // int32
  wire signed [31:0] sel_1_570;  // int32
  wire signed [31:0] sel_1782;  // int32
  wire signed [31:0] sel_1_571;  // int32
  wire signed [31:0] sel_1783;  // int32
  wire signed [31:0] sel_1_572;  // int32
  wire signed [31:0] sel_1_573;  // int32
  wire signed [31:0] sel_1_574;  // int32
  reg signed [31:0] sel_1_575;  // int32
  wire signed [31:0] sel_1784;  // int32
  wire signed [31:0] sel_1785;  // int32
  wire signed [31:0] sel_1_576;  // int32
  wire signed [31:0] sel_1786;  // int32
  reg  tmp_375;
  reg [7:0] rd_310_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_310_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_31 [0:11];  // uint8 [12]
  wire signed [31:0] sel_1787;  // int32
  reg signed [31:0] sel_1_577;  // int32
  wire [7:0] tmp_376;  // uint8
  wire signed [31:0] sel_1788;  // int32
  wire signed [31:0] sel_1789;  // int32
  wire signed [31:0] sel_1790;  // int32
  wire signed [31:0] sel_1791;  // int32
  wire signed [31:0] sel_1792;  // int32
  wire signed [31:0] sel_1793;  // int32
  wire signed [31:0] sel_1794;  // int32
  wire signed [31:0] sel_1795;  // int32
  wire signed [31:0] sel_1796;  // int32
  wire signed [31:0] sel_1797;  // int32
  wire signed [31:0] sel_1798;  // int32
  wire signed [31:0] sel_1799;  // int32
  wire signed [31:0] sel_1800;  // int32
  wire signed [31:0] sel_1801;  // int32
  wire signed [31:0] sel_1802;  // int32
  wire signed [31:0] sel_1803;  // int32
  wire signed [31:0] sel_1804;  // int32
  wire signed [31:0] s_291;  // int32
  wire signed [31:0] sel_1_578;  // int32
  wire signed [31:0] sel_1805;  // int32
  wire signed [31:0] sel_1_579;  // int32
  wire signed [31:0] sel_1806;  // int32
  wire signed [31:0] sel_1_580;  // int32
  wire signed [31:0] sel_1807;  // int32
  wire signed [31:0] sel_1_581;  // int32
  wire signed [31:0] sel_1808;  // int32
  wire signed [31:0] sel_1_582;  // int32
  wire signed [31:0] sel_1809;  // int32
  wire signed [31:0] sel_1_583;  // int32
  wire signed [31:0] sel_1810;  // int32
  wire signed [31:0] sel_1_584;  // int32
  wire signed [31:0] sel_1_585;  // int32
  wire signed [31:0] sel_1_586;  // int32
  wire signed [31:0] sel_1811;  // int32
  wire signed [31:0] sel_1_587;  // int32
  wire signed [31:0] sel_1812;  // int32
  wire signed [31:0] sel_1813;  // int32
  reg signed [31:0] sel_1_588;  // int32
  wire [7:0] tmp_377;  // uint8
  reg  tmp_378;
  reg [7:0] tmp_379;  // uint8
  wire [7:0] sel_1_589;  // uint8
  wire signed [31:0] sel_1814;  // int32
  wire signed [31:0] sel_1815;  // int32
  wire signed [31:0] sel_1816;  // int32
  wire signed [31:0] sel_1817;  // int32
  wire signed [31:0] sel_1818;  // int32
  wire signed [31:0] sel_1819;  // int32
  wire signed [31:0] sel_1820;  // int32
  wire signed [31:0] sel_1821;  // int32
  wire signed [31:0] sel_1822;  // int32
  wire signed [31:0] sel_1823;  // int32
  wire signed [31:0] sel_1824;  // int32
  wire signed [31:0] sel_1825;  // int32
  wire signed [31:0] sel_1826;  // int32
  wire signed [31:0] sel_1827;  // int32
  wire signed [31:0] sel_1828;  // int32
  wire signed [31:0] sel_1829;  // int32
  wire signed [31:0] sel_1830;  // int32
  wire signed [31:0] s_292;  // int32
  wire signed [31:0] sel_1_590;  // int32
  wire signed [31:0] sel_1831;  // int32
  wire signed [31:0] sel_1_591;  // int32
  wire signed [31:0] sel_1832;  // int32
  wire signed [31:0] sel_1_592;  // int32
  wire signed [31:0] sel_1833;  // int32
  wire signed [31:0] sel_1_593;  // int32
  wire signed [31:0] sel_1834;  // int32
  wire signed [31:0] sel_1_594;  // int32
  wire signed [31:0] sel_1835;  // int32
  wire signed [31:0] sel_1_595;  // int32
  wire signed [31:0] sel_1_596;  // int32
  wire signed [31:0] sel_1_597;  // int32
  wire signed [31:0] sel_1836;  // int32
  wire signed [31:0] sel_1_598;  // int32
  wire signed [31:0] sel_1837;  // int32
  wire signed [31:0] sel_1838;  // int32
  reg signed [31:0] sel_1_599;  // int32
  wire [7:0] tmp_380;  // uint8
  reg  tmp_381;
  reg [7:0] tmp_382;  // uint8
  wire [7:0] sel_1_600;  // uint8
  wire signed [31:0] sel_1839;  // int32
  wire signed [31:0] sel_1840;  // int32
  wire signed [31:0] sel_1841;  // int32
  wire signed [31:0] sel_1842;  // int32
  wire signed [31:0] sel_1843;  // int32
  wire signed [31:0] sel_1844;  // int32
  wire signed [31:0] sel_1845;  // int32
  wire signed [31:0] sel_1846;  // int32
  wire signed [31:0] sel_1847;  // int32
  wire signed [31:0] sel_1848;  // int32
  wire signed [31:0] sel_1849;  // int32
  wire signed [31:0] sel_1850;  // int32
  wire signed [31:0] sel_1851;  // int32
  wire signed [31:0] sel_1852;  // int32
  wire signed [31:0] sel_1853;  // int32
  wire signed [31:0] sel_1854;  // int32
  wire signed [31:0] sel_1855;  // int32
  wire signed [31:0] s_293;  // int32
  wire signed [31:0] sel_1_601;  // int32
  wire signed [31:0] sel_1856;  // int32
  wire signed [31:0] sel_1_602;  // int32
  wire signed [31:0] sel_1857;  // int32
  wire signed [31:0] sel_1_603;  // int32
  wire signed [31:0] sel_1858;  // int32
  wire signed [31:0] sel_1_604;  // int32
  wire signed [31:0] sel_1859;  // int32
  wire signed [31:0] sel_1_605;  // int32
  wire signed [31:0] sel_1_606;  // int32
  wire signed [31:0] sel_1_607;  // int32
  wire signed [31:0] sel_1860;  // int32
  wire signed [31:0] sel_1_608;  // int32
  wire signed [31:0] sel_1861;  // int32
  wire signed [31:0] sel_1862;  // int32
  reg signed [31:0] sel_1_609;  // int32
  wire [7:0] tmp_383;  // uint8
  reg  tmp_384;
  reg [7:0] tmp_385;  // uint8
  wire [7:0] sel_1_610;  // uint8
  wire signed [31:0] sel_1863;  // int32
  wire signed [31:0] sel_1864;  // int32
  wire signed [31:0] sel_1865;  // int32
  wire signed [31:0] sel_1866;  // int32
  wire signed [31:0] sel_1867;  // int32
  wire signed [31:0] sel_1868;  // int32
  wire signed [31:0] sel_1869;  // int32
  wire signed [31:0] sel_1870;  // int32
  wire signed [31:0] sel_1871;  // int32
  wire signed [31:0] sel_1872;  // int32
  wire signed [31:0] sel_1873;  // int32
  wire signed [31:0] sel_1874;  // int32
  wire signed [31:0] sel_1875;  // int32
  wire signed [31:0] sel_1876;  // int32
  wire signed [31:0] sel_1877;  // int32
  wire signed [31:0] sel_1878;  // int32
  wire signed [31:0] sel_1879;  // int32
  wire signed [31:0] s_294;  // int32
  wire signed [31:0] sel_1_611;  // int32
  wire signed [31:0] sel_1880;  // int32
  wire signed [31:0] sel_1_612;  // int32
  wire signed [31:0] sel_1881;  // int32
  wire signed [31:0] sel_1_613;  // int32
  wire signed [31:0] sel_1882;  // int32
  wire signed [31:0] sel_1_614;  // int32
  wire signed [31:0] sel_1_615;  // int32
  wire signed [31:0] sel_1_616;  // int32
  wire signed [31:0] sel_1883;  // int32
  wire signed [31:0] sel_1_617;  // int32
  wire signed [31:0] sel_1884;  // int32
  wire signed [31:0] sel_1885;  // int32
  reg signed [31:0] sel_1_618;  // int32
  wire [7:0] tmp_386;  // uint8
  reg  tmp_387;
  reg [7:0] tmp_388;  // uint8
  wire [7:0] sel_1_619;  // uint8
  wire signed [31:0] sel_1886;  // int32
  wire signed [31:0] sel_1887;  // int32
  wire signed [31:0] sel_1888;  // int32
  wire signed [31:0] sel_1889;  // int32
  wire signed [31:0] sel_1890;  // int32
  wire signed [31:0] sel_1891;  // int32
  wire signed [31:0] sel_1892;  // int32
  wire signed [31:0] sel_1893;  // int32
  wire signed [31:0] sel_1894;  // int32
  wire signed [31:0] sel_1895;  // int32
  wire signed [31:0] sel_1896;  // int32
  wire signed [31:0] sel_1897;  // int32
  wire signed [31:0] sel_1898;  // int32
  wire signed [31:0] sel_1899;  // int32
  wire signed [31:0] sel_1900;  // int32
  wire signed [31:0] sel_1901;  // int32
  wire signed [31:0] sel_1902;  // int32
  wire signed [31:0] s_295;  // int32
  wire signed [31:0] sel_1_620;  // int32
  wire signed [31:0] sel_1903;  // int32
  wire signed [31:0] sel_1_621;  // int32
  wire signed [31:0] sel_1904;  // int32
  wire signed [31:0] sel_1_622;  // int32
  wire signed [31:0] sel_1_623;  // int32
  wire signed [31:0] sel_1_624;  // int32
  wire signed [31:0] sel_1905;  // int32
  wire signed [31:0] sel_1_625;  // int32
  wire signed [31:0] sel_1906;  // int32
  wire signed [31:0] sel_1907;  // int32
  reg signed [31:0] sel_1_626;  // int32
  wire [7:0] tmp_389;  // uint8
  reg  tmp_390;
  reg [7:0] tmp_391;  // uint8
  wire [7:0] sel_1_627;  // uint8
  wire signed [31:0] sel_1908;  // int32
  wire signed [31:0] sel_1909;  // int32
  wire signed [31:0] sel_1910;  // int32
  wire signed [31:0] sel_1911;  // int32
  wire signed [31:0] sel_1912;  // int32
  wire signed [31:0] sel_1913;  // int32
  wire signed [31:0] sel_1914;  // int32
  wire signed [31:0] sel_1915;  // int32
  wire signed [31:0] sel_1916;  // int32
  wire signed [31:0] sel_1917;  // int32
  wire signed [31:0] sel_1918;  // int32
  wire signed [31:0] sel_1919;  // int32
  wire signed [31:0] sel_1920;  // int32
  wire signed [31:0] sel_1921;  // int32
  wire signed [31:0] sel_1922;  // int32
  wire signed [31:0] sel_1923;  // int32
  wire signed [31:0] sel_1924;  // int32
  wire signed [31:0] s_296;  // int32
  wire signed [31:0] sel_1_628;  // int32
  wire signed [31:0] sel_1925;  // int32
  wire signed [31:0] sel_1_629;  // int32
  wire signed [31:0] sel_1_630;  // int32
  wire signed [31:0] sel_1_631;  // int32
  wire signed [31:0] sel_1926;  // int32
  wire signed [31:0] sel_1_632;  // int32
  wire signed [31:0] sel_1927;  // int32
  wire signed [31:0] sel_1928;  // int32
  reg signed [31:0] sel_1_633;  // int32
  wire [7:0] tmp_392;  // uint8
  reg  tmp_393;
  reg [7:0] tmp_394;  // uint8
  wire [7:0] sel_1_634;  // uint8
  wire signed [31:0] sel_1929;  // int32
  wire signed [31:0] sel_1930;  // int32
  wire signed [31:0] sel_1931;  // int32
  wire signed [31:0] sel_1932;  // int32
  wire signed [31:0] sel_1933;  // int32
  wire signed [31:0] sel_1934;  // int32
  wire signed [31:0] sel_1935;  // int32
  wire signed [31:0] sel_1936;  // int32
  wire signed [31:0] sel_1937;  // int32
  wire signed [31:0] sel_1938;  // int32
  wire signed [31:0] sel_1939;  // int32
  wire signed [31:0] sel_1940;  // int32
  wire signed [31:0] sel_1941;  // int32
  wire signed [31:0] sel_1942;  // int32
  wire signed [31:0] sel_1943;  // int32
  wire signed [31:0] sel_1944;  // int32
  wire signed [31:0] sel_1945;  // int32
  wire signed [31:0] s_297;  // int32
  wire signed [31:0] sel_1_635;  // int32
  wire signed [31:0] sel_1_636;  // int32
  wire signed [31:0] sel_1_637;  // int32
  wire signed [31:0] sel_1946;  // int32
  wire signed [31:0] sel_1_638;  // int32
  wire signed [31:0] sel_1947;  // int32
  wire signed [31:0] sel_1948;  // int32
  reg signed [31:0] sel_1_639;  // int32
  wire [7:0] tmp_395;  // uint8
  wire [7:0] sel_1949;  // uint8
  reg [7:0] tmp_396;  // uint8
  wire [7:0] sel_1_640;  // uint8
  reg [7:0] tmp_397;  // uint8
  wire [7:0] sel_1_641;  // uint8
  wire [7:0] sel_1950;  // uint8
  reg [4:0] is_SPI_MNGR_62;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_1951;
  wire sel_1952;
  wire sel_1953;
  wire sel_1954;
  wire sel_1955;
  wire sel_1956;
  wire sel_1957;
  wire sel_1958;
  wire sel_1959;
  wire sel_1960;
  wire sel_1961;
  wire sel_1962;
  wire sel_1963;
  wire sel_1964;
  wire s_298;
  wire sel_2_89;
  wire s_299;
  wire sel_2_90;
  wire s_300;
  wire sel_2_91;
  wire s_301;
  wire sel_2_92;
  wire s_302;
  wire sel_2_93;
  wire s_303;
  wire sel_2_94;
  wire s_304;
  wire sel_2_95;
  wire s_305;
  wire sel_2_96;
  reg  s_306;
  wire sel_1965;
  wire sel_1966;
  wire sel_1967;
  wire s_307;
  wire sel_2_97;
  wire s_308;
  wire sel_2_98;
  wire s_309;
  wire sel_2_99;
  wire s_310;
  wire sel_2_100;
  wire s_311;
  wire sel_2_101;
  wire s_312;
  wire sel_2_102;
  wire s_313;
  wire sel_2_103;
  wire s_314;
  wire sel_2_104;
  wire sel_2_105;
  wire sel_2_106;
  reg  sel_2_107;
  reg  sel_2_108;
  wire sel_1968;
  wire sel_2_109;
  wire sel_1969;
  reg [4:0] is_SPI_MNGR_63;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_1970;  // uint8
  wire [7:0] sel_1971;  // uint8
  wire [7:0] sel_1972;  // uint8
  wire [7:0] sel_1973;  // uint8
  wire [7:0] sel_1974;  // uint8
  wire [7:0] sel_1975;  // uint8
  wire [7:0] sel_1976;  // uint8
  wire [7:0] sel_1977;  // uint8
  wire [7:0] sel_1978;  // uint8
  wire [7:0] sel_1979;  // uint8
  wire [7:0] sel_1980;  // uint8
  wire [7:0] sel_1981;  // uint8
  reg  s_315;
  wire signed [31:0] sel_1982;  // int32
  wire signed [31:0] sel_1983;  // int32
  wire signed [31:0] sel_1984;  // int32
  wire signed [31:0] sel_1985;  // int32
  wire signed [31:0] sel_1986;  // int32
  wire signed [31:0] sel_1987;  // int32
  wire signed [31:0] sel_1988;  // int32
  wire signed [31:0] sel_1989;  // int32
  wire signed [31:0] sel_1990;  // int32
  wire signed [31:0] sel_1991;  // int32
  wire signed [31:0] sel_1992;  // int32
  wire signed [31:0] sel_1993;  // int32
  wire signed [31:0] sel_1994;  // int32
  wire signed [31:0] sel_1995;  // int32
  wire signed [31:0] s_316;  // int32
  wire signed [31:0] sel_1_642;  // int32
  wire signed [31:0] sel_1996;  // int32
  wire signed [31:0] sel_1_643;  // int32
  wire signed [31:0] sel_1997;  // int32
  wire signed [31:0] sel_1_644;  // int32
  wire signed [31:0] sel_1998;  // int32
  wire signed [31:0] sel_1_645;  // int32
  wire signed [31:0] sel_1999;  // int32
  wire signed [31:0] sel_1_646;  // int32
  wire signed [31:0] sel_2000;  // int32
  wire signed [31:0] sel_1_647;  // int32
  wire signed [31:0] sel_2001;  // int32
  wire signed [31:0] sel_1_648;  // int32
  wire signed [31:0] sel_2002;  // int32
  wire signed [31:0] sel_1_649;  // int32
  wire signed [31:0] sel_2003;  // int32
  wire signed [31:0] sel_2004;  // int32
  wire signed [31:0] sel_2005;  // int32
  reg signed [31:0] sel_1_650;  // int32
  wire [7:0] tmp_398;  // uint8
  wire signed [31:0] sel_2006;  // int32
  wire signed [31:0] sel_2007;  // int32
  wire signed [31:0] sel_2008;  // int32
  wire signed [31:0] sel_2009;  // int32
  wire signed [31:0] sel_2010;  // int32
  wire signed [31:0] sel_2011;  // int32
  wire signed [31:0] sel_2012;  // int32
  wire signed [31:0] sel_2013;  // int32
  wire signed [31:0] sel_2014;  // int32
  wire signed [31:0] sel_2015;  // int32
  wire signed [31:0] sel_2016;  // int32
  wire signed [31:0] sel_2017;  // int32
  wire signed [31:0] sel_2018;  // int32
  wire signed [31:0] sel_2019;  // int32
  wire signed [31:0] s_317;  // int32
  wire signed [31:0] sel_1_651;  // int32
  wire signed [31:0] sel_2020;  // int32
  wire signed [31:0] sel_1_652;  // int32
  wire signed [31:0] sel_2021;  // int32
  wire signed [31:0] sel_1_653;  // int32
  wire signed [31:0] sel_2022;  // int32
  wire signed [31:0] sel_1_654;  // int32
  wire signed [31:0] sel_2023;  // int32
  wire signed [31:0] sel_1_655;  // int32
  wire signed [31:0] sel_2024;  // int32
  wire signed [31:0] sel_1_656;  // int32
  wire signed [31:0] sel_2025;  // int32
  wire signed [31:0] sel_1_657;  // int32
  wire signed [31:0] sel_2026;  // int32
  wire signed [31:0] sel_2027;  // int32
  wire signed [31:0] sel_2028;  // int32
  reg signed [31:0] sel_1_658;  // int32
  wire [7:0] tmp_399;  // uint8
  wire [7:0] sel_1_659;  // uint8
  wire signed [31:0] sel_2029;  // int32
  wire signed [31:0] sel_2030;  // int32
  wire signed [31:0] sel_2031;  // int32
  wire signed [31:0] sel_2032;  // int32
  wire signed [31:0] sel_2033;  // int32
  wire signed [31:0] sel_2034;  // int32
  wire signed [31:0] sel_2035;  // int32
  wire signed [31:0] sel_2036;  // int32
  wire signed [31:0] sel_2037;  // int32
  wire signed [31:0] sel_2038;  // int32
  wire signed [31:0] sel_2039;  // int32
  wire signed [31:0] sel_2040;  // int32
  wire signed [31:0] sel_2041;  // int32
  wire signed [31:0] sel_2042;  // int32
  wire signed [31:0] s_318;  // int32
  wire signed [31:0] sel_1_660;  // int32
  wire signed [31:0] sel_2043;  // int32
  wire signed [31:0] sel_1_661;  // int32
  wire signed [31:0] sel_2044;  // int32
  wire signed [31:0] sel_1_662;  // int32
  wire signed [31:0] sel_2045;  // int32
  wire signed [31:0] sel_1_663;  // int32
  wire signed [31:0] sel_2046;  // int32
  wire signed [31:0] sel_1_664;  // int32
  wire signed [31:0] sel_2047;  // int32
  wire signed [31:0] sel_1_665;  // int32
  wire signed [31:0] sel_2048;  // int32
  wire signed [31:0] sel_2049;  // int32
  wire signed [31:0] sel_2050;  // int32
  reg signed [31:0] sel_1_666;  // int32
  wire [7:0] tmp_400;  // uint8
  wire [7:0] sel_1_667;  // uint8
  wire signed [31:0] sel_2051;  // int32
  wire signed [31:0] sel_2052;  // int32
  wire signed [31:0] sel_2053;  // int32
  wire signed [31:0] sel_2054;  // int32
  wire signed [31:0] sel_2055;  // int32
  wire signed [31:0] sel_2056;  // int32
  wire signed [31:0] sel_2057;  // int32
  wire signed [31:0] sel_2058;  // int32
  wire signed [31:0] sel_2059;  // int32
  wire signed [31:0] sel_2060;  // int32
  wire signed [31:0] sel_2061;  // int32
  wire signed [31:0] sel_2062;  // int32
  wire signed [31:0] sel_2063;  // int32
  wire signed [31:0] sel_2064;  // int32
  wire signed [31:0] s_319;  // int32
  wire signed [31:0] sel_1_668;  // int32
  wire signed [31:0] sel_2065;  // int32
  wire signed [31:0] sel_1_669;  // int32
  wire signed [31:0] sel_2066;  // int32
  wire signed [31:0] sel_1_670;  // int32
  wire signed [31:0] sel_2067;  // int32
  wire signed [31:0] sel_1_671;  // int32
  wire signed [31:0] sel_2068;  // int32
  wire signed [31:0] sel_1_672;  // int32
  wire signed [31:0] sel_2069;  // int32
  wire signed [31:0] sel_2070;  // int32
  wire signed [31:0] sel_2071;  // int32
  reg signed [31:0] sel_1_673;  // int32
  wire [7:0] tmp_401;  // uint8
  wire [7:0] sel_1_674;  // uint8
  reg [7:0] sel_1_675;  // uint8
  wire signed [31:0] sel_2072;  // int32
  wire signed [31:0] sel_2073;  // int32
  wire signed [31:0] sel_2074;  // int32
  wire signed [31:0] sel_2075;  // int32
  wire signed [31:0] sel_2076;  // int32
  wire signed [31:0] sel_2077;  // int32
  wire signed [31:0] sel_2078;  // int32
  wire signed [31:0] sel_2079;  // int32
  wire signed [31:0] sel_2080;  // int32
  wire signed [31:0] sel_2081;  // int32
  wire signed [31:0] sel_2082;  // int32
  wire signed [31:0] sel_2083;  // int32
  wire signed [31:0] sel_2084;  // int32
  wire signed [31:0] sel_2085;  // int32
  wire signed [31:0] s_320;  // int32
  wire signed [31:0] sel_1_676;  // int32
  wire signed [31:0] sel_2086;  // int32
  wire signed [31:0] sel_1_677;  // int32
  wire signed [31:0] sel_2087;  // int32
  wire signed [31:0] sel_1_678;  // int32
  wire signed [31:0] sel_2088;  // int32
  wire signed [31:0] sel_1_679;  // int32
  wire signed [31:0] sel_2089;  // int32
  wire signed [31:0] sel_2090;  // int32
  wire signed [31:0] sel_2091;  // int32
  reg signed [31:0] sel_1_680;  // int32
  wire [7:0] tmp_402;  // uint8
  reg  s_321;
  reg [7:0] tmp_403;  // uint8
  wire [7:0] sel_1_681;  // uint8
  wire signed [31:0] sel_2092;  // int32
  wire signed [31:0] sel_2093;  // int32
  wire signed [31:0] sel_2094;  // int32
  wire signed [31:0] sel_2095;  // int32
  wire signed [31:0] sel_2096;  // int32
  wire signed [31:0] sel_2097;  // int32
  wire signed [31:0] sel_2098;  // int32
  wire signed [31:0] sel_2099;  // int32
  wire signed [31:0] sel_2100;  // int32
  wire signed [31:0] sel_2101;  // int32
  wire signed [31:0] sel_2102;  // int32
  wire signed [31:0] sel_2103;  // int32
  wire signed [31:0] sel_2104;  // int32
  wire signed [31:0] sel_2105;  // int32
  wire signed [31:0] s_322;  // int32
  wire signed [31:0] sel_1_682;  // int32
  wire signed [31:0] sel_2106;  // int32
  wire signed [31:0] sel_1_683;  // int32
  wire signed [31:0] sel_2107;  // int32
  wire signed [31:0] sel_1_684;  // int32
  wire signed [31:0] sel_2108;  // int32
  wire signed [31:0] sel_2109;  // int32
  wire signed [31:0] sel_2110;  // int32
  reg signed [31:0] sel_1_685;  // int32
  wire [7:0] tmp_404;  // uint8
  reg  s_323;
  reg [7:0] tmp_405;  // uint8
  wire [7:0] sel_1_686;  // uint8
  wire signed [31:0] sel_2111;  // int32
  wire signed [31:0] sel_2112;  // int32
  wire signed [31:0] sel_2113;  // int32
  wire signed [31:0] sel_2114;  // int32
  wire signed [31:0] sel_2115;  // int32
  wire signed [31:0] sel_2116;  // int32
  wire signed [31:0] sel_2117;  // int32
  wire signed [31:0] sel_2118;  // int32
  wire signed [31:0] sel_2119;  // int32
  wire signed [31:0] sel_2120;  // int32
  wire signed [31:0] sel_2121;  // int32
  wire signed [31:0] sel_2122;  // int32
  wire signed [31:0] sel_2123;  // int32
  wire signed [31:0] sel_2124;  // int32
  wire signed [31:0] s_324;  // int32
  wire signed [31:0] sel_1_687;  // int32
  wire signed [31:0] sel_2125;  // int32
  wire signed [31:0] sel_1_688;  // int32
  wire signed [31:0] sel_2126;  // int32
  wire signed [31:0] sel_2127;  // int32
  wire signed [31:0] sel_2128;  // int32
  reg signed [31:0] sel_1_689;  // int32
  wire [7:0] tmp_406;  // uint8
  reg  s_325;
  reg [7:0] tmp_407;  // uint8
  wire [7:0] sel_1_690;  // uint8
  wire signed [31:0] sel_2129;  // int32
  wire signed [31:0] sel_2130;  // int32
  wire signed [31:0] sel_2131;  // int32
  wire signed [31:0] sel_2132;  // int32
  wire signed [31:0] sel_2133;  // int32
  wire signed [31:0] sel_2134;  // int32
  wire signed [31:0] sel_2135;  // int32
  wire signed [31:0] sel_2136;  // int32
  wire signed [31:0] sel_2137;  // int32
  wire signed [31:0] sel_2138;  // int32
  wire signed [31:0] sel_2139;  // int32
  wire signed [31:0] sel_2140;  // int32
  wire signed [31:0] sel_2141;  // int32
  wire signed [31:0] sel_2142;  // int32
  wire signed [31:0] s_326;  // int32
  wire signed [31:0] sel_1_691;  // int32
  wire signed [31:0] sel_2143;  // int32
  wire signed [31:0] sel_2144;  // int32
  wire signed [31:0] sel_2145;  // int32
  reg signed [31:0] sel_1_692;  // int32
  wire [7:0] tmp_408;  // uint8
  reg [4:0] is_SPI_MNGR_64;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_2146;  // int32
  wire signed [31:0] sel_2147;  // int32
  wire signed [31:0] sel_2148;  // int32
  wire signed [31:0] sel_2149;  // int32
  wire signed [31:0] sel_2150;  // int32
  wire signed [31:0] sel_2151;  // int32
  wire signed [31:0] sel_2152;  // int32
  wire signed [31:0] sel_2153;  // int32
  wire signed [31:0] sel_2154;  // int32
  wire signed [31:0] sel_2155;  // int32
  wire signed [31:0] sel_2156;  // int32
  wire signed [31:0] sel_2157;  // int32
  wire signed [31:0] sel_2158;  // int32
  reg  s_327;
  wire signed [31:0] sel_2159;  // int32
  wire signed [31:0] sel_2160;  // int32
  wire signed [31:0] sel_2161;  // int32
  wire signed [31:0] s_328;  // int32
  wire signed [31:0] sel_1_693;  // int32
  wire signed [31:0] sel_2162;  // int32
  wire signed [31:0] sel_1_694;  // int32
  wire signed [31:0] sel_2163;  // int32
  wire signed [31:0] sel_1_695;  // int32
  wire signed [31:0] sel_2164;  // int32
  wire signed [31:0] sel_1_696;  // int32
  wire signed [31:0] sel_2165;  // int32
  wire signed [31:0] sel_1_697;  // int32
  wire signed [31:0] sel_2166;  // int32
  wire signed [31:0] sel_1_698;  // int32
  wire signed [31:0] sel_2167;  // int32
  wire signed [31:0] sel_1_699;  // int32
  wire signed [31:0] sel_2168;  // int32
  wire signed [31:0] sel_1_700;  // int32
  wire signed [31:0] sel_1_701;  // int32
  wire signed [31:0] sel_1_702;  // int32
  reg signed [31:0] sel_1_703;  // int32
  wire signed [31:0] sel_2169;  // int32
  wire signed [31:0] sel_2170;  // int32
  wire signed [31:0] sel_1_704;  // int32
  wire signed [31:0] sel_2171;  // int32
  reg  tmp_409;
  reg [7:0] rd_342_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_342_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_32 [0:11];  // uint8 [12]
  wire signed [31:0] sel_2172;  // int32
  reg signed [31:0] sel_1_705;  // int32
  wire [7:0] tmp_410;  // uint8
  wire signed [31:0] sel_2173;  // int32
  wire signed [31:0] sel_2174;  // int32
  wire signed [31:0] sel_2175;  // int32
  wire signed [31:0] sel_2176;  // int32
  wire signed [31:0] sel_2177;  // int32
  wire signed [31:0] sel_2178;  // int32
  wire signed [31:0] sel_2179;  // int32
  wire signed [31:0] sel_2180;  // int32
  wire signed [31:0] sel_2181;  // int32
  wire signed [31:0] sel_2182;  // int32
  wire signed [31:0] sel_2183;  // int32
  wire signed [31:0] sel_2184;  // int32
  wire signed [31:0] sel_2185;  // int32
  wire signed [31:0] sel_2186;  // int32
  wire signed [31:0] sel_2187;  // int32
  wire signed [31:0] sel_2188;  // int32
  wire signed [31:0] sel_2189;  // int32
  wire signed [31:0] s_329;  // int32
  wire signed [31:0] sel_1_706;  // int32
  wire signed [31:0] sel_2190;  // int32
  wire signed [31:0] sel_1_707;  // int32
  wire signed [31:0] sel_2191;  // int32
  wire signed [31:0] sel_1_708;  // int32
  wire signed [31:0] sel_2192;  // int32
  wire signed [31:0] sel_1_709;  // int32
  wire signed [31:0] sel_2193;  // int32
  wire signed [31:0] sel_1_710;  // int32
  wire signed [31:0] sel_2194;  // int32
  wire signed [31:0] sel_1_711;  // int32
  wire signed [31:0] sel_2195;  // int32
  wire signed [31:0] sel_1_712;  // int32
  wire signed [31:0] sel_1_713;  // int32
  wire signed [31:0] sel_1_714;  // int32
  wire signed [31:0] sel_2196;  // int32
  wire signed [31:0] sel_1_715;  // int32
  wire signed [31:0] sel_2197;  // int32
  wire signed [31:0] sel_2198;  // int32
  reg signed [31:0] sel_1_716;  // int32
  wire [7:0] tmp_411;  // uint8
  reg  tmp_412;
  reg [7:0] tmp_413;  // uint8
  wire [7:0] sel_1_717;  // uint8
  wire signed [31:0] sel_2199;  // int32
  wire signed [31:0] sel_2200;  // int32
  wire signed [31:0] sel_2201;  // int32
  wire signed [31:0] sel_2202;  // int32
  wire signed [31:0] sel_2203;  // int32
  wire signed [31:0] sel_2204;  // int32
  wire signed [31:0] sel_2205;  // int32
  wire signed [31:0] sel_2206;  // int32
  wire signed [31:0] sel_2207;  // int32
  wire signed [31:0] sel_2208;  // int32
  wire signed [31:0] sel_2209;  // int32
  wire signed [31:0] sel_2210;  // int32
  wire signed [31:0] sel_2211;  // int32
  wire signed [31:0] sel_2212;  // int32
  wire signed [31:0] sel_2213;  // int32
  wire signed [31:0] sel_2214;  // int32
  wire signed [31:0] sel_2215;  // int32
  wire signed [31:0] s_330;  // int32
  wire signed [31:0] sel_1_718;  // int32
  wire signed [31:0] sel_2216;  // int32
  wire signed [31:0] sel_1_719;  // int32
  wire signed [31:0] sel_2217;  // int32
  wire signed [31:0] sel_1_720;  // int32
  wire signed [31:0] sel_2218;  // int32
  wire signed [31:0] sel_1_721;  // int32
  wire signed [31:0] sel_2219;  // int32
  wire signed [31:0] sel_1_722;  // int32
  wire signed [31:0] sel_2220;  // int32
  wire signed [31:0] sel_1_723;  // int32
  wire signed [31:0] sel_1_724;  // int32
  wire signed [31:0] sel_1_725;  // int32
  wire signed [31:0] sel_2221;  // int32
  wire signed [31:0] sel_1_726;  // int32
  wire signed [31:0] sel_2222;  // int32
  wire signed [31:0] sel_2223;  // int32
  reg signed [31:0] sel_1_727;  // int32
  wire [7:0] tmp_414;  // uint8
  reg  tmp_415;
  reg [7:0] tmp_416;  // uint8
  wire [7:0] sel_1_728;  // uint8
  wire signed [31:0] sel_2224;  // int32
  wire signed [31:0] sel_2225;  // int32
  wire signed [31:0] sel_2226;  // int32
  wire signed [31:0] sel_2227;  // int32
  wire signed [31:0] sel_2228;  // int32
  wire signed [31:0] sel_2229;  // int32
  wire signed [31:0] sel_2230;  // int32
  wire signed [31:0] sel_2231;  // int32
  wire signed [31:0] sel_2232;  // int32
  wire signed [31:0] sel_2233;  // int32
  wire signed [31:0] sel_2234;  // int32
  wire signed [31:0] sel_2235;  // int32
  wire signed [31:0] sel_2236;  // int32
  wire signed [31:0] sel_2237;  // int32
  wire signed [31:0] sel_2238;  // int32
  wire signed [31:0] sel_2239;  // int32
  wire signed [31:0] sel_2240;  // int32
  wire signed [31:0] s_331;  // int32
  wire signed [31:0] sel_1_729;  // int32
  wire signed [31:0] sel_2241;  // int32
  wire signed [31:0] sel_1_730;  // int32
  wire signed [31:0] sel_2242;  // int32
  wire signed [31:0] sel_1_731;  // int32
  wire signed [31:0] sel_2243;  // int32
  wire signed [31:0] sel_1_732;  // int32
  wire signed [31:0] sel_2244;  // int32
  wire signed [31:0] sel_1_733;  // int32
  wire signed [31:0] sel_1_734;  // int32
  wire signed [31:0] sel_1_735;  // int32
  wire signed [31:0] sel_2245;  // int32
  wire signed [31:0] sel_1_736;  // int32
  wire signed [31:0] sel_2246;  // int32
  wire signed [31:0] sel_2247;  // int32
  reg signed [31:0] sel_1_737;  // int32
  wire [7:0] tmp_417;  // uint8
  reg  tmp_418;
  reg [7:0] tmp_419;  // uint8
  wire [7:0] sel_1_738;  // uint8
  wire signed [31:0] sel_2248;  // int32
  wire signed [31:0] sel_2249;  // int32
  wire signed [31:0] sel_2250;  // int32
  wire signed [31:0] sel_2251;  // int32
  wire signed [31:0] sel_2252;  // int32
  wire signed [31:0] sel_2253;  // int32
  wire signed [31:0] sel_2254;  // int32
  wire signed [31:0] sel_2255;  // int32
  wire signed [31:0] sel_2256;  // int32
  wire signed [31:0] sel_2257;  // int32
  wire signed [31:0] sel_2258;  // int32
  wire signed [31:0] sel_2259;  // int32
  wire signed [31:0] sel_2260;  // int32
  wire signed [31:0] sel_2261;  // int32
  wire signed [31:0] sel_2262;  // int32
  wire signed [31:0] sel_2263;  // int32
  wire signed [31:0] sel_2264;  // int32
  wire signed [31:0] s_332;  // int32
  wire signed [31:0] sel_1_739;  // int32
  wire signed [31:0] sel_2265;  // int32
  wire signed [31:0] sel_1_740;  // int32
  wire signed [31:0] sel_2266;  // int32
  wire signed [31:0] sel_1_741;  // int32
  wire signed [31:0] sel_2267;  // int32
  wire signed [31:0] sel_1_742;  // int32
  wire signed [31:0] sel_1_743;  // int32
  wire signed [31:0] sel_1_744;  // int32
  wire signed [31:0] sel_2268;  // int32
  wire signed [31:0] sel_1_745;  // int32
  wire signed [31:0] sel_2269;  // int32
  wire signed [31:0] sel_2270;  // int32
  reg signed [31:0] sel_1_746;  // int32
  wire [7:0] tmp_420;  // uint8
  reg  tmp_421;
  reg [7:0] tmp_422;  // uint8
  wire [7:0] sel_1_747;  // uint8
  wire signed [31:0] sel_2271;  // int32
  wire signed [31:0] sel_2272;  // int32
  wire signed [31:0] sel_2273;  // int32
  wire signed [31:0] sel_2274;  // int32
  wire signed [31:0] sel_2275;  // int32
  wire signed [31:0] sel_2276;  // int32
  wire signed [31:0] sel_2277;  // int32
  wire signed [31:0] sel_2278;  // int32
  wire signed [31:0] sel_2279;  // int32
  wire signed [31:0] sel_2280;  // int32
  wire signed [31:0] sel_2281;  // int32
  wire signed [31:0] sel_2282;  // int32
  wire signed [31:0] sel_2283;  // int32
  wire signed [31:0] sel_2284;  // int32
  wire signed [31:0] sel_2285;  // int32
  wire signed [31:0] sel_2286;  // int32
  wire signed [31:0] sel_2287;  // int32
  wire signed [31:0] s_333;  // int32
  wire signed [31:0] sel_1_748;  // int32
  wire signed [31:0] sel_2288;  // int32
  wire signed [31:0] sel_1_749;  // int32
  wire signed [31:0] sel_2289;  // int32
  wire signed [31:0] sel_1_750;  // int32
  wire signed [31:0] sel_1_751;  // int32
  wire signed [31:0] sel_1_752;  // int32
  wire signed [31:0] sel_2290;  // int32
  wire signed [31:0] sel_1_753;  // int32
  wire signed [31:0] sel_2291;  // int32
  wire signed [31:0] sel_2292;  // int32
  reg signed [31:0] sel_1_754;  // int32
  wire [7:0] tmp_423;  // uint8
  reg  tmp_424;
  reg [7:0] tmp_425;  // uint8
  wire [7:0] sel_1_755;  // uint8
  wire signed [31:0] sel_2293;  // int32
  wire signed [31:0] sel_2294;  // int32
  wire signed [31:0] sel_2295;  // int32
  wire signed [31:0] sel_2296;  // int32
  wire signed [31:0] sel_2297;  // int32
  wire signed [31:0] sel_2298;  // int32
  wire signed [31:0] sel_2299;  // int32
  wire signed [31:0] sel_2300;  // int32
  wire signed [31:0] sel_2301;  // int32
  wire signed [31:0] sel_2302;  // int32
  wire signed [31:0] sel_2303;  // int32
  wire signed [31:0] sel_2304;  // int32
  wire signed [31:0] sel_2305;  // int32
  wire signed [31:0] sel_2306;  // int32
  wire signed [31:0] sel_2307;  // int32
  wire signed [31:0] sel_2308;  // int32
  wire signed [31:0] sel_2309;  // int32
  wire signed [31:0] s_334;  // int32
  wire signed [31:0] sel_1_756;  // int32
  wire signed [31:0] sel_2310;  // int32
  wire signed [31:0] sel_1_757;  // int32
  wire signed [31:0] sel_1_758;  // int32
  wire signed [31:0] sel_1_759;  // int32
  wire signed [31:0] sel_2311;  // int32
  wire signed [31:0] sel_1_760;  // int32
  wire signed [31:0] sel_2312;  // int32
  wire signed [31:0] sel_2313;  // int32
  reg signed [31:0] sel_1_761;  // int32
  wire [7:0] tmp_426;  // uint8
  reg  tmp_427;
  reg [7:0] tmp_428;  // uint8
  wire [7:0] sel_1_762;  // uint8
  wire signed [31:0] sel_2314;  // int32
  wire signed [31:0] sel_2315;  // int32
  wire signed [31:0] sel_2316;  // int32
  wire signed [31:0] sel_2317;  // int32
  wire signed [31:0] sel_2318;  // int32
  wire signed [31:0] sel_2319;  // int32
  wire signed [31:0] sel_2320;  // int32
  wire signed [31:0] sel_2321;  // int32
  wire signed [31:0] sel_2322;  // int32
  wire signed [31:0] sel_2323;  // int32
  wire signed [31:0] sel_2324;  // int32
  wire signed [31:0] sel_2325;  // int32
  wire signed [31:0] sel_2326;  // int32
  wire signed [31:0] sel_2327;  // int32
  wire signed [31:0] sel_2328;  // int32
  wire signed [31:0] sel_2329;  // int32
  wire signed [31:0] sel_2330;  // int32
  wire signed [31:0] s_335;  // int32
  wire signed [31:0] sel_1_763;  // int32
  wire signed [31:0] sel_1_764;  // int32
  wire signed [31:0] sel_1_765;  // int32
  wire signed [31:0] sel_2331;  // int32
  wire signed [31:0] sel_1_766;  // int32
  wire signed [31:0] sel_2332;  // int32
  wire signed [31:0] sel_2333;  // int32
  reg signed [31:0] sel_1_767;  // int32
  wire [7:0] tmp_429;  // uint8
  wire [7:0] sel_2334;  // uint8
  reg [7:0] tmp_430;  // uint8
  wire [7:0] sel_1_768;  // uint8
  reg [7:0] tmp_431;  // uint8
  wire [7:0] sel_1_769;  // uint8
  wire [7:0] sel_2335;  // uint8
  reg [4:0] is_SPI_MNGR_65;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_2336;
  wire sel_2337;
  wire sel_2338;
  wire sel_2339;
  wire sel_2340;
  wire sel_2341;
  wire sel_2342;
  wire sel_2343;
  wire sel_2344;
  wire sel_2345;
  wire sel_2346;
  wire sel_2347;
  wire sel_2348;
  wire sel_2349;
  wire s_336;
  wire sel_2_110;
  wire s_337;
  wire sel_2_111;
  wire s_338;
  wire sel_2_112;
  wire s_339;
  wire sel_2_113;
  wire s_340;
  wire sel_2_114;
  wire s_341;
  wire sel_2_115;
  wire s_342;
  wire sel_2_116;
  wire s_343;
  wire sel_2_117;
  reg  s_344;
  wire sel_2350;
  wire sel_2351;
  wire sel_2352;
  wire s_345;
  wire sel_2_118;
  wire s_346;
  wire sel_2_119;
  wire s_347;
  wire sel_2_120;
  wire s_348;
  wire sel_2_121;
  wire s_349;
  wire sel_2_122;
  wire s_350;
  wire sel_2_123;
  wire s_351;
  wire sel_2_124;
  wire s_352;
  wire sel_2_125;
  wire sel_2_126;
  wire sel_2_127;
  reg  sel_2_128;
  reg  sel_2_129;
  wire sel_2353;
  wire sel_2_130;
  wire sel_2354;
  reg [4:0] is_SPI_MNGR_66;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_2355;  // uint8
  wire [7:0] sel_2356;  // uint8
  wire [7:0] sel_2357;  // uint8
  wire [7:0] sel_2358;  // uint8
  wire [7:0] sel_2359;  // uint8
  wire [7:0] sel_2360;  // uint8
  wire [7:0] sel_2361;  // uint8
  wire [7:0] sel_2362;  // uint8
  wire [7:0] sel_2363;  // uint8
  wire [7:0] sel_2364;  // uint8
  wire [7:0] sel_2365;  // uint8
  wire [7:0] sel_2366;  // uint8
  reg  s_353;
  wire signed [31:0] sel_2367;  // int32
  wire signed [31:0] sel_2368;  // int32
  wire signed [31:0] sel_2369;  // int32
  wire signed [31:0] sel_2370;  // int32
  wire signed [31:0] sel_2371;  // int32
  wire signed [31:0] sel_2372;  // int32
  wire signed [31:0] sel_2373;  // int32
  wire signed [31:0] sel_2374;  // int32
  wire signed [31:0] sel_2375;  // int32
  wire signed [31:0] sel_2376;  // int32
  wire signed [31:0] sel_2377;  // int32
  wire signed [31:0] sel_2378;  // int32
  wire signed [31:0] sel_2379;  // int32
  wire signed [31:0] sel_2380;  // int32
  wire signed [31:0] s_354;  // int32
  wire signed [31:0] sel_1_770;  // int32
  wire signed [31:0] sel_2381;  // int32
  wire signed [31:0] sel_1_771;  // int32
  wire signed [31:0] sel_2382;  // int32
  wire signed [31:0] sel_1_772;  // int32
  wire signed [31:0] sel_2383;  // int32
  wire signed [31:0] sel_1_773;  // int32
  wire signed [31:0] sel_2384;  // int32
  wire signed [31:0] sel_1_774;  // int32
  wire signed [31:0] sel_2385;  // int32
  wire signed [31:0] sel_1_775;  // int32
  wire signed [31:0] sel_2386;  // int32
  wire signed [31:0] sel_1_776;  // int32
  wire signed [31:0] sel_2387;  // int32
  wire signed [31:0] sel_1_777;  // int32
  wire signed [31:0] sel_2388;  // int32
  wire signed [31:0] sel_2389;  // int32
  wire signed [31:0] sel_2390;  // int32
  reg signed [31:0] sel_1_778;  // int32
  wire [7:0] tmp_432;  // uint8
  wire signed [31:0] sel_2391;  // int32
  wire signed [31:0] sel_2392;  // int32
  wire signed [31:0] sel_2393;  // int32
  wire signed [31:0] sel_2394;  // int32
  wire signed [31:0] sel_2395;  // int32
  wire signed [31:0] sel_2396;  // int32
  wire signed [31:0] sel_2397;  // int32
  wire signed [31:0] sel_2398;  // int32
  wire signed [31:0] sel_2399;  // int32
  wire signed [31:0] sel_2400;  // int32
  wire signed [31:0] sel_2401;  // int32
  wire signed [31:0] sel_2402;  // int32
  wire signed [31:0] sel_2403;  // int32
  wire signed [31:0] sel_2404;  // int32
  wire signed [31:0] s_355;  // int32
  wire signed [31:0] sel_1_779;  // int32
  wire signed [31:0] sel_2405;  // int32
  wire signed [31:0] sel_1_780;  // int32
  wire signed [31:0] sel_2406;  // int32
  wire signed [31:0] sel_1_781;  // int32
  wire signed [31:0] sel_2407;  // int32
  wire signed [31:0] sel_1_782;  // int32
  wire signed [31:0] sel_2408;  // int32
  wire signed [31:0] sel_1_783;  // int32
  wire signed [31:0] sel_2409;  // int32
  wire signed [31:0] sel_1_784;  // int32
  wire signed [31:0] sel_2410;  // int32
  wire signed [31:0] sel_1_785;  // int32
  wire signed [31:0] sel_2411;  // int32
  wire signed [31:0] sel_2412;  // int32
  wire signed [31:0] sel_2413;  // int32
  reg signed [31:0] sel_1_786;  // int32
  wire [7:0] tmp_433;  // uint8
  wire [7:0] sel_1_787;  // uint8
  wire signed [31:0] sel_2414;  // int32
  wire signed [31:0] sel_2415;  // int32
  wire signed [31:0] sel_2416;  // int32
  wire signed [31:0] sel_2417;  // int32
  wire signed [31:0] sel_2418;  // int32
  wire signed [31:0] sel_2419;  // int32
  wire signed [31:0] sel_2420;  // int32
  wire signed [31:0] sel_2421;  // int32
  wire signed [31:0] sel_2422;  // int32
  wire signed [31:0] sel_2423;  // int32
  wire signed [31:0] sel_2424;  // int32
  wire signed [31:0] sel_2425;  // int32
  wire signed [31:0] sel_2426;  // int32
  wire signed [31:0] sel_2427;  // int32
  wire signed [31:0] s_356;  // int32
  wire signed [31:0] sel_1_788;  // int32
  wire signed [31:0] sel_2428;  // int32
  wire signed [31:0] sel_1_789;  // int32
  wire signed [31:0] sel_2429;  // int32
  wire signed [31:0] sel_1_790;  // int32
  wire signed [31:0] sel_2430;  // int32
  wire signed [31:0] sel_1_791;  // int32
  wire signed [31:0] sel_2431;  // int32
  wire signed [31:0] sel_1_792;  // int32
  wire signed [31:0] sel_2432;  // int32
  wire signed [31:0] sel_1_793;  // int32
  wire signed [31:0] sel_2433;  // int32
  wire signed [31:0] sel_2434;  // int32
  wire signed [31:0] sel_2435;  // int32
  reg signed [31:0] sel_1_794;  // int32
  wire [7:0] tmp_434;  // uint8
  wire [7:0] sel_1_795;  // uint8
  wire signed [31:0] sel_2436;  // int32
  wire signed [31:0] sel_2437;  // int32
  wire signed [31:0] sel_2438;  // int32
  wire signed [31:0] sel_2439;  // int32
  wire signed [31:0] sel_2440;  // int32
  wire signed [31:0] sel_2441;  // int32
  wire signed [31:0] sel_2442;  // int32
  wire signed [31:0] sel_2443;  // int32
  wire signed [31:0] sel_2444;  // int32
  wire signed [31:0] sel_2445;  // int32
  wire signed [31:0] sel_2446;  // int32
  wire signed [31:0] sel_2447;  // int32
  wire signed [31:0] sel_2448;  // int32
  wire signed [31:0] sel_2449;  // int32
  wire signed [31:0] s_357;  // int32
  wire signed [31:0] sel_1_796;  // int32
  wire signed [31:0] sel_2450;  // int32
  wire signed [31:0] sel_1_797;  // int32
  wire signed [31:0] sel_2451;  // int32
  wire signed [31:0] sel_1_798;  // int32
  wire signed [31:0] sel_2452;  // int32
  wire signed [31:0] sel_1_799;  // int32
  wire signed [31:0] sel_2453;  // int32
  wire signed [31:0] sel_1_800;  // int32
  wire signed [31:0] sel_2454;  // int32
  wire signed [31:0] sel_2455;  // int32
  wire signed [31:0] sel_2456;  // int32
  reg signed [31:0] sel_1_801;  // int32
  wire [7:0] tmp_435;  // uint8
  wire [7:0] sel_1_802;  // uint8
  reg [7:0] sel_1_803;  // uint8
  wire signed [31:0] sel_2457;  // int32
  wire signed [31:0] sel_2458;  // int32
  wire signed [31:0] sel_2459;  // int32
  wire signed [31:0] sel_2460;  // int32
  wire signed [31:0] sel_2461;  // int32
  wire signed [31:0] sel_2462;  // int32
  wire signed [31:0] sel_2463;  // int32
  wire signed [31:0] sel_2464;  // int32
  wire signed [31:0] sel_2465;  // int32
  wire signed [31:0] sel_2466;  // int32
  wire signed [31:0] sel_2467;  // int32
  wire signed [31:0] sel_2468;  // int32
  wire signed [31:0] sel_2469;  // int32
  wire signed [31:0] sel_2470;  // int32
  wire signed [31:0] s_358;  // int32
  wire signed [31:0] sel_1_804;  // int32
  wire signed [31:0] sel_2471;  // int32
  wire signed [31:0] sel_1_805;  // int32
  wire signed [31:0] sel_2472;  // int32
  wire signed [31:0] sel_1_806;  // int32
  wire signed [31:0] sel_2473;  // int32
  wire signed [31:0] sel_1_807;  // int32
  wire signed [31:0] sel_2474;  // int32
  wire signed [31:0] sel_2475;  // int32
  wire signed [31:0] sel_2476;  // int32
  reg signed [31:0] sel_1_808;  // int32
  wire [7:0] tmp_436;  // uint8
  reg  s_359;
  reg [7:0] tmp_437;  // uint8
  wire [7:0] sel_1_809;  // uint8
  wire signed [31:0] sel_2477;  // int32
  wire signed [31:0] sel_2478;  // int32
  wire signed [31:0] sel_2479;  // int32
  wire signed [31:0] sel_2480;  // int32
  wire signed [31:0] sel_2481;  // int32
  wire signed [31:0] sel_2482;  // int32
  wire signed [31:0] sel_2483;  // int32
  wire signed [31:0] sel_2484;  // int32
  wire signed [31:0] sel_2485;  // int32
  wire signed [31:0] sel_2486;  // int32
  wire signed [31:0] sel_2487;  // int32
  wire signed [31:0] sel_2488;  // int32
  wire signed [31:0] sel_2489;  // int32
  wire signed [31:0] sel_2490;  // int32
  wire signed [31:0] s_360;  // int32
  wire signed [31:0] sel_1_810;  // int32
  wire signed [31:0] sel_2491;  // int32
  wire signed [31:0] sel_1_811;  // int32
  wire signed [31:0] sel_2492;  // int32
  wire signed [31:0] sel_1_812;  // int32
  wire signed [31:0] sel_2493;  // int32
  wire signed [31:0] sel_2494;  // int32
  wire signed [31:0] sel_2495;  // int32
  reg signed [31:0] sel_1_813;  // int32
  wire [7:0] tmp_438;  // uint8
  reg  s_361;
  reg [7:0] tmp_439;  // uint8
  wire [7:0] sel_1_814;  // uint8
  wire signed [31:0] sel_2496;  // int32
  wire signed [31:0] sel_2497;  // int32
  wire signed [31:0] sel_2498;  // int32
  wire signed [31:0] sel_2499;  // int32
  wire signed [31:0] sel_2500;  // int32
  wire signed [31:0] sel_2501;  // int32
  wire signed [31:0] sel_2502;  // int32
  wire signed [31:0] sel_2503;  // int32
  wire signed [31:0] sel_2504;  // int32
  wire signed [31:0] sel_2505;  // int32
  wire signed [31:0] sel_2506;  // int32
  wire signed [31:0] sel_2507;  // int32
  wire signed [31:0] sel_2508;  // int32
  wire signed [31:0] sel_2509;  // int32
  wire signed [31:0] s_362;  // int32
  wire signed [31:0] sel_1_815;  // int32
  wire signed [31:0] sel_2510;  // int32
  wire signed [31:0] sel_1_816;  // int32
  wire signed [31:0] sel_2511;  // int32
  wire signed [31:0] sel_2512;  // int32
  wire signed [31:0] sel_2513;  // int32
  reg signed [31:0] sel_1_817;  // int32
  wire [7:0] tmp_440;  // uint8
  reg  s_363;
  reg [7:0] tmp_441;  // uint8
  wire [7:0] sel_1_818;  // uint8
  wire signed [31:0] sel_2514;  // int32
  wire signed [31:0] sel_2515;  // int32
  wire signed [31:0] sel_2516;  // int32
  wire signed [31:0] sel_2517;  // int32
  wire signed [31:0] sel_2518;  // int32
  wire signed [31:0] sel_2519;  // int32
  wire signed [31:0] sel_2520;  // int32
  wire signed [31:0] sel_2521;  // int32
  wire signed [31:0] sel_2522;  // int32
  wire signed [31:0] sel_2523;  // int32
  wire signed [31:0] sel_2524;  // int32
  wire signed [31:0] sel_2525;  // int32
  wire signed [31:0] sel_2526;  // int32
  wire signed [31:0] sel_2527;  // int32
  wire signed [31:0] s_364;  // int32
  wire signed [31:0] sel_1_819;  // int32
  wire signed [31:0] sel_2528;  // int32
  wire signed [31:0] sel_2529;  // int32
  wire signed [31:0] sel_2530;  // int32
  reg signed [31:0] sel_1_820;  // int32
  wire [7:0] tmp_442;  // uint8
  reg [4:0] is_SPI_MNGR_67;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_2531;  // int32
  wire signed [31:0] sel_2532;  // int32
  wire signed [31:0] sel_2533;  // int32
  wire signed [31:0] sel_2534;  // int32
  wire signed [31:0] sel_2535;  // int32
  wire signed [31:0] sel_2536;  // int32
  wire signed [31:0] sel_2537;  // int32
  wire signed [31:0] sel_2538;  // int32
  wire signed [31:0] sel_2539;  // int32
  wire signed [31:0] sel_2540;  // int32
  wire signed [31:0] sel_2541;  // int32
  wire signed [31:0] sel_2542;  // int32
  wire signed [31:0] sel_2543;  // int32
  reg  s_365;
  wire signed [31:0] sel_2544;  // int32
  wire signed [31:0] sel_2545;  // int32
  wire signed [31:0] sel_2546;  // int32
  wire signed [31:0] s_366;  // int32
  wire signed [31:0] sel_1_821;  // int32
  wire signed [31:0] sel_2547;  // int32
  wire signed [31:0] sel_1_822;  // int32
  wire signed [31:0] sel_2548;  // int32
  wire signed [31:0] sel_1_823;  // int32
  wire signed [31:0] sel_2549;  // int32
  wire signed [31:0] sel_1_824;  // int32
  wire signed [31:0] sel_2550;  // int32
  wire signed [31:0] sel_1_825;  // int32
  wire signed [31:0] sel_2551;  // int32
  wire signed [31:0] sel_1_826;  // int32
  wire signed [31:0] sel_2552;  // int32
  wire signed [31:0] sel_1_827;  // int32
  wire signed [31:0] sel_2553;  // int32
  wire signed [31:0] sel_1_828;  // int32
  wire signed [31:0] sel_1_829;  // int32
  wire signed [31:0] sel_1_830;  // int32
  reg signed [31:0] sel_1_831;  // int32
  wire signed [31:0] sel_2554;  // int32
  wire signed [31:0] sel_2555;  // int32
  wire signed [31:0] sel_1_832;  // int32
  wire signed [31:0] sel_2556;  // int32
  reg  tmp_443;
  reg [7:0] rd_374_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_374_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_33 [0:11];  // uint8 [12]
  wire signed [31:0] sel_2557;  // int32
  reg signed [31:0] sel_1_833;  // int32
  wire [7:0] tmp_444;  // uint8
  wire signed [31:0] sel_2558;  // int32
  wire signed [31:0] sel_2559;  // int32
  wire signed [31:0] sel_2560;  // int32
  wire signed [31:0] sel_2561;  // int32
  wire signed [31:0] sel_2562;  // int32
  wire signed [31:0] sel_2563;  // int32
  wire signed [31:0] sel_2564;  // int32
  wire signed [31:0] sel_2565;  // int32
  wire signed [31:0] sel_2566;  // int32
  wire signed [31:0] sel_2567;  // int32
  wire signed [31:0] sel_2568;  // int32
  wire signed [31:0] sel_2569;  // int32
  wire signed [31:0] sel_2570;  // int32
  wire signed [31:0] sel_2571;  // int32
  wire signed [31:0] sel_2572;  // int32
  wire signed [31:0] sel_2573;  // int32
  wire signed [31:0] sel_2574;  // int32
  wire signed [31:0] s_367;  // int32
  wire signed [31:0] sel_1_834;  // int32
  wire signed [31:0] sel_2575;  // int32
  wire signed [31:0] sel_1_835;  // int32
  wire signed [31:0] sel_2576;  // int32
  wire signed [31:0] sel_1_836;  // int32
  wire signed [31:0] sel_2577;  // int32
  wire signed [31:0] sel_1_837;  // int32
  wire signed [31:0] sel_2578;  // int32
  wire signed [31:0] sel_1_838;  // int32
  wire signed [31:0] sel_2579;  // int32
  wire signed [31:0] sel_1_839;  // int32
  wire signed [31:0] sel_2580;  // int32
  wire signed [31:0] sel_1_840;  // int32
  wire signed [31:0] sel_1_841;  // int32
  wire signed [31:0] sel_1_842;  // int32
  wire signed [31:0] sel_2581;  // int32
  wire signed [31:0] sel_1_843;  // int32
  wire signed [31:0] sel_2582;  // int32
  wire signed [31:0] sel_2583;  // int32
  reg signed [31:0] sel_1_844;  // int32
  wire [7:0] tmp_445;  // uint8
  reg  tmp_446;
  reg [7:0] tmp_447;  // uint8
  wire [7:0] sel_1_845;  // uint8
  wire signed [31:0] sel_2584;  // int32
  wire signed [31:0] sel_2585;  // int32
  wire signed [31:0] sel_2586;  // int32
  wire signed [31:0] sel_2587;  // int32
  wire signed [31:0] sel_2588;  // int32
  wire signed [31:0] sel_2589;  // int32
  wire signed [31:0] sel_2590;  // int32
  wire signed [31:0] sel_2591;  // int32
  wire signed [31:0] sel_2592;  // int32
  wire signed [31:0] sel_2593;  // int32
  wire signed [31:0] sel_2594;  // int32
  wire signed [31:0] sel_2595;  // int32
  wire signed [31:0] sel_2596;  // int32
  wire signed [31:0] sel_2597;  // int32
  wire signed [31:0] sel_2598;  // int32
  wire signed [31:0] sel_2599;  // int32
  wire signed [31:0] sel_2600;  // int32
  wire signed [31:0] s_368;  // int32
  wire signed [31:0] sel_1_846;  // int32
  wire signed [31:0] sel_2601;  // int32
  wire signed [31:0] sel_1_847;  // int32
  wire signed [31:0] sel_2602;  // int32
  wire signed [31:0] sel_1_848;  // int32
  wire signed [31:0] sel_2603;  // int32
  wire signed [31:0] sel_1_849;  // int32
  wire signed [31:0] sel_2604;  // int32
  wire signed [31:0] sel_1_850;  // int32
  wire signed [31:0] sel_2605;  // int32
  wire signed [31:0] sel_1_851;  // int32
  wire signed [31:0] sel_1_852;  // int32
  wire signed [31:0] sel_1_853;  // int32
  wire signed [31:0] sel_2606;  // int32
  wire signed [31:0] sel_1_854;  // int32
  wire signed [31:0] sel_2607;  // int32
  wire signed [31:0] sel_2608;  // int32
  reg signed [31:0] sel_1_855;  // int32
  wire [7:0] tmp_448;  // uint8
  reg  tmp_449;
  reg [7:0] tmp_450;  // uint8
  wire [7:0] sel_1_856;  // uint8
  wire signed [31:0] sel_2609;  // int32
  wire signed [31:0] sel_2610;  // int32
  wire signed [31:0] sel_2611;  // int32
  wire signed [31:0] sel_2612;  // int32
  wire signed [31:0] sel_2613;  // int32
  wire signed [31:0] sel_2614;  // int32
  wire signed [31:0] sel_2615;  // int32
  wire signed [31:0] sel_2616;  // int32
  wire signed [31:0] sel_2617;  // int32
  wire signed [31:0] sel_2618;  // int32
  wire signed [31:0] sel_2619;  // int32
  wire signed [31:0] sel_2620;  // int32
  wire signed [31:0] sel_2621;  // int32
  wire signed [31:0] sel_2622;  // int32
  wire signed [31:0] sel_2623;  // int32
  wire signed [31:0] sel_2624;  // int32
  wire signed [31:0] sel_2625;  // int32
  wire signed [31:0] s_369;  // int32
  wire signed [31:0] sel_1_857;  // int32
  wire signed [31:0] sel_2626;  // int32
  wire signed [31:0] sel_1_858;  // int32
  wire signed [31:0] sel_2627;  // int32
  wire signed [31:0] sel_1_859;  // int32
  wire signed [31:0] sel_2628;  // int32
  wire signed [31:0] sel_1_860;  // int32
  wire signed [31:0] sel_2629;  // int32
  wire signed [31:0] sel_1_861;  // int32
  wire signed [31:0] sel_1_862;  // int32
  wire signed [31:0] sel_1_863;  // int32
  wire signed [31:0] sel_2630;  // int32
  wire signed [31:0] sel_1_864;  // int32
  wire signed [31:0] sel_2631;  // int32
  wire signed [31:0] sel_2632;  // int32
  reg signed [31:0] sel_1_865;  // int32
  wire [7:0] tmp_451;  // uint8
  reg  tmp_452;
  reg [7:0] tmp_453;  // uint8
  wire [7:0] sel_1_866;  // uint8
  wire signed [31:0] sel_2633;  // int32
  wire signed [31:0] sel_2634;  // int32
  wire signed [31:0] sel_2635;  // int32
  wire signed [31:0] sel_2636;  // int32
  wire signed [31:0] sel_2637;  // int32
  wire signed [31:0] sel_2638;  // int32
  wire signed [31:0] sel_2639;  // int32
  wire signed [31:0] sel_2640;  // int32
  wire signed [31:0] sel_2641;  // int32
  wire signed [31:0] sel_2642;  // int32
  wire signed [31:0] sel_2643;  // int32
  wire signed [31:0] sel_2644;  // int32
  wire signed [31:0] sel_2645;  // int32
  wire signed [31:0] sel_2646;  // int32
  wire signed [31:0] sel_2647;  // int32
  wire signed [31:0] sel_2648;  // int32
  wire signed [31:0] sel_2649;  // int32
  wire signed [31:0] s_370;  // int32
  wire signed [31:0] sel_1_867;  // int32
  wire signed [31:0] sel_2650;  // int32
  wire signed [31:0] sel_1_868;  // int32
  wire signed [31:0] sel_2651;  // int32
  wire signed [31:0] sel_1_869;  // int32
  wire signed [31:0] sel_2652;  // int32
  wire signed [31:0] sel_1_870;  // int32
  wire signed [31:0] sel_1_871;  // int32
  wire signed [31:0] sel_1_872;  // int32
  wire signed [31:0] sel_2653;  // int32
  wire signed [31:0] sel_1_873;  // int32
  wire signed [31:0] sel_2654;  // int32
  wire signed [31:0] sel_2655;  // int32
  reg signed [31:0] sel_1_874;  // int32
  wire [7:0] tmp_454;  // uint8
  reg  tmp_455;
  reg [7:0] tmp_456;  // uint8
  wire [7:0] sel_1_875;  // uint8
  wire signed [31:0] sel_2656;  // int32
  wire signed [31:0] sel_2657;  // int32
  wire signed [31:0] sel_2658;  // int32
  wire signed [31:0] sel_2659;  // int32
  wire signed [31:0] sel_2660;  // int32
  wire signed [31:0] sel_2661;  // int32
  wire signed [31:0] sel_2662;  // int32
  wire signed [31:0] sel_2663;  // int32
  wire signed [31:0] sel_2664;  // int32
  wire signed [31:0] sel_2665;  // int32
  wire signed [31:0] sel_2666;  // int32
  wire signed [31:0] sel_2667;  // int32
  wire signed [31:0] sel_2668;  // int32
  wire signed [31:0] sel_2669;  // int32
  wire signed [31:0] sel_2670;  // int32
  wire signed [31:0] sel_2671;  // int32
  wire signed [31:0] sel_2672;  // int32
  wire signed [31:0] s_371;  // int32
  wire signed [31:0] sel_1_876;  // int32
  wire signed [31:0] sel_2673;  // int32
  wire signed [31:0] sel_1_877;  // int32
  wire signed [31:0] sel_2674;  // int32
  wire signed [31:0] sel_1_878;  // int32
  wire signed [31:0] sel_1_879;  // int32
  wire signed [31:0] sel_1_880;  // int32
  wire signed [31:0] sel_2675;  // int32
  wire signed [31:0] sel_1_881;  // int32
  wire signed [31:0] sel_2676;  // int32
  wire signed [31:0] sel_2677;  // int32
  reg signed [31:0] sel_1_882;  // int32
  wire [7:0] tmp_457;  // uint8
  reg  tmp_458;
  reg [7:0] tmp_459;  // uint8
  wire [7:0] sel_1_883;  // uint8
  wire signed [31:0] sel_2678;  // int32
  wire signed [31:0] sel_2679;  // int32
  wire signed [31:0] sel_2680;  // int32
  wire signed [31:0] sel_2681;  // int32
  wire signed [31:0] sel_2682;  // int32
  wire signed [31:0] sel_2683;  // int32
  wire signed [31:0] sel_2684;  // int32
  wire signed [31:0] sel_2685;  // int32
  wire signed [31:0] sel_2686;  // int32
  wire signed [31:0] sel_2687;  // int32
  wire signed [31:0] sel_2688;  // int32
  wire signed [31:0] sel_2689;  // int32
  wire signed [31:0] sel_2690;  // int32
  wire signed [31:0] sel_2691;  // int32
  wire signed [31:0] sel_2692;  // int32
  wire signed [31:0] sel_2693;  // int32
  wire signed [31:0] sel_2694;  // int32
  wire signed [31:0] s_372;  // int32
  wire signed [31:0] sel_1_884;  // int32
  wire signed [31:0] sel_2695;  // int32
  wire signed [31:0] sel_1_885;  // int32
  wire signed [31:0] sel_1_886;  // int32
  wire signed [31:0] sel_1_887;  // int32
  wire signed [31:0] sel_2696;  // int32
  wire signed [31:0] sel_1_888;  // int32
  wire signed [31:0] sel_2697;  // int32
  wire signed [31:0] sel_2698;  // int32
  reg signed [31:0] sel_1_889;  // int32
  wire [7:0] tmp_460;  // uint8
  reg  tmp_461;
  reg [7:0] tmp_462;  // uint8
  wire [7:0] sel_1_890;  // uint8
  wire signed [31:0] sel_2699;  // int32
  wire signed [31:0] sel_2700;  // int32
  wire signed [31:0] sel_2701;  // int32
  wire signed [31:0] sel_2702;  // int32
  wire signed [31:0] sel_2703;  // int32
  wire signed [31:0] sel_2704;  // int32
  wire signed [31:0] sel_2705;  // int32
  wire signed [31:0] sel_2706;  // int32
  wire signed [31:0] sel_2707;  // int32
  wire signed [31:0] sel_2708;  // int32
  wire signed [31:0] sel_2709;  // int32
  wire signed [31:0] sel_2710;  // int32
  wire signed [31:0] sel_2711;  // int32
  wire signed [31:0] sel_2712;  // int32
  wire signed [31:0] sel_2713;  // int32
  wire signed [31:0] sel_2714;  // int32
  wire signed [31:0] sel_2715;  // int32
  wire signed [31:0] s_373;  // int32
  wire signed [31:0] sel_1_891;  // int32
  wire signed [31:0] sel_1_892;  // int32
  wire signed [31:0] sel_1_893;  // int32
  wire signed [31:0] sel_2716;  // int32
  wire signed [31:0] sel_1_894;  // int32
  wire signed [31:0] sel_2717;  // int32
  wire signed [31:0] sel_2718;  // int32
  reg signed [31:0] sel_1_895;  // int32
  wire [7:0] tmp_463;  // uint8
  wire [7:0] sel_2719;  // uint8
  reg [7:0] tmp_464;  // uint8
  wire [7:0] sel_1_896;  // uint8
  reg [7:0] tmp_465;  // uint8
  wire [7:0] sel_1_897;  // uint8
  wire [7:0] sel_2720;  // uint8
  reg [4:0] is_SPI_MNGR_68;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_2721;
  wire sel_2722;
  wire sel_2723;
  wire sel_2724;
  wire sel_2725;
  wire sel_2726;
  wire sel_2727;
  wire sel_2728;
  wire sel_2729;
  wire sel_2730;
  wire sel_2731;
  wire sel_2732;
  wire sel_2733;
  wire sel_2734;
  wire s_374;
  wire sel_2_131;
  wire s_375;
  wire sel_2_132;
  wire s_376;
  wire sel_2_133;
  wire s_377;
  wire sel_2_134;
  wire s_378;
  wire sel_2_135;
  wire s_379;
  wire sel_2_136;
  wire s_380;
  wire sel_2_137;
  wire s_381;
  wire sel_2_138;
  reg  s_382;
  wire sel_2735;
  wire sel_2736;
  wire sel_2737;
  wire s_383;
  wire sel_2_139;
  wire s_384;
  wire sel_2_140;
  wire s_385;
  wire sel_2_141;
  wire s_386;
  wire sel_2_142;
  wire s_387;
  wire sel_2_143;
  wire s_388;
  wire sel_2_144;
  wire s_389;
  wire sel_2_145;
  wire s_390;
  wire sel_2_146;
  wire sel_2_147;
  wire sel_2_148;
  reg  sel_2_149;
  reg  sel_2_150;
  wire sel_2738;
  wire sel_2_151;
  wire sel_2739;
  reg [4:0] is_SPI_MNGR_69;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_2740;  // uint8
  wire [7:0] sel_2741;  // uint8
  wire [7:0] sel_2742;  // uint8
  wire [7:0] sel_2743;  // uint8
  wire [7:0] sel_2744;  // uint8
  wire [7:0] sel_2745;  // uint8
  wire [7:0] sel_2746;  // uint8
  wire [7:0] sel_2747;  // uint8
  wire [7:0] sel_2748;  // uint8
  wire [7:0] sel_2749;  // uint8
  wire [7:0] sel_2750;  // uint8
  wire [7:0] sel_2751;  // uint8
  reg  s_391;
  wire signed [31:0] sel_2752;  // int32
  wire signed [31:0] sel_2753;  // int32
  wire signed [31:0] sel_2754;  // int32
  wire signed [31:0] sel_2755;  // int32
  wire signed [31:0] sel_2756;  // int32
  wire signed [31:0] sel_2757;  // int32
  wire signed [31:0] sel_2758;  // int32
  wire signed [31:0] sel_2759;  // int32
  wire signed [31:0] sel_2760;  // int32
  wire signed [31:0] sel_2761;  // int32
  wire signed [31:0] sel_2762;  // int32
  wire signed [31:0] sel_2763;  // int32
  wire signed [31:0] sel_2764;  // int32
  wire signed [31:0] sel_2765;  // int32
  wire signed [31:0] s_392;  // int32
  wire signed [31:0] sel_1_898;  // int32
  wire signed [31:0] sel_2766;  // int32
  wire signed [31:0] sel_1_899;  // int32
  wire signed [31:0] sel_2767;  // int32
  wire signed [31:0] sel_1_900;  // int32
  wire signed [31:0] sel_2768;  // int32
  wire signed [31:0] sel_1_901;  // int32
  wire signed [31:0] sel_2769;  // int32
  wire signed [31:0] sel_1_902;  // int32
  wire signed [31:0] sel_2770;  // int32
  wire signed [31:0] sel_1_903;  // int32
  wire signed [31:0] sel_2771;  // int32
  wire signed [31:0] sel_1_904;  // int32
  wire signed [31:0] sel_2772;  // int32
  wire signed [31:0] sel_1_905;  // int32
  wire signed [31:0] sel_2773;  // int32
  wire signed [31:0] sel_2774;  // int32
  wire signed [31:0] sel_2775;  // int32
  reg signed [31:0] sel_1_906;  // int32
  wire [7:0] tmp_466;  // uint8
  wire signed [31:0] sel_2776;  // int32
  wire signed [31:0] sel_2777;  // int32
  wire signed [31:0] sel_2778;  // int32
  wire signed [31:0] sel_2779;  // int32
  wire signed [31:0] sel_2780;  // int32
  wire signed [31:0] sel_2781;  // int32
  wire signed [31:0] sel_2782;  // int32
  wire signed [31:0] sel_2783;  // int32
  wire signed [31:0] sel_2784;  // int32
  wire signed [31:0] sel_2785;  // int32
  wire signed [31:0] sel_2786;  // int32
  wire signed [31:0] sel_2787;  // int32
  wire signed [31:0] sel_2788;  // int32
  wire signed [31:0] sel_2789;  // int32
  wire signed [31:0] s_393;  // int32
  wire signed [31:0] sel_1_907;  // int32
  wire signed [31:0] sel_2790;  // int32
  wire signed [31:0] sel_1_908;  // int32
  wire signed [31:0] sel_2791;  // int32
  wire signed [31:0] sel_1_909;  // int32
  wire signed [31:0] sel_2792;  // int32
  wire signed [31:0] sel_1_910;  // int32
  wire signed [31:0] sel_2793;  // int32
  wire signed [31:0] sel_1_911;  // int32
  wire signed [31:0] sel_2794;  // int32
  wire signed [31:0] sel_1_912;  // int32
  wire signed [31:0] sel_2795;  // int32
  wire signed [31:0] sel_1_913;  // int32
  wire signed [31:0] sel_2796;  // int32
  wire signed [31:0] sel_2797;  // int32
  wire signed [31:0] sel_2798;  // int32
  reg signed [31:0] sel_1_914;  // int32
  wire [7:0] tmp_467;  // uint8
  wire [7:0] sel_1_915;  // uint8
  wire signed [31:0] sel_2799;  // int32
  wire signed [31:0] sel_2800;  // int32
  wire signed [31:0] sel_2801;  // int32
  wire signed [31:0] sel_2802;  // int32
  wire signed [31:0] sel_2803;  // int32
  wire signed [31:0] sel_2804;  // int32
  wire signed [31:0] sel_2805;  // int32
  wire signed [31:0] sel_2806;  // int32
  wire signed [31:0] sel_2807;  // int32
  wire signed [31:0] sel_2808;  // int32
  wire signed [31:0] sel_2809;  // int32
  wire signed [31:0] sel_2810;  // int32
  wire signed [31:0] sel_2811;  // int32
  wire signed [31:0] sel_2812;  // int32
  wire signed [31:0] s_394;  // int32
  wire signed [31:0] sel_1_916;  // int32
  wire signed [31:0] sel_2813;  // int32
  wire signed [31:0] sel_1_917;  // int32
  wire signed [31:0] sel_2814;  // int32
  wire signed [31:0] sel_1_918;  // int32
  wire signed [31:0] sel_2815;  // int32
  wire signed [31:0] sel_1_919;  // int32
  wire signed [31:0] sel_2816;  // int32
  wire signed [31:0] sel_1_920;  // int32
  wire signed [31:0] sel_2817;  // int32
  wire signed [31:0] sel_1_921;  // int32
  wire signed [31:0] sel_2818;  // int32
  wire signed [31:0] sel_2819;  // int32
  wire signed [31:0] sel_2820;  // int32
  reg signed [31:0] sel_1_922;  // int32
  wire [7:0] tmp_468;  // uint8
  wire [7:0] sel_1_923;  // uint8
  wire signed [31:0] sel_2821;  // int32
  wire signed [31:0] sel_2822;  // int32
  wire signed [31:0] sel_2823;  // int32
  wire signed [31:0] sel_2824;  // int32
  wire signed [31:0] sel_2825;  // int32
  wire signed [31:0] sel_2826;  // int32
  wire signed [31:0] sel_2827;  // int32
  wire signed [31:0] sel_2828;  // int32
  wire signed [31:0] sel_2829;  // int32
  wire signed [31:0] sel_2830;  // int32
  wire signed [31:0] sel_2831;  // int32
  wire signed [31:0] sel_2832;  // int32
  wire signed [31:0] sel_2833;  // int32
  wire signed [31:0] sel_2834;  // int32
  wire signed [31:0] s_395;  // int32
  wire signed [31:0] sel_1_924;  // int32
  wire signed [31:0] sel_2835;  // int32
  wire signed [31:0] sel_1_925;  // int32
  wire signed [31:0] sel_2836;  // int32
  wire signed [31:0] sel_1_926;  // int32
  wire signed [31:0] sel_2837;  // int32
  wire signed [31:0] sel_1_927;  // int32
  wire signed [31:0] sel_2838;  // int32
  wire signed [31:0] sel_1_928;  // int32
  wire signed [31:0] sel_2839;  // int32
  wire signed [31:0] sel_2840;  // int32
  wire signed [31:0] sel_2841;  // int32
  reg signed [31:0] sel_1_929;  // int32
  wire [7:0] tmp_469;  // uint8
  wire [7:0] sel_1_930;  // uint8
  reg [7:0] sel_1_931;  // uint8
  wire signed [31:0] sel_2842;  // int32
  wire signed [31:0] sel_2843;  // int32
  wire signed [31:0] sel_2844;  // int32
  wire signed [31:0] sel_2845;  // int32
  wire signed [31:0] sel_2846;  // int32
  wire signed [31:0] sel_2847;  // int32
  wire signed [31:0] sel_2848;  // int32
  wire signed [31:0] sel_2849;  // int32
  wire signed [31:0] sel_2850;  // int32
  wire signed [31:0] sel_2851;  // int32
  wire signed [31:0] sel_2852;  // int32
  wire signed [31:0] sel_2853;  // int32
  wire signed [31:0] sel_2854;  // int32
  wire signed [31:0] sel_2855;  // int32
  wire signed [31:0] s_396;  // int32
  wire signed [31:0] sel_1_932;  // int32
  wire signed [31:0] sel_2856;  // int32
  wire signed [31:0] sel_1_933;  // int32
  wire signed [31:0] sel_2857;  // int32
  wire signed [31:0] sel_1_934;  // int32
  wire signed [31:0] sel_2858;  // int32
  wire signed [31:0] sel_1_935;  // int32
  wire signed [31:0] sel_2859;  // int32
  wire signed [31:0] sel_2860;  // int32
  wire signed [31:0] sel_2861;  // int32
  reg signed [31:0] sel_1_936;  // int32
  wire [7:0] tmp_470;  // uint8
  reg  s_397;
  reg [7:0] tmp_471;  // uint8
  wire [7:0] sel_1_937;  // uint8
  wire signed [31:0] sel_2862;  // int32
  wire signed [31:0] sel_2863;  // int32
  wire signed [31:0] sel_2864;  // int32
  wire signed [31:0] sel_2865;  // int32
  wire signed [31:0] sel_2866;  // int32
  wire signed [31:0] sel_2867;  // int32
  wire signed [31:0] sel_2868;  // int32
  wire signed [31:0] sel_2869;  // int32
  wire signed [31:0] sel_2870;  // int32
  wire signed [31:0] sel_2871;  // int32
  wire signed [31:0] sel_2872;  // int32
  wire signed [31:0] sel_2873;  // int32
  wire signed [31:0] sel_2874;  // int32
  wire signed [31:0] sel_2875;  // int32
  wire signed [31:0] s_398;  // int32
  wire signed [31:0] sel_1_938;  // int32
  wire signed [31:0] sel_2876;  // int32
  wire signed [31:0] sel_1_939;  // int32
  wire signed [31:0] sel_2877;  // int32
  wire signed [31:0] sel_1_940;  // int32
  wire signed [31:0] sel_2878;  // int32
  wire signed [31:0] sel_2879;  // int32
  wire signed [31:0] sel_2880;  // int32
  reg signed [31:0] sel_1_941;  // int32
  wire [7:0] tmp_472;  // uint8
  reg  s_399;
  reg [7:0] tmp_473;  // uint8
  wire [7:0] sel_1_942;  // uint8
  wire signed [31:0] sel_2881;  // int32
  wire signed [31:0] sel_2882;  // int32
  wire signed [31:0] sel_2883;  // int32
  wire signed [31:0] sel_2884;  // int32
  wire signed [31:0] sel_2885;  // int32
  wire signed [31:0] sel_2886;  // int32
  wire signed [31:0] sel_2887;  // int32
  wire signed [31:0] sel_2888;  // int32
  wire signed [31:0] sel_2889;  // int32
  wire signed [31:0] sel_2890;  // int32
  wire signed [31:0] sel_2891;  // int32
  wire signed [31:0] sel_2892;  // int32
  wire signed [31:0] sel_2893;  // int32
  wire signed [31:0] sel_2894;  // int32
  wire signed [31:0] s_400;  // int32
  wire signed [31:0] sel_1_943;  // int32
  wire signed [31:0] sel_2895;  // int32
  wire signed [31:0] sel_1_944;  // int32
  wire signed [31:0] sel_2896;  // int32
  wire signed [31:0] sel_2897;  // int32
  wire signed [31:0] sel_2898;  // int32
  reg signed [31:0] sel_1_945;  // int32
  wire [7:0] tmp_474;  // uint8
  reg  s_401;
  reg [7:0] tmp_475;  // uint8
  wire [7:0] sel_1_946;  // uint8
  wire signed [31:0] sel_2899;  // int32
  wire signed [31:0] sel_2900;  // int32
  wire signed [31:0] sel_2901;  // int32
  wire signed [31:0] sel_2902;  // int32
  wire signed [31:0] sel_2903;  // int32
  wire signed [31:0] sel_2904;  // int32
  wire signed [31:0] sel_2905;  // int32
  wire signed [31:0] sel_2906;  // int32
  wire signed [31:0] sel_2907;  // int32
  wire signed [31:0] sel_2908;  // int32
  wire signed [31:0] sel_2909;  // int32
  wire signed [31:0] sel_2910;  // int32
  wire signed [31:0] sel_2911;  // int32
  wire signed [31:0] sel_2912;  // int32
  wire signed [31:0] s_402;  // int32
  wire signed [31:0] sel_1_947;  // int32
  wire signed [31:0] sel_2913;  // int32
  wire signed [31:0] sel_2914;  // int32
  wire signed [31:0] sel_2915;  // int32
  reg signed [31:0] sel_1_948;  // int32
  wire [7:0] tmp_476;  // uint8
  reg [4:0] is_SPI_MNGR_70;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_2916;  // int32
  wire signed [31:0] sel_2917;  // int32
  wire signed [31:0] sel_2918;  // int32
  wire signed [31:0] sel_2919;  // int32
  wire signed [31:0] sel_2920;  // int32
  wire signed [31:0] sel_2921;  // int32
  wire signed [31:0] sel_2922;  // int32
  wire signed [31:0] sel_2923;  // int32
  wire signed [31:0] sel_2924;  // int32
  wire signed [31:0] sel_2925;  // int32
  wire signed [31:0] sel_2926;  // int32
  wire signed [31:0] sel_2927;  // int32
  wire signed [31:0] sel_2928;  // int32
  reg  s_403;
  wire signed [31:0] sel_2929;  // int32
  wire signed [31:0] sel_2930;  // int32
  wire signed [31:0] sel_2931;  // int32
  wire signed [31:0] s_404;  // int32
  wire signed [31:0] sel_1_949;  // int32
  wire signed [31:0] sel_2932;  // int32
  wire signed [31:0] sel_1_950;  // int32
  wire signed [31:0] sel_2933;  // int32
  wire signed [31:0] sel_1_951;  // int32
  wire signed [31:0] sel_2934;  // int32
  wire signed [31:0] sel_1_952;  // int32
  wire signed [31:0] sel_2935;  // int32
  wire signed [31:0] sel_1_953;  // int32
  wire signed [31:0] sel_2936;  // int32
  wire signed [31:0] sel_1_954;  // int32
  wire signed [31:0] sel_2937;  // int32
  wire signed [31:0] sel_1_955;  // int32
  wire signed [31:0] sel_2938;  // int32
  wire signed [31:0] sel_1_956;  // int32
  wire signed [31:0] sel_1_957;  // int32
  wire signed [31:0] sel_1_958;  // int32
  reg signed [31:0] sel_1_959;  // int32
  wire signed [31:0] sel_2939;  // int32
  wire signed [31:0] sel_2940;  // int32
  wire signed [31:0] sel_1_960;  // int32
  wire signed [31:0] sel_2941;  // int32
  reg  tmp_477;
  reg [7:0] rd_406_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_406_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_34 [0:11];  // uint8 [12]
  wire signed [31:0] sel_2942;  // int32
  reg signed [31:0] sel_1_961;  // int32
  wire [7:0] tmp_478;  // uint8
  wire signed [31:0] sel_2943;  // int32
  wire signed [31:0] sel_2944;  // int32
  wire signed [31:0] sel_2945;  // int32
  wire signed [31:0] sel_2946;  // int32
  wire signed [31:0] sel_2947;  // int32
  wire signed [31:0] sel_2948;  // int32
  wire signed [31:0] sel_2949;  // int32
  wire signed [31:0] sel_2950;  // int32
  wire signed [31:0] sel_2951;  // int32
  wire signed [31:0] sel_2952;  // int32
  wire signed [31:0] sel_2953;  // int32
  wire signed [31:0] sel_2954;  // int32
  wire signed [31:0] sel_2955;  // int32
  wire signed [31:0] sel_2956;  // int32
  wire signed [31:0] sel_2957;  // int32
  wire signed [31:0] sel_2958;  // int32
  wire signed [31:0] sel_2959;  // int32
  wire signed [31:0] s_405;  // int32
  wire signed [31:0] sel_1_962;  // int32
  wire signed [31:0] sel_2960;  // int32
  wire signed [31:0] sel_1_963;  // int32
  wire signed [31:0] sel_2961;  // int32
  wire signed [31:0] sel_1_964;  // int32
  wire signed [31:0] sel_2962;  // int32
  wire signed [31:0] sel_1_965;  // int32
  wire signed [31:0] sel_2963;  // int32
  wire signed [31:0] sel_1_966;  // int32
  wire signed [31:0] sel_2964;  // int32
  wire signed [31:0] sel_1_967;  // int32
  wire signed [31:0] sel_2965;  // int32
  wire signed [31:0] sel_1_968;  // int32
  wire signed [31:0] sel_1_969;  // int32
  wire signed [31:0] sel_1_970;  // int32
  wire signed [31:0] sel_2966;  // int32
  wire signed [31:0] sel_1_971;  // int32
  wire signed [31:0] sel_2967;  // int32
  wire signed [31:0] sel_2968;  // int32
  reg signed [31:0] sel_1_972;  // int32
  wire [7:0] tmp_479;  // uint8
  reg  tmp_480;
  reg [7:0] tmp_481;  // uint8
  wire [7:0] sel_1_973;  // uint8
  wire signed [31:0] sel_2969;  // int32
  wire signed [31:0] sel_2970;  // int32
  wire signed [31:0] sel_2971;  // int32
  wire signed [31:0] sel_2972;  // int32
  wire signed [31:0] sel_2973;  // int32
  wire signed [31:0] sel_2974;  // int32
  wire signed [31:0] sel_2975;  // int32
  wire signed [31:0] sel_2976;  // int32
  wire signed [31:0] sel_2977;  // int32
  wire signed [31:0] sel_2978;  // int32
  wire signed [31:0] sel_2979;  // int32
  wire signed [31:0] sel_2980;  // int32
  wire signed [31:0] sel_2981;  // int32
  wire signed [31:0] sel_2982;  // int32
  wire signed [31:0] sel_2983;  // int32
  wire signed [31:0] sel_2984;  // int32
  wire signed [31:0] sel_2985;  // int32
  wire signed [31:0] s_406;  // int32
  wire signed [31:0] sel_1_974;  // int32
  wire signed [31:0] sel_2986;  // int32
  wire signed [31:0] sel_1_975;  // int32
  wire signed [31:0] sel_2987;  // int32
  wire signed [31:0] sel_1_976;  // int32
  wire signed [31:0] sel_2988;  // int32
  wire signed [31:0] sel_1_977;  // int32
  wire signed [31:0] sel_2989;  // int32
  wire signed [31:0] sel_1_978;  // int32
  wire signed [31:0] sel_2990;  // int32
  wire signed [31:0] sel_1_979;  // int32
  wire signed [31:0] sel_1_980;  // int32
  wire signed [31:0] sel_1_981;  // int32
  wire signed [31:0] sel_2991;  // int32
  wire signed [31:0] sel_1_982;  // int32
  wire signed [31:0] sel_2992;  // int32
  wire signed [31:0] sel_2993;  // int32
  reg signed [31:0] sel_1_983;  // int32
  wire [7:0] tmp_482;  // uint8
  reg  tmp_483;
  reg [7:0] tmp_484;  // uint8
  wire [7:0] sel_1_984;  // uint8
  wire signed [31:0] sel_2994;  // int32
  wire signed [31:0] sel_2995;  // int32
  wire signed [31:0] sel_2996;  // int32
  wire signed [31:0] sel_2997;  // int32
  wire signed [31:0] sel_2998;  // int32
  wire signed [31:0] sel_2999;  // int32
  wire signed [31:0] sel_3000;  // int32
  wire signed [31:0] sel_3001;  // int32
  wire signed [31:0] sel_3002;  // int32
  wire signed [31:0] sel_3003;  // int32
  wire signed [31:0] sel_3004;  // int32
  wire signed [31:0] sel_3005;  // int32
  wire signed [31:0] sel_3006;  // int32
  wire signed [31:0] sel_3007;  // int32
  wire signed [31:0] sel_3008;  // int32
  wire signed [31:0] sel_3009;  // int32
  wire signed [31:0] sel_3010;  // int32
  wire signed [31:0] s_407;  // int32
  wire signed [31:0] sel_1_985;  // int32
  wire signed [31:0] sel_3011;  // int32
  wire signed [31:0] sel_1_986;  // int32
  wire signed [31:0] sel_3012;  // int32
  wire signed [31:0] sel_1_987;  // int32
  wire signed [31:0] sel_3013;  // int32
  wire signed [31:0] sel_1_988;  // int32
  wire signed [31:0] sel_3014;  // int32
  wire signed [31:0] sel_1_989;  // int32
  wire signed [31:0] sel_1_990;  // int32
  wire signed [31:0] sel_1_991;  // int32
  wire signed [31:0] sel_3015;  // int32
  wire signed [31:0] sel_1_992;  // int32
  wire signed [31:0] sel_3016;  // int32
  wire signed [31:0] sel_3017;  // int32
  reg signed [31:0] sel_1_993;  // int32
  wire [7:0] tmp_485;  // uint8
  reg  tmp_486;
  reg [7:0] tmp_487;  // uint8
  wire [7:0] sel_1_994;  // uint8
  wire signed [31:0] sel_3018;  // int32
  wire signed [31:0] sel_3019;  // int32
  wire signed [31:0] sel_3020;  // int32
  wire signed [31:0] sel_3021;  // int32
  wire signed [31:0] sel_3022;  // int32
  wire signed [31:0] sel_3023;  // int32
  wire signed [31:0] sel_3024;  // int32
  wire signed [31:0] sel_3025;  // int32
  wire signed [31:0] sel_3026;  // int32
  wire signed [31:0] sel_3027;  // int32
  wire signed [31:0] sel_3028;  // int32
  wire signed [31:0] sel_3029;  // int32
  wire signed [31:0] sel_3030;  // int32
  wire signed [31:0] sel_3031;  // int32
  wire signed [31:0] sel_3032;  // int32
  wire signed [31:0] sel_3033;  // int32
  wire signed [31:0] sel_3034;  // int32
  wire signed [31:0] s_408;  // int32
  wire signed [31:0] sel_1_995;  // int32
  wire signed [31:0] sel_3035;  // int32
  wire signed [31:0] sel_1_996;  // int32
  wire signed [31:0] sel_3036;  // int32
  wire signed [31:0] sel_1_997;  // int32
  wire signed [31:0] sel_3037;  // int32
  wire signed [31:0] sel_1_998;  // int32
  wire signed [31:0] sel_1_999;  // int32
  wire signed [31:0] sel_1_1000;  // int32
  wire signed [31:0] sel_3038;  // int32
  wire signed [31:0] sel_1_1001;  // int32
  wire signed [31:0] sel_3039;  // int32
  wire signed [31:0] sel_3040;  // int32
  reg signed [31:0] sel_1_1002;  // int32
  wire [7:0] tmp_488;  // uint8
  reg  tmp_489;
  reg [7:0] tmp_490;  // uint8
  wire [7:0] sel_1_1003;  // uint8
  wire signed [31:0] sel_3041;  // int32
  wire signed [31:0] sel_3042;  // int32
  wire signed [31:0] sel_3043;  // int32
  wire signed [31:0] sel_3044;  // int32
  wire signed [31:0] sel_3045;  // int32
  wire signed [31:0] sel_3046;  // int32
  wire signed [31:0] sel_3047;  // int32
  wire signed [31:0] sel_3048;  // int32
  wire signed [31:0] sel_3049;  // int32
  wire signed [31:0] sel_3050;  // int32
  wire signed [31:0] sel_3051;  // int32
  wire signed [31:0] sel_3052;  // int32
  wire signed [31:0] sel_3053;  // int32
  wire signed [31:0] sel_3054;  // int32
  wire signed [31:0] sel_3055;  // int32
  wire signed [31:0] sel_3056;  // int32
  wire signed [31:0] sel_3057;  // int32
  wire signed [31:0] s_409;  // int32
  wire signed [31:0] sel_1_1004;  // int32
  wire signed [31:0] sel_3058;  // int32
  wire signed [31:0] sel_1_1005;  // int32
  wire signed [31:0] sel_3059;  // int32
  wire signed [31:0] sel_1_1006;  // int32
  wire signed [31:0] sel_1_1007;  // int32
  wire signed [31:0] sel_1_1008;  // int32
  wire signed [31:0] sel_3060;  // int32
  wire signed [31:0] sel_1_1009;  // int32
  wire signed [31:0] sel_3061;  // int32
  wire signed [31:0] sel_3062;  // int32
  reg signed [31:0] sel_1_1010;  // int32
  wire [7:0] tmp_491;  // uint8
  reg  tmp_492;
  reg [7:0] tmp_493;  // uint8
  wire [7:0] sel_1_1011;  // uint8
  wire signed [31:0] sel_3063;  // int32
  wire signed [31:0] sel_3064;  // int32
  wire signed [31:0] sel_3065;  // int32
  wire signed [31:0] sel_3066;  // int32
  wire signed [31:0] sel_3067;  // int32
  wire signed [31:0] sel_3068;  // int32
  wire signed [31:0] sel_3069;  // int32
  wire signed [31:0] sel_3070;  // int32
  wire signed [31:0] sel_3071;  // int32
  wire signed [31:0] sel_3072;  // int32
  wire signed [31:0] sel_3073;  // int32
  wire signed [31:0] sel_3074;  // int32
  wire signed [31:0] sel_3075;  // int32
  wire signed [31:0] sel_3076;  // int32
  wire signed [31:0] sel_3077;  // int32
  wire signed [31:0] sel_3078;  // int32
  wire signed [31:0] sel_3079;  // int32
  wire signed [31:0] s_410;  // int32
  wire signed [31:0] sel_1_1012;  // int32
  wire signed [31:0] sel_3080;  // int32
  wire signed [31:0] sel_1_1013;  // int32
  wire signed [31:0] sel_1_1014;  // int32
  wire signed [31:0] sel_1_1015;  // int32
  wire signed [31:0] sel_3081;  // int32
  wire signed [31:0] sel_1_1016;  // int32
  wire signed [31:0] sel_3082;  // int32
  wire signed [31:0] sel_3083;  // int32
  reg signed [31:0] sel_1_1017;  // int32
  wire [7:0] tmp_494;  // uint8
  reg  tmp_495;
  reg [7:0] tmp_496;  // uint8
  wire [7:0] sel_1_1018;  // uint8
  wire signed [31:0] sel_3084;  // int32
  wire signed [31:0] sel_3085;  // int32
  wire signed [31:0] sel_3086;  // int32
  wire signed [31:0] sel_3087;  // int32
  wire signed [31:0] sel_3088;  // int32
  wire signed [31:0] sel_3089;  // int32
  wire signed [31:0] sel_3090;  // int32
  wire signed [31:0] sel_3091;  // int32
  wire signed [31:0] sel_3092;  // int32
  wire signed [31:0] sel_3093;  // int32
  wire signed [31:0] sel_3094;  // int32
  wire signed [31:0] sel_3095;  // int32
  wire signed [31:0] sel_3096;  // int32
  wire signed [31:0] sel_3097;  // int32
  wire signed [31:0] sel_3098;  // int32
  wire signed [31:0] sel_3099;  // int32
  wire signed [31:0] sel_3100;  // int32
  wire signed [31:0] s_411;  // int32
  wire signed [31:0] sel_1_1019;  // int32
  wire signed [31:0] sel_1_1020;  // int32
  wire signed [31:0] sel_1_1021;  // int32
  wire signed [31:0] sel_3101;  // int32
  wire signed [31:0] sel_1_1022;  // int32
  wire signed [31:0] sel_3102;  // int32
  wire signed [31:0] sel_3103;  // int32
  reg signed [31:0] sel_1_1023;  // int32
  wire [7:0] tmp_497;  // uint8
  wire [7:0] sel_3104;  // uint8
  reg [7:0] tmp_498;  // uint8
  wire [7:0] sel_1_1024;  // uint8
  reg [7:0] tmp_499;  // uint8
  wire [7:0] sel_1_1025;  // uint8
  wire [7:0] sel_3105;  // uint8
  reg [4:0] is_SPI_MNGR_71;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_3106;
  wire sel_3107;
  wire sel_3108;
  wire sel_3109;
  wire sel_3110;
  wire sel_3111;
  wire sel_3112;
  wire sel_3113;
  wire sel_3114;
  wire sel_3115;
  wire sel_3116;
  wire sel_3117;
  wire sel_3118;
  wire sel_3119;
  wire s_412;
  wire sel_2_152;
  wire s_413;
  wire sel_2_153;
  wire s_414;
  wire sel_2_154;
  wire s_415;
  wire sel_2_155;
  wire s_416;
  wire sel_2_156;
  wire s_417;
  wire sel_2_157;
  wire s_418;
  wire sel_2_158;
  wire s_419;
  wire sel_2_159;
  reg  s_420;
  wire sel_3120;
  wire sel_3121;
  wire sel_3122;
  wire s_421;
  wire sel_2_160;
  wire s_422;
  wire sel_2_161;
  wire s_423;
  wire sel_2_162;
  wire s_424;
  wire sel_2_163;
  wire s_425;
  wire sel_2_164;
  wire s_426;
  wire sel_2_165;
  wire s_427;
  wire sel_2_166;
  wire s_428;
  wire sel_2_167;
  wire sel_2_168;
  wire sel_2_169;
  reg  sel_2_170;
  reg  sel_2_171;
  wire sel_3123;
  wire sel_2_172;
  wire sel_3124;
  reg [4:0] is_SPI_MNGR_72;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_3125;  // uint8
  wire [7:0] sel_3126;  // uint8
  wire [7:0] sel_3127;  // uint8
  wire [7:0] sel_3128;  // uint8
  wire [7:0] sel_3129;  // uint8
  wire [7:0] sel_3130;  // uint8
  wire [7:0] sel_3131;  // uint8
  wire [7:0] sel_3132;  // uint8
  wire [7:0] sel_3133;  // uint8
  wire [7:0] sel_3134;  // uint8
  wire [7:0] sel_3135;  // uint8
  wire [7:0] sel_3136;  // uint8
  reg  s_429;
  wire signed [31:0] sel_3137;  // int32
  wire signed [31:0] sel_3138;  // int32
  wire signed [31:0] sel_3139;  // int32
  wire signed [31:0] sel_3140;  // int32
  wire signed [31:0] sel_3141;  // int32
  wire signed [31:0] sel_3142;  // int32
  wire signed [31:0] sel_3143;  // int32
  wire signed [31:0] sel_3144;  // int32
  wire signed [31:0] sel_3145;  // int32
  wire signed [31:0] sel_3146;  // int32
  wire signed [31:0] sel_3147;  // int32
  wire signed [31:0] sel_3148;  // int32
  wire signed [31:0] sel_3149;  // int32
  wire signed [31:0] sel_3150;  // int32
  wire signed [31:0] s_430;  // int32
  wire signed [31:0] sel_1_1026;  // int32
  wire signed [31:0] sel_3151;  // int32
  wire signed [31:0] sel_1_1027;  // int32
  wire signed [31:0] sel_3152;  // int32
  wire signed [31:0] sel_1_1028;  // int32
  wire signed [31:0] sel_3153;  // int32
  wire signed [31:0] sel_1_1029;  // int32
  wire signed [31:0] sel_3154;  // int32
  wire signed [31:0] sel_1_1030;  // int32
  wire signed [31:0] sel_3155;  // int32
  wire signed [31:0] sel_1_1031;  // int32
  wire signed [31:0] sel_3156;  // int32
  wire signed [31:0] sel_1_1032;  // int32
  wire signed [31:0] sel_3157;  // int32
  wire signed [31:0] sel_1_1033;  // int32
  wire signed [31:0] sel_3158;  // int32
  wire signed [31:0] sel_3159;  // int32
  wire signed [31:0] sel_3160;  // int32
  reg signed [31:0] sel_1_1034;  // int32
  wire [7:0] tmp_500;  // uint8
  wire signed [31:0] sel_3161;  // int32
  wire signed [31:0] sel_3162;  // int32
  wire signed [31:0] sel_3163;  // int32
  wire signed [31:0] sel_3164;  // int32
  wire signed [31:0] sel_3165;  // int32
  wire signed [31:0] sel_3166;  // int32
  wire signed [31:0] sel_3167;  // int32
  wire signed [31:0] sel_3168;  // int32
  wire signed [31:0] sel_3169;  // int32
  wire signed [31:0] sel_3170;  // int32
  wire signed [31:0] sel_3171;  // int32
  wire signed [31:0] sel_3172;  // int32
  wire signed [31:0] sel_3173;  // int32
  wire signed [31:0] sel_3174;  // int32
  wire signed [31:0] s_431;  // int32
  wire signed [31:0] sel_1_1035;  // int32
  wire signed [31:0] sel_3175;  // int32
  wire signed [31:0] sel_1_1036;  // int32
  wire signed [31:0] sel_3176;  // int32
  wire signed [31:0] sel_1_1037;  // int32
  wire signed [31:0] sel_3177;  // int32
  wire signed [31:0] sel_1_1038;  // int32
  wire signed [31:0] sel_3178;  // int32
  wire signed [31:0] sel_1_1039;  // int32
  wire signed [31:0] sel_3179;  // int32
  wire signed [31:0] sel_1_1040;  // int32
  wire signed [31:0] sel_3180;  // int32
  wire signed [31:0] sel_1_1041;  // int32
  wire signed [31:0] sel_3181;  // int32
  wire signed [31:0] sel_3182;  // int32
  wire signed [31:0] sel_3183;  // int32
  reg signed [31:0] sel_1_1042;  // int32
  wire [7:0] tmp_501;  // uint8
  wire [7:0] sel_1_1043;  // uint8
  wire signed [31:0] sel_3184;  // int32
  wire signed [31:0] sel_3185;  // int32
  wire signed [31:0] sel_3186;  // int32
  wire signed [31:0] sel_3187;  // int32
  wire signed [31:0] sel_3188;  // int32
  wire signed [31:0] sel_3189;  // int32
  wire signed [31:0] sel_3190;  // int32
  wire signed [31:0] sel_3191;  // int32
  wire signed [31:0] sel_3192;  // int32
  wire signed [31:0] sel_3193;  // int32
  wire signed [31:0] sel_3194;  // int32
  wire signed [31:0] sel_3195;  // int32
  wire signed [31:0] sel_3196;  // int32
  wire signed [31:0] sel_3197;  // int32
  wire signed [31:0] s_432;  // int32
  wire signed [31:0] sel_1_1044;  // int32
  wire signed [31:0] sel_3198;  // int32
  wire signed [31:0] sel_1_1045;  // int32
  wire signed [31:0] sel_3199;  // int32
  wire signed [31:0] sel_1_1046;  // int32
  wire signed [31:0] sel_3200;  // int32
  wire signed [31:0] sel_1_1047;  // int32
  wire signed [31:0] sel_3201;  // int32
  wire signed [31:0] sel_1_1048;  // int32
  wire signed [31:0] sel_3202;  // int32
  wire signed [31:0] sel_1_1049;  // int32
  wire signed [31:0] sel_3203;  // int32
  wire signed [31:0] sel_3204;  // int32
  wire signed [31:0] sel_3205;  // int32
  reg signed [31:0] sel_1_1050;  // int32
  wire [7:0] tmp_502;  // uint8
  wire [7:0] sel_1_1051;  // uint8
  wire signed [31:0] sel_3206;  // int32
  wire signed [31:0] sel_3207;  // int32
  wire signed [31:0] sel_3208;  // int32
  wire signed [31:0] sel_3209;  // int32
  wire signed [31:0] sel_3210;  // int32
  wire signed [31:0] sel_3211;  // int32
  wire signed [31:0] sel_3212;  // int32
  wire signed [31:0] sel_3213;  // int32
  wire signed [31:0] sel_3214;  // int32
  wire signed [31:0] sel_3215;  // int32
  wire signed [31:0] sel_3216;  // int32
  wire signed [31:0] sel_3217;  // int32
  wire signed [31:0] sel_3218;  // int32
  wire signed [31:0] sel_3219;  // int32
  wire signed [31:0] s_433;  // int32
  wire signed [31:0] sel_1_1052;  // int32
  wire signed [31:0] sel_3220;  // int32
  wire signed [31:0] sel_1_1053;  // int32
  wire signed [31:0] sel_3221;  // int32
  wire signed [31:0] sel_1_1054;  // int32
  wire signed [31:0] sel_3222;  // int32
  wire signed [31:0] sel_1_1055;  // int32
  wire signed [31:0] sel_3223;  // int32
  wire signed [31:0] sel_1_1056;  // int32
  wire signed [31:0] sel_3224;  // int32
  wire signed [31:0] sel_3225;  // int32
  wire signed [31:0] sel_3226;  // int32
  reg signed [31:0] sel_1_1057;  // int32
  wire [7:0] tmp_503;  // uint8
  wire [7:0] sel_1_1058;  // uint8
  reg [7:0] sel_1_1059;  // uint8
  wire signed [31:0] sel_3227;  // int32
  wire signed [31:0] sel_3228;  // int32
  wire signed [31:0] sel_3229;  // int32
  wire signed [31:0] sel_3230;  // int32
  wire signed [31:0] sel_3231;  // int32
  wire signed [31:0] sel_3232;  // int32
  wire signed [31:0] sel_3233;  // int32
  wire signed [31:0] sel_3234;  // int32
  wire signed [31:0] sel_3235;  // int32
  wire signed [31:0] sel_3236;  // int32
  wire signed [31:0] sel_3237;  // int32
  wire signed [31:0] sel_3238;  // int32
  wire signed [31:0] sel_3239;  // int32
  wire signed [31:0] sel_3240;  // int32
  wire signed [31:0] s_434;  // int32
  wire signed [31:0] sel_1_1060;  // int32
  wire signed [31:0] sel_3241;  // int32
  wire signed [31:0] sel_1_1061;  // int32
  wire signed [31:0] sel_3242;  // int32
  wire signed [31:0] sel_1_1062;  // int32
  wire signed [31:0] sel_3243;  // int32
  wire signed [31:0] sel_1_1063;  // int32
  wire signed [31:0] sel_3244;  // int32
  wire signed [31:0] sel_3245;  // int32
  wire signed [31:0] sel_3246;  // int32
  reg signed [31:0] sel_1_1064;  // int32
  wire [7:0] tmp_504;  // uint8
  reg  s_435;
  reg [7:0] tmp_505;  // uint8
  wire [7:0] sel_1_1065;  // uint8
  wire signed [31:0] sel_3247;  // int32
  wire signed [31:0] sel_3248;  // int32
  wire signed [31:0] sel_3249;  // int32
  wire signed [31:0] sel_3250;  // int32
  wire signed [31:0] sel_3251;  // int32
  wire signed [31:0] sel_3252;  // int32
  wire signed [31:0] sel_3253;  // int32
  wire signed [31:0] sel_3254;  // int32
  wire signed [31:0] sel_3255;  // int32
  wire signed [31:0] sel_3256;  // int32
  wire signed [31:0] sel_3257;  // int32
  wire signed [31:0] sel_3258;  // int32
  wire signed [31:0] sel_3259;  // int32
  wire signed [31:0] sel_3260;  // int32
  wire signed [31:0] s_436;  // int32
  wire signed [31:0] sel_1_1066;  // int32
  wire signed [31:0] sel_3261;  // int32
  wire signed [31:0] sel_1_1067;  // int32
  wire signed [31:0] sel_3262;  // int32
  wire signed [31:0] sel_1_1068;  // int32
  wire signed [31:0] sel_3263;  // int32
  wire signed [31:0] sel_3264;  // int32
  wire signed [31:0] sel_3265;  // int32
  reg signed [31:0] sel_1_1069;  // int32
  wire [7:0] tmp_506;  // uint8
  reg  s_437;
  reg [7:0] tmp_507;  // uint8
  wire [7:0] sel_1_1070;  // uint8
  wire signed [31:0] sel_3266;  // int32
  wire signed [31:0] sel_3267;  // int32
  wire signed [31:0] sel_3268;  // int32
  wire signed [31:0] sel_3269;  // int32
  wire signed [31:0] sel_3270;  // int32
  wire signed [31:0] sel_3271;  // int32
  wire signed [31:0] sel_3272;  // int32
  wire signed [31:0] sel_3273;  // int32
  wire signed [31:0] sel_3274;  // int32
  wire signed [31:0] sel_3275;  // int32
  wire signed [31:0] sel_3276;  // int32
  wire signed [31:0] sel_3277;  // int32
  wire signed [31:0] sel_3278;  // int32
  wire signed [31:0] sel_3279;  // int32
  wire signed [31:0] s_438;  // int32
  wire signed [31:0] sel_1_1071;  // int32
  wire signed [31:0] sel_3280;  // int32
  wire signed [31:0] sel_1_1072;  // int32
  wire signed [31:0] sel_3281;  // int32
  wire signed [31:0] sel_3282;  // int32
  wire signed [31:0] sel_3283;  // int32
  reg signed [31:0] sel_1_1073;  // int32
  wire [7:0] tmp_508;  // uint8
  reg  s_439;
  reg [7:0] tmp_509;  // uint8
  wire [7:0] sel_1_1074;  // uint8
  wire signed [31:0] sel_3284;  // int32
  wire signed [31:0] sel_3285;  // int32
  wire signed [31:0] sel_3286;  // int32
  wire signed [31:0] sel_3287;  // int32
  wire signed [31:0] sel_3288;  // int32
  wire signed [31:0] sel_3289;  // int32
  wire signed [31:0] sel_3290;  // int32
  wire signed [31:0] sel_3291;  // int32
  wire signed [31:0] sel_3292;  // int32
  wire signed [31:0] sel_3293;  // int32
  wire signed [31:0] sel_3294;  // int32
  wire signed [31:0] sel_3295;  // int32
  wire signed [31:0] sel_3296;  // int32
  wire signed [31:0] sel_3297;  // int32
  wire signed [31:0] s_440;  // int32
  wire signed [31:0] sel_1_1075;  // int32
  wire signed [31:0] sel_3298;  // int32
  wire signed [31:0] sel_3299;  // int32
  wire signed [31:0] sel_3300;  // int32
  reg signed [31:0] sel_1_1076;  // int32
  wire [7:0] tmp_510;  // uint8
  reg [4:0] is_SPI_MNGR_73;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_3301;  // int32
  wire signed [31:0] sel_3302;  // int32
  wire signed [31:0] sel_3303;  // int32
  wire signed [31:0] sel_3304;  // int32
  wire signed [31:0] sel_3305;  // int32
  wire signed [31:0] sel_3306;  // int32
  wire signed [31:0] sel_3307;  // int32
  wire signed [31:0] sel_3308;  // int32
  wire signed [31:0] sel_3309;  // int32
  wire signed [31:0] sel_3310;  // int32
  wire signed [31:0] sel_3311;  // int32
  wire signed [31:0] sel_3312;  // int32
  wire signed [31:0] sel_3313;  // int32
  reg  s_441;
  wire signed [31:0] sel_3314;  // int32
  wire signed [31:0] sel_3315;  // int32
  wire signed [31:0] sel_3316;  // int32
  wire signed [31:0] s_442;  // int32
  wire signed [31:0] sel_1_1077;  // int32
  wire signed [31:0] sel_3317;  // int32
  wire signed [31:0] sel_1_1078;  // int32
  wire signed [31:0] sel_3318;  // int32
  wire signed [31:0] sel_1_1079;  // int32
  wire signed [31:0] sel_3319;  // int32
  wire signed [31:0] sel_1_1080;  // int32
  wire signed [31:0] sel_3320;  // int32
  wire signed [31:0] sel_1_1081;  // int32
  wire signed [31:0] sel_3321;  // int32
  wire signed [31:0] sel_1_1082;  // int32
  wire signed [31:0] sel_3322;  // int32
  wire signed [31:0] sel_1_1083;  // int32
  wire signed [31:0] sel_3323;  // int32
  wire signed [31:0] sel_1_1084;  // int32
  wire signed [31:0] sel_1_1085;  // int32
  wire signed [31:0] sel_1_1086;  // int32
  reg signed [31:0] sel_1_1087;  // int32
  wire signed [31:0] sel_3324;  // int32
  wire signed [31:0] sel_3325;  // int32
  wire signed [31:0] sel_1_1088;  // int32
  wire signed [31:0] sel_3326;  // int32
  reg  tmp_511;
  reg [7:0] rd_438_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_438_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_35 [0:11];  // uint8 [12]
  wire signed [31:0] sel_3327;  // int32
  reg signed [31:0] sel_1_1089;  // int32
  wire [7:0] tmp_512;  // uint8
  wire signed [31:0] sel_3328;  // int32
  wire signed [31:0] sel_3329;  // int32
  wire signed [31:0] sel_3330;  // int32
  wire signed [31:0] sel_3331;  // int32
  wire signed [31:0] sel_3332;  // int32
  wire signed [31:0] sel_3333;  // int32
  wire signed [31:0] sel_3334;  // int32
  wire signed [31:0] sel_3335;  // int32
  wire signed [31:0] sel_3336;  // int32
  wire signed [31:0] sel_3337;  // int32
  wire signed [31:0] sel_3338;  // int32
  wire signed [31:0] sel_3339;  // int32
  wire signed [31:0] sel_3340;  // int32
  wire signed [31:0] sel_3341;  // int32
  wire signed [31:0] sel_3342;  // int32
  wire signed [31:0] sel_3343;  // int32
  wire signed [31:0] sel_3344;  // int32
  wire signed [31:0] s_443;  // int32
  wire signed [31:0] sel_1_1090;  // int32
  wire signed [31:0] sel_3345;  // int32
  wire signed [31:0] sel_1_1091;  // int32
  wire signed [31:0] sel_3346;  // int32
  wire signed [31:0] sel_1_1092;  // int32
  wire signed [31:0] sel_3347;  // int32
  wire signed [31:0] sel_1_1093;  // int32
  wire signed [31:0] sel_3348;  // int32
  wire signed [31:0] sel_1_1094;  // int32
  wire signed [31:0] sel_3349;  // int32
  wire signed [31:0] sel_1_1095;  // int32
  wire signed [31:0] sel_3350;  // int32
  wire signed [31:0] sel_1_1096;  // int32
  wire signed [31:0] sel_1_1097;  // int32
  wire signed [31:0] sel_1_1098;  // int32
  wire signed [31:0] sel_3351;  // int32
  wire signed [31:0] sel_1_1099;  // int32
  wire signed [31:0] sel_3352;  // int32
  wire signed [31:0] sel_3353;  // int32
  reg signed [31:0] sel_1_1100;  // int32
  wire [7:0] tmp_513;  // uint8
  reg  tmp_514;
  reg [7:0] tmp_515;  // uint8
  wire [7:0] sel_1_1101;  // uint8
  wire signed [31:0] sel_3354;  // int32
  wire signed [31:0] sel_3355;  // int32
  wire signed [31:0] sel_3356;  // int32
  wire signed [31:0] sel_3357;  // int32
  wire signed [31:0] sel_3358;  // int32
  wire signed [31:0] sel_3359;  // int32
  wire signed [31:0] sel_3360;  // int32
  wire signed [31:0] sel_3361;  // int32
  wire signed [31:0] sel_3362;  // int32
  wire signed [31:0] sel_3363;  // int32
  wire signed [31:0] sel_3364;  // int32
  wire signed [31:0] sel_3365;  // int32
  wire signed [31:0] sel_3366;  // int32
  wire signed [31:0] sel_3367;  // int32
  wire signed [31:0] sel_3368;  // int32
  wire signed [31:0] sel_3369;  // int32
  wire signed [31:0] sel_3370;  // int32
  wire signed [31:0] s_444;  // int32
  wire signed [31:0] sel_1_1102;  // int32
  wire signed [31:0] sel_3371;  // int32
  wire signed [31:0] sel_1_1103;  // int32
  wire signed [31:0] sel_3372;  // int32
  wire signed [31:0] sel_1_1104;  // int32
  wire signed [31:0] sel_3373;  // int32
  wire signed [31:0] sel_1_1105;  // int32
  wire signed [31:0] sel_3374;  // int32
  wire signed [31:0] sel_1_1106;  // int32
  wire signed [31:0] sel_3375;  // int32
  wire signed [31:0] sel_1_1107;  // int32
  wire signed [31:0] sel_1_1108;  // int32
  wire signed [31:0] sel_1_1109;  // int32
  wire signed [31:0] sel_3376;  // int32
  wire signed [31:0] sel_1_1110;  // int32
  wire signed [31:0] sel_3377;  // int32
  wire signed [31:0] sel_3378;  // int32
  reg signed [31:0] sel_1_1111;  // int32
  wire [7:0] tmp_516;  // uint8
  reg  tmp_517;
  reg [7:0] tmp_518;  // uint8
  wire [7:0] sel_1_1112;  // uint8
  wire signed [31:0] sel_3379;  // int32
  wire signed [31:0] sel_3380;  // int32
  wire signed [31:0] sel_3381;  // int32
  wire signed [31:0] sel_3382;  // int32
  wire signed [31:0] sel_3383;  // int32
  wire signed [31:0] sel_3384;  // int32
  wire signed [31:0] sel_3385;  // int32
  wire signed [31:0] sel_3386;  // int32
  wire signed [31:0] sel_3387;  // int32
  wire signed [31:0] sel_3388;  // int32
  wire signed [31:0] sel_3389;  // int32
  wire signed [31:0] sel_3390;  // int32
  wire signed [31:0] sel_3391;  // int32
  wire signed [31:0] sel_3392;  // int32
  wire signed [31:0] sel_3393;  // int32
  wire signed [31:0] sel_3394;  // int32
  wire signed [31:0] sel_3395;  // int32
  wire signed [31:0] s_445;  // int32
  wire signed [31:0] sel_1_1113;  // int32
  wire signed [31:0] sel_3396;  // int32
  wire signed [31:0] sel_1_1114;  // int32
  wire signed [31:0] sel_3397;  // int32
  wire signed [31:0] sel_1_1115;  // int32
  wire signed [31:0] sel_3398;  // int32
  wire signed [31:0] sel_1_1116;  // int32
  wire signed [31:0] sel_3399;  // int32
  wire signed [31:0] sel_1_1117;  // int32
  wire signed [31:0] sel_1_1118;  // int32
  wire signed [31:0] sel_1_1119;  // int32
  wire signed [31:0] sel_3400;  // int32
  wire signed [31:0] sel_1_1120;  // int32
  wire signed [31:0] sel_3401;  // int32
  wire signed [31:0] sel_3402;  // int32
  reg signed [31:0] sel_1_1121;  // int32
  wire [7:0] tmp_519;  // uint8
  reg  tmp_520;
  reg [7:0] tmp_521;  // uint8
  wire [7:0] sel_1_1122;  // uint8
  wire signed [31:0] sel_3403;  // int32
  wire signed [31:0] sel_3404;  // int32
  wire signed [31:0] sel_3405;  // int32
  wire signed [31:0] sel_3406;  // int32
  wire signed [31:0] sel_3407;  // int32
  wire signed [31:0] sel_3408;  // int32
  wire signed [31:0] sel_3409;  // int32
  wire signed [31:0] sel_3410;  // int32
  wire signed [31:0] sel_3411;  // int32
  wire signed [31:0] sel_3412;  // int32
  wire signed [31:0] sel_3413;  // int32
  wire signed [31:0] sel_3414;  // int32
  wire signed [31:0] sel_3415;  // int32
  wire signed [31:0] sel_3416;  // int32
  wire signed [31:0] sel_3417;  // int32
  wire signed [31:0] sel_3418;  // int32
  wire signed [31:0] sel_3419;  // int32
  wire signed [31:0] s_446;  // int32
  wire signed [31:0] sel_1_1123;  // int32
  wire signed [31:0] sel_3420;  // int32
  wire signed [31:0] sel_1_1124;  // int32
  wire signed [31:0] sel_3421;  // int32
  wire signed [31:0] sel_1_1125;  // int32
  wire signed [31:0] sel_3422;  // int32
  wire signed [31:0] sel_1_1126;  // int32
  wire signed [31:0] sel_1_1127;  // int32
  wire signed [31:0] sel_1_1128;  // int32
  wire signed [31:0] sel_3423;  // int32
  wire signed [31:0] sel_1_1129;  // int32
  wire signed [31:0] sel_3424;  // int32
  wire signed [31:0] sel_3425;  // int32
  reg signed [31:0] sel_1_1130;  // int32
  wire [7:0] tmp_522;  // uint8
  reg  tmp_523;
  reg [7:0] tmp_524;  // uint8
  wire [7:0] sel_1_1131;  // uint8
  wire signed [31:0] sel_3426;  // int32
  wire signed [31:0] sel_3427;  // int32
  wire signed [31:0] sel_3428;  // int32
  wire signed [31:0] sel_3429;  // int32
  wire signed [31:0] sel_3430;  // int32
  wire signed [31:0] sel_3431;  // int32
  wire signed [31:0] sel_3432;  // int32
  wire signed [31:0] sel_3433;  // int32
  wire signed [31:0] sel_3434;  // int32
  wire signed [31:0] sel_3435;  // int32
  wire signed [31:0] sel_3436;  // int32
  wire signed [31:0] sel_3437;  // int32
  wire signed [31:0] sel_3438;  // int32
  wire signed [31:0] sel_3439;  // int32
  wire signed [31:0] sel_3440;  // int32
  wire signed [31:0] sel_3441;  // int32
  wire signed [31:0] sel_3442;  // int32
  wire signed [31:0] s_447;  // int32
  wire signed [31:0] sel_1_1132;  // int32
  wire signed [31:0] sel_3443;  // int32
  wire signed [31:0] sel_1_1133;  // int32
  wire signed [31:0] sel_3444;  // int32
  wire signed [31:0] sel_1_1134;  // int32
  wire signed [31:0] sel_1_1135;  // int32
  wire signed [31:0] sel_1_1136;  // int32
  wire signed [31:0] sel_3445;  // int32
  wire signed [31:0] sel_1_1137;  // int32
  wire signed [31:0] sel_3446;  // int32
  wire signed [31:0] sel_3447;  // int32
  reg signed [31:0] sel_1_1138;  // int32
  wire [7:0] tmp_525;  // uint8
  reg  tmp_526;
  reg [7:0] tmp_527;  // uint8
  wire [7:0] sel_1_1139;  // uint8
  wire signed [31:0] sel_3448;  // int32
  wire signed [31:0] sel_3449;  // int32
  wire signed [31:0] sel_3450;  // int32
  wire signed [31:0] sel_3451;  // int32
  wire signed [31:0] sel_3452;  // int32
  wire signed [31:0] sel_3453;  // int32
  wire signed [31:0] sel_3454;  // int32
  wire signed [31:0] sel_3455;  // int32
  wire signed [31:0] sel_3456;  // int32
  wire signed [31:0] sel_3457;  // int32
  wire signed [31:0] sel_3458;  // int32
  wire signed [31:0] sel_3459;  // int32
  wire signed [31:0] sel_3460;  // int32
  wire signed [31:0] sel_3461;  // int32
  wire signed [31:0] sel_3462;  // int32
  wire signed [31:0] sel_3463;  // int32
  wire signed [31:0] sel_3464;  // int32
  wire signed [31:0] s_448;  // int32
  wire signed [31:0] sel_1_1140;  // int32
  wire signed [31:0] sel_3465;  // int32
  wire signed [31:0] sel_1_1141;  // int32
  wire signed [31:0] sel_1_1142;  // int32
  wire signed [31:0] sel_1_1143;  // int32
  wire signed [31:0] sel_3466;  // int32
  wire signed [31:0] sel_1_1144;  // int32
  wire signed [31:0] sel_3467;  // int32
  wire signed [31:0] sel_3468;  // int32
  reg signed [31:0] sel_1_1145;  // int32
  wire [7:0] tmp_528;  // uint8
  reg  tmp_529;
  reg [7:0] tmp_530;  // uint8
  wire [7:0] sel_1_1146;  // uint8
  wire signed [31:0] sel_3469;  // int32
  wire signed [31:0] sel_3470;  // int32
  wire signed [31:0] sel_3471;  // int32
  wire signed [31:0] sel_3472;  // int32
  wire signed [31:0] sel_3473;  // int32
  wire signed [31:0] sel_3474;  // int32
  wire signed [31:0] sel_3475;  // int32
  wire signed [31:0] sel_3476;  // int32
  wire signed [31:0] sel_3477;  // int32
  wire signed [31:0] sel_3478;  // int32
  wire signed [31:0] sel_3479;  // int32
  wire signed [31:0] sel_3480;  // int32
  wire signed [31:0] sel_3481;  // int32
  wire signed [31:0] sel_3482;  // int32
  wire signed [31:0] sel_3483;  // int32
  wire signed [31:0] sel_3484;  // int32
  wire signed [31:0] sel_3485;  // int32
  wire signed [31:0] s_449;  // int32
  wire signed [31:0] sel_1_1147;  // int32
  wire signed [31:0] sel_1_1148;  // int32
  wire signed [31:0] sel_1_1149;  // int32
  wire signed [31:0] sel_3486;  // int32
  wire signed [31:0] sel_1_1150;  // int32
  wire signed [31:0] sel_3487;  // int32
  wire signed [31:0] sel_3488;  // int32
  reg signed [31:0] sel_1_1151;  // int32
  wire [7:0] tmp_531;  // uint8
  wire [7:0] sel_3489;  // uint8
  reg [7:0] tmp_532;  // uint8
  wire [7:0] sel_1_1152;  // uint8
  reg [7:0] tmp_533;  // uint8
  wire [7:0] sel_1_1153;  // uint8
  wire [7:0] sel_3490;  // uint8
  reg [4:0] is_SPI_MNGR_74;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_3491;
  wire sel_3492;
  wire sel_3493;
  wire sel_3494;
  wire sel_3495;
  wire sel_3496;
  wire sel_3497;
  wire sel_3498;
  wire sel_3499;
  wire sel_3500;
  wire sel_3501;
  wire sel_3502;
  wire sel_3503;
  wire sel_3504;
  wire s_450;
  wire sel_2_173;
  wire s_451;
  wire sel_2_174;
  wire s_452;
  wire sel_2_175;
  wire s_453;
  wire sel_2_176;
  wire s_454;
  wire sel_2_177;
  wire s_455;
  wire sel_2_178;
  wire s_456;
  wire sel_2_179;
  wire s_457;
  wire sel_2_180;
  reg  s_458;
  wire sel_3505;
  wire sel_3506;
  wire sel_3507;
  wire s_459;
  wire sel_2_181;
  wire s_460;
  wire sel_2_182;
  wire s_461;
  wire sel_2_183;
  wire s_462;
  wire sel_2_184;
  wire s_463;
  wire sel_2_185;
  wire s_464;
  wire sel_2_186;
  wire s_465;
  wire sel_2_187;
  wire s_466;
  wire sel_2_188;
  wire sel_2_189;
  wire sel_2_190;
  reg  sel_2_191;
  reg  sel_2_192;
  wire sel_3508;
  wire sel_2_193;
  wire sel_3509;
  reg [4:0] is_SPI_MNGR_75;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_3510;  // uint8
  wire [7:0] sel_3511;  // uint8
  wire [7:0] sel_3512;  // uint8
  wire [7:0] sel_3513;  // uint8
  wire [7:0] sel_3514;  // uint8
  wire [7:0] sel_3515;  // uint8
  wire [7:0] sel_3516;  // uint8
  wire [7:0] sel_3517;  // uint8
  wire [7:0] sel_3518;  // uint8
  wire [7:0] sel_3519;  // uint8
  wire [7:0] sel_3520;  // uint8
  wire [7:0] sel_3521;  // uint8
  reg  s_467;
  wire signed [31:0] sel_3522;  // int32
  wire signed [31:0] sel_3523;  // int32
  wire signed [31:0] sel_3524;  // int32
  wire signed [31:0] sel_3525;  // int32
  wire signed [31:0] sel_3526;  // int32
  wire signed [31:0] sel_3527;  // int32
  wire signed [31:0] sel_3528;  // int32
  wire signed [31:0] sel_3529;  // int32
  wire signed [31:0] sel_3530;  // int32
  wire signed [31:0] sel_3531;  // int32
  wire signed [31:0] sel_3532;  // int32
  wire signed [31:0] sel_3533;  // int32
  wire signed [31:0] sel_3534;  // int32
  wire signed [31:0] sel_3535;  // int32
  wire signed [31:0] s_468;  // int32
  wire signed [31:0] sel_1_1154;  // int32
  wire signed [31:0] sel_3536;  // int32
  wire signed [31:0] sel_1_1155;  // int32
  wire signed [31:0] sel_3537;  // int32
  wire signed [31:0] sel_1_1156;  // int32
  wire signed [31:0] sel_3538;  // int32
  wire signed [31:0] sel_1_1157;  // int32
  wire signed [31:0] sel_3539;  // int32
  wire signed [31:0] sel_1_1158;  // int32
  wire signed [31:0] sel_3540;  // int32
  wire signed [31:0] sel_1_1159;  // int32
  wire signed [31:0] sel_3541;  // int32
  wire signed [31:0] sel_1_1160;  // int32
  wire signed [31:0] sel_3542;  // int32
  wire signed [31:0] sel_1_1161;  // int32
  wire signed [31:0] sel_3543;  // int32
  wire signed [31:0] sel_3544;  // int32
  wire signed [31:0] sel_3545;  // int32
  reg signed [31:0] sel_1_1162;  // int32
  wire [7:0] tmp_534;  // uint8
  wire signed [31:0] sel_3546;  // int32
  wire signed [31:0] sel_3547;  // int32
  wire signed [31:0] sel_3548;  // int32
  wire signed [31:0] sel_3549;  // int32
  wire signed [31:0] sel_3550;  // int32
  wire signed [31:0] sel_3551;  // int32
  wire signed [31:0] sel_3552;  // int32
  wire signed [31:0] sel_3553;  // int32
  wire signed [31:0] sel_3554;  // int32
  wire signed [31:0] sel_3555;  // int32
  wire signed [31:0] sel_3556;  // int32
  wire signed [31:0] sel_3557;  // int32
  wire signed [31:0] sel_3558;  // int32
  wire signed [31:0] sel_3559;  // int32
  wire signed [31:0] s_469;  // int32
  wire signed [31:0] sel_1_1163;  // int32
  wire signed [31:0] sel_3560;  // int32
  wire signed [31:0] sel_1_1164;  // int32
  wire signed [31:0] sel_3561;  // int32
  wire signed [31:0] sel_1_1165;  // int32
  wire signed [31:0] sel_3562;  // int32
  wire signed [31:0] sel_1_1166;  // int32
  wire signed [31:0] sel_3563;  // int32
  wire signed [31:0] sel_1_1167;  // int32
  wire signed [31:0] sel_3564;  // int32
  wire signed [31:0] sel_1_1168;  // int32
  wire signed [31:0] sel_3565;  // int32
  wire signed [31:0] sel_1_1169;  // int32
  wire signed [31:0] sel_3566;  // int32
  wire signed [31:0] sel_3567;  // int32
  wire signed [31:0] sel_3568;  // int32
  reg signed [31:0] sel_1_1170;  // int32
  wire [7:0] tmp_535;  // uint8
  wire [7:0] sel_1_1171;  // uint8
  wire signed [31:0] sel_3569;  // int32
  wire signed [31:0] sel_3570;  // int32
  wire signed [31:0] sel_3571;  // int32
  wire signed [31:0] sel_3572;  // int32
  wire signed [31:0] sel_3573;  // int32
  wire signed [31:0] sel_3574;  // int32
  wire signed [31:0] sel_3575;  // int32
  wire signed [31:0] sel_3576;  // int32
  wire signed [31:0] sel_3577;  // int32
  wire signed [31:0] sel_3578;  // int32
  wire signed [31:0] sel_3579;  // int32
  wire signed [31:0] sel_3580;  // int32
  wire signed [31:0] sel_3581;  // int32
  wire signed [31:0] sel_3582;  // int32
  wire signed [31:0] s_470;  // int32
  wire signed [31:0] sel_1_1172;  // int32
  wire signed [31:0] sel_3583;  // int32
  wire signed [31:0] sel_1_1173;  // int32
  wire signed [31:0] sel_3584;  // int32
  wire signed [31:0] sel_1_1174;  // int32
  wire signed [31:0] sel_3585;  // int32
  wire signed [31:0] sel_1_1175;  // int32
  wire signed [31:0] sel_3586;  // int32
  wire signed [31:0] sel_1_1176;  // int32
  wire signed [31:0] sel_3587;  // int32
  wire signed [31:0] sel_1_1177;  // int32
  wire signed [31:0] sel_3588;  // int32
  wire signed [31:0] sel_3589;  // int32
  wire signed [31:0] sel_3590;  // int32
  reg signed [31:0] sel_1_1178;  // int32
  wire [7:0] tmp_536;  // uint8
  wire [7:0] sel_1_1179;  // uint8
  wire signed [31:0] sel_3591;  // int32
  wire signed [31:0] sel_3592;  // int32
  wire signed [31:0] sel_3593;  // int32
  wire signed [31:0] sel_3594;  // int32
  wire signed [31:0] sel_3595;  // int32
  wire signed [31:0] sel_3596;  // int32
  wire signed [31:0] sel_3597;  // int32
  wire signed [31:0] sel_3598;  // int32
  wire signed [31:0] sel_3599;  // int32
  wire signed [31:0] sel_3600;  // int32
  wire signed [31:0] sel_3601;  // int32
  wire signed [31:0] sel_3602;  // int32
  wire signed [31:0] sel_3603;  // int32
  wire signed [31:0] sel_3604;  // int32
  wire signed [31:0] s_471;  // int32
  wire signed [31:0] sel_1_1180;  // int32
  wire signed [31:0] sel_3605;  // int32
  wire signed [31:0] sel_1_1181;  // int32
  wire signed [31:0] sel_3606;  // int32
  wire signed [31:0] sel_1_1182;  // int32
  wire signed [31:0] sel_3607;  // int32
  wire signed [31:0] sel_1_1183;  // int32
  wire signed [31:0] sel_3608;  // int32
  wire signed [31:0] sel_1_1184;  // int32
  wire signed [31:0] sel_3609;  // int32
  wire signed [31:0] sel_3610;  // int32
  wire signed [31:0] sel_3611;  // int32
  reg signed [31:0] sel_1_1185;  // int32
  wire [7:0] tmp_537;  // uint8
  wire [7:0] sel_1_1186;  // uint8
  reg [7:0] sel_1_1187;  // uint8
  wire signed [31:0] sel_3612;  // int32
  wire signed [31:0] sel_3613;  // int32
  wire signed [31:0] sel_3614;  // int32
  wire signed [31:0] sel_3615;  // int32
  wire signed [31:0] sel_3616;  // int32
  wire signed [31:0] sel_3617;  // int32
  wire signed [31:0] sel_3618;  // int32
  wire signed [31:0] sel_3619;  // int32
  wire signed [31:0] sel_3620;  // int32
  wire signed [31:0] sel_3621;  // int32
  wire signed [31:0] sel_3622;  // int32
  wire signed [31:0] sel_3623;  // int32
  wire signed [31:0] sel_3624;  // int32
  wire signed [31:0] sel_3625;  // int32
  wire signed [31:0] s_472;  // int32
  wire signed [31:0] sel_1_1188;  // int32
  wire signed [31:0] sel_3626;  // int32
  wire signed [31:0] sel_1_1189;  // int32
  wire signed [31:0] sel_3627;  // int32
  wire signed [31:0] sel_1_1190;  // int32
  wire signed [31:0] sel_3628;  // int32
  wire signed [31:0] sel_1_1191;  // int32
  wire signed [31:0] sel_3629;  // int32
  wire signed [31:0] sel_3630;  // int32
  wire signed [31:0] sel_3631;  // int32
  reg signed [31:0] sel_1_1192;  // int32
  wire [7:0] tmp_538;  // uint8
  reg  s_473;
  reg [7:0] tmp_539;  // uint8
  wire [7:0] sel_1_1193;  // uint8
  wire signed [31:0] sel_3632;  // int32
  wire signed [31:0] sel_3633;  // int32
  wire signed [31:0] sel_3634;  // int32
  wire signed [31:0] sel_3635;  // int32
  wire signed [31:0] sel_3636;  // int32
  wire signed [31:0] sel_3637;  // int32
  wire signed [31:0] sel_3638;  // int32
  wire signed [31:0] sel_3639;  // int32
  wire signed [31:0] sel_3640;  // int32
  wire signed [31:0] sel_3641;  // int32
  wire signed [31:0] sel_3642;  // int32
  wire signed [31:0] sel_3643;  // int32
  wire signed [31:0] sel_3644;  // int32
  wire signed [31:0] sel_3645;  // int32
  wire signed [31:0] s_474;  // int32
  wire signed [31:0] sel_1_1194;  // int32
  wire signed [31:0] sel_3646;  // int32
  wire signed [31:0] sel_1_1195;  // int32
  wire signed [31:0] sel_3647;  // int32
  wire signed [31:0] sel_1_1196;  // int32
  wire signed [31:0] sel_3648;  // int32
  wire signed [31:0] sel_3649;  // int32
  wire signed [31:0] sel_3650;  // int32
  reg signed [31:0] sel_1_1197;  // int32
  wire [7:0] tmp_540;  // uint8
  reg  s_475;
  reg [7:0] tmp_541;  // uint8
  wire [7:0] sel_1_1198;  // uint8
  wire signed [31:0] sel_3651;  // int32
  wire signed [31:0] sel_3652;  // int32
  wire signed [31:0] sel_3653;  // int32
  wire signed [31:0] sel_3654;  // int32
  wire signed [31:0] sel_3655;  // int32
  wire signed [31:0] sel_3656;  // int32
  wire signed [31:0] sel_3657;  // int32
  wire signed [31:0] sel_3658;  // int32
  wire signed [31:0] sel_3659;  // int32
  wire signed [31:0] sel_3660;  // int32
  wire signed [31:0] sel_3661;  // int32
  wire signed [31:0] sel_3662;  // int32
  wire signed [31:0] sel_3663;  // int32
  wire signed [31:0] sel_3664;  // int32
  wire signed [31:0] s_476;  // int32
  wire signed [31:0] sel_1_1199;  // int32
  wire signed [31:0] sel_3665;  // int32
  wire signed [31:0] sel_1_1200;  // int32
  wire signed [31:0] sel_3666;  // int32
  wire signed [31:0] sel_3667;  // int32
  wire signed [31:0] sel_3668;  // int32
  reg signed [31:0] sel_1_1201;  // int32
  wire [7:0] tmp_542;  // uint8
  reg  s_477;
  reg [7:0] tmp_543;  // uint8
  wire [7:0] sel_1_1202;  // uint8
  wire signed [31:0] sel_3669;  // int32
  wire signed [31:0] sel_3670;  // int32
  wire signed [31:0] sel_3671;  // int32
  wire signed [31:0] sel_3672;  // int32
  wire signed [31:0] sel_3673;  // int32
  wire signed [31:0] sel_3674;  // int32
  wire signed [31:0] sel_3675;  // int32
  wire signed [31:0] sel_3676;  // int32
  wire signed [31:0] sel_3677;  // int32
  wire signed [31:0] sel_3678;  // int32
  wire signed [31:0] sel_3679;  // int32
  wire signed [31:0] sel_3680;  // int32
  wire signed [31:0] sel_3681;  // int32
  wire signed [31:0] sel_3682;  // int32
  wire signed [31:0] s_478;  // int32
  wire signed [31:0] sel_1_1203;  // int32
  wire signed [31:0] sel_3683;  // int32
  wire signed [31:0] sel_3684;  // int32
  wire signed [31:0] sel_3685;  // int32
  reg signed [31:0] sel_1_1204;  // int32
  wire [7:0] tmp_544;  // uint8
  reg [4:0] is_SPI_MNGR_76;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_3686;  // int32
  wire signed [31:0] sel_3687;  // int32
  wire signed [31:0] sel_3688;  // int32
  wire signed [31:0] sel_3689;  // int32
  wire signed [31:0] sel_3690;  // int32
  wire signed [31:0] sel_3691;  // int32
  wire signed [31:0] sel_3692;  // int32
  wire signed [31:0] sel_3693;  // int32
  wire signed [31:0] sel_3694;  // int32
  wire signed [31:0] sel_3695;  // int32
  wire signed [31:0] sel_3696;  // int32
  wire signed [31:0] sel_3697;  // int32
  wire signed [31:0] sel_3698;  // int32
  reg  s_479;
  wire signed [31:0] sel_3699;  // int32
  wire signed [31:0] sel_3700;  // int32
  wire signed [31:0] sel_3701;  // int32
  wire signed [31:0] s_480;  // int32
  wire signed [31:0] sel_1_1205;  // int32
  wire signed [31:0] sel_3702;  // int32
  wire signed [31:0] sel_1_1206;  // int32
  wire signed [31:0] sel_3703;  // int32
  wire signed [31:0] sel_1_1207;  // int32
  wire signed [31:0] sel_3704;  // int32
  wire signed [31:0] sel_1_1208;  // int32
  wire signed [31:0] sel_3705;  // int32
  wire signed [31:0] sel_1_1209;  // int32
  wire signed [31:0] sel_3706;  // int32
  wire signed [31:0] sel_1_1210;  // int32
  wire signed [31:0] sel_3707;  // int32
  wire signed [31:0] sel_1_1211;  // int32
  wire signed [31:0] sel_3708;  // int32
  wire signed [31:0] sel_1_1212;  // int32
  wire signed [31:0] sel_1_1213;  // int32
  wire signed [31:0] sel_1_1214;  // int32
  reg signed [31:0] sel_1_1215;  // int32
  wire signed [31:0] sel_3709;  // int32
  wire signed [31:0] sel_3710;  // int32
  wire signed [31:0] sel_1_1216;  // int32
  wire signed [31:0] sel_3711;  // int32
  reg  tmp_545;
  reg [7:0] rd_470_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_470_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_36 [0:11];  // uint8 [12]
  wire signed [31:0] sel_3712;  // int32
  reg signed [31:0] sel_1_1217;  // int32
  wire [7:0] tmp_546;  // uint8
  wire signed [31:0] sel_3713;  // int32
  wire signed [31:0] sel_3714;  // int32
  wire signed [31:0] sel_3715;  // int32
  wire signed [31:0] sel_3716;  // int32
  wire signed [31:0] sel_3717;  // int32
  wire signed [31:0] sel_3718;  // int32
  wire signed [31:0] sel_3719;  // int32
  wire signed [31:0] sel_3720;  // int32
  wire signed [31:0] sel_3721;  // int32
  wire signed [31:0] sel_3722;  // int32
  wire signed [31:0] sel_3723;  // int32
  wire signed [31:0] sel_3724;  // int32
  wire signed [31:0] sel_3725;  // int32
  wire signed [31:0] sel_3726;  // int32
  wire signed [31:0] sel_3727;  // int32
  wire signed [31:0] sel_3728;  // int32
  wire signed [31:0] sel_3729;  // int32
  wire signed [31:0] s_481;  // int32
  wire signed [31:0] sel_1_1218;  // int32
  wire signed [31:0] sel_3730;  // int32
  wire signed [31:0] sel_1_1219;  // int32
  wire signed [31:0] sel_3731;  // int32
  wire signed [31:0] sel_1_1220;  // int32
  wire signed [31:0] sel_3732;  // int32
  wire signed [31:0] sel_1_1221;  // int32
  wire signed [31:0] sel_3733;  // int32
  wire signed [31:0] sel_1_1222;  // int32
  wire signed [31:0] sel_3734;  // int32
  wire signed [31:0] sel_1_1223;  // int32
  wire signed [31:0] sel_3735;  // int32
  wire signed [31:0] sel_1_1224;  // int32
  wire signed [31:0] sel_1_1225;  // int32
  wire signed [31:0] sel_1_1226;  // int32
  wire signed [31:0] sel_3736;  // int32
  wire signed [31:0] sel_1_1227;  // int32
  wire signed [31:0] sel_3737;  // int32
  wire signed [31:0] sel_3738;  // int32
  reg signed [31:0] sel_1_1228;  // int32
  wire [7:0] tmp_547;  // uint8
  reg  tmp_548;
  reg [7:0] tmp_549;  // uint8
  wire [7:0] sel_1_1229;  // uint8
  wire signed [31:0] sel_3739;  // int32
  wire signed [31:0] sel_3740;  // int32
  wire signed [31:0] sel_3741;  // int32
  wire signed [31:0] sel_3742;  // int32
  wire signed [31:0] sel_3743;  // int32
  wire signed [31:0] sel_3744;  // int32
  wire signed [31:0] sel_3745;  // int32
  wire signed [31:0] sel_3746;  // int32
  wire signed [31:0] sel_3747;  // int32
  wire signed [31:0] sel_3748;  // int32
  wire signed [31:0] sel_3749;  // int32
  wire signed [31:0] sel_3750;  // int32
  wire signed [31:0] sel_3751;  // int32
  wire signed [31:0] sel_3752;  // int32
  wire signed [31:0] sel_3753;  // int32
  wire signed [31:0] sel_3754;  // int32
  wire signed [31:0] sel_3755;  // int32
  wire signed [31:0] s_482;  // int32
  wire signed [31:0] sel_1_1230;  // int32
  wire signed [31:0] sel_3756;  // int32
  wire signed [31:0] sel_1_1231;  // int32
  wire signed [31:0] sel_3757;  // int32
  wire signed [31:0] sel_1_1232;  // int32
  wire signed [31:0] sel_3758;  // int32
  wire signed [31:0] sel_1_1233;  // int32
  wire signed [31:0] sel_3759;  // int32
  wire signed [31:0] sel_1_1234;  // int32
  wire signed [31:0] sel_3760;  // int32
  wire signed [31:0] sel_1_1235;  // int32
  wire signed [31:0] sel_1_1236;  // int32
  wire signed [31:0] sel_1_1237;  // int32
  wire signed [31:0] sel_3761;  // int32
  wire signed [31:0] sel_1_1238;  // int32
  wire signed [31:0] sel_3762;  // int32
  wire signed [31:0] sel_3763;  // int32
  reg signed [31:0] sel_1_1239;  // int32
  wire [7:0] tmp_550;  // uint8
  reg  tmp_551;
  reg [7:0] tmp_552;  // uint8
  wire [7:0] sel_1_1240;  // uint8
  wire signed [31:0] sel_3764;  // int32
  wire signed [31:0] sel_3765;  // int32
  wire signed [31:0] sel_3766;  // int32
  wire signed [31:0] sel_3767;  // int32
  wire signed [31:0] sel_3768;  // int32
  wire signed [31:0] sel_3769;  // int32
  wire signed [31:0] sel_3770;  // int32
  wire signed [31:0] sel_3771;  // int32
  wire signed [31:0] sel_3772;  // int32
  wire signed [31:0] sel_3773;  // int32
  wire signed [31:0] sel_3774;  // int32
  wire signed [31:0] sel_3775;  // int32
  wire signed [31:0] sel_3776;  // int32
  wire signed [31:0] sel_3777;  // int32
  wire signed [31:0] sel_3778;  // int32
  wire signed [31:0] sel_3779;  // int32
  wire signed [31:0] sel_3780;  // int32
  wire signed [31:0] s_483;  // int32
  wire signed [31:0] sel_1_1241;  // int32
  wire signed [31:0] sel_3781;  // int32
  wire signed [31:0] sel_1_1242;  // int32
  wire signed [31:0] sel_3782;  // int32
  wire signed [31:0] sel_1_1243;  // int32
  wire signed [31:0] sel_3783;  // int32
  wire signed [31:0] sel_1_1244;  // int32
  wire signed [31:0] sel_3784;  // int32
  wire signed [31:0] sel_1_1245;  // int32
  wire signed [31:0] sel_1_1246;  // int32
  wire signed [31:0] sel_1_1247;  // int32
  wire signed [31:0] sel_3785;  // int32
  wire signed [31:0] sel_1_1248;  // int32
  wire signed [31:0] sel_3786;  // int32
  wire signed [31:0] sel_3787;  // int32
  reg signed [31:0] sel_1_1249;  // int32
  wire [7:0] tmp_553;  // uint8
  reg  tmp_554;
  reg [7:0] tmp_555;  // uint8
  wire [7:0] sel_1_1250;  // uint8
  wire signed [31:0] sel_3788;  // int32
  wire signed [31:0] sel_3789;  // int32
  wire signed [31:0] sel_3790;  // int32
  wire signed [31:0] sel_3791;  // int32
  wire signed [31:0] sel_3792;  // int32
  wire signed [31:0] sel_3793;  // int32
  wire signed [31:0] sel_3794;  // int32
  wire signed [31:0] sel_3795;  // int32
  wire signed [31:0] sel_3796;  // int32
  wire signed [31:0] sel_3797;  // int32
  wire signed [31:0] sel_3798;  // int32
  wire signed [31:0] sel_3799;  // int32
  wire signed [31:0] sel_3800;  // int32
  wire signed [31:0] sel_3801;  // int32
  wire signed [31:0] sel_3802;  // int32
  wire signed [31:0] sel_3803;  // int32
  wire signed [31:0] sel_3804;  // int32
  wire signed [31:0] s_484;  // int32
  wire signed [31:0] sel_1_1251;  // int32
  wire signed [31:0] sel_3805;  // int32
  wire signed [31:0] sel_1_1252;  // int32
  wire signed [31:0] sel_3806;  // int32
  wire signed [31:0] sel_1_1253;  // int32
  wire signed [31:0] sel_3807;  // int32
  wire signed [31:0] sel_1_1254;  // int32
  wire signed [31:0] sel_1_1255;  // int32
  wire signed [31:0] sel_1_1256;  // int32
  wire signed [31:0] sel_3808;  // int32
  wire signed [31:0] sel_1_1257;  // int32
  wire signed [31:0] sel_3809;  // int32
  wire signed [31:0] sel_3810;  // int32
  reg signed [31:0] sel_1_1258;  // int32
  wire [7:0] tmp_556;  // uint8
  reg  tmp_557;
  reg [7:0] tmp_558;  // uint8
  wire [7:0] sel_1_1259;  // uint8
  wire signed [31:0] sel_3811;  // int32
  wire signed [31:0] sel_3812;  // int32
  wire signed [31:0] sel_3813;  // int32
  wire signed [31:0] sel_3814;  // int32
  wire signed [31:0] sel_3815;  // int32
  wire signed [31:0] sel_3816;  // int32
  wire signed [31:0] sel_3817;  // int32
  wire signed [31:0] sel_3818;  // int32
  wire signed [31:0] sel_3819;  // int32
  wire signed [31:0] sel_3820;  // int32
  wire signed [31:0] sel_3821;  // int32
  wire signed [31:0] sel_3822;  // int32
  wire signed [31:0] sel_3823;  // int32
  wire signed [31:0] sel_3824;  // int32
  wire signed [31:0] sel_3825;  // int32
  wire signed [31:0] sel_3826;  // int32
  wire signed [31:0] sel_3827;  // int32
  wire signed [31:0] s_485;  // int32
  wire signed [31:0] sel_1_1260;  // int32
  wire signed [31:0] sel_3828;  // int32
  wire signed [31:0] sel_1_1261;  // int32
  wire signed [31:0] sel_3829;  // int32
  wire signed [31:0] sel_1_1262;  // int32
  wire signed [31:0] sel_1_1263;  // int32
  wire signed [31:0] sel_1_1264;  // int32
  wire signed [31:0] sel_3830;  // int32
  wire signed [31:0] sel_1_1265;  // int32
  wire signed [31:0] sel_3831;  // int32
  wire signed [31:0] sel_3832;  // int32
  reg signed [31:0] sel_1_1266;  // int32
  wire [7:0] tmp_559;  // uint8
  reg  tmp_560;
  reg [7:0] tmp_561;  // uint8
  wire [7:0] sel_1_1267;  // uint8
  wire signed [31:0] sel_3833;  // int32
  wire signed [31:0] sel_3834;  // int32
  wire signed [31:0] sel_3835;  // int32
  wire signed [31:0] sel_3836;  // int32
  wire signed [31:0] sel_3837;  // int32
  wire signed [31:0] sel_3838;  // int32
  wire signed [31:0] sel_3839;  // int32
  wire signed [31:0] sel_3840;  // int32
  wire signed [31:0] sel_3841;  // int32
  wire signed [31:0] sel_3842;  // int32
  wire signed [31:0] sel_3843;  // int32
  wire signed [31:0] sel_3844;  // int32
  wire signed [31:0] sel_3845;  // int32
  wire signed [31:0] sel_3846;  // int32
  wire signed [31:0] sel_3847;  // int32
  wire signed [31:0] sel_3848;  // int32
  wire signed [31:0] sel_3849;  // int32
  wire signed [31:0] s_486;  // int32
  wire signed [31:0] sel_1_1268;  // int32
  wire signed [31:0] sel_3850;  // int32
  wire signed [31:0] sel_1_1269;  // int32
  wire signed [31:0] sel_1_1270;  // int32
  wire signed [31:0] sel_1_1271;  // int32
  wire signed [31:0] sel_3851;  // int32
  wire signed [31:0] sel_1_1272;  // int32
  wire signed [31:0] sel_3852;  // int32
  wire signed [31:0] sel_3853;  // int32
  reg signed [31:0] sel_1_1273;  // int32
  wire [7:0] tmp_562;  // uint8
  reg  tmp_563;
  reg [7:0] tmp_564;  // uint8
  wire [7:0] sel_1_1274;  // uint8
  wire signed [31:0] sel_3854;  // int32
  wire signed [31:0] sel_3855;  // int32
  wire signed [31:0] sel_3856;  // int32
  wire signed [31:0] sel_3857;  // int32
  wire signed [31:0] sel_3858;  // int32
  wire signed [31:0] sel_3859;  // int32
  wire signed [31:0] sel_3860;  // int32
  wire signed [31:0] sel_3861;  // int32
  wire signed [31:0] sel_3862;  // int32
  wire signed [31:0] sel_3863;  // int32
  wire signed [31:0] sel_3864;  // int32
  wire signed [31:0] sel_3865;  // int32
  wire signed [31:0] sel_3866;  // int32
  wire signed [31:0] sel_3867;  // int32
  wire signed [31:0] sel_3868;  // int32
  wire signed [31:0] sel_3869;  // int32
  wire signed [31:0] sel_3870;  // int32
  wire signed [31:0] s_487;  // int32
  wire signed [31:0] sel_1_1275;  // int32
  wire signed [31:0] sel_1_1276;  // int32
  wire signed [31:0] sel_1_1277;  // int32
  wire signed [31:0] sel_3871;  // int32
  wire signed [31:0] sel_1_1278;  // int32
  wire signed [31:0] sel_3872;  // int32
  wire signed [31:0] sel_3873;  // int32
  reg signed [31:0] sel_1_1279;  // int32
  wire [7:0] tmp_565;  // uint8
  wire [7:0] sel_3874;  // uint8
  reg [7:0] tmp_566;  // uint8
  wire [7:0] sel_1_1280;  // uint8
  reg [7:0] tmp_567;  // uint8
  wire [7:0] sel_1_1281;  // uint8
  wire [7:0] sel_3875;  // uint8
  reg [4:0] is_SPI_MNGR_77;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_3876;
  wire sel_3877;
  wire sel_3878;
  wire sel_3879;
  wire sel_3880;
  wire sel_3881;
  wire sel_3882;
  wire sel_3883;
  wire sel_3884;
  wire sel_3885;
  wire sel_3886;
  wire sel_3887;
  wire sel_3888;
  wire sel_3889;
  wire s_488;
  wire sel_2_194;
  wire s_489;
  wire sel_2_195;
  wire s_490;
  wire sel_2_196;
  wire s_491;
  wire sel_2_197;
  wire s_492;
  wire sel_2_198;
  wire s_493;
  wire sel_2_199;
  wire s_494;
  wire sel_2_200;
  wire s_495;
  wire sel_2_201;
  reg  s_496;
  wire sel_3890;
  wire sel_3891;
  wire sel_3892;
  wire s_497;
  wire sel_2_202;
  wire s_498;
  wire sel_2_203;
  wire s_499;
  wire sel_2_204;
  wire s_500;
  wire sel_2_205;
  wire s_501;
  wire sel_2_206;
  wire s_502;
  wire sel_2_207;
  wire s_503;
  wire sel_2_208;
  wire s_504;
  wire sel_2_209;
  wire sel_2_210;
  wire sel_2_211;
  reg  sel_2_212;
  reg  sel_2_213;
  wire sel_3893;
  wire sel_2_214;
  wire sel_3894;
  reg [4:0] is_SPI_MNGR_78;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_3895;  // uint8
  wire [7:0] sel_3896;  // uint8
  wire [7:0] sel_3897;  // uint8
  wire [7:0] sel_3898;  // uint8
  wire [7:0] sel_3899;  // uint8
  wire [7:0] sel_3900;  // uint8
  wire [7:0] sel_3901;  // uint8
  wire [7:0] sel_3902;  // uint8
  wire [7:0] sel_3903;  // uint8
  wire [7:0] sel_3904;  // uint8
  wire [7:0] sel_3905;  // uint8
  wire [7:0] sel_3906;  // uint8
  reg  s_505;
  wire signed [31:0] sel_3907;  // int32
  wire signed [31:0] sel_3908;  // int32
  wire signed [31:0] sel_3909;  // int32
  wire signed [31:0] sel_3910;  // int32
  wire signed [31:0] sel_3911;  // int32
  wire signed [31:0] sel_3912;  // int32
  wire signed [31:0] sel_3913;  // int32
  wire signed [31:0] sel_3914;  // int32
  wire signed [31:0] sel_3915;  // int32
  wire signed [31:0] sel_3916;  // int32
  wire signed [31:0] sel_3917;  // int32
  wire signed [31:0] sel_3918;  // int32
  wire signed [31:0] sel_3919;  // int32
  wire signed [31:0] sel_3920;  // int32
  wire signed [31:0] s_506;  // int32
  wire signed [31:0] sel_1_1282;  // int32
  wire signed [31:0] sel_3921;  // int32
  wire signed [31:0] sel_1_1283;  // int32
  wire signed [31:0] sel_3922;  // int32
  wire signed [31:0] sel_1_1284;  // int32
  wire signed [31:0] sel_3923;  // int32
  wire signed [31:0] sel_1_1285;  // int32
  wire signed [31:0] sel_3924;  // int32
  wire signed [31:0] sel_1_1286;  // int32
  wire signed [31:0] sel_3925;  // int32
  wire signed [31:0] sel_1_1287;  // int32
  wire signed [31:0] sel_3926;  // int32
  wire signed [31:0] sel_1_1288;  // int32
  wire signed [31:0] sel_3927;  // int32
  wire signed [31:0] sel_1_1289;  // int32
  wire signed [31:0] sel_3928;  // int32
  wire signed [31:0] sel_3929;  // int32
  wire signed [31:0] sel_3930;  // int32
  reg signed [31:0] sel_1_1290;  // int32
  wire [7:0] tmp_568;  // uint8
  wire signed [31:0] sel_3931;  // int32
  wire signed [31:0] sel_3932;  // int32
  wire signed [31:0] sel_3933;  // int32
  wire signed [31:0] sel_3934;  // int32
  wire signed [31:0] sel_3935;  // int32
  wire signed [31:0] sel_3936;  // int32
  wire signed [31:0] sel_3937;  // int32
  wire signed [31:0] sel_3938;  // int32
  wire signed [31:0] sel_3939;  // int32
  wire signed [31:0] sel_3940;  // int32
  wire signed [31:0] sel_3941;  // int32
  wire signed [31:0] sel_3942;  // int32
  wire signed [31:0] sel_3943;  // int32
  wire signed [31:0] sel_3944;  // int32
  wire signed [31:0] s_507;  // int32
  wire signed [31:0] sel_1_1291;  // int32
  wire signed [31:0] sel_3945;  // int32
  wire signed [31:0] sel_1_1292;  // int32
  wire signed [31:0] sel_3946;  // int32
  wire signed [31:0] sel_1_1293;  // int32
  wire signed [31:0] sel_3947;  // int32
  wire signed [31:0] sel_1_1294;  // int32
  wire signed [31:0] sel_3948;  // int32
  wire signed [31:0] sel_1_1295;  // int32
  wire signed [31:0] sel_3949;  // int32
  wire signed [31:0] sel_1_1296;  // int32
  wire signed [31:0] sel_3950;  // int32
  wire signed [31:0] sel_1_1297;  // int32
  wire signed [31:0] sel_3951;  // int32
  wire signed [31:0] sel_3952;  // int32
  wire signed [31:0] sel_3953;  // int32
  reg signed [31:0] sel_1_1298;  // int32
  wire [7:0] tmp_569;  // uint8
  wire [7:0] sel_1_1299;  // uint8
  wire signed [31:0] sel_3954;  // int32
  wire signed [31:0] sel_3955;  // int32
  wire signed [31:0] sel_3956;  // int32
  wire signed [31:0] sel_3957;  // int32
  wire signed [31:0] sel_3958;  // int32
  wire signed [31:0] sel_3959;  // int32
  wire signed [31:0] sel_3960;  // int32
  wire signed [31:0] sel_3961;  // int32
  wire signed [31:0] sel_3962;  // int32
  wire signed [31:0] sel_3963;  // int32
  wire signed [31:0] sel_3964;  // int32
  wire signed [31:0] sel_3965;  // int32
  wire signed [31:0] sel_3966;  // int32
  wire signed [31:0] sel_3967;  // int32
  wire signed [31:0] s_508;  // int32
  wire signed [31:0] sel_1_1300;  // int32
  wire signed [31:0] sel_3968;  // int32
  wire signed [31:0] sel_1_1301;  // int32
  wire signed [31:0] sel_3969;  // int32
  wire signed [31:0] sel_1_1302;  // int32
  wire signed [31:0] sel_3970;  // int32
  wire signed [31:0] sel_1_1303;  // int32
  wire signed [31:0] sel_3971;  // int32
  wire signed [31:0] sel_1_1304;  // int32
  wire signed [31:0] sel_3972;  // int32
  wire signed [31:0] sel_1_1305;  // int32
  wire signed [31:0] sel_3973;  // int32
  wire signed [31:0] sel_3974;  // int32
  wire signed [31:0] sel_3975;  // int32
  reg signed [31:0] sel_1_1306;  // int32
  wire [7:0] tmp_570;  // uint8
  wire [7:0] sel_1_1307;  // uint8
  wire signed [31:0] sel_3976;  // int32
  wire signed [31:0] sel_3977;  // int32
  wire signed [31:0] sel_3978;  // int32
  wire signed [31:0] sel_3979;  // int32
  wire signed [31:0] sel_3980;  // int32
  wire signed [31:0] sel_3981;  // int32
  wire signed [31:0] sel_3982;  // int32
  wire signed [31:0] sel_3983;  // int32
  wire signed [31:0] sel_3984;  // int32
  wire signed [31:0] sel_3985;  // int32
  wire signed [31:0] sel_3986;  // int32
  wire signed [31:0] sel_3987;  // int32
  wire signed [31:0] sel_3988;  // int32
  wire signed [31:0] sel_3989;  // int32
  wire signed [31:0] s_509;  // int32
  wire signed [31:0] sel_1_1308;  // int32
  wire signed [31:0] sel_3990;  // int32
  wire signed [31:0] sel_1_1309;  // int32
  wire signed [31:0] sel_3991;  // int32
  wire signed [31:0] sel_1_1310;  // int32
  wire signed [31:0] sel_3992;  // int32
  wire signed [31:0] sel_1_1311;  // int32
  wire signed [31:0] sel_3993;  // int32
  wire signed [31:0] sel_1_1312;  // int32
  wire signed [31:0] sel_3994;  // int32
  wire signed [31:0] sel_3995;  // int32
  wire signed [31:0] sel_3996;  // int32
  reg signed [31:0] sel_1_1313;  // int32
  wire [7:0] tmp_571;  // uint8
  wire [7:0] sel_1_1314;  // uint8
  reg [7:0] sel_1_1315;  // uint8
  wire signed [31:0] sel_3997;  // int32
  wire signed [31:0] sel_3998;  // int32
  wire signed [31:0] sel_3999;  // int32
  wire signed [31:0] sel_4000;  // int32
  wire signed [31:0] sel_4001;  // int32
  wire signed [31:0] sel_4002;  // int32
  wire signed [31:0] sel_4003;  // int32
  wire signed [31:0] sel_4004;  // int32
  wire signed [31:0] sel_4005;  // int32
  wire signed [31:0] sel_4006;  // int32
  wire signed [31:0] sel_4007;  // int32
  wire signed [31:0] sel_4008;  // int32
  wire signed [31:0] sel_4009;  // int32
  wire signed [31:0] sel_4010;  // int32
  wire signed [31:0] s_510;  // int32
  wire signed [31:0] sel_1_1316;  // int32
  wire signed [31:0] sel_4011;  // int32
  wire signed [31:0] sel_1_1317;  // int32
  wire signed [31:0] sel_4012;  // int32
  wire signed [31:0] sel_1_1318;  // int32
  wire signed [31:0] sel_4013;  // int32
  wire signed [31:0] sel_1_1319;  // int32
  wire signed [31:0] sel_4014;  // int32
  wire signed [31:0] sel_4015;  // int32
  wire signed [31:0] sel_4016;  // int32
  reg signed [31:0] sel_1_1320;  // int32
  wire [7:0] tmp_572;  // uint8
  reg  s_511;
  reg [7:0] tmp_573;  // uint8
  wire [7:0] sel_1_1321;  // uint8
  wire signed [31:0] sel_4017;  // int32
  wire signed [31:0] sel_4018;  // int32
  wire signed [31:0] sel_4019;  // int32
  wire signed [31:0] sel_4020;  // int32
  wire signed [31:0] sel_4021;  // int32
  wire signed [31:0] sel_4022;  // int32
  wire signed [31:0] sel_4023;  // int32
  wire signed [31:0] sel_4024;  // int32
  wire signed [31:0] sel_4025;  // int32
  wire signed [31:0] sel_4026;  // int32
  wire signed [31:0] sel_4027;  // int32
  wire signed [31:0] sel_4028;  // int32
  wire signed [31:0] sel_4029;  // int32
  wire signed [31:0] sel_4030;  // int32
  wire signed [31:0] s_512;  // int32
  wire signed [31:0] sel_1_1322;  // int32
  wire signed [31:0] sel_4031;  // int32
  wire signed [31:0] sel_1_1323;  // int32
  wire signed [31:0] sel_4032;  // int32
  wire signed [31:0] sel_1_1324;  // int32
  wire signed [31:0] sel_4033;  // int32
  wire signed [31:0] sel_4034;  // int32
  wire signed [31:0] sel_4035;  // int32
  reg signed [31:0] sel_1_1325;  // int32
  wire [7:0] tmp_574;  // uint8
  reg  s_513;
  reg [7:0] tmp_575;  // uint8
  wire [7:0] sel_1_1326;  // uint8
  wire signed [31:0] sel_4036;  // int32
  wire signed [31:0] sel_4037;  // int32
  wire signed [31:0] sel_4038;  // int32
  wire signed [31:0] sel_4039;  // int32
  wire signed [31:0] sel_4040;  // int32
  wire signed [31:0] sel_4041;  // int32
  wire signed [31:0] sel_4042;  // int32
  wire signed [31:0] sel_4043;  // int32
  wire signed [31:0] sel_4044;  // int32
  wire signed [31:0] sel_4045;  // int32
  wire signed [31:0] sel_4046;  // int32
  wire signed [31:0] sel_4047;  // int32
  wire signed [31:0] sel_4048;  // int32
  wire signed [31:0] sel_4049;  // int32
  wire signed [31:0] s_514;  // int32
  wire signed [31:0] sel_1_1327;  // int32
  wire signed [31:0] sel_4050;  // int32
  wire signed [31:0] sel_1_1328;  // int32
  wire signed [31:0] sel_4051;  // int32
  wire signed [31:0] sel_4052;  // int32
  wire signed [31:0] sel_4053;  // int32
  reg signed [31:0] sel_1_1329;  // int32
  wire [7:0] tmp_576;  // uint8
  reg  s_515;
  reg [7:0] tmp_577;  // uint8
  wire [7:0] sel_1_1330;  // uint8
  wire signed [31:0] sel_4054;  // int32
  wire signed [31:0] sel_4055;  // int32
  wire signed [31:0] sel_4056;  // int32
  wire signed [31:0] sel_4057;  // int32
  wire signed [31:0] sel_4058;  // int32
  wire signed [31:0] sel_4059;  // int32
  wire signed [31:0] sel_4060;  // int32
  wire signed [31:0] sel_4061;  // int32
  wire signed [31:0] sel_4062;  // int32
  wire signed [31:0] sel_4063;  // int32
  wire signed [31:0] sel_4064;  // int32
  wire signed [31:0] sel_4065;  // int32
  wire signed [31:0] sel_4066;  // int32
  wire signed [31:0] sel_4067;  // int32
  wire signed [31:0] s_516;  // int32
  wire signed [31:0] sel_1_1331;  // int32
  wire signed [31:0] sel_4068;  // int32
  wire signed [31:0] sel_4069;  // int32
  wire signed [31:0] sel_4070;  // int32
  reg signed [31:0] sel_1_1332;  // int32
  wire [7:0] tmp_578;  // uint8
  reg [4:0] is_SPI_MNGR_79;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_4071;  // int32
  wire signed [31:0] sel_4072;  // int32
  wire signed [31:0] sel_4073;  // int32
  wire signed [31:0] sel_4074;  // int32
  wire signed [31:0] sel_4075;  // int32
  wire signed [31:0] sel_4076;  // int32
  wire signed [31:0] sel_4077;  // int32
  wire signed [31:0] sel_4078;  // int32
  wire signed [31:0] sel_4079;  // int32
  wire signed [31:0] sel_4080;  // int32
  wire signed [31:0] sel_4081;  // int32
  wire signed [31:0] sel_4082;  // int32
  wire signed [31:0] sel_4083;  // int32
  reg  s_517;
  wire signed [31:0] sel_4084;  // int32
  wire signed [31:0] sel_4085;  // int32
  wire signed [31:0] sel_4086;  // int32
  wire signed [31:0] s_518;  // int32
  wire signed [31:0] sel_1_1333;  // int32
  wire signed [31:0] sel_4087;  // int32
  wire signed [31:0] sel_1_1334;  // int32
  wire signed [31:0] sel_4088;  // int32
  wire signed [31:0] sel_1_1335;  // int32
  wire signed [31:0] sel_4089;  // int32
  wire signed [31:0] sel_1_1336;  // int32
  wire signed [31:0] sel_4090;  // int32
  wire signed [31:0] sel_1_1337;  // int32
  wire signed [31:0] sel_4091;  // int32
  wire signed [31:0] sel_1_1338;  // int32
  wire signed [31:0] sel_4092;  // int32
  wire signed [31:0] sel_1_1339;  // int32
  wire signed [31:0] sel_4093;  // int32
  wire signed [31:0] sel_1_1340;  // int32
  wire signed [31:0] sel_1_1341;  // int32
  wire signed [31:0] sel_1_1342;  // int32
  reg signed [31:0] sel_1_1343;  // int32
  wire signed [31:0] sel_4094;  // int32
  wire signed [31:0] sel_4095;  // int32
  wire signed [31:0] sel_1_1344;  // int32
  wire signed [31:0] sel_4096;  // int32
  reg  tmp_579;
  reg [7:0] rd_502_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_502_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_37 [0:11];  // uint8 [12]
  wire signed [31:0] sel_4097;  // int32
  reg signed [31:0] sel_1_1345;  // int32
  wire [7:0] tmp_580;  // uint8
  wire signed [31:0] sel_4098;  // int32
  wire signed [31:0] sel_4099;  // int32
  wire signed [31:0] sel_4100;  // int32
  wire signed [31:0] sel_4101;  // int32
  wire signed [31:0] sel_4102;  // int32
  wire signed [31:0] sel_4103;  // int32
  wire signed [31:0] sel_4104;  // int32
  wire signed [31:0] sel_4105;  // int32
  wire signed [31:0] sel_4106;  // int32
  wire signed [31:0] sel_4107;  // int32
  wire signed [31:0] sel_4108;  // int32
  wire signed [31:0] sel_4109;  // int32
  wire signed [31:0] sel_4110;  // int32
  wire signed [31:0] sel_4111;  // int32
  wire signed [31:0] sel_4112;  // int32
  wire signed [31:0] sel_4113;  // int32
  wire signed [31:0] sel_4114;  // int32
  wire signed [31:0] s_519;  // int32
  wire signed [31:0] sel_1_1346;  // int32
  wire signed [31:0] sel_4115;  // int32
  wire signed [31:0] sel_1_1347;  // int32
  wire signed [31:0] sel_4116;  // int32
  wire signed [31:0] sel_1_1348;  // int32
  wire signed [31:0] sel_4117;  // int32
  wire signed [31:0] sel_1_1349;  // int32
  wire signed [31:0] sel_4118;  // int32
  wire signed [31:0] sel_1_1350;  // int32
  wire signed [31:0] sel_4119;  // int32
  wire signed [31:0] sel_1_1351;  // int32
  wire signed [31:0] sel_4120;  // int32
  wire signed [31:0] sel_1_1352;  // int32
  wire signed [31:0] sel_1_1353;  // int32
  wire signed [31:0] sel_1_1354;  // int32
  wire signed [31:0] sel_4121;  // int32
  wire signed [31:0] sel_1_1355;  // int32
  wire signed [31:0] sel_4122;  // int32
  wire signed [31:0] sel_4123;  // int32
  reg signed [31:0] sel_1_1356;  // int32
  wire [7:0] tmp_581;  // uint8
  reg  tmp_582;
  reg [7:0] tmp_583;  // uint8
  wire [7:0] sel_1_1357;  // uint8
  wire signed [31:0] sel_4124;  // int32
  wire signed [31:0] sel_4125;  // int32
  wire signed [31:0] sel_4126;  // int32
  wire signed [31:0] sel_4127;  // int32
  wire signed [31:0] sel_4128;  // int32
  wire signed [31:0] sel_4129;  // int32
  wire signed [31:0] sel_4130;  // int32
  wire signed [31:0] sel_4131;  // int32
  wire signed [31:0] sel_4132;  // int32
  wire signed [31:0] sel_4133;  // int32
  wire signed [31:0] sel_4134;  // int32
  wire signed [31:0] sel_4135;  // int32
  wire signed [31:0] sel_4136;  // int32
  wire signed [31:0] sel_4137;  // int32
  wire signed [31:0] sel_4138;  // int32
  wire signed [31:0] sel_4139;  // int32
  wire signed [31:0] sel_4140;  // int32
  wire signed [31:0] s_520;  // int32
  wire signed [31:0] sel_1_1358;  // int32
  wire signed [31:0] sel_4141;  // int32
  wire signed [31:0] sel_1_1359;  // int32
  wire signed [31:0] sel_4142;  // int32
  wire signed [31:0] sel_1_1360;  // int32
  wire signed [31:0] sel_4143;  // int32
  wire signed [31:0] sel_1_1361;  // int32
  wire signed [31:0] sel_4144;  // int32
  wire signed [31:0] sel_1_1362;  // int32
  wire signed [31:0] sel_4145;  // int32
  wire signed [31:0] sel_1_1363;  // int32
  wire signed [31:0] sel_1_1364;  // int32
  wire signed [31:0] sel_1_1365;  // int32
  wire signed [31:0] sel_4146;  // int32
  wire signed [31:0] sel_1_1366;  // int32
  wire signed [31:0] sel_4147;  // int32
  wire signed [31:0] sel_4148;  // int32
  reg signed [31:0] sel_1_1367;  // int32
  wire [7:0] tmp_584;  // uint8
  reg  tmp_585;
  reg [7:0] tmp_586;  // uint8
  wire [7:0] sel_1_1368;  // uint8
  wire signed [31:0] sel_4149;  // int32
  wire signed [31:0] sel_4150;  // int32
  wire signed [31:0] sel_4151;  // int32
  wire signed [31:0] sel_4152;  // int32
  wire signed [31:0] sel_4153;  // int32
  wire signed [31:0] sel_4154;  // int32
  wire signed [31:0] sel_4155;  // int32
  wire signed [31:0] sel_4156;  // int32
  wire signed [31:0] sel_4157;  // int32
  wire signed [31:0] sel_4158;  // int32
  wire signed [31:0] sel_4159;  // int32
  wire signed [31:0] sel_4160;  // int32
  wire signed [31:0] sel_4161;  // int32
  wire signed [31:0] sel_4162;  // int32
  wire signed [31:0] sel_4163;  // int32
  wire signed [31:0] sel_4164;  // int32
  wire signed [31:0] sel_4165;  // int32
  wire signed [31:0] s_521;  // int32
  wire signed [31:0] sel_1_1369;  // int32
  wire signed [31:0] sel_4166;  // int32
  wire signed [31:0] sel_1_1370;  // int32
  wire signed [31:0] sel_4167;  // int32
  wire signed [31:0] sel_1_1371;  // int32
  wire signed [31:0] sel_4168;  // int32
  wire signed [31:0] sel_1_1372;  // int32
  wire signed [31:0] sel_4169;  // int32
  wire signed [31:0] sel_1_1373;  // int32
  wire signed [31:0] sel_1_1374;  // int32
  wire signed [31:0] sel_1_1375;  // int32
  wire signed [31:0] sel_4170;  // int32
  wire signed [31:0] sel_1_1376;  // int32
  wire signed [31:0] sel_4171;  // int32
  wire signed [31:0] sel_4172;  // int32
  reg signed [31:0] sel_1_1377;  // int32
  wire [7:0] tmp_587;  // uint8
  reg  tmp_588;
  reg [7:0] tmp_589;  // uint8
  wire [7:0] sel_1_1378;  // uint8
  wire signed [31:0] sel_4173;  // int32
  wire signed [31:0] sel_4174;  // int32
  wire signed [31:0] sel_4175;  // int32
  wire signed [31:0] sel_4176;  // int32
  wire signed [31:0] sel_4177;  // int32
  wire signed [31:0] sel_4178;  // int32
  wire signed [31:0] sel_4179;  // int32
  wire signed [31:0] sel_4180;  // int32
  wire signed [31:0] sel_4181;  // int32
  wire signed [31:0] sel_4182;  // int32
  wire signed [31:0] sel_4183;  // int32
  wire signed [31:0] sel_4184;  // int32
  wire signed [31:0] sel_4185;  // int32
  wire signed [31:0] sel_4186;  // int32
  wire signed [31:0] sel_4187;  // int32
  wire signed [31:0] sel_4188;  // int32
  wire signed [31:0] sel_4189;  // int32
  wire signed [31:0] s_522;  // int32
  wire signed [31:0] sel_1_1379;  // int32
  wire signed [31:0] sel_4190;  // int32
  wire signed [31:0] sel_1_1380;  // int32
  wire signed [31:0] sel_4191;  // int32
  wire signed [31:0] sel_1_1381;  // int32
  wire signed [31:0] sel_4192;  // int32
  wire signed [31:0] sel_1_1382;  // int32
  wire signed [31:0] sel_1_1383;  // int32
  wire signed [31:0] sel_1_1384;  // int32
  wire signed [31:0] sel_4193;  // int32
  wire signed [31:0] sel_1_1385;  // int32
  wire signed [31:0] sel_4194;  // int32
  wire signed [31:0] sel_4195;  // int32
  reg signed [31:0] sel_1_1386;  // int32
  wire [7:0] tmp_590;  // uint8
  reg  tmp_591;
  reg [7:0] tmp_592;  // uint8
  wire [7:0] sel_1_1387;  // uint8
  wire signed [31:0] sel_4196;  // int32
  wire signed [31:0] sel_4197;  // int32
  wire signed [31:0] sel_4198;  // int32
  wire signed [31:0] sel_4199;  // int32
  wire signed [31:0] sel_4200;  // int32
  wire signed [31:0] sel_4201;  // int32
  wire signed [31:0] sel_4202;  // int32
  wire signed [31:0] sel_4203;  // int32
  wire signed [31:0] sel_4204;  // int32
  wire signed [31:0] sel_4205;  // int32
  wire signed [31:0] sel_4206;  // int32
  wire signed [31:0] sel_4207;  // int32
  wire signed [31:0] sel_4208;  // int32
  wire signed [31:0] sel_4209;  // int32
  wire signed [31:0] sel_4210;  // int32
  wire signed [31:0] sel_4211;  // int32
  wire signed [31:0] sel_4212;  // int32
  wire signed [31:0] s_523;  // int32
  wire signed [31:0] sel_1_1388;  // int32
  wire signed [31:0] sel_4213;  // int32
  wire signed [31:0] sel_1_1389;  // int32
  wire signed [31:0] sel_4214;  // int32
  wire signed [31:0] sel_1_1390;  // int32
  wire signed [31:0] sel_1_1391;  // int32
  wire signed [31:0] sel_1_1392;  // int32
  wire signed [31:0] sel_4215;  // int32
  wire signed [31:0] sel_1_1393;  // int32
  wire signed [31:0] sel_4216;  // int32
  wire signed [31:0] sel_4217;  // int32
  reg signed [31:0] sel_1_1394;  // int32
  wire [7:0] tmp_593;  // uint8
  reg  tmp_594;
  reg [7:0] tmp_595;  // uint8
  wire [7:0] sel_1_1395;  // uint8
  wire signed [31:0] sel_4218;  // int32
  wire signed [31:0] sel_4219;  // int32
  wire signed [31:0] sel_4220;  // int32
  wire signed [31:0] sel_4221;  // int32
  wire signed [31:0] sel_4222;  // int32
  wire signed [31:0] sel_4223;  // int32
  wire signed [31:0] sel_4224;  // int32
  wire signed [31:0] sel_4225;  // int32
  wire signed [31:0] sel_4226;  // int32
  wire signed [31:0] sel_4227;  // int32
  wire signed [31:0] sel_4228;  // int32
  wire signed [31:0] sel_4229;  // int32
  wire signed [31:0] sel_4230;  // int32
  wire signed [31:0] sel_4231;  // int32
  wire signed [31:0] sel_4232;  // int32
  wire signed [31:0] sel_4233;  // int32
  wire signed [31:0] sel_4234;  // int32
  wire signed [31:0] s_524;  // int32
  wire signed [31:0] sel_1_1396;  // int32
  wire signed [31:0] sel_4235;  // int32
  wire signed [31:0] sel_1_1397;  // int32
  wire signed [31:0] sel_1_1398;  // int32
  wire signed [31:0] sel_1_1399;  // int32
  wire signed [31:0] sel_4236;  // int32
  wire signed [31:0] sel_1_1400;  // int32
  wire signed [31:0] sel_4237;  // int32
  wire signed [31:0] sel_4238;  // int32
  reg signed [31:0] sel_1_1401;  // int32
  wire [7:0] tmp_596;  // uint8
  reg  tmp_597;
  reg [7:0] tmp_598;  // uint8
  wire [7:0] sel_1_1402;  // uint8
  wire signed [31:0] sel_4239;  // int32
  wire signed [31:0] sel_4240;  // int32
  wire signed [31:0] sel_4241;  // int32
  wire signed [31:0] sel_4242;  // int32
  wire signed [31:0] sel_4243;  // int32
  wire signed [31:0] sel_4244;  // int32
  wire signed [31:0] sel_4245;  // int32
  wire signed [31:0] sel_4246;  // int32
  wire signed [31:0] sel_4247;  // int32
  wire signed [31:0] sel_4248;  // int32
  wire signed [31:0] sel_4249;  // int32
  wire signed [31:0] sel_4250;  // int32
  wire signed [31:0] sel_4251;  // int32
  wire signed [31:0] sel_4252;  // int32
  wire signed [31:0] sel_4253;  // int32
  wire signed [31:0] sel_4254;  // int32
  wire signed [31:0] sel_4255;  // int32
  wire signed [31:0] s_525;  // int32
  wire signed [31:0] sel_1_1403;  // int32
  wire signed [31:0] sel_1_1404;  // int32
  wire signed [31:0] sel_1_1405;  // int32
  wire signed [31:0] sel_4256;  // int32
  wire signed [31:0] sel_1_1406;  // int32
  wire signed [31:0] sel_4257;  // int32
  wire signed [31:0] sel_4258;  // int32
  reg signed [31:0] sel_1_1407;  // int32
  wire [7:0] tmp_599;  // uint8
  wire [7:0] sel_4259;  // uint8
  reg [7:0] tmp_600;  // uint8
  wire [7:0] sel_1_1408;  // uint8
  reg [7:0] tmp_601;  // uint8
  wire [7:0] sel_1_1409;  // uint8
  wire [7:0] sel_4260;  // uint8
  reg [4:0] is_SPI_MNGR_80;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_4261;
  wire sel_4262;
  wire sel_4263;
  wire sel_4264;
  wire sel_4265;
  wire sel_4266;
  wire sel_4267;
  wire sel_4268;
  wire sel_4269;
  wire sel_4270;
  wire sel_4271;
  wire sel_4272;
  wire sel_4273;
  wire sel_4274;
  wire s_526;
  wire sel_2_215;
  wire s_527;
  wire sel_2_216;
  wire s_528;
  wire sel_2_217;
  wire s_529;
  wire sel_2_218;
  wire s_530;
  wire sel_2_219;
  wire s_531;
  wire sel_2_220;
  wire s_532;
  wire sel_2_221;
  wire s_533;
  wire sel_2_222;
  reg  s_534;
  wire sel_4275;
  wire sel_4276;
  wire sel_4277;
  wire s_535;
  wire sel_2_223;
  wire s_536;
  wire sel_2_224;
  wire s_537;
  wire sel_2_225;
  wire s_538;
  wire sel_2_226;
  wire s_539;
  wire sel_2_227;
  wire s_540;
  wire sel_2_228;
  wire s_541;
  wire sel_2_229;
  wire s_542;
  wire sel_2_230;
  wire sel_2_231;
  wire sel_2_232;
  reg  sel_2_233;
  reg  sel_2_234;
  wire sel_4278;
  wire sel_2_235;
  wire sel_4279;
  reg [4:0] is_SPI_MNGR_81;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire [7:0] sel_4280;  // uint8
  wire [7:0] sel_4281;  // uint8
  wire [7:0] sel_4282;  // uint8
  wire [7:0] sel_4283;  // uint8
  wire [7:0] sel_4284;  // uint8
  wire [7:0] sel_4285;  // uint8
  wire [7:0] sel_4286;  // uint8
  wire [7:0] sel_4287;  // uint8
  wire [7:0] sel_4288;  // uint8
  wire [7:0] sel_4289;  // uint8
  wire [7:0] sel_4290;  // uint8
  wire [7:0] sel_4291;  // uint8
  reg  s_543;
  wire signed [31:0] sel_4292;  // int32
  wire signed [31:0] sel_4293;  // int32
  wire signed [31:0] sel_4294;  // int32
  wire signed [31:0] sel_4295;  // int32
  wire signed [31:0] sel_4296;  // int32
  wire signed [31:0] sel_4297;  // int32
  wire signed [31:0] sel_4298;  // int32
  wire signed [31:0] sel_4299;  // int32
  wire signed [31:0] sel_4300;  // int32
  wire signed [31:0] sel_4301;  // int32
  wire signed [31:0] sel_4302;  // int32
  wire signed [31:0] sel_4303;  // int32
  wire signed [31:0] sel_4304;  // int32
  wire signed [31:0] sel_4305;  // int32
  wire signed [31:0] s_544;  // int32
  wire signed [31:0] sel_1_1410;  // int32
  wire signed [31:0] sel_4306;  // int32
  wire signed [31:0] sel_1_1411;  // int32
  wire signed [31:0] sel_4307;  // int32
  wire signed [31:0] sel_1_1412;  // int32
  wire signed [31:0] sel_4308;  // int32
  wire signed [31:0] sel_1_1413;  // int32
  wire signed [31:0] sel_4309;  // int32
  wire signed [31:0] sel_1_1414;  // int32
  wire signed [31:0] sel_4310;  // int32
  wire signed [31:0] sel_1_1415;  // int32
  wire signed [31:0] sel_4311;  // int32
  wire signed [31:0] sel_1_1416;  // int32
  wire signed [31:0] sel_4312;  // int32
  wire signed [31:0] sel_1_1417;  // int32
  wire signed [31:0] sel_4313;  // int32
  wire signed [31:0] sel_4314;  // int32
  wire signed [31:0] sel_4315;  // int32
  reg signed [31:0] sel_1_1418;  // int32
  wire [7:0] tmp_602;  // uint8
  wire signed [31:0] sel_4316;  // int32
  wire signed [31:0] sel_4317;  // int32
  wire signed [31:0] sel_4318;  // int32
  wire signed [31:0] sel_4319;  // int32
  wire signed [31:0] sel_4320;  // int32
  wire signed [31:0] sel_4321;  // int32
  wire signed [31:0] sel_4322;  // int32
  wire signed [31:0] sel_4323;  // int32
  wire signed [31:0] sel_4324;  // int32
  wire signed [31:0] sel_4325;  // int32
  wire signed [31:0] sel_4326;  // int32
  wire signed [31:0] sel_4327;  // int32
  wire signed [31:0] sel_4328;  // int32
  wire signed [31:0] sel_4329;  // int32
  wire signed [31:0] s_545;  // int32
  wire signed [31:0] sel_1_1419;  // int32
  wire signed [31:0] sel_4330;  // int32
  wire signed [31:0] sel_1_1420;  // int32
  wire signed [31:0] sel_4331;  // int32
  wire signed [31:0] sel_1_1421;  // int32
  wire signed [31:0] sel_4332;  // int32
  wire signed [31:0] sel_1_1422;  // int32
  wire signed [31:0] sel_4333;  // int32
  wire signed [31:0] sel_1_1423;  // int32
  wire signed [31:0] sel_4334;  // int32
  wire signed [31:0] sel_1_1424;  // int32
  wire signed [31:0] sel_4335;  // int32
  wire signed [31:0] sel_1_1425;  // int32
  wire signed [31:0] sel_4336;  // int32
  wire signed [31:0] sel_4337;  // int32
  wire signed [31:0] sel_4338;  // int32
  reg signed [31:0] sel_1_1426;  // int32
  wire [7:0] tmp_603;  // uint8
  wire [7:0] sel_1_1427;  // uint8
  wire signed [31:0] sel_4339;  // int32
  wire signed [31:0] sel_4340;  // int32
  wire signed [31:0] sel_4341;  // int32
  wire signed [31:0] sel_4342;  // int32
  wire signed [31:0] sel_4343;  // int32
  wire signed [31:0] sel_4344;  // int32
  wire signed [31:0] sel_4345;  // int32
  wire signed [31:0] sel_4346;  // int32
  wire signed [31:0] sel_4347;  // int32
  wire signed [31:0] sel_4348;  // int32
  wire signed [31:0] sel_4349;  // int32
  wire signed [31:0] sel_4350;  // int32
  wire signed [31:0] sel_4351;  // int32
  wire signed [31:0] sel_4352;  // int32
  wire signed [31:0] s_546;  // int32
  wire signed [31:0] sel_1_1428;  // int32
  wire signed [31:0] sel_4353;  // int32
  wire signed [31:0] sel_1_1429;  // int32
  wire signed [31:0] sel_4354;  // int32
  wire signed [31:0] sel_1_1430;  // int32
  wire signed [31:0] sel_4355;  // int32
  wire signed [31:0] sel_1_1431;  // int32
  wire signed [31:0] sel_4356;  // int32
  wire signed [31:0] sel_1_1432;  // int32
  wire signed [31:0] sel_4357;  // int32
  wire signed [31:0] sel_1_1433;  // int32
  wire signed [31:0] sel_4358;  // int32
  wire signed [31:0] sel_4359;  // int32
  wire signed [31:0] sel_4360;  // int32
  reg signed [31:0] sel_1_1434;  // int32
  wire [7:0] tmp_604;  // uint8
  wire [7:0] sel_1_1435;  // uint8
  wire signed [31:0] sel_4361;  // int32
  wire signed [31:0] sel_4362;  // int32
  wire signed [31:0] sel_4363;  // int32
  wire signed [31:0] sel_4364;  // int32
  wire signed [31:0] sel_4365;  // int32
  wire signed [31:0] sel_4366;  // int32
  wire signed [31:0] sel_4367;  // int32
  wire signed [31:0] sel_4368;  // int32
  wire signed [31:0] sel_4369;  // int32
  wire signed [31:0] sel_4370;  // int32
  wire signed [31:0] sel_4371;  // int32
  wire signed [31:0] sel_4372;  // int32
  wire signed [31:0] sel_4373;  // int32
  wire signed [31:0] sel_4374;  // int32
  wire signed [31:0] s_547;  // int32
  wire signed [31:0] sel_1_1436;  // int32
  wire signed [31:0] sel_4375;  // int32
  wire signed [31:0] sel_1_1437;  // int32
  wire signed [31:0] sel_4376;  // int32
  wire signed [31:0] sel_1_1438;  // int32
  wire signed [31:0] sel_4377;  // int32
  wire signed [31:0] sel_1_1439;  // int32
  wire signed [31:0] sel_4378;  // int32
  wire signed [31:0] sel_1_1440;  // int32
  wire signed [31:0] sel_4379;  // int32
  wire signed [31:0] sel_4380;  // int32
  wire signed [31:0] sel_4381;  // int32
  reg signed [31:0] sel_1_1441;  // int32
  wire [7:0] tmp_605;  // uint8
  wire [7:0] sel_1_1442;  // uint8
  reg [7:0] sel_1_1443;  // uint8
  wire signed [31:0] sel_4382;  // int32
  wire signed [31:0] sel_4383;  // int32
  wire signed [31:0] sel_4384;  // int32
  wire signed [31:0] sel_4385;  // int32
  wire signed [31:0] sel_4386;  // int32
  wire signed [31:0] sel_4387;  // int32
  wire signed [31:0] sel_4388;  // int32
  wire signed [31:0] sel_4389;  // int32
  wire signed [31:0] sel_4390;  // int32
  wire signed [31:0] sel_4391;  // int32
  wire signed [31:0] sel_4392;  // int32
  wire signed [31:0] sel_4393;  // int32
  wire signed [31:0] sel_4394;  // int32
  wire signed [31:0] sel_4395;  // int32
  wire signed [31:0] s_548;  // int32
  wire signed [31:0] sel_1_1444;  // int32
  wire signed [31:0] sel_4396;  // int32
  wire signed [31:0] sel_1_1445;  // int32
  wire signed [31:0] sel_4397;  // int32
  wire signed [31:0] sel_1_1446;  // int32
  wire signed [31:0] sel_4398;  // int32
  wire signed [31:0] sel_1_1447;  // int32
  wire signed [31:0] sel_4399;  // int32
  wire signed [31:0] sel_4400;  // int32
  wire signed [31:0] sel_4401;  // int32
  reg signed [31:0] sel_1_1448;  // int32
  wire [7:0] tmp_606;  // uint8
  reg  s_549;
  reg [7:0] tmp_607;  // uint8
  wire [7:0] sel_1_1449;  // uint8
  wire signed [31:0] sel_4402;  // int32
  wire signed [31:0] sel_4403;  // int32
  wire signed [31:0] sel_4404;  // int32
  wire signed [31:0] sel_4405;  // int32
  wire signed [31:0] sel_4406;  // int32
  wire signed [31:0] sel_4407;  // int32
  wire signed [31:0] sel_4408;  // int32
  wire signed [31:0] sel_4409;  // int32
  wire signed [31:0] sel_4410;  // int32
  wire signed [31:0] sel_4411;  // int32
  wire signed [31:0] sel_4412;  // int32
  wire signed [31:0] sel_4413;  // int32
  wire signed [31:0] sel_4414;  // int32
  wire signed [31:0] sel_4415;  // int32
  wire signed [31:0] s_550;  // int32
  wire signed [31:0] sel_1_1450;  // int32
  wire signed [31:0] sel_4416;  // int32
  wire signed [31:0] sel_1_1451;  // int32
  wire signed [31:0] sel_4417;  // int32
  wire signed [31:0] sel_1_1452;  // int32
  wire signed [31:0] sel_4418;  // int32
  wire signed [31:0] sel_4419;  // int32
  wire signed [31:0] sel_4420;  // int32
  reg signed [31:0] sel_1_1453;  // int32
  wire [7:0] tmp_608;  // uint8
  reg  s_551;
  reg [7:0] tmp_609;  // uint8
  wire [7:0] sel_1_1454;  // uint8
  wire signed [31:0] sel_4421;  // int32
  wire signed [31:0] sel_4422;  // int32
  wire signed [31:0] sel_4423;  // int32
  wire signed [31:0] sel_4424;  // int32
  wire signed [31:0] sel_4425;  // int32
  wire signed [31:0] sel_4426;  // int32
  wire signed [31:0] sel_4427;  // int32
  wire signed [31:0] sel_4428;  // int32
  wire signed [31:0] sel_4429;  // int32
  wire signed [31:0] sel_4430;  // int32
  wire signed [31:0] sel_4431;  // int32
  wire signed [31:0] sel_4432;  // int32
  wire signed [31:0] sel_4433;  // int32
  wire signed [31:0] sel_4434;  // int32
  wire signed [31:0] s_552;  // int32
  wire signed [31:0] sel_1_1455;  // int32
  wire signed [31:0] sel_4435;  // int32
  wire signed [31:0] sel_1_1456;  // int32
  wire signed [31:0] sel_4436;  // int32
  wire signed [31:0] sel_4437;  // int32
  wire signed [31:0] sel_4438;  // int32
  reg signed [31:0] sel_1_1457;  // int32
  wire [7:0] tmp_610;  // uint8
  reg  s_553;
  reg [7:0] tmp_611;  // uint8
  wire [7:0] sel_1_1458;  // uint8
  wire signed [31:0] sel_4439;  // int32
  wire signed [31:0] sel_4440;  // int32
  wire signed [31:0] sel_4441;  // int32
  wire signed [31:0] sel_4442;  // int32
  wire signed [31:0] sel_4443;  // int32
  wire signed [31:0] sel_4444;  // int32
  wire signed [31:0] sel_4445;  // int32
  wire signed [31:0] sel_4446;  // int32
  wire signed [31:0] sel_4447;  // int32
  wire signed [31:0] sel_4448;  // int32
  wire signed [31:0] sel_4449;  // int32
  wire signed [31:0] sel_4450;  // int32
  wire signed [31:0] sel_4451;  // int32
  wire signed [31:0] sel_4452;  // int32
  wire signed [31:0] s_554;  // int32
  wire signed [31:0] sel_1_1459;  // int32
  wire signed [31:0] sel_4453;  // int32
  wire signed [31:0] sel_4454;  // int32
  wire signed [31:0] sel_4455;  // int32
  reg signed [31:0] sel_1_1460;  // int32
  wire [7:0] tmp_612;  // uint8
  reg [4:0] is_SPI_MNGR_82;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire signed [31:0] sel_4456;  // int32
  wire signed [31:0] sel_4457;  // int32
  wire signed [31:0] sel_4458;  // int32
  wire signed [31:0] sel_4459;  // int32
  wire signed [31:0] sel_4460;  // int32
  wire signed [31:0] sel_4461;  // int32
  wire signed [31:0] sel_4462;  // int32
  wire signed [31:0] sel_4463;  // int32
  wire signed [31:0] sel_4464;  // int32
  wire signed [31:0] sel_4465;  // int32
  wire signed [31:0] sel_4466;  // int32
  wire signed [31:0] sel_4467;  // int32
  wire signed [31:0] sel_4468;  // int32
  reg  s_555;
  wire signed [31:0] sel_4469;  // int32
  wire signed [31:0] sel_4470;  // int32
  wire signed [31:0] sel_4471;  // int32
  wire signed [31:0] s_556;  // int32
  wire signed [31:0] sel_1_1461;  // int32
  wire signed [31:0] sel_4472;  // int32
  wire signed [31:0] sel_1_1462;  // int32
  wire signed [31:0] sel_4473;  // int32
  wire signed [31:0] sel_1_1463;  // int32
  wire signed [31:0] sel_4474;  // int32
  wire signed [31:0] sel_1_1464;  // int32
  wire signed [31:0] sel_4475;  // int32
  wire signed [31:0] sel_1_1465;  // int32
  wire signed [31:0] sel_4476;  // int32
  wire signed [31:0] sel_1_1466;  // int32
  wire signed [31:0] sel_4477;  // int32
  wire signed [31:0] sel_1_1467;  // int32
  wire signed [31:0] sel_4478;  // int32
  wire signed [31:0] sel_1_1468;  // int32
  wire signed [31:0] sel_1_1469;  // int32
  wire signed [31:0] sel_1_1470;  // int32
  reg signed [31:0] sel_1_1471;  // int32
  wire signed [31:0] sel_4479;  // int32
  wire signed [31:0] sel_4480;  // int32
  wire signed [31:0] sel_1_1472;  // int32
  wire signed [31:0] sel_4481;  // int32
  reg  tmp_613;
  reg [7:0] rd_534_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_534_reg_next [0:11];  // ufix8 [12]
  wire [7:0] functionOutput_38 [0:11];  // uint8 [12]
  wire signed [31:0] sel_4482;  // int32
  reg signed [31:0] sel_1_1473;  // int32
  wire [7:0] tmp_614;  // uint8
  wire signed [31:0] sel_4483;  // int32
  wire signed [31:0] sel_4484;  // int32
  wire signed [31:0] sel_4485;  // int32
  wire signed [31:0] sel_4486;  // int32
  wire signed [31:0] sel_4487;  // int32
  wire signed [31:0] sel_4488;  // int32
  wire signed [31:0] sel_4489;  // int32
  wire signed [31:0] sel_4490;  // int32
  wire signed [31:0] sel_4491;  // int32
  wire signed [31:0] sel_4492;  // int32
  wire signed [31:0] sel_4493;  // int32
  wire signed [31:0] sel_4494;  // int32
  wire signed [31:0] sel_4495;  // int32
  wire signed [31:0] sel_4496;  // int32
  wire signed [31:0] sel_4497;  // int32
  wire signed [31:0] sel_4498;  // int32
  wire signed [31:0] sel_4499;  // int32
  wire signed [31:0] s_557;  // int32
  wire signed [31:0] sel_1_1474;  // int32
  wire signed [31:0] sel_4500;  // int32
  wire signed [31:0] sel_1_1475;  // int32
  wire signed [31:0] sel_4501;  // int32
  wire signed [31:0] sel_1_1476;  // int32
  wire signed [31:0] sel_4502;  // int32
  wire signed [31:0] sel_1_1477;  // int32
  wire signed [31:0] sel_4503;  // int32
  wire signed [31:0] sel_1_1478;  // int32
  wire signed [31:0] sel_4504;  // int32
  wire signed [31:0] sel_1_1479;  // int32
  wire signed [31:0] sel_4505;  // int32
  wire signed [31:0] sel_1_1480;  // int32
  wire signed [31:0] sel_1_1481;  // int32
  wire signed [31:0] sel_1_1482;  // int32
  wire signed [31:0] sel_4506;  // int32
  wire signed [31:0] sel_1_1483;  // int32
  wire signed [31:0] sel_4507;  // int32
  wire signed [31:0] sel_4508;  // int32
  reg signed [31:0] sel_1_1484;  // int32
  wire [7:0] tmp_615;  // uint8
  reg  tmp_616;
  reg [7:0] tmp_617;  // uint8
  wire [7:0] sel_1_1485;  // uint8
  wire signed [31:0] sel_4509;  // int32
  wire signed [31:0] sel_4510;  // int32
  wire signed [31:0] sel_4511;  // int32
  wire signed [31:0] sel_4512;  // int32
  wire signed [31:0] sel_4513;  // int32
  wire signed [31:0] sel_4514;  // int32
  wire signed [31:0] sel_4515;  // int32
  wire signed [31:0] sel_4516;  // int32
  wire signed [31:0] sel_4517;  // int32
  wire signed [31:0] sel_4518;  // int32
  wire signed [31:0] sel_4519;  // int32
  wire signed [31:0] sel_4520;  // int32
  wire signed [31:0] sel_4521;  // int32
  wire signed [31:0] sel_4522;  // int32
  wire signed [31:0] sel_4523;  // int32
  wire signed [31:0] sel_4524;  // int32
  wire signed [31:0] sel_4525;  // int32
  wire signed [31:0] s_558;  // int32
  wire signed [31:0] sel_1_1486;  // int32
  wire signed [31:0] sel_4526;  // int32
  wire signed [31:0] sel_1_1487;  // int32
  wire signed [31:0] sel_4527;  // int32
  wire signed [31:0] sel_1_1488;  // int32
  wire signed [31:0] sel_4528;  // int32
  wire signed [31:0] sel_1_1489;  // int32
  wire signed [31:0] sel_4529;  // int32
  wire signed [31:0] sel_1_1490;  // int32
  wire signed [31:0] sel_4530;  // int32
  wire signed [31:0] sel_1_1491;  // int32
  wire signed [31:0] sel_1_1492;  // int32
  wire signed [31:0] sel_1_1493;  // int32
  wire signed [31:0] sel_4531;  // int32
  wire signed [31:0] sel_1_1494;  // int32
  wire signed [31:0] sel_4532;  // int32
  wire signed [31:0] sel_4533;  // int32
  reg signed [31:0] sel_1_1495;  // int32
  wire [7:0] tmp_618;  // uint8
  reg  tmp_619;
  reg [7:0] tmp_620;  // uint8
  wire [7:0] sel_1_1496;  // uint8
  wire signed [31:0] sel_4534;  // int32
  wire signed [31:0] sel_4535;  // int32
  wire signed [31:0] sel_4536;  // int32
  wire signed [31:0] sel_4537;  // int32
  wire signed [31:0] sel_4538;  // int32
  wire signed [31:0] sel_4539;  // int32
  wire signed [31:0] sel_4540;  // int32
  wire signed [31:0] sel_4541;  // int32
  wire signed [31:0] sel_4542;  // int32
  wire signed [31:0] sel_4543;  // int32
  wire signed [31:0] sel_4544;  // int32
  wire signed [31:0] sel_4545;  // int32
  wire signed [31:0] sel_4546;  // int32
  wire signed [31:0] sel_4547;  // int32
  wire signed [31:0] sel_4548;  // int32
  wire signed [31:0] sel_4549;  // int32
  wire signed [31:0] sel_4550;  // int32
  wire signed [31:0] s_559;  // int32
  wire signed [31:0] sel_1_1497;  // int32
  wire signed [31:0] sel_4551;  // int32
  wire signed [31:0] sel_1_1498;  // int32
  wire signed [31:0] sel_4552;  // int32
  wire signed [31:0] sel_1_1499;  // int32
  wire signed [31:0] sel_4553;  // int32
  wire signed [31:0] sel_1_1500;  // int32
  wire signed [31:0] sel_4554;  // int32
  wire signed [31:0] sel_1_1501;  // int32
  wire signed [31:0] sel_1_1502;  // int32
  wire signed [31:0] sel_1_1503;  // int32
  wire signed [31:0] sel_4555;  // int32
  wire signed [31:0] sel_1_1504;  // int32
  wire signed [31:0] sel_4556;  // int32
  wire signed [31:0] sel_4557;  // int32
  reg signed [31:0] sel_1_1505;  // int32
  wire [7:0] tmp_621;  // uint8
  reg  tmp_622;
  reg [7:0] tmp_623;  // uint8
  wire [7:0] sel_1_1506;  // uint8
  wire signed [31:0] sel_4558;  // int32
  wire signed [31:0] sel_4559;  // int32
  wire signed [31:0] sel_4560;  // int32
  wire signed [31:0] sel_4561;  // int32
  wire signed [31:0] sel_4562;  // int32
  wire signed [31:0] sel_4563;  // int32
  wire signed [31:0] sel_4564;  // int32
  wire signed [31:0] sel_4565;  // int32
  wire signed [31:0] sel_4566;  // int32
  wire signed [31:0] sel_4567;  // int32
  wire signed [31:0] sel_4568;  // int32
  wire signed [31:0] sel_4569;  // int32
  wire signed [31:0] sel_4570;  // int32
  wire signed [31:0] sel_4571;  // int32
  wire signed [31:0] sel_4572;  // int32
  wire signed [31:0] sel_4573;  // int32
  wire signed [31:0] sel_4574;  // int32
  wire signed [31:0] s_560;  // int32
  wire signed [31:0] sel_1_1507;  // int32
  wire signed [31:0] sel_4575;  // int32
  wire signed [31:0] sel_1_1508;  // int32
  wire signed [31:0] sel_4576;  // int32
  wire signed [31:0] sel_1_1509;  // int32
  wire signed [31:0] sel_4577;  // int32
  wire signed [31:0] sel_1_1510;  // int32
  wire signed [31:0] sel_1_1511;  // int32
  wire signed [31:0] sel_1_1512;  // int32
  wire signed [31:0] sel_4578;  // int32
  wire signed [31:0] sel_1_1513;  // int32
  wire signed [31:0] sel_4579;  // int32
  wire signed [31:0] sel_4580;  // int32
  reg signed [31:0] sel_1_1514;  // int32
  wire [7:0] tmp_624;  // uint8
  reg  tmp_625;
  reg [7:0] tmp_626;  // uint8
  wire [7:0] sel_1_1515;  // uint8
  wire signed [31:0] sel_4581;  // int32
  wire signed [31:0] sel_4582;  // int32
  wire signed [31:0] sel_4583;  // int32
  wire signed [31:0] sel_4584;  // int32
  wire signed [31:0] sel_4585;  // int32
  wire signed [31:0] sel_4586;  // int32
  wire signed [31:0] sel_4587;  // int32
  wire signed [31:0] sel_4588;  // int32
  wire signed [31:0] sel_4589;  // int32
  wire signed [31:0] sel_4590;  // int32
  wire signed [31:0] sel_4591;  // int32
  wire signed [31:0] sel_4592;  // int32
  wire signed [31:0] sel_4593;  // int32
  wire signed [31:0] sel_4594;  // int32
  wire signed [31:0] sel_4595;  // int32
  wire signed [31:0] sel_4596;  // int32
  wire signed [31:0] sel_4597;  // int32
  wire signed [31:0] s_561;  // int32
  wire signed [31:0] sel_1_1516;  // int32
  wire signed [31:0] sel_4598;  // int32
  wire signed [31:0] sel_1_1517;  // int32
  wire signed [31:0] sel_4599;  // int32
  wire signed [31:0] sel_1_1518;  // int32
  wire signed [31:0] sel_1_1519;  // int32
  wire signed [31:0] sel_1_1520;  // int32
  wire signed [31:0] sel_4600;  // int32
  wire signed [31:0] sel_1_1521;  // int32
  wire signed [31:0] sel_4601;  // int32
  wire signed [31:0] sel_4602;  // int32
  reg signed [31:0] sel_1_1522;  // int32
  wire [7:0] tmp_627;  // uint8
  reg  tmp_628;
  reg [7:0] tmp_629;  // uint8
  wire [7:0] sel_1_1523;  // uint8
  wire signed [31:0] sel_4603;  // int32
  wire signed [31:0] sel_4604;  // int32
  wire signed [31:0] sel_4605;  // int32
  wire signed [31:0] sel_4606;  // int32
  wire signed [31:0] sel_4607;  // int32
  wire signed [31:0] sel_4608;  // int32
  wire signed [31:0] sel_4609;  // int32
  wire signed [31:0] sel_4610;  // int32
  wire signed [31:0] sel_4611;  // int32
  wire signed [31:0] sel_4612;  // int32
  wire signed [31:0] sel_4613;  // int32
  wire signed [31:0] sel_4614;  // int32
  wire signed [31:0] sel_4615;  // int32
  wire signed [31:0] sel_4616;  // int32
  wire signed [31:0] sel_4617;  // int32
  wire signed [31:0] sel_4618;  // int32
  wire signed [31:0] sel_4619;  // int32
  wire signed [31:0] s_562;  // int32
  wire signed [31:0] sel_1_1524;  // int32
  wire signed [31:0] sel_4620;  // int32
  wire signed [31:0] sel_1_1525;  // int32
  wire signed [31:0] sel_1_1526;  // int32
  wire signed [31:0] sel_1_1527;  // int32
  wire signed [31:0] sel_4621;  // int32
  wire signed [31:0] sel_1_1528;  // int32
  wire signed [31:0] sel_4622;  // int32
  wire signed [31:0] sel_4623;  // int32
  reg signed [31:0] sel_1_1529;  // int32
  wire [7:0] tmp_630;  // uint8
  reg  tmp_631;
  reg [7:0] tmp_632;  // uint8
  wire [7:0] sel_1_1530;  // uint8
  wire signed [31:0] sel_4624;  // int32
  wire signed [31:0] sel_4625;  // int32
  wire signed [31:0] sel_4626;  // int32
  wire signed [31:0] sel_4627;  // int32
  wire signed [31:0] sel_4628;  // int32
  wire signed [31:0] sel_4629;  // int32
  wire signed [31:0] sel_4630;  // int32
  wire signed [31:0] sel_4631;  // int32
  wire signed [31:0] sel_4632;  // int32
  wire signed [31:0] sel_4633;  // int32
  wire signed [31:0] sel_4634;  // int32
  wire signed [31:0] sel_4635;  // int32
  wire signed [31:0] sel_4636;  // int32
  wire signed [31:0] sel_4637;  // int32
  wire signed [31:0] sel_4638;  // int32
  wire signed [31:0] sel_4639;  // int32
  wire signed [31:0] sel_4640;  // int32
  wire signed [31:0] s_563;  // int32
  wire signed [31:0] sel_1_1531;  // int32
  wire signed [31:0] sel_1_1532;  // int32
  wire signed [31:0] sel_1_1533;  // int32
  wire signed [31:0] sel_4641;  // int32
  wire signed [31:0] sel_1_1534;  // int32
  wire signed [31:0] sel_4642;  // int32
  wire signed [31:0] sel_4643;  // int32
  reg signed [31:0] sel_1_1535;  // int32
  wire [7:0] tmp_633;  // uint8
  wire [7:0] sel_4644;  // uint8
  reg [7:0] tmp_634;  // uint8
  wire [7:0] sel_1_1536;  // uint8
  reg [7:0] tmp_635;  // uint8
  wire [7:0] sel_1_1537;  // uint8
  wire [7:0] sel_4645;  // uint8
  reg [4:0] is_SPI_MNGR_83;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire sel_4646;
  wire sel_4647;
  wire sel_4648;
  wire sel_4649;
  wire sel_4650;
  wire sel_4651;
  wire sel_4652;
  wire sel_4653;
  wire sel_4654;
  wire sel_4655;
  wire sel_4656;
  wire sel_4657;
  wire sel_4658;
  wire sel_4659;
  wire s_564;
  wire sel_2_236;
  wire s_565;
  wire sel_2_237;
  wire s_566;
  wire sel_2_238;
  wire s_567;
  wire sel_2_239;
  wire s_568;
  wire sel_2_240;
  wire s_569;
  wire sel_2_241;
  wire s_570;
  wire sel_2_242;
  wire s_571;
  wire sel_2_243;
  reg  s_572;
  wire sel_4660;
  wire sel_4661;
  wire sel_4662;
  wire s_573;
  wire sel_2_244;
  wire s_574;
  wire sel_2_245;
  wire s_575;
  wire sel_2_246;
  wire s_576;
  wire sel_2_247;
  wire s_577;
  wire sel_2_248;
  wire s_578;
  wire sel_2_249;
  wire s_579;
  wire sel_2_250;
  wire s_580;
  wire sel_2_251;
  wire sel_2_252;
  wire sel_2_253;
  reg  sel_2_254;
  reg  sel_2_255;
  wire sel_4663;
  wire sel_2_256;
  wire sel_4664;
  wire [7:0] sel_4665;  // uint8
  reg [7:0] sel_1_1538;  // uint8
  wire sel_4666;
  reg  sel_2_257;
  wire [7:0] sel_4667;  // uint8
  reg [7:0] sel_1_1539;  // uint8
  wire sel_4668;
  reg  sel_2_258;
  wire [7:0] sel_4669;  // uint8
  reg [7:0] sel_1_1540;  // uint8
  wire sel_4670;
  reg  sel_2_259;
  wire [7:0] sel_4671;  // uint8
  reg [7:0] sel_1_1541;  // uint8
  wire sel_4672;
  reg  sel_2_260;
  wire [7:0] sel_4673;  // uint8
  reg [7:0] sel_1_1542;  // uint8
  wire sel_4674;
  reg  sel_2_261;
  wire [7:0] sel_4675;  // uint8
  reg [7:0] sel_1_1543;  // uint8
  wire sel_4676;
  reg  sel_2_262;
  wire [7:0] sel_4677;  // uint8
  reg [7:0] sel_1_1544;  // uint8
  wire sel_4678;
  reg  sel_2_263;
  wire [7:0] sel_4679;  // uint8
  reg [7:0] sel_1_1545;  // uint8
  wire sel_4680;
  reg  sel_2_264;
  wire [7:0] sel_4681;  // uint8
  reg [7:0] sel_1_1546;  // uint8
  wire sel_4682;
  reg  sel_2_265;
  wire [7:0] sel_4683;  // uint8
  reg [7:0] sel_1_1547;  // uint8
  wire sel_4684;
  reg  sel_2_266;
  wire [7:0] sel_4685;  // uint8
  reg [7:0] sel_1_1548;  // uint8
  wire sel_4686;
  reg  sel_2_267;
  wire [7:0] sel_4687;  // uint8
  reg [7:0] sel_1_1549;  // uint8
  wire sel_4688;
  reg  sel_2_268;
  reg [7:0] tmp_636 [0:11];  // uint8 [12]
  reg [7:0] rd_539_reg [0:11];  // ufix8 [12]
  wire [7:0] rd_539_reg_next [0:11];  // ufix8 [12]
  wire [7:0] tmp_637 [0:11];  // uint8 [12]
  reg [7:0] cont_bits [0:11];  // uint8 [12]
  reg [7:0] cont_bits_1 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_2 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_3 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_4 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_5 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_6 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_7 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_8 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_9 [0:11];  // uint8 [12]
  reg [7:0] cont_bits_10 [0:11];  // uint8 [12]
  wire signed [31:0] s_581;  // int32
  wire signed [31:0] s_582;  // int32
  wire signed [31:0] s_583;  // int32
  wire signed [31:0] s_584;  // int32
  wire signed [31:0] s_585;  // int32
  wire signed [31:0] s_586;  // int32
  wire signed [31:0] s_587;  // int32
  wire signed [31:0] sel_4689;  // int32
  wire signed [31:0] sel_4690;  // int32
  wire signed [31:0] sel_4691;  // int32
  wire signed [31:0] sel_4692;  // int32
  wire signed [31:0] sel_4693;  // int32
  wire signed [31:0] sel_4694;  // int32
  wire signed [31:0] sel_4695;  // int32
  wire signed [31:0] sel_4696;  // int32
  wire signed [31:0] sel_4697;  // int32
  wire signed [31:0] s_588;  // int32
  reg signed [31:0] sel_1_1550;  // int32
  wire [7:0] s_589;  // uint8
  wire signed [31:0] tmp_638;  // int32
  wire tmp_639;
  wire signed [31:0] tmp_640;  // int32
  wire tmp_641;
  wire signed [31:0] tmp_642;  // int32
  wire tmp_643;
  wire signed [31:0] tmp_644;  // int32
  wire tmp_645;
  wire signed [31:0] tmp_646;  // int32
  wire tmp_647;
  wire signed [31:0] tmp_648;  // int32
  wire tmp_649;
  wire signed [31:0] tmp_650;  // int32
  wire tmp_651;
  wire sel_4698;
  wire sel_4699;
  wire sel_4700;
  wire sel_4701;
  wire sel_4702;
  wire sel_4703;
  wire sel_4704;
  wire sel_4705;
  wire sel_4706;
  wire signed [31:0] s_590;  // int32
  wire signed [31:0] s_591;  // int32
  wire signed [31:0] s_592;  // int32
  wire signed [31:0] s_593;  // int32
  wire signed [31:0] s_594;  // int32
  wire signed [31:0] s_595;  // int32
  wire signed [31:0] s_596;  // int32
  wire signed [31:0] sel_4707;  // int32
  wire signed [31:0] sel_4708;  // int32
  wire signed [31:0] sel_4709;  // int32
  wire signed [31:0] sel_4710;  // int32
  wire signed [31:0] sel_4711;  // int32
  wire signed [31:0] sel_4712;  // int32
  wire signed [31:0] sel_4713;  // int32
  wire signed [31:0] sel_4714;  // int32
  wire signed [31:0] sel_4715;  // int32
  wire signed [31:0] s_597;  // int32
  reg signed [31:0] sel_1_1551;  // int32
  wire [7:0] s_598;  // uint8
  wire signed [31:0] tmp_652;  // int32
  wire tmp_653;
  reg  sel_1_1552;
  wire s_599;
  wire s_600;
  wire s_601;
  wire s_602;
  wire s_603;
  wire s_604;
  wire s_605;
  wire sel_4716;
  wire sel_4717;
  wire sel_4718;
  wire sel_4719;
  wire sel_4720;
  wire sel_4721;
  wire sel_4722;
  wire sel_4723;
  wire sel_4724;
  wire s_606;
  reg  sel_2_269;
  wire signed [31:0] s_607;  // int32
  wire signed [31:0] s_608;  // int32
  wire signed [31:0] s_609;  // int32
  wire signed [31:0] s_610;  // int32
  wire signed [31:0] s_611;  // int32
  wire signed [31:0] s_612;  // int32
  wire signed [31:0] s_613;  // int32
  wire signed [31:0] sel_4725;  // int32
  wire signed [31:0] sel_4726;  // int32
  wire signed [31:0] sel_4727;  // int32
  wire signed [31:0] sel_4728;  // int32
  wire signed [31:0] sel_4729;  // int32
  wire signed [31:0] sel_4730;  // int32
  wire signed [31:0] sel_4731;  // int32
  wire signed [31:0] sel_4732;  // int32
  wire signed [31:0] sel_4733;  // int32
  wire signed [31:0] s_614;  // int32
  reg signed [31:0] sel_1_1553;  // int32
  wire [7:0] s_615;  // uint8
  wire signed [31:0] tmp_654;  // int32
  wire tmp_655;
  wire signed [31:0] tmp_656;  // int32
  wire tmp_657;
  wire signed [31:0] tmp_658;  // int32
  wire tmp_659;
  wire signed [31:0] tmp_660;  // int32
  wire tmp_661;
  wire signed [31:0] tmp_662;  // int32
  wire tmp_663;
  wire signed [31:0] tmp_664;  // int32
  wire tmp_665;
  wire signed [31:0] tmp_666;  // int32
  wire tmp_667;
  wire sel_4734;
  wire sel_4735;
  wire sel_4736;
  wire sel_4737;
  wire sel_4738;
  wire sel_4739;
  wire sel_4740;
  wire sel_4741;
  wire sel_4742;
  wire signed [31:0] tmp_668;  // int32
  wire tmp_669;
  reg  sel_1_1554;
  wire s_616;
  wire s_617;
  wire s_618;
  wire s_619;
  wire s_620;
  wire s_621;
  wire s_622;
  wire sel_4743;
  wire sel_4744;
  wire sel_4745;
  wire sel_4746;
  wire sel_4747;
  wire sel_4748;
  wire sel_4749;
  wire sel_4750;
  wire sel_4751;
  wire s_623;
  reg  sel_2_270;
  wire signed [31:0] s_624;  // int32
  wire signed [31:0] s_625;  // int32
  wire signed [31:0] s_626;  // int32
  wire signed [31:0] s_627;  // int32
  wire signed [31:0] s_628;  // int32
  wire signed [31:0] s_629;  // int32
  wire signed [31:0] s_630;  // int32
  wire signed [31:0] sel_4752;  // int32
  wire signed [31:0] sel_4753;  // int32
  wire signed [31:0] sel_4754;  // int32
  wire signed [31:0] sel_4755;  // int32
  wire signed [31:0] sel_4756;  // int32
  wire signed [31:0] sel_4757;  // int32
  wire signed [31:0] sel_4758;  // int32
  wire signed [31:0] sel_4759;  // int32
  wire signed [31:0] sel_4760;  // int32
  wire signed [31:0] s_631;  // int32
  reg signed [31:0] sel_1_1555;  // int32
  wire [7:0] s_632;  // uint8
  wire signed [31:0] tmp_670;  // int32
  wire tmp_671;
  wire signed [31:0] tmp_672;  // int32
  wire tmp_673;
  wire signed [31:0] tmp_674;  // int32
  wire tmp_675;
  wire signed [31:0] tmp_676;  // int32
  wire tmp_677;
  wire signed [31:0] tmp_678;  // int32
  wire tmp_679;
  wire signed [31:0] tmp_680;  // int32
  wire tmp_681;
  wire signed [31:0] tmp_682;  // int32
  wire tmp_683;
  wire sel_4761;
  wire sel_4762;
  wire sel_4763;
  wire sel_4764;
  wire sel_4765;
  wire sel_4766;
  wire sel_4767;
  wire sel_4768;
  wire sel_4769;
  wire signed [31:0] tmp_684;  // int32
  wire tmp_685;
  reg  sel_1_1556;
  wire s_633;
  wire s_634;
  wire s_635;
  wire s_636;
  wire s_637;
  wire s_638;
  wire s_639;
  wire sel_4770;
  wire sel_4771;
  wire sel_4772;
  wire sel_4773;
  wire sel_4774;
  wire sel_4775;
  wire sel_4776;
  wire sel_4777;
  wire sel_4778;
  wire s_640;
  reg  sel_2_271;
  wire signed [31:0] s_641;  // int32
  wire signed [31:0] s_642;  // int32
  wire signed [31:0] s_643;  // int32
  wire signed [31:0] s_644;  // int32
  wire signed [31:0] s_645;  // int32
  wire signed [31:0] s_646;  // int32
  wire signed [31:0] s_647;  // int32
  wire signed [31:0] sel_4779;  // int32
  wire signed [31:0] sel_4780;  // int32
  wire signed [31:0] sel_4781;  // int32
  wire signed [31:0] sel_4782;  // int32
  wire signed [31:0] sel_4783;  // int32
  wire signed [31:0] sel_4784;  // int32
  wire signed [31:0] sel_4785;  // int32
  wire signed [31:0] sel_4786;  // int32
  wire signed [31:0] sel_4787;  // int32
  wire signed [31:0] s_648;  // int32
  reg signed [31:0] sel_1_1557;  // int32
  wire [7:0] s_649;  // uint8
  wire signed [31:0] tmp_686;  // int32
  wire tmp_687;
  wire signed [31:0] tmp_688;  // int32
  wire tmp_689;
  wire signed [31:0] tmp_690;  // int32
  wire tmp_691;
  wire signed [31:0] tmp_692;  // int32
  wire tmp_693;
  wire signed [31:0] tmp_694;  // int32
  wire tmp_695;
  wire signed [31:0] tmp_696;  // int32
  wire tmp_697;
  wire signed [31:0] tmp_698;  // int32
  wire tmp_699;
  wire sel_4788;
  wire sel_4789;
  wire sel_4790;
  wire sel_4791;
  wire sel_4792;
  wire sel_4793;
  wire sel_4794;
  wire sel_4795;
  wire sel_4796;
  wire signed [31:0] tmp_700;  // int32
  wire tmp_701;
  reg  sel_1_1558;
  wire s_650;
  wire s_651;
  wire s_652;
  wire s_653;
  wire s_654;
  wire s_655;
  wire s_656;
  wire sel_4797;
  wire sel_4798;
  wire sel_4799;
  wire sel_4800;
  wire sel_4801;
  wire sel_4802;
  wire sel_4803;
  wire sel_4804;
  wire sel_4805;
  wire s_657;
  reg  sel_2_272;
  wire signed [31:0] s_658;  // int32
  wire signed [31:0] s_659;  // int32
  wire signed [31:0] s_660;  // int32
  wire signed [31:0] s_661;  // int32
  wire signed [31:0] s_662;  // int32
  wire signed [31:0] s_663;  // int32
  wire signed [31:0] s_664;  // int32
  wire signed [31:0] sel_4806;  // int32
  wire signed [31:0] sel_4807;  // int32
  wire signed [31:0] sel_4808;  // int32
  wire signed [31:0] sel_4809;  // int32
  wire signed [31:0] sel_4810;  // int32
  wire signed [31:0] sel_4811;  // int32
  wire signed [31:0] sel_4812;  // int32
  wire signed [31:0] sel_4813;  // int32
  wire signed [31:0] sel_4814;  // int32
  wire signed [31:0] s_665;  // int32
  reg signed [31:0] sel_1_1559;  // int32
  wire [7:0] s_666;  // uint8
  wire signed [31:0] tmp_702;  // int32
  wire tmp_703;
  wire signed [31:0] tmp_704;  // int32
  wire tmp_705;
  wire signed [31:0] tmp_706;  // int32
  wire tmp_707;
  wire signed [31:0] tmp_708;  // int32
  wire tmp_709;
  wire signed [31:0] tmp_710;  // int32
  wire tmp_711;
  wire signed [31:0] tmp_712;  // int32
  wire tmp_713;
  wire signed [31:0] tmp_714;  // int32
  wire tmp_715;
  wire sel_4815;
  wire sel_4816;
  wire sel_4817;
  wire sel_4818;
  wire sel_4819;
  wire sel_4820;
  wire sel_4821;
  wire sel_4822;
  wire sel_4823;
  wire signed [31:0] tmp_716;  // int32
  wire tmp_717;
  reg  sel_1_1560;
  wire s_667;
  wire s_668;
  wire s_669;
  wire s_670;
  wire s_671;
  wire s_672;
  wire s_673;
  wire sel_4824;
  wire sel_4825;
  wire sel_4826;
  wire sel_4827;
  wire sel_4828;
  wire sel_4829;
  wire sel_4830;
  wire sel_4831;
  wire sel_4832;
  wire s_674;
  reg  sel_2_273;
  wire signed [31:0] s_675;  // int32
  wire signed [31:0] s_676;  // int32
  wire signed [31:0] s_677;  // int32
  wire signed [31:0] s_678;  // int32
  wire signed [31:0] s_679;  // int32
  wire signed [31:0] s_680;  // int32
  wire signed [31:0] s_681;  // int32
  wire signed [31:0] sel_4833;  // int32
  wire signed [31:0] sel_4834;  // int32
  wire signed [31:0] sel_4835;  // int32
  wire signed [31:0] sel_4836;  // int32
  wire signed [31:0] sel_4837;  // int32
  wire signed [31:0] sel_4838;  // int32
  wire signed [31:0] sel_4839;  // int32
  wire signed [31:0] sel_4840;  // int32
  wire signed [31:0] sel_4841;  // int32
  wire signed [31:0] s_682;  // int32
  reg signed [31:0] sel_1_1561;  // int32
  wire [7:0] s_683;  // uint8
  wire signed [31:0] tmp_718;  // int32
  wire tmp_719;
  wire signed [31:0] tmp_720;  // int32
  wire tmp_721;
  wire signed [31:0] tmp_722;  // int32
  wire tmp_723;
  wire signed [31:0] tmp_724;  // int32
  wire tmp_725;
  wire signed [31:0] tmp_726;  // int32
  wire tmp_727;
  wire signed [31:0] tmp_728;  // int32
  wire tmp_729;
  wire signed [31:0] tmp_730;  // int32
  wire tmp_731;
  wire sel_4842;
  wire sel_4843;
  wire sel_4844;
  wire sel_4845;
  wire sel_4846;
  wire sel_4847;
  wire sel_4848;
  wire sel_4849;
  wire sel_4850;
  wire signed [31:0] tmp_732;  // int32
  wire tmp_733;
  reg  sel_1_1562;
  wire s_684;
  wire s_685;
  wire s_686;
  wire s_687;
  wire s_688;
  wire s_689;
  wire s_690;
  wire sel_4851;
  wire sel_4852;
  wire sel_4853;
  wire sel_4854;
  wire sel_4855;
  wire sel_4856;
  wire sel_4857;
  wire sel_4858;
  wire sel_4859;
  wire s_691;
  reg  sel_2_274;
  wire signed [31:0] s_692;  // int32
  wire signed [31:0] s_693;  // int32
  wire signed [31:0] s_694;  // int32
  wire signed [31:0] s_695;  // int32
  wire signed [31:0] s_696;  // int32
  wire signed [31:0] s_697;  // int32
  wire signed [31:0] s_698;  // int32
  wire signed [31:0] sel_4860;  // int32
  wire signed [31:0] sel_4861;  // int32
  wire signed [31:0] sel_4862;  // int32
  wire signed [31:0] sel_4863;  // int32
  wire signed [31:0] sel_4864;  // int32
  wire signed [31:0] sel_4865;  // int32
  wire signed [31:0] sel_4866;  // int32
  wire signed [31:0] sel_4867;  // int32
  wire signed [31:0] sel_4868;  // int32
  wire signed [31:0] s_699;  // int32
  reg signed [31:0] sel_1_1563;  // int32
  wire [7:0] s_700;  // uint8
  wire signed [31:0] tmp_734;  // int32
  wire tmp_735;
  wire signed [31:0] tmp_736;  // int32
  wire tmp_737;
  wire signed [31:0] tmp_738;  // int32
  wire tmp_739;
  wire signed [31:0] tmp_740;  // int32
  wire tmp_741;
  wire signed [31:0] tmp_742;  // int32
  wire tmp_743;
  wire signed [31:0] tmp_744;  // int32
  wire tmp_745;
  wire signed [31:0] tmp_746;  // int32
  wire tmp_747;
  wire sel_4869;
  wire sel_4870;
  wire sel_4871;
  wire sel_4872;
  wire sel_4873;
  wire sel_4874;
  wire sel_4875;
  wire sel_4876;
  wire sel_4877;
  wire signed [31:0] tmp_748;  // int32
  wire tmp_749;
  reg  sel_1_1564;
  wire s_701;
  wire s_702;
  wire s_703;
  wire s_704;
  wire s_705;
  wire s_706;
  wire s_707;
  wire sel_4878;
  wire sel_4879;
  wire sel_4880;
  wire sel_4881;
  wire sel_4882;
  wire sel_4883;
  wire sel_4884;
  wire sel_4885;
  wire sel_4886;
  wire s_708;
  reg  sel_2_275;
  wire signed [31:0] s_709;  // int32
  wire signed [31:0] s_710;  // int32
  wire signed [31:0] s_711;  // int32
  wire signed [31:0] s_712;  // int32
  wire signed [31:0] s_713;  // int32
  wire signed [31:0] s_714;  // int32
  wire signed [31:0] s_715;  // int32
  wire signed [31:0] sel_4887;  // int32
  wire signed [31:0] sel_4888;  // int32
  wire signed [31:0] sel_4889;  // int32
  wire signed [31:0] sel_4890;  // int32
  wire signed [31:0] sel_4891;  // int32
  wire signed [31:0] sel_4892;  // int32
  wire signed [31:0] sel_4893;  // int32
  wire signed [31:0] sel_4894;  // int32
  wire signed [31:0] sel_4895;  // int32
  wire signed [31:0] s_716;  // int32
  reg signed [31:0] sel_1_1565;  // int32
  wire [7:0] s_717;  // uint8
  wire signed [31:0] tmp_750;  // int32
  wire tmp_751;
  wire signed [31:0] tmp_752;  // int32
  wire tmp_753;
  wire signed [31:0] tmp_754;  // int32
  wire tmp_755;
  wire signed [31:0] tmp_756;  // int32
  wire tmp_757;
  wire signed [31:0] tmp_758;  // int32
  wire tmp_759;
  wire signed [31:0] tmp_760;  // int32
  wire tmp_761;
  wire signed [31:0] tmp_762;  // int32
  wire tmp_763;
  wire sel_4896;
  wire sel_4897;
  wire sel_4898;
  wire sel_4899;
  wire sel_4900;
  wire sel_4901;
  wire sel_4902;
  wire sel_4903;
  wire sel_4904;
  wire signed [31:0] tmp_764;  // int32
  wire tmp_765;
  reg  sel_1_1566;
  wire s_718;
  wire s_719;
  wire s_720;
  wire s_721;
  wire s_722;
  wire s_723;
  wire s_724;
  wire sel_4905;
  wire sel_4906;
  wire sel_4907;
  wire sel_4908;
  wire sel_4909;
  wire sel_4910;
  wire sel_4911;
  wire sel_4912;
  wire sel_4913;
  wire s_725;
  reg  sel_2_276;
  wire signed [31:0] s_726;  // int32
  wire signed [31:0] s_727;  // int32
  wire signed [31:0] s_728;  // int32
  wire signed [31:0] s_729;  // int32
  wire signed [31:0] s_730;  // int32
  wire signed [31:0] s_731;  // int32
  wire signed [31:0] s_732;  // int32
  wire signed [31:0] sel_4914;  // int32
  wire signed [31:0] sel_4915;  // int32
  wire signed [31:0] sel_4916;  // int32
  wire signed [31:0] sel_4917;  // int32
  wire signed [31:0] sel_4918;  // int32
  wire signed [31:0] sel_4919;  // int32
  wire signed [31:0] sel_4920;  // int32
  wire signed [31:0] sel_4921;  // int32
  wire signed [31:0] sel_4922;  // int32
  wire signed [31:0] s_733;  // int32
  reg signed [31:0] sel_1_1567;  // int32
  wire [7:0] s_734;  // uint8
  wire signed [31:0] tmp_766;  // int32
  wire tmp_767;
  wire signed [31:0] tmp_768;  // int32
  wire tmp_769;
  wire signed [31:0] tmp_770;  // int32
  wire tmp_771;
  wire signed [31:0] tmp_772;  // int32
  wire tmp_773;
  wire signed [31:0] tmp_774;  // int32
  wire tmp_775;
  wire signed [31:0] tmp_776;  // int32
  wire tmp_777;
  wire signed [31:0] tmp_778;  // int32
  wire tmp_779;
  wire sel_4923;
  wire sel_4924;
  wire sel_4925;
  wire sel_4926;
  wire sel_4927;
  wire sel_4928;
  wire sel_4929;
  wire sel_4930;
  wire sel_4931;
  wire signed [31:0] tmp_780;  // int32
  wire tmp_781;
  reg  sel_1_1568;
  wire s_735;
  wire s_736;
  wire s_737;
  wire s_738;
  wire s_739;
  wire s_740;
  wire s_741;
  wire sel_4932;
  wire sel_4933;
  wire sel_4934;
  wire sel_4935;
  wire sel_4936;
  wire sel_4937;
  wire sel_4938;
  wire sel_4939;
  wire sel_4940;
  wire s_742;
  reg  sel_2_277;
  wire signed [31:0] s_743;  // int32
  wire signed [31:0] s_744;  // int32
  wire signed [31:0] s_745;  // int32
  wire signed [31:0] s_746;  // int32
  wire signed [31:0] s_747;  // int32
  wire signed [31:0] s_748;  // int32
  wire signed [31:0] s_749;  // int32
  wire signed [31:0] sel_4941;  // int32
  wire signed [31:0] sel_4942;  // int32
  wire signed [31:0] sel_4943;  // int32
  wire signed [31:0] sel_4944;  // int32
  wire signed [31:0] sel_4945;  // int32
  wire signed [31:0] sel_4946;  // int32
  wire signed [31:0] sel_4947;  // int32
  wire signed [31:0] sel_4948;  // int32
  wire signed [31:0] sel_4949;  // int32
  wire signed [31:0] s_750;  // int32
  reg signed [31:0] sel_1_1569;  // int32
  wire [7:0] s_751;  // uint8
  wire signed [31:0] tmp_782;  // int32
  wire tmp_783;
  wire signed [31:0] tmp_784;  // int32
  wire tmp_785;
  wire signed [31:0] tmp_786;  // int32
  wire tmp_787;
  wire signed [31:0] tmp_788;  // int32
  wire tmp_789;
  wire signed [31:0] tmp_790;  // int32
  wire tmp_791;
  wire signed [31:0] tmp_792;  // int32
  wire tmp_793;
  wire signed [31:0] tmp_794;  // int32
  wire tmp_795;
  wire sel_4950;
  wire sel_4951;
  wire sel_4952;
  wire sel_4953;
  wire sel_4954;
  wire sel_4955;
  wire sel_4956;
  wire sel_4957;
  wire sel_4958;
  wire signed [31:0] tmp_796;  // int32
  wire tmp_797;
  reg  sel_1_1570;
  wire s_752;
  wire s_753;
  wire s_754;
  wire s_755;
  wire s_756;
  wire s_757;
  wire s_758;
  wire sel_4959;
  wire sel_4960;
  wire sel_4961;
  wire sel_4962;
  wire sel_4963;
  wire sel_4964;
  wire sel_4965;
  wire sel_4966;
  wire sel_4967;
  wire s_759;
  reg  sel_2_278;
  wire signed [31:0] s_760;  // int32
  wire signed [31:0] s_761;  // int32
  wire signed [31:0] s_762;  // int32
  wire signed [31:0] s_763;  // int32
  wire signed [31:0] s_764;  // int32
  wire signed [31:0] s_765;  // int32
  wire signed [31:0] s_766;  // int32
  wire signed [31:0] sel_4968;  // int32
  wire signed [31:0] sel_4969;  // int32
  wire signed [31:0] sel_4970;  // int32
  wire signed [31:0] sel_4971;  // int32
  wire signed [31:0] sel_4972;  // int32
  wire signed [31:0] sel_4973;  // int32
  wire signed [31:0] sel_4974;  // int32
  wire signed [31:0] sel_4975;  // int32
  wire signed [31:0] sel_4976;  // int32
  wire signed [31:0] s_767;  // int32
  reg signed [31:0] sel_1_1571;  // int32
  wire [7:0] s_768;  // uint8
  wire signed [31:0] tmp_798;  // int32
  wire tmp_799;
  wire signed [31:0] tmp_800;  // int32
  wire tmp_801;
  wire signed [31:0] tmp_802;  // int32
  wire tmp_803;
  wire signed [31:0] tmp_804;  // int32
  wire tmp_805;
  wire signed [31:0] tmp_806;  // int32
  wire tmp_807;
  wire signed [31:0] tmp_808;  // int32
  wire tmp_809;
  wire signed [31:0] tmp_810;  // int32
  wire tmp_811;
  wire sel_4977;
  wire sel_4978;
  wire sel_4979;
  wire sel_4980;
  wire sel_4981;
  wire sel_4982;
  wire sel_4983;
  wire sel_4984;
  wire sel_4985;
  wire signed [31:0] tmp_812;  // int32
  wire tmp_813;
  reg  sel_1_1572;
  wire s_769;
  wire s_770;
  wire s_771;
  wire s_772;
  wire s_773;
  wire s_774;
  wire s_775;
  wire sel_4986;
  wire sel_4987;
  wire sel_4988;
  wire sel_4989;
  wire sel_4990;
  wire sel_4991;
  wire sel_4992;
  wire sel_4993;
  wire sel_4994;
  wire s_776;
  reg  sel_2_279;
  wire signed [31:0] tmp_814;  // int32
  wire tmp_815;
  wire signed [31:0] tmp_816;  // int32
  wire tmp_817;
  wire signed [31:0] tmp_818;  // int32
  wire tmp_819;
  wire signed [31:0] tmp_820;  // int32
  wire tmp_821;
  wire signed [31:0] tmp_822;  // int32
  wire tmp_823;
  wire signed [31:0] tmp_824;  // int32
  wire tmp_825;
  wire signed [31:0] tmp_826;  // int32
  wire tmp_827;
  wire sel_4995;
  wire sel_4996;
  wire sel_4997;
  wire sel_4998;
  wire sel_4999;
  wire sel_5000;
  wire sel_5001;
  wire sel_5002;
  wire sel_5003;
  wire signed [31:0] tmp_828;  // int32
  wire tmp_829;
  reg  sel_1_1573;
  wire s_777;
  wire s_778;
  wire s_779;
  wire s_780;
  wire s_781;
  wire s_782;
  wire s_783;
  wire sel_5004;
  wire sel_5005;
  wire sel_5006;
  wire sel_5007;
  wire sel_5008;
  wire sel_5009;
  wire sel_5010;
  wire sel_5011;
  wire sel_5012;
  wire s_784;
  reg  sel_2_280;
  reg  [15:0] tmp_830;  // boolean [16]
  reg  [15:0] tmp_831;  // boolean [16]
  reg  [15:0] payload;  // boolean [16]
  reg  [15:0] payload_1;  // boolean [16]
  reg  [15:0] payload_2;  // boolean [16]
  reg  [15:0] payload_3;  // boolean [16]
  reg  [15:0] payload_4;  // boolean [16]
  reg  [15:0] payload_5;  // boolean [16]
  reg  [15:0] payload_6;  // boolean [16]
  reg  [15:0] payload_7;  // boolean [16]
  reg  [15:0] payload_8;  // boolean [16]
  reg  [15:0] payload_9;  // boolean [16]
  reg  [15:0] payload_10;  // boolean [16]
  reg  [15:0] payload_11;  // boolean [16]
  reg  [15:0] payload_12;  // boolean [16]
  reg  [15:0] payload_13;  // boolean [16]
  reg  [15:0] payload_14;  // boolean [16]
  reg  [15:0] tmp_832;  // boolean [16]
  wire signed [31:0] sel_5013;  // int32
  wire signed [31:0] sel_5014;  // int32
  wire signed [31:0] sel_5015;  // int32
  wire signed [31:0] sel_5016;  // int32
  wire signed [31:0] sel_5017;  // int32
  wire signed [31:0] sel_5018;  // int32
  wire signed [31:0] sel_5019;  // int32
  wire signed [31:0] tmp_833;  // int32
  wire signed [31:0] s_785;  // int32
  wire signed [31:0] tmp_834;  // int32
  wire signed [31:0] s_786;  // int32
  wire signed [31:0] tmp_835;  // int32
  wire signed [31:0] s_787;  // int32
  wire signed [31:0] sel_5020;  // int32
  wire signed [31:0] tmp_836;  // int32
  wire signed [31:0] s_788;  // int32
  wire signed [31:0] tmp_837;  // int32
  wire signed [31:0] tmp_838;  // int32
  wire signed [31:0] sel_5021;  // int32
  wire signed [31:0] sel_1_1574;  // int32
  wire signed [31:0] sel_1_1575;  // int32
  wire signed [31:0] sel_5022;  // int32
  wire signed [31:0] sel_5023;  // int32
  wire signed [31:0] sel_5024;  // int32
  wire signed [31:0] sel_5025;  // int32
  wire signed [31:0] sel_5026;  // int32
  reg signed [31:0] sel_1_1576;  // int32
  wire SDI_1;
  wire tmp_839;
  wire SDI_2;
  reg  tmp_840;
  reg  tmp_841;
  reg  tmp_842;
  reg  tmp_843;
  wire tmp_844;
  wire tmp_845;
  reg  tmp_846;
  wire tmp_847;
  wire tmp_848;
  reg  tmp_849;
  wire tmp_850;
  wire tmp_851;
  reg  tmp_852;
  reg  tmp_853;
  wire SCK_1;
  wire SCK_2;
  wire SCK_3;
  wire SCK_4;
  wire tmp_854;
  wire SCK_5;
  wire tmp_855;
  wire SCK_6;
  wire SCK_7;
  wire tmp_856;
  wire SCK_8;
  wire tmp_857;
  wire SCK_9;
  wire SCK_10;
  wire tmp_858;
  wire SCK_11;
  wire SCK_12;
  wire tmp_859;
  wire tmp_860;
  wire SCK_13;
  wire SCK_14;
  wire SCK_15;
  wire tmp_861;
  wire SCK_16;
  wire tmp_862;
  reg  tmp_863;
  reg  tmp_864;
  reg  tmp_865;
  reg  tmp_866;
  wire tmp_867;
  wire tmp_868;
  reg  tmp_869;
  wire tmp_870;
  wire tmp_871;
  reg  tmp_872;
  reg  tmp_873;
  reg [4:0] is_SPI_MNGR_84;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire nCS1_reg_ctrl_const_out;
  wire nCS1_reg_Initial_Val_out;
  wire nCS1_1;
  wire nCS1_2;
  wire nCS1_3;
  wire nCS1_4;
  wire nCS1_5;
  wire nCS1_6;
  wire nCS1_7;
  wire nCS1_8;
  wire nCS1_9;
  reg  s_789;
  wire nCS1_10;
  wire nCS1_11;
  wire nCS1_12;
  wire nCS1_13;
  wire nCS1_14;
  wire nCS1_15;
  wire nCS1_16;
  wire nCS1_17;
  wire nCS1_18;
  wire nCS1_19;
  wire nCS1_20;
  wire tmp_874;
  wire nCS1_21;
  wire tmp_875;
  reg  tmp_876;
  reg  nCS1_22;
  wire tmp_877;
  wire tmp_878;
  wire tmp_879;
  wire tmp_880;
  wire tmp_881;
  wire tmp_882;
  wire tmp_883;
  wire tmp_884;
  wire tmp_885;
  wire tmp_886;
  wire tmp_887;
  reg  tmp_888;
  wire tmp_889;
  wire tmp_890;
  wire tmp_891;
  wire tmp_892;
  wire tmp_893;
  wire tmp_894;
  wire tmp_895;
  wire tmp_896;
  wire tmp_897;
  reg  tmp_898;
  wire tmp_899;
  wire tmp_900;
  reg  tmp_901;
  reg  tmp_902;
  reg  nCS1_23;
  reg [4:0] is_SPI_MNGR_85;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire nCS2_reg_ctrl_const_out;
  wire nCS2_reg_Initial_Val_out;
  wire nCS2_1;
  wire nCS2_2;
  wire nCS2_3;
  wire nCS2_4;
  wire nCS2_5;
  wire nCS2_6;
  wire nCS2_7;
  wire nCS2_8;
  wire nCS2_9;
  reg  s_790;
  wire nCS2_10;
  wire nCS2_11;
  wire nCS2_12;
  wire nCS2_13;
  wire nCS2_14;
  wire nCS2_15;
  wire nCS2_16;
  wire nCS2_17;
  wire nCS2_18;
  wire nCS2_19;
  wire nCS2_20;
  wire tmp_903;
  wire nCS2_21;
  wire tmp_904;
  reg  tmp_905;
  reg  nCS2_22;
  wire tmp_906;
  wire tmp_907;
  wire tmp_908;
  wire tmp_909;
  wire tmp_910;
  wire tmp_911;
  wire tmp_912;
  wire tmp_913;
  wire tmp_914;
  wire tmp_915;
  wire tmp_916;
  reg  tmp_917;
  wire tmp_918;
  wire tmp_919;
  wire tmp_920;
  wire tmp_921;
  wire tmp_922;
  wire tmp_923;
  wire tmp_924;
  wire tmp_925;
  wire tmp_926;
  reg  tmp_927;
  wire tmp_928;
  wire tmp_929;
  reg  tmp_930;
  reg  tmp_931;
  reg  nCS2_23;
  reg [4:0] is_SPI_MNGR_86;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire nCS3_reg_ctrl_const_out;
  wire nCS3_reg_Initial_Val_out;
  wire nCS3_1;
  wire nCS3_2;
  wire nCS3_3;
  wire nCS3_4;
  wire nCS3_5;
  wire nCS3_6;
  wire nCS3_7;
  wire nCS3_8;
  wire nCS3_9;
  reg  s_791;
  wire nCS3_10;
  wire nCS3_11;
  wire nCS3_12;
  wire nCS3_13;
  wire nCS3_14;
  wire nCS3_15;
  wire nCS3_16;
  wire nCS3_17;
  wire nCS3_18;
  wire nCS3_19;
  wire nCS3_20;
  wire tmp_932;
  wire nCS3_21;
  wire tmp_933;
  reg  tmp_934;
  reg  nCS3_22;
  wire tmp_935;
  wire tmp_936;
  wire tmp_937;
  wire tmp_938;
  wire tmp_939;
  wire tmp_940;
  wire tmp_941;
  wire tmp_942;
  wire tmp_943;
  wire tmp_944;
  wire tmp_945;
  reg  tmp_946;
  wire tmp_947;
  wire tmp_948;
  wire tmp_949;
  wire tmp_950;
  wire tmp_951;
  wire tmp_952;
  wire tmp_953;
  wire tmp_954;
  wire tmp_955;
  reg  tmp_956;
  wire tmp_957;
  wire tmp_958;
  reg  tmp_959;
  reg  tmp_960;
  reg  nCS3_23;
  reg [4:0] is_SPI_MNGR_87;  // enum type state_type_is_SPI_MNGR (17 enums)
  wire nCS4_reg_ctrl_const_out;
  wire nCS4_reg_Initial_Val_out;
  wire nCS4_1;
  wire nCS4_2;
  wire nCS4_3;
  wire nCS4_4;
  wire nCS4_5;
  wire nCS4_6;
  wire nCS4_7;
  wire nCS4_8;
  wire nCS4_9;
  reg  s_792;
  wire nCS4_10;
  wire nCS4_11;
  wire nCS4_12;
  wire nCS4_13;
  wire nCS4_14;
  wire nCS4_15;
  wire nCS4_16;
  wire nCS4_17;
  wire nCS4_18;
  wire nCS4_19;
  wire nCS4_20;
  wire tmp_961;
  wire nCS4_21;
  wire tmp_962;
  reg  tmp_963;
  reg  nCS4_22;
  wire tmp_964;
  wire tmp_965;
  wire tmp_966;
  wire tmp_967;
  wire tmp_968;
  wire tmp_969;
  wire tmp_970;
  wire tmp_971;
  wire tmp_972;
  wire tmp_973;
  wire tmp_974;
  reg  tmp_975;
  wire tmp_976;
  wire tmp_977;
  wire tmp_978;
  wire tmp_979;
  wire tmp_980;
  wire tmp_981;
  wire tmp_982;
  wire tmp_983;
  wire tmp_984;
  reg  tmp_985;
  wire tmp_986;
  wire tmp_987;
  reg  tmp_988;
  reg  tmp_989;
  reg  nCS4_23;
  reg [15:0] p195_tmp;  // uint16
  reg [15:0] p192_tmp;  // uint16
  reg [15:0] p177_tmp;  // uint16
  reg [4:0] p144_tmp;  // enum type state_type_is_SPI_MNGR (17 enums)
  reg  p1534_sel_1;
  reg  p1515_sel_2;
  reg  p1168_sel_2;
  reg  p1113_sel_2;
  reg  p1058_sel_2;
  reg [15:0] p165_tmp;  // uint16
  reg signed [31:0] p4000_sel_1;  // int32
  reg [15:0] p168_tmp;  // uint16
  reg signed [31:0] p3411_sel_1;  // int32
  reg [15:0] p162_tmp;  // uint16
  reg signed [31:0] p5102_sel_1;  // int32
  reg [15:0] p159_tmp;  // uint16
  reg signed [31:0] p3544_sel_1;  // int32
  reg [15:0] p156_tmp;  // uint16
  reg signed [31:0] p3924_sel_1;  // int32
  reg [15:0] p153_tmp;  // uint16
  reg signed [31:0] p3506_sel_1;  // int32
  reg [15:0] p150_tmp;  // uint16
  reg signed [31:0] p3791_sel_1;  // int32
  reg [15:0] p147_tmp;  // uint16
  reg signed [31:0] p4931_sel_1;  // int32
  reg signed [31:0] rd_182_t_0_1;  // int32
  reg signed [31:0] rd_182_t_1;  // int32
  reg signed [31:0] p2347_sel_1;  // int32
  reg signed [31:0] p2670_sel_1;  // int32
  reg signed [31:0] p2442_sel_1;  // int32
  reg signed [31:0] p2727_sel_1;  // int32
  reg signed [31:0] p3297_sel_1;  // int32
  reg signed [31:0] p1872_sel_1;  // int32
  reg signed [31:0] p2366_sel_1;  // int32
  reg signed [31:0] p3259_sel_1;  // int32
  reg signed [31:0] p3677_sel_1;  // int32
  reg signed [31:0] p3392_sel_1;  // int32
  reg signed [31:0] p5064_sel_1;  // int32
  reg signed [31:0] p4855_sel_1;  // int32
  reg signed [31:0] p4190_sel_1;  // int32
  reg signed [31:0] p4684_sel_1;  // int32
  reg signed [31:0] p3525_sel_1;  // int32
  reg signed [31:0] p4741_sel_1;  // int32
  reg signed [31:0] rd_214_t_0_1;  // int32
  reg signed [31:0] rd_214_t_1;  // int32
  reg signed [31:0] p2803_sel_1;  // int32
  reg signed [31:0] p2176_sel_1;  // int32
  reg signed [31:0] p1625_sel_1;  // int32
  reg signed [31:0] p3031_sel_1;  // int32
  reg signed [31:0] p2138_sel_1;  // int32
  reg signed [31:0] p1758_sel_1;  // int32
  reg signed [31:0] p2936_sel_1;  // int32
  reg signed [31:0] p2822_sel_1;  // int32
  reg signed [31:0] p4722_sel_1;  // int32
  reg signed [31:0] p4019_sel_1;  // int32
  reg signed [31:0] p4912_sel_1;  // int32
  reg signed [31:0] p4342_sel_1;  // int32
  reg signed [31:0] p4038_sel_1;  // int32
  reg signed [31:0] p4057_sel_1;  // int32
  reg signed [31:0] p3449_sel_1;  // int32
  reg signed [31:0] p4969_sel_1;  // int32
  reg signed [31:0] rd_246_t_0_1;  // int32
  reg signed [31:0] rd_246_t_1;  // int32
  reg signed [31:0] p2024_sel_1;  // int32
  reg signed [31:0] p3240_sel_1;  // int32
  reg signed [31:0] p3202_sel_1;  // int32
  reg signed [31:0] p1891_sel_1;  // int32
  reg signed [31:0] p2423_sel_1;  // int32
  reg signed [31:0] p1568_sel_1;  // int32
  reg signed [31:0] p3335_sel_1;  // int32
  reg signed [31:0] p2100_sel_1;  // int32
  reg signed [31:0] p3829_sel_1;  // int32
  reg signed [31:0] p4513_sel_1;  // int32
  reg signed [31:0] p5045_sel_1;  // int32
  reg signed [31:0] p5178_sel_1;  // int32
  reg signed [31:0] p3696_sel_1;  // int32
  reg signed [31:0] p4817_sel_1;  // int32
  reg signed [31:0] p4228_sel_1;  // int32
  reg signed [31:0] p4988_sel_1;  // int32
  reg signed [31:0] rd_278_t_0_1;  // int32
  reg signed [31:0] rd_278_t_1;  // int32
  reg signed [31:0] p2480_sel_1;  // int32
  reg signed [31:0] p2651_sel_1;  // int32
  reg signed [31:0] p2974_sel_1;  // int32
  reg signed [31:0] p3145_sel_1;  // int32
  reg signed [31:0] p1834_sel_1;  // int32
  reg signed [31:0] p2917_sel_1;  // int32
  reg signed [31:0] p2195_sel_1;  // int32
  reg signed [31:0] p2955_sel_1;  // int32
  reg signed [31:0] p4418_sel_1;  // int32
  reg signed [31:0] p4247_sel_1;  // int32
  reg signed [31:0] p4095_sel_1;  // int32
  reg signed [31:0] p5083_sel_1;  // int32
  reg signed [31:0] p4114_sel_1;  // int32
  reg signed [31:0] p4703_sel_1;  // int32
  reg signed [31:0] p3563_sel_1;  // int32
  reg signed [31:0] p4760_sel_1;  // int32
  reg signed [31:0] rd_310_t_0_1;  // int32
  reg signed [31:0] rd_310_t_1;  // int32
  reg signed [31:0] p3069_sel_1;  // int32
  reg signed [31:0] p2404_sel_1;  // int32
  reg signed [31:0] p2081_sel_1;  // int32
  reg signed [31:0] p2271_sel_1;  // int32
  reg signed [31:0] p1644_sel_1;  // int32
  reg signed [31:0] p1682_sel_1;  // int32
  reg signed [31:0] p3373_sel_1;  // int32
  reg signed [31:0] p1910_sel_1;  // int32
  reg signed [31:0] p3715_sel_1;  // int32
  reg signed [31:0] p3753_sel_1;  // int32
  reg signed [31:0] p4950_sel_1;  // int32
  reg signed [31:0] p4304_sel_1;  // int32
  reg signed [31:0] p3658_sel_1;  // int32
  reg signed [31:0] p5159_sel_1;  // int32
  reg signed [31:0] p4209_sel_1;  // int32
  reg signed [31:0] p4266_sel_1;  // int32
  reg signed [31:0] rd_342_t_0_1;  // int32
  reg signed [31:0] rd_342_t_1;  // int32
  reg signed [31:0] p2214_sel_1;  // int32
  reg signed [31:0] p2613_sel_1;  // int32
  reg signed [31:0] p2860_sel_1;  // int32
  reg signed [31:0] p2290_sel_1;  // int32
  reg signed [31:0] p1606_sel_1;  // int32
  reg signed [31:0] p3126_sel_1;  // int32
  reg signed [31:0] p2328_sel_1;  // int32
  reg signed [31:0] p1986_sel_1;  // int32
  reg signed [31:0] p5197_sel_1;  // int32
  reg signed [31:0] p5026_sel_1;  // int32
  reg signed [31:0] p3468_sel_1;  // int32
  reg signed [31:0] p4494_sel_1;  // int32
  reg signed [31:0] p4475_sel_1;  // int32
  reg signed [31:0] p4076_sel_1;  // int32
  reg signed [31:0] p3601_sel_1;  // int32
  reg signed [31:0] p4361_sel_1;  // int32
  reg signed [31:0] rd_374_t_0_1;  // int32
  reg signed [31:0] rd_374_t_1;  // int32
  reg signed [31:0] p3088_sel_1;  // int32
  reg signed [31:0] p2784_sel_1;  // int32
  reg signed [31:0] p3050_sel_1;  // int32
  reg signed [31:0] p2746_sel_1;  // int32
  reg signed [31:0] p2005_sel_1;  // int32
  reg signed [31:0] p2119_sel_1;  // int32
  reg signed [31:0] p2594_sel_1;  // int32
  reg signed [31:0] p1739_sel_1;  // int32
  reg signed [31:0] p4437_sel_1;  // int32
  reg signed [31:0] p4836_sel_1;  // int32
  reg signed [31:0] p3943_sel_1;  // int32
  reg signed [31:0] p5140_sel_1;  // int32
  reg signed [31:0] p3848_sel_1;  // int32
  reg signed [31:0] p4646_sel_1;  // int32
  reg signed [31:0] p3582_sel_1;  // int32
  reg signed [31:0] p4380_sel_1;  // int32
  reg signed [31:0] rd_406_t_0_1;  // int32
  reg signed [31:0] rd_406_t_1;  // int32
  reg signed [31:0] p2499_sel_1;  // int32
  reg signed [31:0] p3316_sel_1;  // int32
  reg signed [31:0] p2385_sel_1;  // int32
  reg signed [31:0] p1929_sel_1;  // int32
  reg signed [31:0] p2252_sel_1;  // int32
  reg signed [31:0] p1720_sel_1;  // int32
  reg signed [31:0] p1815_sel_1;  // int32
  reg signed [31:0] p1796_sel_1;  // int32
  reg signed [31:0] p4798_sel_1;  // int32
  reg signed [31:0] p4589_sel_1;  // int32
  reg signed [31:0] p3867_sel_1;  // int32
  reg signed [31:0] p4665_sel_1;  // int32
  reg signed [31:0] p3962_sel_1;  // int32
  reg signed [31:0] p4551_sel_1;  // int32
  reg signed [31:0] p3810_sel_1;  // int32
  reg signed [31:0] p4285_sel_1;  // int32
  reg signed [31:0] rd_438_t_0_1;  // int32
  reg signed [31:0] rd_438_t_1;  // int32
  reg signed [31:0] p1701_sel_1;  // int32
  reg signed [31:0] p3221_sel_1;  // int32
  reg signed [31:0] p2309_sel_1;  // int32
  reg signed [31:0] p2632_sel_1;  // int32
  reg signed [31:0] p2879_sel_1;  // int32
  reg signed [31:0] p1777_sel_1;  // int32
  reg signed [31:0] p2518_sel_1;  // int32
  reg signed [31:0] p2043_sel_1;  // int32
  reg signed [31:0] p4152_sel_1;  // int32
  reg signed [31:0] p4171_sel_1;  // int32
  reg signed [31:0] p4399_sel_1;  // int32
  reg signed [31:0] p4323_sel_1;  // int32
  reg signed [31:0] p4874_sel_1;  // int32
  reg signed [31:0] p4532_sel_1;  // int32
  reg signed [31:0] p3639_sel_1;  // int32
  reg signed [31:0] p4779_sel_1;  // int32
  reg signed [31:0] rd_470_t_0_1;  // int32
  reg signed [31:0] rd_470_t_1;  // int32
  reg signed [31:0] p2708_sel_1;  // int32
  reg signed [31:0] p1948_sel_1;  // int32
  reg signed [31:0] p1967_sel_1;  // int32
  reg signed [31:0] p3012_sel_1;  // int32
  reg signed [31:0] p2461_sel_1;  // int32
  reg signed [31:0] p2993_sel_1;  // int32
  reg signed [31:0] p3164_sel_1;  // int32
  reg signed [31:0] p2062_sel_1;  // int32
  reg signed [31:0] p3981_sel_1;  // int32
  reg signed [31:0] p4627_sel_1;  // int32
  reg signed [31:0] p3886_sel_1;  // int32
  reg signed [31:0] p4570_sel_1;  // int32
  reg signed [31:0] p4133_sel_1;  // int32
  reg signed [31:0] p3905_sel_1;  // int32
  reg signed [31:0] p3734_sel_1;  // int32
  reg signed [31:0] p4456_sel_1;  // int32
  reg signed [31:0] rd_502_t_0_1;  // int32
  reg signed [31:0] rd_502_t_1;  // int32
  reg signed [31:0] p2841_sel_1;  // int32
  reg signed [31:0] p2537_sel_1;  // int32
  reg signed [31:0] p2575_sel_1;  // int32
  reg signed [31:0] p2556_sel_1;  // int32
  reg signed [31:0] p1663_sel_1;  // int32
  reg signed [31:0] p3107_sel_1;  // int32
  reg signed [31:0] p2157_sel_1;  // int32
  reg signed [31:0] p2233_sel_1;  // int32
  reg signed [31:0] p3430_sel_1;  // int32
  reg signed [31:0] p5007_sel_1;  // int32
  reg signed [31:0] p5121_sel_1;  // int32
  reg signed [31:0] p3487_sel_1;  // int32
  reg signed [31:0] p3772_sel_1;  // int32
  reg signed [31:0] p4893_sel_1;  // int32
  reg signed [31:0] p3620_sel_1;  // int32
  reg signed [31:0] p4608_sel_1;  // int32
  reg signed [31:0] rd_534_t_0_1;  // int32
  reg signed [31:0] rd_534_t_1;  // int32
  reg signed [31:0] p1853_sel_1;  // int32
  reg signed [31:0] p2765_sel_1;  // int32
  reg signed [31:0] p3183_sel_1;  // int32
  reg signed [31:0] p2689_sel_1;  // int32
  reg signed [31:0] p2898_sel_1;  // int32
  reg signed [31:0] p3354_sel_1;  // int32
  reg signed [31:0] p3278_sel_1;  // int32
  reg signed [31:0] p1587_sel_1;  // int32
  reg [7:0] p1204_sel_1;  // uint8
  reg  p1187_sel_2;
  reg [7:0] p1149_sel_1;  // uint8
  reg  p1132_sel_2;
  reg [7:0] p1094_sel_1;  // uint8
  reg  p1077_sel_2;
  reg [7:0] p1039_sel_1;  // uint8
  reg  p1022_sel_2;
  reg [7:0] p973_sel_1;  // uint8
  reg  p956_sel_2;
  reg [7:0] p907_sel_1;  // uint8
  reg  p890_sel_2;
  reg [7:0] p841_sel_1;  // uint8
  reg  p824_sel_2;
  reg [7:0] p775_sel_1;  // uint8
  reg  p758_sel_2;
  reg [7:0] p709_sel_1;  // uint8
  reg  p692_sel_2;
  reg [7:0] p643_sel_1;  // uint8
  reg  p626_sel_2;
  reg [7:0] p577_sel_1;  // uint8
  reg  p560_sel_2;
  reg [7:0] p511_sel_1;  // uint8
  reg  p494_sel_2;
  reg signed [31:0] rd_539_t_0_1;  // int32
  reg signed [31:0] rd_539_t_1;  // int32
  reg [7:0] p1166cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p1111cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p1056cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p990cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p924cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p858cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p792cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p726cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p660cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p594cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p528cont_bits_cont_bits [0:11];  // uint8 [12]
  reg [7:0] p358tmp_tmp [0:11];  // uint8 [12]
  reg signed [31:0] p5436_sel_1;  // int32
  reg signed [31:0] p5216_sel_1;  // int32
  reg  p1011_sel_1;
  reg  p992_sel_2;
  reg signed [31:0] p5416_sel_1;  // int32
  reg  p945_sel_1;
  reg  p926_sel_2;
  reg signed [31:0] p5396_sel_1;  // int32
  reg  p879_sel_1;
  reg  p860_sel_2;
  reg signed [31:0] p5376_sel_1;  // int32
  reg  p813_sel_1;
  reg  p794_sel_2;
  reg signed [31:0] p5356_sel_1;  // int32
  reg  p747_sel_1;
  reg  p728_sel_2;
  reg signed [31:0] p5336_sel_1;  // int32
  reg  p681_sel_1;
  reg  p662_sel_2;
  reg signed [31:0] p5316_sel_1;  // int32
  reg  p615_sel_1;
  reg  p596_sel_2;
  reg signed [31:0] p5296_sel_1;  // int32
  reg  p549_sel_1;
  reg  p530_sel_2;
  reg signed [31:0] p5276_sel_1;  // int32
  reg  p483_sel_1;
  reg  p464_sel_2;
  reg signed [31:0] p5256_sel_1;  // int32
  reg  p280_sel_1;
  reg  p261_sel_2;
  reg signed [31:0] p5236_sel_1;  // int32
  reg  p249_sel_1;
  reg  p230_sel_2;
  reg  p218_sel_1;
  reg  p199_sel_2;
  reg  [15:0] p1514payload_payload;  // boolean [16]
  reg  [15:0] p1167payload_payload;  // boolean [16]
  reg  [15:0] p1112payload_payload;  // boolean [16]
  reg  [15:0] p1057payload_payload;  // boolean [16]
  reg  [15:0] p991payload_payload;  // boolean [16]
  reg  [15:0] p925payload_payload;  // boolean [16]
  reg  [15:0] p859payload_payload;  // boolean [16]
  reg  [15:0] p793payload_payload;  // boolean [16]
  reg  [15:0] p727payload_payload;  // boolean [16]
  reg  [15:0] p661payload_payload;  // boolean [16]
  reg  [15:0] p595payload_payload;  // boolean [16]
  reg  [15:0] p529payload_payload;  // boolean [16]
  reg  [15:0] p463payload_payload;  // boolean [16]
  reg  [15:0] p260payload_payload;  // boolean [16]
  reg  [15:0] p229payload_payload;  // boolean [16]
  reg  [15:0] p198tmp_tmp;  // boolean [16]
  reg signed [31:0] p1546_sel_1;  // int32
  reg  p171_tmp;
  reg  p174_tmp;
  reg  p180_tmp;
  reg  p183_tmp;
  reg  p186_tmp;
  reg  p189_tmp;


  assign is_SPI_MNGR_reg_ctrl_const_out = 1'b1;

  // Entry 'toBsend_CH_A'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_4'
  // case IN_toBsend_v3_4:
  // Gateway: SPI_DAC/SPI_MNGR
  // During: SPI_DAC/SPI_MNGR
  assign is_SPI_MNGR = state_type_is_SPI_MNGR_IN_toBsend_CH_B;
  assign is_SPI_MNGR_1 = state_type_is_SPI_MNGR_IN_toBsend_CH_B;

  assign is_SPI_MNGR_2 = state_type_is_SPI_MNGR_IN_toBsend_CH_A;

  assign is_SPI_MNGR_3 = state_type_is_SPI_MNGR_IN_toBsend_CH_B;

  assign is_SPI_MNGR_4 = state_type_is_SPI_MNGR_IN_toBsend_CH_A;

  assign is_SPI_MNGR_5 = state_type_is_SPI_MNGR_IN_toBsend_CH_B;

  assign is_SPI_MNGR_6 = state_type_is_SPI_MNGR_IN_toBsend_CH_A;

  assign is_SPI_MNGR_7 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_8 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign cnt_clk_reg_ctrl_const_out = 1'b1;

  assign cnt_clk_reg_Initial_Val_out = 16'b0000000000000001;

  assign cnt_clk = 16'd1;

  // Entry 'toBsend_CH_A'
  // Transition
  // Transition
  // During 'toBsend_v1_1'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // During 'toBsend_CH_B'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // During 'toBsend_CH_A'
  // Entry 'sender_pre_SCK'
  // Transition
  assign s = 16'd1;
  assign cnt_clk_1 = 16'd1;

  // Transition
  // Entry 'sender_at_SCK'
  // Transition
  // Transition
  // During 'sender_pre_SCK'
  // Entry 'sender_at_SCK1'
  // Transition
  assign s_1 = 16'd1;
  // Transition
  // Transition
  // Transition
  // Transition
  // Entry 'sender_at_SCK'
  // Transition
  assign s_2 = 16'd1;
  assign cnt_clk_2 = 16'd1;

  assign cnt_clk_3 = 16'd1;

  // Transition
  // Transition
  // During 'sender_at_SCK'
  // Entry 'off'
  // Transition
  // During 'on'
  // Entry 'toBsend_v1_1'
  // Transition
  // Entry 'toBsend_v1_2'
  // Transition
  // Entry 'toBsend_v2_1'
  // Transition
  // Entry 'toBsend_v2_2'
  // Transition
  // Entry 'toBsend_v3_1'
  // Transition
  // Entry 'toBsend_v3_2'
  // Transition
  // Entry 'toBsend_v3_3'
  // Transition
  // Entry 'toBsend_v3_4'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'off'
  // Transition
  assign s_3 = 16'd1;
  // Transition
  // Entry 'on'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'NOP1'
  // Entry 'sender_at_SCK1'
  // Transition
  // Entry 'NOP'
  // Transition
  assign s_4 = 16'd1;
  assign cnt_clk_4 = 16'd1;

  assign is_SPI_MNGR_9 = state_type_is_SPI_MNGR_IN_sender_at_SCK;

  assign is_SPI_MNGR_10 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_11 = state_type_is_SPI_MNGR_IN_NOP1;

  assign is_SPI_MNGR_12 = state_type_is_SPI_MNGR_IN_sender_at_SCK1;

  assign is_SPI_MNGR_13 = state_type_is_SPI_MNGR_IN_sender_at_SCK;

  assign cnt_reg_ctrl_const_out = 1'b1;

  assign cnt_reg_Initial_Val_out = 16'b0000000000000001;

  // Transition
  // Transition
  // Transition
  // Transition
  // During 'sender_at_SCK1'
  // Entry 'NOP'
  // Transition
  // Entry 'sender_pre_SCK'
  assign s_5 = 16'd1;
  assign cnt = 16'd1;

  assign is_SPI_MNGR_14 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_15 = state_type_is_SPI_MNGR_IN_NOP;

  assign is_SPI_MNGR_16 = state_type_is_SPI_MNGR_IN_off;

  assign selector_reg_ctrl_const_out = 1'b1;

  assign selector_reg_Initial_Val_out = 16'b0000000000000001;

  assign selector = 16'd1;

  // Transition
  // Entry 'toBsend_v1_1'
  // Transition
  // Entry 'toBsend_v1_2'
  // Transition
  // Entry 'toBsend_v2_1'
  // Transition
  // Entry 'toBsend_v2_2'
  // Transition
  // Entry 'toBsend_v3_1'
  // Transition
  // Entry 'toBsend_v3_2'
  // Transition
  // Entry 'toBsend_v3_3'
  // Transition
  // Entry 'toBsend_v3_4'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  assign s_6 = 16'd1;
  assign is_SPI_MNGR_17 = state_type_is_SPI_MNGR_IN_toBsend_v3_4;

  assign is_SPI_MNGR_18 = state_type_is_SPI_MNGR_IN_toBsend_v3_3;

  assign is_SPI_MNGR_19 = state_type_is_SPI_MNGR_IN_toBsend_v3_2;

  assign is_SPI_MNGR_20 = state_type_is_SPI_MNGR_IN_toBsend_v3_1;

  assign is_SPI_MNGR_21 = state_type_is_SPI_MNGR_IN_toBsend_v2_2;

  assign is_SPI_MNGR_22 = state_type_is_SPI_MNGR_IN_toBsend_v2_1;

  assign is_SPI_MNGR_23 = state_type_is_SPI_MNGR_IN_toBsend_v1_2;

  assign is_SPI_MNGR_24 = state_type_is_SPI_MNGR_IN_toBsend_v1_1;

  assign is_SPI_MNGR_25 = state_type_is_SPI_MNGR_IN_on;

  assign is_SPI_MNGR_26 = state_type_is_SPI_MNGR_IN_toBsend_v3_4;

  assign is_SPI_MNGR_27 = state_type_is_SPI_MNGR_IN_toBsend_v3_3;

  assign is_SPI_MNGR_28 = state_type_is_SPI_MNGR_IN_toBsend_v3_2;

  assign is_SPI_MNGR_29 = state_type_is_SPI_MNGR_IN_toBsend_v3_1;

  assign is_SPI_MNGR_30 = state_type_is_SPI_MNGR_IN_toBsend_v2_2;

  assign is_SPI_MNGR_31 = state_type_is_SPI_MNGR_IN_toBsend_v2_1;

  assign is_SPI_MNGR_32 = state_type_is_SPI_MNGR_IN_toBsend_v1_2;

  assign is_SPI_MNGR_33 = state_type_is_SPI_MNGR_IN_toBsend_v1_1;

  assign is_SPI_MNGR_34 = state_type_is_SPI_MNGR_IN_NOP1;

  assign is_SPI_MNGR_35 = state_type_is_SPI_MNGR_IN_NOP;

  assign is_SPI_MNGR_36 = state_type_is_SPI_MNGR_IN_sender_at_SCK1;

  assign is_SPI_MNGR_reg_Initial_Val_out = state_type_is_SPI_MNGR_IN_on;

  assign is_SPI_MNGR_37 = state_type_is_SPI_MNGR_IN_toBsend_CH_A;

  assign tmp = (s_7 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_35);

  assign tmp_1 = (s_8 == 1'b0 ? tmp :
              is_SPI_MNGR_36);

  always @(posedge clk)
    begin : rd_0_process
      if (rst == 1'b1) begin
        tmp_2 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          tmp_2 <= tmp_1;
        end
      end
    end

  assign tmp_4 = tmp_3 == 16'd7;

  assign tmp_5 = (tmp_4 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_26);

  assign tmp_6 = tmp_3 == 16'd8;

  assign tmp_7 = (tmp_6 == 1'b0 ? tmp_5 :
              is_SPI_MNGR_27);

  assign tmp_8 = tmp_3 == 16'd6;

  assign tmp_9 = (tmp_8 == 1'b0 ? tmp_7 :
              is_SPI_MNGR_28);

  assign tmp_10 = tmp_3 == 16'd5;

  assign tmp_11 = (tmp_10 == 1'b0 ? tmp_9 :
              is_SPI_MNGR_29);

  assign tmp_12 = tmp_3 == 16'd4;

  assign tmp_13 = (tmp_12 == 1'b0 ? tmp_11 :
              is_SPI_MNGR_30);

  assign tmp_14 = tmp_3 == 16'd3;

  assign tmp_15 = (tmp_14 == 1'b0 ? tmp_13 :
              is_SPI_MNGR_31);

  assign tmp_16 = tmp_3 == 16'd2;

  assign tmp_17 = (tmp_16 == 1'b0 ? tmp_15 :
              is_SPI_MNGR_32);

  assign tmp_18 = tmp_3 == 16'd1;

  assign tmp_19 = (tmp_18 == 1'b0 ? tmp_17 :
              is_SPI_MNGR_33);

  assign tmp_20 = (s_9 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_25);

  assign tmp_21 = (s_10 == 1'b0 ? tmp_20 :
              tmp_19);

  assign tmp_22 = (s_11 == 1'b0 ? is_SPI_MNGR_38 :
              tmp_21);

  always @(posedge clk)
    begin : rd_1_process
      if (rst == 1'b1) begin
        tmp_23 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          tmp_23 <= tmp_22;
        end
      end
    end

  always @(posedge clk)
    begin : rd_2_process
      if (rst == 1'b1) begin
        s_13 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_13 <= s_12;
        end
      end
    end

  assign tmp_24 = (s_13 == 1'b0 ? tmp_23 :
              is_SPI_MNGR_34);

  assign s_14 = selector_1 == 16'd7;

  assign tmp_25 = (s_14 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_17);

  assign s_15 = selector_1 == 16'd8;

  assign tmp_26 = (s_15 == 1'b0 ? tmp_25 :
              is_SPI_MNGR_18);

  assign s_16 = selector_1 == 16'd6;

  assign tmp_27 = (s_16 == 1'b0 ? tmp_26 :
              is_SPI_MNGR_19);

  assign s_17 = selector_1 == 16'd5;

  assign tmp_28 = (s_17 == 1'b0 ? tmp_27 :
              is_SPI_MNGR_20);

  assign s_18 = selector_1 == 16'd4;

  assign tmp_29 = (s_18 == 1'b0 ? tmp_28 :
              is_SPI_MNGR_21);

  assign s_19 = selector_1 == 16'd3;

  assign tmp_30 = (s_19 == 1'b0 ? tmp_29 :
              is_SPI_MNGR_22);

  assign s_20 = selector_1 == 16'd2;

  assign tmp_31 = (s_20 == 1'b0 ? tmp_30 :
              is_SPI_MNGR_23);

  assign adder_1 = {1'b0, selector_1};
  assign adder_2 = {1'b0, s_6};
  assign adder_add_temp = adder_1 + adder_2;
  assign tmp_3 = (adder_add_temp[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp[15:0]);

  assign s_9 = selector_1 == 16'd8;

  assign tmp_32 = (s_9 == 1'b0 ? selector_1 :
              selector);

  assign s_10 = selector_1 < 16'd8;

  assign tmp_33 = (s_10 == 1'b0 ? tmp_32 :
              tmp_3);

  assign tmp_34 = (s_11 == 1'b0 ? selector_1 :
              tmp_33);

  assign tmp_35 = (s_12 == 1'b0 ? tmp_34 :
              selector_1);

  always @(is_SPI_MNGR_38, selector_1, tmp_35) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p195_tmp = tmp_35;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p195_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p195_tmp = selector_1;
        end
      default :
        begin
          p195_tmp = selector_1;
        end
    endcase
    tmp_36 = p195_tmp;
  end

  always @(posedge clk)
    begin : rd_3_process
      if (rst == 1'b1) begin
        tmp_37 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_37 <= tmp_36;
        end
      end
    end

  assign selector_1 = (selector_reg_ctrl_const_out == 1'b0 ? selector_reg_Initial_Val_out :
              tmp_37);

  assign s_21 = selector_1 == 16'd1;

  assign tmp_38 = (s_21 == 1'b0 ? tmp_31 :
              is_SPI_MNGR_24);

  always @(posedge clk)
    begin : rd_4_process
      if (rst == 1'b1) begin
        tmp_39 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          tmp_39 <= tmp_38;
        end
      end
    end

  assign adder_4 = {1'b0, cnt_1};
  assign adder_5 = {1'b0, s_5};
  assign adder_add_temp_1 = adder_4 + adder_5;
  assign tmp_40 = (adder_add_temp_1[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_1[15:0]);

  assign tmp_41 = (s_22 == 1'b0 ? tmp_40 :
              cnt);

  assign tmp_42 = (s_23 == 1'b0 ? cnt_1 :
              tmp_41);

  always @(cnt_1, is_SPI_MNGR_38, tmp_42) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p192_tmp = tmp_42;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p192_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p192_tmp = cnt_1;
        end
      default :
        begin
          p192_tmp = cnt_1;
        end
    endcase
    tmp_43 = p192_tmp;
  end

  always @(posedge clk)
    begin : rd_5_process
      if (rst == 1'b1) begin
        tmp_44 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_44 <= tmp_43;
        end
      end
    end

  assign cnt_1 = (cnt_reg_ctrl_const_out == 1'b0 ? cnt_reg_Initial_Val_out :
              tmp_44);

  assign s_22 = cnt_1 >= 16'd16;

  assign tmp_45 = (s_22 == 1'b0 ? is_SPI_MNGR_14 :
              is_SPI_MNGR_15);

  assign tmp_46 = (s_24 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_13);

  assign tmp_47 = (s_23 == 1'b0 ? tmp_46 :
              tmp_45);

  always @(posedge clk)
    begin : rd_6_process
      if (rst == 1'b1) begin
        tmp_48 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          tmp_48 <= tmp_47;
        end
      end
    end

  assign tmp_49 = (s_25 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_11);

  assign tmp_50 = (s_26 == 1'b0 ? tmp_49 :
              is_SPI_MNGR_12);

  always @(posedge clk)
    begin : rd_7_process
      if (rst == 1'b1) begin
        tmp_51 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          tmp_51 <= tmp_50;
        end
      end
    end

  assign tmp_52 = (s_27 == 1'b0 ? is_SPI_MNGR_38 :
              is_SPI_MNGR_9);

  assign adder_7 = {1'b0, cnt_clk_5};
  assign adder_8 = {1'b0, s_4};
  assign adder_add_temp_2 = adder_7 + adder_8;
  assign tmp_53 = (adder_add_temp_2[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_2[15:0]);

  assign s_7 = cnt_clk_5 <= 16'd2;

  assign tmp_54 = (s_7 == 1'b0 ? cnt_clk_5 :
              tmp_53);

  assign s_8 = cnt_clk_5 > 16'd2;

  assign tmp_55 = (s_8 == 1'b0 ? tmp_54 :
              cnt_clk_4);

  assign adder_10 = {1'b0, cnt_clk_5};
  assign adder_11 = {1'b0, s_3};
  assign adder_add_temp_3 = adder_10 + adder_11;
  assign tmp_56 = (adder_add_temp_3[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_3[15:0]);

  assign s_11 = cnt_clk_5 > 16'd6;

  assign tmp_57 = (s_11 == 1'b0 ? cnt_clk_5 :
              cnt_clk_3);

  assign s_12 = cnt_clk_5 <= 16'd6;

  assign tmp_58 = (s_12 == 1'b0 ? tmp_57 :
              tmp_56);

  assign adder_13 = {1'b0, cnt_clk_5};
  assign adder_14 = {1'b0, s_2};
  assign adder_add_temp_4 = adder_13 + adder_14;
  assign tmp_59 = (adder_add_temp_4[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_4[15:0]);

  assign s_24 = cnt_clk_5 <= 16'd2;

  assign tmp_60 = (s_24 == 1'b0 ? cnt_clk_5 :
              tmp_59);

  assign s_23 = cnt_clk_5 > 16'd2;

  assign tmp_61 = (s_23 == 1'b0 ? tmp_60 :
              cnt_clk_2);

  assign adder_16 = {1'b0, cnt_clk_5};
  assign adder_17 = {1'b0, s_1};
  assign adder_add_temp_5 = adder_16 + adder_17;
  assign tmp_62 = (adder_add_temp_5[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_5[15:0]);

  assign s_25 = cnt_clk_5 > 16'd2;

  assign tmp_63 = (s_25 == 1'b0 ? cnt_clk_5 :
              cnt_clk_1);

  assign s_26 = cnt_clk_5 <= 16'd2;

  assign tmp_64 = (s_26 == 1'b0 ? tmp_63 :
              tmp_62);

  assign adder_19 = {1'b0, cnt_clk_5};
  assign adder_20 = {1'b0, s};
  assign adder_add_temp_6 = adder_19 + adder_20;
  assign tmp_65 = (adder_add_temp_6[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_6[15:0]);

  assign s_27 = cnt_clk_5 > 16'd2;

  assign tmp_66 = (s_27 == 1'b0 ? cnt_clk_5 :
              cnt_clk);

  assign tmp_67 = (s_28 == 1'b0 ? tmp_66 :
              tmp_65);

  always @(cnt_clk_5, is_SPI_MNGR_38, tmp_55, tmp_58, tmp_61, tmp_64, tmp_67) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p177_tmp = tmp_55;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p177_tmp = tmp_58;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p177_tmp = tmp_61;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p177_tmp = tmp_64;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p177_tmp = tmp_67;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p177_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p177_tmp = cnt_clk_5;
        end
      default :
        begin
          p177_tmp = cnt_clk_5;
        end
    endcase
    tmp_68 = p177_tmp;
  end

  always @(posedge clk)
    begin : rd_8_process
      if (rst == 1'b1) begin
        tmp_69 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_69 <= tmp_68;
        end
      end
    end

  assign cnt_clk_5 = (cnt_clk_reg_ctrl_const_out == 1'b0 ? cnt_clk_reg_Initial_Val_out :
              tmp_69);

  assign s_28 = cnt_clk_5 <= 16'd2;

  assign tmp_70 = (s_28 == 1'b0 ? tmp_52 :
              is_SPI_MNGR_10);

  always @(posedge clk)
    begin : rd_9_process
      if (rst == 1'b1) begin
        tmp_71 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          tmp_71 <= tmp_70;
        end
      end
    end

  always @(posedge clk)
    begin : rd_10_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_39 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_39 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(is_SPI_MNGR, is_SPI_MNGR_1, is_SPI_MNGR_16, is_SPI_MNGR_2, is_SPI_MNGR_3,
       is_SPI_MNGR_37, is_SPI_MNGR_39, is_SPI_MNGR_4, is_SPI_MNGR_5,
       is_SPI_MNGR_6, is_SPI_MNGR_7, is_SPI_MNGR_8, tmp_2, tmp_24, tmp_39,
       tmp_48, tmp_51, tmp_71) begin
    case ( is_SPI_MNGR_39)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p144_tmp = tmp_2;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p144_tmp = tmp_24;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p144_tmp = tmp_39;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p144_tmp = is_SPI_MNGR_16;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p144_tmp = tmp_48;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p144_tmp = tmp_51;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p144_tmp = tmp_71;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p144_tmp = is_SPI_MNGR_8;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p144_tmp = is_SPI_MNGR_7;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p144_tmp = is_SPI_MNGR_6;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p144_tmp = is_SPI_MNGR_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p144_tmp = is_SPI_MNGR_4;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p144_tmp = is_SPI_MNGR_3;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p144_tmp = is_SPI_MNGR_2;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p144_tmp = is_SPI_MNGR_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p144_tmp = is_SPI_MNGR;
        end
      default :
        begin
          p144_tmp = is_SPI_MNGR_37;
        end
    endcase
    tmp_72 = p144_tmp;
  end

  assign is_SPI_MNGR_38 = (is_SPI_MNGR_reg_ctrl_const_out == 1'b0 ? is_SPI_MNGR_reg_Initial_Val_out :
              tmp_72);

  assign tmp_73 = 1'b1;

  // Entry 'toBsend_CH_B'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_3'
  assign tmp_74 = 1'b1;
  // Entry 'toBsend_CH_B'
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_2'
  assign tmp_75 = 1'b0;
  // Entry 'toBsend_CH_A'
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_1'
  assign tmp_76 = 1'b1;
  // Entry 'toBsend_CH_B'
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v2_2'
  assign tmp_77 = 1'b0;
  // Entry 'toBsend_CH_A'
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v2_1'
  assign tmp_78 = 1'b1;
  // Entry 'toBsend_CH_B'
  // Transition
  // Transition
  // During 'toBsend_v1_2'
  assign tmp_79 = 1'b0;
  assign sel = 1'b0;

  assign sel_1 = 1'b0;

  assign sel_2 = 1'b0;

  assign sel_3 = 1'b0;

  assign sel_4 = 1'b0;

  assign sel_5 = 1'b0;

  assign sel_6 = 1'b0;

  assign sel_7 = 1'b0;

  assign sel_8 = 1'b0;

  assign tmp_80 = 1'b0;

  always @(is_SPI_MNGR_38, sel, sel_1, sel_2, sel_3, sel_4, sel_5, sel_6, sel_7, sel_8,
       tmp_73, tmp_74, tmp_75, tmp_76, tmp_77, tmp_78, tmp_79, tmp_80) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1534_sel_1 = sel_8;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1534_sel_1 = sel_7;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1534_sel_1 = sel_6;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1534_sel_1 = sel_5;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1534_sel_1 = sel_4;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1534_sel_1 = sel_3;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1534_sel_1 = sel_2;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1534_sel_1 = sel_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1534_sel_1 = sel;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1534_sel_1 = tmp_79;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1534_sel_1 = tmp_78;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1534_sel_1 = tmp_77;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1534_sel_1 = tmp_76;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1534_sel_1 = tmp_75;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1534_sel_1 = tmp_74;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1534_sel_1 = tmp_73;
        end
      default :
        begin
          p1534_sel_1 = tmp_80;
        end
    endcase
    sel_1_1 = p1534_sel_1;
  end

  assign s_29 = 1'b1;

  assign s_30 = 1'b1;

  assign s_31 = 1'b1;

  assign s_32 = 1'b1;

  assign s_33 = 1'b1;

  assign s_34 = 1'b1;

  assign s_35 = 1'b1;

  assign sel_9 = 1'b0;

  assign sel_10 = 1'b0;

  assign sel_11 = 1'b0;

  assign sel_12 = 1'b0;

  assign sel_13 = 1'b0;

  assign sel_14 = 1'b0;

  assign sel_15 = 1'b0;

  assign sel_16 = 1'b0;

  assign sel_17 = 1'b0;

  assign s_36 = 1'b1;

  always @(is_SPI_MNGR_38, s_29, s_30, s_31, s_32, s_33, s_34, s_35, s_36, sel_10, sel_11,
       sel_12, sel_13, sel_14, sel_15, sel_16, sel_17, sel_9) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1515_sel_2 = sel_17;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1515_sel_2 = sel_16;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1515_sel_2 = sel_15;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1515_sel_2 = sel_14;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1515_sel_2 = sel_13;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1515_sel_2 = sel_12;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1515_sel_2 = sel_11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1515_sel_2 = sel_10;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1515_sel_2 = sel_9;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1515_sel_2 = s_35;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1515_sel_2 = s_34;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1515_sel_2 = s_33;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1515_sel_2 = s_32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1515_sel_2 = s_31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1515_sel_2 = s_30;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1515_sel_2 = s_29;
        end
      default :
        begin
          p1515_sel_2 = s_36;
        end
    endcase
    sel_2_1 = p1515_sel_2;
  end

  assign tmp_81 = 1'b1;

  assign s_37 = 1'b1;

  assign s_38 = 1'b1;

  assign s_39 = 1'b1;

  assign s_40 = 1'b1;

  assign s_41 = 1'b1;

  assign s_42 = 1'b1;

  assign s_43 = 1'b1;

  assign sel_18 = 1'b0;

  assign sel_19 = 1'b0;

  assign sel_20 = 1'b0;

  assign sel_21 = 1'b0;

  assign sel_22 = 1'b0;

  assign sel_23 = 1'b0;

  assign sel_24 = 1'b0;

  assign sel_25 = 1'b0;

  assign sel_26 = 1'b0;

  assign s_44 = 1'b1;

  always @(is_SPI_MNGR_38, s_37, s_38, s_39, s_40, s_41, s_42, s_43, s_44, sel_18, sel_19,
       sel_20, sel_21, sel_22, sel_23, sel_24, sel_25, sel_26) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1168_sel_2 = sel_26;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1168_sel_2 = sel_25;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1168_sel_2 = sel_24;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1168_sel_2 = sel_23;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1168_sel_2 = sel_22;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1168_sel_2 = sel_21;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1168_sel_2 = sel_20;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1168_sel_2 = sel_19;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1168_sel_2 = sel_18;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1168_sel_2 = s_43;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1168_sel_2 = s_42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1168_sel_2 = s_41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1168_sel_2 = s_40;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1168_sel_2 = s_39;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1168_sel_2 = s_38;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1168_sel_2 = s_37;
        end
      default :
        begin
          p1168_sel_2 = s_44;
        end
    endcase
    sel_2_2 = p1168_sel_2;
  end

  assign tmp_82 = 1'b1;

  assign s_45 = 1'b1;

  assign s_46 = 1'b1;

  assign s_47 = 1'b1;

  assign s_48 = 1'b1;

  assign s_49 = 1'b1;

  assign s_50 = 1'b1;

  assign s_51 = 1'b1;

  assign sel_27 = 1'b0;

  assign sel_28 = 1'b0;

  assign sel_29 = 1'b0;

  assign sel_30 = 1'b0;

  assign sel_31 = 1'b0;

  assign sel_32 = 1'b0;

  assign sel_33 = 1'b0;

  assign sel_34 = 1'b0;

  assign sel_35 = 1'b0;

  assign s_52 = 1'b1;

  always @(is_SPI_MNGR_38, s_45, s_46, s_47, s_48, s_49, s_50, s_51, s_52, sel_27, sel_28,
       sel_29, sel_30, sel_31, sel_32, sel_33, sel_34, sel_35) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1113_sel_2 = sel_35;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1113_sel_2 = sel_34;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1113_sel_2 = sel_33;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1113_sel_2 = sel_32;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1113_sel_2 = sel_31;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1113_sel_2 = sel_30;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1113_sel_2 = sel_29;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1113_sel_2 = sel_28;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1113_sel_2 = sel_27;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1113_sel_2 = s_51;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1113_sel_2 = s_50;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1113_sel_2 = s_49;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1113_sel_2 = s_48;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1113_sel_2 = s_47;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1113_sel_2 = s_46;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1113_sel_2 = s_45;
        end
      default :
        begin
          p1113_sel_2 = s_52;
        end
    endcase
    sel_2_3 = p1113_sel_2;
  end

  // Transition
  // Transition
  // During 'NOP'
  assign tmp_83 = 1'b1;
  assign s_53 = 1'b1;

  assign s_54 = 1'b1;

  assign s_55 = 1'b1;

  assign s_56 = 1'b1;

  assign s_57 = 1'b1;

  assign s_58 = 1'b1;

  assign s_59 = 1'b1;

  assign sel_36 = 1'b0;

  assign sel_37 = 1'b0;

  assign sel_38 = 1'b0;

  assign sel_39 = 1'b0;

  assign sel_40 = 1'b0;

  assign sel_41 = 1'b0;

  assign sel_42 = 1'b0;

  assign sel_43 = 1'b0;

  assign sel_44 = 1'b0;

  assign s_60 = 1'b1;

  always @(is_SPI_MNGR_38, s_53, s_54, s_55, s_56, s_57, s_58, s_59, s_60, sel_36, sel_37,
       sel_38, sel_39, sel_40, sel_41, sel_42, sel_43, sel_44) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1058_sel_2 = sel_44;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1058_sel_2 = sel_43;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1058_sel_2 = sel_42;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1058_sel_2 = sel_41;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1058_sel_2 = sel_40;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1058_sel_2 = sel_39;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1058_sel_2 = sel_38;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1058_sel_2 = sel_37;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1058_sel_2 = sel_36;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1058_sel_2 = s_59;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1058_sel_2 = s_58;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1058_sel_2 = s_57;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1058_sel_2 = s_56;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1058_sel_2 = s_55;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1058_sel_2 = s_54;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1058_sel_2 = s_53;
        end
      default :
        begin
          p1058_sel_2 = s_60;
        end
    endcase
    sel_2_4 = p1058_sel_2;
  end

  always @(posedge clk)
    begin : rd_11_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_40 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_40 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_45 = 8'd0;

  assign sel_46 = 8'd0;

  assign sel_47 = 8'd0;

  assign sel_48 = 8'd0;

  assign sel_49 = 8'd0;

  assign sel_50 = 8'd0;

  assign sel_51 = 8'd0;

  assign sel_52 = 8'd0;

  assign sel_53 = 8'd0;

  assign sel_54 = 8'd0;

  assign sel_55 = 8'd0;

  assign sel_56 = 8'd0;

  always @(posedge clk)
    begin : rd_173_process
      if (rst == 1'b1) begin
        s_61 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_61 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_142_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_41 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_41 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_143_process
      if (rst == 1'b1) begin
        s_62 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_62 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_144_process
      if (rst == 1'b1) begin
        s_63 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_63 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_145_process
      if (rst == 1'b1) begin
        s_64 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_64 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_146_process
      if (rst == 1'b1) begin
        s_65 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_65 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_147_process
      if (rst == 1'b1) begin
        s_66 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_66 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_148_process
      if (rst == 1'b1) begin
        s_67 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_67 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_149_process
      if (rst == 1'b1) begin
        s_68 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_68 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_150_process
      if (rst == 1'b1) begin
        s_69 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_69 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_158_process
      if (rst == 1'b1) begin
        tmp_85 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_85 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_157_process
      if (rst == 1'b1) begin
        tmp_86 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_86 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_156_process
      if (rst == 1'b1) begin
        tmp_87 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_87 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_155_process
      if (rst == 1'b1) begin
        tmp_88 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_88 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_154_process
      if (rst == 1'b1) begin
        tmp_89 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_89 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_153_process
      if (rst == 1'b1) begin
        tmp_90 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_90 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_152_process
      if (rst == 1'b1) begin
        tmp_91 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_91 <= tmp_84;
        end
      end
    end

  always @(posedge clk)
    begin : rd_151_process
      if (rst == 1'b1) begin
        tmp_92 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_92 <= tmp_84;
        end
      end
    end

  assign tmp_93 = (s_69 == 1'b0 ? v4_1 :
              tmp_92);

  assign tmp_94 = (s_68 == 1'b0 ? tmp_93 :
              tmp_91);

  assign tmp_95 = (s_67 == 1'b0 ? tmp_94 :
              tmp_90);

  assign tmp_96 = (s_66 == 1'b0 ? tmp_95 :
              tmp_89);

  assign tmp_97 = (s_65 == 1'b0 ? tmp_96 :
              tmp_88);

  assign tmp_98 = (s_64 == 1'b0 ? tmp_97 :
              tmp_87);

  assign tmp_99 = (s_63 == 1'b0 ? tmp_98 :
              tmp_86);

  assign tmp_100 = (s_62 == 1'b0 ? tmp_99 :
              tmp_85);

  always @(posedge clk)
    begin : rd_159_process
      if (rst == 1'b1) begin
        tmp_101 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_101 <= tmp_84;
        end
      end
    end

  always @(is_SPI_MNGR_41, tmp_100, tmp_101, v4_1) begin
    case ( is_SPI_MNGR_41)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p165_tmp = tmp_100;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p165_tmp = v4_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p165_tmp = tmp_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p165_tmp = tmp_101;
        end
      default :
        begin
          p165_tmp = tmp_101;
        end
    endcase
    tmp_84 = p165_tmp;
  end

  simfcn1 u_simfcn1 (.vx(tmp_84),  // uint16
                     .cont_bits2_0(functionOutput_0),  // uint8
                     .cont_bits2_1(functionOutput_1),  // uint8
                     .cont_bits2_2(functionOutput_2),  // uint8
                     .cont_bits2_3(functionOutput_3),  // uint8
                     .cont_bits2_4(functionOutput_4),  // uint8
                     .cont_bits2_5(functionOutput_5),  // uint8
                     .cont_bits2_6(functionOutput_6),  // uint8
                     .cont_bits2_7(functionOutput_7),  // uint8
                     .cont_bits2_8(functionOutput_8),  // uint8
                     .cont_bits2_9(functionOutput_9),  // uint8
                     .cont_bits2_10(functionOutput_10),  // uint8
                     .cont_bits2_11(functionOutput_11)  // uint8
                     );

  assign functionOutput[0] = functionOutput_0;
  assign functionOutput[1] = functionOutput_1;
  assign functionOutput[2] = functionOutput_2;
  assign functionOutput[3] = functionOutput_3;
  assign functionOutput[4] = functionOutput_4;
  assign functionOutput[5] = functionOutput_5;
  assign functionOutput[6] = functionOutput_6;
  assign functionOutput[7] = functionOutput_7;
  assign functionOutput[8] = functionOutput_8;
  assign functionOutput[9] = functionOutput_9;
  assign functionOutput[10] = functionOutput_10;
  assign functionOutput[11] = functionOutput_11;

  assign sel_57 = 32'sd0;

  assign sel_58 = 32'sd0;

  assign sel_59 = 32'sd0;

  assign sel_60 = 32'sd0;

  assign sel_61 = 32'sd0;

  assign sel_62 = 32'sd0;

  assign sel_63 = 32'sd0;

  assign sel_64 = 32'sd0;

  assign sel_65 = 32'sd0;

  assign sel_66 = 32'sd0;

  assign sel_67 = 32'sd0;

  assign sel_68 = 32'sd0;

  assign sel_69 = 32'sd0;

  assign sel_70 = 32'sd0;

  assign s_70 = 32'sd0;

  assign sel_1_2 = (s_14 == 1'b0 ? sel_70 :
              s_70);

  assign sel_71 = 32'sd0;

  assign sel_1_3 = (s_15 == 1'b0 ? sel_1_2 :
              sel_71);

  assign sel_72 = 32'sd0;

  assign sel_1_4 = (s_16 == 1'b0 ? sel_1_3 :
              sel_72);

  assign sel_73 = 32'sd0;

  assign sel_1_5 = (s_17 == 1'b0 ? sel_1_4 :
              sel_73);

  assign sel_74 = 32'sd0;

  assign sel_1_6 = (s_18 == 1'b0 ? sel_1_5 :
              sel_74);

  assign sel_75 = 32'sd0;

  assign sel_1_7 = (s_19 == 1'b0 ? sel_1_6 :
              sel_75);

  assign sel_76 = 32'sd0;

  assign sel_1_8 = (s_20 == 1'b0 ? sel_1_7 :
              sel_76);

  assign sel_77 = 32'sd0;

  assign sel_1_9 = (s_21 == 1'b0 ? sel_1_8 :
              sel_77);

  assign sel_78 = 32'sd0;

  assign sel_79 = 32'sd0;

  assign sel_80 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_9, sel_57, sel_58, sel_59, sel_60, sel_61, sel_62,
       sel_63, sel_64, sel_65, sel_66, sel_67, sel_68, sel_69, sel_78, sel_79,
       sel_80) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4000_sel_1 = sel_79;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4000_sel_1 = sel_78;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4000_sel_1 = sel_1_9;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4000_sel_1 = sel_69;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4000_sel_1 = sel_68;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4000_sel_1 = sel_67;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4000_sel_1 = sel_66;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4000_sel_1 = sel_65;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4000_sel_1 = sel_64;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4000_sel_1 = sel_63;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4000_sel_1 = sel_62;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4000_sel_1 = sel_61;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4000_sel_1 = sel_60;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4000_sel_1 = sel_59;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4000_sel_1 = sel_58;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4000_sel_1 = sel_57;
        end
      default :
        begin
          p4000_sel_1 = sel_80;
        end
    endcase
    sel_1_10 = p4000_sel_1;
  end

  assign tmp_102 = functionOutput[sel_1_10];

  always @(posedge clk)
    begin : rd_124_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_42 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_42 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_125_process
      if (rst == 1'b1) begin
        s_71 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_71 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_126_process
      if (rst == 1'b1) begin
        s_72 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_72 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_127_process
      if (rst == 1'b1) begin
        s_73 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_73 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_128_process
      if (rst == 1'b1) begin
        s_74 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_74 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_129_process
      if (rst == 1'b1) begin
        s_75 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_75 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_130_process
      if (rst == 1'b1) begin
        s_76 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_76 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_131_process
      if (rst == 1'b1) begin
        s_77 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_77 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_132_process
      if (rst == 1'b1) begin
        s_78 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_78 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_140_process
      if (rst == 1'b1) begin
        tmp_104 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_104 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_139_process
      if (rst == 1'b1) begin
        tmp_105 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_105 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_138_process
      if (rst == 1'b1) begin
        tmp_106 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_106 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_137_process
      if (rst == 1'b1) begin
        tmp_107 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_107 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_136_process
      if (rst == 1'b1) begin
        tmp_108 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_108 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_135_process
      if (rst == 1'b1) begin
        tmp_109 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_109 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_134_process
      if (rst == 1'b1) begin
        tmp_110 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_110 <= tmp_103;
        end
      end
    end

  always @(posedge clk)
    begin : rd_133_process
      if (rst == 1'b1) begin
        tmp_111 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_111 <= tmp_103;
        end
      end
    end

  assign tmp_112 = (s_78 == 1'b0 ? v4_2 :
              tmp_111);

  assign tmp_113 = (s_77 == 1'b0 ? tmp_112 :
              tmp_110);

  assign tmp_114 = (s_76 == 1'b0 ? tmp_113 :
              tmp_109);

  assign tmp_115 = (s_75 == 1'b0 ? tmp_114 :
              tmp_108);

  assign tmp_116 = (s_74 == 1'b0 ? tmp_115 :
              tmp_107);

  assign tmp_117 = (s_73 == 1'b0 ? tmp_116 :
              tmp_106);

  assign tmp_118 = (s_72 == 1'b0 ? tmp_117 :
              tmp_105);

  assign tmp_119 = (s_71 == 1'b0 ? tmp_118 :
              tmp_104);

  always @(posedge clk)
    begin : rd_141_process
      if (rst == 1'b1) begin
        tmp_120 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_120 <= tmp_103;
        end
      end
    end

  always @(is_SPI_MNGR_42, tmp_119, tmp_120, v4_2) begin
    case ( is_SPI_MNGR_42)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p168_tmp = tmp_119;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p168_tmp = v4_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p168_tmp = tmp_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p168_tmp = tmp_120;
        end
      default :
        begin
          p168_tmp = tmp_120;
        end
    endcase
    tmp_103 = p168_tmp;
  end

  simfcn1 u_simfcn1_1 (.vx(tmp_103),  // uint16
                       .cont_bits2_0(functionOutput_0_1),  // uint8
                       .cont_bits2_1(functionOutput_1_1),  // uint8
                       .cont_bits2_2(functionOutput_2_1),  // uint8
                       .cont_bits2_3(functionOutput_3_1),  // uint8
                       .cont_bits2_4(functionOutput_4_1),  // uint8
                       .cont_bits2_5(functionOutput_5_1),  // uint8
                       .cont_bits2_6(functionOutput_6_1),  // uint8
                       .cont_bits2_7(functionOutput_7_1),  // uint8
                       .cont_bits2_8(functionOutput_8_1),  // uint8
                       .cont_bits2_9(functionOutput_9_1),  // uint8
                       .cont_bits2_10(functionOutput_10_1),  // uint8
                       .cont_bits2_11(functionOutput_11_1)  // uint8
                       );

  assign functionOutput_12[0] = functionOutput_0_1;
  assign functionOutput_12[1] = functionOutput_1_1;
  assign functionOutput_12[2] = functionOutput_2_1;
  assign functionOutput_12[3] = functionOutput_3_1;
  assign functionOutput_12[4] = functionOutput_4_1;
  assign functionOutput_12[5] = functionOutput_5_1;
  assign functionOutput_12[6] = functionOutput_6_1;
  assign functionOutput_12[7] = functionOutput_7_1;
  assign functionOutput_12[8] = functionOutput_8_1;
  assign functionOutput_12[9] = functionOutput_9_1;
  assign functionOutput_12[10] = functionOutput_10_1;
  assign functionOutput_12[11] = functionOutput_11_1;

  assign sel_81 = 32'sd0;

  assign sel_82 = 32'sd0;

  assign sel_83 = 32'sd0;

  assign sel_84 = 32'sd0;

  assign sel_85 = 32'sd0;

  assign sel_86 = 32'sd0;

  assign sel_87 = 32'sd0;

  assign sel_88 = 32'sd0;

  assign sel_89 = 32'sd0;

  assign sel_90 = 32'sd0;

  assign sel_91 = 32'sd0;

  assign sel_92 = 32'sd0;

  assign sel_93 = 32'sd0;

  assign sel_94 = 32'sd0;

  assign s_79 = 32'sd0;

  assign sel_1_11 = (s_15 == 1'b0 ? sel_94 :
              s_79);

  assign sel_95 = 32'sd0;

  assign sel_1_12 = (s_16 == 1'b0 ? sel_1_11 :
              sel_95);

  assign sel_96 = 32'sd0;

  assign sel_1_13 = (s_17 == 1'b0 ? sel_1_12 :
              sel_96);

  assign sel_97 = 32'sd0;

  assign sel_1_14 = (s_18 == 1'b0 ? sel_1_13 :
              sel_97);

  assign sel_98 = 32'sd0;

  assign sel_1_15 = (s_19 == 1'b0 ? sel_1_14 :
              sel_98);

  assign sel_99 = 32'sd0;

  assign sel_1_16 = (s_20 == 1'b0 ? sel_1_15 :
              sel_99);

  assign sel_100 = 32'sd0;

  assign sel_1_17 = (s_21 == 1'b0 ? sel_1_16 :
              sel_100);

  assign sel_101 = 32'sd0;

  assign sel_102 = 32'sd0;

  assign sel_103 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_101, sel_102, sel_103, sel_1_17, sel_81, sel_82, sel_83,
       sel_84, sel_85, sel_86, sel_87, sel_88, sel_89, sel_90, sel_91, sel_92,
       sel_93) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3411_sel_1 = sel_102;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3411_sel_1 = sel_101;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3411_sel_1 = sel_1_17;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3411_sel_1 = sel_93;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3411_sel_1 = sel_92;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3411_sel_1 = sel_91;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3411_sel_1 = sel_90;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3411_sel_1 = sel_89;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3411_sel_1 = sel_88;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3411_sel_1 = sel_87;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3411_sel_1 = sel_86;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3411_sel_1 = sel_85;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3411_sel_1 = sel_84;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3411_sel_1 = sel_83;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3411_sel_1 = sel_82;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3411_sel_1 = sel_81;
        end
      default :
        begin
          p3411_sel_1 = sel_103;
        end
    endcase
    sel_1_18 = p3411_sel_1;
  end

  assign tmp_121 = functionOutput_12[sel_1_18];

  assign sel_1_19 = (s_15 == 1'b0 ? tmp_102 :
              tmp_121);

  always @(posedge clk)
    begin : rd_106_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_43 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_43 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_107_process
      if (rst == 1'b1) begin
        s_80 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_80 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_108_process
      if (rst == 1'b1) begin
        s_81 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_81 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_109_process
      if (rst == 1'b1) begin
        s_82 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_82 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_110_process
      if (rst == 1'b1) begin
        s_83 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_83 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_111_process
      if (rst == 1'b1) begin
        s_84 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_84 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_112_process
      if (rst == 1'b1) begin
        s_85 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_85 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_113_process
      if (rst == 1'b1) begin
        s_86 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_86 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_114_process
      if (rst == 1'b1) begin
        s_87 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_87 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_122_process
      if (rst == 1'b1) begin
        tmp_123 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_123 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_121_process
      if (rst == 1'b1) begin
        tmp_124 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_124 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_120_process
      if (rst == 1'b1) begin
        tmp_125 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_125 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_119_process
      if (rst == 1'b1) begin
        tmp_126 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_126 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_118_process
      if (rst == 1'b1) begin
        tmp_127 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_127 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_117_process
      if (rst == 1'b1) begin
        tmp_128 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_128 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_116_process
      if (rst == 1'b1) begin
        tmp_129 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_129 <= tmp_122;
        end
      end
    end

  always @(posedge clk)
    begin : rd_115_process
      if (rst == 1'b1) begin
        tmp_130 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_130 <= tmp_122;
        end
      end
    end

  assign tmp_131 = (s_87 == 1'b0 ? v3_2 :
              tmp_130);

  assign tmp_132 = (s_86 == 1'b0 ? tmp_131 :
              tmp_129);

  assign tmp_133 = (s_85 == 1'b0 ? tmp_132 :
              tmp_128);

  assign tmp_134 = (s_84 == 1'b0 ? tmp_133 :
              tmp_127);

  assign tmp_135 = (s_83 == 1'b0 ? tmp_134 :
              tmp_126);

  assign tmp_136 = (s_82 == 1'b0 ? tmp_135 :
              tmp_125);

  assign tmp_137 = (s_81 == 1'b0 ? tmp_136 :
              tmp_124);

  assign tmp_138 = (s_80 == 1'b0 ? tmp_137 :
              tmp_123);

  always @(posedge clk)
    begin : rd_123_process
      if (rst == 1'b1) begin
        tmp_139 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_139 <= tmp_122;
        end
      end
    end

  always @(is_SPI_MNGR_43, tmp_138, tmp_139, v3_2) begin
    case ( is_SPI_MNGR_43)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p162_tmp = tmp_138;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p162_tmp = v3_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p162_tmp = tmp_139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p162_tmp = tmp_139;
        end
      default :
        begin
          p162_tmp = tmp_139;
        end
    endcase
    tmp_122 = p162_tmp;
  end

  simfcn1 u_simfcn1_2 (.vx(tmp_122),  // uint16
                       .cont_bits2_0(functionOutput_0_2),  // uint8
                       .cont_bits2_1(functionOutput_1_2),  // uint8
                       .cont_bits2_2(functionOutput_2_2),  // uint8
                       .cont_bits2_3(functionOutput_3_2),  // uint8
                       .cont_bits2_4(functionOutput_4_2),  // uint8
                       .cont_bits2_5(functionOutput_5_2),  // uint8
                       .cont_bits2_6(functionOutput_6_2),  // uint8
                       .cont_bits2_7(functionOutput_7_2),  // uint8
                       .cont_bits2_8(functionOutput_8_2),  // uint8
                       .cont_bits2_9(functionOutput_9_2),  // uint8
                       .cont_bits2_10(functionOutput_10_2),  // uint8
                       .cont_bits2_11(functionOutput_11_2)  // uint8
                       );

  assign functionOutput_13[0] = functionOutput_0_2;
  assign functionOutput_13[1] = functionOutput_1_2;
  assign functionOutput_13[2] = functionOutput_2_2;
  assign functionOutput_13[3] = functionOutput_3_2;
  assign functionOutput_13[4] = functionOutput_4_2;
  assign functionOutput_13[5] = functionOutput_5_2;
  assign functionOutput_13[6] = functionOutput_6_2;
  assign functionOutput_13[7] = functionOutput_7_2;
  assign functionOutput_13[8] = functionOutput_8_2;
  assign functionOutput_13[9] = functionOutput_9_2;
  assign functionOutput_13[10] = functionOutput_10_2;
  assign functionOutput_13[11] = functionOutput_11_2;

  assign sel_104 = 32'sd0;

  assign sel_105 = 32'sd0;

  assign sel_106 = 32'sd0;

  assign sel_107 = 32'sd0;

  assign sel_108 = 32'sd0;

  assign sel_109 = 32'sd0;

  assign sel_110 = 32'sd0;

  assign sel_111 = 32'sd0;

  assign sel_112 = 32'sd0;

  assign sel_113 = 32'sd0;

  assign sel_114 = 32'sd0;

  assign sel_115 = 32'sd0;

  assign sel_116 = 32'sd0;

  assign sel_117 = 32'sd0;

  assign s_88 = 32'sd0;

  assign sel_1_20 = (s_16 == 1'b0 ? sel_117 :
              s_88);

  assign sel_118 = 32'sd0;

  assign sel_1_21 = (s_17 == 1'b0 ? sel_1_20 :
              sel_118);

  assign sel_119 = 32'sd0;

  assign sel_1_22 = (s_18 == 1'b0 ? sel_1_21 :
              sel_119);

  assign sel_120 = 32'sd0;

  assign sel_1_23 = (s_19 == 1'b0 ? sel_1_22 :
              sel_120);

  assign sel_121 = 32'sd0;

  assign sel_1_24 = (s_20 == 1'b0 ? sel_1_23 :
              sel_121);

  assign sel_122 = 32'sd0;

  assign sel_1_25 = (s_21 == 1'b0 ? sel_1_24 :
              sel_122);

  assign sel_123 = 32'sd0;

  assign sel_124 = 32'sd0;

  assign sel_125 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_104, sel_105, sel_106, sel_107, sel_108, sel_109, sel_110,
       sel_111, sel_112, sel_113, sel_114, sel_115, sel_116, sel_123, sel_124,
       sel_125, sel_1_25) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5102_sel_1 = sel_124;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5102_sel_1 = sel_123;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5102_sel_1 = sel_1_25;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5102_sel_1 = sel_116;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5102_sel_1 = sel_115;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5102_sel_1 = sel_114;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5102_sel_1 = sel_113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5102_sel_1 = sel_112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5102_sel_1 = sel_111;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5102_sel_1 = sel_110;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5102_sel_1 = sel_109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5102_sel_1 = sel_108;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5102_sel_1 = sel_107;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5102_sel_1 = sel_106;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5102_sel_1 = sel_105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5102_sel_1 = sel_104;
        end
      default :
        begin
          p5102_sel_1 = sel_125;
        end
    endcase
    sel_1_26 = p5102_sel_1;
  end

  assign tmp_140 = functionOutput_13[sel_1_26];

  assign sel_1_27 = (s_16 == 1'b0 ? sel_1_19 :
              tmp_140);

  always @(posedge clk)
    begin : rd_88_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_44 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_44 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_89_process
      if (rst == 1'b1) begin
        s_89 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_89 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_90_process
      if (rst == 1'b1) begin
        s_90 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_90 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_91_process
      if (rst == 1'b1) begin
        s_91 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_91 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_92_process
      if (rst == 1'b1) begin
        s_92 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_92 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_93_process
      if (rst == 1'b1) begin
        s_93 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_93 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_94_process
      if (rst == 1'b1) begin
        s_94 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_94 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_95_process
      if (rst == 1'b1) begin
        s_95 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_95 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_96_process
      if (rst == 1'b1) begin
        s_96 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_96 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_104_process
      if (rst == 1'b1) begin
        tmp_142 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_142 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_103_process
      if (rst == 1'b1) begin
        tmp_143 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_143 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_102_process
      if (rst == 1'b1) begin
        tmp_144 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_144 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_101_process
      if (rst == 1'b1) begin
        tmp_145 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_145 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_100_process
      if (rst == 1'b1) begin
        tmp_146 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_146 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_99_process
      if (rst == 1'b1) begin
        tmp_147 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_147 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_98_process
      if (rst == 1'b1) begin
        tmp_148 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_148 <= tmp_141;
        end
      end
    end

  always @(posedge clk)
    begin : rd_97_process
      if (rst == 1'b1) begin
        tmp_149 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_149 <= tmp_141;
        end
      end
    end

  assign tmp_150 = (s_96 == 1'b0 ? v3_1 :
              tmp_149);

  assign tmp_151 = (s_95 == 1'b0 ? tmp_150 :
              tmp_148);

  assign tmp_152 = (s_94 == 1'b0 ? tmp_151 :
              tmp_147);

  assign tmp_153 = (s_93 == 1'b0 ? tmp_152 :
              tmp_146);

  assign tmp_154 = (s_92 == 1'b0 ? tmp_153 :
              tmp_145);

  assign tmp_155 = (s_91 == 1'b0 ? tmp_154 :
              tmp_144);

  assign tmp_156 = (s_90 == 1'b0 ? tmp_155 :
              tmp_143);

  assign tmp_157 = (s_89 == 1'b0 ? tmp_156 :
              tmp_142);

  always @(posedge clk)
    begin : rd_105_process
      if (rst == 1'b1) begin
        tmp_158 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_158 <= tmp_141;
        end
      end
    end

  always @(is_SPI_MNGR_44, tmp_157, tmp_158, v3_1) begin
    case ( is_SPI_MNGR_44)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p159_tmp = tmp_157;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p159_tmp = v3_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p159_tmp = tmp_158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p159_tmp = tmp_158;
        end
      default :
        begin
          p159_tmp = tmp_158;
        end
    endcase
    tmp_141 = p159_tmp;
  end

  simfcn1 u_simfcn1_3 (.vx(tmp_141),  // uint16
                       .cont_bits2_0(functionOutput_0_3),  // uint8
                       .cont_bits2_1(functionOutput_1_3),  // uint8
                       .cont_bits2_2(functionOutput_2_3),  // uint8
                       .cont_bits2_3(functionOutput_3_3),  // uint8
                       .cont_bits2_4(functionOutput_4_3),  // uint8
                       .cont_bits2_5(functionOutput_5_3),  // uint8
                       .cont_bits2_6(functionOutput_6_3),  // uint8
                       .cont_bits2_7(functionOutput_7_3),  // uint8
                       .cont_bits2_8(functionOutput_8_3),  // uint8
                       .cont_bits2_9(functionOutput_9_3),  // uint8
                       .cont_bits2_10(functionOutput_10_3),  // uint8
                       .cont_bits2_11(functionOutput_11_3)  // uint8
                       );

  assign functionOutput_14[0] = functionOutput_0_3;
  assign functionOutput_14[1] = functionOutput_1_3;
  assign functionOutput_14[2] = functionOutput_2_3;
  assign functionOutput_14[3] = functionOutput_3_3;
  assign functionOutput_14[4] = functionOutput_4_3;
  assign functionOutput_14[5] = functionOutput_5_3;
  assign functionOutput_14[6] = functionOutput_6_3;
  assign functionOutput_14[7] = functionOutput_7_3;
  assign functionOutput_14[8] = functionOutput_8_3;
  assign functionOutput_14[9] = functionOutput_9_3;
  assign functionOutput_14[10] = functionOutput_10_3;
  assign functionOutput_14[11] = functionOutput_11_3;

  assign sel_126 = 32'sd0;

  assign sel_127 = 32'sd0;

  assign sel_128 = 32'sd0;

  assign sel_129 = 32'sd0;

  assign sel_130 = 32'sd0;

  assign sel_131 = 32'sd0;

  assign sel_132 = 32'sd0;

  assign sel_133 = 32'sd0;

  assign sel_134 = 32'sd0;

  assign sel_135 = 32'sd0;

  assign sel_136 = 32'sd0;

  assign sel_137 = 32'sd0;

  assign sel_138 = 32'sd0;

  assign sel_139 = 32'sd0;

  assign s_97 = 32'sd0;

  assign sel_1_28 = (s_17 == 1'b0 ? sel_139 :
              s_97);

  assign sel_140 = 32'sd0;

  assign sel_1_29 = (s_18 == 1'b0 ? sel_1_28 :
              sel_140);

  assign sel_141 = 32'sd0;

  assign sel_1_30 = (s_19 == 1'b0 ? sel_1_29 :
              sel_141);

  assign sel_142 = 32'sd0;

  assign sel_1_31 = (s_20 == 1'b0 ? sel_1_30 :
              sel_142);

  assign sel_143 = 32'sd0;

  assign sel_1_32 = (s_21 == 1'b0 ? sel_1_31 :
              sel_143);

  assign sel_144 = 32'sd0;

  assign sel_145 = 32'sd0;

  assign sel_146 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_126, sel_127, sel_128, sel_129, sel_130, sel_131, sel_132,
       sel_133, sel_134, sel_135, sel_136, sel_137, sel_138, sel_144, sel_145,
       sel_146, sel_1_32) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3544_sel_1 = sel_145;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3544_sel_1 = sel_144;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3544_sel_1 = sel_1_32;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3544_sel_1 = sel_138;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3544_sel_1 = sel_137;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3544_sel_1 = sel_136;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3544_sel_1 = sel_135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3544_sel_1 = sel_134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3544_sel_1 = sel_133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3544_sel_1 = sel_132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3544_sel_1 = sel_131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3544_sel_1 = sel_130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3544_sel_1 = sel_129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3544_sel_1 = sel_128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3544_sel_1 = sel_127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3544_sel_1 = sel_126;
        end
      default :
        begin
          p3544_sel_1 = sel_146;
        end
    endcase
    sel_1_33 = p3544_sel_1;
  end

  assign tmp_159 = functionOutput_14[sel_1_33];

  assign sel_1_34 = (s_17 == 1'b0 ? sel_1_27 :
              tmp_159);

  always @(posedge clk)
    begin : rd_174_process
      if (rst == 1'b1) begin
        sel_1_35 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_35 <= sel_1_34;
        end
      end
    end

  always @(posedge clk)
    begin : rd_69_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_45 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_45 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_70_process
      if (rst == 1'b1) begin
        s_98 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_98 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_71_process
      if (rst == 1'b1) begin
        s_99 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_99 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_72_process
      if (rst == 1'b1) begin
        s_100 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_100 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_73_process
      if (rst == 1'b1) begin
        s_101 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_101 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_74_process
      if (rst == 1'b1) begin
        s_102 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_102 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_75_process
      if (rst == 1'b1) begin
        s_103 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_103 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_76_process
      if (rst == 1'b1) begin
        s_104 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_104 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_77_process
      if (rst == 1'b1) begin
        s_105 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_105 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_85_process
      if (rst == 1'b1) begin
        tmp_161 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_161 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_84_process
      if (rst == 1'b1) begin
        tmp_162 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_162 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_83_process
      if (rst == 1'b1) begin
        tmp_163 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_163 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_82_process
      if (rst == 1'b1) begin
        tmp_164 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_164 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_81_process
      if (rst == 1'b1) begin
        tmp_165 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_165 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_80_process
      if (rst == 1'b1) begin
        tmp_166 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_166 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_79_process
      if (rst == 1'b1) begin
        tmp_167 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_167 <= tmp_160;
        end
      end
    end

  always @(posedge clk)
    begin : rd_78_process
      if (rst == 1'b1) begin
        tmp_168 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_168 <= tmp_160;
        end
      end
    end

  assign tmp_169 = (s_105 == 1'b0 ? v2_2 :
              tmp_168);

  assign tmp_170 = (s_104 == 1'b0 ? tmp_169 :
              tmp_167);

  assign tmp_171 = (s_103 == 1'b0 ? tmp_170 :
              tmp_166);

  assign tmp_172 = (s_102 == 1'b0 ? tmp_171 :
              tmp_165);

  assign tmp_173 = (s_101 == 1'b0 ? tmp_172 :
              tmp_164);

  assign tmp_174 = (s_100 == 1'b0 ? tmp_173 :
              tmp_163);

  assign tmp_175 = (s_99 == 1'b0 ? tmp_174 :
              tmp_162);

  assign tmp_176 = (s_98 == 1'b0 ? tmp_175 :
              tmp_161);

  always @(posedge clk)
    begin : rd_86_process
      if (rst == 1'b1) begin
        tmp_177 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_177 <= tmp_160;
        end
      end
    end

  always @(is_SPI_MNGR_45, tmp_176, tmp_177, v2_2) begin
    case ( is_SPI_MNGR_45)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p156_tmp = tmp_176;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p156_tmp = v2_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p156_tmp = tmp_177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p156_tmp = tmp_177;
        end
      default :
        begin
          p156_tmp = tmp_177;
        end
    endcase
    tmp_160 = p156_tmp;
  end

  simfcn1 u_simfcn1_4 (.vx(tmp_160),  // uint16
                       .cont_bits2_0(functionOutput_0_4),  // uint8
                       .cont_bits2_1(functionOutput_1_4),  // uint8
                       .cont_bits2_2(functionOutput_2_4),  // uint8
                       .cont_bits2_3(functionOutput_3_4),  // uint8
                       .cont_bits2_4(functionOutput_4_4),  // uint8
                       .cont_bits2_5(functionOutput_5_4),  // uint8
                       .cont_bits2_6(functionOutput_6_4),  // uint8
                       .cont_bits2_7(functionOutput_7_4),  // uint8
                       .cont_bits2_8(functionOutput_8_4),  // uint8
                       .cont_bits2_9(functionOutput_9_4),  // uint8
                       .cont_bits2_10(functionOutput_10_4),  // uint8
                       .cont_bits2_11(functionOutput_11_4)  // uint8
                       );

  assign functionOutput_15[0] = functionOutput_0_4;
  assign functionOutput_15[1] = functionOutput_1_4;
  assign functionOutput_15[2] = functionOutput_2_4;
  assign functionOutput_15[3] = functionOutput_3_4;
  assign functionOutput_15[4] = functionOutput_4_4;
  assign functionOutput_15[5] = functionOutput_5_4;
  assign functionOutput_15[6] = functionOutput_6_4;
  assign functionOutput_15[7] = functionOutput_7_4;
  assign functionOutput_15[8] = functionOutput_8_4;
  assign functionOutput_15[9] = functionOutput_9_4;
  assign functionOutput_15[10] = functionOutput_10_4;
  assign functionOutput_15[11] = functionOutput_11_4;

  assign sel_147 = 32'sd0;

  assign sel_148 = 32'sd0;

  assign sel_149 = 32'sd0;

  assign sel_150 = 32'sd0;

  assign sel_151 = 32'sd0;

  assign sel_152 = 32'sd0;

  assign sel_153 = 32'sd0;

  assign sel_154 = 32'sd0;

  assign sel_155 = 32'sd0;

  assign sel_156 = 32'sd0;

  assign sel_157 = 32'sd0;

  assign sel_158 = 32'sd0;

  assign sel_159 = 32'sd0;

  assign sel_160 = 32'sd0;

  assign s_106 = 32'sd0;

  assign sel_1_36 = (s_18 == 1'b0 ? sel_160 :
              s_106);

  assign sel_161 = 32'sd0;

  assign sel_1_37 = (s_19 == 1'b0 ? sel_1_36 :
              sel_161);

  assign sel_162 = 32'sd0;

  assign sel_1_38 = (s_20 == 1'b0 ? sel_1_37 :
              sel_162);

  assign sel_163 = 32'sd0;

  assign sel_1_39 = (s_21 == 1'b0 ? sel_1_38 :
              sel_163);

  assign sel_164 = 32'sd0;

  assign sel_165 = 32'sd0;

  assign sel_166 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_147, sel_148, sel_149, sel_150, sel_151, sel_152, sel_153,
       sel_154, sel_155, sel_156, sel_157, sel_158, sel_159, sel_164, sel_165,
       sel_166, sel_1_39) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3924_sel_1 = sel_165;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3924_sel_1 = sel_164;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3924_sel_1 = sel_1_39;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3924_sel_1 = sel_159;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3924_sel_1 = sel_158;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3924_sel_1 = sel_157;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3924_sel_1 = sel_156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3924_sel_1 = sel_155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3924_sel_1 = sel_154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3924_sel_1 = sel_153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3924_sel_1 = sel_152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3924_sel_1 = sel_151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3924_sel_1 = sel_150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3924_sel_1 = sel_149;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3924_sel_1 = sel_148;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3924_sel_1 = sel_147;
        end
      default :
        begin
          p3924_sel_1 = sel_166;
        end
    endcase
    sel_1_40 = p3924_sel_1;
  end

  assign tmp_178 = functionOutput_15[sel_1_40];

  always @(posedge clk)
    begin : rd_172_process
      if (rst == 1'b1) begin
        s_107 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_107 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_87_process
      if (rst == 1'b1) begin
        tmp_179 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_179 <= tmp_178;
        end
      end
    end

  assign sel_1_41 = (s_61 == 1'b0 ? sel_1_35 :
              tmp_179);

  always @(posedge clk)
    begin : rd_50_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_46 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_46 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_51_process
      if (rst == 1'b1) begin
        s_108 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_108 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_52_process
      if (rst == 1'b1) begin
        s_109 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_109 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_53_process
      if (rst == 1'b1) begin
        s_110 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_110 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_54_process
      if (rst == 1'b1) begin
        s_111 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_111 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_55_process
      if (rst == 1'b1) begin
        s_112 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_112 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_56_process
      if (rst == 1'b1) begin
        s_113 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_113 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_57_process
      if (rst == 1'b1) begin
        s_114 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_114 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_58_process
      if (rst == 1'b1) begin
        s_115 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_115 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_66_process
      if (rst == 1'b1) begin
        tmp_181 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_181 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_65_process
      if (rst == 1'b1) begin
        tmp_182 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_182 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_64_process
      if (rst == 1'b1) begin
        tmp_183 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_183 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_63_process
      if (rst == 1'b1) begin
        tmp_184 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_184 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_62_process
      if (rst == 1'b1) begin
        tmp_185 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_185 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_61_process
      if (rst == 1'b1) begin
        tmp_186 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_186 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_60_process
      if (rst == 1'b1) begin
        tmp_187 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_187 <= tmp_180;
        end
      end
    end

  always @(posedge clk)
    begin : rd_59_process
      if (rst == 1'b1) begin
        tmp_188 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_188 <= tmp_180;
        end
      end
    end

  assign tmp_189 = (s_115 == 1'b0 ? v2_1 :
              tmp_188);

  assign tmp_190 = (s_114 == 1'b0 ? tmp_189 :
              tmp_187);

  assign tmp_191 = (s_113 == 1'b0 ? tmp_190 :
              tmp_186);

  assign tmp_192 = (s_112 == 1'b0 ? tmp_191 :
              tmp_185);

  assign tmp_193 = (s_111 == 1'b0 ? tmp_192 :
              tmp_184);

  assign tmp_194 = (s_110 == 1'b0 ? tmp_193 :
              tmp_183);

  assign tmp_195 = (s_109 == 1'b0 ? tmp_194 :
              tmp_182);

  assign tmp_196 = (s_108 == 1'b0 ? tmp_195 :
              tmp_181);

  always @(posedge clk)
    begin : rd_67_process
      if (rst == 1'b1) begin
        tmp_197 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_197 <= tmp_180;
        end
      end
    end

  always @(is_SPI_MNGR_46, tmp_196, tmp_197, v2_1) begin
    case ( is_SPI_MNGR_46)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p153_tmp = tmp_196;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p153_tmp = v2_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p153_tmp = tmp_197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p153_tmp = tmp_197;
        end
      default :
        begin
          p153_tmp = tmp_197;
        end
    endcase
    tmp_180 = p153_tmp;
  end

  simfcn1 u_simfcn1_5 (.vx(tmp_180),  // uint16
                       .cont_bits2_0(functionOutput_0_5),  // uint8
                       .cont_bits2_1(functionOutput_1_5),  // uint8
                       .cont_bits2_2(functionOutput_2_5),  // uint8
                       .cont_bits2_3(functionOutput_3_5),  // uint8
                       .cont_bits2_4(functionOutput_4_5),  // uint8
                       .cont_bits2_5(functionOutput_5_5),  // uint8
                       .cont_bits2_6(functionOutput_6_5),  // uint8
                       .cont_bits2_7(functionOutput_7_5),  // uint8
                       .cont_bits2_8(functionOutput_8_5),  // uint8
                       .cont_bits2_9(functionOutput_9_5),  // uint8
                       .cont_bits2_10(functionOutput_10_5),  // uint8
                       .cont_bits2_11(functionOutput_11_5)  // uint8
                       );

  assign functionOutput_16[0] = functionOutput_0_5;
  assign functionOutput_16[1] = functionOutput_1_5;
  assign functionOutput_16[2] = functionOutput_2_5;
  assign functionOutput_16[3] = functionOutput_3_5;
  assign functionOutput_16[4] = functionOutput_4_5;
  assign functionOutput_16[5] = functionOutput_5_5;
  assign functionOutput_16[6] = functionOutput_6_5;
  assign functionOutput_16[7] = functionOutput_7_5;
  assign functionOutput_16[8] = functionOutput_8_5;
  assign functionOutput_16[9] = functionOutput_9_5;
  assign functionOutput_16[10] = functionOutput_10_5;
  assign functionOutput_16[11] = functionOutput_11_5;

  assign sel_167 = 32'sd0;

  assign sel_168 = 32'sd0;

  assign sel_169 = 32'sd0;

  assign sel_170 = 32'sd0;

  assign sel_171 = 32'sd0;

  assign sel_172 = 32'sd0;

  assign sel_173 = 32'sd0;

  assign sel_174 = 32'sd0;

  assign sel_175 = 32'sd0;

  assign sel_176 = 32'sd0;

  assign sel_177 = 32'sd0;

  assign sel_178 = 32'sd0;

  assign sel_179 = 32'sd0;

  assign sel_180 = 32'sd0;

  assign s_116 = 32'sd0;

  assign sel_1_42 = (s_19 == 1'b0 ? sel_180 :
              s_116);

  assign sel_181 = 32'sd0;

  assign sel_1_43 = (s_20 == 1'b0 ? sel_1_42 :
              sel_181);

  assign sel_182 = 32'sd0;

  assign sel_1_44 = (s_21 == 1'b0 ? sel_1_43 :
              sel_182);

  assign sel_183 = 32'sd0;

  assign sel_184 = 32'sd0;

  assign sel_185 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_167, sel_168, sel_169, sel_170, sel_171, sel_172, sel_173,
       sel_174, sel_175, sel_176, sel_177, sel_178, sel_179, sel_183, sel_184,
       sel_185, sel_1_44) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3506_sel_1 = sel_184;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3506_sel_1 = sel_183;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3506_sel_1 = sel_1_44;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3506_sel_1 = sel_179;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3506_sel_1 = sel_178;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3506_sel_1 = sel_177;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3506_sel_1 = sel_176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3506_sel_1 = sel_175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3506_sel_1 = sel_174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3506_sel_1 = sel_173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3506_sel_1 = sel_172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3506_sel_1 = sel_171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3506_sel_1 = sel_170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3506_sel_1 = sel_169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3506_sel_1 = sel_168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3506_sel_1 = sel_167;
        end
      default :
        begin
          p3506_sel_1 = sel_185;
        end
    endcase
    sel_1_45 = p3506_sel_1;
  end

  assign tmp_198 = functionOutput_16[sel_1_45];

  always @(posedge clk)
    begin : rd_171_process
      if (rst == 1'b1) begin
        s_117 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_117 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_68_process
      if (rst == 1'b1) begin
        tmp_199 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_199 <= tmp_198;
        end
      end
    end

  assign sel_1_46 = (s_107 == 1'b0 ? sel_1_41 :
              tmp_199);

  always @(posedge clk)
    begin : rd_31_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_47 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_47 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_32_process
      if (rst == 1'b1) begin
        s_118 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_118 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_33_process
      if (rst == 1'b1) begin
        s_119 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_119 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_34_process
      if (rst == 1'b1) begin
        s_120 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_120 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_35_process
      if (rst == 1'b1) begin
        s_121 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_121 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_36_process
      if (rst == 1'b1) begin
        s_122 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_122 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_37_process
      if (rst == 1'b1) begin
        s_123 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_123 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_38_process
      if (rst == 1'b1) begin
        s_124 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_124 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_39_process
      if (rst == 1'b1) begin
        s_125 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_125 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_47_process
      if (rst == 1'b1) begin
        tmp_201 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_201 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_46_process
      if (rst == 1'b1) begin
        tmp_202 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_202 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_45_process
      if (rst == 1'b1) begin
        tmp_203 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_203 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_44_process
      if (rst == 1'b1) begin
        tmp_204 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_204 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_43_process
      if (rst == 1'b1) begin
        tmp_205 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_205 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_42_process
      if (rst == 1'b1) begin
        tmp_206 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_206 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_41_process
      if (rst == 1'b1) begin
        tmp_207 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_207 <= tmp_200;
        end
      end
    end

  always @(posedge clk)
    begin : rd_40_process
      if (rst == 1'b1) begin
        tmp_208 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_208 <= tmp_200;
        end
      end
    end

  assign tmp_209 = (s_125 == 1'b0 ? v1_2 :
              tmp_208);

  assign tmp_210 = (s_124 == 1'b0 ? tmp_209 :
              tmp_207);

  assign tmp_211 = (s_123 == 1'b0 ? tmp_210 :
              tmp_206);

  assign tmp_212 = (s_122 == 1'b0 ? tmp_211 :
              tmp_205);

  assign tmp_213 = (s_121 == 1'b0 ? tmp_212 :
              tmp_204);

  assign tmp_214 = (s_120 == 1'b0 ? tmp_213 :
              tmp_203);

  assign tmp_215 = (s_119 == 1'b0 ? tmp_214 :
              tmp_202);

  assign tmp_216 = (s_118 == 1'b0 ? tmp_215 :
              tmp_201);

  always @(posedge clk)
    begin : rd_48_process
      if (rst == 1'b1) begin
        tmp_217 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_217 <= tmp_200;
        end
      end
    end

  always @(is_SPI_MNGR_47, tmp_216, tmp_217, v1_2) begin
    case ( is_SPI_MNGR_47)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p150_tmp = tmp_216;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p150_tmp = v1_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p150_tmp = tmp_217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p150_tmp = tmp_217;
        end
      default :
        begin
          p150_tmp = tmp_217;
        end
    endcase
    tmp_200 = p150_tmp;
  end

  simfcn1 u_simfcn1_6 (.vx(tmp_200),  // uint16
                       .cont_bits2_0(functionOutput_0_6),  // uint8
                       .cont_bits2_1(functionOutput_1_6),  // uint8
                       .cont_bits2_2(functionOutput_2_6),  // uint8
                       .cont_bits2_3(functionOutput_3_6),  // uint8
                       .cont_bits2_4(functionOutput_4_6),  // uint8
                       .cont_bits2_5(functionOutput_5_6),  // uint8
                       .cont_bits2_6(functionOutput_6_6),  // uint8
                       .cont_bits2_7(functionOutput_7_6),  // uint8
                       .cont_bits2_8(functionOutput_8_6),  // uint8
                       .cont_bits2_9(functionOutput_9_6),  // uint8
                       .cont_bits2_10(functionOutput_10_6),  // uint8
                       .cont_bits2_11(functionOutput_11_6)  // uint8
                       );

  assign functionOutput_17[0] = functionOutput_0_6;
  assign functionOutput_17[1] = functionOutput_1_6;
  assign functionOutput_17[2] = functionOutput_2_6;
  assign functionOutput_17[3] = functionOutput_3_6;
  assign functionOutput_17[4] = functionOutput_4_6;
  assign functionOutput_17[5] = functionOutput_5_6;
  assign functionOutput_17[6] = functionOutput_6_6;
  assign functionOutput_17[7] = functionOutput_7_6;
  assign functionOutput_17[8] = functionOutput_8_6;
  assign functionOutput_17[9] = functionOutput_9_6;
  assign functionOutput_17[10] = functionOutput_10_6;
  assign functionOutput_17[11] = functionOutput_11_6;

  assign sel_186 = 32'sd0;

  assign sel_187 = 32'sd0;

  assign sel_188 = 32'sd0;

  assign sel_189 = 32'sd0;

  assign sel_190 = 32'sd0;

  assign sel_191 = 32'sd0;

  assign sel_192 = 32'sd0;

  assign sel_193 = 32'sd0;

  assign sel_194 = 32'sd0;

  assign sel_195 = 32'sd0;

  assign sel_196 = 32'sd0;

  assign sel_197 = 32'sd0;

  assign sel_198 = 32'sd0;

  assign sel_199 = 32'sd0;

  assign s_126 = 32'sd0;

  assign sel_1_47 = (s_20 == 1'b0 ? sel_199 :
              s_126);

  assign sel_200 = 32'sd0;

  assign sel_1_48 = (s_21 == 1'b0 ? sel_1_47 :
              sel_200);

  assign sel_201 = 32'sd0;

  assign sel_202 = 32'sd0;

  assign sel_203 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_186, sel_187, sel_188, sel_189, sel_190, sel_191, sel_192,
       sel_193, sel_194, sel_195, sel_196, sel_197, sel_198, sel_1_48, sel_201,
       sel_202, sel_203) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3791_sel_1 = sel_202;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3791_sel_1 = sel_201;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3791_sel_1 = sel_1_48;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3791_sel_1 = sel_198;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3791_sel_1 = sel_197;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3791_sel_1 = sel_196;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3791_sel_1 = sel_195;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3791_sel_1 = sel_194;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3791_sel_1 = sel_193;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3791_sel_1 = sel_192;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3791_sel_1 = sel_191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3791_sel_1 = sel_190;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3791_sel_1 = sel_189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3791_sel_1 = sel_188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3791_sel_1 = sel_187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3791_sel_1 = sel_186;
        end
      default :
        begin
          p3791_sel_1 = sel_203;
        end
    endcase
    sel_1_49 = p3791_sel_1;
  end

  assign tmp_218 = functionOutput_17[sel_1_49];

  always @(posedge clk)
    begin : rd_170_process
      if (rst == 1'b1) begin
        s_127 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_127 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_49_process
      if (rst == 1'b1) begin
        tmp_219 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_219 <= tmp_218;
        end
      end
    end

  assign sel_1_50 = (s_117 == 1'b0 ? sel_1_46 :
              tmp_219);

  always @(posedge clk)
    begin : rd_12_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_48 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_48 <= is_SPI_MNGR_38;
        end
      end
    end

  always @(posedge clk)
    begin : rd_13_process
      if (rst == 1'b1) begin
        s_128 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_128 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_14_process
      if (rst == 1'b1) begin
        s_129 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_129 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_15_process
      if (rst == 1'b1) begin
        s_130 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_130 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_16_process
      if (rst == 1'b1) begin
        s_131 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_131 <= s_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_17_process
      if (rst == 1'b1) begin
        s_132 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_132 <= s_17;
        end
      end
    end

  always @(posedge clk)
    begin : rd_18_process
      if (rst == 1'b1) begin
        s_133 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_133 <= s_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_19_process
      if (rst == 1'b1) begin
        s_134 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_134 <= s_15;
        end
      end
    end

  always @(posedge clk)
    begin : rd_20_process
      if (rst == 1'b1) begin
        s_135 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_135 <= s_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_28_process
      if (rst == 1'b1) begin
        tmp_221 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_221 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_27_process
      if (rst == 1'b1) begin
        tmp_222 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_222 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_26_process
      if (rst == 1'b1) begin
        tmp_223 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_223 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_25_process
      if (rst == 1'b1) begin
        tmp_224 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_224 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_24_process
      if (rst == 1'b1) begin
        tmp_225 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_225 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_23_process
      if (rst == 1'b1) begin
        tmp_226 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_226 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_22_process
      if (rst == 1'b1) begin
        tmp_227 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_227 <= tmp_220;
        end
      end
    end

  always @(posedge clk)
    begin : rd_21_process
      if (rst == 1'b1) begin
        tmp_228 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_228 <= tmp_220;
        end
      end
    end

  assign tmp_229 = (s_135 == 1'b0 ? v1_1 :
              tmp_228);

  assign tmp_230 = (s_134 == 1'b0 ? tmp_229 :
              tmp_227);

  assign tmp_231 = (s_133 == 1'b0 ? tmp_230 :
              tmp_226);

  assign tmp_232 = (s_132 == 1'b0 ? tmp_231 :
              tmp_225);

  assign tmp_233 = (s_131 == 1'b0 ? tmp_232 :
              tmp_224);

  assign tmp_234 = (s_130 == 1'b0 ? tmp_233 :
              tmp_223);

  assign tmp_235 = (s_129 == 1'b0 ? tmp_234 :
              tmp_222);

  assign tmp_236 = (s_128 == 1'b0 ? tmp_235 :
              tmp_221);

  always @(posedge clk)
    begin : rd_29_process
      if (rst == 1'b1) begin
        tmp_237 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          tmp_237 <= tmp_220;
        end
      end
    end

  always @(is_SPI_MNGR_48, tmp_236, tmp_237, v1_1) begin
    case ( is_SPI_MNGR_48)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p147_tmp = tmp_236;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p147_tmp = v1_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p147_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p147_tmp = tmp_237;
        end
      default :
        begin
          p147_tmp = tmp_237;
        end
    endcase
    tmp_220 = p147_tmp;
  end

  simfcn1 u_simfcn1_7 (.vx(tmp_220),  // uint16
                       .cont_bits2_0(functionOutput_0_7),  // uint8
                       .cont_bits2_1(functionOutput_1_7),  // uint8
                       .cont_bits2_2(functionOutput_2_7),  // uint8
                       .cont_bits2_3(functionOutput_3_7),  // uint8
                       .cont_bits2_4(functionOutput_4_7),  // uint8
                       .cont_bits2_5(functionOutput_5_7),  // uint8
                       .cont_bits2_6(functionOutput_6_7),  // uint8
                       .cont_bits2_7(functionOutput_7_7),  // uint8
                       .cont_bits2_8(functionOutput_8_7),  // uint8
                       .cont_bits2_9(functionOutput_9_7),  // uint8
                       .cont_bits2_10(functionOutput_10_7),  // uint8
                       .cont_bits2_11(functionOutput_11_7)  // uint8
                       );

  assign functionOutput_18[0] = functionOutput_0_7;
  assign functionOutput_18[1] = functionOutput_1_7;
  assign functionOutput_18[2] = functionOutput_2_7;
  assign functionOutput_18[3] = functionOutput_3_7;
  assign functionOutput_18[4] = functionOutput_4_7;
  assign functionOutput_18[5] = functionOutput_5_7;
  assign functionOutput_18[6] = functionOutput_6_7;
  assign functionOutput_18[7] = functionOutput_7_7;
  assign functionOutput_18[8] = functionOutput_8_7;
  assign functionOutput_18[9] = functionOutput_9_7;
  assign functionOutput_18[10] = functionOutput_10_7;
  assign functionOutput_18[11] = functionOutput_11_7;

  assign sel_204 = 32'sd0;

  assign sel_205 = 32'sd0;

  assign sel_206 = 32'sd0;

  assign sel_207 = 32'sd0;

  assign sel_208 = 32'sd0;

  assign sel_209 = 32'sd0;

  assign sel_210 = 32'sd0;

  assign sel_211 = 32'sd0;

  assign sel_212 = 32'sd0;

  assign sel_213 = 32'sd0;

  assign sel_214 = 32'sd0;

  assign sel_215 = 32'sd0;

  assign sel_216 = 32'sd0;

  assign sel_217 = 32'sd0;

  assign s_136 = 32'sd0;

  assign sel_1_51 = (s_21 == 1'b0 ? sel_217 :
              s_136);

  assign sel_218 = 32'sd0;

  assign sel_219 = 32'sd0;

  assign sel_220 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_51, sel_204, sel_205, sel_206, sel_207, sel_208, sel_209,
       sel_210, sel_211, sel_212, sel_213, sel_214, sel_215, sel_216, sel_218,
       sel_219, sel_220) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4931_sel_1 = sel_219;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4931_sel_1 = sel_218;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4931_sel_1 = sel_1_51;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4931_sel_1 = sel_216;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4931_sel_1 = sel_215;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4931_sel_1 = sel_214;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4931_sel_1 = sel_213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4931_sel_1 = sel_212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4931_sel_1 = sel_211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4931_sel_1 = sel_210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4931_sel_1 = sel_209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4931_sel_1 = sel_208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4931_sel_1 = sel_207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4931_sel_1 = sel_206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4931_sel_1 = sel_205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4931_sel_1 = sel_204;
        end
      default :
        begin
          p4931_sel_1 = sel_220;
        end
    endcase
    sel_1_52 = p4931_sel_1;
  end

  assign tmp_238 = functionOutput_18[sel_1_52];

  simfcn1 u_simfcn1_8 (.vx(tmp_84),  // uint16
                       .cont_bits2_0(functionOutput_0_8),  // uint8
                       .cont_bits2_1(functionOutput_1_8),  // uint8
                       .cont_bits2_2(functionOutput_2_8),  // uint8
                       .cont_bits2_3(functionOutput_3_8),  // uint8
                       .cont_bits2_4(functionOutput_4_8),  // uint8
                       .cont_bits2_5(functionOutput_5_8),  // uint8
                       .cont_bits2_6(functionOutput_6_8),  // uint8
                       .cont_bits2_7(functionOutput_7_8),  // uint8
                       .cont_bits2_8(functionOutput_8_8),  // uint8
                       .cont_bits2_9(functionOutput_9_8),  // uint8
                       .cont_bits2_10(functionOutput_10_8),  // uint8
                       .cont_bits2_11(functionOutput_11_8)  // uint8
                       );

  assign functionOutput_19[0] = functionOutput_0_8;
  assign functionOutput_19[1] = functionOutput_1_8;
  assign functionOutput_19[2] = functionOutput_2_8;
  assign functionOutput_19[3] = functionOutput_3_8;
  assign functionOutput_19[4] = functionOutput_4_8;
  assign functionOutput_19[5] = functionOutput_5_8;
  assign functionOutput_19[6] = functionOutput_6_8;
  assign functionOutput_19[7] = functionOutput_7_8;
  assign functionOutput_19[8] = functionOutput_8_8;
  assign functionOutput_19[9] = functionOutput_9_8;
  assign functionOutput_19[10] = functionOutput_10_8;
  assign functionOutput_19[11] = functionOutput_11_8;

  always @(posedge clk)
    begin : rd_167_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_49 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_49 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_221 = 32'sd0;

  assign sel_222 = 32'sd0;

  assign sel_223 = 32'sd0;

  assign sel_224 = 32'sd0;

  assign sel_225 = 32'sd0;

  assign sel_226 = 32'sd0;

  assign sel_227 = 32'sd0;

  assign sel_228 = 32'sd0;

  assign sel_229 = 32'sd0;

  assign sel_230 = 32'sd0;

  assign sel_231 = 32'sd0;

  assign sel_232 = 32'sd0;

  assign sel_233 = 32'sd0;

  always @(posedge clk)
    begin : rd_168_process
      if (rst == 1'b1) begin
        s_137 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_137 <= s_12;
        end
      end
    end

  assign sel_234 = 32'sd0;

  assign sel_235 = 32'sd0;

  assign sel_236 = 32'sd0;

  assign s_138 = 32'sd0;

  assign sel_1_53 = (tmp_4 == 1'b0 ? sel_236 :
              s_138);

  assign sel_237 = 32'sd0;

  assign sel_1_54 = (tmp_6 == 1'b0 ? sel_1_53 :
              sel_237);

  assign sel_238 = 32'sd0;

  assign sel_1_55 = (tmp_8 == 1'b0 ? sel_1_54 :
              sel_238);

  assign sel_239 = 32'sd0;

  assign sel_1_56 = (tmp_10 == 1'b0 ? sel_1_55 :
              sel_239);

  assign sel_240 = 32'sd0;

  assign sel_1_57 = (tmp_12 == 1'b0 ? sel_1_56 :
              sel_240);

  assign sel_241 = 32'sd0;

  assign sel_1_58 = (tmp_14 == 1'b0 ? sel_1_57 :
              sel_241);

  assign sel_242 = 32'sd0;

  assign sel_1_59 = (tmp_16 == 1'b0 ? sel_1_58 :
              sel_242);

  assign sel_243 = 32'sd0;

  assign sel_1_60 = (tmp_18 == 1'b0 ? sel_1_59 :
              sel_243);

  assign sel_1_61 = (s_10 == 1'b0 ? sel_235 :
              sel_1_60);

  assign sel_1_62 = (s_11 == 1'b0 ? sel_234 :
              sel_1_61);

  always @(posedge clk)
    begin : rd_169_process
      if (rst == 1'b1) begin
        sel_1_63 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_63 <= sel_1_62;
        end
      end
    end

  assign sel_244 = 32'sd0;

  assign sel_245 = 32'sd0;

  assign sel_1_64 = (s_137 == 1'b0 ? sel_1_63 :
              sel_245);

  assign sel_246 = 32'sd0;

  always @(posedge clk)
    begin : rd_181_process
      if (rst == 1'b1) begin
        tmp_239 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_239 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_182_process
      if (rst == 1'b1) begin
        for(rd_182_t_1 = 32'sd0; rd_182_t_1 <= 32'sd11; rd_182_t_1 = rd_182_t_1 + 32'sd1) begin
          rd_182_reg[rd_182_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_182_t_0_1 = 32'sd0; rd_182_t_0_1 <= 32'sd11; rd_182_t_0_1 = rd_182_t_0_1 + 32'sd1) begin
            rd_182_reg[rd_182_t_0_1] <= rd_182_reg_next[rd_182_t_0_1];
          end
        end
      end
    end
  genvar t_0_013;
  generate
    for(t_0_013 = 32'sd0; t_0_013 <= 32'sd11; t_0_013 = t_0_013 + 32'sd1) begin:rd_182_reg_next_gen
      assign functionOutput_20[t_0_013] = rd_182_reg[t_0_013];
      assign rd_182_reg_next[t_0_013] = functionOutput_19[t_0_013];
    end
  endgenerate

  assign sel_247 = 32'sd0;

  always @(is_SPI_MNGR_49, sel_1_64, sel_221, sel_222, sel_223, sel_224, sel_225, sel_226,
       sel_227, sel_228, sel_229, sel_230, sel_231, sel_232, sel_233, sel_244,
       sel_246, sel_247) begin
    case ( is_SPI_MNGR_49)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2347_sel_1 = sel_246;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2347_sel_1 = sel_1_64;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2347_sel_1 = sel_244;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2347_sel_1 = sel_233;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2347_sel_1 = sel_232;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2347_sel_1 = sel_231;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2347_sel_1 = sel_230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2347_sel_1 = sel_229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2347_sel_1 = sel_228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2347_sel_1 = sel_227;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2347_sel_1 = sel_226;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2347_sel_1 = sel_225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2347_sel_1 = sel_224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2347_sel_1 = sel_223;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2347_sel_1 = sel_222;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2347_sel_1 = sel_221;
        end
      default :
        begin
          p2347_sel_1 = sel_247;
        end
    endcase
    sel_1_65 = p2347_sel_1;
  end

  assign tmp_240 = functionOutput_20[sel_1_65];

  simfcn1 u_simfcn1_9 (.vx(tmp_103),  // uint16
                       .cont_bits2_0(functionOutput_0_9),  // uint8
                       .cont_bits2_1(functionOutput_1_9),  // uint8
                       .cont_bits2_2(functionOutput_2_9),  // uint8
                       .cont_bits2_3(functionOutput_3_9),  // uint8
                       .cont_bits2_4(functionOutput_4_9),  // uint8
                       .cont_bits2_5(functionOutput_5_9),  // uint8
                       .cont_bits2_6(functionOutput_6_9),  // uint8
                       .cont_bits2_7(functionOutput_7_9),  // uint8
                       .cont_bits2_8(functionOutput_8_9),  // uint8
                       .cont_bits2_9(functionOutput_9_9),  // uint8
                       .cont_bits2_10(functionOutput_10_9),  // uint8
                       .cont_bits2_11(functionOutput_11_9)  // uint8
                       );

  assign functionOutput_21[0] = functionOutput_0_9;
  assign functionOutput_21[1] = functionOutput_1_9;
  assign functionOutput_21[2] = functionOutput_2_9;
  assign functionOutput_21[3] = functionOutput_3_9;
  assign functionOutput_21[4] = functionOutput_4_9;
  assign functionOutput_21[5] = functionOutput_5_9;
  assign functionOutput_21[6] = functionOutput_6_9;
  assign functionOutput_21[7] = functionOutput_7_9;
  assign functionOutput_21[8] = functionOutput_8_9;
  assign functionOutput_21[9] = functionOutput_9_9;
  assign functionOutput_21[10] = functionOutput_10_9;
  assign functionOutput_21[11] = functionOutput_11_9;

  assign sel_248 = 32'sd0;

  assign sel_249 = 32'sd0;

  assign sel_250 = 32'sd0;

  assign sel_251 = 32'sd0;

  assign sel_252 = 32'sd0;

  assign sel_253 = 32'sd0;

  assign sel_254 = 32'sd0;

  assign sel_255 = 32'sd0;

  assign sel_256 = 32'sd0;

  assign sel_257 = 32'sd0;

  assign sel_258 = 32'sd0;

  assign sel_259 = 32'sd0;

  assign sel_260 = 32'sd0;

  assign sel_261 = 32'sd0;

  assign sel_262 = 32'sd0;

  assign sel_263 = 32'sd0;

  assign sel_264 = 32'sd0;

  assign s_139 = 32'sd0;

  assign sel_1_66 = (tmp_6 == 1'b0 ? sel_264 :
              s_139);

  assign sel_265 = 32'sd0;

  assign sel_1_67 = (tmp_8 == 1'b0 ? sel_1_66 :
              sel_265);

  assign sel_266 = 32'sd0;

  assign sel_1_68 = (tmp_10 == 1'b0 ? sel_1_67 :
              sel_266);

  assign sel_267 = 32'sd0;

  assign sel_1_69 = (tmp_12 == 1'b0 ? sel_1_68 :
              sel_267);

  assign sel_268 = 32'sd0;

  assign sel_1_70 = (tmp_14 == 1'b0 ? sel_1_69 :
              sel_268);

  assign sel_269 = 32'sd0;

  assign sel_1_71 = (tmp_16 == 1'b0 ? sel_1_70 :
              sel_269);

  assign sel_270 = 32'sd0;

  assign sel_1_72 = (tmp_18 == 1'b0 ? sel_1_71 :
              sel_270);

  assign sel_1_73 = (s_10 == 1'b0 ? sel_263 :
              sel_1_72);

  assign sel_1_74 = (s_11 == 1'b0 ? sel_262 :
              sel_1_73);

  assign sel_271 = 32'sd0;

  assign sel_1_75 = (s_12 == 1'b0 ? sel_1_74 :
              sel_271);

  assign sel_272 = 32'sd0;

  assign sel_273 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_75, sel_248, sel_249, sel_250, sel_251, sel_252, sel_253,
       sel_254, sel_255, sel_256, sel_257, sel_258, sel_259, sel_260, sel_261,
       sel_272, sel_273) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2670_sel_1 = sel_272;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2670_sel_1 = sel_1_75;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2670_sel_1 = sel_261;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2670_sel_1 = sel_260;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2670_sel_1 = sel_259;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2670_sel_1 = sel_258;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2670_sel_1 = sel_257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2670_sel_1 = sel_256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2670_sel_1 = sel_255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2670_sel_1 = sel_254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2670_sel_1 = sel_253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2670_sel_1 = sel_252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2670_sel_1 = sel_251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2670_sel_1 = sel_250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2670_sel_1 = sel_249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2670_sel_1 = sel_248;
        end
      default :
        begin
          p2670_sel_1 = sel_273;
        end
    endcase
    sel_1_76 = p2670_sel_1;
  end

  assign tmp_241 = functionOutput_21[sel_1_76];

  always @(posedge clk)
    begin : rd_180_process
      if (rst == 1'b1) begin
        tmp_242 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_242 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_166_process
      if (rst == 1'b1) begin
        tmp_243 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_243 <= tmp_241;
        end
      end
    end

  assign sel_1_77 = (tmp_239 == 1'b0 ? tmp_240 :
              tmp_243);

  simfcn1 u_simfcn1_10 (.vx(tmp_122),  // uint16
                        .cont_bits2_0(functionOutput_0_10),  // uint8
                        .cont_bits2_1(functionOutput_1_10),  // uint8
                        .cont_bits2_2(functionOutput_2_10),  // uint8
                        .cont_bits2_3(functionOutput_3_10),  // uint8
                        .cont_bits2_4(functionOutput_4_10),  // uint8
                        .cont_bits2_5(functionOutput_5_10),  // uint8
                        .cont_bits2_6(functionOutput_6_10),  // uint8
                        .cont_bits2_7(functionOutput_7_10),  // uint8
                        .cont_bits2_8(functionOutput_8_10),  // uint8
                        .cont_bits2_9(functionOutput_9_10),  // uint8
                        .cont_bits2_10(functionOutput_10_10),  // uint8
                        .cont_bits2_11(functionOutput_11_10)  // uint8
                        );

  assign functionOutput_22[0] = functionOutput_0_10;
  assign functionOutput_22[1] = functionOutput_1_10;
  assign functionOutput_22[2] = functionOutput_2_10;
  assign functionOutput_22[3] = functionOutput_3_10;
  assign functionOutput_22[4] = functionOutput_4_10;
  assign functionOutput_22[5] = functionOutput_5_10;
  assign functionOutput_22[6] = functionOutput_6_10;
  assign functionOutput_22[7] = functionOutput_7_10;
  assign functionOutput_22[8] = functionOutput_8_10;
  assign functionOutput_22[9] = functionOutput_9_10;
  assign functionOutput_22[10] = functionOutput_10_10;
  assign functionOutput_22[11] = functionOutput_11_10;

  assign sel_274 = 32'sd0;

  assign sel_275 = 32'sd0;

  assign sel_276 = 32'sd0;

  assign sel_277 = 32'sd0;

  assign sel_278 = 32'sd0;

  assign sel_279 = 32'sd0;

  assign sel_280 = 32'sd0;

  assign sel_281 = 32'sd0;

  assign sel_282 = 32'sd0;

  assign sel_283 = 32'sd0;

  assign sel_284 = 32'sd0;

  assign sel_285 = 32'sd0;

  assign sel_286 = 32'sd0;

  assign sel_287 = 32'sd0;

  assign sel_288 = 32'sd0;

  assign sel_289 = 32'sd0;

  assign sel_290 = 32'sd0;

  assign s_140 = 32'sd0;

  assign sel_1_78 = (tmp_8 == 1'b0 ? sel_290 :
              s_140);

  assign sel_291 = 32'sd0;

  assign sel_1_79 = (tmp_10 == 1'b0 ? sel_1_78 :
              sel_291);

  assign sel_292 = 32'sd0;

  assign sel_1_80 = (tmp_12 == 1'b0 ? sel_1_79 :
              sel_292);

  assign sel_293 = 32'sd0;

  assign sel_1_81 = (tmp_14 == 1'b0 ? sel_1_80 :
              sel_293);

  assign sel_294 = 32'sd0;

  assign sel_1_82 = (tmp_16 == 1'b0 ? sel_1_81 :
              sel_294);

  assign sel_295 = 32'sd0;

  assign sel_1_83 = (tmp_18 == 1'b0 ? sel_1_82 :
              sel_295);

  assign sel_1_84 = (s_10 == 1'b0 ? sel_289 :
              sel_1_83);

  assign sel_1_85 = (s_11 == 1'b0 ? sel_288 :
              sel_1_84);

  assign sel_296 = 32'sd0;

  assign sel_1_86 = (s_12 == 1'b0 ? sel_1_85 :
              sel_296);

  assign sel_297 = 32'sd0;

  assign sel_298 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_86, sel_274, sel_275, sel_276, sel_277, sel_278, sel_279,
       sel_280, sel_281, sel_282, sel_283, sel_284, sel_285, sel_286, sel_287,
       sel_297, sel_298) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2442_sel_1 = sel_297;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2442_sel_1 = sel_1_86;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2442_sel_1 = sel_287;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2442_sel_1 = sel_286;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2442_sel_1 = sel_285;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2442_sel_1 = sel_284;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2442_sel_1 = sel_283;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2442_sel_1 = sel_282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2442_sel_1 = sel_281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2442_sel_1 = sel_280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2442_sel_1 = sel_279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2442_sel_1 = sel_278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2442_sel_1 = sel_277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2442_sel_1 = sel_276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2442_sel_1 = sel_275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2442_sel_1 = sel_274;
        end
      default :
        begin
          p2442_sel_1 = sel_298;
        end
    endcase
    sel_1_87 = p2442_sel_1;
  end

  assign tmp_244 = functionOutput_22[sel_1_87];

  always @(posedge clk)
    begin : rd_179_process
      if (rst == 1'b1) begin
        tmp_245 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_245 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_165_process
      if (rst == 1'b1) begin
        tmp_246 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_246 <= tmp_244;
        end
      end
    end

  assign sel_1_88 = (tmp_242 == 1'b0 ? sel_1_77 :
              tmp_246);

  simfcn1 u_simfcn1_11 (.vx(tmp_141),  // uint16
                        .cont_bits2_0(functionOutput_0_11),  // uint8
                        .cont_bits2_1(functionOutput_1_11),  // uint8
                        .cont_bits2_2(functionOutput_2_11),  // uint8
                        .cont_bits2_3(functionOutput_3_11),  // uint8
                        .cont_bits2_4(functionOutput_4_11),  // uint8
                        .cont_bits2_5(functionOutput_5_11),  // uint8
                        .cont_bits2_6(functionOutput_6_11),  // uint8
                        .cont_bits2_7(functionOutput_7_11),  // uint8
                        .cont_bits2_8(functionOutput_8_11),  // uint8
                        .cont_bits2_9(functionOutput_9_11),  // uint8
                        .cont_bits2_10(functionOutput_10_11),  // uint8
                        .cont_bits2_11(functionOutput_11_11)  // uint8
                        );

  assign functionOutput_23[0] = functionOutput_0_11;
  assign functionOutput_23[1] = functionOutput_1_11;
  assign functionOutput_23[2] = functionOutput_2_11;
  assign functionOutput_23[3] = functionOutput_3_11;
  assign functionOutput_23[4] = functionOutput_4_11;
  assign functionOutput_23[5] = functionOutput_5_11;
  assign functionOutput_23[6] = functionOutput_6_11;
  assign functionOutput_23[7] = functionOutput_7_11;
  assign functionOutput_23[8] = functionOutput_8_11;
  assign functionOutput_23[9] = functionOutput_9_11;
  assign functionOutput_23[10] = functionOutput_10_11;
  assign functionOutput_23[11] = functionOutput_11_11;

  assign sel_299 = 32'sd0;

  assign sel_300 = 32'sd0;

  assign sel_301 = 32'sd0;

  assign sel_302 = 32'sd0;

  assign sel_303 = 32'sd0;

  assign sel_304 = 32'sd0;

  assign sel_305 = 32'sd0;

  assign sel_306 = 32'sd0;

  assign sel_307 = 32'sd0;

  assign sel_308 = 32'sd0;

  assign sel_309 = 32'sd0;

  assign sel_310 = 32'sd0;

  assign sel_311 = 32'sd0;

  assign sel_312 = 32'sd0;

  assign sel_313 = 32'sd0;

  assign sel_314 = 32'sd0;

  assign sel_315 = 32'sd0;

  assign s_141 = 32'sd0;

  assign sel_1_89 = (tmp_10 == 1'b0 ? sel_315 :
              s_141);

  assign sel_316 = 32'sd0;

  assign sel_1_90 = (tmp_12 == 1'b0 ? sel_1_89 :
              sel_316);

  assign sel_317 = 32'sd0;

  assign sel_1_91 = (tmp_14 == 1'b0 ? sel_1_90 :
              sel_317);

  assign sel_318 = 32'sd0;

  assign sel_1_92 = (tmp_16 == 1'b0 ? sel_1_91 :
              sel_318);

  assign sel_319 = 32'sd0;

  assign sel_1_93 = (tmp_18 == 1'b0 ? sel_1_92 :
              sel_319);

  assign sel_1_94 = (s_10 == 1'b0 ? sel_314 :
              sel_1_93);

  assign sel_1_95 = (s_11 == 1'b0 ? sel_313 :
              sel_1_94);

  assign sel_320 = 32'sd0;

  assign sel_1_96 = (s_12 == 1'b0 ? sel_1_95 :
              sel_320);

  assign sel_321 = 32'sd0;

  assign sel_322 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_96, sel_299, sel_300, sel_301, sel_302, sel_303, sel_304,
       sel_305, sel_306, sel_307, sel_308, sel_309, sel_310, sel_311, sel_312,
       sel_321, sel_322) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2727_sel_1 = sel_321;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2727_sel_1 = sel_1_96;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2727_sel_1 = sel_312;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2727_sel_1 = sel_311;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2727_sel_1 = sel_310;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2727_sel_1 = sel_309;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2727_sel_1 = sel_308;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2727_sel_1 = sel_307;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2727_sel_1 = sel_306;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2727_sel_1 = sel_305;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2727_sel_1 = sel_304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2727_sel_1 = sel_303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2727_sel_1 = sel_302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2727_sel_1 = sel_301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2727_sel_1 = sel_300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2727_sel_1 = sel_299;
        end
      default :
        begin
          p2727_sel_1 = sel_322;
        end
    endcase
    sel_1_97 = p2727_sel_1;
  end

  assign tmp_247 = functionOutput_23[sel_1_97];

  always @(posedge clk)
    begin : rd_178_process
      if (rst == 1'b1) begin
        tmp_248 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_248 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_164_process
      if (rst == 1'b1) begin
        tmp_249 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_249 <= tmp_247;
        end
      end
    end

  assign sel_1_98 = (tmp_245 == 1'b0 ? sel_1_88 :
              tmp_249);

  simfcn1 u_simfcn1_12 (.vx(tmp_160),  // uint16
                        .cont_bits2_0(functionOutput_0_12),  // uint8
                        .cont_bits2_1(functionOutput_1_12),  // uint8
                        .cont_bits2_2(functionOutput_2_12),  // uint8
                        .cont_bits2_3(functionOutput_3_12),  // uint8
                        .cont_bits2_4(functionOutput_4_12),  // uint8
                        .cont_bits2_5(functionOutput_5_12),  // uint8
                        .cont_bits2_6(functionOutput_6_12),  // uint8
                        .cont_bits2_7(functionOutput_7_12),  // uint8
                        .cont_bits2_8(functionOutput_8_12),  // uint8
                        .cont_bits2_9(functionOutput_9_12),  // uint8
                        .cont_bits2_10(functionOutput_10_12),  // uint8
                        .cont_bits2_11(functionOutput_11_12)  // uint8
                        );

  assign functionOutput_24[0] = functionOutput_0_12;
  assign functionOutput_24[1] = functionOutput_1_12;
  assign functionOutput_24[2] = functionOutput_2_12;
  assign functionOutput_24[3] = functionOutput_3_12;
  assign functionOutput_24[4] = functionOutput_4_12;
  assign functionOutput_24[5] = functionOutput_5_12;
  assign functionOutput_24[6] = functionOutput_6_12;
  assign functionOutput_24[7] = functionOutput_7_12;
  assign functionOutput_24[8] = functionOutput_8_12;
  assign functionOutput_24[9] = functionOutput_9_12;
  assign functionOutput_24[10] = functionOutput_10_12;
  assign functionOutput_24[11] = functionOutput_11_12;

  assign sel_323 = 32'sd0;

  assign sel_324 = 32'sd0;

  assign sel_325 = 32'sd0;

  assign sel_326 = 32'sd0;

  assign sel_327 = 32'sd0;

  assign sel_328 = 32'sd0;

  assign sel_329 = 32'sd0;

  assign sel_330 = 32'sd0;

  assign sel_331 = 32'sd0;

  assign sel_332 = 32'sd0;

  assign sel_333 = 32'sd0;

  assign sel_334 = 32'sd0;

  assign sel_335 = 32'sd0;

  assign sel_336 = 32'sd0;

  assign sel_337 = 32'sd0;

  assign sel_338 = 32'sd0;

  assign sel_339 = 32'sd0;

  assign s_142 = 32'sd0;

  assign sel_1_99 = (tmp_12 == 1'b0 ? sel_339 :
              s_142);

  assign sel_340 = 32'sd0;

  assign sel_1_100 = (tmp_14 == 1'b0 ? sel_1_99 :
              sel_340);

  assign sel_341 = 32'sd0;

  assign sel_1_101 = (tmp_16 == 1'b0 ? sel_1_100 :
              sel_341);

  assign sel_342 = 32'sd0;

  assign sel_1_102 = (tmp_18 == 1'b0 ? sel_1_101 :
              sel_342);

  assign sel_1_103 = (s_10 == 1'b0 ? sel_338 :
              sel_1_102);

  assign sel_1_104 = (s_11 == 1'b0 ? sel_337 :
              sel_1_103);

  assign sel_343 = 32'sd0;

  assign sel_1_105 = (s_12 == 1'b0 ? sel_1_104 :
              sel_343);

  assign sel_344 = 32'sd0;

  assign sel_345 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_105, sel_323, sel_324, sel_325, sel_326, sel_327,
       sel_328, sel_329, sel_330, sel_331, sel_332, sel_333, sel_334, sel_335,
       sel_336, sel_344, sel_345) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3297_sel_1 = sel_344;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3297_sel_1 = sel_1_105;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3297_sel_1 = sel_336;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3297_sel_1 = sel_335;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3297_sel_1 = sel_334;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3297_sel_1 = sel_333;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3297_sel_1 = sel_332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3297_sel_1 = sel_331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3297_sel_1 = sel_330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3297_sel_1 = sel_329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3297_sel_1 = sel_328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3297_sel_1 = sel_327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3297_sel_1 = sel_326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3297_sel_1 = sel_325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3297_sel_1 = sel_324;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3297_sel_1 = sel_323;
        end
      default :
        begin
          p3297_sel_1 = sel_345;
        end
    endcase
    sel_1_106 = p3297_sel_1;
  end

  assign tmp_250 = functionOutput_24[sel_1_106];

  always @(posedge clk)
    begin : rd_177_process
      if (rst == 1'b1) begin
        tmp_251 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_251 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_163_process
      if (rst == 1'b1) begin
        tmp_252 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_252 <= tmp_250;
        end
      end
    end

  assign sel_1_107 = (tmp_248 == 1'b0 ? sel_1_98 :
              tmp_252);

  simfcn1 u_simfcn1_13 (.vx(tmp_180),  // uint16
                        .cont_bits2_0(functionOutput_0_13),  // uint8
                        .cont_bits2_1(functionOutput_1_13),  // uint8
                        .cont_bits2_2(functionOutput_2_13),  // uint8
                        .cont_bits2_3(functionOutput_3_13),  // uint8
                        .cont_bits2_4(functionOutput_4_13),  // uint8
                        .cont_bits2_5(functionOutput_5_13),  // uint8
                        .cont_bits2_6(functionOutput_6_13),  // uint8
                        .cont_bits2_7(functionOutput_7_13),  // uint8
                        .cont_bits2_8(functionOutput_8_13),  // uint8
                        .cont_bits2_9(functionOutput_9_13),  // uint8
                        .cont_bits2_10(functionOutput_10_13),  // uint8
                        .cont_bits2_11(functionOutput_11_13)  // uint8
                        );

  assign functionOutput_25[0] = functionOutput_0_13;
  assign functionOutput_25[1] = functionOutput_1_13;
  assign functionOutput_25[2] = functionOutput_2_13;
  assign functionOutput_25[3] = functionOutput_3_13;
  assign functionOutput_25[4] = functionOutput_4_13;
  assign functionOutput_25[5] = functionOutput_5_13;
  assign functionOutput_25[6] = functionOutput_6_13;
  assign functionOutput_25[7] = functionOutput_7_13;
  assign functionOutput_25[8] = functionOutput_8_13;
  assign functionOutput_25[9] = functionOutput_9_13;
  assign functionOutput_25[10] = functionOutput_10_13;
  assign functionOutput_25[11] = functionOutput_11_13;

  assign sel_346 = 32'sd0;

  assign sel_347 = 32'sd0;

  assign sel_348 = 32'sd0;

  assign sel_349 = 32'sd0;

  assign sel_350 = 32'sd0;

  assign sel_351 = 32'sd0;

  assign sel_352 = 32'sd0;

  assign sel_353 = 32'sd0;

  assign sel_354 = 32'sd0;

  assign sel_355 = 32'sd0;

  assign sel_356 = 32'sd0;

  assign sel_357 = 32'sd0;

  assign sel_358 = 32'sd0;

  assign sel_359 = 32'sd0;

  assign sel_360 = 32'sd0;

  assign sel_361 = 32'sd0;

  assign sel_362 = 32'sd0;

  assign s_143 = 32'sd0;

  assign sel_1_108 = (tmp_14 == 1'b0 ? sel_362 :
              s_143);

  assign sel_363 = 32'sd0;

  assign sel_1_109 = (tmp_16 == 1'b0 ? sel_1_108 :
              sel_363);

  assign sel_364 = 32'sd0;

  assign sel_1_110 = (tmp_18 == 1'b0 ? sel_1_109 :
              sel_364);

  assign sel_1_111 = (s_10 == 1'b0 ? sel_361 :
              sel_1_110);

  assign sel_1_112 = (s_11 == 1'b0 ? sel_360 :
              sel_1_111);

  assign sel_365 = 32'sd0;

  assign sel_1_113 = (s_12 == 1'b0 ? sel_1_112 :
              sel_365);

  assign sel_366 = 32'sd0;

  assign sel_367 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_113, sel_346, sel_347, sel_348, sel_349, sel_350,
       sel_351, sel_352, sel_353, sel_354, sel_355, sel_356, sel_357, sel_358,
       sel_359, sel_366, sel_367) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1872_sel_1 = sel_366;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1872_sel_1 = sel_1_113;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1872_sel_1 = sel_359;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1872_sel_1 = sel_358;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1872_sel_1 = sel_357;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1872_sel_1 = sel_356;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1872_sel_1 = sel_355;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1872_sel_1 = sel_354;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1872_sel_1 = sel_353;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1872_sel_1 = sel_352;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1872_sel_1 = sel_351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1872_sel_1 = sel_350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1872_sel_1 = sel_349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1872_sel_1 = sel_348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1872_sel_1 = sel_347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1872_sel_1 = sel_346;
        end
      default :
        begin
          p1872_sel_1 = sel_367;
        end
    endcase
    sel_1_114 = p1872_sel_1;
  end

  assign tmp_253 = functionOutput_25[sel_1_114];

  always @(posedge clk)
    begin : rd_176_process
      if (rst == 1'b1) begin
        tmp_254 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_254 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_162_process
      if (rst == 1'b1) begin
        tmp_255 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_255 <= tmp_253;
        end
      end
    end

  assign sel_1_115 = (tmp_251 == 1'b0 ? sel_1_107 :
              tmp_255);

  simfcn1 u_simfcn1_14 (.vx(tmp_200),  // uint16
                        .cont_bits2_0(functionOutput_0_14),  // uint8
                        .cont_bits2_1(functionOutput_1_14),  // uint8
                        .cont_bits2_2(functionOutput_2_14),  // uint8
                        .cont_bits2_3(functionOutput_3_14),  // uint8
                        .cont_bits2_4(functionOutput_4_14),  // uint8
                        .cont_bits2_5(functionOutput_5_14),  // uint8
                        .cont_bits2_6(functionOutput_6_14),  // uint8
                        .cont_bits2_7(functionOutput_7_14),  // uint8
                        .cont_bits2_8(functionOutput_8_14),  // uint8
                        .cont_bits2_9(functionOutput_9_14),  // uint8
                        .cont_bits2_10(functionOutput_10_14),  // uint8
                        .cont_bits2_11(functionOutput_11_14)  // uint8
                        );

  assign functionOutput_26[0] = functionOutput_0_14;
  assign functionOutput_26[1] = functionOutput_1_14;
  assign functionOutput_26[2] = functionOutput_2_14;
  assign functionOutput_26[3] = functionOutput_3_14;
  assign functionOutput_26[4] = functionOutput_4_14;
  assign functionOutput_26[5] = functionOutput_5_14;
  assign functionOutput_26[6] = functionOutput_6_14;
  assign functionOutput_26[7] = functionOutput_7_14;
  assign functionOutput_26[8] = functionOutput_8_14;
  assign functionOutput_26[9] = functionOutput_9_14;
  assign functionOutput_26[10] = functionOutput_10_14;
  assign functionOutput_26[11] = functionOutput_11_14;

  assign sel_368 = 32'sd0;

  assign sel_369 = 32'sd0;

  assign sel_370 = 32'sd0;

  assign sel_371 = 32'sd0;

  assign sel_372 = 32'sd0;

  assign sel_373 = 32'sd0;

  assign sel_374 = 32'sd0;

  assign sel_375 = 32'sd0;

  assign sel_376 = 32'sd0;

  assign sel_377 = 32'sd0;

  assign sel_378 = 32'sd0;

  assign sel_379 = 32'sd0;

  assign sel_380 = 32'sd0;

  assign sel_381 = 32'sd0;

  assign sel_382 = 32'sd0;

  assign sel_383 = 32'sd0;

  assign sel_384 = 32'sd0;

  assign s_144 = 32'sd0;

  assign sel_1_116 = (tmp_16 == 1'b0 ? sel_384 :
              s_144);

  assign sel_385 = 32'sd0;

  assign sel_1_117 = (tmp_18 == 1'b0 ? sel_1_116 :
              sel_385);

  assign sel_1_118 = (s_10 == 1'b0 ? sel_383 :
              sel_1_117);

  assign sel_1_119 = (s_11 == 1'b0 ? sel_382 :
              sel_1_118);

  assign sel_386 = 32'sd0;

  assign sel_1_120 = (s_12 == 1'b0 ? sel_1_119 :
              sel_386);

  assign sel_387 = 32'sd0;

  assign sel_388 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_120, sel_368, sel_369, sel_370, sel_371, sel_372,
       sel_373, sel_374, sel_375, sel_376, sel_377, sel_378, sel_379, sel_380,
       sel_381, sel_387, sel_388) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2366_sel_1 = sel_387;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2366_sel_1 = sel_1_120;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2366_sel_1 = sel_381;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2366_sel_1 = sel_380;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2366_sel_1 = sel_379;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2366_sel_1 = sel_378;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2366_sel_1 = sel_377;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2366_sel_1 = sel_376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2366_sel_1 = sel_375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2366_sel_1 = sel_374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2366_sel_1 = sel_373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2366_sel_1 = sel_372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2366_sel_1 = sel_371;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2366_sel_1 = sel_370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2366_sel_1 = sel_369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2366_sel_1 = sel_368;
        end
      default :
        begin
          p2366_sel_1 = sel_388;
        end
    endcase
    sel_1_121 = p2366_sel_1;
  end

  assign tmp_256 = functionOutput_26[sel_1_121];

  always @(posedge clk)
    begin : rd_175_process
      if (rst == 1'b1) begin
        tmp_257 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_257 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_161_process
      if (rst == 1'b1) begin
        tmp_258 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_258 <= tmp_256;
        end
      end
    end

  assign sel_1_122 = (tmp_254 == 1'b0 ? sel_1_115 :
              tmp_258);

  simfcn1 u_simfcn1_15 (.vx(tmp_220),  // uint16
                        .cont_bits2_0(functionOutput_0_15),  // uint8
                        .cont_bits2_1(functionOutput_1_15),  // uint8
                        .cont_bits2_2(functionOutput_2_15),  // uint8
                        .cont_bits2_3(functionOutput_3_15),  // uint8
                        .cont_bits2_4(functionOutput_4_15),  // uint8
                        .cont_bits2_5(functionOutput_5_15),  // uint8
                        .cont_bits2_6(functionOutput_6_15),  // uint8
                        .cont_bits2_7(functionOutput_7_15),  // uint8
                        .cont_bits2_8(functionOutput_8_15),  // uint8
                        .cont_bits2_9(functionOutput_9_15),  // uint8
                        .cont_bits2_10(functionOutput_10_15),  // uint8
                        .cont_bits2_11(functionOutput_11_15)  // uint8
                        );

  assign functionOutput_27[0] = functionOutput_0_15;
  assign functionOutput_27[1] = functionOutput_1_15;
  assign functionOutput_27[2] = functionOutput_2_15;
  assign functionOutput_27[3] = functionOutput_3_15;
  assign functionOutput_27[4] = functionOutput_4_15;
  assign functionOutput_27[5] = functionOutput_5_15;
  assign functionOutput_27[6] = functionOutput_6_15;
  assign functionOutput_27[7] = functionOutput_7_15;
  assign functionOutput_27[8] = functionOutput_8_15;
  assign functionOutput_27[9] = functionOutput_9_15;
  assign functionOutput_27[10] = functionOutput_10_15;
  assign functionOutput_27[11] = functionOutput_11_15;

  assign sel_389 = 32'sd0;

  assign sel_390 = 32'sd0;

  assign sel_391 = 32'sd0;

  assign sel_392 = 32'sd0;

  assign sel_393 = 32'sd0;

  assign sel_394 = 32'sd0;

  assign sel_395 = 32'sd0;

  assign sel_396 = 32'sd0;

  assign sel_397 = 32'sd0;

  assign sel_398 = 32'sd0;

  assign sel_399 = 32'sd0;

  assign sel_400 = 32'sd0;

  assign sel_401 = 32'sd0;

  assign sel_402 = 32'sd0;

  assign sel_403 = 32'sd0;

  assign sel_404 = 32'sd0;

  assign sel_405 = 32'sd0;

  assign s_145 = 32'sd0;

  assign sel_1_123 = (tmp_18 == 1'b0 ? sel_405 :
              s_145);

  assign sel_1_124 = (s_10 == 1'b0 ? sel_404 :
              sel_1_123);

  assign sel_1_125 = (s_11 == 1'b0 ? sel_403 :
              sel_1_124);

  assign sel_406 = 32'sd0;

  assign sel_1_126 = (s_12 == 1'b0 ? sel_1_125 :
              sel_406);

  assign sel_407 = 32'sd0;

  assign sel_408 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_126, sel_389, sel_390, sel_391, sel_392, sel_393,
       sel_394, sel_395, sel_396, sel_397, sel_398, sel_399, sel_400, sel_401,
       sel_402, sel_407, sel_408) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3259_sel_1 = sel_407;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3259_sel_1 = sel_1_126;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3259_sel_1 = sel_402;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3259_sel_1 = sel_401;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3259_sel_1 = sel_400;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3259_sel_1 = sel_399;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3259_sel_1 = sel_398;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3259_sel_1 = sel_397;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3259_sel_1 = sel_396;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3259_sel_1 = sel_395;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3259_sel_1 = sel_394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3259_sel_1 = sel_393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3259_sel_1 = sel_392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3259_sel_1 = sel_391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3259_sel_1 = sel_390;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3259_sel_1 = sel_389;
        end
      default :
        begin
          p3259_sel_1 = sel_408;
        end
    endcase
    sel_1_127 = p3259_sel_1;
  end

  assign tmp_259 = functionOutput_27[sel_1_127];

  assign sel_409 = 8'd0;

  always @(posedge clk)
    begin : rd_30_process
      if (rst == 1'b1) begin
        tmp_260 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_260 <= tmp_238;
        end
      end
    end

  assign sel_1_128 = (s_127 == 1'b0 ? sel_1_50 :
              tmp_260);

  always @(posedge clk)
    begin : rd_160_process
      if (rst == 1'b1) begin
        tmp_261 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_261 <= tmp_259;
        end
      end
    end

  assign sel_1_129 = (tmp_257 == 1'b0 ? sel_1_122 :
              tmp_261);

  assign sel_410 = 8'd0;

  always @(posedge clk)
    begin : rd_183_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_50 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_50 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_411 = 1'b0;

  assign sel_412 = 1'b0;

  assign sel_413 = 1'b0;

  assign sel_414 = 1'b0;

  assign sel_415 = 1'b0;

  assign sel_416 = 1'b0;

  assign sel_417 = 1'b0;

  assign sel_418 = 1'b0;

  assign sel_419 = 1'b0;

  assign sel_420 = 1'b0;

  assign sel_421 = 1'b0;

  assign sel_422 = 1'b0;

  assign sel_423 = 1'b0;

  assign sel_424 = 1'b0;

  assign s_146 = 1'b1;

  assign sel_2_5 = (s_14 == 1'b0 ? sel_424 :
              s_146);

  assign s_147 = 1'b1;

  assign sel_2_6 = (s_15 == 1'b0 ? sel_2_5 :
              s_147);

  assign s_148 = 1'b1;

  assign sel_2_7 = (s_16 == 1'b0 ? sel_2_6 :
              s_148);

  assign s_149 = 1'b1;

  assign sel_2_8 = (s_17 == 1'b0 ? sel_2_7 :
              s_149);

  assign s_150 = 1'b1;

  assign sel_2_9 = (s_18 == 1'b0 ? sel_2_8 :
              s_150);

  assign s_151 = 1'b1;

  assign sel_2_10 = (s_19 == 1'b0 ? sel_2_9 :
              s_151);

  assign s_152 = 1'b1;

  assign sel_2_11 = (s_20 == 1'b0 ? sel_2_10 :
              s_152);

  assign s_153 = 1'b1;

  assign sel_2_12 = (s_21 == 1'b0 ? sel_2_11 :
              s_153);

  always @(posedge clk)
    begin : rd_185_process
      if (rst == 1'b1) begin
        s_154 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_154 <= s_12;
        end
      end
    end

  assign sel_425 = 1'b0;

  assign sel_426 = 1'b0;

  assign sel_427 = 1'b0;

  assign s_155 = 1'b1;

  assign sel_2_13 = (tmp_4 == 1'b0 ? sel_427 :
              s_155);

  assign s_156 = 1'b1;

  assign sel_2_14 = (tmp_6 == 1'b0 ? sel_2_13 :
              s_156);

  assign s_157 = 1'b1;

  assign sel_2_15 = (tmp_8 == 1'b0 ? sel_2_14 :
              s_157);

  assign s_158 = 1'b1;

  assign sel_2_16 = (tmp_10 == 1'b0 ? sel_2_15 :
              s_158);

  assign s_159 = 1'b1;

  assign sel_2_17 = (tmp_12 == 1'b0 ? sel_2_16 :
              s_159);

  assign s_160 = 1'b1;

  assign sel_2_18 = (tmp_14 == 1'b0 ? sel_2_17 :
              s_160);

  assign s_161 = 1'b1;

  assign sel_2_19 = (tmp_16 == 1'b0 ? sel_2_18 :
              s_161);

  assign s_162 = 1'b1;

  assign sel_2_20 = (tmp_18 == 1'b0 ? sel_2_19 :
              s_162);

  assign sel_2_21 = (s_10 == 1'b0 ? sel_426 :
              sel_2_20);

  assign sel_2_22 = (s_11 == 1'b0 ? sel_425 :
              sel_2_21);

  always @(posedge clk)
    begin : rd_186_process
      if (rst == 1'b1) begin
        sel_2_23 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_23 <= sel_2_22;
        end
      end
    end

  always @(posedge clk)
    begin : rd_184_process
      if (rst == 1'b1) begin
        sel_2_24 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_24 <= sel_2_12;
        end
      end
    end

  assign sel_428 = 1'b0;

  assign sel_2_25 = (s_154 == 1'b0 ? sel_2_23 :
              sel_428);

  assign sel_429 = 1'b0;

  always @(posedge clk)
    begin : rd_187_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_51 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_51 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_430 = 8'd0;

  assign sel_431 = 8'd0;

  assign sel_432 = 8'd0;

  assign sel_433 = 8'd0;

  assign sel_434 = 8'd0;

  assign sel_435 = 8'd0;

  assign sel_436 = 8'd0;

  assign sel_437 = 8'd0;

  assign sel_438 = 8'd0;

  assign sel_439 = 8'd0;

  assign sel_440 = 8'd0;

  assign sel_441 = 8'd0;

  always @(posedge clk)
    begin : rd_205_process
      if (rst == 1'b1) begin
        s_163 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_163 <= s_18;
        end
      end
    end

  assign sel_442 = 32'sd0;

  assign sel_443 = 32'sd0;

  assign sel_444 = 32'sd0;

  assign sel_445 = 32'sd0;

  assign sel_446 = 32'sd0;

  assign sel_447 = 32'sd0;

  assign sel_448 = 32'sd0;

  assign sel_449 = 32'sd0;

  assign sel_450 = 32'sd0;

  assign sel_451 = 32'sd0;

  assign sel_452 = 32'sd0;

  assign sel_453 = 32'sd0;

  assign sel_454 = 32'sd0;

  assign sel_455 = 32'sd0;

  assign s_164 = 32'sd1;

  assign sel_1_130 = (s_14 == 1'b0 ? sel_455 :
              s_164);

  assign sel_456 = 32'sd0;

  assign sel_1_131 = (s_15 == 1'b0 ? sel_1_130 :
              sel_456);

  assign sel_457 = 32'sd0;

  assign sel_1_132 = (s_16 == 1'b0 ? sel_1_131 :
              sel_457);

  assign sel_458 = 32'sd0;

  assign sel_1_133 = (s_17 == 1'b0 ? sel_1_132 :
              sel_458);

  assign sel_459 = 32'sd0;

  assign sel_1_134 = (s_18 == 1'b0 ? sel_1_133 :
              sel_459);

  assign sel_460 = 32'sd0;

  assign sel_1_135 = (s_19 == 1'b0 ? sel_1_134 :
              sel_460);

  assign sel_461 = 32'sd0;

  assign sel_1_136 = (s_20 == 1'b0 ? sel_1_135 :
              sel_461);

  assign sel_462 = 32'sd0;

  assign sel_1_137 = (s_21 == 1'b0 ? sel_1_136 :
              sel_462);

  assign sel_463 = 32'sd0;

  assign sel_464 = 32'sd0;

  assign sel_465 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_137, sel_442, sel_443, sel_444, sel_445, sel_446,
       sel_447, sel_448, sel_449, sel_450, sel_451, sel_452, sel_453, sel_454,
       sel_463, sel_464, sel_465) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3677_sel_1 = sel_464;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3677_sel_1 = sel_463;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3677_sel_1 = sel_1_137;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3677_sel_1 = sel_454;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3677_sel_1 = sel_453;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3677_sel_1 = sel_452;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3677_sel_1 = sel_451;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3677_sel_1 = sel_450;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3677_sel_1 = sel_449;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3677_sel_1 = sel_448;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3677_sel_1 = sel_447;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3677_sel_1 = sel_446;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3677_sel_1 = sel_445;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3677_sel_1 = sel_444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3677_sel_1 = sel_443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3677_sel_1 = sel_442;
        end
      default :
        begin
          p3677_sel_1 = sel_465;
        end
    endcase
    sel_1_138 = p3677_sel_1;
  end

  assign tmp_262 = functionOutput[sel_1_138];

  assign sel_466 = 32'sd0;

  assign sel_467 = 32'sd0;

  assign sel_468 = 32'sd0;

  assign sel_469 = 32'sd0;

  assign sel_470 = 32'sd0;

  assign sel_471 = 32'sd0;

  assign sel_472 = 32'sd0;

  assign sel_473 = 32'sd0;

  assign sel_474 = 32'sd0;

  assign sel_475 = 32'sd0;

  assign sel_476 = 32'sd0;

  assign sel_477 = 32'sd0;

  assign sel_478 = 32'sd0;

  assign sel_479 = 32'sd0;

  assign s_165 = 32'sd1;

  assign sel_1_139 = (s_15 == 1'b0 ? sel_479 :
              s_165);

  assign sel_480 = 32'sd0;

  assign sel_1_140 = (s_16 == 1'b0 ? sel_1_139 :
              sel_480);

  assign sel_481 = 32'sd0;

  assign sel_1_141 = (s_17 == 1'b0 ? sel_1_140 :
              sel_481);

  assign sel_482 = 32'sd0;

  assign sel_1_142 = (s_18 == 1'b0 ? sel_1_141 :
              sel_482);

  assign sel_483 = 32'sd0;

  assign sel_1_143 = (s_19 == 1'b0 ? sel_1_142 :
              sel_483);

  assign sel_484 = 32'sd0;

  assign sel_1_144 = (s_20 == 1'b0 ? sel_1_143 :
              sel_484);

  assign sel_485 = 32'sd0;

  assign sel_1_145 = (s_21 == 1'b0 ? sel_1_144 :
              sel_485);

  assign sel_486 = 32'sd0;

  assign sel_487 = 32'sd0;

  assign sel_488 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_145, sel_466, sel_467, sel_468, sel_469, sel_470,
       sel_471, sel_472, sel_473, sel_474, sel_475, sel_476, sel_477, sel_478,
       sel_486, sel_487, sel_488) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3392_sel_1 = sel_487;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3392_sel_1 = sel_486;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3392_sel_1 = sel_1_145;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3392_sel_1 = sel_478;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3392_sel_1 = sel_477;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3392_sel_1 = sel_476;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3392_sel_1 = sel_475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3392_sel_1 = sel_474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3392_sel_1 = sel_473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3392_sel_1 = sel_472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3392_sel_1 = sel_471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3392_sel_1 = sel_470;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3392_sel_1 = sel_469;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3392_sel_1 = sel_468;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3392_sel_1 = sel_467;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3392_sel_1 = sel_466;
        end
      default :
        begin
          p3392_sel_1 = sel_488;
        end
    endcase
    sel_1_146 = p3392_sel_1;
  end

  assign tmp_263 = functionOutput_12[sel_1_146];

  assign sel_1_147 = (s_15 == 1'b0 ? tmp_262 :
              tmp_263);

  assign sel_489 = 32'sd0;

  assign sel_490 = 32'sd0;

  assign sel_491 = 32'sd0;

  assign sel_492 = 32'sd0;

  assign sel_493 = 32'sd0;

  assign sel_494 = 32'sd0;

  assign sel_495 = 32'sd0;

  assign sel_496 = 32'sd0;

  assign sel_497 = 32'sd0;

  assign sel_498 = 32'sd0;

  assign sel_499 = 32'sd0;

  assign sel_500 = 32'sd0;

  assign sel_501 = 32'sd0;

  assign sel_502 = 32'sd0;

  assign s_166 = 32'sd1;

  assign sel_1_148 = (s_16 == 1'b0 ? sel_502 :
              s_166);

  assign sel_503 = 32'sd0;

  assign sel_1_149 = (s_17 == 1'b0 ? sel_1_148 :
              sel_503);

  assign sel_504 = 32'sd0;

  assign sel_1_150 = (s_18 == 1'b0 ? sel_1_149 :
              sel_504);

  assign sel_505 = 32'sd0;

  assign sel_1_151 = (s_19 == 1'b0 ? sel_1_150 :
              sel_505);

  assign sel_506 = 32'sd0;

  assign sel_1_152 = (s_20 == 1'b0 ? sel_1_151 :
              sel_506);

  assign sel_507 = 32'sd0;

  assign sel_1_153 = (s_21 == 1'b0 ? sel_1_152 :
              sel_507);

  assign sel_508 = 32'sd0;

  assign sel_509 = 32'sd0;

  assign sel_510 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_153, sel_489, sel_490, sel_491, sel_492, sel_493,
       sel_494, sel_495, sel_496, sel_497, sel_498, sel_499, sel_500, sel_501,
       sel_508, sel_509, sel_510) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5064_sel_1 = sel_509;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5064_sel_1 = sel_508;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5064_sel_1 = sel_1_153;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5064_sel_1 = sel_501;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5064_sel_1 = sel_500;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5064_sel_1 = sel_499;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5064_sel_1 = sel_498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5064_sel_1 = sel_497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5064_sel_1 = sel_496;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5064_sel_1 = sel_495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5064_sel_1 = sel_494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5064_sel_1 = sel_493;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5064_sel_1 = sel_492;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5064_sel_1 = sel_491;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5064_sel_1 = sel_490;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5064_sel_1 = sel_489;
        end
      default :
        begin
          p5064_sel_1 = sel_510;
        end
    endcase
    sel_1_154 = p5064_sel_1;
  end

  assign tmp_264 = functionOutput_13[sel_1_154];

  assign sel_1_155 = (s_16 == 1'b0 ? sel_1_147 :
              tmp_264);

  assign sel_511 = 32'sd0;

  assign sel_512 = 32'sd0;

  assign sel_513 = 32'sd0;

  assign sel_514 = 32'sd0;

  assign sel_515 = 32'sd0;

  assign sel_516 = 32'sd0;

  assign sel_517 = 32'sd0;

  assign sel_518 = 32'sd0;

  assign sel_519 = 32'sd0;

  assign sel_520 = 32'sd0;

  assign sel_521 = 32'sd0;

  assign sel_522 = 32'sd0;

  assign sel_523 = 32'sd0;

  assign sel_524 = 32'sd0;

  assign s_167 = 32'sd1;

  assign sel_1_156 = (s_17 == 1'b0 ? sel_524 :
              s_167);

  assign sel_525 = 32'sd0;

  assign sel_1_157 = (s_18 == 1'b0 ? sel_1_156 :
              sel_525);

  assign sel_526 = 32'sd0;

  assign sel_1_158 = (s_19 == 1'b0 ? sel_1_157 :
              sel_526);

  assign sel_527 = 32'sd0;

  assign sel_1_159 = (s_20 == 1'b0 ? sel_1_158 :
              sel_527);

  assign sel_528 = 32'sd0;

  assign sel_1_160 = (s_21 == 1'b0 ? sel_1_159 :
              sel_528);

  assign sel_529 = 32'sd0;

  assign sel_530 = 32'sd0;

  assign sel_531 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_160, sel_511, sel_512, sel_513, sel_514, sel_515,
       sel_516, sel_517, sel_518, sel_519, sel_520, sel_521, sel_522, sel_523,
       sel_529, sel_530, sel_531) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4855_sel_1 = sel_530;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4855_sel_1 = sel_529;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4855_sel_1 = sel_1_160;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4855_sel_1 = sel_523;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4855_sel_1 = sel_522;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4855_sel_1 = sel_521;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4855_sel_1 = sel_520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4855_sel_1 = sel_519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4855_sel_1 = sel_518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4855_sel_1 = sel_517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4855_sel_1 = sel_516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4855_sel_1 = sel_515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4855_sel_1 = sel_514;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4855_sel_1 = sel_513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4855_sel_1 = sel_512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4855_sel_1 = sel_511;
        end
      default :
        begin
          p4855_sel_1 = sel_531;
        end
    endcase
    sel_1_161 = p4855_sel_1;
  end

  assign tmp_265 = functionOutput_14[sel_1_161];

  assign sel_1_162 = (s_17 == 1'b0 ? sel_1_155 :
              tmp_265);

  always @(posedge clk)
    begin : rd_206_process
      if (rst == 1'b1) begin
        sel_1_163 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_163 <= sel_1_162;
        end
      end
    end

  assign sel_532 = 32'sd0;

  assign sel_533 = 32'sd0;

  assign sel_534 = 32'sd0;

  assign sel_535 = 32'sd0;

  assign sel_536 = 32'sd0;

  assign sel_537 = 32'sd0;

  assign sel_538 = 32'sd0;

  assign sel_539 = 32'sd0;

  assign sel_540 = 32'sd0;

  assign sel_541 = 32'sd0;

  assign sel_542 = 32'sd0;

  assign sel_543 = 32'sd0;

  assign sel_544 = 32'sd0;

  assign sel_545 = 32'sd0;

  assign s_168 = 32'sd1;

  assign sel_1_164 = (s_18 == 1'b0 ? sel_545 :
              s_168);

  assign sel_546 = 32'sd0;

  assign sel_1_165 = (s_19 == 1'b0 ? sel_1_164 :
              sel_546);

  assign sel_547 = 32'sd0;

  assign sel_1_166 = (s_20 == 1'b0 ? sel_1_165 :
              sel_547);

  assign sel_548 = 32'sd0;

  assign sel_1_167 = (s_21 == 1'b0 ? sel_1_166 :
              sel_548);

  assign sel_549 = 32'sd0;

  assign sel_550 = 32'sd0;

  assign sel_551 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_167, sel_532, sel_533, sel_534, sel_535, sel_536,
       sel_537, sel_538, sel_539, sel_540, sel_541, sel_542, sel_543, sel_544,
       sel_549, sel_550, sel_551) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4190_sel_1 = sel_550;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4190_sel_1 = sel_549;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4190_sel_1 = sel_1_167;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4190_sel_1 = sel_544;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4190_sel_1 = sel_543;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4190_sel_1 = sel_542;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4190_sel_1 = sel_541;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4190_sel_1 = sel_540;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4190_sel_1 = sel_539;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4190_sel_1 = sel_538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4190_sel_1 = sel_537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4190_sel_1 = sel_536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4190_sel_1 = sel_535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4190_sel_1 = sel_534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4190_sel_1 = sel_533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4190_sel_1 = sel_532;
        end
      default :
        begin
          p4190_sel_1 = sel_551;
        end
    endcase
    sel_1_168 = p4190_sel_1;
  end

  assign tmp_266 = functionOutput_15[sel_1_168];

  always @(posedge clk)
    begin : rd_204_process
      if (rst == 1'b1) begin
        s_169 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_169 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_191_process
      if (rst == 1'b1) begin
        tmp_267 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_267 <= tmp_266;
        end
      end
    end

  assign sel_1_169 = (s_163 == 1'b0 ? sel_1_163 :
              tmp_267);

  assign sel_552 = 32'sd0;

  assign sel_553 = 32'sd0;

  assign sel_554 = 32'sd0;

  assign sel_555 = 32'sd0;

  assign sel_556 = 32'sd0;

  assign sel_557 = 32'sd0;

  assign sel_558 = 32'sd0;

  assign sel_559 = 32'sd0;

  assign sel_560 = 32'sd0;

  assign sel_561 = 32'sd0;

  assign sel_562 = 32'sd0;

  assign sel_563 = 32'sd0;

  assign sel_564 = 32'sd0;

  assign sel_565 = 32'sd0;

  assign s_170 = 32'sd1;

  assign sel_1_170 = (s_19 == 1'b0 ? sel_565 :
              s_170);

  assign sel_566 = 32'sd0;

  assign sel_1_171 = (s_20 == 1'b0 ? sel_1_170 :
              sel_566);

  assign sel_567 = 32'sd0;

  assign sel_1_172 = (s_21 == 1'b0 ? sel_1_171 :
              sel_567);

  assign sel_568 = 32'sd0;

  assign sel_569 = 32'sd0;

  assign sel_570 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_172, sel_552, sel_553, sel_554, sel_555, sel_556,
       sel_557, sel_558, sel_559, sel_560, sel_561, sel_562, sel_563, sel_564,
       sel_568, sel_569, sel_570) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4684_sel_1 = sel_569;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4684_sel_1 = sel_568;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4684_sel_1 = sel_1_172;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4684_sel_1 = sel_564;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4684_sel_1 = sel_563;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4684_sel_1 = sel_562;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4684_sel_1 = sel_561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4684_sel_1 = sel_560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4684_sel_1 = sel_559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4684_sel_1 = sel_558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4684_sel_1 = sel_557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4684_sel_1 = sel_556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4684_sel_1 = sel_555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4684_sel_1 = sel_554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4684_sel_1 = sel_553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4684_sel_1 = sel_552;
        end
      default :
        begin
          p4684_sel_1 = sel_570;
        end
    endcase
    sel_1_173 = p4684_sel_1;
  end

  assign tmp_268 = functionOutput_16[sel_1_173];

  always @(posedge clk)
    begin : rd_203_process
      if (rst == 1'b1) begin
        s_171 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_171 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_190_process
      if (rst == 1'b1) begin
        tmp_269 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_269 <= tmp_268;
        end
      end
    end

  assign sel_1_174 = (s_169 == 1'b0 ? sel_1_169 :
              tmp_269);

  assign sel_571 = 32'sd0;

  assign sel_572 = 32'sd0;

  assign sel_573 = 32'sd0;

  assign sel_574 = 32'sd0;

  assign sel_575 = 32'sd0;

  assign sel_576 = 32'sd0;

  assign sel_577 = 32'sd0;

  assign sel_578 = 32'sd0;

  assign sel_579 = 32'sd0;

  assign sel_580 = 32'sd0;

  assign sel_581 = 32'sd0;

  assign sel_582 = 32'sd0;

  assign sel_583 = 32'sd0;

  assign sel_584 = 32'sd0;

  assign s_172 = 32'sd1;

  assign sel_1_175 = (s_20 == 1'b0 ? sel_584 :
              s_172);

  assign sel_585 = 32'sd0;

  assign sel_1_176 = (s_21 == 1'b0 ? sel_1_175 :
              sel_585);

  assign sel_586 = 32'sd0;

  assign sel_587 = 32'sd0;

  assign sel_588 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_176, sel_571, sel_572, sel_573, sel_574, sel_575,
       sel_576, sel_577, sel_578, sel_579, sel_580, sel_581, sel_582, sel_583,
       sel_586, sel_587, sel_588) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3525_sel_1 = sel_587;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3525_sel_1 = sel_586;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3525_sel_1 = sel_1_176;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3525_sel_1 = sel_583;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3525_sel_1 = sel_582;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3525_sel_1 = sel_581;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3525_sel_1 = sel_580;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3525_sel_1 = sel_579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3525_sel_1 = sel_578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3525_sel_1 = sel_577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3525_sel_1 = sel_576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3525_sel_1 = sel_575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3525_sel_1 = sel_574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3525_sel_1 = sel_573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3525_sel_1 = sel_572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3525_sel_1 = sel_571;
        end
      default :
        begin
          p3525_sel_1 = sel_588;
        end
    endcase
    sel_1_177 = p3525_sel_1;
  end

  assign tmp_270 = functionOutput_17[sel_1_177];

  always @(posedge clk)
    begin : rd_202_process
      if (rst == 1'b1) begin
        s_173 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_173 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_189_process
      if (rst == 1'b1) begin
        tmp_271 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_271 <= tmp_270;
        end
      end
    end

  assign sel_1_178 = (s_171 == 1'b0 ? sel_1_174 :
              tmp_271);

  assign sel_589 = 32'sd0;

  assign sel_590 = 32'sd0;

  assign sel_591 = 32'sd0;

  assign sel_592 = 32'sd0;

  assign sel_593 = 32'sd0;

  assign sel_594 = 32'sd0;

  assign sel_595 = 32'sd0;

  assign sel_596 = 32'sd0;

  assign sel_597 = 32'sd0;

  assign sel_598 = 32'sd0;

  assign sel_599 = 32'sd0;

  assign sel_600 = 32'sd0;

  assign sel_601 = 32'sd0;

  assign sel_602 = 32'sd0;

  assign s_174 = 32'sd1;

  assign sel_1_179 = (s_21 == 1'b0 ? sel_602 :
              s_174);

  assign sel_603 = 32'sd0;

  assign sel_604 = 32'sd0;

  assign sel_605 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_179, sel_589, sel_590, sel_591, sel_592, sel_593,
       sel_594, sel_595, sel_596, sel_597, sel_598, sel_599, sel_600, sel_601,
       sel_603, sel_604, sel_605) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4741_sel_1 = sel_604;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4741_sel_1 = sel_603;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4741_sel_1 = sel_1_179;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4741_sel_1 = sel_601;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4741_sel_1 = sel_600;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4741_sel_1 = sel_599;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4741_sel_1 = sel_598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4741_sel_1 = sel_597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4741_sel_1 = sel_596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4741_sel_1 = sel_595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4741_sel_1 = sel_594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4741_sel_1 = sel_593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4741_sel_1 = sel_592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4741_sel_1 = sel_591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4741_sel_1 = sel_590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4741_sel_1 = sel_589;
        end
      default :
        begin
          p4741_sel_1 = sel_605;
        end
    endcase
    sel_1_180 = p4741_sel_1;
  end

  assign tmp_272 = functionOutput_18[sel_1_180];

  always @(posedge clk)
    begin : rd_199_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_52 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_52 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_606 = 32'sd0;

  assign sel_607 = 32'sd0;

  assign sel_608 = 32'sd0;

  assign sel_609 = 32'sd0;

  assign sel_610 = 32'sd0;

  assign sel_611 = 32'sd0;

  assign sel_612 = 32'sd0;

  assign sel_613 = 32'sd0;

  assign sel_614 = 32'sd0;

  assign sel_615 = 32'sd0;

  assign sel_616 = 32'sd0;

  assign sel_617 = 32'sd0;

  assign sel_618 = 32'sd0;

  always @(posedge clk)
    begin : rd_200_process
      if (rst == 1'b1) begin
        s_175 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_175 <= s_12;
        end
      end
    end

  assign sel_619 = 32'sd0;

  assign sel_620 = 32'sd0;

  assign sel_621 = 32'sd0;

  assign s_176 = 32'sd1;

  assign sel_1_181 = (tmp_4 == 1'b0 ? sel_621 :
              s_176);

  assign sel_622 = 32'sd0;

  assign sel_1_182 = (tmp_6 == 1'b0 ? sel_1_181 :
              sel_622);

  assign sel_623 = 32'sd0;

  assign sel_1_183 = (tmp_8 == 1'b0 ? sel_1_182 :
              sel_623);

  assign sel_624 = 32'sd0;

  assign sel_1_184 = (tmp_10 == 1'b0 ? sel_1_183 :
              sel_624);

  assign sel_625 = 32'sd0;

  assign sel_1_185 = (tmp_12 == 1'b0 ? sel_1_184 :
              sel_625);

  assign sel_626 = 32'sd0;

  assign sel_1_186 = (tmp_14 == 1'b0 ? sel_1_185 :
              sel_626);

  assign sel_627 = 32'sd0;

  assign sel_1_187 = (tmp_16 == 1'b0 ? sel_1_186 :
              sel_627);

  assign sel_628 = 32'sd0;

  assign sel_1_188 = (tmp_18 == 1'b0 ? sel_1_187 :
              sel_628);

  assign sel_1_189 = (s_10 == 1'b0 ? sel_620 :
              sel_1_188);

  assign sel_1_190 = (s_11 == 1'b0 ? sel_619 :
              sel_1_189);

  always @(posedge clk)
    begin : rd_201_process
      if (rst == 1'b1) begin
        sel_1_191 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_191 <= sel_1_190;
        end
      end
    end

  assign sel_629 = 32'sd0;

  assign sel_630 = 32'sd0;

  assign sel_1_192 = (s_175 == 1'b0 ? sel_1_191 :
              sel_630);

  assign sel_631 = 32'sd0;

  always @(posedge clk)
    begin : rd_213_process
      if (rst == 1'b1) begin
        tmp_273 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_273 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_214_process
      if (rst == 1'b1) begin
        for(rd_214_t_1 = 32'sd0; rd_214_t_1 <= 32'sd11; rd_214_t_1 = rd_214_t_1 + 32'sd1) begin
          rd_214_reg[rd_214_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_214_t_0_1 = 32'sd0; rd_214_t_0_1 <= 32'sd11; rd_214_t_0_1 = rd_214_t_0_1 + 32'sd1) begin
            rd_214_reg[rd_214_t_0_1] <= rd_214_reg_next[rd_214_t_0_1];
          end
        end
      end
    end
  genvar t_0_014;
  generate
    for(t_0_014 = 32'sd0; t_0_014 <= 32'sd11; t_0_014 = t_0_014 + 32'sd1) begin:rd_214_reg_next_gen
      assign functionOutput_28[t_0_014] = rd_214_reg[t_0_014];
      assign rd_214_reg_next[t_0_014] = functionOutput_19[t_0_014];
    end
  endgenerate

  assign sel_632 = 32'sd0;

  always @(is_SPI_MNGR_52, sel_1_192, sel_606, sel_607, sel_608, sel_609, sel_610,
       sel_611, sel_612, sel_613, sel_614, sel_615, sel_616, sel_617, sel_618,
       sel_629, sel_631, sel_632) begin
    case ( is_SPI_MNGR_52)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2803_sel_1 = sel_631;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2803_sel_1 = sel_1_192;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2803_sel_1 = sel_629;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2803_sel_1 = sel_618;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2803_sel_1 = sel_617;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2803_sel_1 = sel_616;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2803_sel_1 = sel_615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2803_sel_1 = sel_614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2803_sel_1 = sel_613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2803_sel_1 = sel_612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2803_sel_1 = sel_611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2803_sel_1 = sel_610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2803_sel_1 = sel_609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2803_sel_1 = sel_608;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2803_sel_1 = sel_607;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2803_sel_1 = sel_606;
        end
      default :
        begin
          p2803_sel_1 = sel_632;
        end
    endcase
    sel_1_193 = p2803_sel_1;
  end

  assign tmp_274 = functionOutput_28[sel_1_193];

  assign sel_633 = 32'sd0;

  assign sel_634 = 32'sd0;

  assign sel_635 = 32'sd0;

  assign sel_636 = 32'sd0;

  assign sel_637 = 32'sd0;

  assign sel_638 = 32'sd0;

  assign sel_639 = 32'sd0;

  assign sel_640 = 32'sd0;

  assign sel_641 = 32'sd0;

  assign sel_642 = 32'sd0;

  assign sel_643 = 32'sd0;

  assign sel_644 = 32'sd0;

  assign sel_645 = 32'sd0;

  assign sel_646 = 32'sd0;

  assign sel_647 = 32'sd0;

  assign sel_648 = 32'sd0;

  assign sel_649 = 32'sd0;

  assign s_177 = 32'sd1;

  assign sel_1_194 = (tmp_6 == 1'b0 ? sel_649 :
              s_177);

  assign sel_650 = 32'sd0;

  assign sel_1_195 = (tmp_8 == 1'b0 ? sel_1_194 :
              sel_650);

  assign sel_651 = 32'sd0;

  assign sel_1_196 = (tmp_10 == 1'b0 ? sel_1_195 :
              sel_651);

  assign sel_652 = 32'sd0;

  assign sel_1_197 = (tmp_12 == 1'b0 ? sel_1_196 :
              sel_652);

  assign sel_653 = 32'sd0;

  assign sel_1_198 = (tmp_14 == 1'b0 ? sel_1_197 :
              sel_653);

  assign sel_654 = 32'sd0;

  assign sel_1_199 = (tmp_16 == 1'b0 ? sel_1_198 :
              sel_654);

  assign sel_655 = 32'sd0;

  assign sel_1_200 = (tmp_18 == 1'b0 ? sel_1_199 :
              sel_655);

  assign sel_1_201 = (s_10 == 1'b0 ? sel_648 :
              sel_1_200);

  assign sel_1_202 = (s_11 == 1'b0 ? sel_647 :
              sel_1_201);

  assign sel_656 = 32'sd0;

  assign sel_1_203 = (s_12 == 1'b0 ? sel_1_202 :
              sel_656);

  assign sel_657 = 32'sd0;

  assign sel_658 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_203, sel_633, sel_634, sel_635, sel_636, sel_637,
       sel_638, sel_639, sel_640, sel_641, sel_642, sel_643, sel_644, sel_645,
       sel_646, sel_657, sel_658) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2176_sel_1 = sel_657;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2176_sel_1 = sel_1_203;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2176_sel_1 = sel_646;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2176_sel_1 = sel_645;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2176_sel_1 = sel_644;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2176_sel_1 = sel_643;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2176_sel_1 = sel_642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2176_sel_1 = sel_641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2176_sel_1 = sel_640;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2176_sel_1 = sel_639;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2176_sel_1 = sel_638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2176_sel_1 = sel_637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2176_sel_1 = sel_636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2176_sel_1 = sel_635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2176_sel_1 = sel_634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2176_sel_1 = sel_633;
        end
      default :
        begin
          p2176_sel_1 = sel_658;
        end
    endcase
    sel_1_204 = p2176_sel_1;
  end

  assign tmp_275 = functionOutput_21[sel_1_204];

  always @(posedge clk)
    begin : rd_212_process
      if (rst == 1'b1) begin
        tmp_276 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_276 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_198_process
      if (rst == 1'b1) begin
        tmp_277 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_277 <= tmp_275;
        end
      end
    end

  assign sel_1_205 = (tmp_273 == 1'b0 ? tmp_274 :
              tmp_277);

  assign sel_659 = 32'sd0;

  assign sel_660 = 32'sd0;

  assign sel_661 = 32'sd0;

  assign sel_662 = 32'sd0;

  assign sel_663 = 32'sd0;

  assign sel_664 = 32'sd0;

  assign sel_665 = 32'sd0;

  assign sel_666 = 32'sd0;

  assign sel_667 = 32'sd0;

  assign sel_668 = 32'sd0;

  assign sel_669 = 32'sd0;

  assign sel_670 = 32'sd0;

  assign sel_671 = 32'sd0;

  assign sel_672 = 32'sd0;

  assign sel_673 = 32'sd0;

  assign sel_674 = 32'sd0;

  assign sel_675 = 32'sd0;

  assign s_178 = 32'sd1;

  assign sel_1_206 = (tmp_8 == 1'b0 ? sel_675 :
              s_178);

  assign sel_676 = 32'sd0;

  assign sel_1_207 = (tmp_10 == 1'b0 ? sel_1_206 :
              sel_676);

  assign sel_677 = 32'sd0;

  assign sel_1_208 = (tmp_12 == 1'b0 ? sel_1_207 :
              sel_677);

  assign sel_678 = 32'sd0;

  assign sel_1_209 = (tmp_14 == 1'b0 ? sel_1_208 :
              sel_678);

  assign sel_679 = 32'sd0;

  assign sel_1_210 = (tmp_16 == 1'b0 ? sel_1_209 :
              sel_679);

  assign sel_680 = 32'sd0;

  assign sel_1_211 = (tmp_18 == 1'b0 ? sel_1_210 :
              sel_680);

  assign sel_1_212 = (s_10 == 1'b0 ? sel_674 :
              sel_1_211);

  assign sel_1_213 = (s_11 == 1'b0 ? sel_673 :
              sel_1_212);

  assign sel_681 = 32'sd0;

  assign sel_1_214 = (s_12 == 1'b0 ? sel_1_213 :
              sel_681);

  assign sel_682 = 32'sd0;

  assign sel_683 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_214, sel_659, sel_660, sel_661, sel_662, sel_663,
       sel_664, sel_665, sel_666, sel_667, sel_668, sel_669, sel_670, sel_671,
       sel_672, sel_682, sel_683) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1625_sel_1 = sel_682;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1625_sel_1 = sel_1_214;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1625_sel_1 = sel_672;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1625_sel_1 = sel_671;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1625_sel_1 = sel_670;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1625_sel_1 = sel_669;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1625_sel_1 = sel_668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1625_sel_1 = sel_667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1625_sel_1 = sel_666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1625_sel_1 = sel_665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1625_sel_1 = sel_664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1625_sel_1 = sel_663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1625_sel_1 = sel_662;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1625_sel_1 = sel_661;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1625_sel_1 = sel_660;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1625_sel_1 = sel_659;
        end
      default :
        begin
          p1625_sel_1 = sel_683;
        end
    endcase
    sel_1_215 = p1625_sel_1;
  end

  assign tmp_278 = functionOutput_22[sel_1_215];

  always @(posedge clk)
    begin : rd_211_process
      if (rst == 1'b1) begin
        tmp_279 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_279 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_197_process
      if (rst == 1'b1) begin
        tmp_280 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_280 <= tmp_278;
        end
      end
    end

  assign sel_1_216 = (tmp_276 == 1'b0 ? sel_1_205 :
              tmp_280);

  assign sel_684 = 32'sd0;

  assign sel_685 = 32'sd0;

  assign sel_686 = 32'sd0;

  assign sel_687 = 32'sd0;

  assign sel_688 = 32'sd0;

  assign sel_689 = 32'sd0;

  assign sel_690 = 32'sd0;

  assign sel_691 = 32'sd0;

  assign sel_692 = 32'sd0;

  assign sel_693 = 32'sd0;

  assign sel_694 = 32'sd0;

  assign sel_695 = 32'sd0;

  assign sel_696 = 32'sd0;

  assign sel_697 = 32'sd0;

  assign sel_698 = 32'sd0;

  assign sel_699 = 32'sd0;

  assign sel_700 = 32'sd0;

  assign s_179 = 32'sd1;

  assign sel_1_217 = (tmp_10 == 1'b0 ? sel_700 :
              s_179);

  assign sel_701 = 32'sd0;

  assign sel_1_218 = (tmp_12 == 1'b0 ? sel_1_217 :
              sel_701);

  assign sel_702 = 32'sd0;

  assign sel_1_219 = (tmp_14 == 1'b0 ? sel_1_218 :
              sel_702);

  assign sel_703 = 32'sd0;

  assign sel_1_220 = (tmp_16 == 1'b0 ? sel_1_219 :
              sel_703);

  assign sel_704 = 32'sd0;

  assign sel_1_221 = (tmp_18 == 1'b0 ? sel_1_220 :
              sel_704);

  assign sel_1_222 = (s_10 == 1'b0 ? sel_699 :
              sel_1_221);

  assign sel_1_223 = (s_11 == 1'b0 ? sel_698 :
              sel_1_222);

  assign sel_705 = 32'sd0;

  assign sel_1_224 = (s_12 == 1'b0 ? sel_1_223 :
              sel_705);

  assign sel_706 = 32'sd0;

  assign sel_707 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_224, sel_684, sel_685, sel_686, sel_687, sel_688,
       sel_689, sel_690, sel_691, sel_692, sel_693, sel_694, sel_695, sel_696,
       sel_697, sel_706, sel_707) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3031_sel_1 = sel_706;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3031_sel_1 = sel_1_224;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3031_sel_1 = sel_697;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3031_sel_1 = sel_696;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3031_sel_1 = sel_695;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3031_sel_1 = sel_694;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3031_sel_1 = sel_693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3031_sel_1 = sel_692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3031_sel_1 = sel_691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3031_sel_1 = sel_690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3031_sel_1 = sel_689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3031_sel_1 = sel_688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3031_sel_1 = sel_687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3031_sel_1 = sel_686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3031_sel_1 = sel_685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3031_sel_1 = sel_684;
        end
      default :
        begin
          p3031_sel_1 = sel_707;
        end
    endcase
    sel_1_225 = p3031_sel_1;
  end

  assign tmp_281 = functionOutput_23[sel_1_225];

  always @(posedge clk)
    begin : rd_210_process
      if (rst == 1'b1) begin
        tmp_282 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_282 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_196_process
      if (rst == 1'b1) begin
        tmp_283 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_283 <= tmp_281;
        end
      end
    end

  assign sel_1_226 = (tmp_279 == 1'b0 ? sel_1_216 :
              tmp_283);

  assign sel_708 = 32'sd0;

  assign sel_709 = 32'sd0;

  assign sel_710 = 32'sd0;

  assign sel_711 = 32'sd0;

  assign sel_712 = 32'sd0;

  assign sel_713 = 32'sd0;

  assign sel_714 = 32'sd0;

  assign sel_715 = 32'sd0;

  assign sel_716 = 32'sd0;

  assign sel_717 = 32'sd0;

  assign sel_718 = 32'sd0;

  assign sel_719 = 32'sd0;

  assign sel_720 = 32'sd0;

  assign sel_721 = 32'sd0;

  assign sel_722 = 32'sd0;

  assign sel_723 = 32'sd0;

  assign sel_724 = 32'sd0;

  assign s_180 = 32'sd1;

  assign sel_1_227 = (tmp_12 == 1'b0 ? sel_724 :
              s_180);

  assign sel_725 = 32'sd0;

  assign sel_1_228 = (tmp_14 == 1'b0 ? sel_1_227 :
              sel_725);

  assign sel_726 = 32'sd0;

  assign sel_1_229 = (tmp_16 == 1'b0 ? sel_1_228 :
              sel_726);

  assign sel_727 = 32'sd0;

  assign sel_1_230 = (tmp_18 == 1'b0 ? sel_1_229 :
              sel_727);

  assign sel_1_231 = (s_10 == 1'b0 ? sel_723 :
              sel_1_230);

  assign sel_1_232 = (s_11 == 1'b0 ? sel_722 :
              sel_1_231);

  assign sel_728 = 32'sd0;

  assign sel_1_233 = (s_12 == 1'b0 ? sel_1_232 :
              sel_728);

  assign sel_729 = 32'sd0;

  assign sel_730 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_233, sel_708, sel_709, sel_710, sel_711, sel_712,
       sel_713, sel_714, sel_715, sel_716, sel_717, sel_718, sel_719, sel_720,
       sel_721, sel_729, sel_730) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2138_sel_1 = sel_729;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2138_sel_1 = sel_1_233;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2138_sel_1 = sel_721;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2138_sel_1 = sel_720;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2138_sel_1 = sel_719;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2138_sel_1 = sel_718;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2138_sel_1 = sel_717;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2138_sel_1 = sel_716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2138_sel_1 = sel_715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2138_sel_1 = sel_714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2138_sel_1 = sel_713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2138_sel_1 = sel_712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2138_sel_1 = sel_711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2138_sel_1 = sel_710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2138_sel_1 = sel_709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2138_sel_1 = sel_708;
        end
      default :
        begin
          p2138_sel_1 = sel_730;
        end
    endcase
    sel_1_234 = p2138_sel_1;
  end

  assign tmp_284 = functionOutput_24[sel_1_234];

  always @(posedge clk)
    begin : rd_209_process
      if (rst == 1'b1) begin
        tmp_285 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_285 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_195_process
      if (rst == 1'b1) begin
        tmp_286 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_286 <= tmp_284;
        end
      end
    end

  assign sel_1_235 = (tmp_282 == 1'b0 ? sel_1_226 :
              tmp_286);

  assign sel_731 = 32'sd0;

  assign sel_732 = 32'sd0;

  assign sel_733 = 32'sd0;

  assign sel_734 = 32'sd0;

  assign sel_735 = 32'sd0;

  assign sel_736 = 32'sd0;

  assign sel_737 = 32'sd0;

  assign sel_738 = 32'sd0;

  assign sel_739 = 32'sd0;

  assign sel_740 = 32'sd0;

  assign sel_741 = 32'sd0;

  assign sel_742 = 32'sd0;

  assign sel_743 = 32'sd0;

  assign sel_744 = 32'sd0;

  assign sel_745 = 32'sd0;

  assign sel_746 = 32'sd0;

  assign sel_747 = 32'sd0;

  assign s_181 = 32'sd1;

  assign sel_1_236 = (tmp_14 == 1'b0 ? sel_747 :
              s_181);

  assign sel_748 = 32'sd0;

  assign sel_1_237 = (tmp_16 == 1'b0 ? sel_1_236 :
              sel_748);

  assign sel_749 = 32'sd0;

  assign sel_1_238 = (tmp_18 == 1'b0 ? sel_1_237 :
              sel_749);

  assign sel_1_239 = (s_10 == 1'b0 ? sel_746 :
              sel_1_238);

  assign sel_1_240 = (s_11 == 1'b0 ? sel_745 :
              sel_1_239);

  assign sel_750 = 32'sd0;

  assign sel_1_241 = (s_12 == 1'b0 ? sel_1_240 :
              sel_750);

  assign sel_751 = 32'sd0;

  assign sel_752 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_241, sel_731, sel_732, sel_733, sel_734, sel_735,
       sel_736, sel_737, sel_738, sel_739, sel_740, sel_741, sel_742, sel_743,
       sel_744, sel_751, sel_752) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1758_sel_1 = sel_751;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1758_sel_1 = sel_1_241;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1758_sel_1 = sel_744;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1758_sel_1 = sel_743;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1758_sel_1 = sel_742;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1758_sel_1 = sel_741;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1758_sel_1 = sel_740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1758_sel_1 = sel_739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1758_sel_1 = sel_738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1758_sel_1 = sel_737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1758_sel_1 = sel_736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1758_sel_1 = sel_735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1758_sel_1 = sel_734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1758_sel_1 = sel_733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1758_sel_1 = sel_732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1758_sel_1 = sel_731;
        end
      default :
        begin
          p1758_sel_1 = sel_752;
        end
    endcase
    sel_1_242 = p1758_sel_1;
  end

  assign tmp_287 = functionOutput_25[sel_1_242];

  always @(posedge clk)
    begin : rd_208_process
      if (rst == 1'b1) begin
        tmp_288 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_288 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_194_process
      if (rst == 1'b1) begin
        tmp_289 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_289 <= tmp_287;
        end
      end
    end

  assign sel_1_243 = (tmp_285 == 1'b0 ? sel_1_235 :
              tmp_289);

  assign sel_753 = 32'sd0;

  assign sel_754 = 32'sd0;

  assign sel_755 = 32'sd0;

  assign sel_756 = 32'sd0;

  assign sel_757 = 32'sd0;

  assign sel_758 = 32'sd0;

  assign sel_759 = 32'sd0;

  assign sel_760 = 32'sd0;

  assign sel_761 = 32'sd0;

  assign sel_762 = 32'sd0;

  assign sel_763 = 32'sd0;

  assign sel_764 = 32'sd0;

  assign sel_765 = 32'sd0;

  assign sel_766 = 32'sd0;

  assign sel_767 = 32'sd0;

  assign sel_768 = 32'sd0;

  assign sel_769 = 32'sd0;

  assign s_182 = 32'sd1;

  assign sel_1_244 = (tmp_16 == 1'b0 ? sel_769 :
              s_182);

  assign sel_770 = 32'sd0;

  assign sel_1_245 = (tmp_18 == 1'b0 ? sel_1_244 :
              sel_770);

  assign sel_1_246 = (s_10 == 1'b0 ? sel_768 :
              sel_1_245);

  assign sel_1_247 = (s_11 == 1'b0 ? sel_767 :
              sel_1_246);

  assign sel_771 = 32'sd0;

  assign sel_1_248 = (s_12 == 1'b0 ? sel_1_247 :
              sel_771);

  assign sel_772 = 32'sd0;

  assign sel_773 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_248, sel_753, sel_754, sel_755, sel_756, sel_757,
       sel_758, sel_759, sel_760, sel_761, sel_762, sel_763, sel_764, sel_765,
       sel_766, sel_772, sel_773) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2936_sel_1 = sel_772;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2936_sel_1 = sel_1_248;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2936_sel_1 = sel_766;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2936_sel_1 = sel_765;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2936_sel_1 = sel_764;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2936_sel_1 = sel_763;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2936_sel_1 = sel_762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2936_sel_1 = sel_761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2936_sel_1 = sel_760;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2936_sel_1 = sel_759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2936_sel_1 = sel_758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2936_sel_1 = sel_757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2936_sel_1 = sel_756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2936_sel_1 = sel_755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2936_sel_1 = sel_754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2936_sel_1 = sel_753;
        end
      default :
        begin
          p2936_sel_1 = sel_773;
        end
    endcase
    sel_1_249 = p2936_sel_1;
  end

  assign tmp_290 = functionOutput_26[sel_1_249];

  always @(posedge clk)
    begin : rd_207_process
      if (rst == 1'b1) begin
        tmp_291 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_291 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_193_process
      if (rst == 1'b1) begin
        tmp_292 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_292 <= tmp_290;
        end
      end
    end

  assign sel_1_250 = (tmp_288 == 1'b0 ? sel_1_243 :
              tmp_292);

  assign sel_774 = 32'sd0;

  assign sel_775 = 32'sd0;

  assign sel_776 = 32'sd0;

  assign sel_777 = 32'sd0;

  assign sel_778 = 32'sd0;

  assign sel_779 = 32'sd0;

  assign sel_780 = 32'sd0;

  assign sel_781 = 32'sd0;

  assign sel_782 = 32'sd0;

  assign sel_783 = 32'sd0;

  assign sel_784 = 32'sd0;

  assign sel_785 = 32'sd0;

  assign sel_786 = 32'sd0;

  assign sel_787 = 32'sd0;

  assign sel_788 = 32'sd0;

  assign sel_789 = 32'sd0;

  assign sel_790 = 32'sd0;

  assign s_183 = 32'sd1;

  assign sel_1_251 = (tmp_18 == 1'b0 ? sel_790 :
              s_183);

  assign sel_1_252 = (s_10 == 1'b0 ? sel_789 :
              sel_1_251);

  assign sel_1_253 = (s_11 == 1'b0 ? sel_788 :
              sel_1_252);

  assign sel_791 = 32'sd0;

  assign sel_1_254 = (s_12 == 1'b0 ? sel_1_253 :
              sel_791);

  assign sel_792 = 32'sd0;

  assign sel_793 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_254, sel_774, sel_775, sel_776, sel_777, sel_778,
       sel_779, sel_780, sel_781, sel_782, sel_783, sel_784, sel_785, sel_786,
       sel_787, sel_792, sel_793) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2822_sel_1 = sel_792;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2822_sel_1 = sel_1_254;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2822_sel_1 = sel_787;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2822_sel_1 = sel_786;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2822_sel_1 = sel_785;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2822_sel_1 = sel_784;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2822_sel_1 = sel_783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2822_sel_1 = sel_782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2822_sel_1 = sel_781;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2822_sel_1 = sel_780;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2822_sel_1 = sel_779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2822_sel_1 = sel_778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2822_sel_1 = sel_777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2822_sel_1 = sel_776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2822_sel_1 = sel_775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2822_sel_1 = sel_774;
        end
      default :
        begin
          p2822_sel_1 = sel_793;
        end
    endcase
    sel_1_255 = p2822_sel_1;
  end

  assign tmp_293 = functionOutput_27[sel_1_255];

  assign sel_794 = 8'd0;

  always @(posedge clk)
    begin : rd_188_process
      if (rst == 1'b1) begin
        tmp_294 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_294 <= tmp_272;
        end
      end
    end

  assign sel_1_256 = (s_173 == 1'b0 ? sel_1_178 :
              tmp_294);

  always @(posedge clk)
    begin : rd_192_process
      if (rst == 1'b1) begin
        tmp_295 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_295 <= tmp_293;
        end
      end
    end

  assign sel_1_257 = (tmp_291 == 1'b0 ? sel_1_250 :
              tmp_295);

  assign sel_795 = 8'd0;

  always @(posedge clk)
    begin : rd_215_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_53 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_53 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_796 = 1'b0;

  assign sel_797 = 1'b0;

  assign sel_798 = 1'b0;

  assign sel_799 = 1'b0;

  assign sel_800 = 1'b0;

  assign sel_801 = 1'b0;

  assign sel_802 = 1'b0;

  assign sel_803 = 1'b0;

  assign sel_804 = 1'b0;

  assign sel_805 = 1'b0;

  assign sel_806 = 1'b0;

  assign sel_807 = 1'b0;

  assign sel_808 = 1'b0;

  assign sel_809 = 1'b0;

  assign s_184 = 1'b1;

  assign sel_2_26 = (s_14 == 1'b0 ? sel_809 :
              s_184);

  assign s_185 = 1'b1;

  assign sel_2_27 = (s_15 == 1'b0 ? sel_2_26 :
              s_185);

  assign s_186 = 1'b1;

  assign sel_2_28 = (s_16 == 1'b0 ? sel_2_27 :
              s_186);

  assign s_187 = 1'b1;

  assign sel_2_29 = (s_17 == 1'b0 ? sel_2_28 :
              s_187);

  assign s_188 = 1'b1;

  assign sel_2_30 = (s_18 == 1'b0 ? sel_2_29 :
              s_188);

  assign s_189 = 1'b1;

  assign sel_2_31 = (s_19 == 1'b0 ? sel_2_30 :
              s_189);

  assign s_190 = 1'b1;

  assign sel_2_32 = (s_20 == 1'b0 ? sel_2_31 :
              s_190);

  assign s_191 = 1'b1;

  assign sel_2_33 = (s_21 == 1'b0 ? sel_2_32 :
              s_191);

  always @(posedge clk)
    begin : rd_217_process
      if (rst == 1'b1) begin
        s_192 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_192 <= s_12;
        end
      end
    end

  assign sel_810 = 1'b0;

  assign sel_811 = 1'b0;

  assign sel_812 = 1'b0;

  assign s_193 = 1'b1;

  assign sel_2_34 = (tmp_4 == 1'b0 ? sel_812 :
              s_193);

  assign s_194 = 1'b1;

  assign sel_2_35 = (tmp_6 == 1'b0 ? sel_2_34 :
              s_194);

  assign s_195 = 1'b1;

  assign sel_2_36 = (tmp_8 == 1'b0 ? sel_2_35 :
              s_195);

  assign s_196 = 1'b1;

  assign sel_2_37 = (tmp_10 == 1'b0 ? sel_2_36 :
              s_196);

  assign s_197 = 1'b1;

  assign sel_2_38 = (tmp_12 == 1'b0 ? sel_2_37 :
              s_197);

  assign s_198 = 1'b1;

  assign sel_2_39 = (tmp_14 == 1'b0 ? sel_2_38 :
              s_198);

  assign s_199 = 1'b1;

  assign sel_2_40 = (tmp_16 == 1'b0 ? sel_2_39 :
              s_199);

  assign s_200 = 1'b1;

  assign sel_2_41 = (tmp_18 == 1'b0 ? sel_2_40 :
              s_200);

  assign sel_2_42 = (s_10 == 1'b0 ? sel_811 :
              sel_2_41);

  assign sel_2_43 = (s_11 == 1'b0 ? sel_810 :
              sel_2_42);

  always @(posedge clk)
    begin : rd_218_process
      if (rst == 1'b1) begin
        sel_2_44 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_44 <= sel_2_43;
        end
      end
    end

  always @(posedge clk)
    begin : rd_216_process
      if (rst == 1'b1) begin
        sel_2_45 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_45 <= sel_2_33;
        end
      end
    end

  assign sel_813 = 1'b0;

  assign sel_2_46 = (s_192 == 1'b0 ? sel_2_44 :
              sel_813);

  assign sel_814 = 1'b0;

  always @(posedge clk)
    begin : rd_219_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_54 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_54 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_815 = 8'd0;

  assign sel_816 = 8'd0;

  assign sel_817 = 8'd0;

  assign sel_818 = 8'd0;

  assign sel_819 = 8'd0;

  assign sel_820 = 8'd0;

  assign sel_821 = 8'd0;

  assign sel_822 = 8'd0;

  assign sel_823 = 8'd0;

  assign sel_824 = 8'd0;

  assign sel_825 = 8'd0;

  assign sel_826 = 8'd0;

  always @(posedge clk)
    begin : rd_237_process
      if (rst == 1'b1) begin
        s_201 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_201 <= s_18;
        end
      end
    end

  assign sel_827 = 32'sd0;

  assign sel_828 = 32'sd0;

  assign sel_829 = 32'sd0;

  assign sel_830 = 32'sd0;

  assign sel_831 = 32'sd0;

  assign sel_832 = 32'sd0;

  assign sel_833 = 32'sd0;

  assign sel_834 = 32'sd0;

  assign sel_835 = 32'sd0;

  assign sel_836 = 32'sd0;

  assign sel_837 = 32'sd0;

  assign sel_838 = 32'sd0;

  assign sel_839 = 32'sd0;

  assign sel_840 = 32'sd0;

  assign s_202 = 32'sd2;

  assign sel_1_258 = (s_14 == 1'b0 ? sel_840 :
              s_202);

  assign sel_841 = 32'sd0;

  assign sel_1_259 = (s_15 == 1'b0 ? sel_1_258 :
              sel_841);

  assign sel_842 = 32'sd0;

  assign sel_1_260 = (s_16 == 1'b0 ? sel_1_259 :
              sel_842);

  assign sel_843 = 32'sd0;

  assign sel_1_261 = (s_17 == 1'b0 ? sel_1_260 :
              sel_843);

  assign sel_844 = 32'sd0;

  assign sel_1_262 = (s_18 == 1'b0 ? sel_1_261 :
              sel_844);

  assign sel_845 = 32'sd0;

  assign sel_1_263 = (s_19 == 1'b0 ? sel_1_262 :
              sel_845);

  assign sel_846 = 32'sd0;

  assign sel_1_264 = (s_20 == 1'b0 ? sel_1_263 :
              sel_846);

  assign sel_847 = 32'sd0;

  assign sel_1_265 = (s_21 == 1'b0 ? sel_1_264 :
              sel_847);

  assign sel_848 = 32'sd0;

  assign sel_849 = 32'sd0;

  assign sel_850 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_265, sel_827, sel_828, sel_829, sel_830, sel_831,
       sel_832, sel_833, sel_834, sel_835, sel_836, sel_837, sel_838, sel_839,
       sel_848, sel_849, sel_850) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4722_sel_1 = sel_849;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4722_sel_1 = sel_848;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4722_sel_1 = sel_1_265;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4722_sel_1 = sel_839;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4722_sel_1 = sel_838;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4722_sel_1 = sel_837;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4722_sel_1 = sel_836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4722_sel_1 = sel_835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4722_sel_1 = sel_834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4722_sel_1 = sel_833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4722_sel_1 = sel_832;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4722_sel_1 = sel_831;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4722_sel_1 = sel_830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4722_sel_1 = sel_829;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4722_sel_1 = sel_828;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4722_sel_1 = sel_827;
        end
      default :
        begin
          p4722_sel_1 = sel_850;
        end
    endcase
    sel_1_266 = p4722_sel_1;
  end

  assign tmp_296 = functionOutput[sel_1_266];

  assign sel_851 = 32'sd0;

  assign sel_852 = 32'sd0;

  assign sel_853 = 32'sd0;

  assign sel_854 = 32'sd0;

  assign sel_855 = 32'sd0;

  assign sel_856 = 32'sd0;

  assign sel_857 = 32'sd0;

  assign sel_858 = 32'sd0;

  assign sel_859 = 32'sd0;

  assign sel_860 = 32'sd0;

  assign sel_861 = 32'sd0;

  assign sel_862 = 32'sd0;

  assign sel_863 = 32'sd0;

  assign sel_864 = 32'sd0;

  assign s_203 = 32'sd2;

  assign sel_1_267 = (s_15 == 1'b0 ? sel_864 :
              s_203);

  assign sel_865 = 32'sd0;

  assign sel_1_268 = (s_16 == 1'b0 ? sel_1_267 :
              sel_865);

  assign sel_866 = 32'sd0;

  assign sel_1_269 = (s_17 == 1'b0 ? sel_1_268 :
              sel_866);

  assign sel_867 = 32'sd0;

  assign sel_1_270 = (s_18 == 1'b0 ? sel_1_269 :
              sel_867);

  assign sel_868 = 32'sd0;

  assign sel_1_271 = (s_19 == 1'b0 ? sel_1_270 :
              sel_868);

  assign sel_869 = 32'sd0;

  assign sel_1_272 = (s_20 == 1'b0 ? sel_1_271 :
              sel_869);

  assign sel_870 = 32'sd0;

  assign sel_1_273 = (s_21 == 1'b0 ? sel_1_272 :
              sel_870);

  assign sel_871 = 32'sd0;

  assign sel_872 = 32'sd0;

  assign sel_873 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_273, sel_851, sel_852, sel_853, sel_854, sel_855,
       sel_856, sel_857, sel_858, sel_859, sel_860, sel_861, sel_862, sel_863,
       sel_871, sel_872, sel_873) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4019_sel_1 = sel_872;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4019_sel_1 = sel_871;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4019_sel_1 = sel_1_273;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4019_sel_1 = sel_863;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4019_sel_1 = sel_862;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4019_sel_1 = sel_861;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4019_sel_1 = sel_860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4019_sel_1 = sel_859;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4019_sel_1 = sel_858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4019_sel_1 = sel_857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4019_sel_1 = sel_856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4019_sel_1 = sel_855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4019_sel_1 = sel_854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4019_sel_1 = sel_853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4019_sel_1 = sel_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4019_sel_1 = sel_851;
        end
      default :
        begin
          p4019_sel_1 = sel_873;
        end
    endcase
    sel_1_274 = p4019_sel_1;
  end

  assign tmp_297 = functionOutput_12[sel_1_274];

  assign sel_1_275 = (s_15 == 1'b0 ? tmp_296 :
              tmp_297);

  assign sel_874 = 32'sd0;

  assign sel_875 = 32'sd0;

  assign sel_876 = 32'sd0;

  assign sel_877 = 32'sd0;

  assign sel_878 = 32'sd0;

  assign sel_879 = 32'sd0;

  assign sel_880 = 32'sd0;

  assign sel_881 = 32'sd0;

  assign sel_882 = 32'sd0;

  assign sel_883 = 32'sd0;

  assign sel_884 = 32'sd0;

  assign sel_885 = 32'sd0;

  assign sel_886 = 32'sd0;

  assign sel_887 = 32'sd0;

  assign s_204 = 32'sd2;

  assign sel_1_276 = (s_16 == 1'b0 ? sel_887 :
              s_204);

  assign sel_888 = 32'sd0;

  assign sel_1_277 = (s_17 == 1'b0 ? sel_1_276 :
              sel_888);

  assign sel_889 = 32'sd0;

  assign sel_1_278 = (s_18 == 1'b0 ? sel_1_277 :
              sel_889);

  assign sel_890 = 32'sd0;

  assign sel_1_279 = (s_19 == 1'b0 ? sel_1_278 :
              sel_890);

  assign sel_891 = 32'sd0;

  assign sel_1_280 = (s_20 == 1'b0 ? sel_1_279 :
              sel_891);

  assign sel_892 = 32'sd0;

  assign sel_1_281 = (s_21 == 1'b0 ? sel_1_280 :
              sel_892);

  assign sel_893 = 32'sd0;

  assign sel_894 = 32'sd0;

  assign sel_895 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_281, sel_874, sel_875, sel_876, sel_877, sel_878,
       sel_879, sel_880, sel_881, sel_882, sel_883, sel_884, sel_885, sel_886,
       sel_893, sel_894, sel_895) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4912_sel_1 = sel_894;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4912_sel_1 = sel_893;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4912_sel_1 = sel_1_281;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4912_sel_1 = sel_886;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4912_sel_1 = sel_885;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4912_sel_1 = sel_884;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4912_sel_1 = sel_883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4912_sel_1 = sel_882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4912_sel_1 = sel_881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4912_sel_1 = sel_880;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4912_sel_1 = sel_879;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4912_sel_1 = sel_878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4912_sel_1 = sel_877;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4912_sel_1 = sel_876;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4912_sel_1 = sel_875;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4912_sel_1 = sel_874;
        end
      default :
        begin
          p4912_sel_1 = sel_895;
        end
    endcase
    sel_1_282 = p4912_sel_1;
  end

  assign tmp_298 = functionOutput_13[sel_1_282];

  assign sel_1_283 = (s_16 == 1'b0 ? sel_1_275 :
              tmp_298);

  assign sel_896 = 32'sd0;

  assign sel_897 = 32'sd0;

  assign sel_898 = 32'sd0;

  assign sel_899 = 32'sd0;

  assign sel_900 = 32'sd0;

  assign sel_901 = 32'sd0;

  assign sel_902 = 32'sd0;

  assign sel_903 = 32'sd0;

  assign sel_904 = 32'sd0;

  assign sel_905 = 32'sd0;

  assign sel_906 = 32'sd0;

  assign sel_907 = 32'sd0;

  assign sel_908 = 32'sd0;

  assign sel_909 = 32'sd0;

  assign s_205 = 32'sd2;

  assign sel_1_284 = (s_17 == 1'b0 ? sel_909 :
              s_205);

  assign sel_910 = 32'sd0;

  assign sel_1_285 = (s_18 == 1'b0 ? sel_1_284 :
              sel_910);

  assign sel_911 = 32'sd0;

  assign sel_1_286 = (s_19 == 1'b0 ? sel_1_285 :
              sel_911);

  assign sel_912 = 32'sd0;

  assign sel_1_287 = (s_20 == 1'b0 ? sel_1_286 :
              sel_912);

  assign sel_913 = 32'sd0;

  assign sel_1_288 = (s_21 == 1'b0 ? sel_1_287 :
              sel_913);

  assign sel_914 = 32'sd0;

  assign sel_915 = 32'sd0;

  assign sel_916 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_288, sel_896, sel_897, sel_898, sel_899, sel_900,
       sel_901, sel_902, sel_903, sel_904, sel_905, sel_906, sel_907, sel_908,
       sel_914, sel_915, sel_916) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4342_sel_1 = sel_915;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4342_sel_1 = sel_914;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4342_sel_1 = sel_1_288;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4342_sel_1 = sel_908;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4342_sel_1 = sel_907;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4342_sel_1 = sel_906;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4342_sel_1 = sel_905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4342_sel_1 = sel_904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4342_sel_1 = sel_903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4342_sel_1 = sel_902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4342_sel_1 = sel_901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4342_sel_1 = sel_900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4342_sel_1 = sel_899;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4342_sel_1 = sel_898;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4342_sel_1 = sel_897;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4342_sel_1 = sel_896;
        end
      default :
        begin
          p4342_sel_1 = sel_916;
        end
    endcase
    sel_1_289 = p4342_sel_1;
  end

  assign tmp_299 = functionOutput_14[sel_1_289];

  assign sel_1_290 = (s_17 == 1'b0 ? sel_1_283 :
              tmp_299);

  always @(posedge clk)
    begin : rd_238_process
      if (rst == 1'b1) begin
        sel_1_291 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_291 <= sel_1_290;
        end
      end
    end

  assign sel_917 = 32'sd0;

  assign sel_918 = 32'sd0;

  assign sel_919 = 32'sd0;

  assign sel_920 = 32'sd0;

  assign sel_921 = 32'sd0;

  assign sel_922 = 32'sd0;

  assign sel_923 = 32'sd0;

  assign sel_924 = 32'sd0;

  assign sel_925 = 32'sd0;

  assign sel_926 = 32'sd0;

  assign sel_927 = 32'sd0;

  assign sel_928 = 32'sd0;

  assign sel_929 = 32'sd0;

  assign sel_930 = 32'sd0;

  assign s_206 = 32'sd2;

  assign sel_1_292 = (s_18 == 1'b0 ? sel_930 :
              s_206);

  assign sel_931 = 32'sd0;

  assign sel_1_293 = (s_19 == 1'b0 ? sel_1_292 :
              sel_931);

  assign sel_932 = 32'sd0;

  assign sel_1_294 = (s_20 == 1'b0 ? sel_1_293 :
              sel_932);

  assign sel_933 = 32'sd0;

  assign sel_1_295 = (s_21 == 1'b0 ? sel_1_294 :
              sel_933);

  assign sel_934 = 32'sd0;

  assign sel_935 = 32'sd0;

  assign sel_936 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_295, sel_917, sel_918, sel_919, sel_920, sel_921,
       sel_922, sel_923, sel_924, sel_925, sel_926, sel_927, sel_928, sel_929,
       sel_934, sel_935, sel_936) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4038_sel_1 = sel_935;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4038_sel_1 = sel_934;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4038_sel_1 = sel_1_295;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4038_sel_1 = sel_929;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4038_sel_1 = sel_928;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4038_sel_1 = sel_927;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4038_sel_1 = sel_926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4038_sel_1 = sel_925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4038_sel_1 = sel_924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4038_sel_1 = sel_923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4038_sel_1 = sel_922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4038_sel_1 = sel_921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4038_sel_1 = sel_920;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4038_sel_1 = sel_919;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4038_sel_1 = sel_918;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4038_sel_1 = sel_917;
        end
      default :
        begin
          p4038_sel_1 = sel_936;
        end
    endcase
    sel_1_296 = p4038_sel_1;
  end

  assign tmp_300 = functionOutput_15[sel_1_296];

  always @(posedge clk)
    begin : rd_236_process
      if (rst == 1'b1) begin
        s_207 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_207 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_223_process
      if (rst == 1'b1) begin
        tmp_301 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_301 <= tmp_300;
        end
      end
    end

  assign sel_1_297 = (s_201 == 1'b0 ? sel_1_291 :
              tmp_301);

  assign sel_937 = 32'sd0;

  assign sel_938 = 32'sd0;

  assign sel_939 = 32'sd0;

  assign sel_940 = 32'sd0;

  assign sel_941 = 32'sd0;

  assign sel_942 = 32'sd0;

  assign sel_943 = 32'sd0;

  assign sel_944 = 32'sd0;

  assign sel_945 = 32'sd0;

  assign sel_946 = 32'sd0;

  assign sel_947 = 32'sd0;

  assign sel_948 = 32'sd0;

  assign sel_949 = 32'sd0;

  assign sel_950 = 32'sd0;

  assign s_208 = 32'sd2;

  assign sel_1_298 = (s_19 == 1'b0 ? sel_950 :
              s_208);

  assign sel_951 = 32'sd0;

  assign sel_1_299 = (s_20 == 1'b0 ? sel_1_298 :
              sel_951);

  assign sel_952 = 32'sd0;

  assign sel_1_300 = (s_21 == 1'b0 ? sel_1_299 :
              sel_952);

  assign sel_953 = 32'sd0;

  assign sel_954 = 32'sd0;

  assign sel_955 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_300, sel_937, sel_938, sel_939, sel_940, sel_941,
       sel_942, sel_943, sel_944, sel_945, sel_946, sel_947, sel_948, sel_949,
       sel_953, sel_954, sel_955) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4057_sel_1 = sel_954;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4057_sel_1 = sel_953;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4057_sel_1 = sel_1_300;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4057_sel_1 = sel_949;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4057_sel_1 = sel_948;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4057_sel_1 = sel_947;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4057_sel_1 = sel_946;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4057_sel_1 = sel_945;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4057_sel_1 = sel_944;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4057_sel_1 = sel_943;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4057_sel_1 = sel_942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4057_sel_1 = sel_941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4057_sel_1 = sel_940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4057_sel_1 = sel_939;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4057_sel_1 = sel_938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4057_sel_1 = sel_937;
        end
      default :
        begin
          p4057_sel_1 = sel_955;
        end
    endcase
    sel_1_301 = p4057_sel_1;
  end

  assign tmp_302 = functionOutput_16[sel_1_301];

  always @(posedge clk)
    begin : rd_235_process
      if (rst == 1'b1) begin
        s_209 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_209 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_222_process
      if (rst == 1'b1) begin
        tmp_303 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_303 <= tmp_302;
        end
      end
    end

  assign sel_1_302 = (s_207 == 1'b0 ? sel_1_297 :
              tmp_303);

  assign sel_956 = 32'sd0;

  assign sel_957 = 32'sd0;

  assign sel_958 = 32'sd0;

  assign sel_959 = 32'sd0;

  assign sel_960 = 32'sd0;

  assign sel_961 = 32'sd0;

  assign sel_962 = 32'sd0;

  assign sel_963 = 32'sd0;

  assign sel_964 = 32'sd0;

  assign sel_965 = 32'sd0;

  assign sel_966 = 32'sd0;

  assign sel_967 = 32'sd0;

  assign sel_968 = 32'sd0;

  assign sel_969 = 32'sd0;

  assign s_210 = 32'sd2;

  assign sel_1_303 = (s_20 == 1'b0 ? sel_969 :
              s_210);

  assign sel_970 = 32'sd0;

  assign sel_1_304 = (s_21 == 1'b0 ? sel_1_303 :
              sel_970);

  assign sel_971 = 32'sd0;

  assign sel_972 = 32'sd0;

  assign sel_973 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_304, sel_956, sel_957, sel_958, sel_959, sel_960,
       sel_961, sel_962, sel_963, sel_964, sel_965, sel_966, sel_967, sel_968,
       sel_971, sel_972, sel_973) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3449_sel_1 = sel_972;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3449_sel_1 = sel_971;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3449_sel_1 = sel_1_304;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3449_sel_1 = sel_968;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3449_sel_1 = sel_967;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3449_sel_1 = sel_966;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3449_sel_1 = sel_965;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3449_sel_1 = sel_964;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3449_sel_1 = sel_963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3449_sel_1 = sel_962;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3449_sel_1 = sel_961;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3449_sel_1 = sel_960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3449_sel_1 = sel_959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3449_sel_1 = sel_958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3449_sel_1 = sel_957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3449_sel_1 = sel_956;
        end
      default :
        begin
          p3449_sel_1 = sel_973;
        end
    endcase
    sel_1_305 = p3449_sel_1;
  end

  assign tmp_304 = functionOutput_17[sel_1_305];

  always @(posedge clk)
    begin : rd_234_process
      if (rst == 1'b1) begin
        s_211 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_211 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_221_process
      if (rst == 1'b1) begin
        tmp_305 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_305 <= tmp_304;
        end
      end
    end

  assign sel_1_306 = (s_209 == 1'b0 ? sel_1_302 :
              tmp_305);

  assign sel_974 = 32'sd0;

  assign sel_975 = 32'sd0;

  assign sel_976 = 32'sd0;

  assign sel_977 = 32'sd0;

  assign sel_978 = 32'sd0;

  assign sel_979 = 32'sd0;

  assign sel_980 = 32'sd0;

  assign sel_981 = 32'sd0;

  assign sel_982 = 32'sd0;

  assign sel_983 = 32'sd0;

  assign sel_984 = 32'sd0;

  assign sel_985 = 32'sd0;

  assign sel_986 = 32'sd0;

  assign sel_987 = 32'sd0;

  assign s_212 = 32'sd2;

  assign sel_1_307 = (s_21 == 1'b0 ? sel_987 :
              s_212);

  assign sel_988 = 32'sd0;

  assign sel_989 = 32'sd0;

  assign sel_990 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_307, sel_974, sel_975, sel_976, sel_977, sel_978,
       sel_979, sel_980, sel_981, sel_982, sel_983, sel_984, sel_985, sel_986,
       sel_988, sel_989, sel_990) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4969_sel_1 = sel_989;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4969_sel_1 = sel_988;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4969_sel_1 = sel_1_307;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4969_sel_1 = sel_986;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4969_sel_1 = sel_985;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4969_sel_1 = sel_984;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4969_sel_1 = sel_983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4969_sel_1 = sel_982;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4969_sel_1 = sel_981;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4969_sel_1 = sel_980;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4969_sel_1 = sel_979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4969_sel_1 = sel_978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4969_sel_1 = sel_977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4969_sel_1 = sel_976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4969_sel_1 = sel_975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4969_sel_1 = sel_974;
        end
      default :
        begin
          p4969_sel_1 = sel_990;
        end
    endcase
    sel_1_308 = p4969_sel_1;
  end

  assign tmp_306 = functionOutput_18[sel_1_308];

  always @(posedge clk)
    begin : rd_231_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_55 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_55 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_991 = 32'sd0;

  assign sel_992 = 32'sd0;

  assign sel_993 = 32'sd0;

  assign sel_994 = 32'sd0;

  assign sel_995 = 32'sd0;

  assign sel_996 = 32'sd0;

  assign sel_997 = 32'sd0;

  assign sel_998 = 32'sd0;

  assign sel_999 = 32'sd0;

  assign sel_1000 = 32'sd0;

  assign sel_1001 = 32'sd0;

  assign sel_1002 = 32'sd0;

  assign sel_1003 = 32'sd0;

  always @(posedge clk)
    begin : rd_232_process
      if (rst == 1'b1) begin
        s_213 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_213 <= s_12;
        end
      end
    end

  assign sel_1004 = 32'sd0;

  assign sel_1005 = 32'sd0;

  assign sel_1006 = 32'sd0;

  assign s_214 = 32'sd2;

  assign sel_1_309 = (tmp_4 == 1'b0 ? sel_1006 :
              s_214);

  assign sel_1007 = 32'sd0;

  assign sel_1_310 = (tmp_6 == 1'b0 ? sel_1_309 :
              sel_1007);

  assign sel_1008 = 32'sd0;

  assign sel_1_311 = (tmp_8 == 1'b0 ? sel_1_310 :
              sel_1008);

  assign sel_1009 = 32'sd0;

  assign sel_1_312 = (tmp_10 == 1'b0 ? sel_1_311 :
              sel_1009);

  assign sel_1010 = 32'sd0;

  assign sel_1_313 = (tmp_12 == 1'b0 ? sel_1_312 :
              sel_1010);

  assign sel_1011 = 32'sd0;

  assign sel_1_314 = (tmp_14 == 1'b0 ? sel_1_313 :
              sel_1011);

  assign sel_1012 = 32'sd0;

  assign sel_1_315 = (tmp_16 == 1'b0 ? sel_1_314 :
              sel_1012);

  assign sel_1013 = 32'sd0;

  assign sel_1_316 = (tmp_18 == 1'b0 ? sel_1_315 :
              sel_1013);

  assign sel_1_317 = (s_10 == 1'b0 ? sel_1005 :
              sel_1_316);

  assign sel_1_318 = (s_11 == 1'b0 ? sel_1004 :
              sel_1_317);

  always @(posedge clk)
    begin : rd_233_process
      if (rst == 1'b1) begin
        sel_1_319 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_319 <= sel_1_318;
        end
      end
    end

  assign sel_1014 = 32'sd0;

  assign sel_1015 = 32'sd0;

  assign sel_1_320 = (s_213 == 1'b0 ? sel_1_319 :
              sel_1015);

  assign sel_1016 = 32'sd0;

  always @(posedge clk)
    begin : rd_245_process
      if (rst == 1'b1) begin
        tmp_307 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_307 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_246_process
      if (rst == 1'b1) begin
        for(rd_246_t_1 = 32'sd0; rd_246_t_1 <= 32'sd11; rd_246_t_1 = rd_246_t_1 + 32'sd1) begin
          rd_246_reg[rd_246_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_246_t_0_1 = 32'sd0; rd_246_t_0_1 <= 32'sd11; rd_246_t_0_1 = rd_246_t_0_1 + 32'sd1) begin
            rd_246_reg[rd_246_t_0_1] <= rd_246_reg_next[rd_246_t_0_1];
          end
        end
      end
    end
  genvar t_0_021;
  generate
    for(t_0_021 = 32'sd0; t_0_021 <= 32'sd11; t_0_021 = t_0_021 + 32'sd1) begin:rd_246_reg_next_gen
      assign functionOutput_29[t_0_021] = rd_246_reg[t_0_021];
      assign rd_246_reg_next[t_0_021] = functionOutput_19[t_0_021];
    end
  endgenerate

  assign sel_1017 = 32'sd0;

  always @(is_SPI_MNGR_55, sel_1000, sel_1001, sel_1002, sel_1003, sel_1014, sel_1016,
       sel_1017, sel_1_320, sel_991, sel_992, sel_993, sel_994, sel_995,
       sel_996, sel_997, sel_998, sel_999) begin
    case ( is_SPI_MNGR_55)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2024_sel_1 = sel_1016;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2024_sel_1 = sel_1_320;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2024_sel_1 = sel_1014;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2024_sel_1 = sel_1003;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2024_sel_1 = sel_1002;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2024_sel_1 = sel_1001;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2024_sel_1 = sel_1000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2024_sel_1 = sel_999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2024_sel_1 = sel_998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2024_sel_1 = sel_997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2024_sel_1 = sel_996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2024_sel_1 = sel_995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2024_sel_1 = sel_994;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2024_sel_1 = sel_993;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2024_sel_1 = sel_992;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2024_sel_1 = sel_991;
        end
      default :
        begin
          p2024_sel_1 = sel_1017;
        end
    endcase
    sel_1_321 = p2024_sel_1;
  end

  assign tmp_308 = functionOutput_29[sel_1_321];

  assign sel_1018 = 32'sd0;

  assign sel_1019 = 32'sd0;

  assign sel_1020 = 32'sd0;

  assign sel_1021 = 32'sd0;

  assign sel_1022 = 32'sd0;

  assign sel_1023 = 32'sd0;

  assign sel_1024 = 32'sd0;

  assign sel_1025 = 32'sd0;

  assign sel_1026 = 32'sd0;

  assign sel_1027 = 32'sd0;

  assign sel_1028 = 32'sd0;

  assign sel_1029 = 32'sd0;

  assign sel_1030 = 32'sd0;

  assign sel_1031 = 32'sd0;

  assign sel_1032 = 32'sd0;

  assign sel_1033 = 32'sd0;

  assign sel_1034 = 32'sd0;

  assign s_215 = 32'sd2;

  assign sel_1_322 = (tmp_6 == 1'b0 ? sel_1034 :
              s_215);

  assign sel_1035 = 32'sd0;

  assign sel_1_323 = (tmp_8 == 1'b0 ? sel_1_322 :
              sel_1035);

  assign sel_1036 = 32'sd0;

  assign sel_1_324 = (tmp_10 == 1'b0 ? sel_1_323 :
              sel_1036);

  assign sel_1037 = 32'sd0;

  assign sel_1_325 = (tmp_12 == 1'b0 ? sel_1_324 :
              sel_1037);

  assign sel_1038 = 32'sd0;

  assign sel_1_326 = (tmp_14 == 1'b0 ? sel_1_325 :
              sel_1038);

  assign sel_1039 = 32'sd0;

  assign sel_1_327 = (tmp_16 == 1'b0 ? sel_1_326 :
              sel_1039);

  assign sel_1040 = 32'sd0;

  assign sel_1_328 = (tmp_18 == 1'b0 ? sel_1_327 :
              sel_1040);

  assign sel_1_329 = (s_10 == 1'b0 ? sel_1033 :
              sel_1_328);

  assign sel_1_330 = (s_11 == 1'b0 ? sel_1032 :
              sel_1_329);

  assign sel_1041 = 32'sd0;

  assign sel_1_331 = (s_12 == 1'b0 ? sel_1_330 :
              sel_1041);

  assign sel_1042 = 32'sd0;

  assign sel_1043 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1018, sel_1019, sel_1020, sel_1021, sel_1022, sel_1023,
       sel_1024, sel_1025, sel_1026, sel_1027, sel_1028, sel_1029, sel_1030,
       sel_1031, sel_1042, sel_1043, sel_1_331) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3240_sel_1 = sel_1042;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3240_sel_1 = sel_1_331;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3240_sel_1 = sel_1031;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3240_sel_1 = sel_1030;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3240_sel_1 = sel_1029;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3240_sel_1 = sel_1028;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3240_sel_1 = sel_1027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3240_sel_1 = sel_1026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3240_sel_1 = sel_1025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3240_sel_1 = sel_1024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3240_sel_1 = sel_1023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3240_sel_1 = sel_1022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3240_sel_1 = sel_1021;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3240_sel_1 = sel_1020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3240_sel_1 = sel_1019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3240_sel_1 = sel_1018;
        end
      default :
        begin
          p3240_sel_1 = sel_1043;
        end
    endcase
    sel_1_332 = p3240_sel_1;
  end

  assign tmp_309 = functionOutput_21[sel_1_332];

  always @(posedge clk)
    begin : rd_244_process
      if (rst == 1'b1) begin
        tmp_310 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_310 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_230_process
      if (rst == 1'b1) begin
        tmp_311 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_311 <= tmp_309;
        end
      end
    end

  assign sel_1_333 = (tmp_307 == 1'b0 ? tmp_308 :
              tmp_311);

  assign sel_1044 = 32'sd0;

  assign sel_1045 = 32'sd0;

  assign sel_1046 = 32'sd0;

  assign sel_1047 = 32'sd0;

  assign sel_1048 = 32'sd0;

  assign sel_1049 = 32'sd0;

  assign sel_1050 = 32'sd0;

  assign sel_1051 = 32'sd0;

  assign sel_1052 = 32'sd0;

  assign sel_1053 = 32'sd0;

  assign sel_1054 = 32'sd0;

  assign sel_1055 = 32'sd0;

  assign sel_1056 = 32'sd0;

  assign sel_1057 = 32'sd0;

  assign sel_1058 = 32'sd0;

  assign sel_1059 = 32'sd0;

  assign sel_1060 = 32'sd0;

  assign s_216 = 32'sd2;

  assign sel_1_334 = (tmp_8 == 1'b0 ? sel_1060 :
              s_216);

  assign sel_1061 = 32'sd0;

  assign sel_1_335 = (tmp_10 == 1'b0 ? sel_1_334 :
              sel_1061);

  assign sel_1062 = 32'sd0;

  assign sel_1_336 = (tmp_12 == 1'b0 ? sel_1_335 :
              sel_1062);

  assign sel_1063 = 32'sd0;

  assign sel_1_337 = (tmp_14 == 1'b0 ? sel_1_336 :
              sel_1063);

  assign sel_1064 = 32'sd0;

  assign sel_1_338 = (tmp_16 == 1'b0 ? sel_1_337 :
              sel_1064);

  assign sel_1065 = 32'sd0;

  assign sel_1_339 = (tmp_18 == 1'b0 ? sel_1_338 :
              sel_1065);

  assign sel_1_340 = (s_10 == 1'b0 ? sel_1059 :
              sel_1_339);

  assign sel_1_341 = (s_11 == 1'b0 ? sel_1058 :
              sel_1_340);

  assign sel_1066 = 32'sd0;

  assign sel_1_342 = (s_12 == 1'b0 ? sel_1_341 :
              sel_1066);

  assign sel_1067 = 32'sd0;

  assign sel_1068 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1044, sel_1045, sel_1046, sel_1047, sel_1048, sel_1049,
       sel_1050, sel_1051, sel_1052, sel_1053, sel_1054, sel_1055, sel_1056,
       sel_1057, sel_1067, sel_1068, sel_1_342) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3202_sel_1 = sel_1067;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3202_sel_1 = sel_1_342;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3202_sel_1 = sel_1057;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3202_sel_1 = sel_1056;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3202_sel_1 = sel_1055;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3202_sel_1 = sel_1054;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3202_sel_1 = sel_1053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3202_sel_1 = sel_1052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3202_sel_1 = sel_1051;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3202_sel_1 = sel_1050;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3202_sel_1 = sel_1049;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3202_sel_1 = sel_1048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3202_sel_1 = sel_1047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3202_sel_1 = sel_1046;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3202_sel_1 = sel_1045;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3202_sel_1 = sel_1044;
        end
      default :
        begin
          p3202_sel_1 = sel_1068;
        end
    endcase
    sel_1_343 = p3202_sel_1;
  end

  assign tmp_312 = functionOutput_22[sel_1_343];

  always @(posedge clk)
    begin : rd_243_process
      if (rst == 1'b1) begin
        tmp_313 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_313 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_229_process
      if (rst == 1'b1) begin
        tmp_314 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_314 <= tmp_312;
        end
      end
    end

  assign sel_1_344 = (tmp_310 == 1'b0 ? sel_1_333 :
              tmp_314);

  assign sel_1069 = 32'sd0;

  assign sel_1070 = 32'sd0;

  assign sel_1071 = 32'sd0;

  assign sel_1072 = 32'sd0;

  assign sel_1073 = 32'sd0;

  assign sel_1074 = 32'sd0;

  assign sel_1075 = 32'sd0;

  assign sel_1076 = 32'sd0;

  assign sel_1077 = 32'sd0;

  assign sel_1078 = 32'sd0;

  assign sel_1079 = 32'sd0;

  assign sel_1080 = 32'sd0;

  assign sel_1081 = 32'sd0;

  assign sel_1082 = 32'sd0;

  assign sel_1083 = 32'sd0;

  assign sel_1084 = 32'sd0;

  assign sel_1085 = 32'sd0;

  assign s_217 = 32'sd2;

  assign sel_1_345 = (tmp_10 == 1'b0 ? sel_1085 :
              s_217);

  assign sel_1086 = 32'sd0;

  assign sel_1_346 = (tmp_12 == 1'b0 ? sel_1_345 :
              sel_1086);

  assign sel_1087 = 32'sd0;

  assign sel_1_347 = (tmp_14 == 1'b0 ? sel_1_346 :
              sel_1087);

  assign sel_1088 = 32'sd0;

  assign sel_1_348 = (tmp_16 == 1'b0 ? sel_1_347 :
              sel_1088);

  assign sel_1089 = 32'sd0;

  assign sel_1_349 = (tmp_18 == 1'b0 ? sel_1_348 :
              sel_1089);

  assign sel_1_350 = (s_10 == 1'b0 ? sel_1084 :
              sel_1_349);

  assign sel_1_351 = (s_11 == 1'b0 ? sel_1083 :
              sel_1_350);

  assign sel_1090 = 32'sd0;

  assign sel_1_352 = (s_12 == 1'b0 ? sel_1_351 :
              sel_1090);

  assign sel_1091 = 32'sd0;

  assign sel_1092 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1069, sel_1070, sel_1071, sel_1072, sel_1073, sel_1074,
       sel_1075, sel_1076, sel_1077, sel_1078, sel_1079, sel_1080, sel_1081,
       sel_1082, sel_1091, sel_1092, sel_1_352) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1891_sel_1 = sel_1091;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1891_sel_1 = sel_1_352;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1891_sel_1 = sel_1082;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1891_sel_1 = sel_1081;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1891_sel_1 = sel_1080;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1891_sel_1 = sel_1079;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1891_sel_1 = sel_1078;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1891_sel_1 = sel_1077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1891_sel_1 = sel_1076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1891_sel_1 = sel_1075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1891_sel_1 = sel_1074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1891_sel_1 = sel_1073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1891_sel_1 = sel_1072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1891_sel_1 = sel_1071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1891_sel_1 = sel_1070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1891_sel_1 = sel_1069;
        end
      default :
        begin
          p1891_sel_1 = sel_1092;
        end
    endcase
    sel_1_353 = p1891_sel_1;
  end

  assign tmp_315 = functionOutput_23[sel_1_353];

  always @(posedge clk)
    begin : rd_242_process
      if (rst == 1'b1) begin
        tmp_316 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_316 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_228_process
      if (rst == 1'b1) begin
        tmp_317 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_317 <= tmp_315;
        end
      end
    end

  assign sel_1_354 = (tmp_313 == 1'b0 ? sel_1_344 :
              tmp_317);

  assign sel_1093 = 32'sd0;

  assign sel_1094 = 32'sd0;

  assign sel_1095 = 32'sd0;

  assign sel_1096 = 32'sd0;

  assign sel_1097 = 32'sd0;

  assign sel_1098 = 32'sd0;

  assign sel_1099 = 32'sd0;

  assign sel_1100 = 32'sd0;

  assign sel_1101 = 32'sd0;

  assign sel_1102 = 32'sd0;

  assign sel_1103 = 32'sd0;

  assign sel_1104 = 32'sd0;

  assign sel_1105 = 32'sd0;

  assign sel_1106 = 32'sd0;

  assign sel_1107 = 32'sd0;

  assign sel_1108 = 32'sd0;

  assign sel_1109 = 32'sd0;

  assign s_218 = 32'sd2;

  assign sel_1_355 = (tmp_12 == 1'b0 ? sel_1109 :
              s_218);

  assign sel_1110 = 32'sd0;

  assign sel_1_356 = (tmp_14 == 1'b0 ? sel_1_355 :
              sel_1110);

  assign sel_1111 = 32'sd0;

  assign sel_1_357 = (tmp_16 == 1'b0 ? sel_1_356 :
              sel_1111);

  assign sel_1112 = 32'sd0;

  assign sel_1_358 = (tmp_18 == 1'b0 ? sel_1_357 :
              sel_1112);

  assign sel_1_359 = (s_10 == 1'b0 ? sel_1108 :
              sel_1_358);

  assign sel_1_360 = (s_11 == 1'b0 ? sel_1107 :
              sel_1_359);

  assign sel_1113 = 32'sd0;

  assign sel_1_361 = (s_12 == 1'b0 ? sel_1_360 :
              sel_1113);

  assign sel_1114 = 32'sd0;

  assign sel_1115 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1093, sel_1094, sel_1095, sel_1096, sel_1097, sel_1098,
       sel_1099, sel_1100, sel_1101, sel_1102, sel_1103, sel_1104, sel_1105,
       sel_1106, sel_1114, sel_1115, sel_1_361) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2423_sel_1 = sel_1114;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2423_sel_1 = sel_1_361;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2423_sel_1 = sel_1106;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2423_sel_1 = sel_1105;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2423_sel_1 = sel_1104;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2423_sel_1 = sel_1103;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2423_sel_1 = sel_1102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2423_sel_1 = sel_1101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2423_sel_1 = sel_1100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2423_sel_1 = sel_1099;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2423_sel_1 = sel_1098;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2423_sel_1 = sel_1097;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2423_sel_1 = sel_1096;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2423_sel_1 = sel_1095;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2423_sel_1 = sel_1094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2423_sel_1 = sel_1093;
        end
      default :
        begin
          p2423_sel_1 = sel_1115;
        end
    endcase
    sel_1_362 = p2423_sel_1;
  end

  assign tmp_318 = functionOutput_24[sel_1_362];

  always @(posedge clk)
    begin : rd_241_process
      if (rst == 1'b1) begin
        tmp_319 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_319 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_227_process
      if (rst == 1'b1) begin
        tmp_320 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_320 <= tmp_318;
        end
      end
    end

  assign sel_1_363 = (tmp_316 == 1'b0 ? sel_1_354 :
              tmp_320);

  assign sel_1116 = 32'sd0;

  assign sel_1117 = 32'sd0;

  assign sel_1118 = 32'sd0;

  assign sel_1119 = 32'sd0;

  assign sel_1120 = 32'sd0;

  assign sel_1121 = 32'sd0;

  assign sel_1122 = 32'sd0;

  assign sel_1123 = 32'sd0;

  assign sel_1124 = 32'sd0;

  assign sel_1125 = 32'sd0;

  assign sel_1126 = 32'sd0;

  assign sel_1127 = 32'sd0;

  assign sel_1128 = 32'sd0;

  assign sel_1129 = 32'sd0;

  assign sel_1130 = 32'sd0;

  assign sel_1131 = 32'sd0;

  assign sel_1132 = 32'sd0;

  assign s_219 = 32'sd2;

  assign sel_1_364 = (tmp_14 == 1'b0 ? sel_1132 :
              s_219);

  assign sel_1133 = 32'sd0;

  assign sel_1_365 = (tmp_16 == 1'b0 ? sel_1_364 :
              sel_1133);

  assign sel_1134 = 32'sd0;

  assign sel_1_366 = (tmp_18 == 1'b0 ? sel_1_365 :
              sel_1134);

  assign sel_1_367 = (s_10 == 1'b0 ? sel_1131 :
              sel_1_366);

  assign sel_1_368 = (s_11 == 1'b0 ? sel_1130 :
              sel_1_367);

  assign sel_1135 = 32'sd0;

  assign sel_1_369 = (s_12 == 1'b0 ? sel_1_368 :
              sel_1135);

  assign sel_1136 = 32'sd0;

  assign sel_1137 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1116, sel_1117, sel_1118, sel_1119, sel_1120, sel_1121,
       sel_1122, sel_1123, sel_1124, sel_1125, sel_1126, sel_1127, sel_1128,
       sel_1129, sel_1136, sel_1137, sel_1_369) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1568_sel_1 = sel_1136;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1568_sel_1 = sel_1_369;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1568_sel_1 = sel_1129;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1568_sel_1 = sel_1128;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1568_sel_1 = sel_1127;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1568_sel_1 = sel_1126;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1568_sel_1 = sel_1125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1568_sel_1 = sel_1124;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1568_sel_1 = sel_1123;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1568_sel_1 = sel_1122;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1568_sel_1 = sel_1121;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1568_sel_1 = sel_1120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1568_sel_1 = sel_1119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1568_sel_1 = sel_1118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1568_sel_1 = sel_1117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1568_sel_1 = sel_1116;
        end
      default :
        begin
          p1568_sel_1 = sel_1137;
        end
    endcase
    sel_1_370 = p1568_sel_1;
  end

  assign tmp_321 = functionOutput_25[sel_1_370];

  always @(posedge clk)
    begin : rd_240_process
      if (rst == 1'b1) begin
        tmp_322 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_322 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_226_process
      if (rst == 1'b1) begin
        tmp_323 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_323 <= tmp_321;
        end
      end
    end

  assign sel_1_371 = (tmp_319 == 1'b0 ? sel_1_363 :
              tmp_323);

  assign sel_1138 = 32'sd0;

  assign sel_1139 = 32'sd0;

  assign sel_1140 = 32'sd0;

  assign sel_1141 = 32'sd0;

  assign sel_1142 = 32'sd0;

  assign sel_1143 = 32'sd0;

  assign sel_1144 = 32'sd0;

  assign sel_1145 = 32'sd0;

  assign sel_1146 = 32'sd0;

  assign sel_1147 = 32'sd0;

  assign sel_1148 = 32'sd0;

  assign sel_1149 = 32'sd0;

  assign sel_1150 = 32'sd0;

  assign sel_1151 = 32'sd0;

  assign sel_1152 = 32'sd0;

  assign sel_1153 = 32'sd0;

  assign sel_1154 = 32'sd0;

  assign s_220 = 32'sd2;

  assign sel_1_372 = (tmp_16 == 1'b0 ? sel_1154 :
              s_220);

  assign sel_1155 = 32'sd0;

  assign sel_1_373 = (tmp_18 == 1'b0 ? sel_1_372 :
              sel_1155);

  assign sel_1_374 = (s_10 == 1'b0 ? sel_1153 :
              sel_1_373);

  assign sel_1_375 = (s_11 == 1'b0 ? sel_1152 :
              sel_1_374);

  assign sel_1156 = 32'sd0;

  assign sel_1_376 = (s_12 == 1'b0 ? sel_1_375 :
              sel_1156);

  assign sel_1157 = 32'sd0;

  assign sel_1158 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1138, sel_1139, sel_1140, sel_1141, sel_1142, sel_1143,
       sel_1144, sel_1145, sel_1146, sel_1147, sel_1148, sel_1149, sel_1150,
       sel_1151, sel_1157, sel_1158, sel_1_376) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3335_sel_1 = sel_1157;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3335_sel_1 = sel_1_376;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3335_sel_1 = sel_1151;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3335_sel_1 = sel_1150;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3335_sel_1 = sel_1149;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3335_sel_1 = sel_1148;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3335_sel_1 = sel_1147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3335_sel_1 = sel_1146;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3335_sel_1 = sel_1145;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3335_sel_1 = sel_1144;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3335_sel_1 = sel_1143;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3335_sel_1 = sel_1142;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3335_sel_1 = sel_1141;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3335_sel_1 = sel_1140;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3335_sel_1 = sel_1139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3335_sel_1 = sel_1138;
        end
      default :
        begin
          p3335_sel_1 = sel_1158;
        end
    endcase
    sel_1_377 = p3335_sel_1;
  end

  assign tmp_324 = functionOutput_26[sel_1_377];

  always @(posedge clk)
    begin : rd_239_process
      if (rst == 1'b1) begin
        tmp_325 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_325 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_225_process
      if (rst == 1'b1) begin
        tmp_326 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_326 <= tmp_324;
        end
      end
    end

  assign sel_1_378 = (tmp_322 == 1'b0 ? sel_1_371 :
              tmp_326);

  assign sel_1159 = 32'sd0;

  assign sel_1160 = 32'sd0;

  assign sel_1161 = 32'sd0;

  assign sel_1162 = 32'sd0;

  assign sel_1163 = 32'sd0;

  assign sel_1164 = 32'sd0;

  assign sel_1165 = 32'sd0;

  assign sel_1166 = 32'sd0;

  assign sel_1167 = 32'sd0;

  assign sel_1168 = 32'sd0;

  assign sel_1169 = 32'sd0;

  assign sel_1170 = 32'sd0;

  assign sel_1171 = 32'sd0;

  assign sel_1172 = 32'sd0;

  assign sel_1173 = 32'sd0;

  assign sel_1174 = 32'sd0;

  assign sel_1175 = 32'sd0;

  assign s_221 = 32'sd2;

  assign sel_1_379 = (tmp_18 == 1'b0 ? sel_1175 :
              s_221);

  assign sel_1_380 = (s_10 == 1'b0 ? sel_1174 :
              sel_1_379);

  assign sel_1_381 = (s_11 == 1'b0 ? sel_1173 :
              sel_1_380);

  assign sel_1176 = 32'sd0;

  assign sel_1_382 = (s_12 == 1'b0 ? sel_1_381 :
              sel_1176);

  assign sel_1177 = 32'sd0;

  assign sel_1178 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1159, sel_1160, sel_1161, sel_1162, sel_1163, sel_1164,
       sel_1165, sel_1166, sel_1167, sel_1168, sel_1169, sel_1170, sel_1171,
       sel_1172, sel_1177, sel_1178, sel_1_382) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2100_sel_1 = sel_1177;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2100_sel_1 = sel_1_382;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2100_sel_1 = sel_1172;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2100_sel_1 = sel_1171;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2100_sel_1 = sel_1170;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2100_sel_1 = sel_1169;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2100_sel_1 = sel_1168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2100_sel_1 = sel_1167;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2100_sel_1 = sel_1166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2100_sel_1 = sel_1165;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2100_sel_1 = sel_1164;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2100_sel_1 = sel_1163;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2100_sel_1 = sel_1162;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2100_sel_1 = sel_1161;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2100_sel_1 = sel_1160;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2100_sel_1 = sel_1159;
        end
      default :
        begin
          p2100_sel_1 = sel_1178;
        end
    endcase
    sel_1_383 = p2100_sel_1;
  end

  assign tmp_327 = functionOutput_27[sel_1_383];

  assign sel_1179 = 8'd0;

  always @(posedge clk)
    begin : rd_220_process
      if (rst == 1'b1) begin
        tmp_328 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_328 <= tmp_306;
        end
      end
    end

  assign sel_1_384 = (s_211 == 1'b0 ? sel_1_306 :
              tmp_328);

  always @(posedge clk)
    begin : rd_224_process
      if (rst == 1'b1) begin
        tmp_329 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_329 <= tmp_327;
        end
      end
    end

  assign sel_1_385 = (tmp_325 == 1'b0 ? sel_1_378 :
              tmp_329);

  assign sel_1180 = 8'd0;

  always @(posedge clk)
    begin : rd_247_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_56 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_56 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1181 = 1'b0;

  assign sel_1182 = 1'b0;

  assign sel_1183 = 1'b0;

  assign sel_1184 = 1'b0;

  assign sel_1185 = 1'b0;

  assign sel_1186 = 1'b0;

  assign sel_1187 = 1'b0;

  assign sel_1188 = 1'b0;

  assign sel_1189 = 1'b0;

  assign sel_1190 = 1'b0;

  assign sel_1191 = 1'b0;

  assign sel_1192 = 1'b0;

  assign sel_1193 = 1'b0;

  assign sel_1194 = 1'b0;

  assign s_222 = 1'b1;

  assign sel_2_47 = (s_14 == 1'b0 ? sel_1194 :
              s_222);

  assign s_223 = 1'b1;

  assign sel_2_48 = (s_15 == 1'b0 ? sel_2_47 :
              s_223);

  assign s_224 = 1'b1;

  assign sel_2_49 = (s_16 == 1'b0 ? sel_2_48 :
              s_224);

  assign s_225 = 1'b1;

  assign sel_2_50 = (s_17 == 1'b0 ? sel_2_49 :
              s_225);

  assign s_226 = 1'b1;

  assign sel_2_51 = (s_18 == 1'b0 ? sel_2_50 :
              s_226);

  assign s_227 = 1'b1;

  assign sel_2_52 = (s_19 == 1'b0 ? sel_2_51 :
              s_227);

  assign s_228 = 1'b1;

  assign sel_2_53 = (s_20 == 1'b0 ? sel_2_52 :
              s_228);

  assign s_229 = 1'b1;

  assign sel_2_54 = (s_21 == 1'b0 ? sel_2_53 :
              s_229);

  always @(posedge clk)
    begin : rd_249_process
      if (rst == 1'b1) begin
        s_230 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_230 <= s_12;
        end
      end
    end

  assign sel_1195 = 1'b0;

  assign sel_1196 = 1'b0;

  assign sel_1197 = 1'b0;

  assign s_231 = 1'b1;

  assign sel_2_55 = (tmp_4 == 1'b0 ? sel_1197 :
              s_231);

  assign s_232 = 1'b1;

  assign sel_2_56 = (tmp_6 == 1'b0 ? sel_2_55 :
              s_232);

  assign s_233 = 1'b1;

  assign sel_2_57 = (tmp_8 == 1'b0 ? sel_2_56 :
              s_233);

  assign s_234 = 1'b1;

  assign sel_2_58 = (tmp_10 == 1'b0 ? sel_2_57 :
              s_234);

  assign s_235 = 1'b1;

  assign sel_2_59 = (tmp_12 == 1'b0 ? sel_2_58 :
              s_235);

  assign s_236 = 1'b1;

  assign sel_2_60 = (tmp_14 == 1'b0 ? sel_2_59 :
              s_236);

  assign s_237 = 1'b1;

  assign sel_2_61 = (tmp_16 == 1'b0 ? sel_2_60 :
              s_237);

  assign s_238 = 1'b1;

  assign sel_2_62 = (tmp_18 == 1'b0 ? sel_2_61 :
              s_238);

  assign sel_2_63 = (s_10 == 1'b0 ? sel_1196 :
              sel_2_62);

  assign sel_2_64 = (s_11 == 1'b0 ? sel_1195 :
              sel_2_63);

  always @(posedge clk)
    begin : rd_250_process
      if (rst == 1'b1) begin
        sel_2_65 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_65 <= sel_2_64;
        end
      end
    end

  always @(posedge clk)
    begin : rd_248_process
      if (rst == 1'b1) begin
        sel_2_66 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_66 <= sel_2_54;
        end
      end
    end

  assign sel_1198 = 1'b0;

  assign sel_2_67 = (s_230 == 1'b0 ? sel_2_65 :
              sel_1198);

  assign sel_1199 = 1'b0;

  always @(posedge clk)
    begin : rd_251_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_57 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_57 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1200 = 8'd0;

  assign sel_1201 = 8'd0;

  assign sel_1202 = 8'd0;

  assign sel_1203 = 8'd0;

  assign sel_1204 = 8'd0;

  assign sel_1205 = 8'd0;

  assign sel_1206 = 8'd0;

  assign sel_1207 = 8'd0;

  assign sel_1208 = 8'd0;

  assign sel_1209 = 8'd0;

  assign sel_1210 = 8'd0;

  assign sel_1211 = 8'd0;

  always @(posedge clk)
    begin : rd_269_process
      if (rst == 1'b1) begin
        s_239 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_239 <= s_18;
        end
      end
    end

  assign sel_1212 = 32'sd0;

  assign sel_1213 = 32'sd0;

  assign sel_1214 = 32'sd0;

  assign sel_1215 = 32'sd0;

  assign sel_1216 = 32'sd0;

  assign sel_1217 = 32'sd0;

  assign sel_1218 = 32'sd0;

  assign sel_1219 = 32'sd0;

  assign sel_1220 = 32'sd0;

  assign sel_1221 = 32'sd0;

  assign sel_1222 = 32'sd0;

  assign sel_1223 = 32'sd0;

  assign sel_1224 = 32'sd0;

  assign sel_1225 = 32'sd0;

  assign s_240 = 32'sd3;

  assign sel_1_386 = (s_14 == 1'b0 ? sel_1225 :
              s_240);

  assign sel_1226 = 32'sd0;

  assign sel_1_387 = (s_15 == 1'b0 ? sel_1_386 :
              sel_1226);

  assign sel_1227 = 32'sd0;

  assign sel_1_388 = (s_16 == 1'b0 ? sel_1_387 :
              sel_1227);

  assign sel_1228 = 32'sd0;

  assign sel_1_389 = (s_17 == 1'b0 ? sel_1_388 :
              sel_1228);

  assign sel_1229 = 32'sd0;

  assign sel_1_390 = (s_18 == 1'b0 ? sel_1_389 :
              sel_1229);

  assign sel_1230 = 32'sd0;

  assign sel_1_391 = (s_19 == 1'b0 ? sel_1_390 :
              sel_1230);

  assign sel_1231 = 32'sd0;

  assign sel_1_392 = (s_20 == 1'b0 ? sel_1_391 :
              sel_1231);

  assign sel_1232 = 32'sd0;

  assign sel_1_393 = (s_21 == 1'b0 ? sel_1_392 :
              sel_1232);

  assign sel_1233 = 32'sd0;

  assign sel_1234 = 32'sd0;

  assign sel_1235 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1212, sel_1213, sel_1214, sel_1215, sel_1216, sel_1217,
       sel_1218, sel_1219, sel_1220, sel_1221, sel_1222, sel_1223, sel_1224,
       sel_1233, sel_1234, sel_1235, sel_1_393) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3829_sel_1 = sel_1234;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3829_sel_1 = sel_1233;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3829_sel_1 = sel_1_393;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3829_sel_1 = sel_1224;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3829_sel_1 = sel_1223;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3829_sel_1 = sel_1222;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3829_sel_1 = sel_1221;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3829_sel_1 = sel_1220;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3829_sel_1 = sel_1219;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3829_sel_1 = sel_1218;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3829_sel_1 = sel_1217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3829_sel_1 = sel_1216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3829_sel_1 = sel_1215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3829_sel_1 = sel_1214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3829_sel_1 = sel_1213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3829_sel_1 = sel_1212;
        end
      default :
        begin
          p3829_sel_1 = sel_1235;
        end
    endcase
    sel_1_394 = p3829_sel_1;
  end

  assign tmp_330 = functionOutput[sel_1_394];

  assign sel_1236 = 32'sd0;

  assign sel_1237 = 32'sd0;

  assign sel_1238 = 32'sd0;

  assign sel_1239 = 32'sd0;

  assign sel_1240 = 32'sd0;

  assign sel_1241 = 32'sd0;

  assign sel_1242 = 32'sd0;

  assign sel_1243 = 32'sd0;

  assign sel_1244 = 32'sd0;

  assign sel_1245 = 32'sd0;

  assign sel_1246 = 32'sd0;

  assign sel_1247 = 32'sd0;

  assign sel_1248 = 32'sd0;

  assign sel_1249 = 32'sd0;

  assign s_241 = 32'sd3;

  assign sel_1_395 = (s_15 == 1'b0 ? sel_1249 :
              s_241);

  assign sel_1250 = 32'sd0;

  assign sel_1_396 = (s_16 == 1'b0 ? sel_1_395 :
              sel_1250);

  assign sel_1251 = 32'sd0;

  assign sel_1_397 = (s_17 == 1'b0 ? sel_1_396 :
              sel_1251);

  assign sel_1252 = 32'sd0;

  assign sel_1_398 = (s_18 == 1'b0 ? sel_1_397 :
              sel_1252);

  assign sel_1253 = 32'sd0;

  assign sel_1_399 = (s_19 == 1'b0 ? sel_1_398 :
              sel_1253);

  assign sel_1254 = 32'sd0;

  assign sel_1_400 = (s_20 == 1'b0 ? sel_1_399 :
              sel_1254);

  assign sel_1255 = 32'sd0;

  assign sel_1_401 = (s_21 == 1'b0 ? sel_1_400 :
              sel_1255);

  assign sel_1256 = 32'sd0;

  assign sel_1257 = 32'sd0;

  assign sel_1258 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1236, sel_1237, sel_1238, sel_1239, sel_1240, sel_1241,
       sel_1242, sel_1243, sel_1244, sel_1245, sel_1246, sel_1247, sel_1248,
       sel_1256, sel_1257, sel_1258, sel_1_401) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4513_sel_1 = sel_1257;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4513_sel_1 = sel_1256;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4513_sel_1 = sel_1_401;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4513_sel_1 = sel_1248;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4513_sel_1 = sel_1247;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4513_sel_1 = sel_1246;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4513_sel_1 = sel_1245;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4513_sel_1 = sel_1244;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4513_sel_1 = sel_1243;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4513_sel_1 = sel_1242;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4513_sel_1 = sel_1241;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4513_sel_1 = sel_1240;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4513_sel_1 = sel_1239;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4513_sel_1 = sel_1238;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4513_sel_1 = sel_1237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4513_sel_1 = sel_1236;
        end
      default :
        begin
          p4513_sel_1 = sel_1258;
        end
    endcase
    sel_1_402 = p4513_sel_1;
  end

  assign tmp_331 = functionOutput_12[sel_1_402];

  assign sel_1_403 = (s_15 == 1'b0 ? tmp_330 :
              tmp_331);

  assign sel_1259 = 32'sd0;

  assign sel_1260 = 32'sd0;

  assign sel_1261 = 32'sd0;

  assign sel_1262 = 32'sd0;

  assign sel_1263 = 32'sd0;

  assign sel_1264 = 32'sd0;

  assign sel_1265 = 32'sd0;

  assign sel_1266 = 32'sd0;

  assign sel_1267 = 32'sd0;

  assign sel_1268 = 32'sd0;

  assign sel_1269 = 32'sd0;

  assign sel_1270 = 32'sd0;

  assign sel_1271 = 32'sd0;

  assign sel_1272 = 32'sd0;

  assign s_242 = 32'sd3;

  assign sel_1_404 = (s_16 == 1'b0 ? sel_1272 :
              s_242);

  assign sel_1273 = 32'sd0;

  assign sel_1_405 = (s_17 == 1'b0 ? sel_1_404 :
              sel_1273);

  assign sel_1274 = 32'sd0;

  assign sel_1_406 = (s_18 == 1'b0 ? sel_1_405 :
              sel_1274);

  assign sel_1275 = 32'sd0;

  assign sel_1_407 = (s_19 == 1'b0 ? sel_1_406 :
              sel_1275);

  assign sel_1276 = 32'sd0;

  assign sel_1_408 = (s_20 == 1'b0 ? sel_1_407 :
              sel_1276);

  assign sel_1277 = 32'sd0;

  assign sel_1_409 = (s_21 == 1'b0 ? sel_1_408 :
              sel_1277);

  assign sel_1278 = 32'sd0;

  assign sel_1279 = 32'sd0;

  assign sel_1280 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1259, sel_1260, sel_1261, sel_1262, sel_1263, sel_1264,
       sel_1265, sel_1266, sel_1267, sel_1268, sel_1269, sel_1270, sel_1271,
       sel_1278, sel_1279, sel_1280, sel_1_409) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5045_sel_1 = sel_1279;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5045_sel_1 = sel_1278;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5045_sel_1 = sel_1_409;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5045_sel_1 = sel_1271;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5045_sel_1 = sel_1270;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5045_sel_1 = sel_1269;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5045_sel_1 = sel_1268;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5045_sel_1 = sel_1267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5045_sel_1 = sel_1266;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5045_sel_1 = sel_1265;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5045_sel_1 = sel_1264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5045_sel_1 = sel_1263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5045_sel_1 = sel_1262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5045_sel_1 = sel_1261;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5045_sel_1 = sel_1260;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5045_sel_1 = sel_1259;
        end
      default :
        begin
          p5045_sel_1 = sel_1280;
        end
    endcase
    sel_1_410 = p5045_sel_1;
  end

  assign tmp_332 = functionOutput_13[sel_1_410];

  assign sel_1_411 = (s_16 == 1'b0 ? sel_1_403 :
              tmp_332);

  assign sel_1281 = 32'sd0;

  assign sel_1282 = 32'sd0;

  assign sel_1283 = 32'sd0;

  assign sel_1284 = 32'sd0;

  assign sel_1285 = 32'sd0;

  assign sel_1286 = 32'sd0;

  assign sel_1287 = 32'sd0;

  assign sel_1288 = 32'sd0;

  assign sel_1289 = 32'sd0;

  assign sel_1290 = 32'sd0;

  assign sel_1291 = 32'sd0;

  assign sel_1292 = 32'sd0;

  assign sel_1293 = 32'sd0;

  assign sel_1294 = 32'sd0;

  assign s_243 = 32'sd3;

  assign sel_1_412 = (s_17 == 1'b0 ? sel_1294 :
              s_243);

  assign sel_1295 = 32'sd0;

  assign sel_1_413 = (s_18 == 1'b0 ? sel_1_412 :
              sel_1295);

  assign sel_1296 = 32'sd0;

  assign sel_1_414 = (s_19 == 1'b0 ? sel_1_413 :
              sel_1296);

  assign sel_1297 = 32'sd0;

  assign sel_1_415 = (s_20 == 1'b0 ? sel_1_414 :
              sel_1297);

  assign sel_1298 = 32'sd0;

  assign sel_1_416 = (s_21 == 1'b0 ? sel_1_415 :
              sel_1298);

  assign sel_1299 = 32'sd0;

  assign sel_1300 = 32'sd0;

  assign sel_1301 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1281, sel_1282, sel_1283, sel_1284, sel_1285, sel_1286,
       sel_1287, sel_1288, sel_1289, sel_1290, sel_1291, sel_1292, sel_1293,
       sel_1299, sel_1300, sel_1301, sel_1_416) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5178_sel_1 = sel_1300;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5178_sel_1 = sel_1299;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5178_sel_1 = sel_1_416;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5178_sel_1 = sel_1293;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5178_sel_1 = sel_1292;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5178_sel_1 = sel_1291;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5178_sel_1 = sel_1290;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5178_sel_1 = sel_1289;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5178_sel_1 = sel_1288;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5178_sel_1 = sel_1287;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5178_sel_1 = sel_1286;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5178_sel_1 = sel_1285;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5178_sel_1 = sel_1284;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5178_sel_1 = sel_1283;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5178_sel_1 = sel_1282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5178_sel_1 = sel_1281;
        end
      default :
        begin
          p5178_sel_1 = sel_1301;
        end
    endcase
    sel_1_417 = p5178_sel_1;
  end

  assign tmp_333 = functionOutput_14[sel_1_417];

  assign sel_1_418 = (s_17 == 1'b0 ? sel_1_411 :
              tmp_333);

  always @(posedge clk)
    begin : rd_270_process
      if (rst == 1'b1) begin
        sel_1_419 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_419 <= sel_1_418;
        end
      end
    end

  assign sel_1302 = 32'sd0;

  assign sel_1303 = 32'sd0;

  assign sel_1304 = 32'sd0;

  assign sel_1305 = 32'sd0;

  assign sel_1306 = 32'sd0;

  assign sel_1307 = 32'sd0;

  assign sel_1308 = 32'sd0;

  assign sel_1309 = 32'sd0;

  assign sel_1310 = 32'sd0;

  assign sel_1311 = 32'sd0;

  assign sel_1312 = 32'sd0;

  assign sel_1313 = 32'sd0;

  assign sel_1314 = 32'sd0;

  assign sel_1315 = 32'sd0;

  assign s_244 = 32'sd3;

  assign sel_1_420 = (s_18 == 1'b0 ? sel_1315 :
              s_244);

  assign sel_1316 = 32'sd0;

  assign sel_1_421 = (s_19 == 1'b0 ? sel_1_420 :
              sel_1316);

  assign sel_1317 = 32'sd0;

  assign sel_1_422 = (s_20 == 1'b0 ? sel_1_421 :
              sel_1317);

  assign sel_1318 = 32'sd0;

  assign sel_1_423 = (s_21 == 1'b0 ? sel_1_422 :
              sel_1318);

  assign sel_1319 = 32'sd0;

  assign sel_1320 = 32'sd0;

  assign sel_1321 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1302, sel_1303, sel_1304, sel_1305, sel_1306, sel_1307,
       sel_1308, sel_1309, sel_1310, sel_1311, sel_1312, sel_1313, sel_1314,
       sel_1319, sel_1320, sel_1321, sel_1_423) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3696_sel_1 = sel_1320;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3696_sel_1 = sel_1319;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3696_sel_1 = sel_1_423;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3696_sel_1 = sel_1314;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3696_sel_1 = sel_1313;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3696_sel_1 = sel_1312;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3696_sel_1 = sel_1311;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3696_sel_1 = sel_1310;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3696_sel_1 = sel_1309;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3696_sel_1 = sel_1308;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3696_sel_1 = sel_1307;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3696_sel_1 = sel_1306;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3696_sel_1 = sel_1305;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3696_sel_1 = sel_1304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3696_sel_1 = sel_1303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3696_sel_1 = sel_1302;
        end
      default :
        begin
          p3696_sel_1 = sel_1321;
        end
    endcase
    sel_1_424 = p3696_sel_1;
  end

  assign tmp_334 = functionOutput_15[sel_1_424];

  always @(posedge clk)
    begin : rd_268_process
      if (rst == 1'b1) begin
        s_245 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_245 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_255_process
      if (rst == 1'b1) begin
        tmp_335 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_335 <= tmp_334;
        end
      end
    end

  assign sel_1_425 = (s_239 == 1'b0 ? sel_1_419 :
              tmp_335);

  assign sel_1322 = 32'sd0;

  assign sel_1323 = 32'sd0;

  assign sel_1324 = 32'sd0;

  assign sel_1325 = 32'sd0;

  assign sel_1326 = 32'sd0;

  assign sel_1327 = 32'sd0;

  assign sel_1328 = 32'sd0;

  assign sel_1329 = 32'sd0;

  assign sel_1330 = 32'sd0;

  assign sel_1331 = 32'sd0;

  assign sel_1332 = 32'sd0;

  assign sel_1333 = 32'sd0;

  assign sel_1334 = 32'sd0;

  assign sel_1335 = 32'sd0;

  assign s_246 = 32'sd3;

  assign sel_1_426 = (s_19 == 1'b0 ? sel_1335 :
              s_246);

  assign sel_1336 = 32'sd0;

  assign sel_1_427 = (s_20 == 1'b0 ? sel_1_426 :
              sel_1336);

  assign sel_1337 = 32'sd0;

  assign sel_1_428 = (s_21 == 1'b0 ? sel_1_427 :
              sel_1337);

  assign sel_1338 = 32'sd0;

  assign sel_1339 = 32'sd0;

  assign sel_1340 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1322, sel_1323, sel_1324, sel_1325, sel_1326, sel_1327,
       sel_1328, sel_1329, sel_1330, sel_1331, sel_1332, sel_1333, sel_1334,
       sel_1338, sel_1339, sel_1340, sel_1_428) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4817_sel_1 = sel_1339;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4817_sel_1 = sel_1338;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4817_sel_1 = sel_1_428;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4817_sel_1 = sel_1334;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4817_sel_1 = sel_1333;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4817_sel_1 = sel_1332;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4817_sel_1 = sel_1331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4817_sel_1 = sel_1330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4817_sel_1 = sel_1329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4817_sel_1 = sel_1328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4817_sel_1 = sel_1327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4817_sel_1 = sel_1326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4817_sel_1 = sel_1325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4817_sel_1 = sel_1324;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4817_sel_1 = sel_1323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4817_sel_1 = sel_1322;
        end
      default :
        begin
          p4817_sel_1 = sel_1340;
        end
    endcase
    sel_1_429 = p4817_sel_1;
  end

  assign tmp_336 = functionOutput_16[sel_1_429];

  always @(posedge clk)
    begin : rd_267_process
      if (rst == 1'b1) begin
        s_247 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_247 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_254_process
      if (rst == 1'b1) begin
        tmp_337 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_337 <= tmp_336;
        end
      end
    end

  assign sel_1_430 = (s_245 == 1'b0 ? sel_1_425 :
              tmp_337);

  assign sel_1341 = 32'sd0;

  assign sel_1342 = 32'sd0;

  assign sel_1343 = 32'sd0;

  assign sel_1344 = 32'sd0;

  assign sel_1345 = 32'sd0;

  assign sel_1346 = 32'sd0;

  assign sel_1347 = 32'sd0;

  assign sel_1348 = 32'sd0;

  assign sel_1349 = 32'sd0;

  assign sel_1350 = 32'sd0;

  assign sel_1351 = 32'sd0;

  assign sel_1352 = 32'sd0;

  assign sel_1353 = 32'sd0;

  assign sel_1354 = 32'sd0;

  assign s_248 = 32'sd3;

  assign sel_1_431 = (s_20 == 1'b0 ? sel_1354 :
              s_248);

  assign sel_1355 = 32'sd0;

  assign sel_1_432 = (s_21 == 1'b0 ? sel_1_431 :
              sel_1355);

  assign sel_1356 = 32'sd0;

  assign sel_1357 = 32'sd0;

  assign sel_1358 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1341, sel_1342, sel_1343, sel_1344, sel_1345, sel_1346,
       sel_1347, sel_1348, sel_1349, sel_1350, sel_1351, sel_1352, sel_1353,
       sel_1356, sel_1357, sel_1358, sel_1_432) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4228_sel_1 = sel_1357;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4228_sel_1 = sel_1356;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4228_sel_1 = sel_1_432;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4228_sel_1 = sel_1353;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4228_sel_1 = sel_1352;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4228_sel_1 = sel_1351;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4228_sel_1 = sel_1350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4228_sel_1 = sel_1349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4228_sel_1 = sel_1348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4228_sel_1 = sel_1347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4228_sel_1 = sel_1346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4228_sel_1 = sel_1345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4228_sel_1 = sel_1344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4228_sel_1 = sel_1343;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4228_sel_1 = sel_1342;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4228_sel_1 = sel_1341;
        end
      default :
        begin
          p4228_sel_1 = sel_1358;
        end
    endcase
    sel_1_433 = p4228_sel_1;
  end

  assign tmp_338 = functionOutput_17[sel_1_433];

  always @(posedge clk)
    begin : rd_266_process
      if (rst == 1'b1) begin
        s_249 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_249 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_253_process
      if (rst == 1'b1) begin
        tmp_339 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_339 <= tmp_338;
        end
      end
    end

  assign sel_1_434 = (s_247 == 1'b0 ? sel_1_430 :
              tmp_339);

  assign sel_1359 = 32'sd0;

  assign sel_1360 = 32'sd0;

  assign sel_1361 = 32'sd0;

  assign sel_1362 = 32'sd0;

  assign sel_1363 = 32'sd0;

  assign sel_1364 = 32'sd0;

  assign sel_1365 = 32'sd0;

  assign sel_1366 = 32'sd0;

  assign sel_1367 = 32'sd0;

  assign sel_1368 = 32'sd0;

  assign sel_1369 = 32'sd0;

  assign sel_1370 = 32'sd0;

  assign sel_1371 = 32'sd0;

  assign sel_1372 = 32'sd0;

  assign s_250 = 32'sd3;

  assign sel_1_435 = (s_21 == 1'b0 ? sel_1372 :
              s_250);

  assign sel_1373 = 32'sd0;

  assign sel_1374 = 32'sd0;

  assign sel_1375 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1359, sel_1360, sel_1361, sel_1362, sel_1363, sel_1364,
       sel_1365, sel_1366, sel_1367, sel_1368, sel_1369, sel_1370, sel_1371,
       sel_1373, sel_1374, sel_1375, sel_1_435) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4988_sel_1 = sel_1374;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4988_sel_1 = sel_1373;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4988_sel_1 = sel_1_435;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4988_sel_1 = sel_1371;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4988_sel_1 = sel_1370;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4988_sel_1 = sel_1369;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4988_sel_1 = sel_1368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4988_sel_1 = sel_1367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4988_sel_1 = sel_1366;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4988_sel_1 = sel_1365;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4988_sel_1 = sel_1364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4988_sel_1 = sel_1363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4988_sel_1 = sel_1362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4988_sel_1 = sel_1361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4988_sel_1 = sel_1360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4988_sel_1 = sel_1359;
        end
      default :
        begin
          p4988_sel_1 = sel_1375;
        end
    endcase
    sel_1_436 = p4988_sel_1;
  end

  assign tmp_340 = functionOutput_18[sel_1_436];

  always @(posedge clk)
    begin : rd_263_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_58 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_58 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1376 = 32'sd0;

  assign sel_1377 = 32'sd0;

  assign sel_1378 = 32'sd0;

  assign sel_1379 = 32'sd0;

  assign sel_1380 = 32'sd0;

  assign sel_1381 = 32'sd0;

  assign sel_1382 = 32'sd0;

  assign sel_1383 = 32'sd0;

  assign sel_1384 = 32'sd0;

  assign sel_1385 = 32'sd0;

  assign sel_1386 = 32'sd0;

  assign sel_1387 = 32'sd0;

  assign sel_1388 = 32'sd0;

  always @(posedge clk)
    begin : rd_264_process
      if (rst == 1'b1) begin
        s_251 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_251 <= s_12;
        end
      end
    end

  assign sel_1389 = 32'sd0;

  assign sel_1390 = 32'sd0;

  assign sel_1391 = 32'sd0;

  assign s_252 = 32'sd3;

  assign sel_1_437 = (tmp_4 == 1'b0 ? sel_1391 :
              s_252);

  assign sel_1392 = 32'sd0;

  assign sel_1_438 = (tmp_6 == 1'b0 ? sel_1_437 :
              sel_1392);

  assign sel_1393 = 32'sd0;

  assign sel_1_439 = (tmp_8 == 1'b0 ? sel_1_438 :
              sel_1393);

  assign sel_1394 = 32'sd0;

  assign sel_1_440 = (tmp_10 == 1'b0 ? sel_1_439 :
              sel_1394);

  assign sel_1395 = 32'sd0;

  assign sel_1_441 = (tmp_12 == 1'b0 ? sel_1_440 :
              sel_1395);

  assign sel_1396 = 32'sd0;

  assign sel_1_442 = (tmp_14 == 1'b0 ? sel_1_441 :
              sel_1396);

  assign sel_1397 = 32'sd0;

  assign sel_1_443 = (tmp_16 == 1'b0 ? sel_1_442 :
              sel_1397);

  assign sel_1398 = 32'sd0;

  assign sel_1_444 = (tmp_18 == 1'b0 ? sel_1_443 :
              sel_1398);

  assign sel_1_445 = (s_10 == 1'b0 ? sel_1390 :
              sel_1_444);

  assign sel_1_446 = (s_11 == 1'b0 ? sel_1389 :
              sel_1_445);

  always @(posedge clk)
    begin : rd_265_process
      if (rst == 1'b1) begin
        sel_1_447 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_447 <= sel_1_446;
        end
      end
    end

  assign sel_1399 = 32'sd0;

  assign sel_1400 = 32'sd0;

  assign sel_1_448 = (s_251 == 1'b0 ? sel_1_447 :
              sel_1400);

  assign sel_1401 = 32'sd0;

  always @(posedge clk)
    begin : rd_277_process
      if (rst == 1'b1) begin
        tmp_341 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_341 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_278_process
      if (rst == 1'b1) begin
        for(rd_278_t_1 = 32'sd0; rd_278_t_1 <= 32'sd11; rd_278_t_1 = rd_278_t_1 + 32'sd1) begin
          rd_278_reg[rd_278_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_278_t_0_1 = 32'sd0; rd_278_t_0_1 <= 32'sd11; rd_278_t_0_1 = rd_278_t_0_1 + 32'sd1) begin
            rd_278_reg[rd_278_t_0_1] <= rd_278_reg_next[rd_278_t_0_1];
          end
        end
      end
    end
  genvar t_0_031;
  generate
    for(t_0_031 = 32'sd0; t_0_031 <= 32'sd11; t_0_031 = t_0_031 + 32'sd1) begin:rd_278_reg_next_gen
      assign functionOutput_30[t_0_031] = rd_278_reg[t_0_031];
      assign rd_278_reg_next[t_0_031] = functionOutput_19[t_0_031];
    end
  endgenerate

  assign sel_1402 = 32'sd0;

  always @(is_SPI_MNGR_58, sel_1376, sel_1377, sel_1378, sel_1379, sel_1380, sel_1381,
       sel_1382, sel_1383, sel_1384, sel_1385, sel_1386, sel_1387, sel_1388,
       sel_1399, sel_1401, sel_1402, sel_1_448) begin
    case ( is_SPI_MNGR_58)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2480_sel_1 = sel_1401;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2480_sel_1 = sel_1_448;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2480_sel_1 = sel_1399;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2480_sel_1 = sel_1388;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2480_sel_1 = sel_1387;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2480_sel_1 = sel_1386;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2480_sel_1 = sel_1385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2480_sel_1 = sel_1384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2480_sel_1 = sel_1383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2480_sel_1 = sel_1382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2480_sel_1 = sel_1381;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2480_sel_1 = sel_1380;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2480_sel_1 = sel_1379;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2480_sel_1 = sel_1378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2480_sel_1 = sel_1377;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2480_sel_1 = sel_1376;
        end
      default :
        begin
          p2480_sel_1 = sel_1402;
        end
    endcase
    sel_1_449 = p2480_sel_1;
  end

  assign tmp_342 = functionOutput_30[sel_1_449];

  assign sel_1403 = 32'sd0;

  assign sel_1404 = 32'sd0;

  assign sel_1405 = 32'sd0;

  assign sel_1406 = 32'sd0;

  assign sel_1407 = 32'sd0;

  assign sel_1408 = 32'sd0;

  assign sel_1409 = 32'sd0;

  assign sel_1410 = 32'sd0;

  assign sel_1411 = 32'sd0;

  assign sel_1412 = 32'sd0;

  assign sel_1413 = 32'sd0;

  assign sel_1414 = 32'sd0;

  assign sel_1415 = 32'sd0;

  assign sel_1416 = 32'sd0;

  assign sel_1417 = 32'sd0;

  assign sel_1418 = 32'sd0;

  assign sel_1419 = 32'sd0;

  assign s_253 = 32'sd3;

  assign sel_1_450 = (tmp_6 == 1'b0 ? sel_1419 :
              s_253);

  assign sel_1420 = 32'sd0;

  assign sel_1_451 = (tmp_8 == 1'b0 ? sel_1_450 :
              sel_1420);

  assign sel_1421 = 32'sd0;

  assign sel_1_452 = (tmp_10 == 1'b0 ? sel_1_451 :
              sel_1421);

  assign sel_1422 = 32'sd0;

  assign sel_1_453 = (tmp_12 == 1'b0 ? sel_1_452 :
              sel_1422);

  assign sel_1423 = 32'sd0;

  assign sel_1_454 = (tmp_14 == 1'b0 ? sel_1_453 :
              sel_1423);

  assign sel_1424 = 32'sd0;

  assign sel_1_455 = (tmp_16 == 1'b0 ? sel_1_454 :
              sel_1424);

  assign sel_1425 = 32'sd0;

  assign sel_1_456 = (tmp_18 == 1'b0 ? sel_1_455 :
              sel_1425);

  assign sel_1_457 = (s_10 == 1'b0 ? sel_1418 :
              sel_1_456);

  assign sel_1_458 = (s_11 == 1'b0 ? sel_1417 :
              sel_1_457);

  assign sel_1426 = 32'sd0;

  assign sel_1_459 = (s_12 == 1'b0 ? sel_1_458 :
              sel_1426);

  assign sel_1427 = 32'sd0;

  assign sel_1428 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1403, sel_1404, sel_1405, sel_1406, sel_1407, sel_1408,
       sel_1409, sel_1410, sel_1411, sel_1412, sel_1413, sel_1414, sel_1415,
       sel_1416, sel_1427, sel_1428, sel_1_459) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2651_sel_1 = sel_1427;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2651_sel_1 = sel_1_459;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2651_sel_1 = sel_1416;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2651_sel_1 = sel_1415;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2651_sel_1 = sel_1414;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2651_sel_1 = sel_1413;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2651_sel_1 = sel_1412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2651_sel_1 = sel_1411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2651_sel_1 = sel_1410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2651_sel_1 = sel_1409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2651_sel_1 = sel_1408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2651_sel_1 = sel_1407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2651_sel_1 = sel_1406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2651_sel_1 = sel_1405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2651_sel_1 = sel_1404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2651_sel_1 = sel_1403;
        end
      default :
        begin
          p2651_sel_1 = sel_1428;
        end
    endcase
    sel_1_460 = p2651_sel_1;
  end

  assign tmp_343 = functionOutput_21[sel_1_460];

  always @(posedge clk)
    begin : rd_276_process
      if (rst == 1'b1) begin
        tmp_344 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_344 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_262_process
      if (rst == 1'b1) begin
        tmp_345 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_345 <= tmp_343;
        end
      end
    end

  assign sel_1_461 = (tmp_341 == 1'b0 ? tmp_342 :
              tmp_345);

  assign sel_1429 = 32'sd0;

  assign sel_1430 = 32'sd0;

  assign sel_1431 = 32'sd0;

  assign sel_1432 = 32'sd0;

  assign sel_1433 = 32'sd0;

  assign sel_1434 = 32'sd0;

  assign sel_1435 = 32'sd0;

  assign sel_1436 = 32'sd0;

  assign sel_1437 = 32'sd0;

  assign sel_1438 = 32'sd0;

  assign sel_1439 = 32'sd0;

  assign sel_1440 = 32'sd0;

  assign sel_1441 = 32'sd0;

  assign sel_1442 = 32'sd0;

  assign sel_1443 = 32'sd0;

  assign sel_1444 = 32'sd0;

  assign sel_1445 = 32'sd0;

  assign s_254 = 32'sd3;

  assign sel_1_462 = (tmp_8 == 1'b0 ? sel_1445 :
              s_254);

  assign sel_1446 = 32'sd0;

  assign sel_1_463 = (tmp_10 == 1'b0 ? sel_1_462 :
              sel_1446);

  assign sel_1447 = 32'sd0;

  assign sel_1_464 = (tmp_12 == 1'b0 ? sel_1_463 :
              sel_1447);

  assign sel_1448 = 32'sd0;

  assign sel_1_465 = (tmp_14 == 1'b0 ? sel_1_464 :
              sel_1448);

  assign sel_1449 = 32'sd0;

  assign sel_1_466 = (tmp_16 == 1'b0 ? sel_1_465 :
              sel_1449);

  assign sel_1450 = 32'sd0;

  assign sel_1_467 = (tmp_18 == 1'b0 ? sel_1_466 :
              sel_1450);

  assign sel_1_468 = (s_10 == 1'b0 ? sel_1444 :
              sel_1_467);

  assign sel_1_469 = (s_11 == 1'b0 ? sel_1443 :
              sel_1_468);

  assign sel_1451 = 32'sd0;

  assign sel_1_470 = (s_12 == 1'b0 ? sel_1_469 :
              sel_1451);

  assign sel_1452 = 32'sd0;

  assign sel_1453 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1429, sel_1430, sel_1431, sel_1432, sel_1433, sel_1434,
       sel_1435, sel_1436, sel_1437, sel_1438, sel_1439, sel_1440, sel_1441,
       sel_1442, sel_1452, sel_1453, sel_1_470) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2974_sel_1 = sel_1452;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2974_sel_1 = sel_1_470;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2974_sel_1 = sel_1442;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2974_sel_1 = sel_1441;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2974_sel_1 = sel_1440;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2974_sel_1 = sel_1439;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2974_sel_1 = sel_1438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2974_sel_1 = sel_1437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2974_sel_1 = sel_1436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2974_sel_1 = sel_1435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2974_sel_1 = sel_1434;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2974_sel_1 = sel_1433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2974_sel_1 = sel_1432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2974_sel_1 = sel_1431;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2974_sel_1 = sel_1430;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2974_sel_1 = sel_1429;
        end
      default :
        begin
          p2974_sel_1 = sel_1453;
        end
    endcase
    sel_1_471 = p2974_sel_1;
  end

  assign tmp_346 = functionOutput_22[sel_1_471];

  always @(posedge clk)
    begin : rd_275_process
      if (rst == 1'b1) begin
        tmp_347 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_347 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_261_process
      if (rst == 1'b1) begin
        tmp_348 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_348 <= tmp_346;
        end
      end
    end

  assign sel_1_472 = (tmp_344 == 1'b0 ? sel_1_461 :
              tmp_348);

  assign sel_1454 = 32'sd0;

  assign sel_1455 = 32'sd0;

  assign sel_1456 = 32'sd0;

  assign sel_1457 = 32'sd0;

  assign sel_1458 = 32'sd0;

  assign sel_1459 = 32'sd0;

  assign sel_1460 = 32'sd0;

  assign sel_1461 = 32'sd0;

  assign sel_1462 = 32'sd0;

  assign sel_1463 = 32'sd0;

  assign sel_1464 = 32'sd0;

  assign sel_1465 = 32'sd0;

  assign sel_1466 = 32'sd0;

  assign sel_1467 = 32'sd0;

  assign sel_1468 = 32'sd0;

  assign sel_1469 = 32'sd0;

  assign sel_1470 = 32'sd0;

  assign s_255 = 32'sd3;

  assign sel_1_473 = (tmp_10 == 1'b0 ? sel_1470 :
              s_255);

  assign sel_1471 = 32'sd0;

  assign sel_1_474 = (tmp_12 == 1'b0 ? sel_1_473 :
              sel_1471);

  assign sel_1472 = 32'sd0;

  assign sel_1_475 = (tmp_14 == 1'b0 ? sel_1_474 :
              sel_1472);

  assign sel_1473 = 32'sd0;

  assign sel_1_476 = (tmp_16 == 1'b0 ? sel_1_475 :
              sel_1473);

  assign sel_1474 = 32'sd0;

  assign sel_1_477 = (tmp_18 == 1'b0 ? sel_1_476 :
              sel_1474);

  assign sel_1_478 = (s_10 == 1'b0 ? sel_1469 :
              sel_1_477);

  assign sel_1_479 = (s_11 == 1'b0 ? sel_1468 :
              sel_1_478);

  assign sel_1475 = 32'sd0;

  assign sel_1_480 = (s_12 == 1'b0 ? sel_1_479 :
              sel_1475);

  assign sel_1476 = 32'sd0;

  assign sel_1477 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1454, sel_1455, sel_1456, sel_1457, sel_1458, sel_1459,
       sel_1460, sel_1461, sel_1462, sel_1463, sel_1464, sel_1465, sel_1466,
       sel_1467, sel_1476, sel_1477, sel_1_480) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3145_sel_1 = sel_1476;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3145_sel_1 = sel_1_480;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3145_sel_1 = sel_1467;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3145_sel_1 = sel_1466;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3145_sel_1 = sel_1465;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3145_sel_1 = sel_1464;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3145_sel_1 = sel_1463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3145_sel_1 = sel_1462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3145_sel_1 = sel_1461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3145_sel_1 = sel_1460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3145_sel_1 = sel_1459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3145_sel_1 = sel_1458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3145_sel_1 = sel_1457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3145_sel_1 = sel_1456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3145_sel_1 = sel_1455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3145_sel_1 = sel_1454;
        end
      default :
        begin
          p3145_sel_1 = sel_1477;
        end
    endcase
    sel_1_481 = p3145_sel_1;
  end

  assign tmp_349 = functionOutput_23[sel_1_481];

  always @(posedge clk)
    begin : rd_274_process
      if (rst == 1'b1) begin
        tmp_350 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_350 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_260_process
      if (rst == 1'b1) begin
        tmp_351 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_351 <= tmp_349;
        end
      end
    end

  assign sel_1_482 = (tmp_347 == 1'b0 ? sel_1_472 :
              tmp_351);

  assign sel_1478 = 32'sd0;

  assign sel_1479 = 32'sd0;

  assign sel_1480 = 32'sd0;

  assign sel_1481 = 32'sd0;

  assign sel_1482 = 32'sd0;

  assign sel_1483 = 32'sd0;

  assign sel_1484 = 32'sd0;

  assign sel_1485 = 32'sd0;

  assign sel_1486 = 32'sd0;

  assign sel_1487 = 32'sd0;

  assign sel_1488 = 32'sd0;

  assign sel_1489 = 32'sd0;

  assign sel_1490 = 32'sd0;

  assign sel_1491 = 32'sd0;

  assign sel_1492 = 32'sd0;

  assign sel_1493 = 32'sd0;

  assign sel_1494 = 32'sd0;

  assign s_256 = 32'sd3;

  assign sel_1_483 = (tmp_12 == 1'b0 ? sel_1494 :
              s_256);

  assign sel_1495 = 32'sd0;

  assign sel_1_484 = (tmp_14 == 1'b0 ? sel_1_483 :
              sel_1495);

  assign sel_1496 = 32'sd0;

  assign sel_1_485 = (tmp_16 == 1'b0 ? sel_1_484 :
              sel_1496);

  assign sel_1497 = 32'sd0;

  assign sel_1_486 = (tmp_18 == 1'b0 ? sel_1_485 :
              sel_1497);

  assign sel_1_487 = (s_10 == 1'b0 ? sel_1493 :
              sel_1_486);

  assign sel_1_488 = (s_11 == 1'b0 ? sel_1492 :
              sel_1_487);

  assign sel_1498 = 32'sd0;

  assign sel_1_489 = (s_12 == 1'b0 ? sel_1_488 :
              sel_1498);

  assign sel_1499 = 32'sd0;

  assign sel_1500 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1478, sel_1479, sel_1480, sel_1481, sel_1482, sel_1483,
       sel_1484, sel_1485, sel_1486, sel_1487, sel_1488, sel_1489, sel_1490,
       sel_1491, sel_1499, sel_1500, sel_1_489) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1834_sel_1 = sel_1499;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1834_sel_1 = sel_1_489;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1834_sel_1 = sel_1491;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1834_sel_1 = sel_1490;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1834_sel_1 = sel_1489;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1834_sel_1 = sel_1488;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1834_sel_1 = sel_1487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1834_sel_1 = sel_1486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1834_sel_1 = sel_1485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1834_sel_1 = sel_1484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1834_sel_1 = sel_1483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1834_sel_1 = sel_1482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1834_sel_1 = sel_1481;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1834_sel_1 = sel_1480;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1834_sel_1 = sel_1479;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1834_sel_1 = sel_1478;
        end
      default :
        begin
          p1834_sel_1 = sel_1500;
        end
    endcase
    sel_1_490 = p1834_sel_1;
  end

  assign tmp_352 = functionOutput_24[sel_1_490];

  always @(posedge clk)
    begin : rd_273_process
      if (rst == 1'b1) begin
        tmp_353 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_353 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_259_process
      if (rst == 1'b1) begin
        tmp_354 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_354 <= tmp_352;
        end
      end
    end

  assign sel_1_491 = (tmp_350 == 1'b0 ? sel_1_482 :
              tmp_354);

  assign sel_1501 = 32'sd0;

  assign sel_1502 = 32'sd0;

  assign sel_1503 = 32'sd0;

  assign sel_1504 = 32'sd0;

  assign sel_1505 = 32'sd0;

  assign sel_1506 = 32'sd0;

  assign sel_1507 = 32'sd0;

  assign sel_1508 = 32'sd0;

  assign sel_1509 = 32'sd0;

  assign sel_1510 = 32'sd0;

  assign sel_1511 = 32'sd0;

  assign sel_1512 = 32'sd0;

  assign sel_1513 = 32'sd0;

  assign sel_1514 = 32'sd0;

  assign sel_1515 = 32'sd0;

  assign sel_1516 = 32'sd0;

  assign sel_1517 = 32'sd0;

  assign s_257 = 32'sd3;

  assign sel_1_492 = (tmp_14 == 1'b0 ? sel_1517 :
              s_257);

  assign sel_1518 = 32'sd0;

  assign sel_1_493 = (tmp_16 == 1'b0 ? sel_1_492 :
              sel_1518);

  assign sel_1519 = 32'sd0;

  assign sel_1_494 = (tmp_18 == 1'b0 ? sel_1_493 :
              sel_1519);

  assign sel_1_495 = (s_10 == 1'b0 ? sel_1516 :
              sel_1_494);

  assign sel_1_496 = (s_11 == 1'b0 ? sel_1515 :
              sel_1_495);

  assign sel_1520 = 32'sd0;

  assign sel_1_497 = (s_12 == 1'b0 ? sel_1_496 :
              sel_1520);

  assign sel_1521 = 32'sd0;

  assign sel_1522 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1501, sel_1502, sel_1503, sel_1504, sel_1505, sel_1506,
       sel_1507, sel_1508, sel_1509, sel_1510, sel_1511, sel_1512, sel_1513,
       sel_1514, sel_1521, sel_1522, sel_1_497) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2917_sel_1 = sel_1521;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2917_sel_1 = sel_1_497;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2917_sel_1 = sel_1514;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2917_sel_1 = sel_1513;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2917_sel_1 = sel_1512;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2917_sel_1 = sel_1511;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2917_sel_1 = sel_1510;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2917_sel_1 = sel_1509;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2917_sel_1 = sel_1508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2917_sel_1 = sel_1507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2917_sel_1 = sel_1506;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2917_sel_1 = sel_1505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2917_sel_1 = sel_1504;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2917_sel_1 = sel_1503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2917_sel_1 = sel_1502;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2917_sel_1 = sel_1501;
        end
      default :
        begin
          p2917_sel_1 = sel_1522;
        end
    endcase
    sel_1_498 = p2917_sel_1;
  end

  assign tmp_355 = functionOutput_25[sel_1_498];

  always @(posedge clk)
    begin : rd_272_process
      if (rst == 1'b1) begin
        tmp_356 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_356 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_258_process
      if (rst == 1'b1) begin
        tmp_357 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_357 <= tmp_355;
        end
      end
    end

  assign sel_1_499 = (tmp_353 == 1'b0 ? sel_1_491 :
              tmp_357);

  assign sel_1523 = 32'sd0;

  assign sel_1524 = 32'sd0;

  assign sel_1525 = 32'sd0;

  assign sel_1526 = 32'sd0;

  assign sel_1527 = 32'sd0;

  assign sel_1528 = 32'sd0;

  assign sel_1529 = 32'sd0;

  assign sel_1530 = 32'sd0;

  assign sel_1531 = 32'sd0;

  assign sel_1532 = 32'sd0;

  assign sel_1533 = 32'sd0;

  assign sel_1534 = 32'sd0;

  assign sel_1535 = 32'sd0;

  assign sel_1536 = 32'sd0;

  assign sel_1537 = 32'sd0;

  assign sel_1538 = 32'sd0;

  assign sel_1539 = 32'sd0;

  assign s_258 = 32'sd3;

  assign sel_1_500 = (tmp_16 == 1'b0 ? sel_1539 :
              s_258);

  assign sel_1540 = 32'sd0;

  assign sel_1_501 = (tmp_18 == 1'b0 ? sel_1_500 :
              sel_1540);

  assign sel_1_502 = (s_10 == 1'b0 ? sel_1538 :
              sel_1_501);

  assign sel_1_503 = (s_11 == 1'b0 ? sel_1537 :
              sel_1_502);

  assign sel_1541 = 32'sd0;

  assign sel_1_504 = (s_12 == 1'b0 ? sel_1_503 :
              sel_1541);

  assign sel_1542 = 32'sd0;

  assign sel_1543 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1523, sel_1524, sel_1525, sel_1526, sel_1527, sel_1528,
       sel_1529, sel_1530, sel_1531, sel_1532, sel_1533, sel_1534, sel_1535,
       sel_1536, sel_1542, sel_1543, sel_1_504) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2195_sel_1 = sel_1542;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2195_sel_1 = sel_1_504;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2195_sel_1 = sel_1536;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2195_sel_1 = sel_1535;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2195_sel_1 = sel_1534;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2195_sel_1 = sel_1533;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2195_sel_1 = sel_1532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2195_sel_1 = sel_1531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2195_sel_1 = sel_1530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2195_sel_1 = sel_1529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2195_sel_1 = sel_1528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2195_sel_1 = sel_1527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2195_sel_1 = sel_1526;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2195_sel_1 = sel_1525;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2195_sel_1 = sel_1524;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2195_sel_1 = sel_1523;
        end
      default :
        begin
          p2195_sel_1 = sel_1543;
        end
    endcase
    sel_1_505 = p2195_sel_1;
  end

  assign tmp_358 = functionOutput_26[sel_1_505];

  always @(posedge clk)
    begin : rd_271_process
      if (rst == 1'b1) begin
        tmp_359 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_359 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_257_process
      if (rst == 1'b1) begin
        tmp_360 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_360 <= tmp_358;
        end
      end
    end

  assign sel_1_506 = (tmp_356 == 1'b0 ? sel_1_499 :
              tmp_360);

  assign sel_1544 = 32'sd0;

  assign sel_1545 = 32'sd0;

  assign sel_1546 = 32'sd0;

  assign sel_1547 = 32'sd0;

  assign sel_1548 = 32'sd0;

  assign sel_1549 = 32'sd0;

  assign sel_1550 = 32'sd0;

  assign sel_1551 = 32'sd0;

  assign sel_1552 = 32'sd0;

  assign sel_1553 = 32'sd0;

  assign sel_1554 = 32'sd0;

  assign sel_1555 = 32'sd0;

  assign sel_1556 = 32'sd0;

  assign sel_1557 = 32'sd0;

  assign sel_1558 = 32'sd0;

  assign sel_1559 = 32'sd0;

  assign sel_1560 = 32'sd0;

  assign s_259 = 32'sd3;

  assign sel_1_507 = (tmp_18 == 1'b0 ? sel_1560 :
              s_259);

  assign sel_1_508 = (s_10 == 1'b0 ? sel_1559 :
              sel_1_507);

  assign sel_1_509 = (s_11 == 1'b0 ? sel_1558 :
              sel_1_508);

  assign sel_1561 = 32'sd0;

  assign sel_1_510 = (s_12 == 1'b0 ? sel_1_509 :
              sel_1561);

  assign sel_1562 = 32'sd0;

  assign sel_1563 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1544, sel_1545, sel_1546, sel_1547, sel_1548, sel_1549,
       sel_1550, sel_1551, sel_1552, sel_1553, sel_1554, sel_1555, sel_1556,
       sel_1557, sel_1562, sel_1563, sel_1_510) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2955_sel_1 = sel_1562;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2955_sel_1 = sel_1_510;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2955_sel_1 = sel_1557;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2955_sel_1 = sel_1556;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2955_sel_1 = sel_1555;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2955_sel_1 = sel_1554;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2955_sel_1 = sel_1553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2955_sel_1 = sel_1552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2955_sel_1 = sel_1551;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2955_sel_1 = sel_1550;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2955_sel_1 = sel_1549;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2955_sel_1 = sel_1548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2955_sel_1 = sel_1547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2955_sel_1 = sel_1546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2955_sel_1 = sel_1545;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2955_sel_1 = sel_1544;
        end
      default :
        begin
          p2955_sel_1 = sel_1563;
        end
    endcase
    sel_1_511 = p2955_sel_1;
  end

  assign tmp_361 = functionOutput_27[sel_1_511];

  assign sel_1564 = 8'd0;

  always @(posedge clk)
    begin : rd_252_process
      if (rst == 1'b1) begin
        tmp_362 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_362 <= tmp_340;
        end
      end
    end

  assign sel_1_512 = (s_249 == 1'b0 ? sel_1_434 :
              tmp_362);

  always @(posedge clk)
    begin : rd_256_process
      if (rst == 1'b1) begin
        tmp_363 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_363 <= tmp_361;
        end
      end
    end

  assign sel_1_513 = (tmp_359 == 1'b0 ? sel_1_506 :
              tmp_363);

  assign sel_1565 = 8'd0;

  always @(posedge clk)
    begin : rd_279_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_59 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_59 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1566 = 1'b0;

  assign sel_1567 = 1'b0;

  assign sel_1568 = 1'b0;

  assign sel_1569 = 1'b0;

  assign sel_1570 = 1'b0;

  assign sel_1571 = 1'b0;

  assign sel_1572 = 1'b0;

  assign sel_1573 = 1'b0;

  assign sel_1574 = 1'b0;

  assign sel_1575 = 1'b0;

  assign sel_1576 = 1'b0;

  assign sel_1577 = 1'b0;

  assign sel_1578 = 1'b0;

  assign sel_1579 = 1'b0;

  assign s_260 = 1'b1;

  assign sel_2_68 = (s_14 == 1'b0 ? sel_1579 :
              s_260);

  assign s_261 = 1'b1;

  assign sel_2_69 = (s_15 == 1'b0 ? sel_2_68 :
              s_261);

  assign s_262 = 1'b1;

  assign sel_2_70 = (s_16 == 1'b0 ? sel_2_69 :
              s_262);

  assign s_263 = 1'b1;

  assign sel_2_71 = (s_17 == 1'b0 ? sel_2_70 :
              s_263);

  assign s_264 = 1'b1;

  assign sel_2_72 = (s_18 == 1'b0 ? sel_2_71 :
              s_264);

  assign s_265 = 1'b1;

  assign sel_2_73 = (s_19 == 1'b0 ? sel_2_72 :
              s_265);

  assign s_266 = 1'b1;

  assign sel_2_74 = (s_20 == 1'b0 ? sel_2_73 :
              s_266);

  assign s_267 = 1'b1;

  assign sel_2_75 = (s_21 == 1'b0 ? sel_2_74 :
              s_267);

  always @(posedge clk)
    begin : rd_281_process
      if (rst == 1'b1) begin
        s_268 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_268 <= s_12;
        end
      end
    end

  assign sel_1580 = 1'b0;

  assign sel_1581 = 1'b0;

  assign sel_1582 = 1'b0;

  assign s_269 = 1'b1;

  assign sel_2_76 = (tmp_4 == 1'b0 ? sel_1582 :
              s_269);

  assign s_270 = 1'b1;

  assign sel_2_77 = (tmp_6 == 1'b0 ? sel_2_76 :
              s_270);

  assign s_271 = 1'b1;

  assign sel_2_78 = (tmp_8 == 1'b0 ? sel_2_77 :
              s_271);

  assign s_272 = 1'b1;

  assign sel_2_79 = (tmp_10 == 1'b0 ? sel_2_78 :
              s_272);

  assign s_273 = 1'b1;

  assign sel_2_80 = (tmp_12 == 1'b0 ? sel_2_79 :
              s_273);

  assign s_274 = 1'b1;

  assign sel_2_81 = (tmp_14 == 1'b0 ? sel_2_80 :
              s_274);

  assign s_275 = 1'b1;

  assign sel_2_82 = (tmp_16 == 1'b0 ? sel_2_81 :
              s_275);

  assign s_276 = 1'b1;

  assign sel_2_83 = (tmp_18 == 1'b0 ? sel_2_82 :
              s_276);

  assign sel_2_84 = (s_10 == 1'b0 ? sel_1581 :
              sel_2_83);

  assign sel_2_85 = (s_11 == 1'b0 ? sel_1580 :
              sel_2_84);

  always @(posedge clk)
    begin : rd_282_process
      if (rst == 1'b1) begin
        sel_2_86 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_86 <= sel_2_85;
        end
      end
    end

  always @(posedge clk)
    begin : rd_280_process
      if (rst == 1'b1) begin
        sel_2_87 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_87 <= sel_2_75;
        end
      end
    end

  assign sel_1583 = 1'b0;

  assign sel_2_88 = (s_268 == 1'b0 ? sel_2_86 :
              sel_1583);

  assign sel_1584 = 1'b0;

  always @(posedge clk)
    begin : rd_283_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_60 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_60 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1585 = 8'd0;

  assign sel_1586 = 8'd0;

  assign sel_1587 = 8'd0;

  assign sel_1588 = 8'd0;

  assign sel_1589 = 8'd0;

  assign sel_1590 = 8'd0;

  assign sel_1591 = 8'd0;

  assign sel_1592 = 8'd0;

  assign sel_1593 = 8'd0;

  assign sel_1594 = 8'd0;

  assign sel_1595 = 8'd0;

  assign sel_1596 = 8'd0;

  always @(posedge clk)
    begin : rd_301_process
      if (rst == 1'b1) begin
        s_277 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_277 <= s_18;
        end
      end
    end

  assign sel_1597 = 32'sd0;

  assign sel_1598 = 32'sd0;

  assign sel_1599 = 32'sd0;

  assign sel_1600 = 32'sd0;

  assign sel_1601 = 32'sd0;

  assign sel_1602 = 32'sd0;

  assign sel_1603 = 32'sd0;

  assign sel_1604 = 32'sd0;

  assign sel_1605 = 32'sd0;

  assign sel_1606 = 32'sd0;

  assign sel_1607 = 32'sd0;

  assign sel_1608 = 32'sd0;

  assign sel_1609 = 32'sd0;

  assign sel_1610 = 32'sd0;

  assign s_278 = 32'sd4;

  assign sel_1_514 = (s_14 == 1'b0 ? sel_1610 :
              s_278);

  assign sel_1611 = 32'sd0;

  assign sel_1_515 = (s_15 == 1'b0 ? sel_1_514 :
              sel_1611);

  assign sel_1612 = 32'sd0;

  assign sel_1_516 = (s_16 == 1'b0 ? sel_1_515 :
              sel_1612);

  assign sel_1613 = 32'sd0;

  assign sel_1_517 = (s_17 == 1'b0 ? sel_1_516 :
              sel_1613);

  assign sel_1614 = 32'sd0;

  assign sel_1_518 = (s_18 == 1'b0 ? sel_1_517 :
              sel_1614);

  assign sel_1615 = 32'sd0;

  assign sel_1_519 = (s_19 == 1'b0 ? sel_1_518 :
              sel_1615);

  assign sel_1616 = 32'sd0;

  assign sel_1_520 = (s_20 == 1'b0 ? sel_1_519 :
              sel_1616);

  assign sel_1617 = 32'sd0;

  assign sel_1_521 = (s_21 == 1'b0 ? sel_1_520 :
              sel_1617);

  assign sel_1618 = 32'sd0;

  assign sel_1619 = 32'sd0;

  assign sel_1620 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1597, sel_1598, sel_1599, sel_1600, sel_1601, sel_1602,
       sel_1603, sel_1604, sel_1605, sel_1606, sel_1607, sel_1608, sel_1609,
       sel_1618, sel_1619, sel_1620, sel_1_521) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4418_sel_1 = sel_1619;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4418_sel_1 = sel_1618;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4418_sel_1 = sel_1_521;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4418_sel_1 = sel_1609;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4418_sel_1 = sel_1608;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4418_sel_1 = sel_1607;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4418_sel_1 = sel_1606;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4418_sel_1 = sel_1605;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4418_sel_1 = sel_1604;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4418_sel_1 = sel_1603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4418_sel_1 = sel_1602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4418_sel_1 = sel_1601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4418_sel_1 = sel_1600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4418_sel_1 = sel_1599;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4418_sel_1 = sel_1598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4418_sel_1 = sel_1597;
        end
      default :
        begin
          p4418_sel_1 = sel_1620;
        end
    endcase
    sel_1_522 = p4418_sel_1;
  end

  assign tmp_364 = functionOutput[sel_1_522];

  assign sel_1621 = 32'sd0;

  assign sel_1622 = 32'sd0;

  assign sel_1623 = 32'sd0;

  assign sel_1624 = 32'sd0;

  assign sel_1625 = 32'sd0;

  assign sel_1626 = 32'sd0;

  assign sel_1627 = 32'sd0;

  assign sel_1628 = 32'sd0;

  assign sel_1629 = 32'sd0;

  assign sel_1630 = 32'sd0;

  assign sel_1631 = 32'sd0;

  assign sel_1632 = 32'sd0;

  assign sel_1633 = 32'sd0;

  assign sel_1634 = 32'sd0;

  assign s_279 = 32'sd4;

  assign sel_1_523 = (s_15 == 1'b0 ? sel_1634 :
              s_279);

  assign sel_1635 = 32'sd0;

  assign sel_1_524 = (s_16 == 1'b0 ? sel_1_523 :
              sel_1635);

  assign sel_1636 = 32'sd0;

  assign sel_1_525 = (s_17 == 1'b0 ? sel_1_524 :
              sel_1636);

  assign sel_1637 = 32'sd0;

  assign sel_1_526 = (s_18 == 1'b0 ? sel_1_525 :
              sel_1637);

  assign sel_1638 = 32'sd0;

  assign sel_1_527 = (s_19 == 1'b0 ? sel_1_526 :
              sel_1638);

  assign sel_1639 = 32'sd0;

  assign sel_1_528 = (s_20 == 1'b0 ? sel_1_527 :
              sel_1639);

  assign sel_1640 = 32'sd0;

  assign sel_1_529 = (s_21 == 1'b0 ? sel_1_528 :
              sel_1640);

  assign sel_1641 = 32'sd0;

  assign sel_1642 = 32'sd0;

  assign sel_1643 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1621, sel_1622, sel_1623, sel_1624, sel_1625, sel_1626,
       sel_1627, sel_1628, sel_1629, sel_1630, sel_1631, sel_1632, sel_1633,
       sel_1641, sel_1642, sel_1643, sel_1_529) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4247_sel_1 = sel_1642;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4247_sel_1 = sel_1641;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4247_sel_1 = sel_1_529;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4247_sel_1 = sel_1633;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4247_sel_1 = sel_1632;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4247_sel_1 = sel_1631;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4247_sel_1 = sel_1630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4247_sel_1 = sel_1629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4247_sel_1 = sel_1628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4247_sel_1 = sel_1627;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4247_sel_1 = sel_1626;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4247_sel_1 = sel_1625;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4247_sel_1 = sel_1624;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4247_sel_1 = sel_1623;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4247_sel_1 = sel_1622;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4247_sel_1 = sel_1621;
        end
      default :
        begin
          p4247_sel_1 = sel_1643;
        end
    endcase
    sel_1_530 = p4247_sel_1;
  end

  assign tmp_365 = functionOutput_12[sel_1_530];

  assign sel_1_531 = (s_15 == 1'b0 ? tmp_364 :
              tmp_365);

  assign sel_1644 = 32'sd0;

  assign sel_1645 = 32'sd0;

  assign sel_1646 = 32'sd0;

  assign sel_1647 = 32'sd0;

  assign sel_1648 = 32'sd0;

  assign sel_1649 = 32'sd0;

  assign sel_1650 = 32'sd0;

  assign sel_1651 = 32'sd0;

  assign sel_1652 = 32'sd0;

  assign sel_1653 = 32'sd0;

  assign sel_1654 = 32'sd0;

  assign sel_1655 = 32'sd0;

  assign sel_1656 = 32'sd0;

  assign sel_1657 = 32'sd0;

  assign s_280 = 32'sd4;

  assign sel_1_532 = (s_16 == 1'b0 ? sel_1657 :
              s_280);

  assign sel_1658 = 32'sd0;

  assign sel_1_533 = (s_17 == 1'b0 ? sel_1_532 :
              sel_1658);

  assign sel_1659 = 32'sd0;

  assign sel_1_534 = (s_18 == 1'b0 ? sel_1_533 :
              sel_1659);

  assign sel_1660 = 32'sd0;

  assign sel_1_535 = (s_19 == 1'b0 ? sel_1_534 :
              sel_1660);

  assign sel_1661 = 32'sd0;

  assign sel_1_536 = (s_20 == 1'b0 ? sel_1_535 :
              sel_1661);

  assign sel_1662 = 32'sd0;

  assign sel_1_537 = (s_21 == 1'b0 ? sel_1_536 :
              sel_1662);

  assign sel_1663 = 32'sd0;

  assign sel_1664 = 32'sd0;

  assign sel_1665 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1644, sel_1645, sel_1646, sel_1647, sel_1648, sel_1649,
       sel_1650, sel_1651, sel_1652, sel_1653, sel_1654, sel_1655, sel_1656,
       sel_1663, sel_1664, sel_1665, sel_1_537) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4095_sel_1 = sel_1664;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4095_sel_1 = sel_1663;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4095_sel_1 = sel_1_537;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4095_sel_1 = sel_1656;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4095_sel_1 = sel_1655;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4095_sel_1 = sel_1654;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4095_sel_1 = sel_1653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4095_sel_1 = sel_1652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4095_sel_1 = sel_1651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4095_sel_1 = sel_1650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4095_sel_1 = sel_1649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4095_sel_1 = sel_1648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4095_sel_1 = sel_1647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4095_sel_1 = sel_1646;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4095_sel_1 = sel_1645;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4095_sel_1 = sel_1644;
        end
      default :
        begin
          p4095_sel_1 = sel_1665;
        end
    endcase
    sel_1_538 = p4095_sel_1;
  end

  assign tmp_366 = functionOutput_13[sel_1_538];

  assign sel_1_539 = (s_16 == 1'b0 ? sel_1_531 :
              tmp_366);

  assign sel_1666 = 32'sd0;

  assign sel_1667 = 32'sd0;

  assign sel_1668 = 32'sd0;

  assign sel_1669 = 32'sd0;

  assign sel_1670 = 32'sd0;

  assign sel_1671 = 32'sd0;

  assign sel_1672 = 32'sd0;

  assign sel_1673 = 32'sd0;

  assign sel_1674 = 32'sd0;

  assign sel_1675 = 32'sd0;

  assign sel_1676 = 32'sd0;

  assign sel_1677 = 32'sd0;

  assign sel_1678 = 32'sd0;

  assign sel_1679 = 32'sd0;

  assign s_281 = 32'sd4;

  assign sel_1_540 = (s_17 == 1'b0 ? sel_1679 :
              s_281);

  assign sel_1680 = 32'sd0;

  assign sel_1_541 = (s_18 == 1'b0 ? sel_1_540 :
              sel_1680);

  assign sel_1681 = 32'sd0;

  assign sel_1_542 = (s_19 == 1'b0 ? sel_1_541 :
              sel_1681);

  assign sel_1682 = 32'sd0;

  assign sel_1_543 = (s_20 == 1'b0 ? sel_1_542 :
              sel_1682);

  assign sel_1683 = 32'sd0;

  assign sel_1_544 = (s_21 == 1'b0 ? sel_1_543 :
              sel_1683);

  assign sel_1684 = 32'sd0;

  assign sel_1685 = 32'sd0;

  assign sel_1686 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1666, sel_1667, sel_1668, sel_1669, sel_1670, sel_1671,
       sel_1672, sel_1673, sel_1674, sel_1675, sel_1676, sel_1677, sel_1678,
       sel_1684, sel_1685, sel_1686, sel_1_544) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5083_sel_1 = sel_1685;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5083_sel_1 = sel_1684;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5083_sel_1 = sel_1_544;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5083_sel_1 = sel_1678;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5083_sel_1 = sel_1677;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5083_sel_1 = sel_1676;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5083_sel_1 = sel_1675;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5083_sel_1 = sel_1674;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5083_sel_1 = sel_1673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5083_sel_1 = sel_1672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5083_sel_1 = sel_1671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5083_sel_1 = sel_1670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5083_sel_1 = sel_1669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5083_sel_1 = sel_1668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5083_sel_1 = sel_1667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5083_sel_1 = sel_1666;
        end
      default :
        begin
          p5083_sel_1 = sel_1686;
        end
    endcase
    sel_1_545 = p5083_sel_1;
  end

  assign tmp_367 = functionOutput_14[sel_1_545];

  assign sel_1_546 = (s_17 == 1'b0 ? sel_1_539 :
              tmp_367);

  always @(posedge clk)
    begin : rd_302_process
      if (rst == 1'b1) begin
        sel_1_547 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_547 <= sel_1_546;
        end
      end
    end

  assign sel_1687 = 32'sd0;

  assign sel_1688 = 32'sd0;

  assign sel_1689 = 32'sd0;

  assign sel_1690 = 32'sd0;

  assign sel_1691 = 32'sd0;

  assign sel_1692 = 32'sd0;

  assign sel_1693 = 32'sd0;

  assign sel_1694 = 32'sd0;

  assign sel_1695 = 32'sd0;

  assign sel_1696 = 32'sd0;

  assign sel_1697 = 32'sd0;

  assign sel_1698 = 32'sd0;

  assign sel_1699 = 32'sd0;

  assign sel_1700 = 32'sd0;

  assign s_282 = 32'sd4;

  assign sel_1_548 = (s_18 == 1'b0 ? sel_1700 :
              s_282);

  assign sel_1701 = 32'sd0;

  assign sel_1_549 = (s_19 == 1'b0 ? sel_1_548 :
              sel_1701);

  assign sel_1702 = 32'sd0;

  assign sel_1_550 = (s_20 == 1'b0 ? sel_1_549 :
              sel_1702);

  assign sel_1703 = 32'sd0;

  assign sel_1_551 = (s_21 == 1'b0 ? sel_1_550 :
              sel_1703);

  assign sel_1704 = 32'sd0;

  assign sel_1705 = 32'sd0;

  assign sel_1706 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1687, sel_1688, sel_1689, sel_1690, sel_1691, sel_1692,
       sel_1693, sel_1694, sel_1695, sel_1696, sel_1697, sel_1698, sel_1699,
       sel_1704, sel_1705, sel_1706, sel_1_551) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4114_sel_1 = sel_1705;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4114_sel_1 = sel_1704;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4114_sel_1 = sel_1_551;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4114_sel_1 = sel_1699;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4114_sel_1 = sel_1698;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4114_sel_1 = sel_1697;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4114_sel_1 = sel_1696;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4114_sel_1 = sel_1695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4114_sel_1 = sel_1694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4114_sel_1 = sel_1693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4114_sel_1 = sel_1692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4114_sel_1 = sel_1691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4114_sel_1 = sel_1690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4114_sel_1 = sel_1689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4114_sel_1 = sel_1688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4114_sel_1 = sel_1687;
        end
      default :
        begin
          p4114_sel_1 = sel_1706;
        end
    endcase
    sel_1_552 = p4114_sel_1;
  end

  assign tmp_368 = functionOutput_15[sel_1_552];

  always @(posedge clk)
    begin : rd_300_process
      if (rst == 1'b1) begin
        s_283 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_283 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_287_process
      if (rst == 1'b1) begin
        tmp_369 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_369 <= tmp_368;
        end
      end
    end

  assign sel_1_553 = (s_277 == 1'b0 ? sel_1_547 :
              tmp_369);

  assign sel_1707 = 32'sd0;

  assign sel_1708 = 32'sd0;

  assign sel_1709 = 32'sd0;

  assign sel_1710 = 32'sd0;

  assign sel_1711 = 32'sd0;

  assign sel_1712 = 32'sd0;

  assign sel_1713 = 32'sd0;

  assign sel_1714 = 32'sd0;

  assign sel_1715 = 32'sd0;

  assign sel_1716 = 32'sd0;

  assign sel_1717 = 32'sd0;

  assign sel_1718 = 32'sd0;

  assign sel_1719 = 32'sd0;

  assign sel_1720 = 32'sd0;

  assign s_284 = 32'sd4;

  assign sel_1_554 = (s_19 == 1'b0 ? sel_1720 :
              s_284);

  assign sel_1721 = 32'sd0;

  assign sel_1_555 = (s_20 == 1'b0 ? sel_1_554 :
              sel_1721);

  assign sel_1722 = 32'sd0;

  assign sel_1_556 = (s_21 == 1'b0 ? sel_1_555 :
              sel_1722);

  assign sel_1723 = 32'sd0;

  assign sel_1724 = 32'sd0;

  assign sel_1725 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1707, sel_1708, sel_1709, sel_1710, sel_1711, sel_1712,
       sel_1713, sel_1714, sel_1715, sel_1716, sel_1717, sel_1718, sel_1719,
       sel_1723, sel_1724, sel_1725, sel_1_556) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4703_sel_1 = sel_1724;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4703_sel_1 = sel_1723;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4703_sel_1 = sel_1_556;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4703_sel_1 = sel_1719;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4703_sel_1 = sel_1718;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4703_sel_1 = sel_1717;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4703_sel_1 = sel_1716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4703_sel_1 = sel_1715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4703_sel_1 = sel_1714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4703_sel_1 = sel_1713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4703_sel_1 = sel_1712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4703_sel_1 = sel_1711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4703_sel_1 = sel_1710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4703_sel_1 = sel_1709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4703_sel_1 = sel_1708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4703_sel_1 = sel_1707;
        end
      default :
        begin
          p4703_sel_1 = sel_1725;
        end
    endcase
    sel_1_557 = p4703_sel_1;
  end

  assign tmp_370 = functionOutput_16[sel_1_557];

  always @(posedge clk)
    begin : rd_299_process
      if (rst == 1'b1) begin
        s_285 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_285 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_286_process
      if (rst == 1'b1) begin
        tmp_371 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_371 <= tmp_370;
        end
      end
    end

  assign sel_1_558 = (s_283 == 1'b0 ? sel_1_553 :
              tmp_371);

  assign sel_1726 = 32'sd0;

  assign sel_1727 = 32'sd0;

  assign sel_1728 = 32'sd0;

  assign sel_1729 = 32'sd0;

  assign sel_1730 = 32'sd0;

  assign sel_1731 = 32'sd0;

  assign sel_1732 = 32'sd0;

  assign sel_1733 = 32'sd0;

  assign sel_1734 = 32'sd0;

  assign sel_1735 = 32'sd0;

  assign sel_1736 = 32'sd0;

  assign sel_1737 = 32'sd0;

  assign sel_1738 = 32'sd0;

  assign sel_1739 = 32'sd0;

  assign s_286 = 32'sd4;

  assign sel_1_559 = (s_20 == 1'b0 ? sel_1739 :
              s_286);

  assign sel_1740 = 32'sd0;

  assign sel_1_560 = (s_21 == 1'b0 ? sel_1_559 :
              sel_1740);

  assign sel_1741 = 32'sd0;

  assign sel_1742 = 32'sd0;

  assign sel_1743 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1726, sel_1727, sel_1728, sel_1729, sel_1730, sel_1731,
       sel_1732, sel_1733, sel_1734, sel_1735, sel_1736, sel_1737, sel_1738,
       sel_1741, sel_1742, sel_1743, sel_1_560) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3563_sel_1 = sel_1742;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3563_sel_1 = sel_1741;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3563_sel_1 = sel_1_560;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3563_sel_1 = sel_1738;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3563_sel_1 = sel_1737;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3563_sel_1 = sel_1736;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3563_sel_1 = sel_1735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3563_sel_1 = sel_1734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3563_sel_1 = sel_1733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3563_sel_1 = sel_1732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3563_sel_1 = sel_1731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3563_sel_1 = sel_1730;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3563_sel_1 = sel_1729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3563_sel_1 = sel_1728;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3563_sel_1 = sel_1727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3563_sel_1 = sel_1726;
        end
      default :
        begin
          p3563_sel_1 = sel_1743;
        end
    endcase
    sel_1_561 = p3563_sel_1;
  end

  assign tmp_372 = functionOutput_17[sel_1_561];

  always @(posedge clk)
    begin : rd_298_process
      if (rst == 1'b1) begin
        s_287 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_287 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_285_process
      if (rst == 1'b1) begin
        tmp_373 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_373 <= tmp_372;
        end
      end
    end

  assign sel_1_562 = (s_285 == 1'b0 ? sel_1_558 :
              tmp_373);

  assign sel_1744 = 32'sd0;

  assign sel_1745 = 32'sd0;

  assign sel_1746 = 32'sd0;

  assign sel_1747 = 32'sd0;

  assign sel_1748 = 32'sd0;

  assign sel_1749 = 32'sd0;

  assign sel_1750 = 32'sd0;

  assign sel_1751 = 32'sd0;

  assign sel_1752 = 32'sd0;

  assign sel_1753 = 32'sd0;

  assign sel_1754 = 32'sd0;

  assign sel_1755 = 32'sd0;

  assign sel_1756 = 32'sd0;

  assign sel_1757 = 32'sd0;

  assign s_288 = 32'sd4;

  assign sel_1_563 = (s_21 == 1'b0 ? sel_1757 :
              s_288);

  assign sel_1758 = 32'sd0;

  assign sel_1759 = 32'sd0;

  assign sel_1760 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1744, sel_1745, sel_1746, sel_1747, sel_1748, sel_1749,
       sel_1750, sel_1751, sel_1752, sel_1753, sel_1754, sel_1755, sel_1756,
       sel_1758, sel_1759, sel_1760, sel_1_563) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4760_sel_1 = sel_1759;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4760_sel_1 = sel_1758;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4760_sel_1 = sel_1_563;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4760_sel_1 = sel_1756;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4760_sel_1 = sel_1755;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4760_sel_1 = sel_1754;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4760_sel_1 = sel_1753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4760_sel_1 = sel_1752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4760_sel_1 = sel_1751;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4760_sel_1 = sel_1750;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4760_sel_1 = sel_1749;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4760_sel_1 = sel_1748;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4760_sel_1 = sel_1747;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4760_sel_1 = sel_1746;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4760_sel_1 = sel_1745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4760_sel_1 = sel_1744;
        end
      default :
        begin
          p4760_sel_1 = sel_1760;
        end
    endcase
    sel_1_564 = p4760_sel_1;
  end

  assign tmp_374 = functionOutput_18[sel_1_564];

  always @(posedge clk)
    begin : rd_295_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_61 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_61 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1761 = 32'sd0;

  assign sel_1762 = 32'sd0;

  assign sel_1763 = 32'sd0;

  assign sel_1764 = 32'sd0;

  assign sel_1765 = 32'sd0;

  assign sel_1766 = 32'sd0;

  assign sel_1767 = 32'sd0;

  assign sel_1768 = 32'sd0;

  assign sel_1769 = 32'sd0;

  assign sel_1770 = 32'sd0;

  assign sel_1771 = 32'sd0;

  assign sel_1772 = 32'sd0;

  assign sel_1773 = 32'sd0;

  always @(posedge clk)
    begin : rd_296_process
      if (rst == 1'b1) begin
        s_289 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_289 <= s_12;
        end
      end
    end

  assign sel_1774 = 32'sd0;

  assign sel_1775 = 32'sd0;

  assign sel_1776 = 32'sd0;

  assign s_290 = 32'sd4;

  assign sel_1_565 = (tmp_4 == 1'b0 ? sel_1776 :
              s_290);

  assign sel_1777 = 32'sd0;

  assign sel_1_566 = (tmp_6 == 1'b0 ? sel_1_565 :
              sel_1777);

  assign sel_1778 = 32'sd0;

  assign sel_1_567 = (tmp_8 == 1'b0 ? sel_1_566 :
              sel_1778);

  assign sel_1779 = 32'sd0;

  assign sel_1_568 = (tmp_10 == 1'b0 ? sel_1_567 :
              sel_1779);

  assign sel_1780 = 32'sd0;

  assign sel_1_569 = (tmp_12 == 1'b0 ? sel_1_568 :
              sel_1780);

  assign sel_1781 = 32'sd0;

  assign sel_1_570 = (tmp_14 == 1'b0 ? sel_1_569 :
              sel_1781);

  assign sel_1782 = 32'sd0;

  assign sel_1_571 = (tmp_16 == 1'b0 ? sel_1_570 :
              sel_1782);

  assign sel_1783 = 32'sd0;

  assign sel_1_572 = (tmp_18 == 1'b0 ? sel_1_571 :
              sel_1783);

  assign sel_1_573 = (s_10 == 1'b0 ? sel_1775 :
              sel_1_572);

  assign sel_1_574 = (s_11 == 1'b0 ? sel_1774 :
              sel_1_573);

  always @(posedge clk)
    begin : rd_297_process
      if (rst == 1'b1) begin
        sel_1_575 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_575 <= sel_1_574;
        end
      end
    end

  assign sel_1784 = 32'sd0;

  assign sel_1785 = 32'sd0;

  assign sel_1_576 = (s_289 == 1'b0 ? sel_1_575 :
              sel_1785);

  assign sel_1786 = 32'sd0;

  always @(posedge clk)
    begin : rd_309_process
      if (rst == 1'b1) begin
        tmp_375 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_375 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_310_process
      if (rst == 1'b1) begin
        for(rd_310_t_1 = 32'sd0; rd_310_t_1 <= 32'sd11; rd_310_t_1 = rd_310_t_1 + 32'sd1) begin
          rd_310_reg[rd_310_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_310_t_0_1 = 32'sd0; rd_310_t_0_1 <= 32'sd11; rd_310_t_0_1 = rd_310_t_0_1 + 32'sd1) begin
            rd_310_reg[rd_310_t_0_1] <= rd_310_reg_next[rd_310_t_0_1];
          end
        end
      end
    end
  genvar t_0_041;
  generate
    for(t_0_041 = 32'sd0; t_0_041 <= 32'sd11; t_0_041 = t_0_041 + 32'sd1) begin:rd_310_reg_next_gen
      assign functionOutput_31[t_0_041] = rd_310_reg[t_0_041];
      assign rd_310_reg_next[t_0_041] = functionOutput_19[t_0_041];
    end
  endgenerate

  assign sel_1787 = 32'sd0;

  always @(is_SPI_MNGR_61, sel_1761, sel_1762, sel_1763, sel_1764, sel_1765, sel_1766,
       sel_1767, sel_1768, sel_1769, sel_1770, sel_1771, sel_1772, sel_1773,
       sel_1784, sel_1786, sel_1787, sel_1_576) begin
    case ( is_SPI_MNGR_61)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3069_sel_1 = sel_1786;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3069_sel_1 = sel_1_576;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3069_sel_1 = sel_1784;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3069_sel_1 = sel_1773;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3069_sel_1 = sel_1772;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3069_sel_1 = sel_1771;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3069_sel_1 = sel_1770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3069_sel_1 = sel_1769;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3069_sel_1 = sel_1768;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3069_sel_1 = sel_1767;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3069_sel_1 = sel_1766;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3069_sel_1 = sel_1765;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3069_sel_1 = sel_1764;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3069_sel_1 = sel_1763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3069_sel_1 = sel_1762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3069_sel_1 = sel_1761;
        end
      default :
        begin
          p3069_sel_1 = sel_1787;
        end
    endcase
    sel_1_577 = p3069_sel_1;
  end

  assign tmp_376 = functionOutput_31[sel_1_577];

  assign sel_1788 = 32'sd0;

  assign sel_1789 = 32'sd0;

  assign sel_1790 = 32'sd0;

  assign sel_1791 = 32'sd0;

  assign sel_1792 = 32'sd0;

  assign sel_1793 = 32'sd0;

  assign sel_1794 = 32'sd0;

  assign sel_1795 = 32'sd0;

  assign sel_1796 = 32'sd0;

  assign sel_1797 = 32'sd0;

  assign sel_1798 = 32'sd0;

  assign sel_1799 = 32'sd0;

  assign sel_1800 = 32'sd0;

  assign sel_1801 = 32'sd0;

  assign sel_1802 = 32'sd0;

  assign sel_1803 = 32'sd0;

  assign sel_1804 = 32'sd0;

  assign s_291 = 32'sd4;

  assign sel_1_578 = (tmp_6 == 1'b0 ? sel_1804 :
              s_291);

  assign sel_1805 = 32'sd0;

  assign sel_1_579 = (tmp_8 == 1'b0 ? sel_1_578 :
              sel_1805);

  assign sel_1806 = 32'sd0;

  assign sel_1_580 = (tmp_10 == 1'b0 ? sel_1_579 :
              sel_1806);

  assign sel_1807 = 32'sd0;

  assign sel_1_581 = (tmp_12 == 1'b0 ? sel_1_580 :
              sel_1807);

  assign sel_1808 = 32'sd0;

  assign sel_1_582 = (tmp_14 == 1'b0 ? sel_1_581 :
              sel_1808);

  assign sel_1809 = 32'sd0;

  assign sel_1_583 = (tmp_16 == 1'b0 ? sel_1_582 :
              sel_1809);

  assign sel_1810 = 32'sd0;

  assign sel_1_584 = (tmp_18 == 1'b0 ? sel_1_583 :
              sel_1810);

  assign sel_1_585 = (s_10 == 1'b0 ? sel_1803 :
              sel_1_584);

  assign sel_1_586 = (s_11 == 1'b0 ? sel_1802 :
              sel_1_585);

  assign sel_1811 = 32'sd0;

  assign sel_1_587 = (s_12 == 1'b0 ? sel_1_586 :
              sel_1811);

  assign sel_1812 = 32'sd0;

  assign sel_1813 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1788, sel_1789, sel_1790, sel_1791, sel_1792, sel_1793,
       sel_1794, sel_1795, sel_1796, sel_1797, sel_1798, sel_1799, sel_1800,
       sel_1801, sel_1812, sel_1813, sel_1_587) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2404_sel_1 = sel_1812;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2404_sel_1 = sel_1_587;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2404_sel_1 = sel_1801;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2404_sel_1 = sel_1800;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2404_sel_1 = sel_1799;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2404_sel_1 = sel_1798;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2404_sel_1 = sel_1797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2404_sel_1 = sel_1796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2404_sel_1 = sel_1795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2404_sel_1 = sel_1794;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2404_sel_1 = sel_1793;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2404_sel_1 = sel_1792;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2404_sel_1 = sel_1791;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2404_sel_1 = sel_1790;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2404_sel_1 = sel_1789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2404_sel_1 = sel_1788;
        end
      default :
        begin
          p2404_sel_1 = sel_1813;
        end
    endcase
    sel_1_588 = p2404_sel_1;
  end

  assign tmp_377 = functionOutput_21[sel_1_588];

  always @(posedge clk)
    begin : rd_308_process
      if (rst == 1'b1) begin
        tmp_378 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_378 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_294_process
      if (rst == 1'b1) begin
        tmp_379 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_379 <= tmp_377;
        end
      end
    end

  assign sel_1_589 = (tmp_375 == 1'b0 ? tmp_376 :
              tmp_379);

  assign sel_1814 = 32'sd0;

  assign sel_1815 = 32'sd0;

  assign sel_1816 = 32'sd0;

  assign sel_1817 = 32'sd0;

  assign sel_1818 = 32'sd0;

  assign sel_1819 = 32'sd0;

  assign sel_1820 = 32'sd0;

  assign sel_1821 = 32'sd0;

  assign sel_1822 = 32'sd0;

  assign sel_1823 = 32'sd0;

  assign sel_1824 = 32'sd0;

  assign sel_1825 = 32'sd0;

  assign sel_1826 = 32'sd0;

  assign sel_1827 = 32'sd0;

  assign sel_1828 = 32'sd0;

  assign sel_1829 = 32'sd0;

  assign sel_1830 = 32'sd0;

  assign s_292 = 32'sd4;

  assign sel_1_590 = (tmp_8 == 1'b0 ? sel_1830 :
              s_292);

  assign sel_1831 = 32'sd0;

  assign sel_1_591 = (tmp_10 == 1'b0 ? sel_1_590 :
              sel_1831);

  assign sel_1832 = 32'sd0;

  assign sel_1_592 = (tmp_12 == 1'b0 ? sel_1_591 :
              sel_1832);

  assign sel_1833 = 32'sd0;

  assign sel_1_593 = (tmp_14 == 1'b0 ? sel_1_592 :
              sel_1833);

  assign sel_1834 = 32'sd0;

  assign sel_1_594 = (tmp_16 == 1'b0 ? sel_1_593 :
              sel_1834);

  assign sel_1835 = 32'sd0;

  assign sel_1_595 = (tmp_18 == 1'b0 ? sel_1_594 :
              sel_1835);

  assign sel_1_596 = (s_10 == 1'b0 ? sel_1829 :
              sel_1_595);

  assign sel_1_597 = (s_11 == 1'b0 ? sel_1828 :
              sel_1_596);

  assign sel_1836 = 32'sd0;

  assign sel_1_598 = (s_12 == 1'b0 ? sel_1_597 :
              sel_1836);

  assign sel_1837 = 32'sd0;

  assign sel_1838 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1814, sel_1815, sel_1816, sel_1817, sel_1818, sel_1819,
       sel_1820, sel_1821, sel_1822, sel_1823, sel_1824, sel_1825, sel_1826,
       sel_1827, sel_1837, sel_1838, sel_1_598) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2081_sel_1 = sel_1837;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2081_sel_1 = sel_1_598;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2081_sel_1 = sel_1827;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2081_sel_1 = sel_1826;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2081_sel_1 = sel_1825;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2081_sel_1 = sel_1824;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2081_sel_1 = sel_1823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2081_sel_1 = sel_1822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2081_sel_1 = sel_1821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2081_sel_1 = sel_1820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2081_sel_1 = sel_1819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2081_sel_1 = sel_1818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2081_sel_1 = sel_1817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2081_sel_1 = sel_1816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2081_sel_1 = sel_1815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2081_sel_1 = sel_1814;
        end
      default :
        begin
          p2081_sel_1 = sel_1838;
        end
    endcase
    sel_1_599 = p2081_sel_1;
  end

  assign tmp_380 = functionOutput_22[sel_1_599];

  always @(posedge clk)
    begin : rd_307_process
      if (rst == 1'b1) begin
        tmp_381 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_381 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_293_process
      if (rst == 1'b1) begin
        tmp_382 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_382 <= tmp_380;
        end
      end
    end

  assign sel_1_600 = (tmp_378 == 1'b0 ? sel_1_589 :
              tmp_382);

  assign sel_1839 = 32'sd0;

  assign sel_1840 = 32'sd0;

  assign sel_1841 = 32'sd0;

  assign sel_1842 = 32'sd0;

  assign sel_1843 = 32'sd0;

  assign sel_1844 = 32'sd0;

  assign sel_1845 = 32'sd0;

  assign sel_1846 = 32'sd0;

  assign sel_1847 = 32'sd0;

  assign sel_1848 = 32'sd0;

  assign sel_1849 = 32'sd0;

  assign sel_1850 = 32'sd0;

  assign sel_1851 = 32'sd0;

  assign sel_1852 = 32'sd0;

  assign sel_1853 = 32'sd0;

  assign sel_1854 = 32'sd0;

  assign sel_1855 = 32'sd0;

  assign s_293 = 32'sd4;

  assign sel_1_601 = (tmp_10 == 1'b0 ? sel_1855 :
              s_293);

  assign sel_1856 = 32'sd0;

  assign sel_1_602 = (tmp_12 == 1'b0 ? sel_1_601 :
              sel_1856);

  assign sel_1857 = 32'sd0;

  assign sel_1_603 = (tmp_14 == 1'b0 ? sel_1_602 :
              sel_1857);

  assign sel_1858 = 32'sd0;

  assign sel_1_604 = (tmp_16 == 1'b0 ? sel_1_603 :
              sel_1858);

  assign sel_1859 = 32'sd0;

  assign sel_1_605 = (tmp_18 == 1'b0 ? sel_1_604 :
              sel_1859);

  assign sel_1_606 = (s_10 == 1'b0 ? sel_1854 :
              sel_1_605);

  assign sel_1_607 = (s_11 == 1'b0 ? sel_1853 :
              sel_1_606);

  assign sel_1860 = 32'sd0;

  assign sel_1_608 = (s_12 == 1'b0 ? sel_1_607 :
              sel_1860);

  assign sel_1861 = 32'sd0;

  assign sel_1862 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1839, sel_1840, sel_1841, sel_1842, sel_1843, sel_1844,
       sel_1845, sel_1846, sel_1847, sel_1848, sel_1849, sel_1850, sel_1851,
       sel_1852, sel_1861, sel_1862, sel_1_608) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2271_sel_1 = sel_1861;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2271_sel_1 = sel_1_608;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2271_sel_1 = sel_1852;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2271_sel_1 = sel_1851;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2271_sel_1 = sel_1850;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2271_sel_1 = sel_1849;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2271_sel_1 = sel_1848;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2271_sel_1 = sel_1847;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2271_sel_1 = sel_1846;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2271_sel_1 = sel_1845;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2271_sel_1 = sel_1844;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2271_sel_1 = sel_1843;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2271_sel_1 = sel_1842;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2271_sel_1 = sel_1841;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2271_sel_1 = sel_1840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2271_sel_1 = sel_1839;
        end
      default :
        begin
          p2271_sel_1 = sel_1862;
        end
    endcase
    sel_1_609 = p2271_sel_1;
  end

  assign tmp_383 = functionOutput_23[sel_1_609];

  always @(posedge clk)
    begin : rd_306_process
      if (rst == 1'b1) begin
        tmp_384 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_384 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_292_process
      if (rst == 1'b1) begin
        tmp_385 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_385 <= tmp_383;
        end
      end
    end

  assign sel_1_610 = (tmp_381 == 1'b0 ? sel_1_600 :
              tmp_385);

  assign sel_1863 = 32'sd0;

  assign sel_1864 = 32'sd0;

  assign sel_1865 = 32'sd0;

  assign sel_1866 = 32'sd0;

  assign sel_1867 = 32'sd0;

  assign sel_1868 = 32'sd0;

  assign sel_1869 = 32'sd0;

  assign sel_1870 = 32'sd0;

  assign sel_1871 = 32'sd0;

  assign sel_1872 = 32'sd0;

  assign sel_1873 = 32'sd0;

  assign sel_1874 = 32'sd0;

  assign sel_1875 = 32'sd0;

  assign sel_1876 = 32'sd0;

  assign sel_1877 = 32'sd0;

  assign sel_1878 = 32'sd0;

  assign sel_1879 = 32'sd0;

  assign s_294 = 32'sd4;

  assign sel_1_611 = (tmp_12 == 1'b0 ? sel_1879 :
              s_294);

  assign sel_1880 = 32'sd0;

  assign sel_1_612 = (tmp_14 == 1'b0 ? sel_1_611 :
              sel_1880);

  assign sel_1881 = 32'sd0;

  assign sel_1_613 = (tmp_16 == 1'b0 ? sel_1_612 :
              sel_1881);

  assign sel_1882 = 32'sd0;

  assign sel_1_614 = (tmp_18 == 1'b0 ? sel_1_613 :
              sel_1882);

  assign sel_1_615 = (s_10 == 1'b0 ? sel_1878 :
              sel_1_614);

  assign sel_1_616 = (s_11 == 1'b0 ? sel_1877 :
              sel_1_615);

  assign sel_1883 = 32'sd0;

  assign sel_1_617 = (s_12 == 1'b0 ? sel_1_616 :
              sel_1883);

  assign sel_1884 = 32'sd0;

  assign sel_1885 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1863, sel_1864, sel_1865, sel_1866, sel_1867, sel_1868,
       sel_1869, sel_1870, sel_1871, sel_1872, sel_1873, sel_1874, sel_1875,
       sel_1876, sel_1884, sel_1885, sel_1_617) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1644_sel_1 = sel_1884;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1644_sel_1 = sel_1_617;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1644_sel_1 = sel_1876;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1644_sel_1 = sel_1875;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1644_sel_1 = sel_1874;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1644_sel_1 = sel_1873;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1644_sel_1 = sel_1872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1644_sel_1 = sel_1871;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1644_sel_1 = sel_1870;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1644_sel_1 = sel_1869;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1644_sel_1 = sel_1868;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1644_sel_1 = sel_1867;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1644_sel_1 = sel_1866;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1644_sel_1 = sel_1865;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1644_sel_1 = sel_1864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1644_sel_1 = sel_1863;
        end
      default :
        begin
          p1644_sel_1 = sel_1885;
        end
    endcase
    sel_1_618 = p1644_sel_1;
  end

  assign tmp_386 = functionOutput_24[sel_1_618];

  always @(posedge clk)
    begin : rd_305_process
      if (rst == 1'b1) begin
        tmp_387 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_387 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_291_process
      if (rst == 1'b1) begin
        tmp_388 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_388 <= tmp_386;
        end
      end
    end

  assign sel_1_619 = (tmp_384 == 1'b0 ? sel_1_610 :
              tmp_388);

  assign sel_1886 = 32'sd0;

  assign sel_1887 = 32'sd0;

  assign sel_1888 = 32'sd0;

  assign sel_1889 = 32'sd0;

  assign sel_1890 = 32'sd0;

  assign sel_1891 = 32'sd0;

  assign sel_1892 = 32'sd0;

  assign sel_1893 = 32'sd0;

  assign sel_1894 = 32'sd0;

  assign sel_1895 = 32'sd0;

  assign sel_1896 = 32'sd0;

  assign sel_1897 = 32'sd0;

  assign sel_1898 = 32'sd0;

  assign sel_1899 = 32'sd0;

  assign sel_1900 = 32'sd0;

  assign sel_1901 = 32'sd0;

  assign sel_1902 = 32'sd0;

  assign s_295 = 32'sd4;

  assign sel_1_620 = (tmp_14 == 1'b0 ? sel_1902 :
              s_295);

  assign sel_1903 = 32'sd0;

  assign sel_1_621 = (tmp_16 == 1'b0 ? sel_1_620 :
              sel_1903);

  assign sel_1904 = 32'sd0;

  assign sel_1_622 = (tmp_18 == 1'b0 ? sel_1_621 :
              sel_1904);

  assign sel_1_623 = (s_10 == 1'b0 ? sel_1901 :
              sel_1_622);

  assign sel_1_624 = (s_11 == 1'b0 ? sel_1900 :
              sel_1_623);

  assign sel_1905 = 32'sd0;

  assign sel_1_625 = (s_12 == 1'b0 ? sel_1_624 :
              sel_1905);

  assign sel_1906 = 32'sd0;

  assign sel_1907 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1886, sel_1887, sel_1888, sel_1889, sel_1890, sel_1891,
       sel_1892, sel_1893, sel_1894, sel_1895, sel_1896, sel_1897, sel_1898,
       sel_1899, sel_1906, sel_1907, sel_1_625) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1682_sel_1 = sel_1906;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1682_sel_1 = sel_1_625;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1682_sel_1 = sel_1899;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1682_sel_1 = sel_1898;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1682_sel_1 = sel_1897;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1682_sel_1 = sel_1896;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1682_sel_1 = sel_1895;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1682_sel_1 = sel_1894;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1682_sel_1 = sel_1893;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1682_sel_1 = sel_1892;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1682_sel_1 = sel_1891;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1682_sel_1 = sel_1890;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1682_sel_1 = sel_1889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1682_sel_1 = sel_1888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1682_sel_1 = sel_1887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1682_sel_1 = sel_1886;
        end
      default :
        begin
          p1682_sel_1 = sel_1907;
        end
    endcase
    sel_1_626 = p1682_sel_1;
  end

  assign tmp_389 = functionOutput_25[sel_1_626];

  always @(posedge clk)
    begin : rd_304_process
      if (rst == 1'b1) begin
        tmp_390 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_390 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_290_process
      if (rst == 1'b1) begin
        tmp_391 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_391 <= tmp_389;
        end
      end
    end

  assign sel_1_627 = (tmp_387 == 1'b0 ? sel_1_619 :
              tmp_391);

  assign sel_1908 = 32'sd0;

  assign sel_1909 = 32'sd0;

  assign sel_1910 = 32'sd0;

  assign sel_1911 = 32'sd0;

  assign sel_1912 = 32'sd0;

  assign sel_1913 = 32'sd0;

  assign sel_1914 = 32'sd0;

  assign sel_1915 = 32'sd0;

  assign sel_1916 = 32'sd0;

  assign sel_1917 = 32'sd0;

  assign sel_1918 = 32'sd0;

  assign sel_1919 = 32'sd0;

  assign sel_1920 = 32'sd0;

  assign sel_1921 = 32'sd0;

  assign sel_1922 = 32'sd0;

  assign sel_1923 = 32'sd0;

  assign sel_1924 = 32'sd0;

  assign s_296 = 32'sd4;

  assign sel_1_628 = (tmp_16 == 1'b0 ? sel_1924 :
              s_296);

  assign sel_1925 = 32'sd0;

  assign sel_1_629 = (tmp_18 == 1'b0 ? sel_1_628 :
              sel_1925);

  assign sel_1_630 = (s_10 == 1'b0 ? sel_1923 :
              sel_1_629);

  assign sel_1_631 = (s_11 == 1'b0 ? sel_1922 :
              sel_1_630);

  assign sel_1926 = 32'sd0;

  assign sel_1_632 = (s_12 == 1'b0 ? sel_1_631 :
              sel_1926);

  assign sel_1927 = 32'sd0;

  assign sel_1928 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1908, sel_1909, sel_1910, sel_1911, sel_1912, sel_1913,
       sel_1914, sel_1915, sel_1916, sel_1917, sel_1918, sel_1919, sel_1920,
       sel_1921, sel_1927, sel_1928, sel_1_632) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3373_sel_1 = sel_1927;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3373_sel_1 = sel_1_632;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3373_sel_1 = sel_1921;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3373_sel_1 = sel_1920;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3373_sel_1 = sel_1919;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3373_sel_1 = sel_1918;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3373_sel_1 = sel_1917;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3373_sel_1 = sel_1916;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3373_sel_1 = sel_1915;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3373_sel_1 = sel_1914;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3373_sel_1 = sel_1913;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3373_sel_1 = sel_1912;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3373_sel_1 = sel_1911;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3373_sel_1 = sel_1910;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3373_sel_1 = sel_1909;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3373_sel_1 = sel_1908;
        end
      default :
        begin
          p3373_sel_1 = sel_1928;
        end
    endcase
    sel_1_633 = p3373_sel_1;
  end

  assign tmp_392 = functionOutput_26[sel_1_633];

  always @(posedge clk)
    begin : rd_303_process
      if (rst == 1'b1) begin
        tmp_393 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_393 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_289_process
      if (rst == 1'b1) begin
        tmp_394 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_394 <= tmp_392;
        end
      end
    end

  assign sel_1_634 = (tmp_390 == 1'b0 ? sel_1_627 :
              tmp_394);

  assign sel_1929 = 32'sd0;

  assign sel_1930 = 32'sd0;

  assign sel_1931 = 32'sd0;

  assign sel_1932 = 32'sd0;

  assign sel_1933 = 32'sd0;

  assign sel_1934 = 32'sd0;

  assign sel_1935 = 32'sd0;

  assign sel_1936 = 32'sd0;

  assign sel_1937 = 32'sd0;

  assign sel_1938 = 32'sd0;

  assign sel_1939 = 32'sd0;

  assign sel_1940 = 32'sd0;

  assign sel_1941 = 32'sd0;

  assign sel_1942 = 32'sd0;

  assign sel_1943 = 32'sd0;

  assign sel_1944 = 32'sd0;

  assign sel_1945 = 32'sd0;

  assign s_297 = 32'sd4;

  assign sel_1_635 = (tmp_18 == 1'b0 ? sel_1945 :
              s_297);

  assign sel_1_636 = (s_10 == 1'b0 ? sel_1944 :
              sel_1_635);

  assign sel_1_637 = (s_11 == 1'b0 ? sel_1943 :
              sel_1_636);

  assign sel_1946 = 32'sd0;

  assign sel_1_638 = (s_12 == 1'b0 ? sel_1_637 :
              sel_1946);

  assign sel_1947 = 32'sd0;

  assign sel_1948 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1929, sel_1930, sel_1931, sel_1932, sel_1933, sel_1934,
       sel_1935, sel_1936, sel_1937, sel_1938, sel_1939, sel_1940, sel_1941,
       sel_1942, sel_1947, sel_1948, sel_1_638) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1910_sel_1 = sel_1947;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1910_sel_1 = sel_1_638;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1910_sel_1 = sel_1942;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1910_sel_1 = sel_1941;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1910_sel_1 = sel_1940;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1910_sel_1 = sel_1939;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1910_sel_1 = sel_1938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1910_sel_1 = sel_1937;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1910_sel_1 = sel_1936;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1910_sel_1 = sel_1935;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1910_sel_1 = sel_1934;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1910_sel_1 = sel_1933;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1910_sel_1 = sel_1932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1910_sel_1 = sel_1931;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1910_sel_1 = sel_1930;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1910_sel_1 = sel_1929;
        end
      default :
        begin
          p1910_sel_1 = sel_1948;
        end
    endcase
    sel_1_639 = p1910_sel_1;
  end

  assign tmp_395 = functionOutput_27[sel_1_639];

  assign sel_1949 = 8'd0;

  always @(posedge clk)
    begin : rd_284_process
      if (rst == 1'b1) begin
        tmp_396 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_396 <= tmp_374;
        end
      end
    end

  assign sel_1_640 = (s_287 == 1'b0 ? sel_1_562 :
              tmp_396);

  always @(posedge clk)
    begin : rd_288_process
      if (rst == 1'b1) begin
        tmp_397 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_397 <= tmp_395;
        end
      end
    end

  assign sel_1_641 = (tmp_393 == 1'b0 ? sel_1_634 :
              tmp_397);

  assign sel_1950 = 8'd0;

  always @(posedge clk)
    begin : rd_311_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_62 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_62 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1951 = 1'b0;

  assign sel_1952 = 1'b0;

  assign sel_1953 = 1'b0;

  assign sel_1954 = 1'b0;

  assign sel_1955 = 1'b0;

  assign sel_1956 = 1'b0;

  assign sel_1957 = 1'b0;

  assign sel_1958 = 1'b0;

  assign sel_1959 = 1'b0;

  assign sel_1960 = 1'b0;

  assign sel_1961 = 1'b0;

  assign sel_1962 = 1'b0;

  assign sel_1963 = 1'b0;

  assign sel_1964 = 1'b0;

  assign s_298 = 1'b1;

  assign sel_2_89 = (s_14 == 1'b0 ? sel_1964 :
              s_298);

  assign s_299 = 1'b1;

  assign sel_2_90 = (s_15 == 1'b0 ? sel_2_89 :
              s_299);

  assign s_300 = 1'b1;

  assign sel_2_91 = (s_16 == 1'b0 ? sel_2_90 :
              s_300);

  assign s_301 = 1'b1;

  assign sel_2_92 = (s_17 == 1'b0 ? sel_2_91 :
              s_301);

  assign s_302 = 1'b1;

  assign sel_2_93 = (s_18 == 1'b0 ? sel_2_92 :
              s_302);

  assign s_303 = 1'b1;

  assign sel_2_94 = (s_19 == 1'b0 ? sel_2_93 :
              s_303);

  assign s_304 = 1'b1;

  assign sel_2_95 = (s_20 == 1'b0 ? sel_2_94 :
              s_304);

  assign s_305 = 1'b1;

  assign sel_2_96 = (s_21 == 1'b0 ? sel_2_95 :
              s_305);

  always @(posedge clk)
    begin : rd_313_process
      if (rst == 1'b1) begin
        s_306 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_306 <= s_12;
        end
      end
    end

  assign sel_1965 = 1'b0;

  assign sel_1966 = 1'b0;

  assign sel_1967 = 1'b0;

  assign s_307 = 1'b1;

  assign sel_2_97 = (tmp_4 == 1'b0 ? sel_1967 :
              s_307);

  assign s_308 = 1'b1;

  assign sel_2_98 = (tmp_6 == 1'b0 ? sel_2_97 :
              s_308);

  assign s_309 = 1'b1;

  assign sel_2_99 = (tmp_8 == 1'b0 ? sel_2_98 :
              s_309);

  assign s_310 = 1'b1;

  assign sel_2_100 = (tmp_10 == 1'b0 ? sel_2_99 :
              s_310);

  assign s_311 = 1'b1;

  assign sel_2_101 = (tmp_12 == 1'b0 ? sel_2_100 :
              s_311);

  assign s_312 = 1'b1;

  assign sel_2_102 = (tmp_14 == 1'b0 ? sel_2_101 :
              s_312);

  assign s_313 = 1'b1;

  assign sel_2_103 = (tmp_16 == 1'b0 ? sel_2_102 :
              s_313);

  assign s_314 = 1'b1;

  assign sel_2_104 = (tmp_18 == 1'b0 ? sel_2_103 :
              s_314);

  assign sel_2_105 = (s_10 == 1'b0 ? sel_1966 :
              sel_2_104);

  assign sel_2_106 = (s_11 == 1'b0 ? sel_1965 :
              sel_2_105);

  always @(posedge clk)
    begin : rd_314_process
      if (rst == 1'b1) begin
        sel_2_107 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_107 <= sel_2_106;
        end
      end
    end

  always @(posedge clk)
    begin : rd_312_process
      if (rst == 1'b1) begin
        sel_2_108 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_108 <= sel_2_96;
        end
      end
    end

  assign sel_1968 = 1'b0;

  assign sel_2_109 = (s_306 == 1'b0 ? sel_2_107 :
              sel_1968);

  assign sel_1969 = 1'b0;

  always @(posedge clk)
    begin : rd_315_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_63 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_63 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_1970 = 8'd0;

  assign sel_1971 = 8'd0;

  assign sel_1972 = 8'd0;

  assign sel_1973 = 8'd0;

  assign sel_1974 = 8'd0;

  assign sel_1975 = 8'd0;

  assign sel_1976 = 8'd0;

  assign sel_1977 = 8'd0;

  assign sel_1978 = 8'd0;

  assign sel_1979 = 8'd0;

  assign sel_1980 = 8'd0;

  assign sel_1981 = 8'd0;

  always @(posedge clk)
    begin : rd_333_process
      if (rst == 1'b1) begin
        s_315 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_315 <= s_18;
        end
      end
    end

  assign sel_1982 = 32'sd0;

  assign sel_1983 = 32'sd0;

  assign sel_1984 = 32'sd0;

  assign sel_1985 = 32'sd0;

  assign sel_1986 = 32'sd0;

  assign sel_1987 = 32'sd0;

  assign sel_1988 = 32'sd0;

  assign sel_1989 = 32'sd0;

  assign sel_1990 = 32'sd0;

  assign sel_1991 = 32'sd0;

  assign sel_1992 = 32'sd0;

  assign sel_1993 = 32'sd0;

  assign sel_1994 = 32'sd0;

  assign sel_1995 = 32'sd0;

  assign s_316 = 32'sd5;

  assign sel_1_642 = (s_14 == 1'b0 ? sel_1995 :
              s_316);

  assign sel_1996 = 32'sd0;

  assign sel_1_643 = (s_15 == 1'b0 ? sel_1_642 :
              sel_1996);

  assign sel_1997 = 32'sd0;

  assign sel_1_644 = (s_16 == 1'b0 ? sel_1_643 :
              sel_1997);

  assign sel_1998 = 32'sd0;

  assign sel_1_645 = (s_17 == 1'b0 ? sel_1_644 :
              sel_1998);

  assign sel_1999 = 32'sd0;

  assign sel_1_646 = (s_18 == 1'b0 ? sel_1_645 :
              sel_1999);

  assign sel_2000 = 32'sd0;

  assign sel_1_647 = (s_19 == 1'b0 ? sel_1_646 :
              sel_2000);

  assign sel_2001 = 32'sd0;

  assign sel_1_648 = (s_20 == 1'b0 ? sel_1_647 :
              sel_2001);

  assign sel_2002 = 32'sd0;

  assign sel_1_649 = (s_21 == 1'b0 ? sel_1_648 :
              sel_2002);

  assign sel_2003 = 32'sd0;

  assign sel_2004 = 32'sd0;

  assign sel_2005 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1982, sel_1983, sel_1984, sel_1985, sel_1986, sel_1987,
       sel_1988, sel_1989, sel_1990, sel_1991, sel_1992, sel_1993, sel_1994,
       sel_1_649, sel_2003, sel_2004, sel_2005) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3715_sel_1 = sel_2004;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3715_sel_1 = sel_2003;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3715_sel_1 = sel_1_649;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3715_sel_1 = sel_1994;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3715_sel_1 = sel_1993;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3715_sel_1 = sel_1992;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3715_sel_1 = sel_1991;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3715_sel_1 = sel_1990;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3715_sel_1 = sel_1989;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3715_sel_1 = sel_1988;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3715_sel_1 = sel_1987;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3715_sel_1 = sel_1986;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3715_sel_1 = sel_1985;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3715_sel_1 = sel_1984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3715_sel_1 = sel_1983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3715_sel_1 = sel_1982;
        end
      default :
        begin
          p3715_sel_1 = sel_2005;
        end
    endcase
    sel_1_650 = p3715_sel_1;
  end

  assign tmp_398 = functionOutput[sel_1_650];

  assign sel_2006 = 32'sd0;

  assign sel_2007 = 32'sd0;

  assign sel_2008 = 32'sd0;

  assign sel_2009 = 32'sd0;

  assign sel_2010 = 32'sd0;

  assign sel_2011 = 32'sd0;

  assign sel_2012 = 32'sd0;

  assign sel_2013 = 32'sd0;

  assign sel_2014 = 32'sd0;

  assign sel_2015 = 32'sd0;

  assign sel_2016 = 32'sd0;

  assign sel_2017 = 32'sd0;

  assign sel_2018 = 32'sd0;

  assign sel_2019 = 32'sd0;

  assign s_317 = 32'sd5;

  assign sel_1_651 = (s_15 == 1'b0 ? sel_2019 :
              s_317);

  assign sel_2020 = 32'sd0;

  assign sel_1_652 = (s_16 == 1'b0 ? sel_1_651 :
              sel_2020);

  assign sel_2021 = 32'sd0;

  assign sel_1_653 = (s_17 == 1'b0 ? sel_1_652 :
              sel_2021);

  assign sel_2022 = 32'sd0;

  assign sel_1_654 = (s_18 == 1'b0 ? sel_1_653 :
              sel_2022);

  assign sel_2023 = 32'sd0;

  assign sel_1_655 = (s_19 == 1'b0 ? sel_1_654 :
              sel_2023);

  assign sel_2024 = 32'sd0;

  assign sel_1_656 = (s_20 == 1'b0 ? sel_1_655 :
              sel_2024);

  assign sel_2025 = 32'sd0;

  assign sel_1_657 = (s_21 == 1'b0 ? sel_1_656 :
              sel_2025);

  assign sel_2026 = 32'sd0;

  assign sel_2027 = 32'sd0;

  assign sel_2028 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_657, sel_2006, sel_2007, sel_2008, sel_2009, sel_2010,
       sel_2011, sel_2012, sel_2013, sel_2014, sel_2015, sel_2016, sel_2017,
       sel_2018, sel_2026, sel_2027, sel_2028) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3753_sel_1 = sel_2027;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3753_sel_1 = sel_2026;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3753_sel_1 = sel_1_657;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3753_sel_1 = sel_2018;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3753_sel_1 = sel_2017;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3753_sel_1 = sel_2016;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3753_sel_1 = sel_2015;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3753_sel_1 = sel_2014;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3753_sel_1 = sel_2013;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3753_sel_1 = sel_2012;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3753_sel_1 = sel_2011;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3753_sel_1 = sel_2010;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3753_sel_1 = sel_2009;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3753_sel_1 = sel_2008;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3753_sel_1 = sel_2007;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3753_sel_1 = sel_2006;
        end
      default :
        begin
          p3753_sel_1 = sel_2028;
        end
    endcase
    sel_1_658 = p3753_sel_1;
  end

  assign tmp_399 = functionOutput_12[sel_1_658];

  assign sel_1_659 = (s_15 == 1'b0 ? tmp_398 :
              tmp_399);

  assign sel_2029 = 32'sd0;

  assign sel_2030 = 32'sd0;

  assign sel_2031 = 32'sd0;

  assign sel_2032 = 32'sd0;

  assign sel_2033 = 32'sd0;

  assign sel_2034 = 32'sd0;

  assign sel_2035 = 32'sd0;

  assign sel_2036 = 32'sd0;

  assign sel_2037 = 32'sd0;

  assign sel_2038 = 32'sd0;

  assign sel_2039 = 32'sd0;

  assign sel_2040 = 32'sd0;

  assign sel_2041 = 32'sd0;

  assign sel_2042 = 32'sd0;

  assign s_318 = 32'sd5;

  assign sel_1_660 = (s_16 == 1'b0 ? sel_2042 :
              s_318);

  assign sel_2043 = 32'sd0;

  assign sel_1_661 = (s_17 == 1'b0 ? sel_1_660 :
              sel_2043);

  assign sel_2044 = 32'sd0;

  assign sel_1_662 = (s_18 == 1'b0 ? sel_1_661 :
              sel_2044);

  assign sel_2045 = 32'sd0;

  assign sel_1_663 = (s_19 == 1'b0 ? sel_1_662 :
              sel_2045);

  assign sel_2046 = 32'sd0;

  assign sel_1_664 = (s_20 == 1'b0 ? sel_1_663 :
              sel_2046);

  assign sel_2047 = 32'sd0;

  assign sel_1_665 = (s_21 == 1'b0 ? sel_1_664 :
              sel_2047);

  assign sel_2048 = 32'sd0;

  assign sel_2049 = 32'sd0;

  assign sel_2050 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_665, sel_2029, sel_2030, sel_2031, sel_2032, sel_2033,
       sel_2034, sel_2035, sel_2036, sel_2037, sel_2038, sel_2039, sel_2040,
       sel_2041, sel_2048, sel_2049, sel_2050) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4950_sel_1 = sel_2049;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4950_sel_1 = sel_2048;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4950_sel_1 = sel_1_665;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4950_sel_1 = sel_2041;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4950_sel_1 = sel_2040;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4950_sel_1 = sel_2039;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4950_sel_1 = sel_2038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4950_sel_1 = sel_2037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4950_sel_1 = sel_2036;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4950_sel_1 = sel_2035;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4950_sel_1 = sel_2034;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4950_sel_1 = sel_2033;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4950_sel_1 = sel_2032;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4950_sel_1 = sel_2031;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4950_sel_1 = sel_2030;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4950_sel_1 = sel_2029;
        end
      default :
        begin
          p4950_sel_1 = sel_2050;
        end
    endcase
    sel_1_666 = p4950_sel_1;
  end

  assign tmp_400 = functionOutput_13[sel_1_666];

  assign sel_1_667 = (s_16 == 1'b0 ? sel_1_659 :
              tmp_400);

  assign sel_2051 = 32'sd0;

  assign sel_2052 = 32'sd0;

  assign sel_2053 = 32'sd0;

  assign sel_2054 = 32'sd0;

  assign sel_2055 = 32'sd0;

  assign sel_2056 = 32'sd0;

  assign sel_2057 = 32'sd0;

  assign sel_2058 = 32'sd0;

  assign sel_2059 = 32'sd0;

  assign sel_2060 = 32'sd0;

  assign sel_2061 = 32'sd0;

  assign sel_2062 = 32'sd0;

  assign sel_2063 = 32'sd0;

  assign sel_2064 = 32'sd0;

  assign s_319 = 32'sd5;

  assign sel_1_668 = (s_17 == 1'b0 ? sel_2064 :
              s_319);

  assign sel_2065 = 32'sd0;

  assign sel_1_669 = (s_18 == 1'b0 ? sel_1_668 :
              sel_2065);

  assign sel_2066 = 32'sd0;

  assign sel_1_670 = (s_19 == 1'b0 ? sel_1_669 :
              sel_2066);

  assign sel_2067 = 32'sd0;

  assign sel_1_671 = (s_20 == 1'b0 ? sel_1_670 :
              sel_2067);

  assign sel_2068 = 32'sd0;

  assign sel_1_672 = (s_21 == 1'b0 ? sel_1_671 :
              sel_2068);

  assign sel_2069 = 32'sd0;

  assign sel_2070 = 32'sd0;

  assign sel_2071 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_672, sel_2051, sel_2052, sel_2053, sel_2054, sel_2055,
       sel_2056, sel_2057, sel_2058, sel_2059, sel_2060, sel_2061, sel_2062,
       sel_2063, sel_2069, sel_2070, sel_2071) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4304_sel_1 = sel_2070;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4304_sel_1 = sel_2069;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4304_sel_1 = sel_1_672;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4304_sel_1 = sel_2063;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4304_sel_1 = sel_2062;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4304_sel_1 = sel_2061;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4304_sel_1 = sel_2060;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4304_sel_1 = sel_2059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4304_sel_1 = sel_2058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4304_sel_1 = sel_2057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4304_sel_1 = sel_2056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4304_sel_1 = sel_2055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4304_sel_1 = sel_2054;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4304_sel_1 = sel_2053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4304_sel_1 = sel_2052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4304_sel_1 = sel_2051;
        end
      default :
        begin
          p4304_sel_1 = sel_2071;
        end
    endcase
    sel_1_673 = p4304_sel_1;
  end

  assign tmp_401 = functionOutput_14[sel_1_673];

  assign sel_1_674 = (s_17 == 1'b0 ? sel_1_667 :
              tmp_401);

  always @(posedge clk)
    begin : rd_334_process
      if (rst == 1'b1) begin
        sel_1_675 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_675 <= sel_1_674;
        end
      end
    end

  assign sel_2072 = 32'sd0;

  assign sel_2073 = 32'sd0;

  assign sel_2074 = 32'sd0;

  assign sel_2075 = 32'sd0;

  assign sel_2076 = 32'sd0;

  assign sel_2077 = 32'sd0;

  assign sel_2078 = 32'sd0;

  assign sel_2079 = 32'sd0;

  assign sel_2080 = 32'sd0;

  assign sel_2081 = 32'sd0;

  assign sel_2082 = 32'sd0;

  assign sel_2083 = 32'sd0;

  assign sel_2084 = 32'sd0;

  assign sel_2085 = 32'sd0;

  assign s_320 = 32'sd5;

  assign sel_1_676 = (s_18 == 1'b0 ? sel_2085 :
              s_320);

  assign sel_2086 = 32'sd0;

  assign sel_1_677 = (s_19 == 1'b0 ? sel_1_676 :
              sel_2086);

  assign sel_2087 = 32'sd0;

  assign sel_1_678 = (s_20 == 1'b0 ? sel_1_677 :
              sel_2087);

  assign sel_2088 = 32'sd0;

  assign sel_1_679 = (s_21 == 1'b0 ? sel_1_678 :
              sel_2088);

  assign sel_2089 = 32'sd0;

  assign sel_2090 = 32'sd0;

  assign sel_2091 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_679, sel_2072, sel_2073, sel_2074, sel_2075, sel_2076,
       sel_2077, sel_2078, sel_2079, sel_2080, sel_2081, sel_2082, sel_2083,
       sel_2084, sel_2089, sel_2090, sel_2091) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3658_sel_1 = sel_2090;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3658_sel_1 = sel_2089;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3658_sel_1 = sel_1_679;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3658_sel_1 = sel_2084;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3658_sel_1 = sel_2083;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3658_sel_1 = sel_2082;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3658_sel_1 = sel_2081;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3658_sel_1 = sel_2080;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3658_sel_1 = sel_2079;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3658_sel_1 = sel_2078;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3658_sel_1 = sel_2077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3658_sel_1 = sel_2076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3658_sel_1 = sel_2075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3658_sel_1 = sel_2074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3658_sel_1 = sel_2073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3658_sel_1 = sel_2072;
        end
      default :
        begin
          p3658_sel_1 = sel_2091;
        end
    endcase
    sel_1_680 = p3658_sel_1;
  end

  assign tmp_402 = functionOutput_15[sel_1_680];

  always @(posedge clk)
    begin : rd_332_process
      if (rst == 1'b1) begin
        s_321 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_321 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_319_process
      if (rst == 1'b1) begin
        tmp_403 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_403 <= tmp_402;
        end
      end
    end

  assign sel_1_681 = (s_315 == 1'b0 ? sel_1_675 :
              tmp_403);

  assign sel_2092 = 32'sd0;

  assign sel_2093 = 32'sd0;

  assign sel_2094 = 32'sd0;

  assign sel_2095 = 32'sd0;

  assign sel_2096 = 32'sd0;

  assign sel_2097 = 32'sd0;

  assign sel_2098 = 32'sd0;

  assign sel_2099 = 32'sd0;

  assign sel_2100 = 32'sd0;

  assign sel_2101 = 32'sd0;

  assign sel_2102 = 32'sd0;

  assign sel_2103 = 32'sd0;

  assign sel_2104 = 32'sd0;

  assign sel_2105 = 32'sd0;

  assign s_322 = 32'sd5;

  assign sel_1_682 = (s_19 == 1'b0 ? sel_2105 :
              s_322);

  assign sel_2106 = 32'sd0;

  assign sel_1_683 = (s_20 == 1'b0 ? sel_1_682 :
              sel_2106);

  assign sel_2107 = 32'sd0;

  assign sel_1_684 = (s_21 == 1'b0 ? sel_1_683 :
              sel_2107);

  assign sel_2108 = 32'sd0;

  assign sel_2109 = 32'sd0;

  assign sel_2110 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_684, sel_2092, sel_2093, sel_2094, sel_2095, sel_2096,
       sel_2097, sel_2098, sel_2099, sel_2100, sel_2101, sel_2102, sel_2103,
       sel_2104, sel_2108, sel_2109, sel_2110) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5159_sel_1 = sel_2109;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5159_sel_1 = sel_2108;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5159_sel_1 = sel_1_684;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5159_sel_1 = sel_2104;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5159_sel_1 = sel_2103;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5159_sel_1 = sel_2102;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5159_sel_1 = sel_2101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5159_sel_1 = sel_2100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5159_sel_1 = sel_2099;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5159_sel_1 = sel_2098;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5159_sel_1 = sel_2097;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5159_sel_1 = sel_2096;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5159_sel_1 = sel_2095;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5159_sel_1 = sel_2094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5159_sel_1 = sel_2093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5159_sel_1 = sel_2092;
        end
      default :
        begin
          p5159_sel_1 = sel_2110;
        end
    endcase
    sel_1_685 = p5159_sel_1;
  end

  assign tmp_404 = functionOutput_16[sel_1_685];

  always @(posedge clk)
    begin : rd_331_process
      if (rst == 1'b1) begin
        s_323 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_323 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_318_process
      if (rst == 1'b1) begin
        tmp_405 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_405 <= tmp_404;
        end
      end
    end

  assign sel_1_686 = (s_321 == 1'b0 ? sel_1_681 :
              tmp_405);

  assign sel_2111 = 32'sd0;

  assign sel_2112 = 32'sd0;

  assign sel_2113 = 32'sd0;

  assign sel_2114 = 32'sd0;

  assign sel_2115 = 32'sd0;

  assign sel_2116 = 32'sd0;

  assign sel_2117 = 32'sd0;

  assign sel_2118 = 32'sd0;

  assign sel_2119 = 32'sd0;

  assign sel_2120 = 32'sd0;

  assign sel_2121 = 32'sd0;

  assign sel_2122 = 32'sd0;

  assign sel_2123 = 32'sd0;

  assign sel_2124 = 32'sd0;

  assign s_324 = 32'sd5;

  assign sel_1_687 = (s_20 == 1'b0 ? sel_2124 :
              s_324);

  assign sel_2125 = 32'sd0;

  assign sel_1_688 = (s_21 == 1'b0 ? sel_1_687 :
              sel_2125);

  assign sel_2126 = 32'sd0;

  assign sel_2127 = 32'sd0;

  assign sel_2128 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_688, sel_2111, sel_2112, sel_2113, sel_2114, sel_2115,
       sel_2116, sel_2117, sel_2118, sel_2119, sel_2120, sel_2121, sel_2122,
       sel_2123, sel_2126, sel_2127, sel_2128) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4209_sel_1 = sel_2127;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4209_sel_1 = sel_2126;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4209_sel_1 = sel_1_688;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4209_sel_1 = sel_2123;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4209_sel_1 = sel_2122;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4209_sel_1 = sel_2121;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4209_sel_1 = sel_2120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4209_sel_1 = sel_2119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4209_sel_1 = sel_2118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4209_sel_1 = sel_2117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4209_sel_1 = sel_2116;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4209_sel_1 = sel_2115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4209_sel_1 = sel_2114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4209_sel_1 = sel_2113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4209_sel_1 = sel_2112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4209_sel_1 = sel_2111;
        end
      default :
        begin
          p4209_sel_1 = sel_2128;
        end
    endcase
    sel_1_689 = p4209_sel_1;
  end

  assign tmp_406 = functionOutput_17[sel_1_689];

  always @(posedge clk)
    begin : rd_330_process
      if (rst == 1'b1) begin
        s_325 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_325 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_317_process
      if (rst == 1'b1) begin
        tmp_407 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_407 <= tmp_406;
        end
      end
    end

  assign sel_1_690 = (s_323 == 1'b0 ? sel_1_686 :
              tmp_407);

  assign sel_2129 = 32'sd0;

  assign sel_2130 = 32'sd0;

  assign sel_2131 = 32'sd0;

  assign sel_2132 = 32'sd0;

  assign sel_2133 = 32'sd0;

  assign sel_2134 = 32'sd0;

  assign sel_2135 = 32'sd0;

  assign sel_2136 = 32'sd0;

  assign sel_2137 = 32'sd0;

  assign sel_2138 = 32'sd0;

  assign sel_2139 = 32'sd0;

  assign sel_2140 = 32'sd0;

  assign sel_2141 = 32'sd0;

  assign sel_2142 = 32'sd0;

  assign s_326 = 32'sd5;

  assign sel_1_691 = (s_21 == 1'b0 ? sel_2142 :
              s_326);

  assign sel_2143 = 32'sd0;

  assign sel_2144 = 32'sd0;

  assign sel_2145 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_691, sel_2129, sel_2130, sel_2131, sel_2132, sel_2133,
       sel_2134, sel_2135, sel_2136, sel_2137, sel_2138, sel_2139, sel_2140,
       sel_2141, sel_2143, sel_2144, sel_2145) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4266_sel_1 = sel_2144;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4266_sel_1 = sel_2143;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4266_sel_1 = sel_1_691;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4266_sel_1 = sel_2141;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4266_sel_1 = sel_2140;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4266_sel_1 = sel_2139;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4266_sel_1 = sel_2138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4266_sel_1 = sel_2137;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4266_sel_1 = sel_2136;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4266_sel_1 = sel_2135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4266_sel_1 = sel_2134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4266_sel_1 = sel_2133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4266_sel_1 = sel_2132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4266_sel_1 = sel_2131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4266_sel_1 = sel_2130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4266_sel_1 = sel_2129;
        end
      default :
        begin
          p4266_sel_1 = sel_2145;
        end
    endcase
    sel_1_692 = p4266_sel_1;
  end

  assign tmp_408 = functionOutput_18[sel_1_692];

  always @(posedge clk)
    begin : rd_327_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_64 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_64 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2146 = 32'sd0;

  assign sel_2147 = 32'sd0;

  assign sel_2148 = 32'sd0;

  assign sel_2149 = 32'sd0;

  assign sel_2150 = 32'sd0;

  assign sel_2151 = 32'sd0;

  assign sel_2152 = 32'sd0;

  assign sel_2153 = 32'sd0;

  assign sel_2154 = 32'sd0;

  assign sel_2155 = 32'sd0;

  assign sel_2156 = 32'sd0;

  assign sel_2157 = 32'sd0;

  assign sel_2158 = 32'sd0;

  always @(posedge clk)
    begin : rd_328_process
      if (rst == 1'b1) begin
        s_327 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_327 <= s_12;
        end
      end
    end

  assign sel_2159 = 32'sd0;

  assign sel_2160 = 32'sd0;

  assign sel_2161 = 32'sd0;

  assign s_328 = 32'sd5;

  assign sel_1_693 = (tmp_4 == 1'b0 ? sel_2161 :
              s_328);

  assign sel_2162 = 32'sd0;

  assign sel_1_694 = (tmp_6 == 1'b0 ? sel_1_693 :
              sel_2162);

  assign sel_2163 = 32'sd0;

  assign sel_1_695 = (tmp_8 == 1'b0 ? sel_1_694 :
              sel_2163);

  assign sel_2164 = 32'sd0;

  assign sel_1_696 = (tmp_10 == 1'b0 ? sel_1_695 :
              sel_2164);

  assign sel_2165 = 32'sd0;

  assign sel_1_697 = (tmp_12 == 1'b0 ? sel_1_696 :
              sel_2165);

  assign sel_2166 = 32'sd0;

  assign sel_1_698 = (tmp_14 == 1'b0 ? sel_1_697 :
              sel_2166);

  assign sel_2167 = 32'sd0;

  assign sel_1_699 = (tmp_16 == 1'b0 ? sel_1_698 :
              sel_2167);

  assign sel_2168 = 32'sd0;

  assign sel_1_700 = (tmp_18 == 1'b0 ? sel_1_699 :
              sel_2168);

  assign sel_1_701 = (s_10 == 1'b0 ? sel_2160 :
              sel_1_700);

  assign sel_1_702 = (s_11 == 1'b0 ? sel_2159 :
              sel_1_701);

  always @(posedge clk)
    begin : rd_329_process
      if (rst == 1'b1) begin
        sel_1_703 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_703 <= sel_1_702;
        end
      end
    end

  assign sel_2169 = 32'sd0;

  assign sel_2170 = 32'sd0;

  assign sel_1_704 = (s_327 == 1'b0 ? sel_1_703 :
              sel_2170);

  assign sel_2171 = 32'sd0;

  always @(posedge clk)
    begin : rd_341_process
      if (rst == 1'b1) begin
        tmp_409 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_409 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_342_process
      if (rst == 1'b1) begin
        for(rd_342_t_1 = 32'sd0; rd_342_t_1 <= 32'sd11; rd_342_t_1 = rd_342_t_1 + 32'sd1) begin
          rd_342_reg[rd_342_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_342_t_0_1 = 32'sd0; rd_342_t_0_1 <= 32'sd11; rd_342_t_0_1 = rd_342_t_0_1 + 32'sd1) begin
            rd_342_reg[rd_342_t_0_1] <= rd_342_reg_next[rd_342_t_0_1];
          end
        end
      end
    end
  genvar t_0_051;
  generate
    for(t_0_051 = 32'sd0; t_0_051 <= 32'sd11; t_0_051 = t_0_051 + 32'sd1) begin:rd_342_reg_next_gen
      assign functionOutput_32[t_0_051] = rd_342_reg[t_0_051];
      assign rd_342_reg_next[t_0_051] = functionOutput_19[t_0_051];
    end
  endgenerate

  assign sel_2172 = 32'sd0;

  always @(is_SPI_MNGR_64, sel_1_704, sel_2146, sel_2147, sel_2148, sel_2149, sel_2150,
       sel_2151, sel_2152, sel_2153, sel_2154, sel_2155, sel_2156, sel_2157,
       sel_2158, sel_2169, sel_2171, sel_2172) begin
    case ( is_SPI_MNGR_64)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2214_sel_1 = sel_2171;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2214_sel_1 = sel_1_704;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2214_sel_1 = sel_2169;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2214_sel_1 = sel_2158;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2214_sel_1 = sel_2157;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2214_sel_1 = sel_2156;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2214_sel_1 = sel_2155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2214_sel_1 = sel_2154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2214_sel_1 = sel_2153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2214_sel_1 = sel_2152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2214_sel_1 = sel_2151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2214_sel_1 = sel_2150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2214_sel_1 = sel_2149;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2214_sel_1 = sel_2148;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2214_sel_1 = sel_2147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2214_sel_1 = sel_2146;
        end
      default :
        begin
          p2214_sel_1 = sel_2172;
        end
    endcase
    sel_1_705 = p2214_sel_1;
  end

  assign tmp_410 = functionOutput_32[sel_1_705];

  assign sel_2173 = 32'sd0;

  assign sel_2174 = 32'sd0;

  assign sel_2175 = 32'sd0;

  assign sel_2176 = 32'sd0;

  assign sel_2177 = 32'sd0;

  assign sel_2178 = 32'sd0;

  assign sel_2179 = 32'sd0;

  assign sel_2180 = 32'sd0;

  assign sel_2181 = 32'sd0;

  assign sel_2182 = 32'sd0;

  assign sel_2183 = 32'sd0;

  assign sel_2184 = 32'sd0;

  assign sel_2185 = 32'sd0;

  assign sel_2186 = 32'sd0;

  assign sel_2187 = 32'sd0;

  assign sel_2188 = 32'sd0;

  assign sel_2189 = 32'sd0;

  assign s_329 = 32'sd5;

  assign sel_1_706 = (tmp_6 == 1'b0 ? sel_2189 :
              s_329);

  assign sel_2190 = 32'sd0;

  assign sel_1_707 = (tmp_8 == 1'b0 ? sel_1_706 :
              sel_2190);

  assign sel_2191 = 32'sd0;

  assign sel_1_708 = (tmp_10 == 1'b0 ? sel_1_707 :
              sel_2191);

  assign sel_2192 = 32'sd0;

  assign sel_1_709 = (tmp_12 == 1'b0 ? sel_1_708 :
              sel_2192);

  assign sel_2193 = 32'sd0;

  assign sel_1_710 = (tmp_14 == 1'b0 ? sel_1_709 :
              sel_2193);

  assign sel_2194 = 32'sd0;

  assign sel_1_711 = (tmp_16 == 1'b0 ? sel_1_710 :
              sel_2194);

  assign sel_2195 = 32'sd0;

  assign sel_1_712 = (tmp_18 == 1'b0 ? sel_1_711 :
              sel_2195);

  assign sel_1_713 = (s_10 == 1'b0 ? sel_2188 :
              sel_1_712);

  assign sel_1_714 = (s_11 == 1'b0 ? sel_2187 :
              sel_1_713);

  assign sel_2196 = 32'sd0;

  assign sel_1_715 = (s_12 == 1'b0 ? sel_1_714 :
              sel_2196);

  assign sel_2197 = 32'sd0;

  assign sel_2198 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_715, sel_2173, sel_2174, sel_2175, sel_2176, sel_2177,
       sel_2178, sel_2179, sel_2180, sel_2181, sel_2182, sel_2183, sel_2184,
       sel_2185, sel_2186, sel_2197, sel_2198) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2613_sel_1 = sel_2197;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2613_sel_1 = sel_1_715;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2613_sel_1 = sel_2186;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2613_sel_1 = sel_2185;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2613_sel_1 = sel_2184;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2613_sel_1 = sel_2183;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2613_sel_1 = sel_2182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2613_sel_1 = sel_2181;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2613_sel_1 = sel_2180;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2613_sel_1 = sel_2179;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2613_sel_1 = sel_2178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2613_sel_1 = sel_2177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2613_sel_1 = sel_2176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2613_sel_1 = sel_2175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2613_sel_1 = sel_2174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2613_sel_1 = sel_2173;
        end
      default :
        begin
          p2613_sel_1 = sel_2198;
        end
    endcase
    sel_1_716 = p2613_sel_1;
  end

  assign tmp_411 = functionOutput_21[sel_1_716];

  always @(posedge clk)
    begin : rd_340_process
      if (rst == 1'b1) begin
        tmp_412 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_412 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_326_process
      if (rst == 1'b1) begin
        tmp_413 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_413 <= tmp_411;
        end
      end
    end

  assign sel_1_717 = (tmp_409 == 1'b0 ? tmp_410 :
              tmp_413);

  assign sel_2199 = 32'sd0;

  assign sel_2200 = 32'sd0;

  assign sel_2201 = 32'sd0;

  assign sel_2202 = 32'sd0;

  assign sel_2203 = 32'sd0;

  assign sel_2204 = 32'sd0;

  assign sel_2205 = 32'sd0;

  assign sel_2206 = 32'sd0;

  assign sel_2207 = 32'sd0;

  assign sel_2208 = 32'sd0;

  assign sel_2209 = 32'sd0;

  assign sel_2210 = 32'sd0;

  assign sel_2211 = 32'sd0;

  assign sel_2212 = 32'sd0;

  assign sel_2213 = 32'sd0;

  assign sel_2214 = 32'sd0;

  assign sel_2215 = 32'sd0;

  assign s_330 = 32'sd5;

  assign sel_1_718 = (tmp_8 == 1'b0 ? sel_2215 :
              s_330);

  assign sel_2216 = 32'sd0;

  assign sel_1_719 = (tmp_10 == 1'b0 ? sel_1_718 :
              sel_2216);

  assign sel_2217 = 32'sd0;

  assign sel_1_720 = (tmp_12 == 1'b0 ? sel_1_719 :
              sel_2217);

  assign sel_2218 = 32'sd0;

  assign sel_1_721 = (tmp_14 == 1'b0 ? sel_1_720 :
              sel_2218);

  assign sel_2219 = 32'sd0;

  assign sel_1_722 = (tmp_16 == 1'b0 ? sel_1_721 :
              sel_2219);

  assign sel_2220 = 32'sd0;

  assign sel_1_723 = (tmp_18 == 1'b0 ? sel_1_722 :
              sel_2220);

  assign sel_1_724 = (s_10 == 1'b0 ? sel_2214 :
              sel_1_723);

  assign sel_1_725 = (s_11 == 1'b0 ? sel_2213 :
              sel_1_724);

  assign sel_2221 = 32'sd0;

  assign sel_1_726 = (s_12 == 1'b0 ? sel_1_725 :
              sel_2221);

  assign sel_2222 = 32'sd0;

  assign sel_2223 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_726, sel_2199, sel_2200, sel_2201, sel_2202, sel_2203,
       sel_2204, sel_2205, sel_2206, sel_2207, sel_2208, sel_2209, sel_2210,
       sel_2211, sel_2212, sel_2222, sel_2223) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2860_sel_1 = sel_2222;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2860_sel_1 = sel_1_726;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2860_sel_1 = sel_2212;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2860_sel_1 = sel_2211;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2860_sel_1 = sel_2210;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2860_sel_1 = sel_2209;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2860_sel_1 = sel_2208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2860_sel_1 = sel_2207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2860_sel_1 = sel_2206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2860_sel_1 = sel_2205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2860_sel_1 = sel_2204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2860_sel_1 = sel_2203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2860_sel_1 = sel_2202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2860_sel_1 = sel_2201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2860_sel_1 = sel_2200;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2860_sel_1 = sel_2199;
        end
      default :
        begin
          p2860_sel_1 = sel_2223;
        end
    endcase
    sel_1_727 = p2860_sel_1;
  end

  assign tmp_414 = functionOutput_22[sel_1_727];

  always @(posedge clk)
    begin : rd_339_process
      if (rst == 1'b1) begin
        tmp_415 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_415 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_325_process
      if (rst == 1'b1) begin
        tmp_416 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_416 <= tmp_414;
        end
      end
    end

  assign sel_1_728 = (tmp_412 == 1'b0 ? sel_1_717 :
              tmp_416);

  assign sel_2224 = 32'sd0;

  assign sel_2225 = 32'sd0;

  assign sel_2226 = 32'sd0;

  assign sel_2227 = 32'sd0;

  assign sel_2228 = 32'sd0;

  assign sel_2229 = 32'sd0;

  assign sel_2230 = 32'sd0;

  assign sel_2231 = 32'sd0;

  assign sel_2232 = 32'sd0;

  assign sel_2233 = 32'sd0;

  assign sel_2234 = 32'sd0;

  assign sel_2235 = 32'sd0;

  assign sel_2236 = 32'sd0;

  assign sel_2237 = 32'sd0;

  assign sel_2238 = 32'sd0;

  assign sel_2239 = 32'sd0;

  assign sel_2240 = 32'sd0;

  assign s_331 = 32'sd5;

  assign sel_1_729 = (tmp_10 == 1'b0 ? sel_2240 :
              s_331);

  assign sel_2241 = 32'sd0;

  assign sel_1_730 = (tmp_12 == 1'b0 ? sel_1_729 :
              sel_2241);

  assign sel_2242 = 32'sd0;

  assign sel_1_731 = (tmp_14 == 1'b0 ? sel_1_730 :
              sel_2242);

  assign sel_2243 = 32'sd0;

  assign sel_1_732 = (tmp_16 == 1'b0 ? sel_1_731 :
              sel_2243);

  assign sel_2244 = 32'sd0;

  assign sel_1_733 = (tmp_18 == 1'b0 ? sel_1_732 :
              sel_2244);

  assign sel_1_734 = (s_10 == 1'b0 ? sel_2239 :
              sel_1_733);

  assign sel_1_735 = (s_11 == 1'b0 ? sel_2238 :
              sel_1_734);

  assign sel_2245 = 32'sd0;

  assign sel_1_736 = (s_12 == 1'b0 ? sel_1_735 :
              sel_2245);

  assign sel_2246 = 32'sd0;

  assign sel_2247 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_736, sel_2224, sel_2225, sel_2226, sel_2227, sel_2228,
       sel_2229, sel_2230, sel_2231, sel_2232, sel_2233, sel_2234, sel_2235,
       sel_2236, sel_2237, sel_2246, sel_2247) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2290_sel_1 = sel_2246;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2290_sel_1 = sel_1_736;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2290_sel_1 = sel_2237;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2290_sel_1 = sel_2236;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2290_sel_1 = sel_2235;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2290_sel_1 = sel_2234;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2290_sel_1 = sel_2233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2290_sel_1 = sel_2232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2290_sel_1 = sel_2231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2290_sel_1 = sel_2230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2290_sel_1 = sel_2229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2290_sel_1 = sel_2228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2290_sel_1 = sel_2227;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2290_sel_1 = sel_2226;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2290_sel_1 = sel_2225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2290_sel_1 = sel_2224;
        end
      default :
        begin
          p2290_sel_1 = sel_2247;
        end
    endcase
    sel_1_737 = p2290_sel_1;
  end

  assign tmp_417 = functionOutput_23[sel_1_737];

  always @(posedge clk)
    begin : rd_338_process
      if (rst == 1'b1) begin
        tmp_418 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_418 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_324_process
      if (rst == 1'b1) begin
        tmp_419 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_419 <= tmp_417;
        end
      end
    end

  assign sel_1_738 = (tmp_415 == 1'b0 ? sel_1_728 :
              tmp_419);

  assign sel_2248 = 32'sd0;

  assign sel_2249 = 32'sd0;

  assign sel_2250 = 32'sd0;

  assign sel_2251 = 32'sd0;

  assign sel_2252 = 32'sd0;

  assign sel_2253 = 32'sd0;

  assign sel_2254 = 32'sd0;

  assign sel_2255 = 32'sd0;

  assign sel_2256 = 32'sd0;

  assign sel_2257 = 32'sd0;

  assign sel_2258 = 32'sd0;

  assign sel_2259 = 32'sd0;

  assign sel_2260 = 32'sd0;

  assign sel_2261 = 32'sd0;

  assign sel_2262 = 32'sd0;

  assign sel_2263 = 32'sd0;

  assign sel_2264 = 32'sd0;

  assign s_332 = 32'sd5;

  assign sel_1_739 = (tmp_12 == 1'b0 ? sel_2264 :
              s_332);

  assign sel_2265 = 32'sd0;

  assign sel_1_740 = (tmp_14 == 1'b0 ? sel_1_739 :
              sel_2265);

  assign sel_2266 = 32'sd0;

  assign sel_1_741 = (tmp_16 == 1'b0 ? sel_1_740 :
              sel_2266);

  assign sel_2267 = 32'sd0;

  assign sel_1_742 = (tmp_18 == 1'b0 ? sel_1_741 :
              sel_2267);

  assign sel_1_743 = (s_10 == 1'b0 ? sel_2263 :
              sel_1_742);

  assign sel_1_744 = (s_11 == 1'b0 ? sel_2262 :
              sel_1_743);

  assign sel_2268 = 32'sd0;

  assign sel_1_745 = (s_12 == 1'b0 ? sel_1_744 :
              sel_2268);

  assign sel_2269 = 32'sd0;

  assign sel_2270 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_745, sel_2248, sel_2249, sel_2250, sel_2251, sel_2252,
       sel_2253, sel_2254, sel_2255, sel_2256, sel_2257, sel_2258, sel_2259,
       sel_2260, sel_2261, sel_2269, sel_2270) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1606_sel_1 = sel_2269;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1606_sel_1 = sel_1_745;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1606_sel_1 = sel_2261;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1606_sel_1 = sel_2260;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1606_sel_1 = sel_2259;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1606_sel_1 = sel_2258;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1606_sel_1 = sel_2257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1606_sel_1 = sel_2256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1606_sel_1 = sel_2255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1606_sel_1 = sel_2254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1606_sel_1 = sel_2253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1606_sel_1 = sel_2252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1606_sel_1 = sel_2251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1606_sel_1 = sel_2250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1606_sel_1 = sel_2249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1606_sel_1 = sel_2248;
        end
      default :
        begin
          p1606_sel_1 = sel_2270;
        end
    endcase
    sel_1_746 = p1606_sel_1;
  end

  assign tmp_420 = functionOutput_24[sel_1_746];

  always @(posedge clk)
    begin : rd_337_process
      if (rst == 1'b1) begin
        tmp_421 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_421 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_323_process
      if (rst == 1'b1) begin
        tmp_422 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_422 <= tmp_420;
        end
      end
    end

  assign sel_1_747 = (tmp_418 == 1'b0 ? sel_1_738 :
              tmp_422);

  assign sel_2271 = 32'sd0;

  assign sel_2272 = 32'sd0;

  assign sel_2273 = 32'sd0;

  assign sel_2274 = 32'sd0;

  assign sel_2275 = 32'sd0;

  assign sel_2276 = 32'sd0;

  assign sel_2277 = 32'sd0;

  assign sel_2278 = 32'sd0;

  assign sel_2279 = 32'sd0;

  assign sel_2280 = 32'sd0;

  assign sel_2281 = 32'sd0;

  assign sel_2282 = 32'sd0;

  assign sel_2283 = 32'sd0;

  assign sel_2284 = 32'sd0;

  assign sel_2285 = 32'sd0;

  assign sel_2286 = 32'sd0;

  assign sel_2287 = 32'sd0;

  assign s_333 = 32'sd5;

  assign sel_1_748 = (tmp_14 == 1'b0 ? sel_2287 :
              s_333);

  assign sel_2288 = 32'sd0;

  assign sel_1_749 = (tmp_16 == 1'b0 ? sel_1_748 :
              sel_2288);

  assign sel_2289 = 32'sd0;

  assign sel_1_750 = (tmp_18 == 1'b0 ? sel_1_749 :
              sel_2289);

  assign sel_1_751 = (s_10 == 1'b0 ? sel_2286 :
              sel_1_750);

  assign sel_1_752 = (s_11 == 1'b0 ? sel_2285 :
              sel_1_751);

  assign sel_2290 = 32'sd0;

  assign sel_1_753 = (s_12 == 1'b0 ? sel_1_752 :
              sel_2290);

  assign sel_2291 = 32'sd0;

  assign sel_2292 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_753, sel_2271, sel_2272, sel_2273, sel_2274, sel_2275,
       sel_2276, sel_2277, sel_2278, sel_2279, sel_2280, sel_2281, sel_2282,
       sel_2283, sel_2284, sel_2291, sel_2292) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3126_sel_1 = sel_2291;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3126_sel_1 = sel_1_753;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3126_sel_1 = sel_2284;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3126_sel_1 = sel_2283;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3126_sel_1 = sel_2282;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3126_sel_1 = sel_2281;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3126_sel_1 = sel_2280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3126_sel_1 = sel_2279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3126_sel_1 = sel_2278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3126_sel_1 = sel_2277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3126_sel_1 = sel_2276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3126_sel_1 = sel_2275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3126_sel_1 = sel_2274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3126_sel_1 = sel_2273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3126_sel_1 = sel_2272;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3126_sel_1 = sel_2271;
        end
      default :
        begin
          p3126_sel_1 = sel_2292;
        end
    endcase
    sel_1_754 = p3126_sel_1;
  end

  assign tmp_423 = functionOutput_25[sel_1_754];

  always @(posedge clk)
    begin : rd_336_process
      if (rst == 1'b1) begin
        tmp_424 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_424 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_322_process
      if (rst == 1'b1) begin
        tmp_425 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_425 <= tmp_423;
        end
      end
    end

  assign sel_1_755 = (tmp_421 == 1'b0 ? sel_1_747 :
              tmp_425);

  assign sel_2293 = 32'sd0;

  assign sel_2294 = 32'sd0;

  assign sel_2295 = 32'sd0;

  assign sel_2296 = 32'sd0;

  assign sel_2297 = 32'sd0;

  assign sel_2298 = 32'sd0;

  assign sel_2299 = 32'sd0;

  assign sel_2300 = 32'sd0;

  assign sel_2301 = 32'sd0;

  assign sel_2302 = 32'sd0;

  assign sel_2303 = 32'sd0;

  assign sel_2304 = 32'sd0;

  assign sel_2305 = 32'sd0;

  assign sel_2306 = 32'sd0;

  assign sel_2307 = 32'sd0;

  assign sel_2308 = 32'sd0;

  assign sel_2309 = 32'sd0;

  assign s_334 = 32'sd5;

  assign sel_1_756 = (tmp_16 == 1'b0 ? sel_2309 :
              s_334);

  assign sel_2310 = 32'sd0;

  assign sel_1_757 = (tmp_18 == 1'b0 ? sel_1_756 :
              sel_2310);

  assign sel_1_758 = (s_10 == 1'b0 ? sel_2308 :
              sel_1_757);

  assign sel_1_759 = (s_11 == 1'b0 ? sel_2307 :
              sel_1_758);

  assign sel_2311 = 32'sd0;

  assign sel_1_760 = (s_12 == 1'b0 ? sel_1_759 :
              sel_2311);

  assign sel_2312 = 32'sd0;

  assign sel_2313 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_760, sel_2293, sel_2294, sel_2295, sel_2296, sel_2297,
       sel_2298, sel_2299, sel_2300, sel_2301, sel_2302, sel_2303, sel_2304,
       sel_2305, sel_2306, sel_2312, sel_2313) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2328_sel_1 = sel_2312;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2328_sel_1 = sel_1_760;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2328_sel_1 = sel_2306;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2328_sel_1 = sel_2305;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2328_sel_1 = sel_2304;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2328_sel_1 = sel_2303;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2328_sel_1 = sel_2302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2328_sel_1 = sel_2301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2328_sel_1 = sel_2300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2328_sel_1 = sel_2299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2328_sel_1 = sel_2298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2328_sel_1 = sel_2297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2328_sel_1 = sel_2296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2328_sel_1 = sel_2295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2328_sel_1 = sel_2294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2328_sel_1 = sel_2293;
        end
      default :
        begin
          p2328_sel_1 = sel_2313;
        end
    endcase
    sel_1_761 = p2328_sel_1;
  end

  assign tmp_426 = functionOutput_26[sel_1_761];

  always @(posedge clk)
    begin : rd_335_process
      if (rst == 1'b1) begin
        tmp_427 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_427 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_321_process
      if (rst == 1'b1) begin
        tmp_428 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_428 <= tmp_426;
        end
      end
    end

  assign sel_1_762 = (tmp_424 == 1'b0 ? sel_1_755 :
              tmp_428);

  assign sel_2314 = 32'sd0;

  assign sel_2315 = 32'sd0;

  assign sel_2316 = 32'sd0;

  assign sel_2317 = 32'sd0;

  assign sel_2318 = 32'sd0;

  assign sel_2319 = 32'sd0;

  assign sel_2320 = 32'sd0;

  assign sel_2321 = 32'sd0;

  assign sel_2322 = 32'sd0;

  assign sel_2323 = 32'sd0;

  assign sel_2324 = 32'sd0;

  assign sel_2325 = 32'sd0;

  assign sel_2326 = 32'sd0;

  assign sel_2327 = 32'sd0;

  assign sel_2328 = 32'sd0;

  assign sel_2329 = 32'sd0;

  assign sel_2330 = 32'sd0;

  assign s_335 = 32'sd5;

  assign sel_1_763 = (tmp_18 == 1'b0 ? sel_2330 :
              s_335);

  assign sel_1_764 = (s_10 == 1'b0 ? sel_2329 :
              sel_1_763);

  assign sel_1_765 = (s_11 == 1'b0 ? sel_2328 :
              sel_1_764);

  assign sel_2331 = 32'sd0;

  assign sel_1_766 = (s_12 == 1'b0 ? sel_1_765 :
              sel_2331);

  assign sel_2332 = 32'sd0;

  assign sel_2333 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_766, sel_2314, sel_2315, sel_2316, sel_2317, sel_2318,
       sel_2319, sel_2320, sel_2321, sel_2322, sel_2323, sel_2324, sel_2325,
       sel_2326, sel_2327, sel_2332, sel_2333) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1986_sel_1 = sel_2332;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1986_sel_1 = sel_1_766;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1986_sel_1 = sel_2327;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1986_sel_1 = sel_2326;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1986_sel_1 = sel_2325;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1986_sel_1 = sel_2324;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1986_sel_1 = sel_2323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1986_sel_1 = sel_2322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1986_sel_1 = sel_2321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1986_sel_1 = sel_2320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1986_sel_1 = sel_2319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1986_sel_1 = sel_2318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1986_sel_1 = sel_2317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1986_sel_1 = sel_2316;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1986_sel_1 = sel_2315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1986_sel_1 = sel_2314;
        end
      default :
        begin
          p1986_sel_1 = sel_2333;
        end
    endcase
    sel_1_767 = p1986_sel_1;
  end

  assign tmp_429 = functionOutput_27[sel_1_767];

  assign sel_2334 = 8'd0;

  always @(posedge clk)
    begin : rd_316_process
      if (rst == 1'b1) begin
        tmp_430 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_430 <= tmp_408;
        end
      end
    end

  assign sel_1_768 = (s_325 == 1'b0 ? sel_1_690 :
              tmp_430);

  always @(posedge clk)
    begin : rd_320_process
      if (rst == 1'b1) begin
        tmp_431 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_431 <= tmp_429;
        end
      end
    end

  assign sel_1_769 = (tmp_427 == 1'b0 ? sel_1_762 :
              tmp_431);

  assign sel_2335 = 8'd0;

  always @(posedge clk)
    begin : rd_343_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_65 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_65 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2336 = 1'b0;

  assign sel_2337 = 1'b0;

  assign sel_2338 = 1'b0;

  assign sel_2339 = 1'b0;

  assign sel_2340 = 1'b0;

  assign sel_2341 = 1'b0;

  assign sel_2342 = 1'b0;

  assign sel_2343 = 1'b0;

  assign sel_2344 = 1'b0;

  assign sel_2345 = 1'b0;

  assign sel_2346 = 1'b0;

  assign sel_2347 = 1'b0;

  assign sel_2348 = 1'b0;

  assign sel_2349 = 1'b0;

  assign s_336 = 1'b1;

  assign sel_2_110 = (s_14 == 1'b0 ? sel_2349 :
              s_336);

  assign s_337 = 1'b1;

  assign sel_2_111 = (s_15 == 1'b0 ? sel_2_110 :
              s_337);

  assign s_338 = 1'b1;

  assign sel_2_112 = (s_16 == 1'b0 ? sel_2_111 :
              s_338);

  assign s_339 = 1'b1;

  assign sel_2_113 = (s_17 == 1'b0 ? sel_2_112 :
              s_339);

  assign s_340 = 1'b1;

  assign sel_2_114 = (s_18 == 1'b0 ? sel_2_113 :
              s_340);

  assign s_341 = 1'b1;

  assign sel_2_115 = (s_19 == 1'b0 ? sel_2_114 :
              s_341);

  assign s_342 = 1'b1;

  assign sel_2_116 = (s_20 == 1'b0 ? sel_2_115 :
              s_342);

  assign s_343 = 1'b1;

  assign sel_2_117 = (s_21 == 1'b0 ? sel_2_116 :
              s_343);

  always @(posedge clk)
    begin : rd_345_process
      if (rst == 1'b1) begin
        s_344 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_344 <= s_12;
        end
      end
    end

  assign sel_2350 = 1'b0;

  assign sel_2351 = 1'b0;

  assign sel_2352 = 1'b0;

  assign s_345 = 1'b1;

  assign sel_2_118 = (tmp_4 == 1'b0 ? sel_2352 :
              s_345);

  assign s_346 = 1'b1;

  assign sel_2_119 = (tmp_6 == 1'b0 ? sel_2_118 :
              s_346);

  assign s_347 = 1'b1;

  assign sel_2_120 = (tmp_8 == 1'b0 ? sel_2_119 :
              s_347);

  assign s_348 = 1'b1;

  assign sel_2_121 = (tmp_10 == 1'b0 ? sel_2_120 :
              s_348);

  assign s_349 = 1'b1;

  assign sel_2_122 = (tmp_12 == 1'b0 ? sel_2_121 :
              s_349);

  assign s_350 = 1'b1;

  assign sel_2_123 = (tmp_14 == 1'b0 ? sel_2_122 :
              s_350);

  assign s_351 = 1'b1;

  assign sel_2_124 = (tmp_16 == 1'b0 ? sel_2_123 :
              s_351);

  assign s_352 = 1'b1;

  assign sel_2_125 = (tmp_18 == 1'b0 ? sel_2_124 :
              s_352);

  assign sel_2_126 = (s_10 == 1'b0 ? sel_2351 :
              sel_2_125);

  assign sel_2_127 = (s_11 == 1'b0 ? sel_2350 :
              sel_2_126);

  always @(posedge clk)
    begin : rd_346_process
      if (rst == 1'b1) begin
        sel_2_128 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_128 <= sel_2_127;
        end
      end
    end

  always @(posedge clk)
    begin : rd_344_process
      if (rst == 1'b1) begin
        sel_2_129 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_129 <= sel_2_117;
        end
      end
    end

  assign sel_2353 = 1'b0;

  assign sel_2_130 = (s_344 == 1'b0 ? sel_2_128 :
              sel_2353);

  assign sel_2354 = 1'b0;

  always @(posedge clk)
    begin : rd_347_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_66 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_66 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2355 = 8'd0;

  assign sel_2356 = 8'd0;

  assign sel_2357 = 8'd0;

  assign sel_2358 = 8'd0;

  assign sel_2359 = 8'd0;

  assign sel_2360 = 8'd0;

  assign sel_2361 = 8'd0;

  assign sel_2362 = 8'd0;

  assign sel_2363 = 8'd0;

  assign sel_2364 = 8'd0;

  assign sel_2365 = 8'd0;

  assign sel_2366 = 8'd0;

  always @(posedge clk)
    begin : rd_365_process
      if (rst == 1'b1) begin
        s_353 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_353 <= s_18;
        end
      end
    end

  assign sel_2367 = 32'sd0;

  assign sel_2368 = 32'sd0;

  assign sel_2369 = 32'sd0;

  assign sel_2370 = 32'sd0;

  assign sel_2371 = 32'sd0;

  assign sel_2372 = 32'sd0;

  assign sel_2373 = 32'sd0;

  assign sel_2374 = 32'sd0;

  assign sel_2375 = 32'sd0;

  assign sel_2376 = 32'sd0;

  assign sel_2377 = 32'sd0;

  assign sel_2378 = 32'sd0;

  assign sel_2379 = 32'sd0;

  assign sel_2380 = 32'sd0;

  assign s_354 = 32'sd6;

  assign sel_1_770 = (s_14 == 1'b0 ? sel_2380 :
              s_354);

  assign sel_2381 = 32'sd0;

  assign sel_1_771 = (s_15 == 1'b0 ? sel_1_770 :
              sel_2381);

  assign sel_2382 = 32'sd0;

  assign sel_1_772 = (s_16 == 1'b0 ? sel_1_771 :
              sel_2382);

  assign sel_2383 = 32'sd0;

  assign sel_1_773 = (s_17 == 1'b0 ? sel_1_772 :
              sel_2383);

  assign sel_2384 = 32'sd0;

  assign sel_1_774 = (s_18 == 1'b0 ? sel_1_773 :
              sel_2384);

  assign sel_2385 = 32'sd0;

  assign sel_1_775 = (s_19 == 1'b0 ? sel_1_774 :
              sel_2385);

  assign sel_2386 = 32'sd0;

  assign sel_1_776 = (s_20 == 1'b0 ? sel_1_775 :
              sel_2386);

  assign sel_2387 = 32'sd0;

  assign sel_1_777 = (s_21 == 1'b0 ? sel_1_776 :
              sel_2387);

  assign sel_2388 = 32'sd0;

  assign sel_2389 = 32'sd0;

  assign sel_2390 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_777, sel_2367, sel_2368, sel_2369, sel_2370, sel_2371,
       sel_2372, sel_2373, sel_2374, sel_2375, sel_2376, sel_2377, sel_2378,
       sel_2379, sel_2388, sel_2389, sel_2390) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5197_sel_1 = sel_2389;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5197_sel_1 = sel_2388;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5197_sel_1 = sel_1_777;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5197_sel_1 = sel_2379;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5197_sel_1 = sel_2378;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5197_sel_1 = sel_2377;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5197_sel_1 = sel_2376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5197_sel_1 = sel_2375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5197_sel_1 = sel_2374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5197_sel_1 = sel_2373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5197_sel_1 = sel_2372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5197_sel_1 = sel_2371;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5197_sel_1 = sel_2370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5197_sel_1 = sel_2369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5197_sel_1 = sel_2368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5197_sel_1 = sel_2367;
        end
      default :
        begin
          p5197_sel_1 = sel_2390;
        end
    endcase
    sel_1_778 = p5197_sel_1;
  end

  assign tmp_432 = functionOutput[sel_1_778];

  assign sel_2391 = 32'sd0;

  assign sel_2392 = 32'sd0;

  assign sel_2393 = 32'sd0;

  assign sel_2394 = 32'sd0;

  assign sel_2395 = 32'sd0;

  assign sel_2396 = 32'sd0;

  assign sel_2397 = 32'sd0;

  assign sel_2398 = 32'sd0;

  assign sel_2399 = 32'sd0;

  assign sel_2400 = 32'sd0;

  assign sel_2401 = 32'sd0;

  assign sel_2402 = 32'sd0;

  assign sel_2403 = 32'sd0;

  assign sel_2404 = 32'sd0;

  assign s_355 = 32'sd6;

  assign sel_1_779 = (s_15 == 1'b0 ? sel_2404 :
              s_355);

  assign sel_2405 = 32'sd0;

  assign sel_1_780 = (s_16 == 1'b0 ? sel_1_779 :
              sel_2405);

  assign sel_2406 = 32'sd0;

  assign sel_1_781 = (s_17 == 1'b0 ? sel_1_780 :
              sel_2406);

  assign sel_2407 = 32'sd0;

  assign sel_1_782 = (s_18 == 1'b0 ? sel_1_781 :
              sel_2407);

  assign sel_2408 = 32'sd0;

  assign sel_1_783 = (s_19 == 1'b0 ? sel_1_782 :
              sel_2408);

  assign sel_2409 = 32'sd0;

  assign sel_1_784 = (s_20 == 1'b0 ? sel_1_783 :
              sel_2409);

  assign sel_2410 = 32'sd0;

  assign sel_1_785 = (s_21 == 1'b0 ? sel_1_784 :
              sel_2410);

  assign sel_2411 = 32'sd0;

  assign sel_2412 = 32'sd0;

  assign sel_2413 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_785, sel_2391, sel_2392, sel_2393, sel_2394, sel_2395,
       sel_2396, sel_2397, sel_2398, sel_2399, sel_2400, sel_2401, sel_2402,
       sel_2403, sel_2411, sel_2412, sel_2413) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5026_sel_1 = sel_2412;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5026_sel_1 = sel_2411;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5026_sel_1 = sel_1_785;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5026_sel_1 = sel_2403;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5026_sel_1 = sel_2402;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5026_sel_1 = sel_2401;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5026_sel_1 = sel_2400;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5026_sel_1 = sel_2399;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5026_sel_1 = sel_2398;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5026_sel_1 = sel_2397;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5026_sel_1 = sel_2396;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5026_sel_1 = sel_2395;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5026_sel_1 = sel_2394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5026_sel_1 = sel_2393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5026_sel_1 = sel_2392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5026_sel_1 = sel_2391;
        end
      default :
        begin
          p5026_sel_1 = sel_2413;
        end
    endcase
    sel_1_786 = p5026_sel_1;
  end

  assign tmp_433 = functionOutput_12[sel_1_786];

  assign sel_1_787 = (s_15 == 1'b0 ? tmp_432 :
              tmp_433);

  assign sel_2414 = 32'sd0;

  assign sel_2415 = 32'sd0;

  assign sel_2416 = 32'sd0;

  assign sel_2417 = 32'sd0;

  assign sel_2418 = 32'sd0;

  assign sel_2419 = 32'sd0;

  assign sel_2420 = 32'sd0;

  assign sel_2421 = 32'sd0;

  assign sel_2422 = 32'sd0;

  assign sel_2423 = 32'sd0;

  assign sel_2424 = 32'sd0;

  assign sel_2425 = 32'sd0;

  assign sel_2426 = 32'sd0;

  assign sel_2427 = 32'sd0;

  assign s_356 = 32'sd6;

  assign sel_1_788 = (s_16 == 1'b0 ? sel_2427 :
              s_356);

  assign sel_2428 = 32'sd0;

  assign sel_1_789 = (s_17 == 1'b0 ? sel_1_788 :
              sel_2428);

  assign sel_2429 = 32'sd0;

  assign sel_1_790 = (s_18 == 1'b0 ? sel_1_789 :
              sel_2429);

  assign sel_2430 = 32'sd0;

  assign sel_1_791 = (s_19 == 1'b0 ? sel_1_790 :
              sel_2430);

  assign sel_2431 = 32'sd0;

  assign sel_1_792 = (s_20 == 1'b0 ? sel_1_791 :
              sel_2431);

  assign sel_2432 = 32'sd0;

  assign sel_1_793 = (s_21 == 1'b0 ? sel_1_792 :
              sel_2432);

  assign sel_2433 = 32'sd0;

  assign sel_2434 = 32'sd0;

  assign sel_2435 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_793, sel_2414, sel_2415, sel_2416, sel_2417, sel_2418,
       sel_2419, sel_2420, sel_2421, sel_2422, sel_2423, sel_2424, sel_2425,
       sel_2426, sel_2433, sel_2434, sel_2435) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3468_sel_1 = sel_2434;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3468_sel_1 = sel_2433;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3468_sel_1 = sel_1_793;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3468_sel_1 = sel_2426;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3468_sel_1 = sel_2425;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3468_sel_1 = sel_2424;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3468_sel_1 = sel_2423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3468_sel_1 = sel_2422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3468_sel_1 = sel_2421;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3468_sel_1 = sel_2420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3468_sel_1 = sel_2419;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3468_sel_1 = sel_2418;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3468_sel_1 = sel_2417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3468_sel_1 = sel_2416;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3468_sel_1 = sel_2415;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3468_sel_1 = sel_2414;
        end
      default :
        begin
          p3468_sel_1 = sel_2435;
        end
    endcase
    sel_1_794 = p3468_sel_1;
  end

  assign tmp_434 = functionOutput_13[sel_1_794];

  assign sel_1_795 = (s_16 == 1'b0 ? sel_1_787 :
              tmp_434);

  assign sel_2436 = 32'sd0;

  assign sel_2437 = 32'sd0;

  assign sel_2438 = 32'sd0;

  assign sel_2439 = 32'sd0;

  assign sel_2440 = 32'sd0;

  assign sel_2441 = 32'sd0;

  assign sel_2442 = 32'sd0;

  assign sel_2443 = 32'sd0;

  assign sel_2444 = 32'sd0;

  assign sel_2445 = 32'sd0;

  assign sel_2446 = 32'sd0;

  assign sel_2447 = 32'sd0;

  assign sel_2448 = 32'sd0;

  assign sel_2449 = 32'sd0;

  assign s_357 = 32'sd6;

  assign sel_1_796 = (s_17 == 1'b0 ? sel_2449 :
              s_357);

  assign sel_2450 = 32'sd0;

  assign sel_1_797 = (s_18 == 1'b0 ? sel_1_796 :
              sel_2450);

  assign sel_2451 = 32'sd0;

  assign sel_1_798 = (s_19 == 1'b0 ? sel_1_797 :
              sel_2451);

  assign sel_2452 = 32'sd0;

  assign sel_1_799 = (s_20 == 1'b0 ? sel_1_798 :
              sel_2452);

  assign sel_2453 = 32'sd0;

  assign sel_1_800 = (s_21 == 1'b0 ? sel_1_799 :
              sel_2453);

  assign sel_2454 = 32'sd0;

  assign sel_2455 = 32'sd0;

  assign sel_2456 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_800, sel_2436, sel_2437, sel_2438, sel_2439, sel_2440,
       sel_2441, sel_2442, sel_2443, sel_2444, sel_2445, sel_2446, sel_2447,
       sel_2448, sel_2454, sel_2455, sel_2456) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4494_sel_1 = sel_2455;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4494_sel_1 = sel_2454;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4494_sel_1 = sel_1_800;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4494_sel_1 = sel_2448;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4494_sel_1 = sel_2447;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4494_sel_1 = sel_2446;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4494_sel_1 = sel_2445;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4494_sel_1 = sel_2444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4494_sel_1 = sel_2443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4494_sel_1 = sel_2442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4494_sel_1 = sel_2441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4494_sel_1 = sel_2440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4494_sel_1 = sel_2439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4494_sel_1 = sel_2438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4494_sel_1 = sel_2437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4494_sel_1 = sel_2436;
        end
      default :
        begin
          p4494_sel_1 = sel_2456;
        end
    endcase
    sel_1_801 = p4494_sel_1;
  end

  assign tmp_435 = functionOutput_14[sel_1_801];

  assign sel_1_802 = (s_17 == 1'b0 ? sel_1_795 :
              tmp_435);

  always @(posedge clk)
    begin : rd_366_process
      if (rst == 1'b1) begin
        sel_1_803 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_803 <= sel_1_802;
        end
      end
    end

  assign sel_2457 = 32'sd0;

  assign sel_2458 = 32'sd0;

  assign sel_2459 = 32'sd0;

  assign sel_2460 = 32'sd0;

  assign sel_2461 = 32'sd0;

  assign sel_2462 = 32'sd0;

  assign sel_2463 = 32'sd0;

  assign sel_2464 = 32'sd0;

  assign sel_2465 = 32'sd0;

  assign sel_2466 = 32'sd0;

  assign sel_2467 = 32'sd0;

  assign sel_2468 = 32'sd0;

  assign sel_2469 = 32'sd0;

  assign sel_2470 = 32'sd0;

  assign s_358 = 32'sd6;

  assign sel_1_804 = (s_18 == 1'b0 ? sel_2470 :
              s_358);

  assign sel_2471 = 32'sd0;

  assign sel_1_805 = (s_19 == 1'b0 ? sel_1_804 :
              sel_2471);

  assign sel_2472 = 32'sd0;

  assign sel_1_806 = (s_20 == 1'b0 ? sel_1_805 :
              sel_2472);

  assign sel_2473 = 32'sd0;

  assign sel_1_807 = (s_21 == 1'b0 ? sel_1_806 :
              sel_2473);

  assign sel_2474 = 32'sd0;

  assign sel_2475 = 32'sd0;

  assign sel_2476 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_807, sel_2457, sel_2458, sel_2459, sel_2460, sel_2461,
       sel_2462, sel_2463, sel_2464, sel_2465, sel_2466, sel_2467, sel_2468,
       sel_2469, sel_2474, sel_2475, sel_2476) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4475_sel_1 = sel_2475;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4475_sel_1 = sel_2474;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4475_sel_1 = sel_1_807;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4475_sel_1 = sel_2469;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4475_sel_1 = sel_2468;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4475_sel_1 = sel_2467;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4475_sel_1 = sel_2466;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4475_sel_1 = sel_2465;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4475_sel_1 = sel_2464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4475_sel_1 = sel_2463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4475_sel_1 = sel_2462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4475_sel_1 = sel_2461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4475_sel_1 = sel_2460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4475_sel_1 = sel_2459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4475_sel_1 = sel_2458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4475_sel_1 = sel_2457;
        end
      default :
        begin
          p4475_sel_1 = sel_2476;
        end
    endcase
    sel_1_808 = p4475_sel_1;
  end

  assign tmp_436 = functionOutput_15[sel_1_808];

  always @(posedge clk)
    begin : rd_364_process
      if (rst == 1'b1) begin
        s_359 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_359 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_351_process
      if (rst == 1'b1) begin
        tmp_437 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_437 <= tmp_436;
        end
      end
    end

  assign sel_1_809 = (s_353 == 1'b0 ? sel_1_803 :
              tmp_437);

  assign sel_2477 = 32'sd0;

  assign sel_2478 = 32'sd0;

  assign sel_2479 = 32'sd0;

  assign sel_2480 = 32'sd0;

  assign sel_2481 = 32'sd0;

  assign sel_2482 = 32'sd0;

  assign sel_2483 = 32'sd0;

  assign sel_2484 = 32'sd0;

  assign sel_2485 = 32'sd0;

  assign sel_2486 = 32'sd0;

  assign sel_2487 = 32'sd0;

  assign sel_2488 = 32'sd0;

  assign sel_2489 = 32'sd0;

  assign sel_2490 = 32'sd0;

  assign s_360 = 32'sd6;

  assign sel_1_810 = (s_19 == 1'b0 ? sel_2490 :
              s_360);

  assign sel_2491 = 32'sd0;

  assign sel_1_811 = (s_20 == 1'b0 ? sel_1_810 :
              sel_2491);

  assign sel_2492 = 32'sd0;

  assign sel_1_812 = (s_21 == 1'b0 ? sel_1_811 :
              sel_2492);

  assign sel_2493 = 32'sd0;

  assign sel_2494 = 32'sd0;

  assign sel_2495 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_812, sel_2477, sel_2478, sel_2479, sel_2480, sel_2481,
       sel_2482, sel_2483, sel_2484, sel_2485, sel_2486, sel_2487, sel_2488,
       sel_2489, sel_2493, sel_2494, sel_2495) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4076_sel_1 = sel_2494;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4076_sel_1 = sel_2493;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4076_sel_1 = sel_1_812;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4076_sel_1 = sel_2489;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4076_sel_1 = sel_2488;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4076_sel_1 = sel_2487;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4076_sel_1 = sel_2486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4076_sel_1 = sel_2485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4076_sel_1 = sel_2484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4076_sel_1 = sel_2483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4076_sel_1 = sel_2482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4076_sel_1 = sel_2481;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4076_sel_1 = sel_2480;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4076_sel_1 = sel_2479;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4076_sel_1 = sel_2478;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4076_sel_1 = sel_2477;
        end
      default :
        begin
          p4076_sel_1 = sel_2495;
        end
    endcase
    sel_1_813 = p4076_sel_1;
  end

  assign tmp_438 = functionOutput_16[sel_1_813];

  always @(posedge clk)
    begin : rd_363_process
      if (rst == 1'b1) begin
        s_361 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_361 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_350_process
      if (rst == 1'b1) begin
        tmp_439 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_439 <= tmp_438;
        end
      end
    end

  assign sel_1_814 = (s_359 == 1'b0 ? sel_1_809 :
              tmp_439);

  assign sel_2496 = 32'sd0;

  assign sel_2497 = 32'sd0;

  assign sel_2498 = 32'sd0;

  assign sel_2499 = 32'sd0;

  assign sel_2500 = 32'sd0;

  assign sel_2501 = 32'sd0;

  assign sel_2502 = 32'sd0;

  assign sel_2503 = 32'sd0;

  assign sel_2504 = 32'sd0;

  assign sel_2505 = 32'sd0;

  assign sel_2506 = 32'sd0;

  assign sel_2507 = 32'sd0;

  assign sel_2508 = 32'sd0;

  assign sel_2509 = 32'sd0;

  assign s_362 = 32'sd6;

  assign sel_1_815 = (s_20 == 1'b0 ? sel_2509 :
              s_362);

  assign sel_2510 = 32'sd0;

  assign sel_1_816 = (s_21 == 1'b0 ? sel_1_815 :
              sel_2510);

  assign sel_2511 = 32'sd0;

  assign sel_2512 = 32'sd0;

  assign sel_2513 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_816, sel_2496, sel_2497, sel_2498, sel_2499, sel_2500,
       sel_2501, sel_2502, sel_2503, sel_2504, sel_2505, sel_2506, sel_2507,
       sel_2508, sel_2511, sel_2512, sel_2513) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3601_sel_1 = sel_2512;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3601_sel_1 = sel_2511;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3601_sel_1 = sel_1_816;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3601_sel_1 = sel_2508;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3601_sel_1 = sel_2507;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3601_sel_1 = sel_2506;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3601_sel_1 = sel_2505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3601_sel_1 = sel_2504;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3601_sel_1 = sel_2503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3601_sel_1 = sel_2502;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3601_sel_1 = sel_2501;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3601_sel_1 = sel_2500;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3601_sel_1 = sel_2499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3601_sel_1 = sel_2498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3601_sel_1 = sel_2497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3601_sel_1 = sel_2496;
        end
      default :
        begin
          p3601_sel_1 = sel_2513;
        end
    endcase
    sel_1_817 = p3601_sel_1;
  end

  assign tmp_440 = functionOutput_17[sel_1_817];

  always @(posedge clk)
    begin : rd_362_process
      if (rst == 1'b1) begin
        s_363 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_363 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_349_process
      if (rst == 1'b1) begin
        tmp_441 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_441 <= tmp_440;
        end
      end
    end

  assign sel_1_818 = (s_361 == 1'b0 ? sel_1_814 :
              tmp_441);

  assign sel_2514 = 32'sd0;

  assign sel_2515 = 32'sd0;

  assign sel_2516 = 32'sd0;

  assign sel_2517 = 32'sd0;

  assign sel_2518 = 32'sd0;

  assign sel_2519 = 32'sd0;

  assign sel_2520 = 32'sd0;

  assign sel_2521 = 32'sd0;

  assign sel_2522 = 32'sd0;

  assign sel_2523 = 32'sd0;

  assign sel_2524 = 32'sd0;

  assign sel_2525 = 32'sd0;

  assign sel_2526 = 32'sd0;

  assign sel_2527 = 32'sd0;

  assign s_364 = 32'sd6;

  assign sel_1_819 = (s_21 == 1'b0 ? sel_2527 :
              s_364);

  assign sel_2528 = 32'sd0;

  assign sel_2529 = 32'sd0;

  assign sel_2530 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_819, sel_2514, sel_2515, sel_2516, sel_2517, sel_2518,
       sel_2519, sel_2520, sel_2521, sel_2522, sel_2523, sel_2524, sel_2525,
       sel_2526, sel_2528, sel_2529, sel_2530) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4361_sel_1 = sel_2529;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4361_sel_1 = sel_2528;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4361_sel_1 = sel_1_819;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4361_sel_1 = sel_2526;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4361_sel_1 = sel_2525;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4361_sel_1 = sel_2524;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4361_sel_1 = sel_2523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4361_sel_1 = sel_2522;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4361_sel_1 = sel_2521;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4361_sel_1 = sel_2520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4361_sel_1 = sel_2519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4361_sel_1 = sel_2518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4361_sel_1 = sel_2517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4361_sel_1 = sel_2516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4361_sel_1 = sel_2515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4361_sel_1 = sel_2514;
        end
      default :
        begin
          p4361_sel_1 = sel_2530;
        end
    endcase
    sel_1_820 = p4361_sel_1;
  end

  assign tmp_442 = functionOutput_18[sel_1_820];

  always @(posedge clk)
    begin : rd_359_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_67 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_67 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2531 = 32'sd0;

  assign sel_2532 = 32'sd0;

  assign sel_2533 = 32'sd0;

  assign sel_2534 = 32'sd0;

  assign sel_2535 = 32'sd0;

  assign sel_2536 = 32'sd0;

  assign sel_2537 = 32'sd0;

  assign sel_2538 = 32'sd0;

  assign sel_2539 = 32'sd0;

  assign sel_2540 = 32'sd0;

  assign sel_2541 = 32'sd0;

  assign sel_2542 = 32'sd0;

  assign sel_2543 = 32'sd0;

  always @(posedge clk)
    begin : rd_360_process
      if (rst == 1'b1) begin
        s_365 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_365 <= s_12;
        end
      end
    end

  assign sel_2544 = 32'sd0;

  assign sel_2545 = 32'sd0;

  assign sel_2546 = 32'sd0;

  assign s_366 = 32'sd6;

  assign sel_1_821 = (tmp_4 == 1'b0 ? sel_2546 :
              s_366);

  assign sel_2547 = 32'sd0;

  assign sel_1_822 = (tmp_6 == 1'b0 ? sel_1_821 :
              sel_2547);

  assign sel_2548 = 32'sd0;

  assign sel_1_823 = (tmp_8 == 1'b0 ? sel_1_822 :
              sel_2548);

  assign sel_2549 = 32'sd0;

  assign sel_1_824 = (tmp_10 == 1'b0 ? sel_1_823 :
              sel_2549);

  assign sel_2550 = 32'sd0;

  assign sel_1_825 = (tmp_12 == 1'b0 ? sel_1_824 :
              sel_2550);

  assign sel_2551 = 32'sd0;

  assign sel_1_826 = (tmp_14 == 1'b0 ? sel_1_825 :
              sel_2551);

  assign sel_2552 = 32'sd0;

  assign sel_1_827 = (tmp_16 == 1'b0 ? sel_1_826 :
              sel_2552);

  assign sel_2553 = 32'sd0;

  assign sel_1_828 = (tmp_18 == 1'b0 ? sel_1_827 :
              sel_2553);

  assign sel_1_829 = (s_10 == 1'b0 ? sel_2545 :
              sel_1_828);

  assign sel_1_830 = (s_11 == 1'b0 ? sel_2544 :
              sel_1_829);

  always @(posedge clk)
    begin : rd_361_process
      if (rst == 1'b1) begin
        sel_1_831 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_831 <= sel_1_830;
        end
      end
    end

  assign sel_2554 = 32'sd0;

  assign sel_2555 = 32'sd0;

  assign sel_1_832 = (s_365 == 1'b0 ? sel_1_831 :
              sel_2555);

  assign sel_2556 = 32'sd0;

  always @(posedge clk)
    begin : rd_373_process
      if (rst == 1'b1) begin
        tmp_443 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_443 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_374_process
      if (rst == 1'b1) begin
        for(rd_374_t_1 = 32'sd0; rd_374_t_1 <= 32'sd11; rd_374_t_1 = rd_374_t_1 + 32'sd1) begin
          rd_374_reg[rd_374_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_374_t_0_1 = 32'sd0; rd_374_t_0_1 <= 32'sd11; rd_374_t_0_1 = rd_374_t_0_1 + 32'sd1) begin
            rd_374_reg[rd_374_t_0_1] <= rd_374_reg_next[rd_374_t_0_1];
          end
        end
      end
    end
  genvar t_0_061;
  generate
    for(t_0_061 = 32'sd0; t_0_061 <= 32'sd11; t_0_061 = t_0_061 + 32'sd1) begin:rd_374_reg_next_gen
      assign functionOutput_33[t_0_061] = rd_374_reg[t_0_061];
      assign rd_374_reg_next[t_0_061] = functionOutput_19[t_0_061];
    end
  endgenerate

  assign sel_2557 = 32'sd0;

  always @(is_SPI_MNGR_67, sel_1_832, sel_2531, sel_2532, sel_2533, sel_2534, sel_2535,
       sel_2536, sel_2537, sel_2538, sel_2539, sel_2540, sel_2541, sel_2542,
       sel_2543, sel_2554, sel_2556, sel_2557) begin
    case ( is_SPI_MNGR_67)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3088_sel_1 = sel_2556;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3088_sel_1 = sel_1_832;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3088_sel_1 = sel_2554;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3088_sel_1 = sel_2543;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3088_sel_1 = sel_2542;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3088_sel_1 = sel_2541;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3088_sel_1 = sel_2540;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3088_sel_1 = sel_2539;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3088_sel_1 = sel_2538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3088_sel_1 = sel_2537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3088_sel_1 = sel_2536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3088_sel_1 = sel_2535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3088_sel_1 = sel_2534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3088_sel_1 = sel_2533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3088_sel_1 = sel_2532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3088_sel_1 = sel_2531;
        end
      default :
        begin
          p3088_sel_1 = sel_2557;
        end
    endcase
    sel_1_833 = p3088_sel_1;
  end

  assign tmp_444 = functionOutput_33[sel_1_833];

  assign sel_2558 = 32'sd0;

  assign sel_2559 = 32'sd0;

  assign sel_2560 = 32'sd0;

  assign sel_2561 = 32'sd0;

  assign sel_2562 = 32'sd0;

  assign sel_2563 = 32'sd0;

  assign sel_2564 = 32'sd0;

  assign sel_2565 = 32'sd0;

  assign sel_2566 = 32'sd0;

  assign sel_2567 = 32'sd0;

  assign sel_2568 = 32'sd0;

  assign sel_2569 = 32'sd0;

  assign sel_2570 = 32'sd0;

  assign sel_2571 = 32'sd0;

  assign sel_2572 = 32'sd0;

  assign sel_2573 = 32'sd0;

  assign sel_2574 = 32'sd0;

  assign s_367 = 32'sd6;

  assign sel_1_834 = (tmp_6 == 1'b0 ? sel_2574 :
              s_367);

  assign sel_2575 = 32'sd0;

  assign sel_1_835 = (tmp_8 == 1'b0 ? sel_1_834 :
              sel_2575);

  assign sel_2576 = 32'sd0;

  assign sel_1_836 = (tmp_10 == 1'b0 ? sel_1_835 :
              sel_2576);

  assign sel_2577 = 32'sd0;

  assign sel_1_837 = (tmp_12 == 1'b0 ? sel_1_836 :
              sel_2577);

  assign sel_2578 = 32'sd0;

  assign sel_1_838 = (tmp_14 == 1'b0 ? sel_1_837 :
              sel_2578);

  assign sel_2579 = 32'sd0;

  assign sel_1_839 = (tmp_16 == 1'b0 ? sel_1_838 :
              sel_2579);

  assign sel_2580 = 32'sd0;

  assign sel_1_840 = (tmp_18 == 1'b0 ? sel_1_839 :
              sel_2580);

  assign sel_1_841 = (s_10 == 1'b0 ? sel_2573 :
              sel_1_840);

  assign sel_1_842 = (s_11 == 1'b0 ? sel_2572 :
              sel_1_841);

  assign sel_2581 = 32'sd0;

  assign sel_1_843 = (s_12 == 1'b0 ? sel_1_842 :
              sel_2581);

  assign sel_2582 = 32'sd0;

  assign sel_2583 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_843, sel_2558, sel_2559, sel_2560, sel_2561, sel_2562,
       sel_2563, sel_2564, sel_2565, sel_2566, sel_2567, sel_2568, sel_2569,
       sel_2570, sel_2571, sel_2582, sel_2583) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2784_sel_1 = sel_2582;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2784_sel_1 = sel_1_843;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2784_sel_1 = sel_2571;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2784_sel_1 = sel_2570;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2784_sel_1 = sel_2569;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2784_sel_1 = sel_2568;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2784_sel_1 = sel_2567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2784_sel_1 = sel_2566;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2784_sel_1 = sel_2565;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2784_sel_1 = sel_2564;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2784_sel_1 = sel_2563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2784_sel_1 = sel_2562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2784_sel_1 = sel_2561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2784_sel_1 = sel_2560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2784_sel_1 = sel_2559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2784_sel_1 = sel_2558;
        end
      default :
        begin
          p2784_sel_1 = sel_2583;
        end
    endcase
    sel_1_844 = p2784_sel_1;
  end

  assign tmp_445 = functionOutput_21[sel_1_844];

  always @(posedge clk)
    begin : rd_372_process
      if (rst == 1'b1) begin
        tmp_446 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_446 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_358_process
      if (rst == 1'b1) begin
        tmp_447 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_447 <= tmp_445;
        end
      end
    end

  assign sel_1_845 = (tmp_443 == 1'b0 ? tmp_444 :
              tmp_447);

  assign sel_2584 = 32'sd0;

  assign sel_2585 = 32'sd0;

  assign sel_2586 = 32'sd0;

  assign sel_2587 = 32'sd0;

  assign sel_2588 = 32'sd0;

  assign sel_2589 = 32'sd0;

  assign sel_2590 = 32'sd0;

  assign sel_2591 = 32'sd0;

  assign sel_2592 = 32'sd0;

  assign sel_2593 = 32'sd0;

  assign sel_2594 = 32'sd0;

  assign sel_2595 = 32'sd0;

  assign sel_2596 = 32'sd0;

  assign sel_2597 = 32'sd0;

  assign sel_2598 = 32'sd0;

  assign sel_2599 = 32'sd0;

  assign sel_2600 = 32'sd0;

  assign s_368 = 32'sd6;

  assign sel_1_846 = (tmp_8 == 1'b0 ? sel_2600 :
              s_368);

  assign sel_2601 = 32'sd0;

  assign sel_1_847 = (tmp_10 == 1'b0 ? sel_1_846 :
              sel_2601);

  assign sel_2602 = 32'sd0;

  assign sel_1_848 = (tmp_12 == 1'b0 ? sel_1_847 :
              sel_2602);

  assign sel_2603 = 32'sd0;

  assign sel_1_849 = (tmp_14 == 1'b0 ? sel_1_848 :
              sel_2603);

  assign sel_2604 = 32'sd0;

  assign sel_1_850 = (tmp_16 == 1'b0 ? sel_1_849 :
              sel_2604);

  assign sel_2605 = 32'sd0;

  assign sel_1_851 = (tmp_18 == 1'b0 ? sel_1_850 :
              sel_2605);

  assign sel_1_852 = (s_10 == 1'b0 ? sel_2599 :
              sel_1_851);

  assign sel_1_853 = (s_11 == 1'b0 ? sel_2598 :
              sel_1_852);

  assign sel_2606 = 32'sd0;

  assign sel_1_854 = (s_12 == 1'b0 ? sel_1_853 :
              sel_2606);

  assign sel_2607 = 32'sd0;

  assign sel_2608 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_854, sel_2584, sel_2585, sel_2586, sel_2587, sel_2588,
       sel_2589, sel_2590, sel_2591, sel_2592, sel_2593, sel_2594, sel_2595,
       sel_2596, sel_2597, sel_2607, sel_2608) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3050_sel_1 = sel_2607;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3050_sel_1 = sel_1_854;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3050_sel_1 = sel_2597;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3050_sel_1 = sel_2596;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3050_sel_1 = sel_2595;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3050_sel_1 = sel_2594;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3050_sel_1 = sel_2593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3050_sel_1 = sel_2592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3050_sel_1 = sel_2591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3050_sel_1 = sel_2590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3050_sel_1 = sel_2589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3050_sel_1 = sel_2588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3050_sel_1 = sel_2587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3050_sel_1 = sel_2586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3050_sel_1 = sel_2585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3050_sel_1 = sel_2584;
        end
      default :
        begin
          p3050_sel_1 = sel_2608;
        end
    endcase
    sel_1_855 = p3050_sel_1;
  end

  assign tmp_448 = functionOutput_22[sel_1_855];

  always @(posedge clk)
    begin : rd_371_process
      if (rst == 1'b1) begin
        tmp_449 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_449 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_357_process
      if (rst == 1'b1) begin
        tmp_450 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_450 <= tmp_448;
        end
      end
    end

  assign sel_1_856 = (tmp_446 == 1'b0 ? sel_1_845 :
              tmp_450);

  assign sel_2609 = 32'sd0;

  assign sel_2610 = 32'sd0;

  assign sel_2611 = 32'sd0;

  assign sel_2612 = 32'sd0;

  assign sel_2613 = 32'sd0;

  assign sel_2614 = 32'sd0;

  assign sel_2615 = 32'sd0;

  assign sel_2616 = 32'sd0;

  assign sel_2617 = 32'sd0;

  assign sel_2618 = 32'sd0;

  assign sel_2619 = 32'sd0;

  assign sel_2620 = 32'sd0;

  assign sel_2621 = 32'sd0;

  assign sel_2622 = 32'sd0;

  assign sel_2623 = 32'sd0;

  assign sel_2624 = 32'sd0;

  assign sel_2625 = 32'sd0;

  assign s_369 = 32'sd6;

  assign sel_1_857 = (tmp_10 == 1'b0 ? sel_2625 :
              s_369);

  assign sel_2626 = 32'sd0;

  assign sel_1_858 = (tmp_12 == 1'b0 ? sel_1_857 :
              sel_2626);

  assign sel_2627 = 32'sd0;

  assign sel_1_859 = (tmp_14 == 1'b0 ? sel_1_858 :
              sel_2627);

  assign sel_2628 = 32'sd0;

  assign sel_1_860 = (tmp_16 == 1'b0 ? sel_1_859 :
              sel_2628);

  assign sel_2629 = 32'sd0;

  assign sel_1_861 = (tmp_18 == 1'b0 ? sel_1_860 :
              sel_2629);

  assign sel_1_862 = (s_10 == 1'b0 ? sel_2624 :
              sel_1_861);

  assign sel_1_863 = (s_11 == 1'b0 ? sel_2623 :
              sel_1_862);

  assign sel_2630 = 32'sd0;

  assign sel_1_864 = (s_12 == 1'b0 ? sel_1_863 :
              sel_2630);

  assign sel_2631 = 32'sd0;

  assign sel_2632 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_864, sel_2609, sel_2610, sel_2611, sel_2612, sel_2613,
       sel_2614, sel_2615, sel_2616, sel_2617, sel_2618, sel_2619, sel_2620,
       sel_2621, sel_2622, sel_2631, sel_2632) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2746_sel_1 = sel_2631;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2746_sel_1 = sel_1_864;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2746_sel_1 = sel_2622;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2746_sel_1 = sel_2621;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2746_sel_1 = sel_2620;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2746_sel_1 = sel_2619;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2746_sel_1 = sel_2618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2746_sel_1 = sel_2617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2746_sel_1 = sel_2616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2746_sel_1 = sel_2615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2746_sel_1 = sel_2614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2746_sel_1 = sel_2613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2746_sel_1 = sel_2612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2746_sel_1 = sel_2611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2746_sel_1 = sel_2610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2746_sel_1 = sel_2609;
        end
      default :
        begin
          p2746_sel_1 = sel_2632;
        end
    endcase
    sel_1_865 = p2746_sel_1;
  end

  assign tmp_451 = functionOutput_23[sel_1_865];

  always @(posedge clk)
    begin : rd_370_process
      if (rst == 1'b1) begin
        tmp_452 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_452 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_356_process
      if (rst == 1'b1) begin
        tmp_453 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_453 <= tmp_451;
        end
      end
    end

  assign sel_1_866 = (tmp_449 == 1'b0 ? sel_1_856 :
              tmp_453);

  assign sel_2633 = 32'sd0;

  assign sel_2634 = 32'sd0;

  assign sel_2635 = 32'sd0;

  assign sel_2636 = 32'sd0;

  assign sel_2637 = 32'sd0;

  assign sel_2638 = 32'sd0;

  assign sel_2639 = 32'sd0;

  assign sel_2640 = 32'sd0;

  assign sel_2641 = 32'sd0;

  assign sel_2642 = 32'sd0;

  assign sel_2643 = 32'sd0;

  assign sel_2644 = 32'sd0;

  assign sel_2645 = 32'sd0;

  assign sel_2646 = 32'sd0;

  assign sel_2647 = 32'sd0;

  assign sel_2648 = 32'sd0;

  assign sel_2649 = 32'sd0;

  assign s_370 = 32'sd6;

  assign sel_1_867 = (tmp_12 == 1'b0 ? sel_2649 :
              s_370);

  assign sel_2650 = 32'sd0;

  assign sel_1_868 = (tmp_14 == 1'b0 ? sel_1_867 :
              sel_2650);

  assign sel_2651 = 32'sd0;

  assign sel_1_869 = (tmp_16 == 1'b0 ? sel_1_868 :
              sel_2651);

  assign sel_2652 = 32'sd0;

  assign sel_1_870 = (tmp_18 == 1'b0 ? sel_1_869 :
              sel_2652);

  assign sel_1_871 = (s_10 == 1'b0 ? sel_2648 :
              sel_1_870);

  assign sel_1_872 = (s_11 == 1'b0 ? sel_2647 :
              sel_1_871);

  assign sel_2653 = 32'sd0;

  assign sel_1_873 = (s_12 == 1'b0 ? sel_1_872 :
              sel_2653);

  assign sel_2654 = 32'sd0;

  assign sel_2655 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_873, sel_2633, sel_2634, sel_2635, sel_2636, sel_2637,
       sel_2638, sel_2639, sel_2640, sel_2641, sel_2642, sel_2643, sel_2644,
       sel_2645, sel_2646, sel_2654, sel_2655) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2005_sel_1 = sel_2654;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2005_sel_1 = sel_1_873;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2005_sel_1 = sel_2646;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2005_sel_1 = sel_2645;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2005_sel_1 = sel_2644;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2005_sel_1 = sel_2643;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2005_sel_1 = sel_2642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2005_sel_1 = sel_2641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2005_sel_1 = sel_2640;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2005_sel_1 = sel_2639;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2005_sel_1 = sel_2638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2005_sel_1 = sel_2637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2005_sel_1 = sel_2636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2005_sel_1 = sel_2635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2005_sel_1 = sel_2634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2005_sel_1 = sel_2633;
        end
      default :
        begin
          p2005_sel_1 = sel_2655;
        end
    endcase
    sel_1_874 = p2005_sel_1;
  end

  assign tmp_454 = functionOutput_24[sel_1_874];

  always @(posedge clk)
    begin : rd_369_process
      if (rst == 1'b1) begin
        tmp_455 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_455 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_355_process
      if (rst == 1'b1) begin
        tmp_456 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_456 <= tmp_454;
        end
      end
    end

  assign sel_1_875 = (tmp_452 == 1'b0 ? sel_1_866 :
              tmp_456);

  assign sel_2656 = 32'sd0;

  assign sel_2657 = 32'sd0;

  assign sel_2658 = 32'sd0;

  assign sel_2659 = 32'sd0;

  assign sel_2660 = 32'sd0;

  assign sel_2661 = 32'sd0;

  assign sel_2662 = 32'sd0;

  assign sel_2663 = 32'sd0;

  assign sel_2664 = 32'sd0;

  assign sel_2665 = 32'sd0;

  assign sel_2666 = 32'sd0;

  assign sel_2667 = 32'sd0;

  assign sel_2668 = 32'sd0;

  assign sel_2669 = 32'sd0;

  assign sel_2670 = 32'sd0;

  assign sel_2671 = 32'sd0;

  assign sel_2672 = 32'sd0;

  assign s_371 = 32'sd6;

  assign sel_1_876 = (tmp_14 == 1'b0 ? sel_2672 :
              s_371);

  assign sel_2673 = 32'sd0;

  assign sel_1_877 = (tmp_16 == 1'b0 ? sel_1_876 :
              sel_2673);

  assign sel_2674 = 32'sd0;

  assign sel_1_878 = (tmp_18 == 1'b0 ? sel_1_877 :
              sel_2674);

  assign sel_1_879 = (s_10 == 1'b0 ? sel_2671 :
              sel_1_878);

  assign sel_1_880 = (s_11 == 1'b0 ? sel_2670 :
              sel_1_879);

  assign sel_2675 = 32'sd0;

  assign sel_1_881 = (s_12 == 1'b0 ? sel_1_880 :
              sel_2675);

  assign sel_2676 = 32'sd0;

  assign sel_2677 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_881, sel_2656, sel_2657, sel_2658, sel_2659, sel_2660,
       sel_2661, sel_2662, sel_2663, sel_2664, sel_2665, sel_2666, sel_2667,
       sel_2668, sel_2669, sel_2676, sel_2677) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2119_sel_1 = sel_2676;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2119_sel_1 = sel_1_881;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2119_sel_1 = sel_2669;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2119_sel_1 = sel_2668;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2119_sel_1 = sel_2667;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2119_sel_1 = sel_2666;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2119_sel_1 = sel_2665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2119_sel_1 = sel_2664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2119_sel_1 = sel_2663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2119_sel_1 = sel_2662;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2119_sel_1 = sel_2661;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2119_sel_1 = sel_2660;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2119_sel_1 = sel_2659;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2119_sel_1 = sel_2658;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2119_sel_1 = sel_2657;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2119_sel_1 = sel_2656;
        end
      default :
        begin
          p2119_sel_1 = sel_2677;
        end
    endcase
    sel_1_882 = p2119_sel_1;
  end

  assign tmp_457 = functionOutput_25[sel_1_882];

  always @(posedge clk)
    begin : rd_368_process
      if (rst == 1'b1) begin
        tmp_458 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_458 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_354_process
      if (rst == 1'b1) begin
        tmp_459 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_459 <= tmp_457;
        end
      end
    end

  assign sel_1_883 = (tmp_455 == 1'b0 ? sel_1_875 :
              tmp_459);

  assign sel_2678 = 32'sd0;

  assign sel_2679 = 32'sd0;

  assign sel_2680 = 32'sd0;

  assign sel_2681 = 32'sd0;

  assign sel_2682 = 32'sd0;

  assign sel_2683 = 32'sd0;

  assign sel_2684 = 32'sd0;

  assign sel_2685 = 32'sd0;

  assign sel_2686 = 32'sd0;

  assign sel_2687 = 32'sd0;

  assign sel_2688 = 32'sd0;

  assign sel_2689 = 32'sd0;

  assign sel_2690 = 32'sd0;

  assign sel_2691 = 32'sd0;

  assign sel_2692 = 32'sd0;

  assign sel_2693 = 32'sd0;

  assign sel_2694 = 32'sd0;

  assign s_372 = 32'sd6;

  assign sel_1_884 = (tmp_16 == 1'b0 ? sel_2694 :
              s_372);

  assign sel_2695 = 32'sd0;

  assign sel_1_885 = (tmp_18 == 1'b0 ? sel_1_884 :
              sel_2695);

  assign sel_1_886 = (s_10 == 1'b0 ? sel_2693 :
              sel_1_885);

  assign sel_1_887 = (s_11 == 1'b0 ? sel_2692 :
              sel_1_886);

  assign sel_2696 = 32'sd0;

  assign sel_1_888 = (s_12 == 1'b0 ? sel_1_887 :
              sel_2696);

  assign sel_2697 = 32'sd0;

  assign sel_2698 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_888, sel_2678, sel_2679, sel_2680, sel_2681, sel_2682,
       sel_2683, sel_2684, sel_2685, sel_2686, sel_2687, sel_2688, sel_2689,
       sel_2690, sel_2691, sel_2697, sel_2698) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2594_sel_1 = sel_2697;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2594_sel_1 = sel_1_888;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2594_sel_1 = sel_2691;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2594_sel_1 = sel_2690;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2594_sel_1 = sel_2689;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2594_sel_1 = sel_2688;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2594_sel_1 = sel_2687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2594_sel_1 = sel_2686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2594_sel_1 = sel_2685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2594_sel_1 = sel_2684;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2594_sel_1 = sel_2683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2594_sel_1 = sel_2682;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2594_sel_1 = sel_2681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2594_sel_1 = sel_2680;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2594_sel_1 = sel_2679;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2594_sel_1 = sel_2678;
        end
      default :
        begin
          p2594_sel_1 = sel_2698;
        end
    endcase
    sel_1_889 = p2594_sel_1;
  end

  assign tmp_460 = functionOutput_26[sel_1_889];

  always @(posedge clk)
    begin : rd_367_process
      if (rst == 1'b1) begin
        tmp_461 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_461 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_353_process
      if (rst == 1'b1) begin
        tmp_462 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_462 <= tmp_460;
        end
      end
    end

  assign sel_1_890 = (tmp_458 == 1'b0 ? sel_1_883 :
              tmp_462);

  assign sel_2699 = 32'sd0;

  assign sel_2700 = 32'sd0;

  assign sel_2701 = 32'sd0;

  assign sel_2702 = 32'sd0;

  assign sel_2703 = 32'sd0;

  assign sel_2704 = 32'sd0;

  assign sel_2705 = 32'sd0;

  assign sel_2706 = 32'sd0;

  assign sel_2707 = 32'sd0;

  assign sel_2708 = 32'sd0;

  assign sel_2709 = 32'sd0;

  assign sel_2710 = 32'sd0;

  assign sel_2711 = 32'sd0;

  assign sel_2712 = 32'sd0;

  assign sel_2713 = 32'sd0;

  assign sel_2714 = 32'sd0;

  assign sel_2715 = 32'sd0;

  assign s_373 = 32'sd6;

  assign sel_1_891 = (tmp_18 == 1'b0 ? sel_2715 :
              s_373);

  assign sel_1_892 = (s_10 == 1'b0 ? sel_2714 :
              sel_1_891);

  assign sel_1_893 = (s_11 == 1'b0 ? sel_2713 :
              sel_1_892);

  assign sel_2716 = 32'sd0;

  assign sel_1_894 = (s_12 == 1'b0 ? sel_1_893 :
              sel_2716);

  assign sel_2717 = 32'sd0;

  assign sel_2718 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_894, sel_2699, sel_2700, sel_2701, sel_2702, sel_2703,
       sel_2704, sel_2705, sel_2706, sel_2707, sel_2708, sel_2709, sel_2710,
       sel_2711, sel_2712, sel_2717, sel_2718) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1739_sel_1 = sel_2717;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1739_sel_1 = sel_1_894;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1739_sel_1 = sel_2712;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1739_sel_1 = sel_2711;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1739_sel_1 = sel_2710;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1739_sel_1 = sel_2709;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1739_sel_1 = sel_2708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1739_sel_1 = sel_2707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1739_sel_1 = sel_2706;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1739_sel_1 = sel_2705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1739_sel_1 = sel_2704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1739_sel_1 = sel_2703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1739_sel_1 = sel_2702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1739_sel_1 = sel_2701;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1739_sel_1 = sel_2700;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1739_sel_1 = sel_2699;
        end
      default :
        begin
          p1739_sel_1 = sel_2718;
        end
    endcase
    sel_1_895 = p1739_sel_1;
  end

  assign tmp_463 = functionOutput_27[sel_1_895];

  assign sel_2719 = 8'd0;

  always @(posedge clk)
    begin : rd_348_process
      if (rst == 1'b1) begin
        tmp_464 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_464 <= tmp_442;
        end
      end
    end

  assign sel_1_896 = (s_363 == 1'b0 ? sel_1_818 :
              tmp_464);

  always @(posedge clk)
    begin : rd_352_process
      if (rst == 1'b1) begin
        tmp_465 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_465 <= tmp_463;
        end
      end
    end

  assign sel_1_897 = (tmp_461 == 1'b0 ? sel_1_890 :
              tmp_465);

  assign sel_2720 = 8'd0;

  always @(posedge clk)
    begin : rd_375_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_68 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_68 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2721 = 1'b0;

  assign sel_2722 = 1'b0;

  assign sel_2723 = 1'b0;

  assign sel_2724 = 1'b0;

  assign sel_2725 = 1'b0;

  assign sel_2726 = 1'b0;

  assign sel_2727 = 1'b0;

  assign sel_2728 = 1'b0;

  assign sel_2729 = 1'b0;

  assign sel_2730 = 1'b0;

  assign sel_2731 = 1'b0;

  assign sel_2732 = 1'b0;

  assign sel_2733 = 1'b0;

  assign sel_2734 = 1'b0;

  assign s_374 = 1'b1;

  assign sel_2_131 = (s_14 == 1'b0 ? sel_2734 :
              s_374);

  assign s_375 = 1'b1;

  assign sel_2_132 = (s_15 == 1'b0 ? sel_2_131 :
              s_375);

  assign s_376 = 1'b1;

  assign sel_2_133 = (s_16 == 1'b0 ? sel_2_132 :
              s_376);

  assign s_377 = 1'b1;

  assign sel_2_134 = (s_17 == 1'b0 ? sel_2_133 :
              s_377);

  assign s_378 = 1'b1;

  assign sel_2_135 = (s_18 == 1'b0 ? sel_2_134 :
              s_378);

  assign s_379 = 1'b1;

  assign sel_2_136 = (s_19 == 1'b0 ? sel_2_135 :
              s_379);

  assign s_380 = 1'b1;

  assign sel_2_137 = (s_20 == 1'b0 ? sel_2_136 :
              s_380);

  assign s_381 = 1'b1;

  assign sel_2_138 = (s_21 == 1'b0 ? sel_2_137 :
              s_381);

  always @(posedge clk)
    begin : rd_377_process
      if (rst == 1'b1) begin
        s_382 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_382 <= s_12;
        end
      end
    end

  assign sel_2735 = 1'b0;

  assign sel_2736 = 1'b0;

  assign sel_2737 = 1'b0;

  assign s_383 = 1'b1;

  assign sel_2_139 = (tmp_4 == 1'b0 ? sel_2737 :
              s_383);

  assign s_384 = 1'b1;

  assign sel_2_140 = (tmp_6 == 1'b0 ? sel_2_139 :
              s_384);

  assign s_385 = 1'b1;

  assign sel_2_141 = (tmp_8 == 1'b0 ? sel_2_140 :
              s_385);

  assign s_386 = 1'b1;

  assign sel_2_142 = (tmp_10 == 1'b0 ? sel_2_141 :
              s_386);

  assign s_387 = 1'b1;

  assign sel_2_143 = (tmp_12 == 1'b0 ? sel_2_142 :
              s_387);

  assign s_388 = 1'b1;

  assign sel_2_144 = (tmp_14 == 1'b0 ? sel_2_143 :
              s_388);

  assign s_389 = 1'b1;

  assign sel_2_145 = (tmp_16 == 1'b0 ? sel_2_144 :
              s_389);

  assign s_390 = 1'b1;

  assign sel_2_146 = (tmp_18 == 1'b0 ? sel_2_145 :
              s_390);

  assign sel_2_147 = (s_10 == 1'b0 ? sel_2736 :
              sel_2_146);

  assign sel_2_148 = (s_11 == 1'b0 ? sel_2735 :
              sel_2_147);

  always @(posedge clk)
    begin : rd_378_process
      if (rst == 1'b1) begin
        sel_2_149 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_149 <= sel_2_148;
        end
      end
    end

  always @(posedge clk)
    begin : rd_376_process
      if (rst == 1'b1) begin
        sel_2_150 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_150 <= sel_2_138;
        end
      end
    end

  assign sel_2738 = 1'b0;

  assign sel_2_151 = (s_382 == 1'b0 ? sel_2_149 :
              sel_2738);

  assign sel_2739 = 1'b0;

  always @(posedge clk)
    begin : rd_379_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_69 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_69 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2740 = 8'd0;

  assign sel_2741 = 8'd0;

  assign sel_2742 = 8'd0;

  assign sel_2743 = 8'd0;

  assign sel_2744 = 8'd0;

  assign sel_2745 = 8'd0;

  assign sel_2746 = 8'd0;

  assign sel_2747 = 8'd0;

  assign sel_2748 = 8'd0;

  assign sel_2749 = 8'd0;

  assign sel_2750 = 8'd0;

  assign sel_2751 = 8'd0;

  always @(posedge clk)
    begin : rd_397_process
      if (rst == 1'b1) begin
        s_391 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_391 <= s_18;
        end
      end
    end

  assign sel_2752 = 32'sd0;

  assign sel_2753 = 32'sd0;

  assign sel_2754 = 32'sd0;

  assign sel_2755 = 32'sd0;

  assign sel_2756 = 32'sd0;

  assign sel_2757 = 32'sd0;

  assign sel_2758 = 32'sd0;

  assign sel_2759 = 32'sd0;

  assign sel_2760 = 32'sd0;

  assign sel_2761 = 32'sd0;

  assign sel_2762 = 32'sd0;

  assign sel_2763 = 32'sd0;

  assign sel_2764 = 32'sd0;

  assign sel_2765 = 32'sd0;

  assign s_392 = 32'sd7;

  assign sel_1_898 = (s_14 == 1'b0 ? sel_2765 :
              s_392);

  assign sel_2766 = 32'sd0;

  assign sel_1_899 = (s_15 == 1'b0 ? sel_1_898 :
              sel_2766);

  assign sel_2767 = 32'sd0;

  assign sel_1_900 = (s_16 == 1'b0 ? sel_1_899 :
              sel_2767);

  assign sel_2768 = 32'sd0;

  assign sel_1_901 = (s_17 == 1'b0 ? sel_1_900 :
              sel_2768);

  assign sel_2769 = 32'sd0;

  assign sel_1_902 = (s_18 == 1'b0 ? sel_1_901 :
              sel_2769);

  assign sel_2770 = 32'sd0;

  assign sel_1_903 = (s_19 == 1'b0 ? sel_1_902 :
              sel_2770);

  assign sel_2771 = 32'sd0;

  assign sel_1_904 = (s_20 == 1'b0 ? sel_1_903 :
              sel_2771);

  assign sel_2772 = 32'sd0;

  assign sel_1_905 = (s_21 == 1'b0 ? sel_1_904 :
              sel_2772);

  assign sel_2773 = 32'sd0;

  assign sel_2774 = 32'sd0;

  assign sel_2775 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_905, sel_2752, sel_2753, sel_2754, sel_2755, sel_2756,
       sel_2757, sel_2758, sel_2759, sel_2760, sel_2761, sel_2762, sel_2763,
       sel_2764, sel_2773, sel_2774, sel_2775) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4437_sel_1 = sel_2774;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4437_sel_1 = sel_2773;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4437_sel_1 = sel_1_905;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4437_sel_1 = sel_2764;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4437_sel_1 = sel_2763;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4437_sel_1 = sel_2762;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4437_sel_1 = sel_2761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4437_sel_1 = sel_2760;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4437_sel_1 = sel_2759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4437_sel_1 = sel_2758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4437_sel_1 = sel_2757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4437_sel_1 = sel_2756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4437_sel_1 = sel_2755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4437_sel_1 = sel_2754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4437_sel_1 = sel_2753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4437_sel_1 = sel_2752;
        end
      default :
        begin
          p4437_sel_1 = sel_2775;
        end
    endcase
    sel_1_906 = p4437_sel_1;
  end

  assign tmp_466 = functionOutput[sel_1_906];

  assign sel_2776 = 32'sd0;

  assign sel_2777 = 32'sd0;

  assign sel_2778 = 32'sd0;

  assign sel_2779 = 32'sd0;

  assign sel_2780 = 32'sd0;

  assign sel_2781 = 32'sd0;

  assign sel_2782 = 32'sd0;

  assign sel_2783 = 32'sd0;

  assign sel_2784 = 32'sd0;

  assign sel_2785 = 32'sd0;

  assign sel_2786 = 32'sd0;

  assign sel_2787 = 32'sd0;

  assign sel_2788 = 32'sd0;

  assign sel_2789 = 32'sd0;

  assign s_393 = 32'sd7;

  assign sel_1_907 = (s_15 == 1'b0 ? sel_2789 :
              s_393);

  assign sel_2790 = 32'sd0;

  assign sel_1_908 = (s_16 == 1'b0 ? sel_1_907 :
              sel_2790);

  assign sel_2791 = 32'sd0;

  assign sel_1_909 = (s_17 == 1'b0 ? sel_1_908 :
              sel_2791);

  assign sel_2792 = 32'sd0;

  assign sel_1_910 = (s_18 == 1'b0 ? sel_1_909 :
              sel_2792);

  assign sel_2793 = 32'sd0;

  assign sel_1_911 = (s_19 == 1'b0 ? sel_1_910 :
              sel_2793);

  assign sel_2794 = 32'sd0;

  assign sel_1_912 = (s_20 == 1'b0 ? sel_1_911 :
              sel_2794);

  assign sel_2795 = 32'sd0;

  assign sel_1_913 = (s_21 == 1'b0 ? sel_1_912 :
              sel_2795);

  assign sel_2796 = 32'sd0;

  assign sel_2797 = 32'sd0;

  assign sel_2798 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_913, sel_2776, sel_2777, sel_2778, sel_2779, sel_2780,
       sel_2781, sel_2782, sel_2783, sel_2784, sel_2785, sel_2786, sel_2787,
       sel_2788, sel_2796, sel_2797, sel_2798) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4836_sel_1 = sel_2797;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4836_sel_1 = sel_2796;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4836_sel_1 = sel_1_913;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4836_sel_1 = sel_2788;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4836_sel_1 = sel_2787;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4836_sel_1 = sel_2786;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4836_sel_1 = sel_2785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4836_sel_1 = sel_2784;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4836_sel_1 = sel_2783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4836_sel_1 = sel_2782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4836_sel_1 = sel_2781;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4836_sel_1 = sel_2780;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4836_sel_1 = sel_2779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4836_sel_1 = sel_2778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4836_sel_1 = sel_2777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4836_sel_1 = sel_2776;
        end
      default :
        begin
          p4836_sel_1 = sel_2798;
        end
    endcase
    sel_1_914 = p4836_sel_1;
  end

  assign tmp_467 = functionOutput_12[sel_1_914];

  assign sel_1_915 = (s_15 == 1'b0 ? tmp_466 :
              tmp_467);

  assign sel_2799 = 32'sd0;

  assign sel_2800 = 32'sd0;

  assign sel_2801 = 32'sd0;

  assign sel_2802 = 32'sd0;

  assign sel_2803 = 32'sd0;

  assign sel_2804 = 32'sd0;

  assign sel_2805 = 32'sd0;

  assign sel_2806 = 32'sd0;

  assign sel_2807 = 32'sd0;

  assign sel_2808 = 32'sd0;

  assign sel_2809 = 32'sd0;

  assign sel_2810 = 32'sd0;

  assign sel_2811 = 32'sd0;

  assign sel_2812 = 32'sd0;

  assign s_394 = 32'sd7;

  assign sel_1_916 = (s_16 == 1'b0 ? sel_2812 :
              s_394);

  assign sel_2813 = 32'sd0;

  assign sel_1_917 = (s_17 == 1'b0 ? sel_1_916 :
              sel_2813);

  assign sel_2814 = 32'sd0;

  assign sel_1_918 = (s_18 == 1'b0 ? sel_1_917 :
              sel_2814);

  assign sel_2815 = 32'sd0;

  assign sel_1_919 = (s_19 == 1'b0 ? sel_1_918 :
              sel_2815);

  assign sel_2816 = 32'sd0;

  assign sel_1_920 = (s_20 == 1'b0 ? sel_1_919 :
              sel_2816);

  assign sel_2817 = 32'sd0;

  assign sel_1_921 = (s_21 == 1'b0 ? sel_1_920 :
              sel_2817);

  assign sel_2818 = 32'sd0;

  assign sel_2819 = 32'sd0;

  assign sel_2820 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_921, sel_2799, sel_2800, sel_2801, sel_2802, sel_2803,
       sel_2804, sel_2805, sel_2806, sel_2807, sel_2808, sel_2809, sel_2810,
       sel_2811, sel_2818, sel_2819, sel_2820) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3943_sel_1 = sel_2819;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3943_sel_1 = sel_2818;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3943_sel_1 = sel_1_921;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3943_sel_1 = sel_2811;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3943_sel_1 = sel_2810;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3943_sel_1 = sel_2809;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3943_sel_1 = sel_2808;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3943_sel_1 = sel_2807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3943_sel_1 = sel_2806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3943_sel_1 = sel_2805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3943_sel_1 = sel_2804;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3943_sel_1 = sel_2803;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3943_sel_1 = sel_2802;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3943_sel_1 = sel_2801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3943_sel_1 = sel_2800;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3943_sel_1 = sel_2799;
        end
      default :
        begin
          p3943_sel_1 = sel_2820;
        end
    endcase
    sel_1_922 = p3943_sel_1;
  end

  assign tmp_468 = functionOutput_13[sel_1_922];

  assign sel_1_923 = (s_16 == 1'b0 ? sel_1_915 :
              tmp_468);

  assign sel_2821 = 32'sd0;

  assign sel_2822 = 32'sd0;

  assign sel_2823 = 32'sd0;

  assign sel_2824 = 32'sd0;

  assign sel_2825 = 32'sd0;

  assign sel_2826 = 32'sd0;

  assign sel_2827 = 32'sd0;

  assign sel_2828 = 32'sd0;

  assign sel_2829 = 32'sd0;

  assign sel_2830 = 32'sd0;

  assign sel_2831 = 32'sd0;

  assign sel_2832 = 32'sd0;

  assign sel_2833 = 32'sd0;

  assign sel_2834 = 32'sd0;

  assign s_395 = 32'sd7;

  assign sel_1_924 = (s_17 == 1'b0 ? sel_2834 :
              s_395);

  assign sel_2835 = 32'sd0;

  assign sel_1_925 = (s_18 == 1'b0 ? sel_1_924 :
              sel_2835);

  assign sel_2836 = 32'sd0;

  assign sel_1_926 = (s_19 == 1'b0 ? sel_1_925 :
              sel_2836);

  assign sel_2837 = 32'sd0;

  assign sel_1_927 = (s_20 == 1'b0 ? sel_1_926 :
              sel_2837);

  assign sel_2838 = 32'sd0;

  assign sel_1_928 = (s_21 == 1'b0 ? sel_1_927 :
              sel_2838);

  assign sel_2839 = 32'sd0;

  assign sel_2840 = 32'sd0;

  assign sel_2841 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_928, sel_2821, sel_2822, sel_2823, sel_2824, sel_2825,
       sel_2826, sel_2827, sel_2828, sel_2829, sel_2830, sel_2831, sel_2832,
       sel_2833, sel_2839, sel_2840, sel_2841) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5140_sel_1 = sel_2840;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5140_sel_1 = sel_2839;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5140_sel_1 = sel_1_928;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5140_sel_1 = sel_2833;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5140_sel_1 = sel_2832;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5140_sel_1 = sel_2831;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5140_sel_1 = sel_2830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5140_sel_1 = sel_2829;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5140_sel_1 = sel_2828;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5140_sel_1 = sel_2827;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5140_sel_1 = sel_2826;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5140_sel_1 = sel_2825;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5140_sel_1 = sel_2824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5140_sel_1 = sel_2823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5140_sel_1 = sel_2822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5140_sel_1 = sel_2821;
        end
      default :
        begin
          p5140_sel_1 = sel_2841;
        end
    endcase
    sel_1_929 = p5140_sel_1;
  end

  assign tmp_469 = functionOutput_14[sel_1_929];

  assign sel_1_930 = (s_17 == 1'b0 ? sel_1_923 :
              tmp_469);

  always @(posedge clk)
    begin : rd_398_process
      if (rst == 1'b1) begin
        sel_1_931 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_931 <= sel_1_930;
        end
      end
    end

  assign sel_2842 = 32'sd0;

  assign sel_2843 = 32'sd0;

  assign sel_2844 = 32'sd0;

  assign sel_2845 = 32'sd0;

  assign sel_2846 = 32'sd0;

  assign sel_2847 = 32'sd0;

  assign sel_2848 = 32'sd0;

  assign sel_2849 = 32'sd0;

  assign sel_2850 = 32'sd0;

  assign sel_2851 = 32'sd0;

  assign sel_2852 = 32'sd0;

  assign sel_2853 = 32'sd0;

  assign sel_2854 = 32'sd0;

  assign sel_2855 = 32'sd0;

  assign s_396 = 32'sd7;

  assign sel_1_932 = (s_18 == 1'b0 ? sel_2855 :
              s_396);

  assign sel_2856 = 32'sd0;

  assign sel_1_933 = (s_19 == 1'b0 ? sel_1_932 :
              sel_2856);

  assign sel_2857 = 32'sd0;

  assign sel_1_934 = (s_20 == 1'b0 ? sel_1_933 :
              sel_2857);

  assign sel_2858 = 32'sd0;

  assign sel_1_935 = (s_21 == 1'b0 ? sel_1_934 :
              sel_2858);

  assign sel_2859 = 32'sd0;

  assign sel_2860 = 32'sd0;

  assign sel_2861 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_935, sel_2842, sel_2843, sel_2844, sel_2845, sel_2846,
       sel_2847, sel_2848, sel_2849, sel_2850, sel_2851, sel_2852, sel_2853,
       sel_2854, sel_2859, sel_2860, sel_2861) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3848_sel_1 = sel_2860;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3848_sel_1 = sel_2859;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3848_sel_1 = sel_1_935;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3848_sel_1 = sel_2854;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3848_sel_1 = sel_2853;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3848_sel_1 = sel_2852;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3848_sel_1 = sel_2851;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3848_sel_1 = sel_2850;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3848_sel_1 = sel_2849;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3848_sel_1 = sel_2848;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3848_sel_1 = sel_2847;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3848_sel_1 = sel_2846;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3848_sel_1 = sel_2845;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3848_sel_1 = sel_2844;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3848_sel_1 = sel_2843;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3848_sel_1 = sel_2842;
        end
      default :
        begin
          p3848_sel_1 = sel_2861;
        end
    endcase
    sel_1_936 = p3848_sel_1;
  end

  assign tmp_470 = functionOutput_15[sel_1_936];

  always @(posedge clk)
    begin : rd_396_process
      if (rst == 1'b1) begin
        s_397 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_397 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_383_process
      if (rst == 1'b1) begin
        tmp_471 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_471 <= tmp_470;
        end
      end
    end

  assign sel_1_937 = (s_391 == 1'b0 ? sel_1_931 :
              tmp_471);

  assign sel_2862 = 32'sd0;

  assign sel_2863 = 32'sd0;

  assign sel_2864 = 32'sd0;

  assign sel_2865 = 32'sd0;

  assign sel_2866 = 32'sd0;

  assign sel_2867 = 32'sd0;

  assign sel_2868 = 32'sd0;

  assign sel_2869 = 32'sd0;

  assign sel_2870 = 32'sd0;

  assign sel_2871 = 32'sd0;

  assign sel_2872 = 32'sd0;

  assign sel_2873 = 32'sd0;

  assign sel_2874 = 32'sd0;

  assign sel_2875 = 32'sd0;

  assign s_398 = 32'sd7;

  assign sel_1_938 = (s_19 == 1'b0 ? sel_2875 :
              s_398);

  assign sel_2876 = 32'sd0;

  assign sel_1_939 = (s_20 == 1'b0 ? sel_1_938 :
              sel_2876);

  assign sel_2877 = 32'sd0;

  assign sel_1_940 = (s_21 == 1'b0 ? sel_1_939 :
              sel_2877);

  assign sel_2878 = 32'sd0;

  assign sel_2879 = 32'sd0;

  assign sel_2880 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_940, sel_2862, sel_2863, sel_2864, sel_2865, sel_2866,
       sel_2867, sel_2868, sel_2869, sel_2870, sel_2871, sel_2872, sel_2873,
       sel_2874, sel_2878, sel_2879, sel_2880) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4646_sel_1 = sel_2879;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4646_sel_1 = sel_2878;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4646_sel_1 = sel_1_940;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4646_sel_1 = sel_2874;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4646_sel_1 = sel_2873;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4646_sel_1 = sel_2872;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4646_sel_1 = sel_2871;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4646_sel_1 = sel_2870;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4646_sel_1 = sel_2869;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4646_sel_1 = sel_2868;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4646_sel_1 = sel_2867;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4646_sel_1 = sel_2866;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4646_sel_1 = sel_2865;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4646_sel_1 = sel_2864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4646_sel_1 = sel_2863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4646_sel_1 = sel_2862;
        end
      default :
        begin
          p4646_sel_1 = sel_2880;
        end
    endcase
    sel_1_941 = p4646_sel_1;
  end

  assign tmp_472 = functionOutput_16[sel_1_941];

  always @(posedge clk)
    begin : rd_395_process
      if (rst == 1'b1) begin
        s_399 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_399 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_382_process
      if (rst == 1'b1) begin
        tmp_473 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_473 <= tmp_472;
        end
      end
    end

  assign sel_1_942 = (s_397 == 1'b0 ? sel_1_937 :
              tmp_473);

  assign sel_2881 = 32'sd0;

  assign sel_2882 = 32'sd0;

  assign sel_2883 = 32'sd0;

  assign sel_2884 = 32'sd0;

  assign sel_2885 = 32'sd0;

  assign sel_2886 = 32'sd0;

  assign sel_2887 = 32'sd0;

  assign sel_2888 = 32'sd0;

  assign sel_2889 = 32'sd0;

  assign sel_2890 = 32'sd0;

  assign sel_2891 = 32'sd0;

  assign sel_2892 = 32'sd0;

  assign sel_2893 = 32'sd0;

  assign sel_2894 = 32'sd0;

  assign s_400 = 32'sd7;

  assign sel_1_943 = (s_20 == 1'b0 ? sel_2894 :
              s_400);

  assign sel_2895 = 32'sd0;

  assign sel_1_944 = (s_21 == 1'b0 ? sel_1_943 :
              sel_2895);

  assign sel_2896 = 32'sd0;

  assign sel_2897 = 32'sd0;

  assign sel_2898 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_944, sel_2881, sel_2882, sel_2883, sel_2884, sel_2885,
       sel_2886, sel_2887, sel_2888, sel_2889, sel_2890, sel_2891, sel_2892,
       sel_2893, sel_2896, sel_2897, sel_2898) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3582_sel_1 = sel_2897;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3582_sel_1 = sel_2896;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3582_sel_1 = sel_1_944;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3582_sel_1 = sel_2893;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3582_sel_1 = sel_2892;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3582_sel_1 = sel_2891;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3582_sel_1 = sel_2890;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3582_sel_1 = sel_2889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3582_sel_1 = sel_2888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3582_sel_1 = sel_2887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3582_sel_1 = sel_2886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3582_sel_1 = sel_2885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3582_sel_1 = sel_2884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3582_sel_1 = sel_2883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3582_sel_1 = sel_2882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3582_sel_1 = sel_2881;
        end
      default :
        begin
          p3582_sel_1 = sel_2898;
        end
    endcase
    sel_1_945 = p3582_sel_1;
  end

  assign tmp_474 = functionOutput_17[sel_1_945];

  always @(posedge clk)
    begin : rd_394_process
      if (rst == 1'b1) begin
        s_401 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_401 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_381_process
      if (rst == 1'b1) begin
        tmp_475 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_475 <= tmp_474;
        end
      end
    end

  assign sel_1_946 = (s_399 == 1'b0 ? sel_1_942 :
              tmp_475);

  assign sel_2899 = 32'sd0;

  assign sel_2900 = 32'sd0;

  assign sel_2901 = 32'sd0;

  assign sel_2902 = 32'sd0;

  assign sel_2903 = 32'sd0;

  assign sel_2904 = 32'sd0;

  assign sel_2905 = 32'sd0;

  assign sel_2906 = 32'sd0;

  assign sel_2907 = 32'sd0;

  assign sel_2908 = 32'sd0;

  assign sel_2909 = 32'sd0;

  assign sel_2910 = 32'sd0;

  assign sel_2911 = 32'sd0;

  assign sel_2912 = 32'sd0;

  assign s_402 = 32'sd7;

  assign sel_1_947 = (s_21 == 1'b0 ? sel_2912 :
              s_402);

  assign sel_2913 = 32'sd0;

  assign sel_2914 = 32'sd0;

  assign sel_2915 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_947, sel_2899, sel_2900, sel_2901, sel_2902, sel_2903,
       sel_2904, sel_2905, sel_2906, sel_2907, sel_2908, sel_2909, sel_2910,
       sel_2911, sel_2913, sel_2914, sel_2915) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4380_sel_1 = sel_2914;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4380_sel_1 = sel_2913;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4380_sel_1 = sel_1_947;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4380_sel_1 = sel_2911;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4380_sel_1 = sel_2910;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4380_sel_1 = sel_2909;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4380_sel_1 = sel_2908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4380_sel_1 = sel_2907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4380_sel_1 = sel_2906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4380_sel_1 = sel_2905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4380_sel_1 = sel_2904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4380_sel_1 = sel_2903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4380_sel_1 = sel_2902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4380_sel_1 = sel_2901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4380_sel_1 = sel_2900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4380_sel_1 = sel_2899;
        end
      default :
        begin
          p4380_sel_1 = sel_2915;
        end
    endcase
    sel_1_948 = p4380_sel_1;
  end

  assign tmp_476 = functionOutput_18[sel_1_948];

  always @(posedge clk)
    begin : rd_391_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_70 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_70 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_2916 = 32'sd0;

  assign sel_2917 = 32'sd0;

  assign sel_2918 = 32'sd0;

  assign sel_2919 = 32'sd0;

  assign sel_2920 = 32'sd0;

  assign sel_2921 = 32'sd0;

  assign sel_2922 = 32'sd0;

  assign sel_2923 = 32'sd0;

  assign sel_2924 = 32'sd0;

  assign sel_2925 = 32'sd0;

  assign sel_2926 = 32'sd0;

  assign sel_2927 = 32'sd0;

  assign sel_2928 = 32'sd0;

  always @(posedge clk)
    begin : rd_392_process
      if (rst == 1'b1) begin
        s_403 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_403 <= s_12;
        end
      end
    end

  assign sel_2929 = 32'sd0;

  assign sel_2930 = 32'sd0;

  assign sel_2931 = 32'sd0;

  assign s_404 = 32'sd7;

  assign sel_1_949 = (tmp_4 == 1'b0 ? sel_2931 :
              s_404);

  assign sel_2932 = 32'sd0;

  assign sel_1_950 = (tmp_6 == 1'b0 ? sel_1_949 :
              sel_2932);

  assign sel_2933 = 32'sd0;

  assign sel_1_951 = (tmp_8 == 1'b0 ? sel_1_950 :
              sel_2933);

  assign sel_2934 = 32'sd0;

  assign sel_1_952 = (tmp_10 == 1'b0 ? sel_1_951 :
              sel_2934);

  assign sel_2935 = 32'sd0;

  assign sel_1_953 = (tmp_12 == 1'b0 ? sel_1_952 :
              sel_2935);

  assign sel_2936 = 32'sd0;

  assign sel_1_954 = (tmp_14 == 1'b0 ? sel_1_953 :
              sel_2936);

  assign sel_2937 = 32'sd0;

  assign sel_1_955 = (tmp_16 == 1'b0 ? sel_1_954 :
              sel_2937);

  assign sel_2938 = 32'sd0;

  assign sel_1_956 = (tmp_18 == 1'b0 ? sel_1_955 :
              sel_2938);

  assign sel_1_957 = (s_10 == 1'b0 ? sel_2930 :
              sel_1_956);

  assign sel_1_958 = (s_11 == 1'b0 ? sel_2929 :
              sel_1_957);

  always @(posedge clk)
    begin : rd_393_process
      if (rst == 1'b1) begin
        sel_1_959 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_959 <= sel_1_958;
        end
      end
    end

  assign sel_2939 = 32'sd0;

  assign sel_2940 = 32'sd0;

  assign sel_1_960 = (s_403 == 1'b0 ? sel_1_959 :
              sel_2940);

  assign sel_2941 = 32'sd0;

  always @(posedge clk)
    begin : rd_405_process
      if (rst == 1'b1) begin
        tmp_477 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_477 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_406_process
      if (rst == 1'b1) begin
        for(rd_406_t_1 = 32'sd0; rd_406_t_1 <= 32'sd11; rd_406_t_1 = rd_406_t_1 + 32'sd1) begin
          rd_406_reg[rd_406_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_406_t_0_1 = 32'sd0; rd_406_t_0_1 <= 32'sd11; rd_406_t_0_1 = rd_406_t_0_1 + 32'sd1) begin
            rd_406_reg[rd_406_t_0_1] <= rd_406_reg_next[rd_406_t_0_1];
          end
        end
      end
    end
  genvar t_0_071;
  generate
    for(t_0_071 = 32'sd0; t_0_071 <= 32'sd11; t_0_071 = t_0_071 + 32'sd1) begin:rd_406_reg_next_gen
      assign functionOutput_34[t_0_071] = rd_406_reg[t_0_071];
      assign rd_406_reg_next[t_0_071] = functionOutput_19[t_0_071];
    end
  endgenerate

  assign sel_2942 = 32'sd0;

  always @(is_SPI_MNGR_70, sel_1_960, sel_2916, sel_2917, sel_2918, sel_2919, sel_2920,
       sel_2921, sel_2922, sel_2923, sel_2924, sel_2925, sel_2926, sel_2927,
       sel_2928, sel_2939, sel_2941, sel_2942) begin
    case ( is_SPI_MNGR_70)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2499_sel_1 = sel_2941;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2499_sel_1 = sel_1_960;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2499_sel_1 = sel_2939;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2499_sel_1 = sel_2928;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2499_sel_1 = sel_2927;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2499_sel_1 = sel_2926;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2499_sel_1 = sel_2925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2499_sel_1 = sel_2924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2499_sel_1 = sel_2923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2499_sel_1 = sel_2922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2499_sel_1 = sel_2921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2499_sel_1 = sel_2920;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2499_sel_1 = sel_2919;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2499_sel_1 = sel_2918;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2499_sel_1 = sel_2917;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2499_sel_1 = sel_2916;
        end
      default :
        begin
          p2499_sel_1 = sel_2942;
        end
    endcase
    sel_1_961 = p2499_sel_1;
  end

  assign tmp_478 = functionOutput_34[sel_1_961];

  assign sel_2943 = 32'sd0;

  assign sel_2944 = 32'sd0;

  assign sel_2945 = 32'sd0;

  assign sel_2946 = 32'sd0;

  assign sel_2947 = 32'sd0;

  assign sel_2948 = 32'sd0;

  assign sel_2949 = 32'sd0;

  assign sel_2950 = 32'sd0;

  assign sel_2951 = 32'sd0;

  assign sel_2952 = 32'sd0;

  assign sel_2953 = 32'sd0;

  assign sel_2954 = 32'sd0;

  assign sel_2955 = 32'sd0;

  assign sel_2956 = 32'sd0;

  assign sel_2957 = 32'sd0;

  assign sel_2958 = 32'sd0;

  assign sel_2959 = 32'sd0;

  assign s_405 = 32'sd7;

  assign sel_1_962 = (tmp_6 == 1'b0 ? sel_2959 :
              s_405);

  assign sel_2960 = 32'sd0;

  assign sel_1_963 = (tmp_8 == 1'b0 ? sel_1_962 :
              sel_2960);

  assign sel_2961 = 32'sd0;

  assign sel_1_964 = (tmp_10 == 1'b0 ? sel_1_963 :
              sel_2961);

  assign sel_2962 = 32'sd0;

  assign sel_1_965 = (tmp_12 == 1'b0 ? sel_1_964 :
              sel_2962);

  assign sel_2963 = 32'sd0;

  assign sel_1_966 = (tmp_14 == 1'b0 ? sel_1_965 :
              sel_2963);

  assign sel_2964 = 32'sd0;

  assign sel_1_967 = (tmp_16 == 1'b0 ? sel_1_966 :
              sel_2964);

  assign sel_2965 = 32'sd0;

  assign sel_1_968 = (tmp_18 == 1'b0 ? sel_1_967 :
              sel_2965);

  assign sel_1_969 = (s_10 == 1'b0 ? sel_2958 :
              sel_1_968);

  assign sel_1_970 = (s_11 == 1'b0 ? sel_2957 :
              sel_1_969);

  assign sel_2966 = 32'sd0;

  assign sel_1_971 = (s_12 == 1'b0 ? sel_1_970 :
              sel_2966);

  assign sel_2967 = 32'sd0;

  assign sel_2968 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_971, sel_2943, sel_2944, sel_2945, sel_2946, sel_2947,
       sel_2948, sel_2949, sel_2950, sel_2951, sel_2952, sel_2953, sel_2954,
       sel_2955, sel_2956, sel_2967, sel_2968) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3316_sel_1 = sel_2967;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3316_sel_1 = sel_1_971;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3316_sel_1 = sel_2956;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3316_sel_1 = sel_2955;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3316_sel_1 = sel_2954;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3316_sel_1 = sel_2953;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3316_sel_1 = sel_2952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3316_sel_1 = sel_2951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3316_sel_1 = sel_2950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3316_sel_1 = sel_2949;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3316_sel_1 = sel_2948;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3316_sel_1 = sel_2947;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3316_sel_1 = sel_2946;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3316_sel_1 = sel_2945;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3316_sel_1 = sel_2944;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3316_sel_1 = sel_2943;
        end
      default :
        begin
          p3316_sel_1 = sel_2968;
        end
    endcase
    sel_1_972 = p3316_sel_1;
  end

  assign tmp_479 = functionOutput_21[sel_1_972];

  always @(posedge clk)
    begin : rd_404_process
      if (rst == 1'b1) begin
        tmp_480 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_480 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_390_process
      if (rst == 1'b1) begin
        tmp_481 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_481 <= tmp_479;
        end
      end
    end

  assign sel_1_973 = (tmp_477 == 1'b0 ? tmp_478 :
              tmp_481);

  assign sel_2969 = 32'sd0;

  assign sel_2970 = 32'sd0;

  assign sel_2971 = 32'sd0;

  assign sel_2972 = 32'sd0;

  assign sel_2973 = 32'sd0;

  assign sel_2974 = 32'sd0;

  assign sel_2975 = 32'sd0;

  assign sel_2976 = 32'sd0;

  assign sel_2977 = 32'sd0;

  assign sel_2978 = 32'sd0;

  assign sel_2979 = 32'sd0;

  assign sel_2980 = 32'sd0;

  assign sel_2981 = 32'sd0;

  assign sel_2982 = 32'sd0;

  assign sel_2983 = 32'sd0;

  assign sel_2984 = 32'sd0;

  assign sel_2985 = 32'sd0;

  assign s_406 = 32'sd7;

  assign sel_1_974 = (tmp_8 == 1'b0 ? sel_2985 :
              s_406);

  assign sel_2986 = 32'sd0;

  assign sel_1_975 = (tmp_10 == 1'b0 ? sel_1_974 :
              sel_2986);

  assign sel_2987 = 32'sd0;

  assign sel_1_976 = (tmp_12 == 1'b0 ? sel_1_975 :
              sel_2987);

  assign sel_2988 = 32'sd0;

  assign sel_1_977 = (tmp_14 == 1'b0 ? sel_1_976 :
              sel_2988);

  assign sel_2989 = 32'sd0;

  assign sel_1_978 = (tmp_16 == 1'b0 ? sel_1_977 :
              sel_2989);

  assign sel_2990 = 32'sd0;

  assign sel_1_979 = (tmp_18 == 1'b0 ? sel_1_978 :
              sel_2990);

  assign sel_1_980 = (s_10 == 1'b0 ? sel_2984 :
              sel_1_979);

  assign sel_1_981 = (s_11 == 1'b0 ? sel_2983 :
              sel_1_980);

  assign sel_2991 = 32'sd0;

  assign sel_1_982 = (s_12 == 1'b0 ? sel_1_981 :
              sel_2991);

  assign sel_2992 = 32'sd0;

  assign sel_2993 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_982, sel_2969, sel_2970, sel_2971, sel_2972, sel_2973,
       sel_2974, sel_2975, sel_2976, sel_2977, sel_2978, sel_2979, sel_2980,
       sel_2981, sel_2982, sel_2992, sel_2993) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2385_sel_1 = sel_2992;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2385_sel_1 = sel_1_982;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2385_sel_1 = sel_2982;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2385_sel_1 = sel_2981;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2385_sel_1 = sel_2980;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2385_sel_1 = sel_2979;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2385_sel_1 = sel_2978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2385_sel_1 = sel_2977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2385_sel_1 = sel_2976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2385_sel_1 = sel_2975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2385_sel_1 = sel_2974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2385_sel_1 = sel_2973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2385_sel_1 = sel_2972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2385_sel_1 = sel_2971;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2385_sel_1 = sel_2970;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2385_sel_1 = sel_2969;
        end
      default :
        begin
          p2385_sel_1 = sel_2993;
        end
    endcase
    sel_1_983 = p2385_sel_1;
  end

  assign tmp_482 = functionOutput_22[sel_1_983];

  always @(posedge clk)
    begin : rd_403_process
      if (rst == 1'b1) begin
        tmp_483 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_483 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_389_process
      if (rst == 1'b1) begin
        tmp_484 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_484 <= tmp_482;
        end
      end
    end

  assign sel_1_984 = (tmp_480 == 1'b0 ? sel_1_973 :
              tmp_484);

  assign sel_2994 = 32'sd0;

  assign sel_2995 = 32'sd0;

  assign sel_2996 = 32'sd0;

  assign sel_2997 = 32'sd0;

  assign sel_2998 = 32'sd0;

  assign sel_2999 = 32'sd0;

  assign sel_3000 = 32'sd0;

  assign sel_3001 = 32'sd0;

  assign sel_3002 = 32'sd0;

  assign sel_3003 = 32'sd0;

  assign sel_3004 = 32'sd0;

  assign sel_3005 = 32'sd0;

  assign sel_3006 = 32'sd0;

  assign sel_3007 = 32'sd0;

  assign sel_3008 = 32'sd0;

  assign sel_3009 = 32'sd0;

  assign sel_3010 = 32'sd0;

  assign s_407 = 32'sd7;

  assign sel_1_985 = (tmp_10 == 1'b0 ? sel_3010 :
              s_407);

  assign sel_3011 = 32'sd0;

  assign sel_1_986 = (tmp_12 == 1'b0 ? sel_1_985 :
              sel_3011);

  assign sel_3012 = 32'sd0;

  assign sel_1_987 = (tmp_14 == 1'b0 ? sel_1_986 :
              sel_3012);

  assign sel_3013 = 32'sd0;

  assign sel_1_988 = (tmp_16 == 1'b0 ? sel_1_987 :
              sel_3013);

  assign sel_3014 = 32'sd0;

  assign sel_1_989 = (tmp_18 == 1'b0 ? sel_1_988 :
              sel_3014);

  assign sel_1_990 = (s_10 == 1'b0 ? sel_3009 :
              sel_1_989);

  assign sel_1_991 = (s_11 == 1'b0 ? sel_3008 :
              sel_1_990);

  assign sel_3015 = 32'sd0;

  assign sel_1_992 = (s_12 == 1'b0 ? sel_1_991 :
              sel_3015);

  assign sel_3016 = 32'sd0;

  assign sel_3017 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_992, sel_2994, sel_2995, sel_2996, sel_2997, sel_2998,
       sel_2999, sel_3000, sel_3001, sel_3002, sel_3003, sel_3004, sel_3005,
       sel_3006, sel_3007, sel_3016, sel_3017) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1929_sel_1 = sel_3016;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1929_sel_1 = sel_1_992;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1929_sel_1 = sel_3007;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1929_sel_1 = sel_3006;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1929_sel_1 = sel_3005;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1929_sel_1 = sel_3004;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1929_sel_1 = sel_3003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1929_sel_1 = sel_3002;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1929_sel_1 = sel_3001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1929_sel_1 = sel_3000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1929_sel_1 = sel_2999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1929_sel_1 = sel_2998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1929_sel_1 = sel_2997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1929_sel_1 = sel_2996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1929_sel_1 = sel_2995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1929_sel_1 = sel_2994;
        end
      default :
        begin
          p1929_sel_1 = sel_3017;
        end
    endcase
    sel_1_993 = p1929_sel_1;
  end

  assign tmp_485 = functionOutput_23[sel_1_993];

  always @(posedge clk)
    begin : rd_402_process
      if (rst == 1'b1) begin
        tmp_486 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_486 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_388_process
      if (rst == 1'b1) begin
        tmp_487 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_487 <= tmp_485;
        end
      end
    end

  assign sel_1_994 = (tmp_483 == 1'b0 ? sel_1_984 :
              tmp_487);

  assign sel_3018 = 32'sd0;

  assign sel_3019 = 32'sd0;

  assign sel_3020 = 32'sd0;

  assign sel_3021 = 32'sd0;

  assign sel_3022 = 32'sd0;

  assign sel_3023 = 32'sd0;

  assign sel_3024 = 32'sd0;

  assign sel_3025 = 32'sd0;

  assign sel_3026 = 32'sd0;

  assign sel_3027 = 32'sd0;

  assign sel_3028 = 32'sd0;

  assign sel_3029 = 32'sd0;

  assign sel_3030 = 32'sd0;

  assign sel_3031 = 32'sd0;

  assign sel_3032 = 32'sd0;

  assign sel_3033 = 32'sd0;

  assign sel_3034 = 32'sd0;

  assign s_408 = 32'sd7;

  assign sel_1_995 = (tmp_12 == 1'b0 ? sel_3034 :
              s_408);

  assign sel_3035 = 32'sd0;

  assign sel_1_996 = (tmp_14 == 1'b0 ? sel_1_995 :
              sel_3035);

  assign sel_3036 = 32'sd0;

  assign sel_1_997 = (tmp_16 == 1'b0 ? sel_1_996 :
              sel_3036);

  assign sel_3037 = 32'sd0;

  assign sel_1_998 = (tmp_18 == 1'b0 ? sel_1_997 :
              sel_3037);

  assign sel_1_999 = (s_10 == 1'b0 ? sel_3033 :
              sel_1_998);

  assign sel_1_1000 = (s_11 == 1'b0 ? sel_3032 :
              sel_1_999);

  assign sel_3038 = 32'sd0;

  assign sel_1_1001 = (s_12 == 1'b0 ? sel_1_1000 :
              sel_3038);

  assign sel_3039 = 32'sd0;

  assign sel_3040 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1001, sel_3018, sel_3019, sel_3020, sel_3021, sel_3022,
       sel_3023, sel_3024, sel_3025, sel_3026, sel_3027, sel_3028, sel_3029,
       sel_3030, sel_3031, sel_3039, sel_3040) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2252_sel_1 = sel_3039;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2252_sel_1 = sel_1_1001;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2252_sel_1 = sel_3031;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2252_sel_1 = sel_3030;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2252_sel_1 = sel_3029;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2252_sel_1 = sel_3028;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2252_sel_1 = sel_3027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2252_sel_1 = sel_3026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2252_sel_1 = sel_3025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2252_sel_1 = sel_3024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2252_sel_1 = sel_3023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2252_sel_1 = sel_3022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2252_sel_1 = sel_3021;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2252_sel_1 = sel_3020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2252_sel_1 = sel_3019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2252_sel_1 = sel_3018;
        end
      default :
        begin
          p2252_sel_1 = sel_3040;
        end
    endcase
    sel_1_1002 = p2252_sel_1;
  end

  assign tmp_488 = functionOutput_24[sel_1_1002];

  always @(posedge clk)
    begin : rd_401_process
      if (rst == 1'b1) begin
        tmp_489 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_489 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_387_process
      if (rst == 1'b1) begin
        tmp_490 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_490 <= tmp_488;
        end
      end
    end

  assign sel_1_1003 = (tmp_486 == 1'b0 ? sel_1_994 :
              tmp_490);

  assign sel_3041 = 32'sd0;

  assign sel_3042 = 32'sd0;

  assign sel_3043 = 32'sd0;

  assign sel_3044 = 32'sd0;

  assign sel_3045 = 32'sd0;

  assign sel_3046 = 32'sd0;

  assign sel_3047 = 32'sd0;

  assign sel_3048 = 32'sd0;

  assign sel_3049 = 32'sd0;

  assign sel_3050 = 32'sd0;

  assign sel_3051 = 32'sd0;

  assign sel_3052 = 32'sd0;

  assign sel_3053 = 32'sd0;

  assign sel_3054 = 32'sd0;

  assign sel_3055 = 32'sd0;

  assign sel_3056 = 32'sd0;

  assign sel_3057 = 32'sd0;

  assign s_409 = 32'sd7;

  assign sel_1_1004 = (tmp_14 == 1'b0 ? sel_3057 :
              s_409);

  assign sel_3058 = 32'sd0;

  assign sel_1_1005 = (tmp_16 == 1'b0 ? sel_1_1004 :
              sel_3058);

  assign sel_3059 = 32'sd0;

  assign sel_1_1006 = (tmp_18 == 1'b0 ? sel_1_1005 :
              sel_3059);

  assign sel_1_1007 = (s_10 == 1'b0 ? sel_3056 :
              sel_1_1006);

  assign sel_1_1008 = (s_11 == 1'b0 ? sel_3055 :
              sel_1_1007);

  assign sel_3060 = 32'sd0;

  assign sel_1_1009 = (s_12 == 1'b0 ? sel_1_1008 :
              sel_3060);

  assign sel_3061 = 32'sd0;

  assign sel_3062 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1009, sel_3041, sel_3042, sel_3043, sel_3044, sel_3045,
       sel_3046, sel_3047, sel_3048, sel_3049, sel_3050, sel_3051, sel_3052,
       sel_3053, sel_3054, sel_3061, sel_3062) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1720_sel_1 = sel_3061;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1720_sel_1 = sel_1_1009;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1720_sel_1 = sel_3054;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1720_sel_1 = sel_3053;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1720_sel_1 = sel_3052;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1720_sel_1 = sel_3051;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1720_sel_1 = sel_3050;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1720_sel_1 = sel_3049;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1720_sel_1 = sel_3048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1720_sel_1 = sel_3047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1720_sel_1 = sel_3046;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1720_sel_1 = sel_3045;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1720_sel_1 = sel_3044;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1720_sel_1 = sel_3043;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1720_sel_1 = sel_3042;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1720_sel_1 = sel_3041;
        end
      default :
        begin
          p1720_sel_1 = sel_3062;
        end
    endcase
    sel_1_1010 = p1720_sel_1;
  end

  assign tmp_491 = functionOutput_25[sel_1_1010];

  always @(posedge clk)
    begin : rd_400_process
      if (rst == 1'b1) begin
        tmp_492 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_492 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_386_process
      if (rst == 1'b1) begin
        tmp_493 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_493 <= tmp_491;
        end
      end
    end

  assign sel_1_1011 = (tmp_489 == 1'b0 ? sel_1_1003 :
              tmp_493);

  assign sel_3063 = 32'sd0;

  assign sel_3064 = 32'sd0;

  assign sel_3065 = 32'sd0;

  assign sel_3066 = 32'sd0;

  assign sel_3067 = 32'sd0;

  assign sel_3068 = 32'sd0;

  assign sel_3069 = 32'sd0;

  assign sel_3070 = 32'sd0;

  assign sel_3071 = 32'sd0;

  assign sel_3072 = 32'sd0;

  assign sel_3073 = 32'sd0;

  assign sel_3074 = 32'sd0;

  assign sel_3075 = 32'sd0;

  assign sel_3076 = 32'sd0;

  assign sel_3077 = 32'sd0;

  assign sel_3078 = 32'sd0;

  assign sel_3079 = 32'sd0;

  assign s_410 = 32'sd7;

  assign sel_1_1012 = (tmp_16 == 1'b0 ? sel_3079 :
              s_410);

  assign sel_3080 = 32'sd0;

  assign sel_1_1013 = (tmp_18 == 1'b0 ? sel_1_1012 :
              sel_3080);

  assign sel_1_1014 = (s_10 == 1'b0 ? sel_3078 :
              sel_1_1013);

  assign sel_1_1015 = (s_11 == 1'b0 ? sel_3077 :
              sel_1_1014);

  assign sel_3081 = 32'sd0;

  assign sel_1_1016 = (s_12 == 1'b0 ? sel_1_1015 :
              sel_3081);

  assign sel_3082 = 32'sd0;

  assign sel_3083 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1016, sel_3063, sel_3064, sel_3065, sel_3066, sel_3067,
       sel_3068, sel_3069, sel_3070, sel_3071, sel_3072, sel_3073, sel_3074,
       sel_3075, sel_3076, sel_3082, sel_3083) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1815_sel_1 = sel_3082;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1815_sel_1 = sel_1_1016;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1815_sel_1 = sel_3076;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1815_sel_1 = sel_3075;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1815_sel_1 = sel_3074;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1815_sel_1 = sel_3073;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1815_sel_1 = sel_3072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1815_sel_1 = sel_3071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1815_sel_1 = sel_3070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1815_sel_1 = sel_3069;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1815_sel_1 = sel_3068;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1815_sel_1 = sel_3067;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1815_sel_1 = sel_3066;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1815_sel_1 = sel_3065;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1815_sel_1 = sel_3064;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1815_sel_1 = sel_3063;
        end
      default :
        begin
          p1815_sel_1 = sel_3083;
        end
    endcase
    sel_1_1017 = p1815_sel_1;
  end

  assign tmp_494 = functionOutput_26[sel_1_1017];

  always @(posedge clk)
    begin : rd_399_process
      if (rst == 1'b1) begin
        tmp_495 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_495 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_385_process
      if (rst == 1'b1) begin
        tmp_496 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_496 <= tmp_494;
        end
      end
    end

  assign sel_1_1018 = (tmp_492 == 1'b0 ? sel_1_1011 :
              tmp_496);

  assign sel_3084 = 32'sd0;

  assign sel_3085 = 32'sd0;

  assign sel_3086 = 32'sd0;

  assign sel_3087 = 32'sd0;

  assign sel_3088 = 32'sd0;

  assign sel_3089 = 32'sd0;

  assign sel_3090 = 32'sd0;

  assign sel_3091 = 32'sd0;

  assign sel_3092 = 32'sd0;

  assign sel_3093 = 32'sd0;

  assign sel_3094 = 32'sd0;

  assign sel_3095 = 32'sd0;

  assign sel_3096 = 32'sd0;

  assign sel_3097 = 32'sd0;

  assign sel_3098 = 32'sd0;

  assign sel_3099 = 32'sd0;

  assign sel_3100 = 32'sd0;

  assign s_411 = 32'sd7;

  assign sel_1_1019 = (tmp_18 == 1'b0 ? sel_3100 :
              s_411);

  assign sel_1_1020 = (s_10 == 1'b0 ? sel_3099 :
              sel_1_1019);

  assign sel_1_1021 = (s_11 == 1'b0 ? sel_3098 :
              sel_1_1020);

  assign sel_3101 = 32'sd0;

  assign sel_1_1022 = (s_12 == 1'b0 ? sel_1_1021 :
              sel_3101);

  assign sel_3102 = 32'sd0;

  assign sel_3103 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1022, sel_3084, sel_3085, sel_3086, sel_3087, sel_3088,
       sel_3089, sel_3090, sel_3091, sel_3092, sel_3093, sel_3094, sel_3095,
       sel_3096, sel_3097, sel_3102, sel_3103) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1796_sel_1 = sel_3102;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1796_sel_1 = sel_1_1022;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1796_sel_1 = sel_3097;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1796_sel_1 = sel_3096;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1796_sel_1 = sel_3095;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1796_sel_1 = sel_3094;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1796_sel_1 = sel_3093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1796_sel_1 = sel_3092;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1796_sel_1 = sel_3091;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1796_sel_1 = sel_3090;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1796_sel_1 = sel_3089;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1796_sel_1 = sel_3088;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1796_sel_1 = sel_3087;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1796_sel_1 = sel_3086;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1796_sel_1 = sel_3085;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1796_sel_1 = sel_3084;
        end
      default :
        begin
          p1796_sel_1 = sel_3103;
        end
    endcase
    sel_1_1023 = p1796_sel_1;
  end

  assign tmp_497 = functionOutput_27[sel_1_1023];

  assign sel_3104 = 8'd0;

  always @(posedge clk)
    begin : rd_380_process
      if (rst == 1'b1) begin
        tmp_498 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_498 <= tmp_476;
        end
      end
    end

  assign sel_1_1024 = (s_401 == 1'b0 ? sel_1_946 :
              tmp_498);

  always @(posedge clk)
    begin : rd_384_process
      if (rst == 1'b1) begin
        tmp_499 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_499 <= tmp_497;
        end
      end
    end

  assign sel_1_1025 = (tmp_495 == 1'b0 ? sel_1_1018 :
              tmp_499);

  assign sel_3105 = 8'd0;

  always @(posedge clk)
    begin : rd_407_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_71 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_71 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3106 = 1'b0;

  assign sel_3107 = 1'b0;

  assign sel_3108 = 1'b0;

  assign sel_3109 = 1'b0;

  assign sel_3110 = 1'b0;

  assign sel_3111 = 1'b0;

  assign sel_3112 = 1'b0;

  assign sel_3113 = 1'b0;

  assign sel_3114 = 1'b0;

  assign sel_3115 = 1'b0;

  assign sel_3116 = 1'b0;

  assign sel_3117 = 1'b0;

  assign sel_3118 = 1'b0;

  assign sel_3119 = 1'b0;

  assign s_412 = 1'b1;

  assign sel_2_152 = (s_14 == 1'b0 ? sel_3119 :
              s_412);

  assign s_413 = 1'b1;

  assign sel_2_153 = (s_15 == 1'b0 ? sel_2_152 :
              s_413);

  assign s_414 = 1'b1;

  assign sel_2_154 = (s_16 == 1'b0 ? sel_2_153 :
              s_414);

  assign s_415 = 1'b1;

  assign sel_2_155 = (s_17 == 1'b0 ? sel_2_154 :
              s_415);

  assign s_416 = 1'b1;

  assign sel_2_156 = (s_18 == 1'b0 ? sel_2_155 :
              s_416);

  assign s_417 = 1'b1;

  assign sel_2_157 = (s_19 == 1'b0 ? sel_2_156 :
              s_417);

  assign s_418 = 1'b1;

  assign sel_2_158 = (s_20 == 1'b0 ? sel_2_157 :
              s_418);

  assign s_419 = 1'b1;

  assign sel_2_159 = (s_21 == 1'b0 ? sel_2_158 :
              s_419);

  always @(posedge clk)
    begin : rd_409_process
      if (rst == 1'b1) begin
        s_420 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_420 <= s_12;
        end
      end
    end

  assign sel_3120 = 1'b0;

  assign sel_3121 = 1'b0;

  assign sel_3122 = 1'b0;

  assign s_421 = 1'b1;

  assign sel_2_160 = (tmp_4 == 1'b0 ? sel_3122 :
              s_421);

  assign s_422 = 1'b1;

  assign sel_2_161 = (tmp_6 == 1'b0 ? sel_2_160 :
              s_422);

  assign s_423 = 1'b1;

  assign sel_2_162 = (tmp_8 == 1'b0 ? sel_2_161 :
              s_423);

  assign s_424 = 1'b1;

  assign sel_2_163 = (tmp_10 == 1'b0 ? sel_2_162 :
              s_424);

  assign s_425 = 1'b1;

  assign sel_2_164 = (tmp_12 == 1'b0 ? sel_2_163 :
              s_425);

  assign s_426 = 1'b1;

  assign sel_2_165 = (tmp_14 == 1'b0 ? sel_2_164 :
              s_426);

  assign s_427 = 1'b1;

  assign sel_2_166 = (tmp_16 == 1'b0 ? sel_2_165 :
              s_427);

  assign s_428 = 1'b1;

  assign sel_2_167 = (tmp_18 == 1'b0 ? sel_2_166 :
              s_428);

  assign sel_2_168 = (s_10 == 1'b0 ? sel_3121 :
              sel_2_167);

  assign sel_2_169 = (s_11 == 1'b0 ? sel_3120 :
              sel_2_168);

  always @(posedge clk)
    begin : rd_410_process
      if (rst == 1'b1) begin
        sel_2_170 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_170 <= sel_2_169;
        end
      end
    end

  always @(posedge clk)
    begin : rd_408_process
      if (rst == 1'b1) begin
        sel_2_171 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_171 <= sel_2_159;
        end
      end
    end

  assign sel_3123 = 1'b0;

  assign sel_2_172 = (s_420 == 1'b0 ? sel_2_170 :
              sel_3123);

  assign sel_3124 = 1'b0;

  always @(posedge clk)
    begin : rd_411_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_72 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_72 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3125 = 8'd0;

  assign sel_3126 = 8'd0;

  assign sel_3127 = 8'd0;

  assign sel_3128 = 8'd0;

  assign sel_3129 = 8'd0;

  assign sel_3130 = 8'd0;

  assign sel_3131 = 8'd0;

  assign sel_3132 = 8'd0;

  assign sel_3133 = 8'd0;

  assign sel_3134 = 8'd0;

  assign sel_3135 = 8'd0;

  assign sel_3136 = 8'd0;

  always @(posedge clk)
    begin : rd_429_process
      if (rst == 1'b1) begin
        s_429 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_429 <= s_18;
        end
      end
    end

  assign sel_3137 = 32'sd0;

  assign sel_3138 = 32'sd0;

  assign sel_3139 = 32'sd0;

  assign sel_3140 = 32'sd0;

  assign sel_3141 = 32'sd0;

  assign sel_3142 = 32'sd0;

  assign sel_3143 = 32'sd0;

  assign sel_3144 = 32'sd0;

  assign sel_3145 = 32'sd0;

  assign sel_3146 = 32'sd0;

  assign sel_3147 = 32'sd0;

  assign sel_3148 = 32'sd0;

  assign sel_3149 = 32'sd0;

  assign sel_3150 = 32'sd0;

  assign s_430 = 32'sd8;

  assign sel_1_1026 = (s_14 == 1'b0 ? sel_3150 :
              s_430);

  assign sel_3151 = 32'sd0;

  assign sel_1_1027 = (s_15 == 1'b0 ? sel_1_1026 :
              sel_3151);

  assign sel_3152 = 32'sd0;

  assign sel_1_1028 = (s_16 == 1'b0 ? sel_1_1027 :
              sel_3152);

  assign sel_3153 = 32'sd0;

  assign sel_1_1029 = (s_17 == 1'b0 ? sel_1_1028 :
              sel_3153);

  assign sel_3154 = 32'sd0;

  assign sel_1_1030 = (s_18 == 1'b0 ? sel_1_1029 :
              sel_3154);

  assign sel_3155 = 32'sd0;

  assign sel_1_1031 = (s_19 == 1'b0 ? sel_1_1030 :
              sel_3155);

  assign sel_3156 = 32'sd0;

  assign sel_1_1032 = (s_20 == 1'b0 ? sel_1_1031 :
              sel_3156);

  assign sel_3157 = 32'sd0;

  assign sel_1_1033 = (s_21 == 1'b0 ? sel_1_1032 :
              sel_3157);

  assign sel_3158 = 32'sd0;

  assign sel_3159 = 32'sd0;

  assign sel_3160 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1033, sel_3137, sel_3138, sel_3139, sel_3140, sel_3141,
       sel_3142, sel_3143, sel_3144, sel_3145, sel_3146, sel_3147, sel_3148,
       sel_3149, sel_3158, sel_3159, sel_3160) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4798_sel_1 = sel_3159;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4798_sel_1 = sel_3158;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4798_sel_1 = sel_1_1033;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4798_sel_1 = sel_3149;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4798_sel_1 = sel_3148;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4798_sel_1 = sel_3147;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4798_sel_1 = sel_3146;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4798_sel_1 = sel_3145;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4798_sel_1 = sel_3144;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4798_sel_1 = sel_3143;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4798_sel_1 = sel_3142;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4798_sel_1 = sel_3141;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4798_sel_1 = sel_3140;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4798_sel_1 = sel_3139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4798_sel_1 = sel_3138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4798_sel_1 = sel_3137;
        end
      default :
        begin
          p4798_sel_1 = sel_3160;
        end
    endcase
    sel_1_1034 = p4798_sel_1;
  end

  assign tmp_500 = functionOutput[sel_1_1034];

  assign sel_3161 = 32'sd0;

  assign sel_3162 = 32'sd0;

  assign sel_3163 = 32'sd0;

  assign sel_3164 = 32'sd0;

  assign sel_3165 = 32'sd0;

  assign sel_3166 = 32'sd0;

  assign sel_3167 = 32'sd0;

  assign sel_3168 = 32'sd0;

  assign sel_3169 = 32'sd0;

  assign sel_3170 = 32'sd0;

  assign sel_3171 = 32'sd0;

  assign sel_3172 = 32'sd0;

  assign sel_3173 = 32'sd0;

  assign sel_3174 = 32'sd0;

  assign s_431 = 32'sd8;

  assign sel_1_1035 = (s_15 == 1'b0 ? sel_3174 :
              s_431);

  assign sel_3175 = 32'sd0;

  assign sel_1_1036 = (s_16 == 1'b0 ? sel_1_1035 :
              sel_3175);

  assign sel_3176 = 32'sd0;

  assign sel_1_1037 = (s_17 == 1'b0 ? sel_1_1036 :
              sel_3176);

  assign sel_3177 = 32'sd0;

  assign sel_1_1038 = (s_18 == 1'b0 ? sel_1_1037 :
              sel_3177);

  assign sel_3178 = 32'sd0;

  assign sel_1_1039 = (s_19 == 1'b0 ? sel_1_1038 :
              sel_3178);

  assign sel_3179 = 32'sd0;

  assign sel_1_1040 = (s_20 == 1'b0 ? sel_1_1039 :
              sel_3179);

  assign sel_3180 = 32'sd0;

  assign sel_1_1041 = (s_21 == 1'b0 ? sel_1_1040 :
              sel_3180);

  assign sel_3181 = 32'sd0;

  assign sel_3182 = 32'sd0;

  assign sel_3183 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1041, sel_3161, sel_3162, sel_3163, sel_3164, sel_3165,
       sel_3166, sel_3167, sel_3168, sel_3169, sel_3170, sel_3171, sel_3172,
       sel_3173, sel_3181, sel_3182, sel_3183) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4589_sel_1 = sel_3182;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4589_sel_1 = sel_3181;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4589_sel_1 = sel_1_1041;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4589_sel_1 = sel_3173;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4589_sel_1 = sel_3172;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4589_sel_1 = sel_3171;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4589_sel_1 = sel_3170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4589_sel_1 = sel_3169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4589_sel_1 = sel_3168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4589_sel_1 = sel_3167;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4589_sel_1 = sel_3166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4589_sel_1 = sel_3165;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4589_sel_1 = sel_3164;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4589_sel_1 = sel_3163;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4589_sel_1 = sel_3162;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4589_sel_1 = sel_3161;
        end
      default :
        begin
          p4589_sel_1 = sel_3183;
        end
    endcase
    sel_1_1042 = p4589_sel_1;
  end

  assign tmp_501 = functionOutput_12[sel_1_1042];

  assign sel_1_1043 = (s_15 == 1'b0 ? tmp_500 :
              tmp_501);

  assign sel_3184 = 32'sd0;

  assign sel_3185 = 32'sd0;

  assign sel_3186 = 32'sd0;

  assign sel_3187 = 32'sd0;

  assign sel_3188 = 32'sd0;

  assign sel_3189 = 32'sd0;

  assign sel_3190 = 32'sd0;

  assign sel_3191 = 32'sd0;

  assign sel_3192 = 32'sd0;

  assign sel_3193 = 32'sd0;

  assign sel_3194 = 32'sd0;

  assign sel_3195 = 32'sd0;

  assign sel_3196 = 32'sd0;

  assign sel_3197 = 32'sd0;

  assign s_432 = 32'sd8;

  assign sel_1_1044 = (s_16 == 1'b0 ? sel_3197 :
              s_432);

  assign sel_3198 = 32'sd0;

  assign sel_1_1045 = (s_17 == 1'b0 ? sel_1_1044 :
              sel_3198);

  assign sel_3199 = 32'sd0;

  assign sel_1_1046 = (s_18 == 1'b0 ? sel_1_1045 :
              sel_3199);

  assign sel_3200 = 32'sd0;

  assign sel_1_1047 = (s_19 == 1'b0 ? sel_1_1046 :
              sel_3200);

  assign sel_3201 = 32'sd0;

  assign sel_1_1048 = (s_20 == 1'b0 ? sel_1_1047 :
              sel_3201);

  assign sel_3202 = 32'sd0;

  assign sel_1_1049 = (s_21 == 1'b0 ? sel_1_1048 :
              sel_3202);

  assign sel_3203 = 32'sd0;

  assign sel_3204 = 32'sd0;

  assign sel_3205 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1049, sel_3184, sel_3185, sel_3186, sel_3187, sel_3188,
       sel_3189, sel_3190, sel_3191, sel_3192, sel_3193, sel_3194, sel_3195,
       sel_3196, sel_3203, sel_3204, sel_3205) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3867_sel_1 = sel_3204;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3867_sel_1 = sel_3203;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3867_sel_1 = sel_1_1049;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3867_sel_1 = sel_3196;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3867_sel_1 = sel_3195;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3867_sel_1 = sel_3194;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3867_sel_1 = sel_3193;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3867_sel_1 = sel_3192;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3867_sel_1 = sel_3191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3867_sel_1 = sel_3190;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3867_sel_1 = sel_3189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3867_sel_1 = sel_3188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3867_sel_1 = sel_3187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3867_sel_1 = sel_3186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3867_sel_1 = sel_3185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3867_sel_1 = sel_3184;
        end
      default :
        begin
          p3867_sel_1 = sel_3205;
        end
    endcase
    sel_1_1050 = p3867_sel_1;
  end

  assign tmp_502 = functionOutput_13[sel_1_1050];

  assign sel_1_1051 = (s_16 == 1'b0 ? sel_1_1043 :
              tmp_502);

  assign sel_3206 = 32'sd0;

  assign sel_3207 = 32'sd0;

  assign sel_3208 = 32'sd0;

  assign sel_3209 = 32'sd0;

  assign sel_3210 = 32'sd0;

  assign sel_3211 = 32'sd0;

  assign sel_3212 = 32'sd0;

  assign sel_3213 = 32'sd0;

  assign sel_3214 = 32'sd0;

  assign sel_3215 = 32'sd0;

  assign sel_3216 = 32'sd0;

  assign sel_3217 = 32'sd0;

  assign sel_3218 = 32'sd0;

  assign sel_3219 = 32'sd0;

  assign s_433 = 32'sd8;

  assign sel_1_1052 = (s_17 == 1'b0 ? sel_3219 :
              s_433);

  assign sel_3220 = 32'sd0;

  assign sel_1_1053 = (s_18 == 1'b0 ? sel_1_1052 :
              sel_3220);

  assign sel_3221 = 32'sd0;

  assign sel_1_1054 = (s_19 == 1'b0 ? sel_1_1053 :
              sel_3221);

  assign sel_3222 = 32'sd0;

  assign sel_1_1055 = (s_20 == 1'b0 ? sel_1_1054 :
              sel_3222);

  assign sel_3223 = 32'sd0;

  assign sel_1_1056 = (s_21 == 1'b0 ? sel_1_1055 :
              sel_3223);

  assign sel_3224 = 32'sd0;

  assign sel_3225 = 32'sd0;

  assign sel_3226 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1056, sel_3206, sel_3207, sel_3208, sel_3209, sel_3210,
       sel_3211, sel_3212, sel_3213, sel_3214, sel_3215, sel_3216, sel_3217,
       sel_3218, sel_3224, sel_3225, sel_3226) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4665_sel_1 = sel_3225;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4665_sel_1 = sel_3224;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4665_sel_1 = sel_1_1056;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4665_sel_1 = sel_3218;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4665_sel_1 = sel_3217;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4665_sel_1 = sel_3216;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4665_sel_1 = sel_3215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4665_sel_1 = sel_3214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4665_sel_1 = sel_3213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4665_sel_1 = sel_3212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4665_sel_1 = sel_3211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4665_sel_1 = sel_3210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4665_sel_1 = sel_3209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4665_sel_1 = sel_3208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4665_sel_1 = sel_3207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4665_sel_1 = sel_3206;
        end
      default :
        begin
          p4665_sel_1 = sel_3226;
        end
    endcase
    sel_1_1057 = p4665_sel_1;
  end

  assign tmp_503 = functionOutput_14[sel_1_1057];

  assign sel_1_1058 = (s_17 == 1'b0 ? sel_1_1051 :
              tmp_503);

  always @(posedge clk)
    begin : rd_430_process
      if (rst == 1'b1) begin
        sel_1_1059 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_1059 <= sel_1_1058;
        end
      end
    end

  assign sel_3227 = 32'sd0;

  assign sel_3228 = 32'sd0;

  assign sel_3229 = 32'sd0;

  assign sel_3230 = 32'sd0;

  assign sel_3231 = 32'sd0;

  assign sel_3232 = 32'sd0;

  assign sel_3233 = 32'sd0;

  assign sel_3234 = 32'sd0;

  assign sel_3235 = 32'sd0;

  assign sel_3236 = 32'sd0;

  assign sel_3237 = 32'sd0;

  assign sel_3238 = 32'sd0;

  assign sel_3239 = 32'sd0;

  assign sel_3240 = 32'sd0;

  assign s_434 = 32'sd8;

  assign sel_1_1060 = (s_18 == 1'b0 ? sel_3240 :
              s_434);

  assign sel_3241 = 32'sd0;

  assign sel_1_1061 = (s_19 == 1'b0 ? sel_1_1060 :
              sel_3241);

  assign sel_3242 = 32'sd0;

  assign sel_1_1062 = (s_20 == 1'b0 ? sel_1_1061 :
              sel_3242);

  assign sel_3243 = 32'sd0;

  assign sel_1_1063 = (s_21 == 1'b0 ? sel_1_1062 :
              sel_3243);

  assign sel_3244 = 32'sd0;

  assign sel_3245 = 32'sd0;

  assign sel_3246 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1063, sel_3227, sel_3228, sel_3229, sel_3230, sel_3231,
       sel_3232, sel_3233, sel_3234, sel_3235, sel_3236, sel_3237, sel_3238,
       sel_3239, sel_3244, sel_3245, sel_3246) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3962_sel_1 = sel_3245;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3962_sel_1 = sel_3244;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3962_sel_1 = sel_1_1063;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3962_sel_1 = sel_3239;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3962_sel_1 = sel_3238;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3962_sel_1 = sel_3237;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3962_sel_1 = sel_3236;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3962_sel_1 = sel_3235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3962_sel_1 = sel_3234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3962_sel_1 = sel_3233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3962_sel_1 = sel_3232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3962_sel_1 = sel_3231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3962_sel_1 = sel_3230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3962_sel_1 = sel_3229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3962_sel_1 = sel_3228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3962_sel_1 = sel_3227;
        end
      default :
        begin
          p3962_sel_1 = sel_3246;
        end
    endcase
    sel_1_1064 = p3962_sel_1;
  end

  assign tmp_504 = functionOutput_15[sel_1_1064];

  always @(posedge clk)
    begin : rd_428_process
      if (rst == 1'b1) begin
        s_435 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_435 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_415_process
      if (rst == 1'b1) begin
        tmp_505 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_505 <= tmp_504;
        end
      end
    end

  assign sel_1_1065 = (s_429 == 1'b0 ? sel_1_1059 :
              tmp_505);

  assign sel_3247 = 32'sd0;

  assign sel_3248 = 32'sd0;

  assign sel_3249 = 32'sd0;

  assign sel_3250 = 32'sd0;

  assign sel_3251 = 32'sd0;

  assign sel_3252 = 32'sd0;

  assign sel_3253 = 32'sd0;

  assign sel_3254 = 32'sd0;

  assign sel_3255 = 32'sd0;

  assign sel_3256 = 32'sd0;

  assign sel_3257 = 32'sd0;

  assign sel_3258 = 32'sd0;

  assign sel_3259 = 32'sd0;

  assign sel_3260 = 32'sd0;

  assign s_436 = 32'sd8;

  assign sel_1_1066 = (s_19 == 1'b0 ? sel_3260 :
              s_436);

  assign sel_3261 = 32'sd0;

  assign sel_1_1067 = (s_20 == 1'b0 ? sel_1_1066 :
              sel_3261);

  assign sel_3262 = 32'sd0;

  assign sel_1_1068 = (s_21 == 1'b0 ? sel_1_1067 :
              sel_3262);

  assign sel_3263 = 32'sd0;

  assign sel_3264 = 32'sd0;

  assign sel_3265 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1068, sel_3247, sel_3248, sel_3249, sel_3250, sel_3251,
       sel_3252, sel_3253, sel_3254, sel_3255, sel_3256, sel_3257, sel_3258,
       sel_3259, sel_3263, sel_3264, sel_3265) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4551_sel_1 = sel_3264;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4551_sel_1 = sel_3263;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4551_sel_1 = sel_1_1068;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4551_sel_1 = sel_3259;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4551_sel_1 = sel_3258;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4551_sel_1 = sel_3257;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4551_sel_1 = sel_3256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4551_sel_1 = sel_3255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4551_sel_1 = sel_3254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4551_sel_1 = sel_3253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4551_sel_1 = sel_3252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4551_sel_1 = sel_3251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4551_sel_1 = sel_3250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4551_sel_1 = sel_3249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4551_sel_1 = sel_3248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4551_sel_1 = sel_3247;
        end
      default :
        begin
          p4551_sel_1 = sel_3265;
        end
    endcase
    sel_1_1069 = p4551_sel_1;
  end

  assign tmp_506 = functionOutput_16[sel_1_1069];

  always @(posedge clk)
    begin : rd_427_process
      if (rst == 1'b1) begin
        s_437 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_437 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_414_process
      if (rst == 1'b1) begin
        tmp_507 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_507 <= tmp_506;
        end
      end
    end

  assign sel_1_1070 = (s_435 == 1'b0 ? sel_1_1065 :
              tmp_507);

  assign sel_3266 = 32'sd0;

  assign sel_3267 = 32'sd0;

  assign sel_3268 = 32'sd0;

  assign sel_3269 = 32'sd0;

  assign sel_3270 = 32'sd0;

  assign sel_3271 = 32'sd0;

  assign sel_3272 = 32'sd0;

  assign sel_3273 = 32'sd0;

  assign sel_3274 = 32'sd0;

  assign sel_3275 = 32'sd0;

  assign sel_3276 = 32'sd0;

  assign sel_3277 = 32'sd0;

  assign sel_3278 = 32'sd0;

  assign sel_3279 = 32'sd0;

  assign s_438 = 32'sd8;

  assign sel_1_1071 = (s_20 == 1'b0 ? sel_3279 :
              s_438);

  assign sel_3280 = 32'sd0;

  assign sel_1_1072 = (s_21 == 1'b0 ? sel_1_1071 :
              sel_3280);

  assign sel_3281 = 32'sd0;

  assign sel_3282 = 32'sd0;

  assign sel_3283 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1072, sel_3266, sel_3267, sel_3268, sel_3269, sel_3270,
       sel_3271, sel_3272, sel_3273, sel_3274, sel_3275, sel_3276, sel_3277,
       sel_3278, sel_3281, sel_3282, sel_3283) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3810_sel_1 = sel_3282;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3810_sel_1 = sel_3281;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3810_sel_1 = sel_1_1072;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3810_sel_1 = sel_3278;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3810_sel_1 = sel_3277;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3810_sel_1 = sel_3276;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3810_sel_1 = sel_3275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3810_sel_1 = sel_3274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3810_sel_1 = sel_3273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3810_sel_1 = sel_3272;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3810_sel_1 = sel_3271;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3810_sel_1 = sel_3270;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3810_sel_1 = sel_3269;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3810_sel_1 = sel_3268;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3810_sel_1 = sel_3267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3810_sel_1 = sel_3266;
        end
      default :
        begin
          p3810_sel_1 = sel_3283;
        end
    endcase
    sel_1_1073 = p3810_sel_1;
  end

  assign tmp_508 = functionOutput_17[sel_1_1073];

  always @(posedge clk)
    begin : rd_426_process
      if (rst == 1'b1) begin
        s_439 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_439 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_413_process
      if (rst == 1'b1) begin
        tmp_509 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_509 <= tmp_508;
        end
      end
    end

  assign sel_1_1074 = (s_437 == 1'b0 ? sel_1_1070 :
              tmp_509);

  assign sel_3284 = 32'sd0;

  assign sel_3285 = 32'sd0;

  assign sel_3286 = 32'sd0;

  assign sel_3287 = 32'sd0;

  assign sel_3288 = 32'sd0;

  assign sel_3289 = 32'sd0;

  assign sel_3290 = 32'sd0;

  assign sel_3291 = 32'sd0;

  assign sel_3292 = 32'sd0;

  assign sel_3293 = 32'sd0;

  assign sel_3294 = 32'sd0;

  assign sel_3295 = 32'sd0;

  assign sel_3296 = 32'sd0;

  assign sel_3297 = 32'sd0;

  assign s_440 = 32'sd8;

  assign sel_1_1075 = (s_21 == 1'b0 ? sel_3297 :
              s_440);

  assign sel_3298 = 32'sd0;

  assign sel_3299 = 32'sd0;

  assign sel_3300 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1075, sel_3284, sel_3285, sel_3286, sel_3287, sel_3288,
       sel_3289, sel_3290, sel_3291, sel_3292, sel_3293, sel_3294, sel_3295,
       sel_3296, sel_3298, sel_3299, sel_3300) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4285_sel_1 = sel_3299;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4285_sel_1 = sel_3298;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4285_sel_1 = sel_1_1075;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4285_sel_1 = sel_3296;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4285_sel_1 = sel_3295;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4285_sel_1 = sel_3294;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4285_sel_1 = sel_3293;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4285_sel_1 = sel_3292;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4285_sel_1 = sel_3291;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4285_sel_1 = sel_3290;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4285_sel_1 = sel_3289;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4285_sel_1 = sel_3288;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4285_sel_1 = sel_3287;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4285_sel_1 = sel_3286;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4285_sel_1 = sel_3285;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4285_sel_1 = sel_3284;
        end
      default :
        begin
          p4285_sel_1 = sel_3300;
        end
    endcase
    sel_1_1076 = p4285_sel_1;
  end

  assign tmp_510 = functionOutput_18[sel_1_1076];

  always @(posedge clk)
    begin : rd_423_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_73 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_73 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3301 = 32'sd0;

  assign sel_3302 = 32'sd0;

  assign sel_3303 = 32'sd0;

  assign sel_3304 = 32'sd0;

  assign sel_3305 = 32'sd0;

  assign sel_3306 = 32'sd0;

  assign sel_3307 = 32'sd0;

  assign sel_3308 = 32'sd0;

  assign sel_3309 = 32'sd0;

  assign sel_3310 = 32'sd0;

  assign sel_3311 = 32'sd0;

  assign sel_3312 = 32'sd0;

  assign sel_3313 = 32'sd0;

  always @(posedge clk)
    begin : rd_424_process
      if (rst == 1'b1) begin
        s_441 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_441 <= s_12;
        end
      end
    end

  assign sel_3314 = 32'sd0;

  assign sel_3315 = 32'sd0;

  assign sel_3316 = 32'sd0;

  assign s_442 = 32'sd8;

  assign sel_1_1077 = (tmp_4 == 1'b0 ? sel_3316 :
              s_442);

  assign sel_3317 = 32'sd0;

  assign sel_1_1078 = (tmp_6 == 1'b0 ? sel_1_1077 :
              sel_3317);

  assign sel_3318 = 32'sd0;

  assign sel_1_1079 = (tmp_8 == 1'b0 ? sel_1_1078 :
              sel_3318);

  assign sel_3319 = 32'sd0;

  assign sel_1_1080 = (tmp_10 == 1'b0 ? sel_1_1079 :
              sel_3319);

  assign sel_3320 = 32'sd0;

  assign sel_1_1081 = (tmp_12 == 1'b0 ? sel_1_1080 :
              sel_3320);

  assign sel_3321 = 32'sd0;

  assign sel_1_1082 = (tmp_14 == 1'b0 ? sel_1_1081 :
              sel_3321);

  assign sel_3322 = 32'sd0;

  assign sel_1_1083 = (tmp_16 == 1'b0 ? sel_1_1082 :
              sel_3322);

  assign sel_3323 = 32'sd0;

  assign sel_1_1084 = (tmp_18 == 1'b0 ? sel_1_1083 :
              sel_3323);

  assign sel_1_1085 = (s_10 == 1'b0 ? sel_3315 :
              sel_1_1084);

  assign sel_1_1086 = (s_11 == 1'b0 ? sel_3314 :
              sel_1_1085);

  always @(posedge clk)
    begin : rd_425_process
      if (rst == 1'b1) begin
        sel_1_1087 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_1087 <= sel_1_1086;
        end
      end
    end

  assign sel_3324 = 32'sd0;

  assign sel_3325 = 32'sd0;

  assign sel_1_1088 = (s_441 == 1'b0 ? sel_1_1087 :
              sel_3325);

  assign sel_3326 = 32'sd0;

  always @(posedge clk)
    begin : rd_437_process
      if (rst == 1'b1) begin
        tmp_511 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_511 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_438_process
      if (rst == 1'b1) begin
        for(rd_438_t_1 = 32'sd0; rd_438_t_1 <= 32'sd11; rd_438_t_1 = rd_438_t_1 + 32'sd1) begin
          rd_438_reg[rd_438_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_438_t_0_1 = 32'sd0; rd_438_t_0_1 <= 32'sd11; rd_438_t_0_1 = rd_438_t_0_1 + 32'sd1) begin
            rd_438_reg[rd_438_t_0_1] <= rd_438_reg_next[rd_438_t_0_1];
          end
        end
      end
    end
  genvar t_0_081;
  generate
    for(t_0_081 = 32'sd0; t_0_081 <= 32'sd11; t_0_081 = t_0_081 + 32'sd1) begin:rd_438_reg_next_gen
      assign functionOutput_35[t_0_081] = rd_438_reg[t_0_081];
      assign rd_438_reg_next[t_0_081] = functionOutput_19[t_0_081];
    end
  endgenerate

  assign sel_3327 = 32'sd0;

  always @(is_SPI_MNGR_73, sel_1_1088, sel_3301, sel_3302, sel_3303, sel_3304, sel_3305,
       sel_3306, sel_3307, sel_3308, sel_3309, sel_3310, sel_3311, sel_3312,
       sel_3313, sel_3324, sel_3326, sel_3327) begin
    case ( is_SPI_MNGR_73)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1701_sel_1 = sel_3326;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1701_sel_1 = sel_1_1088;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1701_sel_1 = sel_3324;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1701_sel_1 = sel_3313;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1701_sel_1 = sel_3312;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1701_sel_1 = sel_3311;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1701_sel_1 = sel_3310;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1701_sel_1 = sel_3309;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1701_sel_1 = sel_3308;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1701_sel_1 = sel_3307;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1701_sel_1 = sel_3306;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1701_sel_1 = sel_3305;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1701_sel_1 = sel_3304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1701_sel_1 = sel_3303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1701_sel_1 = sel_3302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1701_sel_1 = sel_3301;
        end
      default :
        begin
          p1701_sel_1 = sel_3327;
        end
    endcase
    sel_1_1089 = p1701_sel_1;
  end

  assign tmp_512 = functionOutput_35[sel_1_1089];

  assign sel_3328 = 32'sd0;

  assign sel_3329 = 32'sd0;

  assign sel_3330 = 32'sd0;

  assign sel_3331 = 32'sd0;

  assign sel_3332 = 32'sd0;

  assign sel_3333 = 32'sd0;

  assign sel_3334 = 32'sd0;

  assign sel_3335 = 32'sd0;

  assign sel_3336 = 32'sd0;

  assign sel_3337 = 32'sd0;

  assign sel_3338 = 32'sd0;

  assign sel_3339 = 32'sd0;

  assign sel_3340 = 32'sd0;

  assign sel_3341 = 32'sd0;

  assign sel_3342 = 32'sd0;

  assign sel_3343 = 32'sd0;

  assign sel_3344 = 32'sd0;

  assign s_443 = 32'sd8;

  assign sel_1_1090 = (tmp_6 == 1'b0 ? sel_3344 :
              s_443);

  assign sel_3345 = 32'sd0;

  assign sel_1_1091 = (tmp_8 == 1'b0 ? sel_1_1090 :
              sel_3345);

  assign sel_3346 = 32'sd0;

  assign sel_1_1092 = (tmp_10 == 1'b0 ? sel_1_1091 :
              sel_3346);

  assign sel_3347 = 32'sd0;

  assign sel_1_1093 = (tmp_12 == 1'b0 ? sel_1_1092 :
              sel_3347);

  assign sel_3348 = 32'sd0;

  assign sel_1_1094 = (tmp_14 == 1'b0 ? sel_1_1093 :
              sel_3348);

  assign sel_3349 = 32'sd0;

  assign sel_1_1095 = (tmp_16 == 1'b0 ? sel_1_1094 :
              sel_3349);

  assign sel_3350 = 32'sd0;

  assign sel_1_1096 = (tmp_18 == 1'b0 ? sel_1_1095 :
              sel_3350);

  assign sel_1_1097 = (s_10 == 1'b0 ? sel_3343 :
              sel_1_1096);

  assign sel_1_1098 = (s_11 == 1'b0 ? sel_3342 :
              sel_1_1097);

  assign sel_3351 = 32'sd0;

  assign sel_1_1099 = (s_12 == 1'b0 ? sel_1_1098 :
              sel_3351);

  assign sel_3352 = 32'sd0;

  assign sel_3353 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1099, sel_3328, sel_3329, sel_3330, sel_3331, sel_3332,
       sel_3333, sel_3334, sel_3335, sel_3336, sel_3337, sel_3338, sel_3339,
       sel_3340, sel_3341, sel_3352, sel_3353) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3221_sel_1 = sel_3352;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3221_sel_1 = sel_1_1099;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3221_sel_1 = sel_3341;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3221_sel_1 = sel_3340;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3221_sel_1 = sel_3339;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3221_sel_1 = sel_3338;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3221_sel_1 = sel_3337;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3221_sel_1 = sel_3336;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3221_sel_1 = sel_3335;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3221_sel_1 = sel_3334;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3221_sel_1 = sel_3333;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3221_sel_1 = sel_3332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3221_sel_1 = sel_3331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3221_sel_1 = sel_3330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3221_sel_1 = sel_3329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3221_sel_1 = sel_3328;
        end
      default :
        begin
          p3221_sel_1 = sel_3353;
        end
    endcase
    sel_1_1100 = p3221_sel_1;
  end

  assign tmp_513 = functionOutput_21[sel_1_1100];

  always @(posedge clk)
    begin : rd_436_process
      if (rst == 1'b1) begin
        tmp_514 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_514 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_422_process
      if (rst == 1'b1) begin
        tmp_515 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_515 <= tmp_513;
        end
      end
    end

  assign sel_1_1101 = (tmp_511 == 1'b0 ? tmp_512 :
              tmp_515);

  assign sel_3354 = 32'sd0;

  assign sel_3355 = 32'sd0;

  assign sel_3356 = 32'sd0;

  assign sel_3357 = 32'sd0;

  assign sel_3358 = 32'sd0;

  assign sel_3359 = 32'sd0;

  assign sel_3360 = 32'sd0;

  assign sel_3361 = 32'sd0;

  assign sel_3362 = 32'sd0;

  assign sel_3363 = 32'sd0;

  assign sel_3364 = 32'sd0;

  assign sel_3365 = 32'sd0;

  assign sel_3366 = 32'sd0;

  assign sel_3367 = 32'sd0;

  assign sel_3368 = 32'sd0;

  assign sel_3369 = 32'sd0;

  assign sel_3370 = 32'sd0;

  assign s_444 = 32'sd8;

  assign sel_1_1102 = (tmp_8 == 1'b0 ? sel_3370 :
              s_444);

  assign sel_3371 = 32'sd0;

  assign sel_1_1103 = (tmp_10 == 1'b0 ? sel_1_1102 :
              sel_3371);

  assign sel_3372 = 32'sd0;

  assign sel_1_1104 = (tmp_12 == 1'b0 ? sel_1_1103 :
              sel_3372);

  assign sel_3373 = 32'sd0;

  assign sel_1_1105 = (tmp_14 == 1'b0 ? sel_1_1104 :
              sel_3373);

  assign sel_3374 = 32'sd0;

  assign sel_1_1106 = (tmp_16 == 1'b0 ? sel_1_1105 :
              sel_3374);

  assign sel_3375 = 32'sd0;

  assign sel_1_1107 = (tmp_18 == 1'b0 ? sel_1_1106 :
              sel_3375);

  assign sel_1_1108 = (s_10 == 1'b0 ? sel_3369 :
              sel_1_1107);

  assign sel_1_1109 = (s_11 == 1'b0 ? sel_3368 :
              sel_1_1108);

  assign sel_3376 = 32'sd0;

  assign sel_1_1110 = (s_12 == 1'b0 ? sel_1_1109 :
              sel_3376);

  assign sel_3377 = 32'sd0;

  assign sel_3378 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1110, sel_3354, sel_3355, sel_3356, sel_3357, sel_3358,
       sel_3359, sel_3360, sel_3361, sel_3362, sel_3363, sel_3364, sel_3365,
       sel_3366, sel_3367, sel_3377, sel_3378) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2309_sel_1 = sel_3377;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2309_sel_1 = sel_1_1110;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2309_sel_1 = sel_3367;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2309_sel_1 = sel_3366;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2309_sel_1 = sel_3365;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2309_sel_1 = sel_3364;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2309_sel_1 = sel_3363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2309_sel_1 = sel_3362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2309_sel_1 = sel_3361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2309_sel_1 = sel_3360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2309_sel_1 = sel_3359;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2309_sel_1 = sel_3358;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2309_sel_1 = sel_3357;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2309_sel_1 = sel_3356;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2309_sel_1 = sel_3355;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2309_sel_1 = sel_3354;
        end
      default :
        begin
          p2309_sel_1 = sel_3378;
        end
    endcase
    sel_1_1111 = p2309_sel_1;
  end

  assign tmp_516 = functionOutput_22[sel_1_1111];

  always @(posedge clk)
    begin : rd_435_process
      if (rst == 1'b1) begin
        tmp_517 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_517 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_421_process
      if (rst == 1'b1) begin
        tmp_518 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_518 <= tmp_516;
        end
      end
    end

  assign sel_1_1112 = (tmp_514 == 1'b0 ? sel_1_1101 :
              tmp_518);

  assign sel_3379 = 32'sd0;

  assign sel_3380 = 32'sd0;

  assign sel_3381 = 32'sd0;

  assign sel_3382 = 32'sd0;

  assign sel_3383 = 32'sd0;

  assign sel_3384 = 32'sd0;

  assign sel_3385 = 32'sd0;

  assign sel_3386 = 32'sd0;

  assign sel_3387 = 32'sd0;

  assign sel_3388 = 32'sd0;

  assign sel_3389 = 32'sd0;

  assign sel_3390 = 32'sd0;

  assign sel_3391 = 32'sd0;

  assign sel_3392 = 32'sd0;

  assign sel_3393 = 32'sd0;

  assign sel_3394 = 32'sd0;

  assign sel_3395 = 32'sd0;

  assign s_445 = 32'sd8;

  assign sel_1_1113 = (tmp_10 == 1'b0 ? sel_3395 :
              s_445);

  assign sel_3396 = 32'sd0;

  assign sel_1_1114 = (tmp_12 == 1'b0 ? sel_1_1113 :
              sel_3396);

  assign sel_3397 = 32'sd0;

  assign sel_1_1115 = (tmp_14 == 1'b0 ? sel_1_1114 :
              sel_3397);

  assign sel_3398 = 32'sd0;

  assign sel_1_1116 = (tmp_16 == 1'b0 ? sel_1_1115 :
              sel_3398);

  assign sel_3399 = 32'sd0;

  assign sel_1_1117 = (tmp_18 == 1'b0 ? sel_1_1116 :
              sel_3399);

  assign sel_1_1118 = (s_10 == 1'b0 ? sel_3394 :
              sel_1_1117);

  assign sel_1_1119 = (s_11 == 1'b0 ? sel_3393 :
              sel_1_1118);

  assign sel_3400 = 32'sd0;

  assign sel_1_1120 = (s_12 == 1'b0 ? sel_1_1119 :
              sel_3400);

  assign sel_3401 = 32'sd0;

  assign sel_3402 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1120, sel_3379, sel_3380, sel_3381, sel_3382, sel_3383,
       sel_3384, sel_3385, sel_3386, sel_3387, sel_3388, sel_3389, sel_3390,
       sel_3391, sel_3392, sel_3401, sel_3402) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2632_sel_1 = sel_3401;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2632_sel_1 = sel_1_1120;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2632_sel_1 = sel_3392;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2632_sel_1 = sel_3391;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2632_sel_1 = sel_3390;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2632_sel_1 = sel_3389;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2632_sel_1 = sel_3388;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2632_sel_1 = sel_3387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2632_sel_1 = sel_3386;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2632_sel_1 = sel_3385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2632_sel_1 = sel_3384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2632_sel_1 = sel_3383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2632_sel_1 = sel_3382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2632_sel_1 = sel_3381;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2632_sel_1 = sel_3380;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2632_sel_1 = sel_3379;
        end
      default :
        begin
          p2632_sel_1 = sel_3402;
        end
    endcase
    sel_1_1121 = p2632_sel_1;
  end

  assign tmp_519 = functionOutput_23[sel_1_1121];

  always @(posedge clk)
    begin : rd_434_process
      if (rst == 1'b1) begin
        tmp_520 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_520 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_420_process
      if (rst == 1'b1) begin
        tmp_521 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_521 <= tmp_519;
        end
      end
    end

  assign sel_1_1122 = (tmp_517 == 1'b0 ? sel_1_1112 :
              tmp_521);

  assign sel_3403 = 32'sd0;

  assign sel_3404 = 32'sd0;

  assign sel_3405 = 32'sd0;

  assign sel_3406 = 32'sd0;

  assign sel_3407 = 32'sd0;

  assign sel_3408 = 32'sd0;

  assign sel_3409 = 32'sd0;

  assign sel_3410 = 32'sd0;

  assign sel_3411 = 32'sd0;

  assign sel_3412 = 32'sd0;

  assign sel_3413 = 32'sd0;

  assign sel_3414 = 32'sd0;

  assign sel_3415 = 32'sd0;

  assign sel_3416 = 32'sd0;

  assign sel_3417 = 32'sd0;

  assign sel_3418 = 32'sd0;

  assign sel_3419 = 32'sd0;

  assign s_446 = 32'sd8;

  assign sel_1_1123 = (tmp_12 == 1'b0 ? sel_3419 :
              s_446);

  assign sel_3420 = 32'sd0;

  assign sel_1_1124 = (tmp_14 == 1'b0 ? sel_1_1123 :
              sel_3420);

  assign sel_3421 = 32'sd0;

  assign sel_1_1125 = (tmp_16 == 1'b0 ? sel_1_1124 :
              sel_3421);

  assign sel_3422 = 32'sd0;

  assign sel_1_1126 = (tmp_18 == 1'b0 ? sel_1_1125 :
              sel_3422);

  assign sel_1_1127 = (s_10 == 1'b0 ? sel_3418 :
              sel_1_1126);

  assign sel_1_1128 = (s_11 == 1'b0 ? sel_3417 :
              sel_1_1127);

  assign sel_3423 = 32'sd0;

  assign sel_1_1129 = (s_12 == 1'b0 ? sel_1_1128 :
              sel_3423);

  assign sel_3424 = 32'sd0;

  assign sel_3425 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1129, sel_3403, sel_3404, sel_3405, sel_3406, sel_3407,
       sel_3408, sel_3409, sel_3410, sel_3411, sel_3412, sel_3413, sel_3414,
       sel_3415, sel_3416, sel_3424, sel_3425) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2879_sel_1 = sel_3424;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2879_sel_1 = sel_1_1129;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2879_sel_1 = sel_3416;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2879_sel_1 = sel_3415;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2879_sel_1 = sel_3414;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2879_sel_1 = sel_3413;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2879_sel_1 = sel_3412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2879_sel_1 = sel_3411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2879_sel_1 = sel_3410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2879_sel_1 = sel_3409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2879_sel_1 = sel_3408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2879_sel_1 = sel_3407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2879_sel_1 = sel_3406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2879_sel_1 = sel_3405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2879_sel_1 = sel_3404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2879_sel_1 = sel_3403;
        end
      default :
        begin
          p2879_sel_1 = sel_3425;
        end
    endcase
    sel_1_1130 = p2879_sel_1;
  end

  assign tmp_522 = functionOutput_24[sel_1_1130];

  always @(posedge clk)
    begin : rd_433_process
      if (rst == 1'b1) begin
        tmp_523 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_523 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_419_process
      if (rst == 1'b1) begin
        tmp_524 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_524 <= tmp_522;
        end
      end
    end

  assign sel_1_1131 = (tmp_520 == 1'b0 ? sel_1_1122 :
              tmp_524);

  assign sel_3426 = 32'sd0;

  assign sel_3427 = 32'sd0;

  assign sel_3428 = 32'sd0;

  assign sel_3429 = 32'sd0;

  assign sel_3430 = 32'sd0;

  assign sel_3431 = 32'sd0;

  assign sel_3432 = 32'sd0;

  assign sel_3433 = 32'sd0;

  assign sel_3434 = 32'sd0;

  assign sel_3435 = 32'sd0;

  assign sel_3436 = 32'sd0;

  assign sel_3437 = 32'sd0;

  assign sel_3438 = 32'sd0;

  assign sel_3439 = 32'sd0;

  assign sel_3440 = 32'sd0;

  assign sel_3441 = 32'sd0;

  assign sel_3442 = 32'sd0;

  assign s_447 = 32'sd8;

  assign sel_1_1132 = (tmp_14 == 1'b0 ? sel_3442 :
              s_447);

  assign sel_3443 = 32'sd0;

  assign sel_1_1133 = (tmp_16 == 1'b0 ? sel_1_1132 :
              sel_3443);

  assign sel_3444 = 32'sd0;

  assign sel_1_1134 = (tmp_18 == 1'b0 ? sel_1_1133 :
              sel_3444);

  assign sel_1_1135 = (s_10 == 1'b0 ? sel_3441 :
              sel_1_1134);

  assign sel_1_1136 = (s_11 == 1'b0 ? sel_3440 :
              sel_1_1135);

  assign sel_3445 = 32'sd0;

  assign sel_1_1137 = (s_12 == 1'b0 ? sel_1_1136 :
              sel_3445);

  assign sel_3446 = 32'sd0;

  assign sel_3447 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1137, sel_3426, sel_3427, sel_3428, sel_3429, sel_3430,
       sel_3431, sel_3432, sel_3433, sel_3434, sel_3435, sel_3436, sel_3437,
       sel_3438, sel_3439, sel_3446, sel_3447) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1777_sel_1 = sel_3446;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1777_sel_1 = sel_1_1137;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1777_sel_1 = sel_3439;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1777_sel_1 = sel_3438;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1777_sel_1 = sel_3437;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1777_sel_1 = sel_3436;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1777_sel_1 = sel_3435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1777_sel_1 = sel_3434;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1777_sel_1 = sel_3433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1777_sel_1 = sel_3432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1777_sel_1 = sel_3431;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1777_sel_1 = sel_3430;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1777_sel_1 = sel_3429;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1777_sel_1 = sel_3428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1777_sel_1 = sel_3427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1777_sel_1 = sel_3426;
        end
      default :
        begin
          p1777_sel_1 = sel_3447;
        end
    endcase
    sel_1_1138 = p1777_sel_1;
  end

  assign tmp_525 = functionOutput_25[sel_1_1138];

  always @(posedge clk)
    begin : rd_432_process
      if (rst == 1'b1) begin
        tmp_526 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_526 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_418_process
      if (rst == 1'b1) begin
        tmp_527 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_527 <= tmp_525;
        end
      end
    end

  assign sel_1_1139 = (tmp_523 == 1'b0 ? sel_1_1131 :
              tmp_527);

  assign sel_3448 = 32'sd0;

  assign sel_3449 = 32'sd0;

  assign sel_3450 = 32'sd0;

  assign sel_3451 = 32'sd0;

  assign sel_3452 = 32'sd0;

  assign sel_3453 = 32'sd0;

  assign sel_3454 = 32'sd0;

  assign sel_3455 = 32'sd0;

  assign sel_3456 = 32'sd0;

  assign sel_3457 = 32'sd0;

  assign sel_3458 = 32'sd0;

  assign sel_3459 = 32'sd0;

  assign sel_3460 = 32'sd0;

  assign sel_3461 = 32'sd0;

  assign sel_3462 = 32'sd0;

  assign sel_3463 = 32'sd0;

  assign sel_3464 = 32'sd0;

  assign s_448 = 32'sd8;

  assign sel_1_1140 = (tmp_16 == 1'b0 ? sel_3464 :
              s_448);

  assign sel_3465 = 32'sd0;

  assign sel_1_1141 = (tmp_18 == 1'b0 ? sel_1_1140 :
              sel_3465);

  assign sel_1_1142 = (s_10 == 1'b0 ? sel_3463 :
              sel_1_1141);

  assign sel_1_1143 = (s_11 == 1'b0 ? sel_3462 :
              sel_1_1142);

  assign sel_3466 = 32'sd0;

  assign sel_1_1144 = (s_12 == 1'b0 ? sel_1_1143 :
              sel_3466);

  assign sel_3467 = 32'sd0;

  assign sel_3468 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1144, sel_3448, sel_3449, sel_3450, sel_3451, sel_3452,
       sel_3453, sel_3454, sel_3455, sel_3456, sel_3457, sel_3458, sel_3459,
       sel_3460, sel_3461, sel_3467, sel_3468) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2518_sel_1 = sel_3467;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2518_sel_1 = sel_1_1144;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2518_sel_1 = sel_3461;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2518_sel_1 = sel_3460;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2518_sel_1 = sel_3459;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2518_sel_1 = sel_3458;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2518_sel_1 = sel_3457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2518_sel_1 = sel_3456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2518_sel_1 = sel_3455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2518_sel_1 = sel_3454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2518_sel_1 = sel_3453;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2518_sel_1 = sel_3452;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2518_sel_1 = sel_3451;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2518_sel_1 = sel_3450;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2518_sel_1 = sel_3449;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2518_sel_1 = sel_3448;
        end
      default :
        begin
          p2518_sel_1 = sel_3468;
        end
    endcase
    sel_1_1145 = p2518_sel_1;
  end

  assign tmp_528 = functionOutput_26[sel_1_1145];

  always @(posedge clk)
    begin : rd_431_process
      if (rst == 1'b1) begin
        tmp_529 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_529 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_417_process
      if (rst == 1'b1) begin
        tmp_530 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_530 <= tmp_528;
        end
      end
    end

  assign sel_1_1146 = (tmp_526 == 1'b0 ? sel_1_1139 :
              tmp_530);

  assign sel_3469 = 32'sd0;

  assign sel_3470 = 32'sd0;

  assign sel_3471 = 32'sd0;

  assign sel_3472 = 32'sd0;

  assign sel_3473 = 32'sd0;

  assign sel_3474 = 32'sd0;

  assign sel_3475 = 32'sd0;

  assign sel_3476 = 32'sd0;

  assign sel_3477 = 32'sd0;

  assign sel_3478 = 32'sd0;

  assign sel_3479 = 32'sd0;

  assign sel_3480 = 32'sd0;

  assign sel_3481 = 32'sd0;

  assign sel_3482 = 32'sd0;

  assign sel_3483 = 32'sd0;

  assign sel_3484 = 32'sd0;

  assign sel_3485 = 32'sd0;

  assign s_449 = 32'sd8;

  assign sel_1_1147 = (tmp_18 == 1'b0 ? sel_3485 :
              s_449);

  assign sel_1_1148 = (s_10 == 1'b0 ? sel_3484 :
              sel_1_1147);

  assign sel_1_1149 = (s_11 == 1'b0 ? sel_3483 :
              sel_1_1148);

  assign sel_3486 = 32'sd0;

  assign sel_1_1150 = (s_12 == 1'b0 ? sel_1_1149 :
              sel_3486);

  assign sel_3487 = 32'sd0;

  assign sel_3488 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1150, sel_3469, sel_3470, sel_3471, sel_3472, sel_3473,
       sel_3474, sel_3475, sel_3476, sel_3477, sel_3478, sel_3479, sel_3480,
       sel_3481, sel_3482, sel_3487, sel_3488) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2043_sel_1 = sel_3487;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2043_sel_1 = sel_1_1150;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2043_sel_1 = sel_3482;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2043_sel_1 = sel_3481;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2043_sel_1 = sel_3480;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2043_sel_1 = sel_3479;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2043_sel_1 = sel_3478;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2043_sel_1 = sel_3477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2043_sel_1 = sel_3476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2043_sel_1 = sel_3475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2043_sel_1 = sel_3474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2043_sel_1 = sel_3473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2043_sel_1 = sel_3472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2043_sel_1 = sel_3471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2043_sel_1 = sel_3470;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2043_sel_1 = sel_3469;
        end
      default :
        begin
          p2043_sel_1 = sel_3488;
        end
    endcase
    sel_1_1151 = p2043_sel_1;
  end

  assign tmp_531 = functionOutput_27[sel_1_1151];

  assign sel_3489 = 8'd0;

  always @(posedge clk)
    begin : rd_412_process
      if (rst == 1'b1) begin
        tmp_532 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_532 <= tmp_510;
        end
      end
    end

  assign sel_1_1152 = (s_439 == 1'b0 ? sel_1_1074 :
              tmp_532);

  always @(posedge clk)
    begin : rd_416_process
      if (rst == 1'b1) begin
        tmp_533 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_533 <= tmp_531;
        end
      end
    end

  assign sel_1_1153 = (tmp_529 == 1'b0 ? sel_1_1146 :
              tmp_533);

  assign sel_3490 = 8'd0;

  always @(posedge clk)
    begin : rd_439_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_74 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_74 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3491 = 1'b0;

  assign sel_3492 = 1'b0;

  assign sel_3493 = 1'b0;

  assign sel_3494 = 1'b0;

  assign sel_3495 = 1'b0;

  assign sel_3496 = 1'b0;

  assign sel_3497 = 1'b0;

  assign sel_3498 = 1'b0;

  assign sel_3499 = 1'b0;

  assign sel_3500 = 1'b0;

  assign sel_3501 = 1'b0;

  assign sel_3502 = 1'b0;

  assign sel_3503 = 1'b0;

  assign sel_3504 = 1'b0;

  assign s_450 = 1'b1;

  assign sel_2_173 = (s_14 == 1'b0 ? sel_3504 :
              s_450);

  assign s_451 = 1'b1;

  assign sel_2_174 = (s_15 == 1'b0 ? sel_2_173 :
              s_451);

  assign s_452 = 1'b1;

  assign sel_2_175 = (s_16 == 1'b0 ? sel_2_174 :
              s_452);

  assign s_453 = 1'b1;

  assign sel_2_176 = (s_17 == 1'b0 ? sel_2_175 :
              s_453);

  assign s_454 = 1'b1;

  assign sel_2_177 = (s_18 == 1'b0 ? sel_2_176 :
              s_454);

  assign s_455 = 1'b1;

  assign sel_2_178 = (s_19 == 1'b0 ? sel_2_177 :
              s_455);

  assign s_456 = 1'b1;

  assign sel_2_179 = (s_20 == 1'b0 ? sel_2_178 :
              s_456);

  assign s_457 = 1'b1;

  assign sel_2_180 = (s_21 == 1'b0 ? sel_2_179 :
              s_457);

  always @(posedge clk)
    begin : rd_441_process
      if (rst == 1'b1) begin
        s_458 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_458 <= s_12;
        end
      end
    end

  assign sel_3505 = 1'b0;

  assign sel_3506 = 1'b0;

  assign sel_3507 = 1'b0;

  assign s_459 = 1'b1;

  assign sel_2_181 = (tmp_4 == 1'b0 ? sel_3507 :
              s_459);

  assign s_460 = 1'b1;

  assign sel_2_182 = (tmp_6 == 1'b0 ? sel_2_181 :
              s_460);

  assign s_461 = 1'b1;

  assign sel_2_183 = (tmp_8 == 1'b0 ? sel_2_182 :
              s_461);

  assign s_462 = 1'b1;

  assign sel_2_184 = (tmp_10 == 1'b0 ? sel_2_183 :
              s_462);

  assign s_463 = 1'b1;

  assign sel_2_185 = (tmp_12 == 1'b0 ? sel_2_184 :
              s_463);

  assign s_464 = 1'b1;

  assign sel_2_186 = (tmp_14 == 1'b0 ? sel_2_185 :
              s_464);

  assign s_465 = 1'b1;

  assign sel_2_187 = (tmp_16 == 1'b0 ? sel_2_186 :
              s_465);

  assign s_466 = 1'b1;

  assign sel_2_188 = (tmp_18 == 1'b0 ? sel_2_187 :
              s_466);

  assign sel_2_189 = (s_10 == 1'b0 ? sel_3506 :
              sel_2_188);

  assign sel_2_190 = (s_11 == 1'b0 ? sel_3505 :
              sel_2_189);

  always @(posedge clk)
    begin : rd_442_process
      if (rst == 1'b1) begin
        sel_2_191 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_191 <= sel_2_190;
        end
      end
    end

  always @(posedge clk)
    begin : rd_440_process
      if (rst == 1'b1) begin
        sel_2_192 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_192 <= sel_2_180;
        end
      end
    end

  assign sel_3508 = 1'b0;

  assign sel_2_193 = (s_458 == 1'b0 ? sel_2_191 :
              sel_3508);

  assign sel_3509 = 1'b0;

  always @(posedge clk)
    begin : rd_443_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_75 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_75 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3510 = 8'd0;

  assign sel_3511 = 8'd0;

  assign sel_3512 = 8'd0;

  assign sel_3513 = 8'd0;

  assign sel_3514 = 8'd0;

  assign sel_3515 = 8'd0;

  assign sel_3516 = 8'd0;

  assign sel_3517 = 8'd0;

  assign sel_3518 = 8'd0;

  assign sel_3519 = 8'd0;

  assign sel_3520 = 8'd0;

  assign sel_3521 = 8'd0;

  always @(posedge clk)
    begin : rd_461_process
      if (rst == 1'b1) begin
        s_467 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_467 <= s_18;
        end
      end
    end

  assign sel_3522 = 32'sd0;

  assign sel_3523 = 32'sd0;

  assign sel_3524 = 32'sd0;

  assign sel_3525 = 32'sd0;

  assign sel_3526 = 32'sd0;

  assign sel_3527 = 32'sd0;

  assign sel_3528 = 32'sd0;

  assign sel_3529 = 32'sd0;

  assign sel_3530 = 32'sd0;

  assign sel_3531 = 32'sd0;

  assign sel_3532 = 32'sd0;

  assign sel_3533 = 32'sd0;

  assign sel_3534 = 32'sd0;

  assign sel_3535 = 32'sd0;

  assign s_468 = 32'sd9;

  assign sel_1_1154 = (s_14 == 1'b0 ? sel_3535 :
              s_468);

  assign sel_3536 = 32'sd0;

  assign sel_1_1155 = (s_15 == 1'b0 ? sel_1_1154 :
              sel_3536);

  assign sel_3537 = 32'sd0;

  assign sel_1_1156 = (s_16 == 1'b0 ? sel_1_1155 :
              sel_3537);

  assign sel_3538 = 32'sd0;

  assign sel_1_1157 = (s_17 == 1'b0 ? sel_1_1156 :
              sel_3538);

  assign sel_3539 = 32'sd0;

  assign sel_1_1158 = (s_18 == 1'b0 ? sel_1_1157 :
              sel_3539);

  assign sel_3540 = 32'sd0;

  assign sel_1_1159 = (s_19 == 1'b0 ? sel_1_1158 :
              sel_3540);

  assign sel_3541 = 32'sd0;

  assign sel_1_1160 = (s_20 == 1'b0 ? sel_1_1159 :
              sel_3541);

  assign sel_3542 = 32'sd0;

  assign sel_1_1161 = (s_21 == 1'b0 ? sel_1_1160 :
              sel_3542);

  assign sel_3543 = 32'sd0;

  assign sel_3544 = 32'sd0;

  assign sel_3545 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1161, sel_3522, sel_3523, sel_3524, sel_3525, sel_3526,
       sel_3527, sel_3528, sel_3529, sel_3530, sel_3531, sel_3532, sel_3533,
       sel_3534, sel_3543, sel_3544, sel_3545) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4152_sel_1 = sel_3544;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4152_sel_1 = sel_3543;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4152_sel_1 = sel_1_1161;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4152_sel_1 = sel_3534;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4152_sel_1 = sel_3533;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4152_sel_1 = sel_3532;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4152_sel_1 = sel_3531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4152_sel_1 = sel_3530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4152_sel_1 = sel_3529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4152_sel_1 = sel_3528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4152_sel_1 = sel_3527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4152_sel_1 = sel_3526;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4152_sel_1 = sel_3525;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4152_sel_1 = sel_3524;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4152_sel_1 = sel_3523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4152_sel_1 = sel_3522;
        end
      default :
        begin
          p4152_sel_1 = sel_3545;
        end
    endcase
    sel_1_1162 = p4152_sel_1;
  end

  assign tmp_534 = functionOutput[sel_1_1162];

  assign sel_3546 = 32'sd0;

  assign sel_3547 = 32'sd0;

  assign sel_3548 = 32'sd0;

  assign sel_3549 = 32'sd0;

  assign sel_3550 = 32'sd0;

  assign sel_3551 = 32'sd0;

  assign sel_3552 = 32'sd0;

  assign sel_3553 = 32'sd0;

  assign sel_3554 = 32'sd0;

  assign sel_3555 = 32'sd0;

  assign sel_3556 = 32'sd0;

  assign sel_3557 = 32'sd0;

  assign sel_3558 = 32'sd0;

  assign sel_3559 = 32'sd0;

  assign s_469 = 32'sd9;

  assign sel_1_1163 = (s_15 == 1'b0 ? sel_3559 :
              s_469);

  assign sel_3560 = 32'sd0;

  assign sel_1_1164 = (s_16 == 1'b0 ? sel_1_1163 :
              sel_3560);

  assign sel_3561 = 32'sd0;

  assign sel_1_1165 = (s_17 == 1'b0 ? sel_1_1164 :
              sel_3561);

  assign sel_3562 = 32'sd0;

  assign sel_1_1166 = (s_18 == 1'b0 ? sel_1_1165 :
              sel_3562);

  assign sel_3563 = 32'sd0;

  assign sel_1_1167 = (s_19 == 1'b0 ? sel_1_1166 :
              sel_3563);

  assign sel_3564 = 32'sd0;

  assign sel_1_1168 = (s_20 == 1'b0 ? sel_1_1167 :
              sel_3564);

  assign sel_3565 = 32'sd0;

  assign sel_1_1169 = (s_21 == 1'b0 ? sel_1_1168 :
              sel_3565);

  assign sel_3566 = 32'sd0;

  assign sel_3567 = 32'sd0;

  assign sel_3568 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1169, sel_3546, sel_3547, sel_3548, sel_3549, sel_3550,
       sel_3551, sel_3552, sel_3553, sel_3554, sel_3555, sel_3556, sel_3557,
       sel_3558, sel_3566, sel_3567, sel_3568) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4171_sel_1 = sel_3567;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4171_sel_1 = sel_3566;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4171_sel_1 = sel_1_1169;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4171_sel_1 = sel_3558;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4171_sel_1 = sel_3557;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4171_sel_1 = sel_3556;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4171_sel_1 = sel_3555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4171_sel_1 = sel_3554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4171_sel_1 = sel_3553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4171_sel_1 = sel_3552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4171_sel_1 = sel_3551;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4171_sel_1 = sel_3550;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4171_sel_1 = sel_3549;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4171_sel_1 = sel_3548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4171_sel_1 = sel_3547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4171_sel_1 = sel_3546;
        end
      default :
        begin
          p4171_sel_1 = sel_3568;
        end
    endcase
    sel_1_1170 = p4171_sel_1;
  end

  assign tmp_535 = functionOutput_12[sel_1_1170];

  assign sel_1_1171 = (s_15 == 1'b0 ? tmp_534 :
              tmp_535);

  assign sel_3569 = 32'sd0;

  assign sel_3570 = 32'sd0;

  assign sel_3571 = 32'sd0;

  assign sel_3572 = 32'sd0;

  assign sel_3573 = 32'sd0;

  assign sel_3574 = 32'sd0;

  assign sel_3575 = 32'sd0;

  assign sel_3576 = 32'sd0;

  assign sel_3577 = 32'sd0;

  assign sel_3578 = 32'sd0;

  assign sel_3579 = 32'sd0;

  assign sel_3580 = 32'sd0;

  assign sel_3581 = 32'sd0;

  assign sel_3582 = 32'sd0;

  assign s_470 = 32'sd9;

  assign sel_1_1172 = (s_16 == 1'b0 ? sel_3582 :
              s_470);

  assign sel_3583 = 32'sd0;

  assign sel_1_1173 = (s_17 == 1'b0 ? sel_1_1172 :
              sel_3583);

  assign sel_3584 = 32'sd0;

  assign sel_1_1174 = (s_18 == 1'b0 ? sel_1_1173 :
              sel_3584);

  assign sel_3585 = 32'sd0;

  assign sel_1_1175 = (s_19 == 1'b0 ? sel_1_1174 :
              sel_3585);

  assign sel_3586 = 32'sd0;

  assign sel_1_1176 = (s_20 == 1'b0 ? sel_1_1175 :
              sel_3586);

  assign sel_3587 = 32'sd0;

  assign sel_1_1177 = (s_21 == 1'b0 ? sel_1_1176 :
              sel_3587);

  assign sel_3588 = 32'sd0;

  assign sel_3589 = 32'sd0;

  assign sel_3590 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1177, sel_3569, sel_3570, sel_3571, sel_3572, sel_3573,
       sel_3574, sel_3575, sel_3576, sel_3577, sel_3578, sel_3579, sel_3580,
       sel_3581, sel_3588, sel_3589, sel_3590) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4399_sel_1 = sel_3589;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4399_sel_1 = sel_3588;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4399_sel_1 = sel_1_1177;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4399_sel_1 = sel_3581;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4399_sel_1 = sel_3580;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4399_sel_1 = sel_3579;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4399_sel_1 = sel_3578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4399_sel_1 = sel_3577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4399_sel_1 = sel_3576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4399_sel_1 = sel_3575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4399_sel_1 = sel_3574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4399_sel_1 = sel_3573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4399_sel_1 = sel_3572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4399_sel_1 = sel_3571;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4399_sel_1 = sel_3570;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4399_sel_1 = sel_3569;
        end
      default :
        begin
          p4399_sel_1 = sel_3590;
        end
    endcase
    sel_1_1178 = p4399_sel_1;
  end

  assign tmp_536 = functionOutput_13[sel_1_1178];

  assign sel_1_1179 = (s_16 == 1'b0 ? sel_1_1171 :
              tmp_536);

  assign sel_3591 = 32'sd0;

  assign sel_3592 = 32'sd0;

  assign sel_3593 = 32'sd0;

  assign sel_3594 = 32'sd0;

  assign sel_3595 = 32'sd0;

  assign sel_3596 = 32'sd0;

  assign sel_3597 = 32'sd0;

  assign sel_3598 = 32'sd0;

  assign sel_3599 = 32'sd0;

  assign sel_3600 = 32'sd0;

  assign sel_3601 = 32'sd0;

  assign sel_3602 = 32'sd0;

  assign sel_3603 = 32'sd0;

  assign sel_3604 = 32'sd0;

  assign s_471 = 32'sd9;

  assign sel_1_1180 = (s_17 == 1'b0 ? sel_3604 :
              s_471);

  assign sel_3605 = 32'sd0;

  assign sel_1_1181 = (s_18 == 1'b0 ? sel_1_1180 :
              sel_3605);

  assign sel_3606 = 32'sd0;

  assign sel_1_1182 = (s_19 == 1'b0 ? sel_1_1181 :
              sel_3606);

  assign sel_3607 = 32'sd0;

  assign sel_1_1183 = (s_20 == 1'b0 ? sel_1_1182 :
              sel_3607);

  assign sel_3608 = 32'sd0;

  assign sel_1_1184 = (s_21 == 1'b0 ? sel_1_1183 :
              sel_3608);

  assign sel_3609 = 32'sd0;

  assign sel_3610 = 32'sd0;

  assign sel_3611 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1184, sel_3591, sel_3592, sel_3593, sel_3594, sel_3595,
       sel_3596, sel_3597, sel_3598, sel_3599, sel_3600, sel_3601, sel_3602,
       sel_3603, sel_3609, sel_3610, sel_3611) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4323_sel_1 = sel_3610;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4323_sel_1 = sel_3609;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4323_sel_1 = sel_1_1184;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4323_sel_1 = sel_3603;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4323_sel_1 = sel_3602;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4323_sel_1 = sel_3601;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4323_sel_1 = sel_3600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4323_sel_1 = sel_3599;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4323_sel_1 = sel_3598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4323_sel_1 = sel_3597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4323_sel_1 = sel_3596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4323_sel_1 = sel_3595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4323_sel_1 = sel_3594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4323_sel_1 = sel_3593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4323_sel_1 = sel_3592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4323_sel_1 = sel_3591;
        end
      default :
        begin
          p4323_sel_1 = sel_3611;
        end
    endcase
    sel_1_1185 = p4323_sel_1;
  end

  assign tmp_537 = functionOutput_14[sel_1_1185];

  assign sel_1_1186 = (s_17 == 1'b0 ? sel_1_1179 :
              tmp_537);

  always @(posedge clk)
    begin : rd_462_process
      if (rst == 1'b1) begin
        sel_1_1187 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_1187 <= sel_1_1186;
        end
      end
    end

  assign sel_3612 = 32'sd0;

  assign sel_3613 = 32'sd0;

  assign sel_3614 = 32'sd0;

  assign sel_3615 = 32'sd0;

  assign sel_3616 = 32'sd0;

  assign sel_3617 = 32'sd0;

  assign sel_3618 = 32'sd0;

  assign sel_3619 = 32'sd0;

  assign sel_3620 = 32'sd0;

  assign sel_3621 = 32'sd0;

  assign sel_3622 = 32'sd0;

  assign sel_3623 = 32'sd0;

  assign sel_3624 = 32'sd0;

  assign sel_3625 = 32'sd0;

  assign s_472 = 32'sd9;

  assign sel_1_1188 = (s_18 == 1'b0 ? sel_3625 :
              s_472);

  assign sel_3626 = 32'sd0;

  assign sel_1_1189 = (s_19 == 1'b0 ? sel_1_1188 :
              sel_3626);

  assign sel_3627 = 32'sd0;

  assign sel_1_1190 = (s_20 == 1'b0 ? sel_1_1189 :
              sel_3627);

  assign sel_3628 = 32'sd0;

  assign sel_1_1191 = (s_21 == 1'b0 ? sel_1_1190 :
              sel_3628);

  assign sel_3629 = 32'sd0;

  assign sel_3630 = 32'sd0;

  assign sel_3631 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1191, sel_3612, sel_3613, sel_3614, sel_3615, sel_3616,
       sel_3617, sel_3618, sel_3619, sel_3620, sel_3621, sel_3622, sel_3623,
       sel_3624, sel_3629, sel_3630, sel_3631) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4874_sel_1 = sel_3630;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4874_sel_1 = sel_3629;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4874_sel_1 = sel_1_1191;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4874_sel_1 = sel_3624;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4874_sel_1 = sel_3623;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4874_sel_1 = sel_3622;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4874_sel_1 = sel_3621;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4874_sel_1 = sel_3620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4874_sel_1 = sel_3619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4874_sel_1 = sel_3618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4874_sel_1 = sel_3617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4874_sel_1 = sel_3616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4874_sel_1 = sel_3615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4874_sel_1 = sel_3614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4874_sel_1 = sel_3613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4874_sel_1 = sel_3612;
        end
      default :
        begin
          p4874_sel_1 = sel_3631;
        end
    endcase
    sel_1_1192 = p4874_sel_1;
  end

  assign tmp_538 = functionOutput_15[sel_1_1192];

  always @(posedge clk)
    begin : rd_460_process
      if (rst == 1'b1) begin
        s_473 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_473 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_447_process
      if (rst == 1'b1) begin
        tmp_539 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_539 <= tmp_538;
        end
      end
    end

  assign sel_1_1193 = (s_467 == 1'b0 ? sel_1_1187 :
              tmp_539);

  assign sel_3632 = 32'sd0;

  assign sel_3633 = 32'sd0;

  assign sel_3634 = 32'sd0;

  assign sel_3635 = 32'sd0;

  assign sel_3636 = 32'sd0;

  assign sel_3637 = 32'sd0;

  assign sel_3638 = 32'sd0;

  assign sel_3639 = 32'sd0;

  assign sel_3640 = 32'sd0;

  assign sel_3641 = 32'sd0;

  assign sel_3642 = 32'sd0;

  assign sel_3643 = 32'sd0;

  assign sel_3644 = 32'sd0;

  assign sel_3645 = 32'sd0;

  assign s_474 = 32'sd9;

  assign sel_1_1194 = (s_19 == 1'b0 ? sel_3645 :
              s_474);

  assign sel_3646 = 32'sd0;

  assign sel_1_1195 = (s_20 == 1'b0 ? sel_1_1194 :
              sel_3646);

  assign sel_3647 = 32'sd0;

  assign sel_1_1196 = (s_21 == 1'b0 ? sel_1_1195 :
              sel_3647);

  assign sel_3648 = 32'sd0;

  assign sel_3649 = 32'sd0;

  assign sel_3650 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1196, sel_3632, sel_3633, sel_3634, sel_3635, sel_3636,
       sel_3637, sel_3638, sel_3639, sel_3640, sel_3641, sel_3642, sel_3643,
       sel_3644, sel_3648, sel_3649, sel_3650) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4532_sel_1 = sel_3649;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4532_sel_1 = sel_3648;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4532_sel_1 = sel_1_1196;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4532_sel_1 = sel_3644;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4532_sel_1 = sel_3643;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4532_sel_1 = sel_3642;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4532_sel_1 = sel_3641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4532_sel_1 = sel_3640;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4532_sel_1 = sel_3639;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4532_sel_1 = sel_3638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4532_sel_1 = sel_3637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4532_sel_1 = sel_3636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4532_sel_1 = sel_3635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4532_sel_1 = sel_3634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4532_sel_1 = sel_3633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4532_sel_1 = sel_3632;
        end
      default :
        begin
          p4532_sel_1 = sel_3650;
        end
    endcase
    sel_1_1197 = p4532_sel_1;
  end

  assign tmp_540 = functionOutput_16[sel_1_1197];

  always @(posedge clk)
    begin : rd_459_process
      if (rst == 1'b1) begin
        s_475 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_475 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_446_process
      if (rst == 1'b1) begin
        tmp_541 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_541 <= tmp_540;
        end
      end
    end

  assign sel_1_1198 = (s_473 == 1'b0 ? sel_1_1193 :
              tmp_541);

  assign sel_3651 = 32'sd0;

  assign sel_3652 = 32'sd0;

  assign sel_3653 = 32'sd0;

  assign sel_3654 = 32'sd0;

  assign sel_3655 = 32'sd0;

  assign sel_3656 = 32'sd0;

  assign sel_3657 = 32'sd0;

  assign sel_3658 = 32'sd0;

  assign sel_3659 = 32'sd0;

  assign sel_3660 = 32'sd0;

  assign sel_3661 = 32'sd0;

  assign sel_3662 = 32'sd0;

  assign sel_3663 = 32'sd0;

  assign sel_3664 = 32'sd0;

  assign s_476 = 32'sd9;

  assign sel_1_1199 = (s_20 == 1'b0 ? sel_3664 :
              s_476);

  assign sel_3665 = 32'sd0;

  assign sel_1_1200 = (s_21 == 1'b0 ? sel_1_1199 :
              sel_3665);

  assign sel_3666 = 32'sd0;

  assign sel_3667 = 32'sd0;

  assign sel_3668 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1200, sel_3651, sel_3652, sel_3653, sel_3654, sel_3655,
       sel_3656, sel_3657, sel_3658, sel_3659, sel_3660, sel_3661, sel_3662,
       sel_3663, sel_3666, sel_3667, sel_3668) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3639_sel_1 = sel_3667;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3639_sel_1 = sel_3666;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3639_sel_1 = sel_1_1200;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3639_sel_1 = sel_3663;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3639_sel_1 = sel_3662;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3639_sel_1 = sel_3661;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3639_sel_1 = sel_3660;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3639_sel_1 = sel_3659;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3639_sel_1 = sel_3658;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3639_sel_1 = sel_3657;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3639_sel_1 = sel_3656;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3639_sel_1 = sel_3655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3639_sel_1 = sel_3654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3639_sel_1 = sel_3653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3639_sel_1 = sel_3652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3639_sel_1 = sel_3651;
        end
      default :
        begin
          p3639_sel_1 = sel_3668;
        end
    endcase
    sel_1_1201 = p3639_sel_1;
  end

  assign tmp_542 = functionOutput_17[sel_1_1201];

  always @(posedge clk)
    begin : rd_458_process
      if (rst == 1'b1) begin
        s_477 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_477 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_445_process
      if (rst == 1'b1) begin
        tmp_543 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_543 <= tmp_542;
        end
      end
    end

  assign sel_1_1202 = (s_475 == 1'b0 ? sel_1_1198 :
              tmp_543);

  assign sel_3669 = 32'sd0;

  assign sel_3670 = 32'sd0;

  assign sel_3671 = 32'sd0;

  assign sel_3672 = 32'sd0;

  assign sel_3673 = 32'sd0;

  assign sel_3674 = 32'sd0;

  assign sel_3675 = 32'sd0;

  assign sel_3676 = 32'sd0;

  assign sel_3677 = 32'sd0;

  assign sel_3678 = 32'sd0;

  assign sel_3679 = 32'sd0;

  assign sel_3680 = 32'sd0;

  assign sel_3681 = 32'sd0;

  assign sel_3682 = 32'sd0;

  assign s_478 = 32'sd9;

  assign sel_1_1203 = (s_21 == 1'b0 ? sel_3682 :
              s_478);

  assign sel_3683 = 32'sd0;

  assign sel_3684 = 32'sd0;

  assign sel_3685 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1203, sel_3669, sel_3670, sel_3671, sel_3672, sel_3673,
       sel_3674, sel_3675, sel_3676, sel_3677, sel_3678, sel_3679, sel_3680,
       sel_3681, sel_3683, sel_3684, sel_3685) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4779_sel_1 = sel_3684;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4779_sel_1 = sel_3683;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4779_sel_1 = sel_1_1203;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4779_sel_1 = sel_3681;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4779_sel_1 = sel_3680;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4779_sel_1 = sel_3679;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4779_sel_1 = sel_3678;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4779_sel_1 = sel_3677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4779_sel_1 = sel_3676;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4779_sel_1 = sel_3675;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4779_sel_1 = sel_3674;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4779_sel_1 = sel_3673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4779_sel_1 = sel_3672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4779_sel_1 = sel_3671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4779_sel_1 = sel_3670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4779_sel_1 = sel_3669;
        end
      default :
        begin
          p4779_sel_1 = sel_3685;
        end
    endcase
    sel_1_1204 = p4779_sel_1;
  end

  assign tmp_544 = functionOutput_18[sel_1_1204];

  always @(posedge clk)
    begin : rd_455_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_76 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_76 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3686 = 32'sd0;

  assign sel_3687 = 32'sd0;

  assign sel_3688 = 32'sd0;

  assign sel_3689 = 32'sd0;

  assign sel_3690 = 32'sd0;

  assign sel_3691 = 32'sd0;

  assign sel_3692 = 32'sd0;

  assign sel_3693 = 32'sd0;

  assign sel_3694 = 32'sd0;

  assign sel_3695 = 32'sd0;

  assign sel_3696 = 32'sd0;

  assign sel_3697 = 32'sd0;

  assign sel_3698 = 32'sd0;

  always @(posedge clk)
    begin : rd_456_process
      if (rst == 1'b1) begin
        s_479 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_479 <= s_12;
        end
      end
    end

  assign sel_3699 = 32'sd0;

  assign sel_3700 = 32'sd0;

  assign sel_3701 = 32'sd0;

  assign s_480 = 32'sd9;

  assign sel_1_1205 = (tmp_4 == 1'b0 ? sel_3701 :
              s_480);

  assign sel_3702 = 32'sd0;

  assign sel_1_1206 = (tmp_6 == 1'b0 ? sel_1_1205 :
              sel_3702);

  assign sel_3703 = 32'sd0;

  assign sel_1_1207 = (tmp_8 == 1'b0 ? sel_1_1206 :
              sel_3703);

  assign sel_3704 = 32'sd0;

  assign sel_1_1208 = (tmp_10 == 1'b0 ? sel_1_1207 :
              sel_3704);

  assign sel_3705 = 32'sd0;

  assign sel_1_1209 = (tmp_12 == 1'b0 ? sel_1_1208 :
              sel_3705);

  assign sel_3706 = 32'sd0;

  assign sel_1_1210 = (tmp_14 == 1'b0 ? sel_1_1209 :
              sel_3706);

  assign sel_3707 = 32'sd0;

  assign sel_1_1211 = (tmp_16 == 1'b0 ? sel_1_1210 :
              sel_3707);

  assign sel_3708 = 32'sd0;

  assign sel_1_1212 = (tmp_18 == 1'b0 ? sel_1_1211 :
              sel_3708);

  assign sel_1_1213 = (s_10 == 1'b0 ? sel_3700 :
              sel_1_1212);

  assign sel_1_1214 = (s_11 == 1'b0 ? sel_3699 :
              sel_1_1213);

  always @(posedge clk)
    begin : rd_457_process
      if (rst == 1'b1) begin
        sel_1_1215 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_1215 <= sel_1_1214;
        end
      end
    end

  assign sel_3709 = 32'sd0;

  assign sel_3710 = 32'sd0;

  assign sel_1_1216 = (s_479 == 1'b0 ? sel_1_1215 :
              sel_3710);

  assign sel_3711 = 32'sd0;

  always @(posedge clk)
    begin : rd_469_process
      if (rst == 1'b1) begin
        tmp_545 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_545 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_470_process
      if (rst == 1'b1) begin
        for(rd_470_t_1 = 32'sd0; rd_470_t_1 <= 32'sd11; rd_470_t_1 = rd_470_t_1 + 32'sd1) begin
          rd_470_reg[rd_470_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_470_t_0_1 = 32'sd0; rd_470_t_0_1 <= 32'sd11; rd_470_t_0_1 = rd_470_t_0_1 + 32'sd1) begin
            rd_470_reg[rd_470_t_0_1] <= rd_470_reg_next[rd_470_t_0_1];
          end
        end
      end
    end
  genvar t_0_091;
  generate
    for(t_0_091 = 32'sd0; t_0_091 <= 32'sd11; t_0_091 = t_0_091 + 32'sd1) begin:rd_470_reg_next_gen
      assign functionOutput_36[t_0_091] = rd_470_reg[t_0_091];
      assign rd_470_reg_next[t_0_091] = functionOutput_19[t_0_091];
    end
  endgenerate

  assign sel_3712 = 32'sd0;

  always @(is_SPI_MNGR_76, sel_1_1216, sel_3686, sel_3687, sel_3688, sel_3689, sel_3690,
       sel_3691, sel_3692, sel_3693, sel_3694, sel_3695, sel_3696, sel_3697,
       sel_3698, sel_3709, sel_3711, sel_3712) begin
    case ( is_SPI_MNGR_76)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2708_sel_1 = sel_3711;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2708_sel_1 = sel_1_1216;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2708_sel_1 = sel_3709;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2708_sel_1 = sel_3698;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2708_sel_1 = sel_3697;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2708_sel_1 = sel_3696;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2708_sel_1 = sel_3695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2708_sel_1 = sel_3694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2708_sel_1 = sel_3693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2708_sel_1 = sel_3692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2708_sel_1 = sel_3691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2708_sel_1 = sel_3690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2708_sel_1 = sel_3689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2708_sel_1 = sel_3688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2708_sel_1 = sel_3687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2708_sel_1 = sel_3686;
        end
      default :
        begin
          p2708_sel_1 = sel_3712;
        end
    endcase
    sel_1_1217 = p2708_sel_1;
  end

  assign tmp_546 = functionOutput_36[sel_1_1217];

  assign sel_3713 = 32'sd0;

  assign sel_3714 = 32'sd0;

  assign sel_3715 = 32'sd0;

  assign sel_3716 = 32'sd0;

  assign sel_3717 = 32'sd0;

  assign sel_3718 = 32'sd0;

  assign sel_3719 = 32'sd0;

  assign sel_3720 = 32'sd0;

  assign sel_3721 = 32'sd0;

  assign sel_3722 = 32'sd0;

  assign sel_3723 = 32'sd0;

  assign sel_3724 = 32'sd0;

  assign sel_3725 = 32'sd0;

  assign sel_3726 = 32'sd0;

  assign sel_3727 = 32'sd0;

  assign sel_3728 = 32'sd0;

  assign sel_3729 = 32'sd0;

  assign s_481 = 32'sd9;

  assign sel_1_1218 = (tmp_6 == 1'b0 ? sel_3729 :
              s_481);

  assign sel_3730 = 32'sd0;

  assign sel_1_1219 = (tmp_8 == 1'b0 ? sel_1_1218 :
              sel_3730);

  assign sel_3731 = 32'sd0;

  assign sel_1_1220 = (tmp_10 == 1'b0 ? sel_1_1219 :
              sel_3731);

  assign sel_3732 = 32'sd0;

  assign sel_1_1221 = (tmp_12 == 1'b0 ? sel_1_1220 :
              sel_3732);

  assign sel_3733 = 32'sd0;

  assign sel_1_1222 = (tmp_14 == 1'b0 ? sel_1_1221 :
              sel_3733);

  assign sel_3734 = 32'sd0;

  assign sel_1_1223 = (tmp_16 == 1'b0 ? sel_1_1222 :
              sel_3734);

  assign sel_3735 = 32'sd0;

  assign sel_1_1224 = (tmp_18 == 1'b0 ? sel_1_1223 :
              sel_3735);

  assign sel_1_1225 = (s_10 == 1'b0 ? sel_3728 :
              sel_1_1224);

  assign sel_1_1226 = (s_11 == 1'b0 ? sel_3727 :
              sel_1_1225);

  assign sel_3736 = 32'sd0;

  assign sel_1_1227 = (s_12 == 1'b0 ? sel_1_1226 :
              sel_3736);

  assign sel_3737 = 32'sd0;

  assign sel_3738 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1227, sel_3713, sel_3714, sel_3715, sel_3716, sel_3717,
       sel_3718, sel_3719, sel_3720, sel_3721, sel_3722, sel_3723, sel_3724,
       sel_3725, sel_3726, sel_3737, sel_3738) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1948_sel_1 = sel_3737;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1948_sel_1 = sel_1_1227;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1948_sel_1 = sel_3726;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1948_sel_1 = sel_3725;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1948_sel_1 = sel_3724;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1948_sel_1 = sel_3723;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1948_sel_1 = sel_3722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1948_sel_1 = sel_3721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1948_sel_1 = sel_3720;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1948_sel_1 = sel_3719;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1948_sel_1 = sel_3718;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1948_sel_1 = sel_3717;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1948_sel_1 = sel_3716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1948_sel_1 = sel_3715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1948_sel_1 = sel_3714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1948_sel_1 = sel_3713;
        end
      default :
        begin
          p1948_sel_1 = sel_3738;
        end
    endcase
    sel_1_1228 = p1948_sel_1;
  end

  assign tmp_547 = functionOutput_21[sel_1_1228];

  always @(posedge clk)
    begin : rd_468_process
      if (rst == 1'b1) begin
        tmp_548 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_548 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_454_process
      if (rst == 1'b1) begin
        tmp_549 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_549 <= tmp_547;
        end
      end
    end

  assign sel_1_1229 = (tmp_545 == 1'b0 ? tmp_546 :
              tmp_549);

  assign sel_3739 = 32'sd0;

  assign sel_3740 = 32'sd0;

  assign sel_3741 = 32'sd0;

  assign sel_3742 = 32'sd0;

  assign sel_3743 = 32'sd0;

  assign sel_3744 = 32'sd0;

  assign sel_3745 = 32'sd0;

  assign sel_3746 = 32'sd0;

  assign sel_3747 = 32'sd0;

  assign sel_3748 = 32'sd0;

  assign sel_3749 = 32'sd0;

  assign sel_3750 = 32'sd0;

  assign sel_3751 = 32'sd0;

  assign sel_3752 = 32'sd0;

  assign sel_3753 = 32'sd0;

  assign sel_3754 = 32'sd0;

  assign sel_3755 = 32'sd0;

  assign s_482 = 32'sd9;

  assign sel_1_1230 = (tmp_8 == 1'b0 ? sel_3755 :
              s_482);

  assign sel_3756 = 32'sd0;

  assign sel_1_1231 = (tmp_10 == 1'b0 ? sel_1_1230 :
              sel_3756);

  assign sel_3757 = 32'sd0;

  assign sel_1_1232 = (tmp_12 == 1'b0 ? sel_1_1231 :
              sel_3757);

  assign sel_3758 = 32'sd0;

  assign sel_1_1233 = (tmp_14 == 1'b0 ? sel_1_1232 :
              sel_3758);

  assign sel_3759 = 32'sd0;

  assign sel_1_1234 = (tmp_16 == 1'b0 ? sel_1_1233 :
              sel_3759);

  assign sel_3760 = 32'sd0;

  assign sel_1_1235 = (tmp_18 == 1'b0 ? sel_1_1234 :
              sel_3760);

  assign sel_1_1236 = (s_10 == 1'b0 ? sel_3754 :
              sel_1_1235);

  assign sel_1_1237 = (s_11 == 1'b0 ? sel_3753 :
              sel_1_1236);

  assign sel_3761 = 32'sd0;

  assign sel_1_1238 = (s_12 == 1'b0 ? sel_1_1237 :
              sel_3761);

  assign sel_3762 = 32'sd0;

  assign sel_3763 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1238, sel_3739, sel_3740, sel_3741, sel_3742, sel_3743,
       sel_3744, sel_3745, sel_3746, sel_3747, sel_3748, sel_3749, sel_3750,
       sel_3751, sel_3752, sel_3762, sel_3763) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1967_sel_1 = sel_3762;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1967_sel_1 = sel_1_1238;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1967_sel_1 = sel_3752;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1967_sel_1 = sel_3751;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1967_sel_1 = sel_3750;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1967_sel_1 = sel_3749;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1967_sel_1 = sel_3748;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1967_sel_1 = sel_3747;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1967_sel_1 = sel_3746;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1967_sel_1 = sel_3745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1967_sel_1 = sel_3744;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1967_sel_1 = sel_3743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1967_sel_1 = sel_3742;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1967_sel_1 = sel_3741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1967_sel_1 = sel_3740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1967_sel_1 = sel_3739;
        end
      default :
        begin
          p1967_sel_1 = sel_3763;
        end
    endcase
    sel_1_1239 = p1967_sel_1;
  end

  assign tmp_550 = functionOutput_22[sel_1_1239];

  always @(posedge clk)
    begin : rd_467_process
      if (rst == 1'b1) begin
        tmp_551 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_551 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_453_process
      if (rst == 1'b1) begin
        tmp_552 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_552 <= tmp_550;
        end
      end
    end

  assign sel_1_1240 = (tmp_548 == 1'b0 ? sel_1_1229 :
              tmp_552);

  assign sel_3764 = 32'sd0;

  assign sel_3765 = 32'sd0;

  assign sel_3766 = 32'sd0;

  assign sel_3767 = 32'sd0;

  assign sel_3768 = 32'sd0;

  assign sel_3769 = 32'sd0;

  assign sel_3770 = 32'sd0;

  assign sel_3771 = 32'sd0;

  assign sel_3772 = 32'sd0;

  assign sel_3773 = 32'sd0;

  assign sel_3774 = 32'sd0;

  assign sel_3775 = 32'sd0;

  assign sel_3776 = 32'sd0;

  assign sel_3777 = 32'sd0;

  assign sel_3778 = 32'sd0;

  assign sel_3779 = 32'sd0;

  assign sel_3780 = 32'sd0;

  assign s_483 = 32'sd9;

  assign sel_1_1241 = (tmp_10 == 1'b0 ? sel_3780 :
              s_483);

  assign sel_3781 = 32'sd0;

  assign sel_1_1242 = (tmp_12 == 1'b0 ? sel_1_1241 :
              sel_3781);

  assign sel_3782 = 32'sd0;

  assign sel_1_1243 = (tmp_14 == 1'b0 ? sel_1_1242 :
              sel_3782);

  assign sel_3783 = 32'sd0;

  assign sel_1_1244 = (tmp_16 == 1'b0 ? sel_1_1243 :
              sel_3783);

  assign sel_3784 = 32'sd0;

  assign sel_1_1245 = (tmp_18 == 1'b0 ? sel_1_1244 :
              sel_3784);

  assign sel_1_1246 = (s_10 == 1'b0 ? sel_3779 :
              sel_1_1245);

  assign sel_1_1247 = (s_11 == 1'b0 ? sel_3778 :
              sel_1_1246);

  assign sel_3785 = 32'sd0;

  assign sel_1_1248 = (s_12 == 1'b0 ? sel_1_1247 :
              sel_3785);

  assign sel_3786 = 32'sd0;

  assign sel_3787 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1248, sel_3764, sel_3765, sel_3766, sel_3767, sel_3768,
       sel_3769, sel_3770, sel_3771, sel_3772, sel_3773, sel_3774, sel_3775,
       sel_3776, sel_3777, sel_3786, sel_3787) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3012_sel_1 = sel_3786;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3012_sel_1 = sel_1_1248;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3012_sel_1 = sel_3777;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3012_sel_1 = sel_3776;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3012_sel_1 = sel_3775;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3012_sel_1 = sel_3774;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3012_sel_1 = sel_3773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3012_sel_1 = sel_3772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3012_sel_1 = sel_3771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3012_sel_1 = sel_3770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3012_sel_1 = sel_3769;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3012_sel_1 = sel_3768;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3012_sel_1 = sel_3767;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3012_sel_1 = sel_3766;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3012_sel_1 = sel_3765;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3012_sel_1 = sel_3764;
        end
      default :
        begin
          p3012_sel_1 = sel_3787;
        end
    endcase
    sel_1_1249 = p3012_sel_1;
  end

  assign tmp_553 = functionOutput_23[sel_1_1249];

  always @(posedge clk)
    begin : rd_466_process
      if (rst == 1'b1) begin
        tmp_554 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_554 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_452_process
      if (rst == 1'b1) begin
        tmp_555 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_555 <= tmp_553;
        end
      end
    end

  assign sel_1_1250 = (tmp_551 == 1'b0 ? sel_1_1240 :
              tmp_555);

  assign sel_3788 = 32'sd0;

  assign sel_3789 = 32'sd0;

  assign sel_3790 = 32'sd0;

  assign sel_3791 = 32'sd0;

  assign sel_3792 = 32'sd0;

  assign sel_3793 = 32'sd0;

  assign sel_3794 = 32'sd0;

  assign sel_3795 = 32'sd0;

  assign sel_3796 = 32'sd0;

  assign sel_3797 = 32'sd0;

  assign sel_3798 = 32'sd0;

  assign sel_3799 = 32'sd0;

  assign sel_3800 = 32'sd0;

  assign sel_3801 = 32'sd0;

  assign sel_3802 = 32'sd0;

  assign sel_3803 = 32'sd0;

  assign sel_3804 = 32'sd0;

  assign s_484 = 32'sd9;

  assign sel_1_1251 = (tmp_12 == 1'b0 ? sel_3804 :
              s_484);

  assign sel_3805 = 32'sd0;

  assign sel_1_1252 = (tmp_14 == 1'b0 ? sel_1_1251 :
              sel_3805);

  assign sel_3806 = 32'sd0;

  assign sel_1_1253 = (tmp_16 == 1'b0 ? sel_1_1252 :
              sel_3806);

  assign sel_3807 = 32'sd0;

  assign sel_1_1254 = (tmp_18 == 1'b0 ? sel_1_1253 :
              sel_3807);

  assign sel_1_1255 = (s_10 == 1'b0 ? sel_3803 :
              sel_1_1254);

  assign sel_1_1256 = (s_11 == 1'b0 ? sel_3802 :
              sel_1_1255);

  assign sel_3808 = 32'sd0;

  assign sel_1_1257 = (s_12 == 1'b0 ? sel_1_1256 :
              sel_3808);

  assign sel_3809 = 32'sd0;

  assign sel_3810 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1257, sel_3788, sel_3789, sel_3790, sel_3791, sel_3792,
       sel_3793, sel_3794, sel_3795, sel_3796, sel_3797, sel_3798, sel_3799,
       sel_3800, sel_3801, sel_3809, sel_3810) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2461_sel_1 = sel_3809;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2461_sel_1 = sel_1_1257;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2461_sel_1 = sel_3801;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2461_sel_1 = sel_3800;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2461_sel_1 = sel_3799;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2461_sel_1 = sel_3798;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2461_sel_1 = sel_3797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2461_sel_1 = sel_3796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2461_sel_1 = sel_3795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2461_sel_1 = sel_3794;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2461_sel_1 = sel_3793;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2461_sel_1 = sel_3792;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2461_sel_1 = sel_3791;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2461_sel_1 = sel_3790;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2461_sel_1 = sel_3789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2461_sel_1 = sel_3788;
        end
      default :
        begin
          p2461_sel_1 = sel_3810;
        end
    endcase
    sel_1_1258 = p2461_sel_1;
  end

  assign tmp_556 = functionOutput_24[sel_1_1258];

  always @(posedge clk)
    begin : rd_465_process
      if (rst == 1'b1) begin
        tmp_557 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_557 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_451_process
      if (rst == 1'b1) begin
        tmp_558 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_558 <= tmp_556;
        end
      end
    end

  assign sel_1_1259 = (tmp_554 == 1'b0 ? sel_1_1250 :
              tmp_558);

  assign sel_3811 = 32'sd0;

  assign sel_3812 = 32'sd0;

  assign sel_3813 = 32'sd0;

  assign sel_3814 = 32'sd0;

  assign sel_3815 = 32'sd0;

  assign sel_3816 = 32'sd0;

  assign sel_3817 = 32'sd0;

  assign sel_3818 = 32'sd0;

  assign sel_3819 = 32'sd0;

  assign sel_3820 = 32'sd0;

  assign sel_3821 = 32'sd0;

  assign sel_3822 = 32'sd0;

  assign sel_3823 = 32'sd0;

  assign sel_3824 = 32'sd0;

  assign sel_3825 = 32'sd0;

  assign sel_3826 = 32'sd0;

  assign sel_3827 = 32'sd0;

  assign s_485 = 32'sd9;

  assign sel_1_1260 = (tmp_14 == 1'b0 ? sel_3827 :
              s_485);

  assign sel_3828 = 32'sd0;

  assign sel_1_1261 = (tmp_16 == 1'b0 ? sel_1_1260 :
              sel_3828);

  assign sel_3829 = 32'sd0;

  assign sel_1_1262 = (tmp_18 == 1'b0 ? sel_1_1261 :
              sel_3829);

  assign sel_1_1263 = (s_10 == 1'b0 ? sel_3826 :
              sel_1_1262);

  assign sel_1_1264 = (s_11 == 1'b0 ? sel_3825 :
              sel_1_1263);

  assign sel_3830 = 32'sd0;

  assign sel_1_1265 = (s_12 == 1'b0 ? sel_1_1264 :
              sel_3830);

  assign sel_3831 = 32'sd0;

  assign sel_3832 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1265, sel_3811, sel_3812, sel_3813, sel_3814, sel_3815,
       sel_3816, sel_3817, sel_3818, sel_3819, sel_3820, sel_3821, sel_3822,
       sel_3823, sel_3824, sel_3831, sel_3832) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2993_sel_1 = sel_3831;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2993_sel_1 = sel_1_1265;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2993_sel_1 = sel_3824;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2993_sel_1 = sel_3823;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2993_sel_1 = sel_3822;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2993_sel_1 = sel_3821;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2993_sel_1 = sel_3820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2993_sel_1 = sel_3819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2993_sel_1 = sel_3818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2993_sel_1 = sel_3817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2993_sel_1 = sel_3816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2993_sel_1 = sel_3815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2993_sel_1 = sel_3814;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2993_sel_1 = sel_3813;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2993_sel_1 = sel_3812;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2993_sel_1 = sel_3811;
        end
      default :
        begin
          p2993_sel_1 = sel_3832;
        end
    endcase
    sel_1_1266 = p2993_sel_1;
  end

  assign tmp_559 = functionOutput_25[sel_1_1266];

  always @(posedge clk)
    begin : rd_464_process
      if (rst == 1'b1) begin
        tmp_560 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_560 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_450_process
      if (rst == 1'b1) begin
        tmp_561 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_561 <= tmp_559;
        end
      end
    end

  assign sel_1_1267 = (tmp_557 == 1'b0 ? sel_1_1259 :
              tmp_561);

  assign sel_3833 = 32'sd0;

  assign sel_3834 = 32'sd0;

  assign sel_3835 = 32'sd0;

  assign sel_3836 = 32'sd0;

  assign sel_3837 = 32'sd0;

  assign sel_3838 = 32'sd0;

  assign sel_3839 = 32'sd0;

  assign sel_3840 = 32'sd0;

  assign sel_3841 = 32'sd0;

  assign sel_3842 = 32'sd0;

  assign sel_3843 = 32'sd0;

  assign sel_3844 = 32'sd0;

  assign sel_3845 = 32'sd0;

  assign sel_3846 = 32'sd0;

  assign sel_3847 = 32'sd0;

  assign sel_3848 = 32'sd0;

  assign sel_3849 = 32'sd0;

  assign s_486 = 32'sd9;

  assign sel_1_1268 = (tmp_16 == 1'b0 ? sel_3849 :
              s_486);

  assign sel_3850 = 32'sd0;

  assign sel_1_1269 = (tmp_18 == 1'b0 ? sel_1_1268 :
              sel_3850);

  assign sel_1_1270 = (s_10 == 1'b0 ? sel_3848 :
              sel_1_1269);

  assign sel_1_1271 = (s_11 == 1'b0 ? sel_3847 :
              sel_1_1270);

  assign sel_3851 = 32'sd0;

  assign sel_1_1272 = (s_12 == 1'b0 ? sel_1_1271 :
              sel_3851);

  assign sel_3852 = 32'sd0;

  assign sel_3853 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1272, sel_3833, sel_3834, sel_3835, sel_3836, sel_3837,
       sel_3838, sel_3839, sel_3840, sel_3841, sel_3842, sel_3843, sel_3844,
       sel_3845, sel_3846, sel_3852, sel_3853) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3164_sel_1 = sel_3852;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3164_sel_1 = sel_1_1272;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3164_sel_1 = sel_3846;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3164_sel_1 = sel_3845;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3164_sel_1 = sel_3844;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3164_sel_1 = sel_3843;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3164_sel_1 = sel_3842;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3164_sel_1 = sel_3841;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3164_sel_1 = sel_3840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3164_sel_1 = sel_3839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3164_sel_1 = sel_3838;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3164_sel_1 = sel_3837;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3164_sel_1 = sel_3836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3164_sel_1 = sel_3835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3164_sel_1 = sel_3834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3164_sel_1 = sel_3833;
        end
      default :
        begin
          p3164_sel_1 = sel_3853;
        end
    endcase
    sel_1_1273 = p3164_sel_1;
  end

  assign tmp_562 = functionOutput_26[sel_1_1273];

  always @(posedge clk)
    begin : rd_463_process
      if (rst == 1'b1) begin
        tmp_563 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_563 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_449_process
      if (rst == 1'b1) begin
        tmp_564 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_564 <= tmp_562;
        end
      end
    end

  assign sel_1_1274 = (tmp_560 == 1'b0 ? sel_1_1267 :
              tmp_564);

  assign sel_3854 = 32'sd0;

  assign sel_3855 = 32'sd0;

  assign sel_3856 = 32'sd0;

  assign sel_3857 = 32'sd0;

  assign sel_3858 = 32'sd0;

  assign sel_3859 = 32'sd0;

  assign sel_3860 = 32'sd0;

  assign sel_3861 = 32'sd0;

  assign sel_3862 = 32'sd0;

  assign sel_3863 = 32'sd0;

  assign sel_3864 = 32'sd0;

  assign sel_3865 = 32'sd0;

  assign sel_3866 = 32'sd0;

  assign sel_3867 = 32'sd0;

  assign sel_3868 = 32'sd0;

  assign sel_3869 = 32'sd0;

  assign sel_3870 = 32'sd0;

  assign s_487 = 32'sd9;

  assign sel_1_1275 = (tmp_18 == 1'b0 ? sel_3870 :
              s_487);

  assign sel_1_1276 = (s_10 == 1'b0 ? sel_3869 :
              sel_1_1275);

  assign sel_1_1277 = (s_11 == 1'b0 ? sel_3868 :
              sel_1_1276);

  assign sel_3871 = 32'sd0;

  assign sel_1_1278 = (s_12 == 1'b0 ? sel_1_1277 :
              sel_3871);

  assign sel_3872 = 32'sd0;

  assign sel_3873 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1278, sel_3854, sel_3855, sel_3856, sel_3857, sel_3858,
       sel_3859, sel_3860, sel_3861, sel_3862, sel_3863, sel_3864, sel_3865,
       sel_3866, sel_3867, sel_3872, sel_3873) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2062_sel_1 = sel_3872;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2062_sel_1 = sel_1_1278;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2062_sel_1 = sel_3867;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2062_sel_1 = sel_3866;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2062_sel_1 = sel_3865;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2062_sel_1 = sel_3864;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2062_sel_1 = sel_3863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2062_sel_1 = sel_3862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2062_sel_1 = sel_3861;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2062_sel_1 = sel_3860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2062_sel_1 = sel_3859;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2062_sel_1 = sel_3858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2062_sel_1 = sel_3857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2062_sel_1 = sel_3856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2062_sel_1 = sel_3855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2062_sel_1 = sel_3854;
        end
      default :
        begin
          p2062_sel_1 = sel_3873;
        end
    endcase
    sel_1_1279 = p2062_sel_1;
  end

  assign tmp_565 = functionOutput_27[sel_1_1279];

  assign sel_3874 = 8'd0;

  always @(posedge clk)
    begin : rd_444_process
      if (rst == 1'b1) begin
        tmp_566 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_566 <= tmp_544;
        end
      end
    end

  assign sel_1_1280 = (s_477 == 1'b0 ? sel_1_1202 :
              tmp_566);

  always @(posedge clk)
    begin : rd_448_process
      if (rst == 1'b1) begin
        tmp_567 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_567 <= tmp_565;
        end
      end
    end

  assign sel_1_1281 = (tmp_563 == 1'b0 ? sel_1_1274 :
              tmp_567);

  assign sel_3875 = 8'd0;

  always @(posedge clk)
    begin : rd_471_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_77 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_77 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3876 = 1'b0;

  assign sel_3877 = 1'b0;

  assign sel_3878 = 1'b0;

  assign sel_3879 = 1'b0;

  assign sel_3880 = 1'b0;

  assign sel_3881 = 1'b0;

  assign sel_3882 = 1'b0;

  assign sel_3883 = 1'b0;

  assign sel_3884 = 1'b0;

  assign sel_3885 = 1'b0;

  assign sel_3886 = 1'b0;

  assign sel_3887 = 1'b0;

  assign sel_3888 = 1'b0;

  assign sel_3889 = 1'b0;

  assign s_488 = 1'b1;

  assign sel_2_194 = (s_14 == 1'b0 ? sel_3889 :
              s_488);

  assign s_489 = 1'b1;

  assign sel_2_195 = (s_15 == 1'b0 ? sel_2_194 :
              s_489);

  assign s_490 = 1'b1;

  assign sel_2_196 = (s_16 == 1'b0 ? sel_2_195 :
              s_490);

  assign s_491 = 1'b1;

  assign sel_2_197 = (s_17 == 1'b0 ? sel_2_196 :
              s_491);

  assign s_492 = 1'b1;

  assign sel_2_198 = (s_18 == 1'b0 ? sel_2_197 :
              s_492);

  assign s_493 = 1'b1;

  assign sel_2_199 = (s_19 == 1'b0 ? sel_2_198 :
              s_493);

  assign s_494 = 1'b1;

  assign sel_2_200 = (s_20 == 1'b0 ? sel_2_199 :
              s_494);

  assign s_495 = 1'b1;

  assign sel_2_201 = (s_21 == 1'b0 ? sel_2_200 :
              s_495);

  always @(posedge clk)
    begin : rd_473_process
      if (rst == 1'b1) begin
        s_496 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_496 <= s_12;
        end
      end
    end

  assign sel_3890 = 1'b0;

  assign sel_3891 = 1'b0;

  assign sel_3892 = 1'b0;

  assign s_497 = 1'b1;

  assign sel_2_202 = (tmp_4 == 1'b0 ? sel_3892 :
              s_497);

  assign s_498 = 1'b1;

  assign sel_2_203 = (tmp_6 == 1'b0 ? sel_2_202 :
              s_498);

  assign s_499 = 1'b1;

  assign sel_2_204 = (tmp_8 == 1'b0 ? sel_2_203 :
              s_499);

  assign s_500 = 1'b1;

  assign sel_2_205 = (tmp_10 == 1'b0 ? sel_2_204 :
              s_500);

  assign s_501 = 1'b1;

  assign sel_2_206 = (tmp_12 == 1'b0 ? sel_2_205 :
              s_501);

  assign s_502 = 1'b1;

  assign sel_2_207 = (tmp_14 == 1'b0 ? sel_2_206 :
              s_502);

  assign s_503 = 1'b1;

  assign sel_2_208 = (tmp_16 == 1'b0 ? sel_2_207 :
              s_503);

  assign s_504 = 1'b1;

  assign sel_2_209 = (tmp_18 == 1'b0 ? sel_2_208 :
              s_504);

  assign sel_2_210 = (s_10 == 1'b0 ? sel_3891 :
              sel_2_209);

  assign sel_2_211 = (s_11 == 1'b0 ? sel_3890 :
              sel_2_210);

  always @(posedge clk)
    begin : rd_474_process
      if (rst == 1'b1) begin
        sel_2_212 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_212 <= sel_2_211;
        end
      end
    end

  always @(posedge clk)
    begin : rd_472_process
      if (rst == 1'b1) begin
        sel_2_213 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_213 <= sel_2_201;
        end
      end
    end

  assign sel_3893 = 1'b0;

  assign sel_2_214 = (s_496 == 1'b0 ? sel_2_212 :
              sel_3893);

  assign sel_3894 = 1'b0;

  always @(posedge clk)
    begin : rd_475_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_78 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_78 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_3895 = 8'd0;

  assign sel_3896 = 8'd0;

  assign sel_3897 = 8'd0;

  assign sel_3898 = 8'd0;

  assign sel_3899 = 8'd0;

  assign sel_3900 = 8'd0;

  assign sel_3901 = 8'd0;

  assign sel_3902 = 8'd0;

  assign sel_3903 = 8'd0;

  assign sel_3904 = 8'd0;

  assign sel_3905 = 8'd0;

  assign sel_3906 = 8'd0;

  always @(posedge clk)
    begin : rd_493_process
      if (rst == 1'b1) begin
        s_505 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_505 <= s_18;
        end
      end
    end

  assign sel_3907 = 32'sd0;

  assign sel_3908 = 32'sd0;

  assign sel_3909 = 32'sd0;

  assign sel_3910 = 32'sd0;

  assign sel_3911 = 32'sd0;

  assign sel_3912 = 32'sd0;

  assign sel_3913 = 32'sd0;

  assign sel_3914 = 32'sd0;

  assign sel_3915 = 32'sd0;

  assign sel_3916 = 32'sd0;

  assign sel_3917 = 32'sd0;

  assign sel_3918 = 32'sd0;

  assign sel_3919 = 32'sd0;

  assign sel_3920 = 32'sd0;

  assign s_506 = 32'sd10;

  assign sel_1_1282 = (s_14 == 1'b0 ? sel_3920 :
              s_506);

  assign sel_3921 = 32'sd0;

  assign sel_1_1283 = (s_15 == 1'b0 ? sel_1_1282 :
              sel_3921);

  assign sel_3922 = 32'sd0;

  assign sel_1_1284 = (s_16 == 1'b0 ? sel_1_1283 :
              sel_3922);

  assign sel_3923 = 32'sd0;

  assign sel_1_1285 = (s_17 == 1'b0 ? sel_1_1284 :
              sel_3923);

  assign sel_3924 = 32'sd0;

  assign sel_1_1286 = (s_18 == 1'b0 ? sel_1_1285 :
              sel_3924);

  assign sel_3925 = 32'sd0;

  assign sel_1_1287 = (s_19 == 1'b0 ? sel_1_1286 :
              sel_3925);

  assign sel_3926 = 32'sd0;

  assign sel_1_1288 = (s_20 == 1'b0 ? sel_1_1287 :
              sel_3926);

  assign sel_3927 = 32'sd0;

  assign sel_1_1289 = (s_21 == 1'b0 ? sel_1_1288 :
              sel_3927);

  assign sel_3928 = 32'sd0;

  assign sel_3929 = 32'sd0;

  assign sel_3930 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1289, sel_3907, sel_3908, sel_3909, sel_3910, sel_3911,
       sel_3912, sel_3913, sel_3914, sel_3915, sel_3916, sel_3917, sel_3918,
       sel_3919, sel_3928, sel_3929, sel_3930) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3981_sel_1 = sel_3929;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3981_sel_1 = sel_3928;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3981_sel_1 = sel_1_1289;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3981_sel_1 = sel_3919;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3981_sel_1 = sel_3918;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3981_sel_1 = sel_3917;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3981_sel_1 = sel_3916;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3981_sel_1 = sel_3915;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3981_sel_1 = sel_3914;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3981_sel_1 = sel_3913;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3981_sel_1 = sel_3912;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3981_sel_1 = sel_3911;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3981_sel_1 = sel_3910;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3981_sel_1 = sel_3909;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3981_sel_1 = sel_3908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3981_sel_1 = sel_3907;
        end
      default :
        begin
          p3981_sel_1 = sel_3930;
        end
    endcase
    sel_1_1290 = p3981_sel_1;
  end

  assign tmp_568 = functionOutput[sel_1_1290];

  assign sel_3931 = 32'sd0;

  assign sel_3932 = 32'sd0;

  assign sel_3933 = 32'sd0;

  assign sel_3934 = 32'sd0;

  assign sel_3935 = 32'sd0;

  assign sel_3936 = 32'sd0;

  assign sel_3937 = 32'sd0;

  assign sel_3938 = 32'sd0;

  assign sel_3939 = 32'sd0;

  assign sel_3940 = 32'sd0;

  assign sel_3941 = 32'sd0;

  assign sel_3942 = 32'sd0;

  assign sel_3943 = 32'sd0;

  assign sel_3944 = 32'sd0;

  assign s_507 = 32'sd10;

  assign sel_1_1291 = (s_15 == 1'b0 ? sel_3944 :
              s_507);

  assign sel_3945 = 32'sd0;

  assign sel_1_1292 = (s_16 == 1'b0 ? sel_1_1291 :
              sel_3945);

  assign sel_3946 = 32'sd0;

  assign sel_1_1293 = (s_17 == 1'b0 ? sel_1_1292 :
              sel_3946);

  assign sel_3947 = 32'sd0;

  assign sel_1_1294 = (s_18 == 1'b0 ? sel_1_1293 :
              sel_3947);

  assign sel_3948 = 32'sd0;

  assign sel_1_1295 = (s_19 == 1'b0 ? sel_1_1294 :
              sel_3948);

  assign sel_3949 = 32'sd0;

  assign sel_1_1296 = (s_20 == 1'b0 ? sel_1_1295 :
              sel_3949);

  assign sel_3950 = 32'sd0;

  assign sel_1_1297 = (s_21 == 1'b0 ? sel_1_1296 :
              sel_3950);

  assign sel_3951 = 32'sd0;

  assign sel_3952 = 32'sd0;

  assign sel_3953 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1297, sel_3931, sel_3932, sel_3933, sel_3934, sel_3935,
       sel_3936, sel_3937, sel_3938, sel_3939, sel_3940, sel_3941, sel_3942,
       sel_3943, sel_3951, sel_3952, sel_3953) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4627_sel_1 = sel_3952;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4627_sel_1 = sel_3951;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4627_sel_1 = sel_1_1297;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4627_sel_1 = sel_3943;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4627_sel_1 = sel_3942;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4627_sel_1 = sel_3941;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4627_sel_1 = sel_3940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4627_sel_1 = sel_3939;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4627_sel_1 = sel_3938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4627_sel_1 = sel_3937;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4627_sel_1 = sel_3936;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4627_sel_1 = sel_3935;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4627_sel_1 = sel_3934;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4627_sel_1 = sel_3933;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4627_sel_1 = sel_3932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4627_sel_1 = sel_3931;
        end
      default :
        begin
          p4627_sel_1 = sel_3953;
        end
    endcase
    sel_1_1298 = p4627_sel_1;
  end

  assign tmp_569 = functionOutput_12[sel_1_1298];

  assign sel_1_1299 = (s_15 == 1'b0 ? tmp_568 :
              tmp_569);

  assign sel_3954 = 32'sd0;

  assign sel_3955 = 32'sd0;

  assign sel_3956 = 32'sd0;

  assign sel_3957 = 32'sd0;

  assign sel_3958 = 32'sd0;

  assign sel_3959 = 32'sd0;

  assign sel_3960 = 32'sd0;

  assign sel_3961 = 32'sd0;

  assign sel_3962 = 32'sd0;

  assign sel_3963 = 32'sd0;

  assign sel_3964 = 32'sd0;

  assign sel_3965 = 32'sd0;

  assign sel_3966 = 32'sd0;

  assign sel_3967 = 32'sd0;

  assign s_508 = 32'sd10;

  assign sel_1_1300 = (s_16 == 1'b0 ? sel_3967 :
              s_508);

  assign sel_3968 = 32'sd0;

  assign sel_1_1301 = (s_17 == 1'b0 ? sel_1_1300 :
              sel_3968);

  assign sel_3969 = 32'sd0;

  assign sel_1_1302 = (s_18 == 1'b0 ? sel_1_1301 :
              sel_3969);

  assign sel_3970 = 32'sd0;

  assign sel_1_1303 = (s_19 == 1'b0 ? sel_1_1302 :
              sel_3970);

  assign sel_3971 = 32'sd0;

  assign sel_1_1304 = (s_20 == 1'b0 ? sel_1_1303 :
              sel_3971);

  assign sel_3972 = 32'sd0;

  assign sel_1_1305 = (s_21 == 1'b0 ? sel_1_1304 :
              sel_3972);

  assign sel_3973 = 32'sd0;

  assign sel_3974 = 32'sd0;

  assign sel_3975 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1305, sel_3954, sel_3955, sel_3956, sel_3957, sel_3958,
       sel_3959, sel_3960, sel_3961, sel_3962, sel_3963, sel_3964, sel_3965,
       sel_3966, sel_3973, sel_3974, sel_3975) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3886_sel_1 = sel_3974;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3886_sel_1 = sel_3973;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3886_sel_1 = sel_1_1305;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3886_sel_1 = sel_3966;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3886_sel_1 = sel_3965;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3886_sel_1 = sel_3964;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3886_sel_1 = sel_3963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3886_sel_1 = sel_3962;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3886_sel_1 = sel_3961;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3886_sel_1 = sel_3960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3886_sel_1 = sel_3959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3886_sel_1 = sel_3958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3886_sel_1 = sel_3957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3886_sel_1 = sel_3956;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3886_sel_1 = sel_3955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3886_sel_1 = sel_3954;
        end
      default :
        begin
          p3886_sel_1 = sel_3975;
        end
    endcase
    sel_1_1306 = p3886_sel_1;
  end

  assign tmp_570 = functionOutput_13[sel_1_1306];

  assign sel_1_1307 = (s_16 == 1'b0 ? sel_1_1299 :
              tmp_570);

  assign sel_3976 = 32'sd0;

  assign sel_3977 = 32'sd0;

  assign sel_3978 = 32'sd0;

  assign sel_3979 = 32'sd0;

  assign sel_3980 = 32'sd0;

  assign sel_3981 = 32'sd0;

  assign sel_3982 = 32'sd0;

  assign sel_3983 = 32'sd0;

  assign sel_3984 = 32'sd0;

  assign sel_3985 = 32'sd0;

  assign sel_3986 = 32'sd0;

  assign sel_3987 = 32'sd0;

  assign sel_3988 = 32'sd0;

  assign sel_3989 = 32'sd0;

  assign s_509 = 32'sd10;

  assign sel_1_1308 = (s_17 == 1'b0 ? sel_3989 :
              s_509);

  assign sel_3990 = 32'sd0;

  assign sel_1_1309 = (s_18 == 1'b0 ? sel_1_1308 :
              sel_3990);

  assign sel_3991 = 32'sd0;

  assign sel_1_1310 = (s_19 == 1'b0 ? sel_1_1309 :
              sel_3991);

  assign sel_3992 = 32'sd0;

  assign sel_1_1311 = (s_20 == 1'b0 ? sel_1_1310 :
              sel_3992);

  assign sel_3993 = 32'sd0;

  assign sel_1_1312 = (s_21 == 1'b0 ? sel_1_1311 :
              sel_3993);

  assign sel_3994 = 32'sd0;

  assign sel_3995 = 32'sd0;

  assign sel_3996 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1312, sel_3976, sel_3977, sel_3978, sel_3979, sel_3980,
       sel_3981, sel_3982, sel_3983, sel_3984, sel_3985, sel_3986, sel_3987,
       sel_3988, sel_3994, sel_3995, sel_3996) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4570_sel_1 = sel_3995;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4570_sel_1 = sel_3994;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4570_sel_1 = sel_1_1312;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4570_sel_1 = sel_3988;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4570_sel_1 = sel_3987;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4570_sel_1 = sel_3986;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4570_sel_1 = sel_3985;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4570_sel_1 = sel_3984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4570_sel_1 = sel_3983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4570_sel_1 = sel_3982;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4570_sel_1 = sel_3981;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4570_sel_1 = sel_3980;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4570_sel_1 = sel_3979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4570_sel_1 = sel_3978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4570_sel_1 = sel_3977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4570_sel_1 = sel_3976;
        end
      default :
        begin
          p4570_sel_1 = sel_3996;
        end
    endcase
    sel_1_1313 = p4570_sel_1;
  end

  assign tmp_571 = functionOutput_14[sel_1_1313];

  assign sel_1_1314 = (s_17 == 1'b0 ? sel_1_1307 :
              tmp_571);

  always @(posedge clk)
    begin : rd_494_process
      if (rst == 1'b1) begin
        sel_1_1315 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_1315 <= sel_1_1314;
        end
      end
    end

  assign sel_3997 = 32'sd0;

  assign sel_3998 = 32'sd0;

  assign sel_3999 = 32'sd0;

  assign sel_4000 = 32'sd0;

  assign sel_4001 = 32'sd0;

  assign sel_4002 = 32'sd0;

  assign sel_4003 = 32'sd0;

  assign sel_4004 = 32'sd0;

  assign sel_4005 = 32'sd0;

  assign sel_4006 = 32'sd0;

  assign sel_4007 = 32'sd0;

  assign sel_4008 = 32'sd0;

  assign sel_4009 = 32'sd0;

  assign sel_4010 = 32'sd0;

  assign s_510 = 32'sd10;

  assign sel_1_1316 = (s_18 == 1'b0 ? sel_4010 :
              s_510);

  assign sel_4011 = 32'sd0;

  assign sel_1_1317 = (s_19 == 1'b0 ? sel_1_1316 :
              sel_4011);

  assign sel_4012 = 32'sd0;

  assign sel_1_1318 = (s_20 == 1'b0 ? sel_1_1317 :
              sel_4012);

  assign sel_4013 = 32'sd0;

  assign sel_1_1319 = (s_21 == 1'b0 ? sel_1_1318 :
              sel_4013);

  assign sel_4014 = 32'sd0;

  assign sel_4015 = 32'sd0;

  assign sel_4016 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1319, sel_3997, sel_3998, sel_3999, sel_4000, sel_4001,
       sel_4002, sel_4003, sel_4004, sel_4005, sel_4006, sel_4007, sel_4008,
       sel_4009, sel_4014, sel_4015, sel_4016) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4133_sel_1 = sel_4015;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4133_sel_1 = sel_4014;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4133_sel_1 = sel_1_1319;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4133_sel_1 = sel_4009;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4133_sel_1 = sel_4008;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4133_sel_1 = sel_4007;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4133_sel_1 = sel_4006;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4133_sel_1 = sel_4005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4133_sel_1 = sel_4004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4133_sel_1 = sel_4003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4133_sel_1 = sel_4002;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4133_sel_1 = sel_4001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4133_sel_1 = sel_4000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4133_sel_1 = sel_3999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4133_sel_1 = sel_3998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4133_sel_1 = sel_3997;
        end
      default :
        begin
          p4133_sel_1 = sel_4016;
        end
    endcase
    sel_1_1320 = p4133_sel_1;
  end

  assign tmp_572 = functionOutput_15[sel_1_1320];

  always @(posedge clk)
    begin : rd_492_process
      if (rst == 1'b1) begin
        s_511 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_511 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_479_process
      if (rst == 1'b1) begin
        tmp_573 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_573 <= tmp_572;
        end
      end
    end

  assign sel_1_1321 = (s_505 == 1'b0 ? sel_1_1315 :
              tmp_573);

  assign sel_4017 = 32'sd0;

  assign sel_4018 = 32'sd0;

  assign sel_4019 = 32'sd0;

  assign sel_4020 = 32'sd0;

  assign sel_4021 = 32'sd0;

  assign sel_4022 = 32'sd0;

  assign sel_4023 = 32'sd0;

  assign sel_4024 = 32'sd0;

  assign sel_4025 = 32'sd0;

  assign sel_4026 = 32'sd0;

  assign sel_4027 = 32'sd0;

  assign sel_4028 = 32'sd0;

  assign sel_4029 = 32'sd0;

  assign sel_4030 = 32'sd0;

  assign s_512 = 32'sd10;

  assign sel_1_1322 = (s_19 == 1'b0 ? sel_4030 :
              s_512);

  assign sel_4031 = 32'sd0;

  assign sel_1_1323 = (s_20 == 1'b0 ? sel_1_1322 :
              sel_4031);

  assign sel_4032 = 32'sd0;

  assign sel_1_1324 = (s_21 == 1'b0 ? sel_1_1323 :
              sel_4032);

  assign sel_4033 = 32'sd0;

  assign sel_4034 = 32'sd0;

  assign sel_4035 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1324, sel_4017, sel_4018, sel_4019, sel_4020, sel_4021,
       sel_4022, sel_4023, sel_4024, sel_4025, sel_4026, sel_4027, sel_4028,
       sel_4029, sel_4033, sel_4034, sel_4035) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3905_sel_1 = sel_4034;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3905_sel_1 = sel_4033;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3905_sel_1 = sel_1_1324;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3905_sel_1 = sel_4029;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3905_sel_1 = sel_4028;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3905_sel_1 = sel_4027;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3905_sel_1 = sel_4026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3905_sel_1 = sel_4025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3905_sel_1 = sel_4024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3905_sel_1 = sel_4023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3905_sel_1 = sel_4022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3905_sel_1 = sel_4021;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3905_sel_1 = sel_4020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3905_sel_1 = sel_4019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3905_sel_1 = sel_4018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3905_sel_1 = sel_4017;
        end
      default :
        begin
          p3905_sel_1 = sel_4035;
        end
    endcase
    sel_1_1325 = p3905_sel_1;
  end

  assign tmp_574 = functionOutput_16[sel_1_1325];

  always @(posedge clk)
    begin : rd_491_process
      if (rst == 1'b1) begin
        s_513 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_513 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_478_process
      if (rst == 1'b1) begin
        tmp_575 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_575 <= tmp_574;
        end
      end
    end

  assign sel_1_1326 = (s_511 == 1'b0 ? sel_1_1321 :
              tmp_575);

  assign sel_4036 = 32'sd0;

  assign sel_4037 = 32'sd0;

  assign sel_4038 = 32'sd0;

  assign sel_4039 = 32'sd0;

  assign sel_4040 = 32'sd0;

  assign sel_4041 = 32'sd0;

  assign sel_4042 = 32'sd0;

  assign sel_4043 = 32'sd0;

  assign sel_4044 = 32'sd0;

  assign sel_4045 = 32'sd0;

  assign sel_4046 = 32'sd0;

  assign sel_4047 = 32'sd0;

  assign sel_4048 = 32'sd0;

  assign sel_4049 = 32'sd0;

  assign s_514 = 32'sd10;

  assign sel_1_1327 = (s_20 == 1'b0 ? sel_4049 :
              s_514);

  assign sel_4050 = 32'sd0;

  assign sel_1_1328 = (s_21 == 1'b0 ? sel_1_1327 :
              sel_4050);

  assign sel_4051 = 32'sd0;

  assign sel_4052 = 32'sd0;

  assign sel_4053 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1328, sel_4036, sel_4037, sel_4038, sel_4039, sel_4040,
       sel_4041, sel_4042, sel_4043, sel_4044, sel_4045, sel_4046, sel_4047,
       sel_4048, sel_4051, sel_4052, sel_4053) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3734_sel_1 = sel_4052;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3734_sel_1 = sel_4051;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3734_sel_1 = sel_1_1328;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3734_sel_1 = sel_4048;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3734_sel_1 = sel_4047;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3734_sel_1 = sel_4046;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3734_sel_1 = sel_4045;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3734_sel_1 = sel_4044;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3734_sel_1 = sel_4043;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3734_sel_1 = sel_4042;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3734_sel_1 = sel_4041;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3734_sel_1 = sel_4040;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3734_sel_1 = sel_4039;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3734_sel_1 = sel_4038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3734_sel_1 = sel_4037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3734_sel_1 = sel_4036;
        end
      default :
        begin
          p3734_sel_1 = sel_4053;
        end
    endcase
    sel_1_1329 = p3734_sel_1;
  end

  assign tmp_576 = functionOutput_17[sel_1_1329];

  always @(posedge clk)
    begin : rd_490_process
      if (rst == 1'b1) begin
        s_515 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_515 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_477_process
      if (rst == 1'b1) begin
        tmp_577 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_577 <= tmp_576;
        end
      end
    end

  assign sel_1_1330 = (s_513 == 1'b0 ? sel_1_1326 :
              tmp_577);

  assign sel_4054 = 32'sd0;

  assign sel_4055 = 32'sd0;

  assign sel_4056 = 32'sd0;

  assign sel_4057 = 32'sd0;

  assign sel_4058 = 32'sd0;

  assign sel_4059 = 32'sd0;

  assign sel_4060 = 32'sd0;

  assign sel_4061 = 32'sd0;

  assign sel_4062 = 32'sd0;

  assign sel_4063 = 32'sd0;

  assign sel_4064 = 32'sd0;

  assign sel_4065 = 32'sd0;

  assign sel_4066 = 32'sd0;

  assign sel_4067 = 32'sd0;

  assign s_516 = 32'sd10;

  assign sel_1_1331 = (s_21 == 1'b0 ? sel_4067 :
              s_516);

  assign sel_4068 = 32'sd0;

  assign sel_4069 = 32'sd0;

  assign sel_4070 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1331, sel_4054, sel_4055, sel_4056, sel_4057, sel_4058,
       sel_4059, sel_4060, sel_4061, sel_4062, sel_4063, sel_4064, sel_4065,
       sel_4066, sel_4068, sel_4069, sel_4070) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4456_sel_1 = sel_4069;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4456_sel_1 = sel_4068;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4456_sel_1 = sel_1_1331;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4456_sel_1 = sel_4066;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4456_sel_1 = sel_4065;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4456_sel_1 = sel_4064;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4456_sel_1 = sel_4063;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4456_sel_1 = sel_4062;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4456_sel_1 = sel_4061;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4456_sel_1 = sel_4060;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4456_sel_1 = sel_4059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4456_sel_1 = sel_4058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4456_sel_1 = sel_4057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4456_sel_1 = sel_4056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4456_sel_1 = sel_4055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4456_sel_1 = sel_4054;
        end
      default :
        begin
          p4456_sel_1 = sel_4070;
        end
    endcase
    sel_1_1332 = p4456_sel_1;
  end

  assign tmp_578 = functionOutput_18[sel_1_1332];

  always @(posedge clk)
    begin : rd_487_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_79 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_79 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_4071 = 32'sd0;

  assign sel_4072 = 32'sd0;

  assign sel_4073 = 32'sd0;

  assign sel_4074 = 32'sd0;

  assign sel_4075 = 32'sd0;

  assign sel_4076 = 32'sd0;

  assign sel_4077 = 32'sd0;

  assign sel_4078 = 32'sd0;

  assign sel_4079 = 32'sd0;

  assign sel_4080 = 32'sd0;

  assign sel_4081 = 32'sd0;

  assign sel_4082 = 32'sd0;

  assign sel_4083 = 32'sd0;

  always @(posedge clk)
    begin : rd_488_process
      if (rst == 1'b1) begin
        s_517 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_517 <= s_12;
        end
      end
    end

  assign sel_4084 = 32'sd0;

  assign sel_4085 = 32'sd0;

  assign sel_4086 = 32'sd0;

  assign s_518 = 32'sd10;

  assign sel_1_1333 = (tmp_4 == 1'b0 ? sel_4086 :
              s_518);

  assign sel_4087 = 32'sd0;

  assign sel_1_1334 = (tmp_6 == 1'b0 ? sel_1_1333 :
              sel_4087);

  assign sel_4088 = 32'sd0;

  assign sel_1_1335 = (tmp_8 == 1'b0 ? sel_1_1334 :
              sel_4088);

  assign sel_4089 = 32'sd0;

  assign sel_1_1336 = (tmp_10 == 1'b0 ? sel_1_1335 :
              sel_4089);

  assign sel_4090 = 32'sd0;

  assign sel_1_1337 = (tmp_12 == 1'b0 ? sel_1_1336 :
              sel_4090);

  assign sel_4091 = 32'sd0;

  assign sel_1_1338 = (tmp_14 == 1'b0 ? sel_1_1337 :
              sel_4091);

  assign sel_4092 = 32'sd0;

  assign sel_1_1339 = (tmp_16 == 1'b0 ? sel_1_1338 :
              sel_4092);

  assign sel_4093 = 32'sd0;

  assign sel_1_1340 = (tmp_18 == 1'b0 ? sel_1_1339 :
              sel_4093);

  assign sel_1_1341 = (s_10 == 1'b0 ? sel_4085 :
              sel_1_1340);

  assign sel_1_1342 = (s_11 == 1'b0 ? sel_4084 :
              sel_1_1341);

  always @(posedge clk)
    begin : rd_489_process
      if (rst == 1'b1) begin
        sel_1_1343 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_1343 <= sel_1_1342;
        end
      end
    end

  assign sel_4094 = 32'sd0;

  assign sel_4095 = 32'sd0;

  assign sel_1_1344 = (s_517 == 1'b0 ? sel_1_1343 :
              sel_4095);

  assign sel_4096 = 32'sd0;

  always @(posedge clk)
    begin : rd_501_process
      if (rst == 1'b1) begin
        tmp_579 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_579 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_502_process
      if (rst == 1'b1) begin
        for(rd_502_t_1 = 32'sd0; rd_502_t_1 <= 32'sd11; rd_502_t_1 = rd_502_t_1 + 32'sd1) begin
          rd_502_reg[rd_502_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_502_t_0_1 = 32'sd0; rd_502_t_0_1 <= 32'sd11; rd_502_t_0_1 = rd_502_t_0_1 + 32'sd1) begin
            rd_502_reg[rd_502_t_0_1] <= rd_502_reg_next[rd_502_t_0_1];
          end
        end
      end
    end
  genvar t_0_0101;
  generate
    for(t_0_0101 = 32'sd0; t_0_0101 <= 32'sd11; t_0_0101 = t_0_0101 + 32'sd1) begin:rd_502_reg_next_gen
      assign functionOutput_37[t_0_0101] = rd_502_reg[t_0_0101];
      assign rd_502_reg_next[t_0_0101] = functionOutput_19[t_0_0101];
    end
  endgenerate

  assign sel_4097 = 32'sd0;

  always @(is_SPI_MNGR_79, sel_1_1344, sel_4071, sel_4072, sel_4073, sel_4074, sel_4075,
       sel_4076, sel_4077, sel_4078, sel_4079, sel_4080, sel_4081, sel_4082,
       sel_4083, sel_4094, sel_4096, sel_4097) begin
    case ( is_SPI_MNGR_79)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2841_sel_1 = sel_4096;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2841_sel_1 = sel_1_1344;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2841_sel_1 = sel_4094;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2841_sel_1 = sel_4083;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2841_sel_1 = sel_4082;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2841_sel_1 = sel_4081;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2841_sel_1 = sel_4080;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2841_sel_1 = sel_4079;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2841_sel_1 = sel_4078;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2841_sel_1 = sel_4077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2841_sel_1 = sel_4076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2841_sel_1 = sel_4075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2841_sel_1 = sel_4074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2841_sel_1 = sel_4073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2841_sel_1 = sel_4072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2841_sel_1 = sel_4071;
        end
      default :
        begin
          p2841_sel_1 = sel_4097;
        end
    endcase
    sel_1_1345 = p2841_sel_1;
  end

  assign tmp_580 = functionOutput_37[sel_1_1345];

  assign sel_4098 = 32'sd0;

  assign sel_4099 = 32'sd0;

  assign sel_4100 = 32'sd0;

  assign sel_4101 = 32'sd0;

  assign sel_4102 = 32'sd0;

  assign sel_4103 = 32'sd0;

  assign sel_4104 = 32'sd0;

  assign sel_4105 = 32'sd0;

  assign sel_4106 = 32'sd0;

  assign sel_4107 = 32'sd0;

  assign sel_4108 = 32'sd0;

  assign sel_4109 = 32'sd0;

  assign sel_4110 = 32'sd0;

  assign sel_4111 = 32'sd0;

  assign sel_4112 = 32'sd0;

  assign sel_4113 = 32'sd0;

  assign sel_4114 = 32'sd0;

  assign s_519 = 32'sd10;

  assign sel_1_1346 = (tmp_6 == 1'b0 ? sel_4114 :
              s_519);

  assign sel_4115 = 32'sd0;

  assign sel_1_1347 = (tmp_8 == 1'b0 ? sel_1_1346 :
              sel_4115);

  assign sel_4116 = 32'sd0;

  assign sel_1_1348 = (tmp_10 == 1'b0 ? sel_1_1347 :
              sel_4116);

  assign sel_4117 = 32'sd0;

  assign sel_1_1349 = (tmp_12 == 1'b0 ? sel_1_1348 :
              sel_4117);

  assign sel_4118 = 32'sd0;

  assign sel_1_1350 = (tmp_14 == 1'b0 ? sel_1_1349 :
              sel_4118);

  assign sel_4119 = 32'sd0;

  assign sel_1_1351 = (tmp_16 == 1'b0 ? sel_1_1350 :
              sel_4119);

  assign sel_4120 = 32'sd0;

  assign sel_1_1352 = (tmp_18 == 1'b0 ? sel_1_1351 :
              sel_4120);

  assign sel_1_1353 = (s_10 == 1'b0 ? sel_4113 :
              sel_1_1352);

  assign sel_1_1354 = (s_11 == 1'b0 ? sel_4112 :
              sel_1_1353);

  assign sel_4121 = 32'sd0;

  assign sel_1_1355 = (s_12 == 1'b0 ? sel_1_1354 :
              sel_4121);

  assign sel_4122 = 32'sd0;

  assign sel_4123 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1355, sel_4098, sel_4099, sel_4100, sel_4101, sel_4102,
       sel_4103, sel_4104, sel_4105, sel_4106, sel_4107, sel_4108, sel_4109,
       sel_4110, sel_4111, sel_4122, sel_4123) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2537_sel_1 = sel_4122;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2537_sel_1 = sel_1_1355;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2537_sel_1 = sel_4111;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2537_sel_1 = sel_4110;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2537_sel_1 = sel_4109;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2537_sel_1 = sel_4108;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2537_sel_1 = sel_4107;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2537_sel_1 = sel_4106;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2537_sel_1 = sel_4105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2537_sel_1 = sel_4104;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2537_sel_1 = sel_4103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2537_sel_1 = sel_4102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2537_sel_1 = sel_4101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2537_sel_1 = sel_4100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2537_sel_1 = sel_4099;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2537_sel_1 = sel_4098;
        end
      default :
        begin
          p2537_sel_1 = sel_4123;
        end
    endcase
    sel_1_1356 = p2537_sel_1;
  end

  assign tmp_581 = functionOutput_21[sel_1_1356];

  always @(posedge clk)
    begin : rd_500_process
      if (rst == 1'b1) begin
        tmp_582 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_582 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_486_process
      if (rst == 1'b1) begin
        tmp_583 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_583 <= tmp_581;
        end
      end
    end

  assign sel_1_1357 = (tmp_579 == 1'b0 ? tmp_580 :
              tmp_583);

  assign sel_4124 = 32'sd0;

  assign sel_4125 = 32'sd0;

  assign sel_4126 = 32'sd0;

  assign sel_4127 = 32'sd0;

  assign sel_4128 = 32'sd0;

  assign sel_4129 = 32'sd0;

  assign sel_4130 = 32'sd0;

  assign sel_4131 = 32'sd0;

  assign sel_4132 = 32'sd0;

  assign sel_4133 = 32'sd0;

  assign sel_4134 = 32'sd0;

  assign sel_4135 = 32'sd0;

  assign sel_4136 = 32'sd0;

  assign sel_4137 = 32'sd0;

  assign sel_4138 = 32'sd0;

  assign sel_4139 = 32'sd0;

  assign sel_4140 = 32'sd0;

  assign s_520 = 32'sd10;

  assign sel_1_1358 = (tmp_8 == 1'b0 ? sel_4140 :
              s_520);

  assign sel_4141 = 32'sd0;

  assign sel_1_1359 = (tmp_10 == 1'b0 ? sel_1_1358 :
              sel_4141);

  assign sel_4142 = 32'sd0;

  assign sel_1_1360 = (tmp_12 == 1'b0 ? sel_1_1359 :
              sel_4142);

  assign sel_4143 = 32'sd0;

  assign sel_1_1361 = (tmp_14 == 1'b0 ? sel_1_1360 :
              sel_4143);

  assign sel_4144 = 32'sd0;

  assign sel_1_1362 = (tmp_16 == 1'b0 ? sel_1_1361 :
              sel_4144);

  assign sel_4145 = 32'sd0;

  assign sel_1_1363 = (tmp_18 == 1'b0 ? sel_1_1362 :
              sel_4145);

  assign sel_1_1364 = (s_10 == 1'b0 ? sel_4139 :
              sel_1_1363);

  assign sel_1_1365 = (s_11 == 1'b0 ? sel_4138 :
              sel_1_1364);

  assign sel_4146 = 32'sd0;

  assign sel_1_1366 = (s_12 == 1'b0 ? sel_1_1365 :
              sel_4146);

  assign sel_4147 = 32'sd0;

  assign sel_4148 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1366, sel_4124, sel_4125, sel_4126, sel_4127, sel_4128,
       sel_4129, sel_4130, sel_4131, sel_4132, sel_4133, sel_4134, sel_4135,
       sel_4136, sel_4137, sel_4147, sel_4148) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2575_sel_1 = sel_4147;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2575_sel_1 = sel_1_1366;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2575_sel_1 = sel_4137;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2575_sel_1 = sel_4136;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2575_sel_1 = sel_4135;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2575_sel_1 = sel_4134;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2575_sel_1 = sel_4133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2575_sel_1 = sel_4132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2575_sel_1 = sel_4131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2575_sel_1 = sel_4130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2575_sel_1 = sel_4129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2575_sel_1 = sel_4128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2575_sel_1 = sel_4127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2575_sel_1 = sel_4126;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2575_sel_1 = sel_4125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2575_sel_1 = sel_4124;
        end
      default :
        begin
          p2575_sel_1 = sel_4148;
        end
    endcase
    sel_1_1367 = p2575_sel_1;
  end

  assign tmp_584 = functionOutput_22[sel_1_1367];

  always @(posedge clk)
    begin : rd_499_process
      if (rst == 1'b1) begin
        tmp_585 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_585 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_485_process
      if (rst == 1'b1) begin
        tmp_586 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_586 <= tmp_584;
        end
      end
    end

  assign sel_1_1368 = (tmp_582 == 1'b0 ? sel_1_1357 :
              tmp_586);

  assign sel_4149 = 32'sd0;

  assign sel_4150 = 32'sd0;

  assign sel_4151 = 32'sd0;

  assign sel_4152 = 32'sd0;

  assign sel_4153 = 32'sd0;

  assign sel_4154 = 32'sd0;

  assign sel_4155 = 32'sd0;

  assign sel_4156 = 32'sd0;

  assign sel_4157 = 32'sd0;

  assign sel_4158 = 32'sd0;

  assign sel_4159 = 32'sd0;

  assign sel_4160 = 32'sd0;

  assign sel_4161 = 32'sd0;

  assign sel_4162 = 32'sd0;

  assign sel_4163 = 32'sd0;

  assign sel_4164 = 32'sd0;

  assign sel_4165 = 32'sd0;

  assign s_521 = 32'sd10;

  assign sel_1_1369 = (tmp_10 == 1'b0 ? sel_4165 :
              s_521);

  assign sel_4166 = 32'sd0;

  assign sel_1_1370 = (tmp_12 == 1'b0 ? sel_1_1369 :
              sel_4166);

  assign sel_4167 = 32'sd0;

  assign sel_1_1371 = (tmp_14 == 1'b0 ? sel_1_1370 :
              sel_4167);

  assign sel_4168 = 32'sd0;

  assign sel_1_1372 = (tmp_16 == 1'b0 ? sel_1_1371 :
              sel_4168);

  assign sel_4169 = 32'sd0;

  assign sel_1_1373 = (tmp_18 == 1'b0 ? sel_1_1372 :
              sel_4169);

  assign sel_1_1374 = (s_10 == 1'b0 ? sel_4164 :
              sel_1_1373);

  assign sel_1_1375 = (s_11 == 1'b0 ? sel_4163 :
              sel_1_1374);

  assign sel_4170 = 32'sd0;

  assign sel_1_1376 = (s_12 == 1'b0 ? sel_1_1375 :
              sel_4170);

  assign sel_4171 = 32'sd0;

  assign sel_4172 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1376, sel_4149, sel_4150, sel_4151, sel_4152, sel_4153,
       sel_4154, sel_4155, sel_4156, sel_4157, sel_4158, sel_4159, sel_4160,
       sel_4161, sel_4162, sel_4171, sel_4172) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2556_sel_1 = sel_4171;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2556_sel_1 = sel_1_1376;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2556_sel_1 = sel_4162;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2556_sel_1 = sel_4161;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2556_sel_1 = sel_4160;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2556_sel_1 = sel_4159;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2556_sel_1 = sel_4158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2556_sel_1 = sel_4157;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2556_sel_1 = sel_4156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2556_sel_1 = sel_4155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2556_sel_1 = sel_4154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2556_sel_1 = sel_4153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2556_sel_1 = sel_4152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2556_sel_1 = sel_4151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2556_sel_1 = sel_4150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2556_sel_1 = sel_4149;
        end
      default :
        begin
          p2556_sel_1 = sel_4172;
        end
    endcase
    sel_1_1377 = p2556_sel_1;
  end

  assign tmp_587 = functionOutput_23[sel_1_1377];

  always @(posedge clk)
    begin : rd_498_process
      if (rst == 1'b1) begin
        tmp_588 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_588 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_484_process
      if (rst == 1'b1) begin
        tmp_589 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_589 <= tmp_587;
        end
      end
    end

  assign sel_1_1378 = (tmp_585 == 1'b0 ? sel_1_1368 :
              tmp_589);

  assign sel_4173 = 32'sd0;

  assign sel_4174 = 32'sd0;

  assign sel_4175 = 32'sd0;

  assign sel_4176 = 32'sd0;

  assign sel_4177 = 32'sd0;

  assign sel_4178 = 32'sd0;

  assign sel_4179 = 32'sd0;

  assign sel_4180 = 32'sd0;

  assign sel_4181 = 32'sd0;

  assign sel_4182 = 32'sd0;

  assign sel_4183 = 32'sd0;

  assign sel_4184 = 32'sd0;

  assign sel_4185 = 32'sd0;

  assign sel_4186 = 32'sd0;

  assign sel_4187 = 32'sd0;

  assign sel_4188 = 32'sd0;

  assign sel_4189 = 32'sd0;

  assign s_522 = 32'sd10;

  assign sel_1_1379 = (tmp_12 == 1'b0 ? sel_4189 :
              s_522);

  assign sel_4190 = 32'sd0;

  assign sel_1_1380 = (tmp_14 == 1'b0 ? sel_1_1379 :
              sel_4190);

  assign sel_4191 = 32'sd0;

  assign sel_1_1381 = (tmp_16 == 1'b0 ? sel_1_1380 :
              sel_4191);

  assign sel_4192 = 32'sd0;

  assign sel_1_1382 = (tmp_18 == 1'b0 ? sel_1_1381 :
              sel_4192);

  assign sel_1_1383 = (s_10 == 1'b0 ? sel_4188 :
              sel_1_1382);

  assign sel_1_1384 = (s_11 == 1'b0 ? sel_4187 :
              sel_1_1383);

  assign sel_4193 = 32'sd0;

  assign sel_1_1385 = (s_12 == 1'b0 ? sel_1_1384 :
              sel_4193);

  assign sel_4194 = 32'sd0;

  assign sel_4195 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1385, sel_4173, sel_4174, sel_4175, sel_4176, sel_4177,
       sel_4178, sel_4179, sel_4180, sel_4181, sel_4182, sel_4183, sel_4184,
       sel_4185, sel_4186, sel_4194, sel_4195) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1663_sel_1 = sel_4194;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1663_sel_1 = sel_1_1385;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1663_sel_1 = sel_4186;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1663_sel_1 = sel_4185;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1663_sel_1 = sel_4184;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1663_sel_1 = sel_4183;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1663_sel_1 = sel_4182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1663_sel_1 = sel_4181;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1663_sel_1 = sel_4180;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1663_sel_1 = sel_4179;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1663_sel_1 = sel_4178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1663_sel_1 = sel_4177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1663_sel_1 = sel_4176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1663_sel_1 = sel_4175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1663_sel_1 = sel_4174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1663_sel_1 = sel_4173;
        end
      default :
        begin
          p1663_sel_1 = sel_4195;
        end
    endcase
    sel_1_1386 = p1663_sel_1;
  end

  assign tmp_590 = functionOutput_24[sel_1_1386];

  always @(posedge clk)
    begin : rd_497_process
      if (rst == 1'b1) begin
        tmp_591 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_591 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_483_process
      if (rst == 1'b1) begin
        tmp_592 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_592 <= tmp_590;
        end
      end
    end

  assign sel_1_1387 = (tmp_588 == 1'b0 ? sel_1_1378 :
              tmp_592);

  assign sel_4196 = 32'sd0;

  assign sel_4197 = 32'sd0;

  assign sel_4198 = 32'sd0;

  assign sel_4199 = 32'sd0;

  assign sel_4200 = 32'sd0;

  assign sel_4201 = 32'sd0;

  assign sel_4202 = 32'sd0;

  assign sel_4203 = 32'sd0;

  assign sel_4204 = 32'sd0;

  assign sel_4205 = 32'sd0;

  assign sel_4206 = 32'sd0;

  assign sel_4207 = 32'sd0;

  assign sel_4208 = 32'sd0;

  assign sel_4209 = 32'sd0;

  assign sel_4210 = 32'sd0;

  assign sel_4211 = 32'sd0;

  assign sel_4212 = 32'sd0;

  assign s_523 = 32'sd10;

  assign sel_1_1388 = (tmp_14 == 1'b0 ? sel_4212 :
              s_523);

  assign sel_4213 = 32'sd0;

  assign sel_1_1389 = (tmp_16 == 1'b0 ? sel_1_1388 :
              sel_4213);

  assign sel_4214 = 32'sd0;

  assign sel_1_1390 = (tmp_18 == 1'b0 ? sel_1_1389 :
              sel_4214);

  assign sel_1_1391 = (s_10 == 1'b0 ? sel_4211 :
              sel_1_1390);

  assign sel_1_1392 = (s_11 == 1'b0 ? sel_4210 :
              sel_1_1391);

  assign sel_4215 = 32'sd0;

  assign sel_1_1393 = (s_12 == 1'b0 ? sel_1_1392 :
              sel_4215);

  assign sel_4216 = 32'sd0;

  assign sel_4217 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1393, sel_4196, sel_4197, sel_4198, sel_4199, sel_4200,
       sel_4201, sel_4202, sel_4203, sel_4204, sel_4205, sel_4206, sel_4207,
       sel_4208, sel_4209, sel_4216, sel_4217) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3107_sel_1 = sel_4216;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3107_sel_1 = sel_1_1393;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3107_sel_1 = sel_4209;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3107_sel_1 = sel_4208;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3107_sel_1 = sel_4207;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3107_sel_1 = sel_4206;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3107_sel_1 = sel_4205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3107_sel_1 = sel_4204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3107_sel_1 = sel_4203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3107_sel_1 = sel_4202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3107_sel_1 = sel_4201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3107_sel_1 = sel_4200;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3107_sel_1 = sel_4199;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3107_sel_1 = sel_4198;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3107_sel_1 = sel_4197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3107_sel_1 = sel_4196;
        end
      default :
        begin
          p3107_sel_1 = sel_4217;
        end
    endcase
    sel_1_1394 = p3107_sel_1;
  end

  assign tmp_593 = functionOutput_25[sel_1_1394];

  always @(posedge clk)
    begin : rd_496_process
      if (rst == 1'b1) begin
        tmp_594 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_594 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_482_process
      if (rst == 1'b1) begin
        tmp_595 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_595 <= tmp_593;
        end
      end
    end

  assign sel_1_1395 = (tmp_591 == 1'b0 ? sel_1_1387 :
              tmp_595);

  assign sel_4218 = 32'sd0;

  assign sel_4219 = 32'sd0;

  assign sel_4220 = 32'sd0;

  assign sel_4221 = 32'sd0;

  assign sel_4222 = 32'sd0;

  assign sel_4223 = 32'sd0;

  assign sel_4224 = 32'sd0;

  assign sel_4225 = 32'sd0;

  assign sel_4226 = 32'sd0;

  assign sel_4227 = 32'sd0;

  assign sel_4228 = 32'sd0;

  assign sel_4229 = 32'sd0;

  assign sel_4230 = 32'sd0;

  assign sel_4231 = 32'sd0;

  assign sel_4232 = 32'sd0;

  assign sel_4233 = 32'sd0;

  assign sel_4234 = 32'sd0;

  assign s_524 = 32'sd10;

  assign sel_1_1396 = (tmp_16 == 1'b0 ? sel_4234 :
              s_524);

  assign sel_4235 = 32'sd0;

  assign sel_1_1397 = (tmp_18 == 1'b0 ? sel_1_1396 :
              sel_4235);

  assign sel_1_1398 = (s_10 == 1'b0 ? sel_4233 :
              sel_1_1397);

  assign sel_1_1399 = (s_11 == 1'b0 ? sel_4232 :
              sel_1_1398);

  assign sel_4236 = 32'sd0;

  assign sel_1_1400 = (s_12 == 1'b0 ? sel_1_1399 :
              sel_4236);

  assign sel_4237 = 32'sd0;

  assign sel_4238 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1400, sel_4218, sel_4219, sel_4220, sel_4221, sel_4222,
       sel_4223, sel_4224, sel_4225, sel_4226, sel_4227, sel_4228, sel_4229,
       sel_4230, sel_4231, sel_4237, sel_4238) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2157_sel_1 = sel_4237;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2157_sel_1 = sel_1_1400;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2157_sel_1 = sel_4231;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2157_sel_1 = sel_4230;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2157_sel_1 = sel_4229;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2157_sel_1 = sel_4228;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2157_sel_1 = sel_4227;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2157_sel_1 = sel_4226;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2157_sel_1 = sel_4225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2157_sel_1 = sel_4224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2157_sel_1 = sel_4223;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2157_sel_1 = sel_4222;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2157_sel_1 = sel_4221;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2157_sel_1 = sel_4220;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2157_sel_1 = sel_4219;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2157_sel_1 = sel_4218;
        end
      default :
        begin
          p2157_sel_1 = sel_4238;
        end
    endcase
    sel_1_1401 = p2157_sel_1;
  end

  assign tmp_596 = functionOutput_26[sel_1_1401];

  always @(posedge clk)
    begin : rd_495_process
      if (rst == 1'b1) begin
        tmp_597 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_597 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_481_process
      if (rst == 1'b1) begin
        tmp_598 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_598 <= tmp_596;
        end
      end
    end

  assign sel_1_1402 = (tmp_594 == 1'b0 ? sel_1_1395 :
              tmp_598);

  assign sel_4239 = 32'sd0;

  assign sel_4240 = 32'sd0;

  assign sel_4241 = 32'sd0;

  assign sel_4242 = 32'sd0;

  assign sel_4243 = 32'sd0;

  assign sel_4244 = 32'sd0;

  assign sel_4245 = 32'sd0;

  assign sel_4246 = 32'sd0;

  assign sel_4247 = 32'sd0;

  assign sel_4248 = 32'sd0;

  assign sel_4249 = 32'sd0;

  assign sel_4250 = 32'sd0;

  assign sel_4251 = 32'sd0;

  assign sel_4252 = 32'sd0;

  assign sel_4253 = 32'sd0;

  assign sel_4254 = 32'sd0;

  assign sel_4255 = 32'sd0;

  assign s_525 = 32'sd10;

  assign sel_1_1403 = (tmp_18 == 1'b0 ? sel_4255 :
              s_525);

  assign sel_1_1404 = (s_10 == 1'b0 ? sel_4254 :
              sel_1_1403);

  assign sel_1_1405 = (s_11 == 1'b0 ? sel_4253 :
              sel_1_1404);

  assign sel_4256 = 32'sd0;

  assign sel_1_1406 = (s_12 == 1'b0 ? sel_1_1405 :
              sel_4256);

  assign sel_4257 = 32'sd0;

  assign sel_4258 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1406, sel_4239, sel_4240, sel_4241, sel_4242, sel_4243,
       sel_4244, sel_4245, sel_4246, sel_4247, sel_4248, sel_4249, sel_4250,
       sel_4251, sel_4252, sel_4257, sel_4258) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2233_sel_1 = sel_4257;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2233_sel_1 = sel_1_1406;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2233_sel_1 = sel_4252;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2233_sel_1 = sel_4251;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2233_sel_1 = sel_4250;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2233_sel_1 = sel_4249;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2233_sel_1 = sel_4248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2233_sel_1 = sel_4247;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2233_sel_1 = sel_4246;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2233_sel_1 = sel_4245;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2233_sel_1 = sel_4244;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2233_sel_1 = sel_4243;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2233_sel_1 = sel_4242;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2233_sel_1 = sel_4241;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2233_sel_1 = sel_4240;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2233_sel_1 = sel_4239;
        end
      default :
        begin
          p2233_sel_1 = sel_4258;
        end
    endcase
    sel_1_1407 = p2233_sel_1;
  end

  assign tmp_599 = functionOutput_27[sel_1_1407];

  assign sel_4259 = 8'd0;

  always @(posedge clk)
    begin : rd_476_process
      if (rst == 1'b1) begin
        tmp_600 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_600 <= tmp_578;
        end
      end
    end

  assign sel_1_1408 = (s_515 == 1'b0 ? sel_1_1330 :
              tmp_600);

  always @(posedge clk)
    begin : rd_480_process
      if (rst == 1'b1) begin
        tmp_601 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_601 <= tmp_599;
        end
      end
    end

  assign sel_1_1409 = (tmp_597 == 1'b0 ? sel_1_1402 :
              tmp_601);

  assign sel_4260 = 8'd0;

  always @(posedge clk)
    begin : rd_503_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_80 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_80 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_4261 = 1'b0;

  assign sel_4262 = 1'b0;

  assign sel_4263 = 1'b0;

  assign sel_4264 = 1'b0;

  assign sel_4265 = 1'b0;

  assign sel_4266 = 1'b0;

  assign sel_4267 = 1'b0;

  assign sel_4268 = 1'b0;

  assign sel_4269 = 1'b0;

  assign sel_4270 = 1'b0;

  assign sel_4271 = 1'b0;

  assign sel_4272 = 1'b0;

  assign sel_4273 = 1'b0;

  assign sel_4274 = 1'b0;

  assign s_526 = 1'b1;

  assign sel_2_215 = (s_14 == 1'b0 ? sel_4274 :
              s_526);

  assign s_527 = 1'b1;

  assign sel_2_216 = (s_15 == 1'b0 ? sel_2_215 :
              s_527);

  assign s_528 = 1'b1;

  assign sel_2_217 = (s_16 == 1'b0 ? sel_2_216 :
              s_528);

  assign s_529 = 1'b1;

  assign sel_2_218 = (s_17 == 1'b0 ? sel_2_217 :
              s_529);

  assign s_530 = 1'b1;

  assign sel_2_219 = (s_18 == 1'b0 ? sel_2_218 :
              s_530);

  assign s_531 = 1'b1;

  assign sel_2_220 = (s_19 == 1'b0 ? sel_2_219 :
              s_531);

  assign s_532 = 1'b1;

  assign sel_2_221 = (s_20 == 1'b0 ? sel_2_220 :
              s_532);

  assign s_533 = 1'b1;

  assign sel_2_222 = (s_21 == 1'b0 ? sel_2_221 :
              s_533);

  always @(posedge clk)
    begin : rd_505_process
      if (rst == 1'b1) begin
        s_534 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_534 <= s_12;
        end
      end
    end

  assign sel_4275 = 1'b0;

  assign sel_4276 = 1'b0;

  assign sel_4277 = 1'b0;

  assign s_535 = 1'b1;

  assign sel_2_223 = (tmp_4 == 1'b0 ? sel_4277 :
              s_535);

  assign s_536 = 1'b1;

  assign sel_2_224 = (tmp_6 == 1'b0 ? sel_2_223 :
              s_536);

  assign s_537 = 1'b1;

  assign sel_2_225 = (tmp_8 == 1'b0 ? sel_2_224 :
              s_537);

  assign s_538 = 1'b1;

  assign sel_2_226 = (tmp_10 == 1'b0 ? sel_2_225 :
              s_538);

  assign s_539 = 1'b1;

  assign sel_2_227 = (tmp_12 == 1'b0 ? sel_2_226 :
              s_539);

  assign s_540 = 1'b1;

  assign sel_2_228 = (tmp_14 == 1'b0 ? sel_2_227 :
              s_540);

  assign s_541 = 1'b1;

  assign sel_2_229 = (tmp_16 == 1'b0 ? sel_2_228 :
              s_541);

  assign s_542 = 1'b1;

  assign sel_2_230 = (tmp_18 == 1'b0 ? sel_2_229 :
              s_542);

  assign sel_2_231 = (s_10 == 1'b0 ? sel_4276 :
              sel_2_230);

  assign sel_2_232 = (s_11 == 1'b0 ? sel_4275 :
              sel_2_231);

  always @(posedge clk)
    begin : rd_506_process
      if (rst == 1'b1) begin
        sel_2_233 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_233 <= sel_2_232;
        end
      end
    end

  always @(posedge clk)
    begin : rd_504_process
      if (rst == 1'b1) begin
        sel_2_234 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_234 <= sel_2_222;
        end
      end
    end

  assign sel_4278 = 1'b0;

  assign sel_2_235 = (s_534 == 1'b0 ? sel_2_233 :
              sel_4278);

  assign sel_4279 = 1'b0;

  always @(posedge clk)
    begin : rd_507_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_81 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_81 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_4280 = 8'd0;

  assign sel_4281 = 8'd0;

  assign sel_4282 = 8'd0;

  assign sel_4283 = 8'd0;

  assign sel_4284 = 8'd0;

  assign sel_4285 = 8'd0;

  assign sel_4286 = 8'd0;

  assign sel_4287 = 8'd0;

  assign sel_4288 = 8'd0;

  assign sel_4289 = 8'd0;

  assign sel_4290 = 8'd0;

  assign sel_4291 = 8'd0;

  always @(posedge clk)
    begin : rd_525_process
      if (rst == 1'b1) begin
        s_543 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_543 <= s_18;
        end
      end
    end

  assign sel_4292 = 32'sd0;

  assign sel_4293 = 32'sd0;

  assign sel_4294 = 32'sd0;

  assign sel_4295 = 32'sd0;

  assign sel_4296 = 32'sd0;

  assign sel_4297 = 32'sd0;

  assign sel_4298 = 32'sd0;

  assign sel_4299 = 32'sd0;

  assign sel_4300 = 32'sd0;

  assign sel_4301 = 32'sd0;

  assign sel_4302 = 32'sd0;

  assign sel_4303 = 32'sd0;

  assign sel_4304 = 32'sd0;

  assign sel_4305 = 32'sd0;

  assign s_544 = 32'sd11;

  assign sel_1_1410 = (s_14 == 1'b0 ? sel_4305 :
              s_544);

  assign sel_4306 = 32'sd0;

  assign sel_1_1411 = (s_15 == 1'b0 ? sel_1_1410 :
              sel_4306);

  assign sel_4307 = 32'sd0;

  assign sel_1_1412 = (s_16 == 1'b0 ? sel_1_1411 :
              sel_4307);

  assign sel_4308 = 32'sd0;

  assign sel_1_1413 = (s_17 == 1'b0 ? sel_1_1412 :
              sel_4308);

  assign sel_4309 = 32'sd0;

  assign sel_1_1414 = (s_18 == 1'b0 ? sel_1_1413 :
              sel_4309);

  assign sel_4310 = 32'sd0;

  assign sel_1_1415 = (s_19 == 1'b0 ? sel_1_1414 :
              sel_4310);

  assign sel_4311 = 32'sd0;

  assign sel_1_1416 = (s_20 == 1'b0 ? sel_1_1415 :
              sel_4311);

  assign sel_4312 = 32'sd0;

  assign sel_1_1417 = (s_21 == 1'b0 ? sel_1_1416 :
              sel_4312);

  assign sel_4313 = 32'sd0;

  assign sel_4314 = 32'sd0;

  assign sel_4315 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1417, sel_4292, sel_4293, sel_4294, sel_4295, sel_4296,
       sel_4297, sel_4298, sel_4299, sel_4300, sel_4301, sel_4302, sel_4303,
       sel_4304, sel_4313, sel_4314, sel_4315) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3430_sel_1 = sel_4314;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3430_sel_1 = sel_4313;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3430_sel_1 = sel_1_1417;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3430_sel_1 = sel_4304;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3430_sel_1 = sel_4303;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3430_sel_1 = sel_4302;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3430_sel_1 = sel_4301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3430_sel_1 = sel_4300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3430_sel_1 = sel_4299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3430_sel_1 = sel_4298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3430_sel_1 = sel_4297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3430_sel_1 = sel_4296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3430_sel_1 = sel_4295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3430_sel_1 = sel_4294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3430_sel_1 = sel_4293;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3430_sel_1 = sel_4292;
        end
      default :
        begin
          p3430_sel_1 = sel_4315;
        end
    endcase
    sel_1_1418 = p3430_sel_1;
  end

  assign tmp_602 = functionOutput[sel_1_1418];

  assign sel_4316 = 32'sd0;

  assign sel_4317 = 32'sd0;

  assign sel_4318 = 32'sd0;

  assign sel_4319 = 32'sd0;

  assign sel_4320 = 32'sd0;

  assign sel_4321 = 32'sd0;

  assign sel_4322 = 32'sd0;

  assign sel_4323 = 32'sd0;

  assign sel_4324 = 32'sd0;

  assign sel_4325 = 32'sd0;

  assign sel_4326 = 32'sd0;

  assign sel_4327 = 32'sd0;

  assign sel_4328 = 32'sd0;

  assign sel_4329 = 32'sd0;

  assign s_545 = 32'sd11;

  assign sel_1_1419 = (s_15 == 1'b0 ? sel_4329 :
              s_545);

  assign sel_4330 = 32'sd0;

  assign sel_1_1420 = (s_16 == 1'b0 ? sel_1_1419 :
              sel_4330);

  assign sel_4331 = 32'sd0;

  assign sel_1_1421 = (s_17 == 1'b0 ? sel_1_1420 :
              sel_4331);

  assign sel_4332 = 32'sd0;

  assign sel_1_1422 = (s_18 == 1'b0 ? sel_1_1421 :
              sel_4332);

  assign sel_4333 = 32'sd0;

  assign sel_1_1423 = (s_19 == 1'b0 ? sel_1_1422 :
              sel_4333);

  assign sel_4334 = 32'sd0;

  assign sel_1_1424 = (s_20 == 1'b0 ? sel_1_1423 :
              sel_4334);

  assign sel_4335 = 32'sd0;

  assign sel_1_1425 = (s_21 == 1'b0 ? sel_1_1424 :
              sel_4335);

  assign sel_4336 = 32'sd0;

  assign sel_4337 = 32'sd0;

  assign sel_4338 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1425, sel_4316, sel_4317, sel_4318, sel_4319, sel_4320,
       sel_4321, sel_4322, sel_4323, sel_4324, sel_4325, sel_4326, sel_4327,
       sel_4328, sel_4336, sel_4337, sel_4338) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5007_sel_1 = sel_4337;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5007_sel_1 = sel_4336;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5007_sel_1 = sel_1_1425;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5007_sel_1 = sel_4328;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5007_sel_1 = sel_4327;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5007_sel_1 = sel_4326;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5007_sel_1 = sel_4325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5007_sel_1 = sel_4324;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5007_sel_1 = sel_4323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5007_sel_1 = sel_4322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5007_sel_1 = sel_4321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5007_sel_1 = sel_4320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5007_sel_1 = sel_4319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5007_sel_1 = sel_4318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5007_sel_1 = sel_4317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5007_sel_1 = sel_4316;
        end
      default :
        begin
          p5007_sel_1 = sel_4338;
        end
    endcase
    sel_1_1426 = p5007_sel_1;
  end

  assign tmp_603 = functionOutput_12[sel_1_1426];

  assign sel_1_1427 = (s_15 == 1'b0 ? tmp_602 :
              tmp_603);

  assign sel_4339 = 32'sd0;

  assign sel_4340 = 32'sd0;

  assign sel_4341 = 32'sd0;

  assign sel_4342 = 32'sd0;

  assign sel_4343 = 32'sd0;

  assign sel_4344 = 32'sd0;

  assign sel_4345 = 32'sd0;

  assign sel_4346 = 32'sd0;

  assign sel_4347 = 32'sd0;

  assign sel_4348 = 32'sd0;

  assign sel_4349 = 32'sd0;

  assign sel_4350 = 32'sd0;

  assign sel_4351 = 32'sd0;

  assign sel_4352 = 32'sd0;

  assign s_546 = 32'sd11;

  assign sel_1_1428 = (s_16 == 1'b0 ? sel_4352 :
              s_546);

  assign sel_4353 = 32'sd0;

  assign sel_1_1429 = (s_17 == 1'b0 ? sel_1_1428 :
              sel_4353);

  assign sel_4354 = 32'sd0;

  assign sel_1_1430 = (s_18 == 1'b0 ? sel_1_1429 :
              sel_4354);

  assign sel_4355 = 32'sd0;

  assign sel_1_1431 = (s_19 == 1'b0 ? sel_1_1430 :
              sel_4355);

  assign sel_4356 = 32'sd0;

  assign sel_1_1432 = (s_20 == 1'b0 ? sel_1_1431 :
              sel_4356);

  assign sel_4357 = 32'sd0;

  assign sel_1_1433 = (s_21 == 1'b0 ? sel_1_1432 :
              sel_4357);

  assign sel_4358 = 32'sd0;

  assign sel_4359 = 32'sd0;

  assign sel_4360 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1433, sel_4339, sel_4340, sel_4341, sel_4342, sel_4343,
       sel_4344, sel_4345, sel_4346, sel_4347, sel_4348, sel_4349, sel_4350,
       sel_4351, sel_4358, sel_4359, sel_4360) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5121_sel_1 = sel_4359;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5121_sel_1 = sel_4358;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5121_sel_1 = sel_1_1433;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5121_sel_1 = sel_4351;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5121_sel_1 = sel_4350;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5121_sel_1 = sel_4349;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5121_sel_1 = sel_4348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5121_sel_1 = sel_4347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5121_sel_1 = sel_4346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5121_sel_1 = sel_4345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5121_sel_1 = sel_4344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5121_sel_1 = sel_4343;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5121_sel_1 = sel_4342;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5121_sel_1 = sel_4341;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5121_sel_1 = sel_4340;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5121_sel_1 = sel_4339;
        end
      default :
        begin
          p5121_sel_1 = sel_4360;
        end
    endcase
    sel_1_1434 = p5121_sel_1;
  end

  assign tmp_604 = functionOutput_13[sel_1_1434];

  assign sel_1_1435 = (s_16 == 1'b0 ? sel_1_1427 :
              tmp_604);

  assign sel_4361 = 32'sd0;

  assign sel_4362 = 32'sd0;

  assign sel_4363 = 32'sd0;

  assign sel_4364 = 32'sd0;

  assign sel_4365 = 32'sd0;

  assign sel_4366 = 32'sd0;

  assign sel_4367 = 32'sd0;

  assign sel_4368 = 32'sd0;

  assign sel_4369 = 32'sd0;

  assign sel_4370 = 32'sd0;

  assign sel_4371 = 32'sd0;

  assign sel_4372 = 32'sd0;

  assign sel_4373 = 32'sd0;

  assign sel_4374 = 32'sd0;

  assign s_547 = 32'sd11;

  assign sel_1_1436 = (s_17 == 1'b0 ? sel_4374 :
              s_547);

  assign sel_4375 = 32'sd0;

  assign sel_1_1437 = (s_18 == 1'b0 ? sel_1_1436 :
              sel_4375);

  assign sel_4376 = 32'sd0;

  assign sel_1_1438 = (s_19 == 1'b0 ? sel_1_1437 :
              sel_4376);

  assign sel_4377 = 32'sd0;

  assign sel_1_1439 = (s_20 == 1'b0 ? sel_1_1438 :
              sel_4377);

  assign sel_4378 = 32'sd0;

  assign sel_1_1440 = (s_21 == 1'b0 ? sel_1_1439 :
              sel_4378);

  assign sel_4379 = 32'sd0;

  assign sel_4380 = 32'sd0;

  assign sel_4381 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1440, sel_4361, sel_4362, sel_4363, sel_4364, sel_4365,
       sel_4366, sel_4367, sel_4368, sel_4369, sel_4370, sel_4371, sel_4372,
       sel_4373, sel_4379, sel_4380, sel_4381) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3487_sel_1 = sel_4380;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3487_sel_1 = sel_4379;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3487_sel_1 = sel_1_1440;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3487_sel_1 = sel_4373;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3487_sel_1 = sel_4372;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3487_sel_1 = sel_4371;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3487_sel_1 = sel_4370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3487_sel_1 = sel_4369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3487_sel_1 = sel_4368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3487_sel_1 = sel_4367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3487_sel_1 = sel_4366;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3487_sel_1 = sel_4365;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3487_sel_1 = sel_4364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3487_sel_1 = sel_4363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3487_sel_1 = sel_4362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3487_sel_1 = sel_4361;
        end
      default :
        begin
          p3487_sel_1 = sel_4381;
        end
    endcase
    sel_1_1441 = p3487_sel_1;
  end

  assign tmp_605 = functionOutput_14[sel_1_1441];

  assign sel_1_1442 = (s_17 == 1'b0 ? sel_1_1435 :
              tmp_605);

  always @(posedge clk)
    begin : rd_526_process
      if (rst == 1'b1) begin
        sel_1_1443 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          sel_1_1443 <= sel_1_1442;
        end
      end
    end

  assign sel_4382 = 32'sd0;

  assign sel_4383 = 32'sd0;

  assign sel_4384 = 32'sd0;

  assign sel_4385 = 32'sd0;

  assign sel_4386 = 32'sd0;

  assign sel_4387 = 32'sd0;

  assign sel_4388 = 32'sd0;

  assign sel_4389 = 32'sd0;

  assign sel_4390 = 32'sd0;

  assign sel_4391 = 32'sd0;

  assign sel_4392 = 32'sd0;

  assign sel_4393 = 32'sd0;

  assign sel_4394 = 32'sd0;

  assign sel_4395 = 32'sd0;

  assign s_548 = 32'sd11;

  assign sel_1_1444 = (s_18 == 1'b0 ? sel_4395 :
              s_548);

  assign sel_4396 = 32'sd0;

  assign sel_1_1445 = (s_19 == 1'b0 ? sel_1_1444 :
              sel_4396);

  assign sel_4397 = 32'sd0;

  assign sel_1_1446 = (s_20 == 1'b0 ? sel_1_1445 :
              sel_4397);

  assign sel_4398 = 32'sd0;

  assign sel_1_1447 = (s_21 == 1'b0 ? sel_1_1446 :
              sel_4398);

  assign sel_4399 = 32'sd0;

  assign sel_4400 = 32'sd0;

  assign sel_4401 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1447, sel_4382, sel_4383, sel_4384, sel_4385, sel_4386,
       sel_4387, sel_4388, sel_4389, sel_4390, sel_4391, sel_4392, sel_4393,
       sel_4394, sel_4399, sel_4400, sel_4401) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3772_sel_1 = sel_4400;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3772_sel_1 = sel_4399;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3772_sel_1 = sel_1_1447;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3772_sel_1 = sel_4394;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3772_sel_1 = sel_4393;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3772_sel_1 = sel_4392;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3772_sel_1 = sel_4391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3772_sel_1 = sel_4390;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3772_sel_1 = sel_4389;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3772_sel_1 = sel_4388;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3772_sel_1 = sel_4387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3772_sel_1 = sel_4386;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3772_sel_1 = sel_4385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3772_sel_1 = sel_4384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3772_sel_1 = sel_4383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3772_sel_1 = sel_4382;
        end
      default :
        begin
          p3772_sel_1 = sel_4401;
        end
    endcase
    sel_1_1448 = p3772_sel_1;
  end

  assign tmp_606 = functionOutput_15[sel_1_1448];

  always @(posedge clk)
    begin : rd_524_process
      if (rst == 1'b1) begin
        s_549 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_549 <= s_19;
        end
      end
    end

  always @(posedge clk)
    begin : rd_511_process
      if (rst == 1'b1) begin
        tmp_607 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_607 <= tmp_606;
        end
      end
    end

  assign sel_1_1449 = (s_543 == 1'b0 ? sel_1_1443 :
              tmp_607);

  assign sel_4402 = 32'sd0;

  assign sel_4403 = 32'sd0;

  assign sel_4404 = 32'sd0;

  assign sel_4405 = 32'sd0;

  assign sel_4406 = 32'sd0;

  assign sel_4407 = 32'sd0;

  assign sel_4408 = 32'sd0;

  assign sel_4409 = 32'sd0;

  assign sel_4410 = 32'sd0;

  assign sel_4411 = 32'sd0;

  assign sel_4412 = 32'sd0;

  assign sel_4413 = 32'sd0;

  assign sel_4414 = 32'sd0;

  assign sel_4415 = 32'sd0;

  assign s_550 = 32'sd11;

  assign sel_1_1450 = (s_19 == 1'b0 ? sel_4415 :
              s_550);

  assign sel_4416 = 32'sd0;

  assign sel_1_1451 = (s_20 == 1'b0 ? sel_1_1450 :
              sel_4416);

  assign sel_4417 = 32'sd0;

  assign sel_1_1452 = (s_21 == 1'b0 ? sel_1_1451 :
              sel_4417);

  assign sel_4418 = 32'sd0;

  assign sel_4419 = 32'sd0;

  assign sel_4420 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1452, sel_4402, sel_4403, sel_4404, sel_4405, sel_4406,
       sel_4407, sel_4408, sel_4409, sel_4410, sel_4411, sel_4412, sel_4413,
       sel_4414, sel_4418, sel_4419, sel_4420) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4893_sel_1 = sel_4419;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4893_sel_1 = sel_4418;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4893_sel_1 = sel_1_1452;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4893_sel_1 = sel_4414;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4893_sel_1 = sel_4413;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4893_sel_1 = sel_4412;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4893_sel_1 = sel_4411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4893_sel_1 = sel_4410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4893_sel_1 = sel_4409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4893_sel_1 = sel_4408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4893_sel_1 = sel_4407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4893_sel_1 = sel_4406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4893_sel_1 = sel_4405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4893_sel_1 = sel_4404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4893_sel_1 = sel_4403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4893_sel_1 = sel_4402;
        end
      default :
        begin
          p4893_sel_1 = sel_4420;
        end
    endcase
    sel_1_1453 = p4893_sel_1;
  end

  assign tmp_608 = functionOutput_16[sel_1_1453];

  always @(posedge clk)
    begin : rd_523_process
      if (rst == 1'b1) begin
        s_551 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_551 <= s_20;
        end
      end
    end

  always @(posedge clk)
    begin : rd_510_process
      if (rst == 1'b1) begin
        tmp_609 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_609 <= tmp_608;
        end
      end
    end

  assign sel_1_1454 = (s_549 == 1'b0 ? sel_1_1449 :
              tmp_609);

  assign sel_4421 = 32'sd0;

  assign sel_4422 = 32'sd0;

  assign sel_4423 = 32'sd0;

  assign sel_4424 = 32'sd0;

  assign sel_4425 = 32'sd0;

  assign sel_4426 = 32'sd0;

  assign sel_4427 = 32'sd0;

  assign sel_4428 = 32'sd0;

  assign sel_4429 = 32'sd0;

  assign sel_4430 = 32'sd0;

  assign sel_4431 = 32'sd0;

  assign sel_4432 = 32'sd0;

  assign sel_4433 = 32'sd0;

  assign sel_4434 = 32'sd0;

  assign s_552 = 32'sd11;

  assign sel_1_1455 = (s_20 == 1'b0 ? sel_4434 :
              s_552);

  assign sel_4435 = 32'sd0;

  assign sel_1_1456 = (s_21 == 1'b0 ? sel_1_1455 :
              sel_4435);

  assign sel_4436 = 32'sd0;

  assign sel_4437 = 32'sd0;

  assign sel_4438 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1456, sel_4421, sel_4422, sel_4423, sel_4424, sel_4425,
       sel_4426, sel_4427, sel_4428, sel_4429, sel_4430, sel_4431, sel_4432,
       sel_4433, sel_4436, sel_4437, sel_4438) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3620_sel_1 = sel_4437;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3620_sel_1 = sel_4436;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3620_sel_1 = sel_1_1456;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3620_sel_1 = sel_4433;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3620_sel_1 = sel_4432;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3620_sel_1 = sel_4431;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3620_sel_1 = sel_4430;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3620_sel_1 = sel_4429;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3620_sel_1 = sel_4428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3620_sel_1 = sel_4427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3620_sel_1 = sel_4426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3620_sel_1 = sel_4425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3620_sel_1 = sel_4424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3620_sel_1 = sel_4423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3620_sel_1 = sel_4422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3620_sel_1 = sel_4421;
        end
      default :
        begin
          p3620_sel_1 = sel_4438;
        end
    endcase
    sel_1_1457 = p3620_sel_1;
  end

  assign tmp_610 = functionOutput_17[sel_1_1457];

  always @(posedge clk)
    begin : rd_522_process
      if (rst == 1'b1) begin
        s_553 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_553 <= s_21;
        end
      end
    end

  always @(posedge clk)
    begin : rd_509_process
      if (rst == 1'b1) begin
        tmp_611 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_611 <= tmp_610;
        end
      end
    end

  assign sel_1_1458 = (s_551 == 1'b0 ? sel_1_1454 :
              tmp_611);

  assign sel_4439 = 32'sd0;

  assign sel_4440 = 32'sd0;

  assign sel_4441 = 32'sd0;

  assign sel_4442 = 32'sd0;

  assign sel_4443 = 32'sd0;

  assign sel_4444 = 32'sd0;

  assign sel_4445 = 32'sd0;

  assign sel_4446 = 32'sd0;

  assign sel_4447 = 32'sd0;

  assign sel_4448 = 32'sd0;

  assign sel_4449 = 32'sd0;

  assign sel_4450 = 32'sd0;

  assign sel_4451 = 32'sd0;

  assign sel_4452 = 32'sd0;

  assign s_554 = 32'sd11;

  assign sel_1_1459 = (s_21 == 1'b0 ? sel_4452 :
              s_554);

  assign sel_4453 = 32'sd0;

  assign sel_4454 = 32'sd0;

  assign sel_4455 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1459, sel_4439, sel_4440, sel_4441, sel_4442, sel_4443,
       sel_4444, sel_4445, sel_4446, sel_4447, sel_4448, sel_4449, sel_4450,
       sel_4451, sel_4453, sel_4454, sel_4455) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4608_sel_1 = sel_4454;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4608_sel_1 = sel_4453;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4608_sel_1 = sel_1_1459;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4608_sel_1 = sel_4451;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4608_sel_1 = sel_4450;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4608_sel_1 = sel_4449;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4608_sel_1 = sel_4448;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p4608_sel_1 = sel_4447;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p4608_sel_1 = sel_4446;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4608_sel_1 = sel_4445;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4608_sel_1 = sel_4444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4608_sel_1 = sel_4443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4608_sel_1 = sel_4442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4608_sel_1 = sel_4441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4608_sel_1 = sel_4440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4608_sel_1 = sel_4439;
        end
      default :
        begin
          p4608_sel_1 = sel_4455;
        end
    endcase
    sel_1_1460 = p4608_sel_1;
  end

  assign tmp_612 = functionOutput_18[sel_1_1460];

  always @(posedge clk)
    begin : rd_519_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_82 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_82 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_4456 = 32'sd0;

  assign sel_4457 = 32'sd0;

  assign sel_4458 = 32'sd0;

  assign sel_4459 = 32'sd0;

  assign sel_4460 = 32'sd0;

  assign sel_4461 = 32'sd0;

  assign sel_4462 = 32'sd0;

  assign sel_4463 = 32'sd0;

  assign sel_4464 = 32'sd0;

  assign sel_4465 = 32'sd0;

  assign sel_4466 = 32'sd0;

  assign sel_4467 = 32'sd0;

  assign sel_4468 = 32'sd0;

  always @(posedge clk)
    begin : rd_520_process
      if (rst == 1'b1) begin
        s_555 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_555 <= s_12;
        end
      end
    end

  assign sel_4469 = 32'sd0;

  assign sel_4470 = 32'sd0;

  assign sel_4471 = 32'sd0;

  assign s_556 = 32'sd11;

  assign sel_1_1461 = (tmp_4 == 1'b0 ? sel_4471 :
              s_556);

  assign sel_4472 = 32'sd0;

  assign sel_1_1462 = (tmp_6 == 1'b0 ? sel_1_1461 :
              sel_4472);

  assign sel_4473 = 32'sd0;

  assign sel_1_1463 = (tmp_8 == 1'b0 ? sel_1_1462 :
              sel_4473);

  assign sel_4474 = 32'sd0;

  assign sel_1_1464 = (tmp_10 == 1'b0 ? sel_1_1463 :
              sel_4474);

  assign sel_4475 = 32'sd0;

  assign sel_1_1465 = (tmp_12 == 1'b0 ? sel_1_1464 :
              sel_4475);

  assign sel_4476 = 32'sd0;

  assign sel_1_1466 = (tmp_14 == 1'b0 ? sel_1_1465 :
              sel_4476);

  assign sel_4477 = 32'sd0;

  assign sel_1_1467 = (tmp_16 == 1'b0 ? sel_1_1466 :
              sel_4477);

  assign sel_4478 = 32'sd0;

  assign sel_1_1468 = (tmp_18 == 1'b0 ? sel_1_1467 :
              sel_4478);

  assign sel_1_1469 = (s_10 == 1'b0 ? sel_4470 :
              sel_1_1468);

  assign sel_1_1470 = (s_11 == 1'b0 ? sel_4469 :
              sel_1_1469);

  always @(posedge clk)
    begin : rd_521_process
      if (rst == 1'b1) begin
        sel_1_1471 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          sel_1_1471 <= sel_1_1470;
        end
      end
    end

  assign sel_4479 = 32'sd0;

  assign sel_4480 = 32'sd0;

  assign sel_1_1472 = (s_555 == 1'b0 ? sel_1_1471 :
              sel_4480);

  assign sel_4481 = 32'sd0;

  always @(posedge clk)
    begin : rd_533_process
      if (rst == 1'b1) begin
        tmp_613 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_613 <= tmp_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_534_process
      if (rst == 1'b1) begin
        for(rd_534_t_1 = 32'sd0; rd_534_t_1 <= 32'sd11; rd_534_t_1 = rd_534_t_1 + 32'sd1) begin
          rd_534_reg[rd_534_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_534_t_0_1 = 32'sd0; rd_534_t_0_1 <= 32'sd11; rd_534_t_0_1 = rd_534_t_0_1 + 32'sd1) begin
            rd_534_reg[rd_534_t_0_1] <= rd_534_reg_next[rd_534_t_0_1];
          end
        end
      end
    end
  genvar t_0_0111;
  generate
    for(t_0_0111 = 32'sd0; t_0_0111 <= 32'sd11; t_0_0111 = t_0_0111 + 32'sd1) begin:rd_534_reg_next_gen
      assign functionOutput_38[t_0_0111] = rd_534_reg[t_0_0111];
      assign rd_534_reg_next[t_0_0111] = functionOutput_19[t_0_0111];
    end
  endgenerate

  assign sel_4482 = 32'sd0;

  always @(is_SPI_MNGR_82, sel_1_1472, sel_4456, sel_4457, sel_4458, sel_4459, sel_4460,
       sel_4461, sel_4462, sel_4463, sel_4464, sel_4465, sel_4466, sel_4467,
       sel_4468, sel_4479, sel_4481, sel_4482) begin
    case ( is_SPI_MNGR_82)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1853_sel_1 = sel_4481;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1853_sel_1 = sel_1_1472;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1853_sel_1 = sel_4479;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1853_sel_1 = sel_4468;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1853_sel_1 = sel_4467;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1853_sel_1 = sel_4466;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1853_sel_1 = sel_4465;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1853_sel_1 = sel_4464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1853_sel_1 = sel_4463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1853_sel_1 = sel_4462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1853_sel_1 = sel_4461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1853_sel_1 = sel_4460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1853_sel_1 = sel_4459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1853_sel_1 = sel_4458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1853_sel_1 = sel_4457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1853_sel_1 = sel_4456;
        end
      default :
        begin
          p1853_sel_1 = sel_4482;
        end
    endcase
    sel_1_1473 = p1853_sel_1;
  end

  assign tmp_614 = functionOutput_38[sel_1_1473];

  assign sel_4483 = 32'sd0;

  assign sel_4484 = 32'sd0;

  assign sel_4485 = 32'sd0;

  assign sel_4486 = 32'sd0;

  assign sel_4487 = 32'sd0;

  assign sel_4488 = 32'sd0;

  assign sel_4489 = 32'sd0;

  assign sel_4490 = 32'sd0;

  assign sel_4491 = 32'sd0;

  assign sel_4492 = 32'sd0;

  assign sel_4493 = 32'sd0;

  assign sel_4494 = 32'sd0;

  assign sel_4495 = 32'sd0;

  assign sel_4496 = 32'sd0;

  assign sel_4497 = 32'sd0;

  assign sel_4498 = 32'sd0;

  assign sel_4499 = 32'sd0;

  assign s_557 = 32'sd11;

  assign sel_1_1474 = (tmp_6 == 1'b0 ? sel_4499 :
              s_557);

  assign sel_4500 = 32'sd0;

  assign sel_1_1475 = (tmp_8 == 1'b0 ? sel_1_1474 :
              sel_4500);

  assign sel_4501 = 32'sd0;

  assign sel_1_1476 = (tmp_10 == 1'b0 ? sel_1_1475 :
              sel_4501);

  assign sel_4502 = 32'sd0;

  assign sel_1_1477 = (tmp_12 == 1'b0 ? sel_1_1476 :
              sel_4502);

  assign sel_4503 = 32'sd0;

  assign sel_1_1478 = (tmp_14 == 1'b0 ? sel_1_1477 :
              sel_4503);

  assign sel_4504 = 32'sd0;

  assign sel_1_1479 = (tmp_16 == 1'b0 ? sel_1_1478 :
              sel_4504);

  assign sel_4505 = 32'sd0;

  assign sel_1_1480 = (tmp_18 == 1'b0 ? sel_1_1479 :
              sel_4505);

  assign sel_1_1481 = (s_10 == 1'b0 ? sel_4498 :
              sel_1_1480);

  assign sel_1_1482 = (s_11 == 1'b0 ? sel_4497 :
              sel_1_1481);

  assign sel_4506 = 32'sd0;

  assign sel_1_1483 = (s_12 == 1'b0 ? sel_1_1482 :
              sel_4506);

  assign sel_4507 = 32'sd0;

  assign sel_4508 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1483, sel_4483, sel_4484, sel_4485, sel_4486, sel_4487,
       sel_4488, sel_4489, sel_4490, sel_4491, sel_4492, sel_4493, sel_4494,
       sel_4495, sel_4496, sel_4507, sel_4508) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2765_sel_1 = sel_4507;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2765_sel_1 = sel_1_1483;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2765_sel_1 = sel_4496;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2765_sel_1 = sel_4495;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2765_sel_1 = sel_4494;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2765_sel_1 = sel_4493;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2765_sel_1 = sel_4492;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2765_sel_1 = sel_4491;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2765_sel_1 = sel_4490;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2765_sel_1 = sel_4489;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2765_sel_1 = sel_4488;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2765_sel_1 = sel_4487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2765_sel_1 = sel_4486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2765_sel_1 = sel_4485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2765_sel_1 = sel_4484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2765_sel_1 = sel_4483;
        end
      default :
        begin
          p2765_sel_1 = sel_4508;
        end
    endcase
    sel_1_1484 = p2765_sel_1;
  end

  assign tmp_615 = functionOutput_21[sel_1_1484];

  always @(posedge clk)
    begin : rd_532_process
      if (rst == 1'b1) begin
        tmp_616 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_616 <= tmp_8;
        end
      end
    end

  always @(posedge clk)
    begin : rd_518_process
      if (rst == 1'b1) begin
        tmp_617 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_617 <= tmp_615;
        end
      end
    end

  assign sel_1_1485 = (tmp_613 == 1'b0 ? tmp_614 :
              tmp_617);

  assign sel_4509 = 32'sd0;

  assign sel_4510 = 32'sd0;

  assign sel_4511 = 32'sd0;

  assign sel_4512 = 32'sd0;

  assign sel_4513 = 32'sd0;

  assign sel_4514 = 32'sd0;

  assign sel_4515 = 32'sd0;

  assign sel_4516 = 32'sd0;

  assign sel_4517 = 32'sd0;

  assign sel_4518 = 32'sd0;

  assign sel_4519 = 32'sd0;

  assign sel_4520 = 32'sd0;

  assign sel_4521 = 32'sd0;

  assign sel_4522 = 32'sd0;

  assign sel_4523 = 32'sd0;

  assign sel_4524 = 32'sd0;

  assign sel_4525 = 32'sd0;

  assign s_558 = 32'sd11;

  assign sel_1_1486 = (tmp_8 == 1'b0 ? sel_4525 :
              s_558);

  assign sel_4526 = 32'sd0;

  assign sel_1_1487 = (tmp_10 == 1'b0 ? sel_1_1486 :
              sel_4526);

  assign sel_4527 = 32'sd0;

  assign sel_1_1488 = (tmp_12 == 1'b0 ? sel_1_1487 :
              sel_4527);

  assign sel_4528 = 32'sd0;

  assign sel_1_1489 = (tmp_14 == 1'b0 ? sel_1_1488 :
              sel_4528);

  assign sel_4529 = 32'sd0;

  assign sel_1_1490 = (tmp_16 == 1'b0 ? sel_1_1489 :
              sel_4529);

  assign sel_4530 = 32'sd0;

  assign sel_1_1491 = (tmp_18 == 1'b0 ? sel_1_1490 :
              sel_4530);

  assign sel_1_1492 = (s_10 == 1'b0 ? sel_4524 :
              sel_1_1491);

  assign sel_1_1493 = (s_11 == 1'b0 ? sel_4523 :
              sel_1_1492);

  assign sel_4531 = 32'sd0;

  assign sel_1_1494 = (s_12 == 1'b0 ? sel_1_1493 :
              sel_4531);

  assign sel_4532 = 32'sd0;

  assign sel_4533 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1494, sel_4509, sel_4510, sel_4511, sel_4512, sel_4513,
       sel_4514, sel_4515, sel_4516, sel_4517, sel_4518, sel_4519, sel_4520,
       sel_4521, sel_4522, sel_4532, sel_4533) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3183_sel_1 = sel_4532;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3183_sel_1 = sel_1_1494;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3183_sel_1 = sel_4522;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3183_sel_1 = sel_4521;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3183_sel_1 = sel_4520;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3183_sel_1 = sel_4519;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3183_sel_1 = sel_4518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3183_sel_1 = sel_4517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3183_sel_1 = sel_4516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3183_sel_1 = sel_4515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3183_sel_1 = sel_4514;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3183_sel_1 = sel_4513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3183_sel_1 = sel_4512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3183_sel_1 = sel_4511;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3183_sel_1 = sel_4510;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3183_sel_1 = sel_4509;
        end
      default :
        begin
          p3183_sel_1 = sel_4533;
        end
    endcase
    sel_1_1495 = p3183_sel_1;
  end

  assign tmp_618 = functionOutput_22[sel_1_1495];

  always @(posedge clk)
    begin : rd_531_process
      if (rst == 1'b1) begin
        tmp_619 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_619 <= tmp_10;
        end
      end
    end

  always @(posedge clk)
    begin : rd_517_process
      if (rst == 1'b1) begin
        tmp_620 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_620 <= tmp_618;
        end
      end
    end

  assign sel_1_1496 = (tmp_616 == 1'b0 ? sel_1_1485 :
              tmp_620);

  assign sel_4534 = 32'sd0;

  assign sel_4535 = 32'sd0;

  assign sel_4536 = 32'sd0;

  assign sel_4537 = 32'sd0;

  assign sel_4538 = 32'sd0;

  assign sel_4539 = 32'sd0;

  assign sel_4540 = 32'sd0;

  assign sel_4541 = 32'sd0;

  assign sel_4542 = 32'sd0;

  assign sel_4543 = 32'sd0;

  assign sel_4544 = 32'sd0;

  assign sel_4545 = 32'sd0;

  assign sel_4546 = 32'sd0;

  assign sel_4547 = 32'sd0;

  assign sel_4548 = 32'sd0;

  assign sel_4549 = 32'sd0;

  assign sel_4550 = 32'sd0;

  assign s_559 = 32'sd11;

  assign sel_1_1497 = (tmp_10 == 1'b0 ? sel_4550 :
              s_559);

  assign sel_4551 = 32'sd0;

  assign sel_1_1498 = (tmp_12 == 1'b0 ? sel_1_1497 :
              sel_4551);

  assign sel_4552 = 32'sd0;

  assign sel_1_1499 = (tmp_14 == 1'b0 ? sel_1_1498 :
              sel_4552);

  assign sel_4553 = 32'sd0;

  assign sel_1_1500 = (tmp_16 == 1'b0 ? sel_1_1499 :
              sel_4553);

  assign sel_4554 = 32'sd0;

  assign sel_1_1501 = (tmp_18 == 1'b0 ? sel_1_1500 :
              sel_4554);

  assign sel_1_1502 = (s_10 == 1'b0 ? sel_4549 :
              sel_1_1501);

  assign sel_1_1503 = (s_11 == 1'b0 ? sel_4548 :
              sel_1_1502);

  assign sel_4555 = 32'sd0;

  assign sel_1_1504 = (s_12 == 1'b0 ? sel_1_1503 :
              sel_4555);

  assign sel_4556 = 32'sd0;

  assign sel_4557 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1504, sel_4534, sel_4535, sel_4536, sel_4537, sel_4538,
       sel_4539, sel_4540, sel_4541, sel_4542, sel_4543, sel_4544, sel_4545,
       sel_4546, sel_4547, sel_4556, sel_4557) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2689_sel_1 = sel_4556;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2689_sel_1 = sel_1_1504;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2689_sel_1 = sel_4547;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2689_sel_1 = sel_4546;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2689_sel_1 = sel_4545;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2689_sel_1 = sel_4544;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2689_sel_1 = sel_4543;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2689_sel_1 = sel_4542;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2689_sel_1 = sel_4541;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2689_sel_1 = sel_4540;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2689_sel_1 = sel_4539;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2689_sel_1 = sel_4538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2689_sel_1 = sel_4537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2689_sel_1 = sel_4536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2689_sel_1 = sel_4535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2689_sel_1 = sel_4534;
        end
      default :
        begin
          p2689_sel_1 = sel_4557;
        end
    endcase
    sel_1_1505 = p2689_sel_1;
  end

  assign tmp_621 = functionOutput_23[sel_1_1505];

  always @(posedge clk)
    begin : rd_530_process
      if (rst == 1'b1) begin
        tmp_622 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_622 <= tmp_12;
        end
      end
    end

  always @(posedge clk)
    begin : rd_516_process
      if (rst == 1'b1) begin
        tmp_623 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_623 <= tmp_621;
        end
      end
    end

  assign sel_1_1506 = (tmp_619 == 1'b0 ? sel_1_1496 :
              tmp_623);

  assign sel_4558 = 32'sd0;

  assign sel_4559 = 32'sd0;

  assign sel_4560 = 32'sd0;

  assign sel_4561 = 32'sd0;

  assign sel_4562 = 32'sd0;

  assign sel_4563 = 32'sd0;

  assign sel_4564 = 32'sd0;

  assign sel_4565 = 32'sd0;

  assign sel_4566 = 32'sd0;

  assign sel_4567 = 32'sd0;

  assign sel_4568 = 32'sd0;

  assign sel_4569 = 32'sd0;

  assign sel_4570 = 32'sd0;

  assign sel_4571 = 32'sd0;

  assign sel_4572 = 32'sd0;

  assign sel_4573 = 32'sd0;

  assign sel_4574 = 32'sd0;

  assign s_560 = 32'sd11;

  assign sel_1_1507 = (tmp_12 == 1'b0 ? sel_4574 :
              s_560);

  assign sel_4575 = 32'sd0;

  assign sel_1_1508 = (tmp_14 == 1'b0 ? sel_1_1507 :
              sel_4575);

  assign sel_4576 = 32'sd0;

  assign sel_1_1509 = (tmp_16 == 1'b0 ? sel_1_1508 :
              sel_4576);

  assign sel_4577 = 32'sd0;

  assign sel_1_1510 = (tmp_18 == 1'b0 ? sel_1_1509 :
              sel_4577);

  assign sel_1_1511 = (s_10 == 1'b0 ? sel_4573 :
              sel_1_1510);

  assign sel_1_1512 = (s_11 == 1'b0 ? sel_4572 :
              sel_1_1511);

  assign sel_4578 = 32'sd0;

  assign sel_1_1513 = (s_12 == 1'b0 ? sel_1_1512 :
              sel_4578);

  assign sel_4579 = 32'sd0;

  assign sel_4580 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1513, sel_4558, sel_4559, sel_4560, sel_4561, sel_4562,
       sel_4563, sel_4564, sel_4565, sel_4566, sel_4567, sel_4568, sel_4569,
       sel_4570, sel_4571, sel_4579, sel_4580) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2898_sel_1 = sel_4579;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2898_sel_1 = sel_1_1513;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2898_sel_1 = sel_4571;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2898_sel_1 = sel_4570;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2898_sel_1 = sel_4569;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2898_sel_1 = sel_4568;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2898_sel_1 = sel_4567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p2898_sel_1 = sel_4566;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p2898_sel_1 = sel_4565;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2898_sel_1 = sel_4564;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2898_sel_1 = sel_4563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2898_sel_1 = sel_4562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2898_sel_1 = sel_4561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2898_sel_1 = sel_4560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2898_sel_1 = sel_4559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2898_sel_1 = sel_4558;
        end
      default :
        begin
          p2898_sel_1 = sel_4580;
        end
    endcase
    sel_1_1514 = p2898_sel_1;
  end

  assign tmp_624 = functionOutput_24[sel_1_1514];

  always @(posedge clk)
    begin : rd_529_process
      if (rst == 1'b1) begin
        tmp_625 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_625 <= tmp_14;
        end
      end
    end

  always @(posedge clk)
    begin : rd_515_process
      if (rst == 1'b1) begin
        tmp_626 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_626 <= tmp_624;
        end
      end
    end

  assign sel_1_1515 = (tmp_622 == 1'b0 ? sel_1_1506 :
              tmp_626);

  assign sel_4581 = 32'sd0;

  assign sel_4582 = 32'sd0;

  assign sel_4583 = 32'sd0;

  assign sel_4584 = 32'sd0;

  assign sel_4585 = 32'sd0;

  assign sel_4586 = 32'sd0;

  assign sel_4587 = 32'sd0;

  assign sel_4588 = 32'sd0;

  assign sel_4589 = 32'sd0;

  assign sel_4590 = 32'sd0;

  assign sel_4591 = 32'sd0;

  assign sel_4592 = 32'sd0;

  assign sel_4593 = 32'sd0;

  assign sel_4594 = 32'sd0;

  assign sel_4595 = 32'sd0;

  assign sel_4596 = 32'sd0;

  assign sel_4597 = 32'sd0;

  assign s_561 = 32'sd11;

  assign sel_1_1516 = (tmp_14 == 1'b0 ? sel_4597 :
              s_561);

  assign sel_4598 = 32'sd0;

  assign sel_1_1517 = (tmp_16 == 1'b0 ? sel_1_1516 :
              sel_4598);

  assign sel_4599 = 32'sd0;

  assign sel_1_1518 = (tmp_18 == 1'b0 ? sel_1_1517 :
              sel_4599);

  assign sel_1_1519 = (s_10 == 1'b0 ? sel_4596 :
              sel_1_1518);

  assign sel_1_1520 = (s_11 == 1'b0 ? sel_4595 :
              sel_1_1519);

  assign sel_4600 = 32'sd0;

  assign sel_1_1521 = (s_12 == 1'b0 ? sel_1_1520 :
              sel_4600);

  assign sel_4601 = 32'sd0;

  assign sel_4602 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1521, sel_4581, sel_4582, sel_4583, sel_4584, sel_4585,
       sel_4586, sel_4587, sel_4588, sel_4589, sel_4590, sel_4591, sel_4592,
       sel_4593, sel_4594, sel_4601, sel_4602) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3354_sel_1 = sel_4601;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3354_sel_1 = sel_1_1521;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3354_sel_1 = sel_4594;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3354_sel_1 = sel_4593;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3354_sel_1 = sel_4592;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3354_sel_1 = sel_4591;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3354_sel_1 = sel_4590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3354_sel_1 = sel_4589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3354_sel_1 = sel_4588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3354_sel_1 = sel_4587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3354_sel_1 = sel_4586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3354_sel_1 = sel_4585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3354_sel_1 = sel_4584;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3354_sel_1 = sel_4583;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3354_sel_1 = sel_4582;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3354_sel_1 = sel_4581;
        end
      default :
        begin
          p3354_sel_1 = sel_4602;
        end
    endcase
    sel_1_1522 = p3354_sel_1;
  end

  assign tmp_627 = functionOutput_25[sel_1_1522];

  always @(posedge clk)
    begin : rd_528_process
      if (rst == 1'b1) begin
        tmp_628 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_628 <= tmp_16;
        end
      end
    end

  always @(posedge clk)
    begin : rd_514_process
      if (rst == 1'b1) begin
        tmp_629 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_629 <= tmp_627;
        end
      end
    end

  assign sel_1_1523 = (tmp_625 == 1'b0 ? sel_1_1515 :
              tmp_629);

  assign sel_4603 = 32'sd0;

  assign sel_4604 = 32'sd0;

  assign sel_4605 = 32'sd0;

  assign sel_4606 = 32'sd0;

  assign sel_4607 = 32'sd0;

  assign sel_4608 = 32'sd0;

  assign sel_4609 = 32'sd0;

  assign sel_4610 = 32'sd0;

  assign sel_4611 = 32'sd0;

  assign sel_4612 = 32'sd0;

  assign sel_4613 = 32'sd0;

  assign sel_4614 = 32'sd0;

  assign sel_4615 = 32'sd0;

  assign sel_4616 = 32'sd0;

  assign sel_4617 = 32'sd0;

  assign sel_4618 = 32'sd0;

  assign sel_4619 = 32'sd0;

  assign s_562 = 32'sd11;

  assign sel_1_1524 = (tmp_16 == 1'b0 ? sel_4619 :
              s_562);

  assign sel_4620 = 32'sd0;

  assign sel_1_1525 = (tmp_18 == 1'b0 ? sel_1_1524 :
              sel_4620);

  assign sel_1_1526 = (s_10 == 1'b0 ? sel_4618 :
              sel_1_1525);

  assign sel_1_1527 = (s_11 == 1'b0 ? sel_4617 :
              sel_1_1526);

  assign sel_4621 = 32'sd0;

  assign sel_1_1528 = (s_12 == 1'b0 ? sel_1_1527 :
              sel_4621);

  assign sel_4622 = 32'sd0;

  assign sel_4623 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1528, sel_4603, sel_4604, sel_4605, sel_4606, sel_4607,
       sel_4608, sel_4609, sel_4610, sel_4611, sel_4612, sel_4613, sel_4614,
       sel_4615, sel_4616, sel_4622, sel_4623) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3278_sel_1 = sel_4622;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3278_sel_1 = sel_1_1528;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3278_sel_1 = sel_4616;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3278_sel_1 = sel_4615;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3278_sel_1 = sel_4614;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3278_sel_1 = sel_4613;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3278_sel_1 = sel_4612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p3278_sel_1 = sel_4611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p3278_sel_1 = sel_4610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3278_sel_1 = sel_4609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3278_sel_1 = sel_4608;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3278_sel_1 = sel_4607;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3278_sel_1 = sel_4606;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3278_sel_1 = sel_4605;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3278_sel_1 = sel_4604;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3278_sel_1 = sel_4603;
        end
      default :
        begin
          p3278_sel_1 = sel_4623;
        end
    endcase
    sel_1_1529 = p3278_sel_1;
  end

  assign tmp_630 = functionOutput_26[sel_1_1529];

  always @(posedge clk)
    begin : rd_527_process
      if (rst == 1'b1) begin
        tmp_631 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_631 <= tmp_18;
        end
      end
    end

  always @(posedge clk)
    begin : rd_513_process
      if (rst == 1'b1) begin
        tmp_632 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_632 <= tmp_630;
        end
      end
    end

  assign sel_1_1530 = (tmp_628 == 1'b0 ? sel_1_1523 :
              tmp_632);

  assign sel_4624 = 32'sd0;

  assign sel_4625 = 32'sd0;

  assign sel_4626 = 32'sd0;

  assign sel_4627 = 32'sd0;

  assign sel_4628 = 32'sd0;

  assign sel_4629 = 32'sd0;

  assign sel_4630 = 32'sd0;

  assign sel_4631 = 32'sd0;

  assign sel_4632 = 32'sd0;

  assign sel_4633 = 32'sd0;

  assign sel_4634 = 32'sd0;

  assign sel_4635 = 32'sd0;

  assign sel_4636 = 32'sd0;

  assign sel_4637 = 32'sd0;

  assign sel_4638 = 32'sd0;

  assign sel_4639 = 32'sd0;

  assign sel_4640 = 32'sd0;

  assign s_563 = 32'sd11;

  assign sel_1_1531 = (tmp_18 == 1'b0 ? sel_4640 :
              s_563);

  assign sel_1_1532 = (s_10 == 1'b0 ? sel_4639 :
              sel_1_1531);

  assign sel_1_1533 = (s_11 == 1'b0 ? sel_4638 :
              sel_1_1532);

  assign sel_4641 = 32'sd0;

  assign sel_1_1534 = (s_12 == 1'b0 ? sel_1_1533 :
              sel_4641);

  assign sel_4642 = 32'sd0;

  assign sel_4643 = 32'sd0;

  always @(is_SPI_MNGR_38, sel_1_1534, sel_4624, sel_4625, sel_4626, sel_4627, sel_4628,
       sel_4629, sel_4630, sel_4631, sel_4632, sel_4633, sel_4634, sel_4635,
       sel_4636, sel_4637, sel_4642, sel_4643) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1587_sel_1 = sel_4642;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1587_sel_1 = sel_1_1534;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1587_sel_1 = sel_4637;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1587_sel_1 = sel_4636;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1587_sel_1 = sel_4635;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1587_sel_1 = sel_4634;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1587_sel_1 = sel_4633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1587_sel_1 = sel_4632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1587_sel_1 = sel_4631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1587_sel_1 = sel_4630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1587_sel_1 = sel_4629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1587_sel_1 = sel_4628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1587_sel_1 = sel_4627;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1587_sel_1 = sel_4626;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1587_sel_1 = sel_4625;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1587_sel_1 = sel_4624;
        end
      default :
        begin
          p1587_sel_1 = sel_4643;
        end
    endcase
    sel_1_1535 = p1587_sel_1;
  end

  assign tmp_633 = functionOutput_27[sel_1_1535];

  assign sel_4644 = 8'd0;

  always @(posedge clk)
    begin : rd_508_process
      if (rst == 1'b1) begin
        tmp_634 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_634 <= tmp_612;
        end
      end
    end

  assign sel_1_1536 = (s_553 == 1'b0 ? sel_1_1458 :
              tmp_634);

  always @(posedge clk)
    begin : rd_512_process
      if (rst == 1'b1) begin
        tmp_635 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          tmp_635 <= tmp_633;
        end
      end
    end

  assign sel_1_1537 = (tmp_631 == 1'b0 ? sel_1_1530 :
              tmp_635);

  assign sel_4645 = 8'd0;

  always @(posedge clk)
    begin : rd_535_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_83 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_83 <= is_SPI_MNGR_38;
        end
      end
    end

  assign sel_4646 = 1'b0;

  assign sel_4647 = 1'b0;

  assign sel_4648 = 1'b0;

  assign sel_4649 = 1'b0;

  assign sel_4650 = 1'b0;

  assign sel_4651 = 1'b0;

  assign sel_4652 = 1'b0;

  assign sel_4653 = 1'b0;

  assign sel_4654 = 1'b0;

  assign sel_4655 = 1'b0;

  assign sel_4656 = 1'b0;

  assign sel_4657 = 1'b0;

  assign sel_4658 = 1'b0;

  assign sel_4659 = 1'b0;

  assign s_564 = 1'b1;

  assign sel_2_236 = (s_14 == 1'b0 ? sel_4659 :
              s_564);

  assign s_565 = 1'b1;

  assign sel_2_237 = (s_15 == 1'b0 ? sel_2_236 :
              s_565);

  assign s_566 = 1'b1;

  assign sel_2_238 = (s_16 == 1'b0 ? sel_2_237 :
              s_566);

  assign s_567 = 1'b1;

  assign sel_2_239 = (s_17 == 1'b0 ? sel_2_238 :
              s_567);

  assign s_568 = 1'b1;

  assign sel_2_240 = (s_18 == 1'b0 ? sel_2_239 :
              s_568);

  assign s_569 = 1'b1;

  assign sel_2_241 = (s_19 == 1'b0 ? sel_2_240 :
              s_569);

  assign s_570 = 1'b1;

  assign sel_2_242 = (s_20 == 1'b0 ? sel_2_241 :
              s_570);

  assign s_571 = 1'b1;

  assign sel_2_243 = (s_21 == 1'b0 ? sel_2_242 :
              s_571);

  always @(posedge clk)
    begin : rd_537_process
      if (rst == 1'b1) begin
        s_572 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_572 <= s_12;
        end
      end
    end

  assign sel_4660 = 1'b0;

  assign sel_4661 = 1'b0;

  assign sel_4662 = 1'b0;

  assign s_573 = 1'b1;

  assign sel_2_244 = (tmp_4 == 1'b0 ? sel_4662 :
              s_573);

  assign s_574 = 1'b1;

  assign sel_2_245 = (tmp_6 == 1'b0 ? sel_2_244 :
              s_574);

  assign s_575 = 1'b1;

  assign sel_2_246 = (tmp_8 == 1'b0 ? sel_2_245 :
              s_575);

  assign s_576 = 1'b1;

  assign sel_2_247 = (tmp_10 == 1'b0 ? sel_2_246 :
              s_576);

  assign s_577 = 1'b1;

  assign sel_2_248 = (tmp_12 == 1'b0 ? sel_2_247 :
              s_577);

  assign s_578 = 1'b1;

  assign sel_2_249 = (tmp_14 == 1'b0 ? sel_2_248 :
              s_578);

  assign s_579 = 1'b1;

  assign sel_2_250 = (tmp_16 == 1'b0 ? sel_2_249 :
              s_579);

  assign s_580 = 1'b1;

  assign sel_2_251 = (tmp_18 == 1'b0 ? sel_2_250 :
              s_580);

  assign sel_2_252 = (s_10 == 1'b0 ? sel_4661 :
              sel_2_251);

  assign sel_2_253 = (s_11 == 1'b0 ? sel_4660 :
              sel_2_252);

  always @(posedge clk)
    begin : rd_538_process
      if (rst == 1'b1) begin
        sel_2_254 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_254 <= sel_2_253;
        end
      end
    end

  always @(posedge clk)
    begin : rd_536_process
      if (rst == 1'b1) begin
        sel_2_255 <= 1'b0;
      end
      else begin
        if (enb) begin
          sel_2_255 <= sel_2_243;
        end
      end
    end

  assign sel_4663 = 1'b0;

  assign sel_2_256 = (s_572 == 1'b0 ? sel_2_254 :
              sel_4663);

  assign sel_4664 = 1'b0;

  assign sel_4665 = 8'd0;

  always @(is_SPI_MNGR_40, sel_1_128, sel_1_129, sel_409, sel_410, sel_45, sel_46,
       sel_4665, sel_47, sel_48, sel_49, sel_50, sel_51, sel_52, sel_53, sel_54,
       sel_55, sel_56) begin
    case ( is_SPI_MNGR_40)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1204_sel_1 = sel_410;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1204_sel_1 = sel_1_129;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1204_sel_1 = sel_1_128;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1204_sel_1 = sel_409;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1204_sel_1 = sel_56;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1204_sel_1 = sel_55;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1204_sel_1 = sel_54;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1204_sel_1 = sel_53;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1204_sel_1 = sel_52;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1204_sel_1 = sel_51;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1204_sel_1 = sel_50;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1204_sel_1 = sel_49;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1204_sel_1 = sel_48;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1204_sel_1 = sel_47;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1204_sel_1 = sel_46;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1204_sel_1 = sel_45;
        end
      default :
        begin
          p1204_sel_1 = sel_4665;
        end
    endcase
    sel_1_1538 = p1204_sel_1;
  end

  assign sel_4666 = 1'b0;

  always @(is_SPI_MNGR_50, sel_2_24, sel_2_25, sel_411, sel_412, sel_413, sel_414,
       sel_415, sel_416, sel_417, sel_418, sel_419, sel_420, sel_421, sel_422,
       sel_423, sel_429, sel_4666) begin
    case ( is_SPI_MNGR_50)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1187_sel_2 = sel_429;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1187_sel_2 = sel_2_25;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1187_sel_2 = sel_2_24;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1187_sel_2 = sel_423;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1187_sel_2 = sel_422;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1187_sel_2 = sel_421;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1187_sel_2 = sel_420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1187_sel_2 = sel_419;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1187_sel_2 = sel_418;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1187_sel_2 = sel_417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1187_sel_2 = sel_416;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1187_sel_2 = sel_415;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1187_sel_2 = sel_414;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1187_sel_2 = sel_413;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1187_sel_2 = sel_412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1187_sel_2 = sel_411;
        end
      default :
        begin
          p1187_sel_2 = sel_4666;
        end
    endcase
    sel_2_257 = p1187_sel_2;
  end

  assign sel_4667 = 8'd0;

  always @(is_SPI_MNGR_51, sel_1_256, sel_1_257, sel_430, sel_431, sel_432, sel_433,
       sel_434, sel_435, sel_436, sel_437, sel_438, sel_439, sel_440, sel_441,
       sel_4667, sel_794, sel_795) begin
    case ( is_SPI_MNGR_51)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1149_sel_1 = sel_795;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1149_sel_1 = sel_1_257;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1149_sel_1 = sel_1_256;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1149_sel_1 = sel_794;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1149_sel_1 = sel_441;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1149_sel_1 = sel_440;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1149_sel_1 = sel_439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1149_sel_1 = sel_438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1149_sel_1 = sel_437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1149_sel_1 = sel_436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1149_sel_1 = sel_435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1149_sel_1 = sel_434;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1149_sel_1 = sel_433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1149_sel_1 = sel_432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1149_sel_1 = sel_431;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1149_sel_1 = sel_430;
        end
      default :
        begin
          p1149_sel_1 = sel_4667;
        end
    endcase
    sel_1_1539 = p1149_sel_1;
  end

  assign sel_4668 = 1'b0;

  always @(is_SPI_MNGR_53, sel_2_45, sel_2_46, sel_4668, sel_796, sel_797, sel_798,
       sel_799, sel_800, sel_801, sel_802, sel_803, sel_804, sel_805, sel_806,
       sel_807, sel_808, sel_814) begin
    case ( is_SPI_MNGR_53)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1132_sel_2 = sel_814;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1132_sel_2 = sel_2_46;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1132_sel_2 = sel_2_45;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1132_sel_2 = sel_808;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1132_sel_2 = sel_807;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1132_sel_2 = sel_806;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1132_sel_2 = sel_805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1132_sel_2 = sel_804;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1132_sel_2 = sel_803;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1132_sel_2 = sel_802;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1132_sel_2 = sel_801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1132_sel_2 = sel_800;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1132_sel_2 = sel_799;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1132_sel_2 = sel_798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1132_sel_2 = sel_797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1132_sel_2 = sel_796;
        end
      default :
        begin
          p1132_sel_2 = sel_4668;
        end
    endcase
    sel_2_258 = p1132_sel_2;
  end

  assign sel_4669 = 8'd0;

  always @(is_SPI_MNGR_54, sel_1179, sel_1180, sel_1_384, sel_1_385, sel_4669, sel_815,
       sel_816, sel_817, sel_818, sel_819, sel_820, sel_821, sel_822, sel_823,
       sel_824, sel_825, sel_826) begin
    case ( is_SPI_MNGR_54)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1094_sel_1 = sel_1180;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1094_sel_1 = sel_1_385;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1094_sel_1 = sel_1_384;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1094_sel_1 = sel_1179;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1094_sel_1 = sel_826;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1094_sel_1 = sel_825;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1094_sel_1 = sel_824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1094_sel_1 = sel_823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1094_sel_1 = sel_822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1094_sel_1 = sel_821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1094_sel_1 = sel_820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1094_sel_1 = sel_819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1094_sel_1 = sel_818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1094_sel_1 = sel_817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1094_sel_1 = sel_816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1094_sel_1 = sel_815;
        end
      default :
        begin
          p1094_sel_1 = sel_4669;
        end
    endcase
    sel_1_1540 = p1094_sel_1;
  end

  assign sel_4670 = 1'b0;

  always @(is_SPI_MNGR_56, sel_1181, sel_1182, sel_1183, sel_1184, sel_1185, sel_1186,
       sel_1187, sel_1188, sel_1189, sel_1190, sel_1191, sel_1192, sel_1193,
       sel_1199, sel_2_66, sel_2_67, sel_4670) begin
    case ( is_SPI_MNGR_56)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1077_sel_2 = sel_1199;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1077_sel_2 = sel_2_67;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1077_sel_2 = sel_2_66;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1077_sel_2 = sel_1193;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1077_sel_2 = sel_1192;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1077_sel_2 = sel_1191;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1077_sel_2 = sel_1190;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1077_sel_2 = sel_1189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1077_sel_2 = sel_1188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1077_sel_2 = sel_1187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1077_sel_2 = sel_1186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1077_sel_2 = sel_1185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1077_sel_2 = sel_1184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1077_sel_2 = sel_1183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1077_sel_2 = sel_1182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1077_sel_2 = sel_1181;
        end
      default :
        begin
          p1077_sel_2 = sel_4670;
        end
    endcase
    sel_2_259 = p1077_sel_2;
  end

  assign sel_4671 = 8'd0;

  always @(is_SPI_MNGR_57, sel_1200, sel_1201, sel_1202, sel_1203, sel_1204, sel_1205,
       sel_1206, sel_1207, sel_1208, sel_1209, sel_1210, sel_1211, sel_1564,
       sel_1565, sel_1_512, sel_1_513, sel_4671) begin
    case ( is_SPI_MNGR_57)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1039_sel_1 = sel_1565;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1039_sel_1 = sel_1_513;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1039_sel_1 = sel_1_512;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1039_sel_1 = sel_1564;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1039_sel_1 = sel_1211;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1039_sel_1 = sel_1210;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1039_sel_1 = sel_1209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1039_sel_1 = sel_1208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1039_sel_1 = sel_1207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1039_sel_1 = sel_1206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1039_sel_1 = sel_1205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1039_sel_1 = sel_1204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1039_sel_1 = sel_1203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1039_sel_1 = sel_1202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1039_sel_1 = sel_1201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1039_sel_1 = sel_1200;
        end
      default :
        begin
          p1039_sel_1 = sel_4671;
        end
    endcase
    sel_1_1541 = p1039_sel_1;
  end

  assign sel_4672 = 1'b0;

  always @(is_SPI_MNGR_59, sel_1566, sel_1567, sel_1568, sel_1569, sel_1570, sel_1571,
       sel_1572, sel_1573, sel_1574, sel_1575, sel_1576, sel_1577, sel_1578,
       sel_1584, sel_2_87, sel_2_88, sel_4672) begin
    case ( is_SPI_MNGR_59)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1022_sel_2 = sel_1584;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1022_sel_2 = sel_2_88;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1022_sel_2 = sel_2_87;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1022_sel_2 = sel_1578;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1022_sel_2 = sel_1577;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1022_sel_2 = sel_1576;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1022_sel_2 = sel_1575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1022_sel_2 = sel_1574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1022_sel_2 = sel_1573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1022_sel_2 = sel_1572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1022_sel_2 = sel_1571;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1022_sel_2 = sel_1570;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1022_sel_2 = sel_1569;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1022_sel_2 = sel_1568;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1022_sel_2 = sel_1567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1022_sel_2 = sel_1566;
        end
      default :
        begin
          p1022_sel_2 = sel_4672;
        end
    endcase
    sel_2_260 = p1022_sel_2;
  end

  assign sel_4673 = 8'd0;

  always @(is_SPI_MNGR_60, sel_1585, sel_1586, sel_1587, sel_1588, sel_1589, sel_1590,
       sel_1591, sel_1592, sel_1593, sel_1594, sel_1595, sel_1596, sel_1949,
       sel_1950, sel_1_640, sel_1_641, sel_4673) begin
    case ( is_SPI_MNGR_60)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p973_sel_1 = sel_1950;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p973_sel_1 = sel_1_641;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p973_sel_1 = sel_1_640;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p973_sel_1 = sel_1949;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p973_sel_1 = sel_1596;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p973_sel_1 = sel_1595;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p973_sel_1 = sel_1594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p973_sel_1 = sel_1593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p973_sel_1 = sel_1592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p973_sel_1 = sel_1591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p973_sel_1 = sel_1590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p973_sel_1 = sel_1589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p973_sel_1 = sel_1588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p973_sel_1 = sel_1587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p973_sel_1 = sel_1586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p973_sel_1 = sel_1585;
        end
      default :
        begin
          p973_sel_1 = sel_4673;
        end
    endcase
    sel_1_1542 = p973_sel_1;
  end

  assign sel_4674 = 1'b0;

  always @(is_SPI_MNGR_62, sel_1951, sel_1952, sel_1953, sel_1954, sel_1955, sel_1956,
       sel_1957, sel_1958, sel_1959, sel_1960, sel_1961, sel_1962, sel_1963,
       sel_1969, sel_2_108, sel_2_109, sel_4674) begin
    case ( is_SPI_MNGR_62)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p956_sel_2 = sel_1969;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p956_sel_2 = sel_2_109;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p956_sel_2 = sel_2_108;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p956_sel_2 = sel_1963;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p956_sel_2 = sel_1962;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p956_sel_2 = sel_1961;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p956_sel_2 = sel_1960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p956_sel_2 = sel_1959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p956_sel_2 = sel_1958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p956_sel_2 = sel_1957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p956_sel_2 = sel_1956;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p956_sel_2 = sel_1955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p956_sel_2 = sel_1954;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p956_sel_2 = sel_1953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p956_sel_2 = sel_1952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p956_sel_2 = sel_1951;
        end
      default :
        begin
          p956_sel_2 = sel_4674;
        end
    endcase
    sel_2_261 = p956_sel_2;
  end

  assign sel_4675 = 8'd0;

  always @(is_SPI_MNGR_63, sel_1970, sel_1971, sel_1972, sel_1973, sel_1974, sel_1975,
       sel_1976, sel_1977, sel_1978, sel_1979, sel_1980, sel_1981, sel_1_768,
       sel_1_769, sel_2334, sel_2335, sel_4675) begin
    case ( is_SPI_MNGR_63)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p907_sel_1 = sel_2335;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p907_sel_1 = sel_1_769;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p907_sel_1 = sel_1_768;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p907_sel_1 = sel_2334;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p907_sel_1 = sel_1981;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p907_sel_1 = sel_1980;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p907_sel_1 = sel_1979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p907_sel_1 = sel_1978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p907_sel_1 = sel_1977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p907_sel_1 = sel_1976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p907_sel_1 = sel_1975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p907_sel_1 = sel_1974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p907_sel_1 = sel_1973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p907_sel_1 = sel_1972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p907_sel_1 = sel_1971;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p907_sel_1 = sel_1970;
        end
      default :
        begin
          p907_sel_1 = sel_4675;
        end
    endcase
    sel_1_1543 = p907_sel_1;
  end

  assign sel_4676 = 1'b0;

  always @(is_SPI_MNGR_65, sel_2336, sel_2337, sel_2338, sel_2339, sel_2340, sel_2341,
       sel_2342, sel_2343, sel_2344, sel_2345, sel_2346, sel_2347, sel_2348,
       sel_2354, sel_2_129, sel_2_130, sel_4676) begin
    case ( is_SPI_MNGR_65)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p890_sel_2 = sel_2354;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p890_sel_2 = sel_2_130;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p890_sel_2 = sel_2_129;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p890_sel_2 = sel_2348;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p890_sel_2 = sel_2347;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p890_sel_2 = sel_2346;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p890_sel_2 = sel_2345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p890_sel_2 = sel_2344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p890_sel_2 = sel_2343;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p890_sel_2 = sel_2342;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p890_sel_2 = sel_2341;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p890_sel_2 = sel_2340;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p890_sel_2 = sel_2339;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p890_sel_2 = sel_2338;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p890_sel_2 = sel_2337;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p890_sel_2 = sel_2336;
        end
      default :
        begin
          p890_sel_2 = sel_4676;
        end
    endcase
    sel_2_262 = p890_sel_2;
  end

  assign sel_4677 = 8'd0;

  always @(is_SPI_MNGR_66, sel_1_896, sel_1_897, sel_2355, sel_2356, sel_2357, sel_2358,
       sel_2359, sel_2360, sel_2361, sel_2362, sel_2363, sel_2364, sel_2365,
       sel_2366, sel_2719, sel_2720, sel_4677) begin
    case ( is_SPI_MNGR_66)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p841_sel_1 = sel_2720;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p841_sel_1 = sel_1_897;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p841_sel_1 = sel_1_896;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p841_sel_1 = sel_2719;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p841_sel_1 = sel_2366;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p841_sel_1 = sel_2365;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p841_sel_1 = sel_2364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p841_sel_1 = sel_2363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p841_sel_1 = sel_2362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p841_sel_1 = sel_2361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p841_sel_1 = sel_2360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p841_sel_1 = sel_2359;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p841_sel_1 = sel_2358;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p841_sel_1 = sel_2357;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p841_sel_1 = sel_2356;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p841_sel_1 = sel_2355;
        end
      default :
        begin
          p841_sel_1 = sel_4677;
        end
    endcase
    sel_1_1544 = p841_sel_1;
  end

  assign sel_4678 = 1'b0;

  always @(is_SPI_MNGR_68, sel_2721, sel_2722, sel_2723, sel_2724, sel_2725, sel_2726,
       sel_2727, sel_2728, sel_2729, sel_2730, sel_2731, sel_2732, sel_2733,
       sel_2739, sel_2_150, sel_2_151, sel_4678) begin
    case ( is_SPI_MNGR_68)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p824_sel_2 = sel_2739;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p824_sel_2 = sel_2_151;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p824_sel_2 = sel_2_150;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p824_sel_2 = sel_2733;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p824_sel_2 = sel_2732;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p824_sel_2 = sel_2731;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p824_sel_2 = sel_2730;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p824_sel_2 = sel_2729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p824_sel_2 = sel_2728;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p824_sel_2 = sel_2727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p824_sel_2 = sel_2726;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p824_sel_2 = sel_2725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p824_sel_2 = sel_2724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p824_sel_2 = sel_2723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p824_sel_2 = sel_2722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p824_sel_2 = sel_2721;
        end
      default :
        begin
          p824_sel_2 = sel_4678;
        end
    endcase
    sel_2_263 = p824_sel_2;
  end

  assign sel_4679 = 8'd0;

  always @(is_SPI_MNGR_69, sel_1_1024, sel_1_1025, sel_2740, sel_2741, sel_2742, sel_2743,
       sel_2744, sel_2745, sel_2746, sel_2747, sel_2748, sel_2749, sel_2750,
       sel_2751, sel_3104, sel_3105, sel_4679) begin
    case ( is_SPI_MNGR_69)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p775_sel_1 = sel_3105;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p775_sel_1 = sel_1_1025;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p775_sel_1 = sel_1_1024;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p775_sel_1 = sel_3104;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p775_sel_1 = sel_2751;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p775_sel_1 = sel_2750;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p775_sel_1 = sel_2749;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p775_sel_1 = sel_2748;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p775_sel_1 = sel_2747;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p775_sel_1 = sel_2746;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p775_sel_1 = sel_2745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p775_sel_1 = sel_2744;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p775_sel_1 = sel_2743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p775_sel_1 = sel_2742;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p775_sel_1 = sel_2741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p775_sel_1 = sel_2740;
        end
      default :
        begin
          p775_sel_1 = sel_4679;
        end
    endcase
    sel_1_1545 = p775_sel_1;
  end

  assign sel_4680 = 1'b0;

  always @(is_SPI_MNGR_71, sel_2_171, sel_2_172, sel_3106, sel_3107, sel_3108, sel_3109,
       sel_3110, sel_3111, sel_3112, sel_3113, sel_3114, sel_3115, sel_3116,
       sel_3117, sel_3118, sel_3124, sel_4680) begin
    case ( is_SPI_MNGR_71)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p758_sel_2 = sel_3124;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p758_sel_2 = sel_2_172;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p758_sel_2 = sel_2_171;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p758_sel_2 = sel_3118;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p758_sel_2 = sel_3117;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p758_sel_2 = sel_3116;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p758_sel_2 = sel_3115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p758_sel_2 = sel_3114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p758_sel_2 = sel_3113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p758_sel_2 = sel_3112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p758_sel_2 = sel_3111;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p758_sel_2 = sel_3110;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p758_sel_2 = sel_3109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p758_sel_2 = sel_3108;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p758_sel_2 = sel_3107;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p758_sel_2 = sel_3106;
        end
      default :
        begin
          p758_sel_2 = sel_4680;
        end
    endcase
    sel_2_264 = p758_sel_2;
  end

  assign sel_4681 = 8'd0;

  always @(is_SPI_MNGR_72, sel_1_1152, sel_1_1153, sel_3125, sel_3126, sel_3127, sel_3128,
       sel_3129, sel_3130, sel_3131, sel_3132, sel_3133, sel_3134, sel_3135,
       sel_3136, sel_3489, sel_3490, sel_4681) begin
    case ( is_SPI_MNGR_72)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p709_sel_1 = sel_3490;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p709_sel_1 = sel_1_1153;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p709_sel_1 = sel_1_1152;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p709_sel_1 = sel_3489;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p709_sel_1 = sel_3136;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p709_sel_1 = sel_3135;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p709_sel_1 = sel_3134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p709_sel_1 = sel_3133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p709_sel_1 = sel_3132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p709_sel_1 = sel_3131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p709_sel_1 = sel_3130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p709_sel_1 = sel_3129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p709_sel_1 = sel_3128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p709_sel_1 = sel_3127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p709_sel_1 = sel_3126;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p709_sel_1 = sel_3125;
        end
      default :
        begin
          p709_sel_1 = sel_4681;
        end
    endcase
    sel_1_1546 = p709_sel_1;
  end

  assign sel_4682 = 1'b0;

  always @(is_SPI_MNGR_74, sel_2_192, sel_2_193, sel_3491, sel_3492, sel_3493, sel_3494,
       sel_3495, sel_3496, sel_3497, sel_3498, sel_3499, sel_3500, sel_3501,
       sel_3502, sel_3503, sel_3509, sel_4682) begin
    case ( is_SPI_MNGR_74)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p692_sel_2 = sel_3509;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p692_sel_2 = sel_2_193;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p692_sel_2 = sel_2_192;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p692_sel_2 = sel_3503;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p692_sel_2 = sel_3502;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p692_sel_2 = sel_3501;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p692_sel_2 = sel_3500;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p692_sel_2 = sel_3499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p692_sel_2 = sel_3498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p692_sel_2 = sel_3497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p692_sel_2 = sel_3496;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p692_sel_2 = sel_3495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p692_sel_2 = sel_3494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p692_sel_2 = sel_3493;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p692_sel_2 = sel_3492;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p692_sel_2 = sel_3491;
        end
      default :
        begin
          p692_sel_2 = sel_4682;
        end
    endcase
    sel_2_265 = p692_sel_2;
  end

  assign sel_4683 = 8'd0;

  always @(is_SPI_MNGR_75, sel_1_1280, sel_1_1281, sel_3510, sel_3511, sel_3512, sel_3513,
       sel_3514, sel_3515, sel_3516, sel_3517, sel_3518, sel_3519, sel_3520,
       sel_3521, sel_3874, sel_3875, sel_4683) begin
    case ( is_SPI_MNGR_75)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p643_sel_1 = sel_3875;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p643_sel_1 = sel_1_1281;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p643_sel_1 = sel_1_1280;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p643_sel_1 = sel_3874;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p643_sel_1 = sel_3521;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p643_sel_1 = sel_3520;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p643_sel_1 = sel_3519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p643_sel_1 = sel_3518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p643_sel_1 = sel_3517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p643_sel_1 = sel_3516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p643_sel_1 = sel_3515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p643_sel_1 = sel_3514;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p643_sel_1 = sel_3513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p643_sel_1 = sel_3512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p643_sel_1 = sel_3511;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p643_sel_1 = sel_3510;
        end
      default :
        begin
          p643_sel_1 = sel_4683;
        end
    endcase
    sel_1_1547 = p643_sel_1;
  end

  assign sel_4684 = 1'b0;

  always @(is_SPI_MNGR_77, sel_2_213, sel_2_214, sel_3876, sel_3877, sel_3878, sel_3879,
       sel_3880, sel_3881, sel_3882, sel_3883, sel_3884, sel_3885, sel_3886,
       sel_3887, sel_3888, sel_3894, sel_4684) begin
    case ( is_SPI_MNGR_77)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p626_sel_2 = sel_3894;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p626_sel_2 = sel_2_214;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p626_sel_2 = sel_2_213;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p626_sel_2 = sel_3888;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p626_sel_2 = sel_3887;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p626_sel_2 = sel_3886;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p626_sel_2 = sel_3885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p626_sel_2 = sel_3884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p626_sel_2 = sel_3883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p626_sel_2 = sel_3882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p626_sel_2 = sel_3881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p626_sel_2 = sel_3880;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p626_sel_2 = sel_3879;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p626_sel_2 = sel_3878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p626_sel_2 = sel_3877;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p626_sel_2 = sel_3876;
        end
      default :
        begin
          p626_sel_2 = sel_4684;
        end
    endcase
    sel_2_266 = p626_sel_2;
  end

  assign sel_4685 = 8'd0;

  always @(is_SPI_MNGR_78, sel_1_1408, sel_1_1409, sel_3895, sel_3896, sel_3897, sel_3898,
       sel_3899, sel_3900, sel_3901, sel_3902, sel_3903, sel_3904, sel_3905,
       sel_3906, sel_4259, sel_4260, sel_4685) begin
    case ( is_SPI_MNGR_78)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p577_sel_1 = sel_4260;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p577_sel_1 = sel_1_1409;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p577_sel_1 = sel_1_1408;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p577_sel_1 = sel_4259;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p577_sel_1 = sel_3906;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p577_sel_1 = sel_3905;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p577_sel_1 = sel_3904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p577_sel_1 = sel_3903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p577_sel_1 = sel_3902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p577_sel_1 = sel_3901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p577_sel_1 = sel_3900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p577_sel_1 = sel_3899;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p577_sel_1 = sel_3898;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p577_sel_1 = sel_3897;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p577_sel_1 = sel_3896;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p577_sel_1 = sel_3895;
        end
      default :
        begin
          p577_sel_1 = sel_4685;
        end
    endcase
    sel_1_1548 = p577_sel_1;
  end

  assign sel_4686 = 1'b0;

  always @(is_SPI_MNGR_80, sel_2_234, sel_2_235, sel_4261, sel_4262, sel_4263, sel_4264,
       sel_4265, sel_4266, sel_4267, sel_4268, sel_4269, sel_4270, sel_4271,
       sel_4272, sel_4273, sel_4279, sel_4686) begin
    case ( is_SPI_MNGR_80)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p560_sel_2 = sel_4279;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p560_sel_2 = sel_2_235;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p560_sel_2 = sel_2_234;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p560_sel_2 = sel_4273;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p560_sel_2 = sel_4272;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p560_sel_2 = sel_4271;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p560_sel_2 = sel_4270;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p560_sel_2 = sel_4269;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p560_sel_2 = sel_4268;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p560_sel_2 = sel_4267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p560_sel_2 = sel_4266;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p560_sel_2 = sel_4265;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p560_sel_2 = sel_4264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p560_sel_2 = sel_4263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p560_sel_2 = sel_4262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p560_sel_2 = sel_4261;
        end
      default :
        begin
          p560_sel_2 = sel_4686;
        end
    endcase
    sel_2_267 = p560_sel_2;
  end

  assign sel_4687 = 8'd0;

  always @(is_SPI_MNGR_81, sel_1_1536, sel_1_1537, sel_4280, sel_4281, sel_4282, sel_4283,
       sel_4284, sel_4285, sel_4286, sel_4287, sel_4288, sel_4289, sel_4290,
       sel_4291, sel_4644, sel_4645, sel_4687) begin
    case ( is_SPI_MNGR_81)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p511_sel_1 = sel_4645;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p511_sel_1 = sel_1_1537;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p511_sel_1 = sel_1_1536;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p511_sel_1 = sel_4644;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p511_sel_1 = sel_4291;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p511_sel_1 = sel_4290;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p511_sel_1 = sel_4289;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p511_sel_1 = sel_4288;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p511_sel_1 = sel_4287;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p511_sel_1 = sel_4286;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p511_sel_1 = sel_4285;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p511_sel_1 = sel_4284;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p511_sel_1 = sel_4283;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p511_sel_1 = sel_4282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p511_sel_1 = sel_4281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p511_sel_1 = sel_4280;
        end
      default :
        begin
          p511_sel_1 = sel_4687;
        end
    endcase
    sel_1_1549 = p511_sel_1;
  end

  assign sel_4688 = 1'b0;

  always @(is_SPI_MNGR_83, sel_2_255, sel_2_256, sel_4646, sel_4647, sel_4648, sel_4649,
       sel_4650, sel_4651, sel_4652, sel_4653, sel_4654, sel_4655, sel_4656,
       sel_4657, sel_4658, sel_4664, sel_4688) begin
    case ( is_SPI_MNGR_83)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p494_sel_2 = sel_4664;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p494_sel_2 = sel_2_256;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p494_sel_2 = sel_2_255;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p494_sel_2 = sel_4658;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p494_sel_2 = sel_4657;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p494_sel_2 = sel_4656;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p494_sel_2 = sel_4655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p494_sel_2 = sel_4654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p494_sel_2 = sel_4653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p494_sel_2 = sel_4652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p494_sel_2 = sel_4651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p494_sel_2 = sel_4650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p494_sel_2 = sel_4649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p494_sel_2 = sel_4648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p494_sel_2 = sel_4647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p494_sel_2 = sel_4646;
        end
      default :
        begin
          p494_sel_2 = sel_4688;
        end
    endcase
    sel_2_268 = p494_sel_2;
  end

  always @(posedge clk)
    begin : rd_539_process
      if (rst == 1'b1) begin
        for(rd_539_t_1 = 32'sd0; rd_539_t_1 <= 32'sd11; rd_539_t_1 = rd_539_t_1 + 32'sd1) begin
          rd_539_reg[rd_539_t_1] <= 8'b00000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_539_t_0_1 = 32'sd0; rd_539_t_0_1 <= 32'sd11; rd_539_t_0_1 = rd_539_t_0_1 + 32'sd1) begin
            rd_539_reg[rd_539_t_0_1] <= rd_539_reg_next[rd_539_t_0_1];
          end
        end
      end
    end
  genvar t_0_0121;
  generate
    for(t_0_0121 = 32'sd0; t_0_0121 <= 32'sd11; t_0_0121 = t_0_0121 + 32'sd1) begin:rd_539_reg_next_gen
      assign tmp_637[t_0_0121] = rd_539_reg[t_0_0121];
      assign rd_539_reg_next[t_0_0121] = tmp_636[t_0_0121];
    end
  endgenerate

  always @* begin
    p1166cont_bits_cont_bits[0] = tmp_637[0];
    if (sel_2_257) begin
      p1166cont_bits_cont_bits[0] = sel_1_1538;
    end
    cont_bits[0] = p1166cont_bits_cont_bits[0];
    cont_bits[1] = tmp_637[1];
    cont_bits[2] = tmp_637[2];
    cont_bits[3] = tmp_637[3];
    cont_bits[4] = tmp_637[4];
    cont_bits[5] = tmp_637[5];
    cont_bits[6] = tmp_637[6];
    cont_bits[7] = tmp_637[7];
    cont_bits[8] = tmp_637[8];
    cont_bits[9] = tmp_637[9];
    cont_bits[10] = tmp_637[10];
    cont_bits[11] = tmp_637[11];
  end

  always @* begin
    p1111cont_bits_cont_bits[1] = cont_bits[1];
    if (sel_2_258) begin
      p1111cont_bits_cont_bits[1] = sel_1_1539;
    end
    cont_bits_1[0] = cont_bits[0];
    cont_bits_1[1] = p1111cont_bits_cont_bits[1];
    cont_bits_1[2] = cont_bits[2];
    cont_bits_1[3] = cont_bits[3];
    cont_bits_1[4] = cont_bits[4];
    cont_bits_1[5] = cont_bits[5];
    cont_bits_1[6] = cont_bits[6];
    cont_bits_1[7] = cont_bits[7];
    cont_bits_1[8] = cont_bits[8];
    cont_bits_1[9] = cont_bits[9];
    cont_bits_1[10] = cont_bits[10];
    cont_bits_1[11] = cont_bits[11];
  end

  always @* begin
    p1056cont_bits_cont_bits[2] = cont_bits_1[2];
    if (sel_2_259) begin
      p1056cont_bits_cont_bits[2] = sel_1_1540;
    end
    cont_bits_2[0] = cont_bits_1[0];
    cont_bits_2[1] = cont_bits_1[1];
    cont_bits_2[2] = p1056cont_bits_cont_bits[2];
    cont_bits_2[3] = cont_bits_1[3];
    cont_bits_2[4] = cont_bits_1[4];
    cont_bits_2[5] = cont_bits_1[5];
    cont_bits_2[6] = cont_bits_1[6];
    cont_bits_2[7] = cont_bits_1[7];
    cont_bits_2[8] = cont_bits_1[8];
    cont_bits_2[9] = cont_bits_1[9];
    cont_bits_2[10] = cont_bits_1[10];
    cont_bits_2[11] = cont_bits_1[11];
  end

  always @* begin
    p990cont_bits_cont_bits[3] = cont_bits_2[3];
    if (sel_2_260) begin
      p990cont_bits_cont_bits[3] = sel_1_1541;
    end
    cont_bits_3[0] = cont_bits_2[0];
    cont_bits_3[1] = cont_bits_2[1];
    cont_bits_3[2] = cont_bits_2[2];
    cont_bits_3[3] = p990cont_bits_cont_bits[3];
    cont_bits_3[4] = cont_bits_2[4];
    cont_bits_3[5] = cont_bits_2[5];
    cont_bits_3[6] = cont_bits_2[6];
    cont_bits_3[7] = cont_bits_2[7];
    cont_bits_3[8] = cont_bits_2[8];
    cont_bits_3[9] = cont_bits_2[9];
    cont_bits_3[10] = cont_bits_2[10];
    cont_bits_3[11] = cont_bits_2[11];
  end

  always @* begin
    p924cont_bits_cont_bits[4] = cont_bits_3[4];
    if (sel_2_261) begin
      p924cont_bits_cont_bits[4] = sel_1_1542;
    end
    cont_bits_4[0] = cont_bits_3[0];
    cont_bits_4[1] = cont_bits_3[1];
    cont_bits_4[2] = cont_bits_3[2];
    cont_bits_4[3] = cont_bits_3[3];
    cont_bits_4[4] = p924cont_bits_cont_bits[4];
    cont_bits_4[5] = cont_bits_3[5];
    cont_bits_4[6] = cont_bits_3[6];
    cont_bits_4[7] = cont_bits_3[7];
    cont_bits_4[8] = cont_bits_3[8];
    cont_bits_4[9] = cont_bits_3[9];
    cont_bits_4[10] = cont_bits_3[10];
    cont_bits_4[11] = cont_bits_3[11];
  end

  always @* begin
    p858cont_bits_cont_bits[5] = cont_bits_4[5];
    if (sel_2_262) begin
      p858cont_bits_cont_bits[5] = sel_1_1543;
    end
    cont_bits_5[0] = cont_bits_4[0];
    cont_bits_5[1] = cont_bits_4[1];
    cont_bits_5[2] = cont_bits_4[2];
    cont_bits_5[3] = cont_bits_4[3];
    cont_bits_5[4] = cont_bits_4[4];
    cont_bits_5[5] = p858cont_bits_cont_bits[5];
    cont_bits_5[6] = cont_bits_4[6];
    cont_bits_5[7] = cont_bits_4[7];
    cont_bits_5[8] = cont_bits_4[8];
    cont_bits_5[9] = cont_bits_4[9];
    cont_bits_5[10] = cont_bits_4[10];
    cont_bits_5[11] = cont_bits_4[11];
  end

  always @* begin
    p792cont_bits_cont_bits[6] = cont_bits_5[6];
    if (sel_2_263) begin
      p792cont_bits_cont_bits[6] = sel_1_1544;
    end
    cont_bits_6[0] = cont_bits_5[0];
    cont_bits_6[1] = cont_bits_5[1];
    cont_bits_6[2] = cont_bits_5[2];
    cont_bits_6[3] = cont_bits_5[3];
    cont_bits_6[4] = cont_bits_5[4];
    cont_bits_6[5] = cont_bits_5[5];
    cont_bits_6[6] = p792cont_bits_cont_bits[6];
    cont_bits_6[7] = cont_bits_5[7];
    cont_bits_6[8] = cont_bits_5[8];
    cont_bits_6[9] = cont_bits_5[9];
    cont_bits_6[10] = cont_bits_5[10];
    cont_bits_6[11] = cont_bits_5[11];
  end

  always @* begin
    p726cont_bits_cont_bits[7] = cont_bits_6[7];
    if (sel_2_264) begin
      p726cont_bits_cont_bits[7] = sel_1_1545;
    end
    cont_bits_7[0] = cont_bits_6[0];
    cont_bits_7[1] = cont_bits_6[1];
    cont_bits_7[2] = cont_bits_6[2];
    cont_bits_7[3] = cont_bits_6[3];
    cont_bits_7[4] = cont_bits_6[4];
    cont_bits_7[5] = cont_bits_6[5];
    cont_bits_7[6] = cont_bits_6[6];
    cont_bits_7[7] = p726cont_bits_cont_bits[7];
    cont_bits_7[8] = cont_bits_6[8];
    cont_bits_7[9] = cont_bits_6[9];
    cont_bits_7[10] = cont_bits_6[10];
    cont_bits_7[11] = cont_bits_6[11];
  end

  always @* begin
    p660cont_bits_cont_bits[8] = cont_bits_7[8];
    if (sel_2_265) begin
      p660cont_bits_cont_bits[8] = sel_1_1546;
    end
    cont_bits_8[0] = cont_bits_7[0];
    cont_bits_8[1] = cont_bits_7[1];
    cont_bits_8[2] = cont_bits_7[2];
    cont_bits_8[3] = cont_bits_7[3];
    cont_bits_8[4] = cont_bits_7[4];
    cont_bits_8[5] = cont_bits_7[5];
    cont_bits_8[6] = cont_bits_7[6];
    cont_bits_8[7] = cont_bits_7[7];
    cont_bits_8[8] = p660cont_bits_cont_bits[8];
    cont_bits_8[9] = cont_bits_7[9];
    cont_bits_8[10] = cont_bits_7[10];
    cont_bits_8[11] = cont_bits_7[11];
  end

  always @* begin
    p594cont_bits_cont_bits[9] = cont_bits_8[9];
    if (sel_2_266) begin
      p594cont_bits_cont_bits[9] = sel_1_1547;
    end
    cont_bits_9[0] = cont_bits_8[0];
    cont_bits_9[1] = cont_bits_8[1];
    cont_bits_9[2] = cont_bits_8[2];
    cont_bits_9[3] = cont_bits_8[3];
    cont_bits_9[4] = cont_bits_8[4];
    cont_bits_9[5] = cont_bits_8[5];
    cont_bits_9[6] = cont_bits_8[6];
    cont_bits_9[7] = cont_bits_8[7];
    cont_bits_9[8] = cont_bits_8[8];
    cont_bits_9[9] = p594cont_bits_cont_bits[9];
    cont_bits_9[10] = cont_bits_8[10];
    cont_bits_9[11] = cont_bits_8[11];
  end

  always @* begin
    p528cont_bits_cont_bits[10] = cont_bits_9[10];
    if (sel_2_267) begin
      p528cont_bits_cont_bits[10] = sel_1_1548;
    end
    cont_bits_10[0] = cont_bits_9[0];
    cont_bits_10[1] = cont_bits_9[1];
    cont_bits_10[2] = cont_bits_9[2];
    cont_bits_10[3] = cont_bits_9[3];
    cont_bits_10[4] = cont_bits_9[4];
    cont_bits_10[5] = cont_bits_9[5];
    cont_bits_10[6] = cont_bits_9[6];
    cont_bits_10[7] = cont_bits_9[7];
    cont_bits_10[8] = cont_bits_9[8];
    cont_bits_10[9] = cont_bits_9[9];
    cont_bits_10[10] = p528cont_bits_cont_bits[10];
    cont_bits_10[11] = cont_bits_9[11];
  end

  always @* begin
    p358tmp_tmp[11] = cont_bits_10[11];
    if (sel_2_268) begin
      p358tmp_tmp[11] = sel_1_1549;
    end
    tmp_636[0] = cont_bits_10[0];
    tmp_636[1] = cont_bits_10[1];
    tmp_636[2] = cont_bits_10[2];
    tmp_636[3] = cont_bits_10[3];
    tmp_636[4] = cont_bits_10[4];
    tmp_636[5] = cont_bits_10[5];
    tmp_636[6] = cont_bits_10[6];
    tmp_636[7] = cont_bits_10[7];
    tmp_636[8] = cont_bits_10[8];
    tmp_636[9] = cont_bits_10[9];
    tmp_636[10] = cont_bits_10[10];
    tmp_636[11] = p358tmp_tmp[11];
  end

  assign s_581 = 32'sd0;

  assign s_582 = 32'sd0;

  assign s_583 = 32'sd0;

  assign s_584 = 32'sd0;

  assign s_585 = 32'sd0;

  assign s_586 = 32'sd0;

  assign s_587 = 32'sd0;

  assign sel_4689 = 32'sd0;

  assign sel_4690 = 32'sd0;

  assign sel_4691 = 32'sd0;

  assign sel_4692 = 32'sd0;

  assign sel_4693 = 32'sd0;

  assign sel_4694 = 32'sd0;

  assign sel_4695 = 32'sd0;

  assign sel_4696 = 32'sd0;

  assign sel_4697 = 32'sd0;

  assign s_588 = 32'sd1;

  always @(is_SPI_MNGR_38, s_581, s_582, s_583, s_584, s_585, s_586, s_587, s_588,
       sel_4689, sel_4690, sel_4691, sel_4692, sel_4693, sel_4694, sel_4695,
       sel_4696, sel_4697) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5436_sel_1 = sel_4697;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5436_sel_1 = sel_4696;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5436_sel_1 = sel_4695;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5436_sel_1 = sel_4694;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5436_sel_1 = sel_4693;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5436_sel_1 = sel_4692;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5436_sel_1 = sel_4691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5436_sel_1 = sel_4690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5436_sel_1 = sel_4689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5436_sel_1 = s_587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5436_sel_1 = s_586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5436_sel_1 = s_585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5436_sel_1 = s_584;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5436_sel_1 = s_583;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5436_sel_1 = s_582;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5436_sel_1 = s_581;
        end
      default :
        begin
          p5436_sel_1 = s_588;
        end
    endcase
    sel_1_1550 = p5436_sel_1;
  end

  assign s_589 = tmp_636[sel_1_1550];

  assign tmp_638 = {24'b0, s_589};

  assign tmp_639 = tmp_638 != 32'sd0;

  assign tmp_640 = {24'b0, s_589};

  assign tmp_641 = tmp_640 != 32'sd0;

  assign tmp_642 = {24'b0, s_589};

  assign tmp_643 = tmp_642 != 32'sd0;

  assign tmp_644 = {24'b0, s_589};

  assign tmp_645 = tmp_644 != 32'sd0;

  assign tmp_646 = {24'b0, s_589};

  assign tmp_647 = tmp_646 != 32'sd0;

  assign tmp_648 = {24'b0, s_589};

  assign tmp_649 = tmp_648 != 32'sd0;

  assign tmp_650 = {24'b0, s_589};

  assign tmp_651 = tmp_650 != 32'sd0;

  assign sel_4698 = 1'b0;

  assign sel_4699 = 1'b0;

  assign sel_4700 = 1'b0;

  assign sel_4701 = 1'b0;

  assign sel_4702 = 1'b0;

  assign sel_4703 = 1'b0;

  assign sel_4704 = 1'b0;

  assign sel_4705 = 1'b0;

  assign sel_4706 = 1'b0;

  assign s_590 = 32'sd11;

  assign s_591 = 32'sd11;

  assign s_592 = 32'sd11;

  assign s_593 = 32'sd11;

  assign s_594 = 32'sd11;

  assign s_595 = 32'sd11;

  assign s_596 = 32'sd11;

  assign sel_4707 = 32'sd0;

  assign sel_4708 = 32'sd0;

  assign sel_4709 = 32'sd0;

  assign sel_4710 = 32'sd0;

  assign sel_4711 = 32'sd0;

  assign sel_4712 = 32'sd0;

  assign sel_4713 = 32'sd0;

  assign sel_4714 = 32'sd0;

  assign sel_4715 = 32'sd0;

  assign s_597 = 32'sd0;

  always @(is_SPI_MNGR_38, s_590, s_591, s_592, s_593, s_594, s_595, s_596, s_597,
       sel_4707, sel_4708, sel_4709, sel_4710, sel_4711, sel_4712, sel_4713,
       sel_4714, sel_4715) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5216_sel_1 = sel_4715;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5216_sel_1 = sel_4714;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5216_sel_1 = sel_4713;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5216_sel_1 = sel_4712;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5216_sel_1 = sel_4711;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5216_sel_1 = sel_4710;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5216_sel_1 = sel_4709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5216_sel_1 = sel_4708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5216_sel_1 = sel_4707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5216_sel_1 = s_596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5216_sel_1 = s_595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5216_sel_1 = s_594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5216_sel_1 = s_593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5216_sel_1 = s_592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5216_sel_1 = s_591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5216_sel_1 = s_590;
        end
      default :
        begin
          p5216_sel_1 = s_597;
        end
    endcase
    sel_1_1551 = p5216_sel_1;
  end

  assign s_598 = tmp_636[sel_1_1551];

  assign tmp_652 = {24'b0, s_598};

  assign tmp_653 = tmp_652 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4698, sel_4699, sel_4700, sel_4701, sel_4702, sel_4703,
       sel_4704, sel_4705, sel_4706, tmp_639, tmp_641, tmp_643, tmp_645,
       tmp_647, tmp_649, tmp_651, tmp_653) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1011_sel_1 = sel_4706;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1011_sel_1 = sel_4705;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1011_sel_1 = sel_4704;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1011_sel_1 = sel_4703;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1011_sel_1 = sel_4702;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1011_sel_1 = sel_4701;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1011_sel_1 = sel_4700;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1011_sel_1 = sel_4699;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1011_sel_1 = sel_4698;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1011_sel_1 = tmp_651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1011_sel_1 = tmp_649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1011_sel_1 = tmp_647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1011_sel_1 = tmp_645;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1011_sel_1 = tmp_643;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1011_sel_1 = tmp_641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1011_sel_1 = tmp_639;
        end
      default :
        begin
          p1011_sel_1 = tmp_653;
        end
    endcase
    sel_1_1552 = p1011_sel_1;
  end

  assign s_599 = 1'b1;

  assign s_600 = 1'b1;

  assign s_601 = 1'b1;

  assign s_602 = 1'b1;

  assign s_603 = 1'b1;

  assign s_604 = 1'b1;

  assign s_605 = 1'b1;

  assign sel_4716 = 1'b0;

  assign sel_4717 = 1'b0;

  assign sel_4718 = 1'b0;

  assign sel_4719 = 1'b0;

  assign sel_4720 = 1'b0;

  assign sel_4721 = 1'b0;

  assign sel_4722 = 1'b0;

  assign sel_4723 = 1'b0;

  assign sel_4724 = 1'b0;

  assign s_606 = 1'b1;

  always @(is_SPI_MNGR_38, s_599, s_600, s_601, s_602, s_603, s_604, s_605, s_606,
       sel_4716, sel_4717, sel_4718, sel_4719, sel_4720, sel_4721, sel_4722,
       sel_4723, sel_4724) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p992_sel_2 = sel_4724;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p992_sel_2 = sel_4723;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p992_sel_2 = sel_4722;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p992_sel_2 = sel_4721;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p992_sel_2 = sel_4720;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p992_sel_2 = sel_4719;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p992_sel_2 = sel_4718;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p992_sel_2 = sel_4717;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p992_sel_2 = sel_4716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p992_sel_2 = s_605;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p992_sel_2 = s_604;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p992_sel_2 = s_603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p992_sel_2 = s_602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p992_sel_2 = s_601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p992_sel_2 = s_600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p992_sel_2 = s_599;
        end
      default :
        begin
          p992_sel_2 = s_606;
        end
    endcase
    sel_2_269 = p992_sel_2;
  end

  assign s_607 = 32'sd1;

  assign s_608 = 32'sd1;

  assign s_609 = 32'sd1;

  assign s_610 = 32'sd1;

  assign s_611 = 32'sd1;

  assign s_612 = 32'sd1;

  assign s_613 = 32'sd1;

  assign sel_4725 = 32'sd0;

  assign sel_4726 = 32'sd0;

  assign sel_4727 = 32'sd0;

  assign sel_4728 = 32'sd0;

  assign sel_4729 = 32'sd0;

  assign sel_4730 = 32'sd0;

  assign sel_4731 = 32'sd0;

  assign sel_4732 = 32'sd0;

  assign sel_4733 = 32'sd0;

  assign s_614 = 32'sd2;

  always @(is_SPI_MNGR_38, s_607, s_608, s_609, s_610, s_611, s_612, s_613, s_614,
       sel_4725, sel_4726, sel_4727, sel_4728, sel_4729, sel_4730, sel_4731,
       sel_4732, sel_4733) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5416_sel_1 = sel_4733;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5416_sel_1 = sel_4732;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5416_sel_1 = sel_4731;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5416_sel_1 = sel_4730;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5416_sel_1 = sel_4729;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5416_sel_1 = sel_4728;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5416_sel_1 = sel_4727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5416_sel_1 = sel_4726;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5416_sel_1 = sel_4725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5416_sel_1 = s_613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5416_sel_1 = s_612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5416_sel_1 = s_611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5416_sel_1 = s_610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5416_sel_1 = s_609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5416_sel_1 = s_608;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5416_sel_1 = s_607;
        end
      default :
        begin
          p5416_sel_1 = s_614;
        end
    endcase
    sel_1_1553 = p5416_sel_1;
  end

  assign s_615 = tmp_636[sel_1_1553];

  assign tmp_654 = {24'b0, s_615};

  assign tmp_655 = tmp_654 != 32'sd0;

  assign tmp_656 = {24'b0, s_615};

  assign tmp_657 = tmp_656 != 32'sd0;

  assign tmp_658 = {24'b0, s_615};

  assign tmp_659 = tmp_658 != 32'sd0;

  assign tmp_660 = {24'b0, s_615};

  assign tmp_661 = tmp_660 != 32'sd0;

  assign tmp_662 = {24'b0, s_615};

  assign tmp_663 = tmp_662 != 32'sd0;

  assign tmp_664 = {24'b0, s_615};

  assign tmp_665 = tmp_664 != 32'sd0;

  assign tmp_666 = {24'b0, s_615};

  assign tmp_667 = tmp_666 != 32'sd0;

  assign sel_4734 = 1'b0;

  assign sel_4735 = 1'b0;

  assign sel_4736 = 1'b0;

  assign sel_4737 = 1'b0;

  assign sel_4738 = 1'b0;

  assign sel_4739 = 1'b0;

  assign sel_4740 = 1'b0;

  assign sel_4741 = 1'b0;

  assign sel_4742 = 1'b0;

  assign tmp_668 = {24'b0, s_589};

  assign tmp_669 = tmp_668 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4734, sel_4735, sel_4736, sel_4737, sel_4738, sel_4739,
       sel_4740, sel_4741, sel_4742, tmp_655, tmp_657, tmp_659, tmp_661,
       tmp_663, tmp_665, tmp_667, tmp_669) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p945_sel_1 = sel_4742;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p945_sel_1 = sel_4741;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p945_sel_1 = sel_4740;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p945_sel_1 = sel_4739;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p945_sel_1 = sel_4738;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p945_sel_1 = sel_4737;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p945_sel_1 = sel_4736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p945_sel_1 = sel_4735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p945_sel_1 = sel_4734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p945_sel_1 = tmp_667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p945_sel_1 = tmp_665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p945_sel_1 = tmp_663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p945_sel_1 = tmp_661;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p945_sel_1 = tmp_659;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p945_sel_1 = tmp_657;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p945_sel_1 = tmp_655;
        end
      default :
        begin
          p945_sel_1 = tmp_669;
        end
    endcase
    sel_1_1554 = p945_sel_1;
  end

  assign s_616 = 1'b1;

  assign s_617 = 1'b1;

  assign s_618 = 1'b1;

  assign s_619 = 1'b1;

  assign s_620 = 1'b1;

  assign s_621 = 1'b1;

  assign s_622 = 1'b1;

  assign sel_4743 = 1'b0;

  assign sel_4744 = 1'b0;

  assign sel_4745 = 1'b0;

  assign sel_4746 = 1'b0;

  assign sel_4747 = 1'b0;

  assign sel_4748 = 1'b0;

  assign sel_4749 = 1'b0;

  assign sel_4750 = 1'b0;

  assign sel_4751 = 1'b0;

  assign s_623 = 1'b1;

  always @(is_SPI_MNGR_38, s_616, s_617, s_618, s_619, s_620, s_621, s_622, s_623,
       sel_4743, sel_4744, sel_4745, sel_4746, sel_4747, sel_4748, sel_4749,
       sel_4750, sel_4751) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p926_sel_2 = sel_4751;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p926_sel_2 = sel_4750;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p926_sel_2 = sel_4749;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p926_sel_2 = sel_4748;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p926_sel_2 = sel_4747;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p926_sel_2 = sel_4746;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p926_sel_2 = sel_4745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p926_sel_2 = sel_4744;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p926_sel_2 = sel_4743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p926_sel_2 = s_622;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p926_sel_2 = s_621;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p926_sel_2 = s_620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p926_sel_2 = s_619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p926_sel_2 = s_618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p926_sel_2 = s_617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p926_sel_2 = s_616;
        end
      default :
        begin
          p926_sel_2 = s_623;
        end
    endcase
    sel_2_270 = p926_sel_2;
  end

  assign s_624 = 32'sd2;

  assign s_625 = 32'sd2;

  assign s_626 = 32'sd2;

  assign s_627 = 32'sd2;

  assign s_628 = 32'sd2;

  assign s_629 = 32'sd2;

  assign s_630 = 32'sd2;

  assign sel_4752 = 32'sd0;

  assign sel_4753 = 32'sd0;

  assign sel_4754 = 32'sd0;

  assign sel_4755 = 32'sd0;

  assign sel_4756 = 32'sd0;

  assign sel_4757 = 32'sd0;

  assign sel_4758 = 32'sd0;

  assign sel_4759 = 32'sd0;

  assign sel_4760 = 32'sd0;

  assign s_631 = 32'sd3;

  always @(is_SPI_MNGR_38, s_624, s_625, s_626, s_627, s_628, s_629, s_630, s_631,
       sel_4752, sel_4753, sel_4754, sel_4755, sel_4756, sel_4757, sel_4758,
       sel_4759, sel_4760) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5396_sel_1 = sel_4760;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5396_sel_1 = sel_4759;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5396_sel_1 = sel_4758;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5396_sel_1 = sel_4757;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5396_sel_1 = sel_4756;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5396_sel_1 = sel_4755;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5396_sel_1 = sel_4754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5396_sel_1 = sel_4753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5396_sel_1 = sel_4752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5396_sel_1 = s_630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5396_sel_1 = s_629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5396_sel_1 = s_628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5396_sel_1 = s_627;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5396_sel_1 = s_626;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5396_sel_1 = s_625;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5396_sel_1 = s_624;
        end
      default :
        begin
          p5396_sel_1 = s_631;
        end
    endcase
    sel_1_1555 = p5396_sel_1;
  end

  assign s_632 = tmp_636[sel_1_1555];

  assign tmp_670 = {24'b0, s_632};

  assign tmp_671 = tmp_670 != 32'sd0;

  assign tmp_672 = {24'b0, s_632};

  assign tmp_673 = tmp_672 != 32'sd0;

  assign tmp_674 = {24'b0, s_632};

  assign tmp_675 = tmp_674 != 32'sd0;

  assign tmp_676 = {24'b0, s_632};

  assign tmp_677 = tmp_676 != 32'sd0;

  assign tmp_678 = {24'b0, s_632};

  assign tmp_679 = tmp_678 != 32'sd0;

  assign tmp_680 = {24'b0, s_632};

  assign tmp_681 = tmp_680 != 32'sd0;

  assign tmp_682 = {24'b0, s_632};

  assign tmp_683 = tmp_682 != 32'sd0;

  assign sel_4761 = 1'b0;

  assign sel_4762 = 1'b0;

  assign sel_4763 = 1'b0;

  assign sel_4764 = 1'b0;

  assign sel_4765 = 1'b0;

  assign sel_4766 = 1'b0;

  assign sel_4767 = 1'b0;

  assign sel_4768 = 1'b0;

  assign sel_4769 = 1'b0;

  assign tmp_684 = {24'b0, s_615};

  assign tmp_685 = tmp_684 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4761, sel_4762, sel_4763, sel_4764, sel_4765, sel_4766,
       sel_4767, sel_4768, sel_4769, tmp_671, tmp_673, tmp_675, tmp_677,
       tmp_679, tmp_681, tmp_683, tmp_685) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p879_sel_1 = sel_4769;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p879_sel_1 = sel_4768;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p879_sel_1 = sel_4767;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p879_sel_1 = sel_4766;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p879_sel_1 = sel_4765;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p879_sel_1 = sel_4764;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p879_sel_1 = sel_4763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p879_sel_1 = sel_4762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p879_sel_1 = sel_4761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p879_sel_1 = tmp_683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p879_sel_1 = tmp_681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p879_sel_1 = tmp_679;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p879_sel_1 = tmp_677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p879_sel_1 = tmp_675;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p879_sel_1 = tmp_673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p879_sel_1 = tmp_671;
        end
      default :
        begin
          p879_sel_1 = tmp_685;
        end
    endcase
    sel_1_1556 = p879_sel_1;
  end

  assign s_633 = 1'b1;

  assign s_634 = 1'b1;

  assign s_635 = 1'b1;

  assign s_636 = 1'b1;

  assign s_637 = 1'b1;

  assign s_638 = 1'b1;

  assign s_639 = 1'b1;

  assign sel_4770 = 1'b0;

  assign sel_4771 = 1'b0;

  assign sel_4772 = 1'b0;

  assign sel_4773 = 1'b0;

  assign sel_4774 = 1'b0;

  assign sel_4775 = 1'b0;

  assign sel_4776 = 1'b0;

  assign sel_4777 = 1'b0;

  assign sel_4778 = 1'b0;

  assign s_640 = 1'b1;

  always @(is_SPI_MNGR_38, s_633, s_634, s_635, s_636, s_637, s_638, s_639, s_640,
       sel_4770, sel_4771, sel_4772, sel_4773, sel_4774, sel_4775, sel_4776,
       sel_4777, sel_4778) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p860_sel_2 = sel_4778;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p860_sel_2 = sel_4777;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p860_sel_2 = sel_4776;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p860_sel_2 = sel_4775;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p860_sel_2 = sel_4774;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p860_sel_2 = sel_4773;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p860_sel_2 = sel_4772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p860_sel_2 = sel_4771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p860_sel_2 = sel_4770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p860_sel_2 = s_639;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p860_sel_2 = s_638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p860_sel_2 = s_637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p860_sel_2 = s_636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p860_sel_2 = s_635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p860_sel_2 = s_634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p860_sel_2 = s_633;
        end
      default :
        begin
          p860_sel_2 = s_640;
        end
    endcase
    sel_2_271 = p860_sel_2;
  end

  assign s_641 = 32'sd3;

  assign s_642 = 32'sd3;

  assign s_643 = 32'sd3;

  assign s_644 = 32'sd3;

  assign s_645 = 32'sd3;

  assign s_646 = 32'sd3;

  assign s_647 = 32'sd3;

  assign sel_4779 = 32'sd0;

  assign sel_4780 = 32'sd0;

  assign sel_4781 = 32'sd0;

  assign sel_4782 = 32'sd0;

  assign sel_4783 = 32'sd0;

  assign sel_4784 = 32'sd0;

  assign sel_4785 = 32'sd0;

  assign sel_4786 = 32'sd0;

  assign sel_4787 = 32'sd0;

  assign s_648 = 32'sd4;

  always @(is_SPI_MNGR_38, s_641, s_642, s_643, s_644, s_645, s_646, s_647, s_648,
       sel_4779, sel_4780, sel_4781, sel_4782, sel_4783, sel_4784, sel_4785,
       sel_4786, sel_4787) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5376_sel_1 = sel_4787;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5376_sel_1 = sel_4786;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5376_sel_1 = sel_4785;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5376_sel_1 = sel_4784;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5376_sel_1 = sel_4783;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5376_sel_1 = sel_4782;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5376_sel_1 = sel_4781;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5376_sel_1 = sel_4780;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5376_sel_1 = sel_4779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5376_sel_1 = s_647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5376_sel_1 = s_646;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5376_sel_1 = s_645;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5376_sel_1 = s_644;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5376_sel_1 = s_643;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5376_sel_1 = s_642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5376_sel_1 = s_641;
        end
      default :
        begin
          p5376_sel_1 = s_648;
        end
    endcase
    sel_1_1557 = p5376_sel_1;
  end

  assign s_649 = tmp_636[sel_1_1557];

  assign tmp_686 = {24'b0, s_649};

  assign tmp_687 = tmp_686 != 32'sd0;

  assign tmp_688 = {24'b0, s_649};

  assign tmp_689 = tmp_688 != 32'sd0;

  assign tmp_690 = {24'b0, s_649};

  assign tmp_691 = tmp_690 != 32'sd0;

  assign tmp_692 = {24'b0, s_649};

  assign tmp_693 = tmp_692 != 32'sd0;

  assign tmp_694 = {24'b0, s_649};

  assign tmp_695 = tmp_694 != 32'sd0;

  assign tmp_696 = {24'b0, s_649};

  assign tmp_697 = tmp_696 != 32'sd0;

  assign tmp_698 = {24'b0, s_649};

  assign tmp_699 = tmp_698 != 32'sd0;

  assign sel_4788 = 1'b0;

  assign sel_4789 = 1'b0;

  assign sel_4790 = 1'b0;

  assign sel_4791 = 1'b0;

  assign sel_4792 = 1'b0;

  assign sel_4793 = 1'b0;

  assign sel_4794 = 1'b0;

  assign sel_4795 = 1'b0;

  assign sel_4796 = 1'b0;

  assign tmp_700 = {24'b0, s_632};

  assign tmp_701 = tmp_700 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4788, sel_4789, sel_4790, sel_4791, sel_4792, sel_4793,
       sel_4794, sel_4795, sel_4796, tmp_687, tmp_689, tmp_691, tmp_693,
       tmp_695, tmp_697, tmp_699, tmp_701) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p813_sel_1 = sel_4796;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p813_sel_1 = sel_4795;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p813_sel_1 = sel_4794;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p813_sel_1 = sel_4793;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p813_sel_1 = sel_4792;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p813_sel_1 = sel_4791;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p813_sel_1 = sel_4790;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p813_sel_1 = sel_4789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p813_sel_1 = sel_4788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p813_sel_1 = tmp_699;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p813_sel_1 = tmp_697;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p813_sel_1 = tmp_695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p813_sel_1 = tmp_693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p813_sel_1 = tmp_691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p813_sel_1 = tmp_689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p813_sel_1 = tmp_687;
        end
      default :
        begin
          p813_sel_1 = tmp_701;
        end
    endcase
    sel_1_1558 = p813_sel_1;
  end

  assign s_650 = 1'b1;

  assign s_651 = 1'b1;

  assign s_652 = 1'b1;

  assign s_653 = 1'b1;

  assign s_654 = 1'b1;

  assign s_655 = 1'b1;

  assign s_656 = 1'b1;

  assign sel_4797 = 1'b0;

  assign sel_4798 = 1'b0;

  assign sel_4799 = 1'b0;

  assign sel_4800 = 1'b0;

  assign sel_4801 = 1'b0;

  assign sel_4802 = 1'b0;

  assign sel_4803 = 1'b0;

  assign sel_4804 = 1'b0;

  assign sel_4805 = 1'b0;

  assign s_657 = 1'b1;

  always @(is_SPI_MNGR_38, s_650, s_651, s_652, s_653, s_654, s_655, s_656, s_657,
       sel_4797, sel_4798, sel_4799, sel_4800, sel_4801, sel_4802, sel_4803,
       sel_4804, sel_4805) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p794_sel_2 = sel_4805;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p794_sel_2 = sel_4804;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p794_sel_2 = sel_4803;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p794_sel_2 = sel_4802;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p794_sel_2 = sel_4801;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p794_sel_2 = sel_4800;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p794_sel_2 = sel_4799;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p794_sel_2 = sel_4798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p794_sel_2 = sel_4797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p794_sel_2 = s_656;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p794_sel_2 = s_655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p794_sel_2 = s_654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p794_sel_2 = s_653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p794_sel_2 = s_652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p794_sel_2 = s_651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p794_sel_2 = s_650;
        end
      default :
        begin
          p794_sel_2 = s_657;
        end
    endcase
    sel_2_272 = p794_sel_2;
  end

  assign s_658 = 32'sd4;

  assign s_659 = 32'sd4;

  assign s_660 = 32'sd4;

  assign s_661 = 32'sd4;

  assign s_662 = 32'sd4;

  assign s_663 = 32'sd4;

  assign s_664 = 32'sd4;

  assign sel_4806 = 32'sd0;

  assign sel_4807 = 32'sd0;

  assign sel_4808 = 32'sd0;

  assign sel_4809 = 32'sd0;

  assign sel_4810 = 32'sd0;

  assign sel_4811 = 32'sd0;

  assign sel_4812 = 32'sd0;

  assign sel_4813 = 32'sd0;

  assign sel_4814 = 32'sd0;

  assign s_665 = 32'sd5;

  always @(is_SPI_MNGR_38, s_658, s_659, s_660, s_661, s_662, s_663, s_664, s_665,
       sel_4806, sel_4807, sel_4808, sel_4809, sel_4810, sel_4811, sel_4812,
       sel_4813, sel_4814) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5356_sel_1 = sel_4814;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5356_sel_1 = sel_4813;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5356_sel_1 = sel_4812;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5356_sel_1 = sel_4811;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5356_sel_1 = sel_4810;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5356_sel_1 = sel_4809;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5356_sel_1 = sel_4808;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5356_sel_1 = sel_4807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5356_sel_1 = sel_4806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5356_sel_1 = s_664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5356_sel_1 = s_663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5356_sel_1 = s_662;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5356_sel_1 = s_661;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5356_sel_1 = s_660;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5356_sel_1 = s_659;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5356_sel_1 = s_658;
        end
      default :
        begin
          p5356_sel_1 = s_665;
        end
    endcase
    sel_1_1559 = p5356_sel_1;
  end

  assign s_666 = tmp_636[sel_1_1559];

  assign tmp_702 = {24'b0, s_666};

  assign tmp_703 = tmp_702 != 32'sd0;

  assign tmp_704 = {24'b0, s_666};

  assign tmp_705 = tmp_704 != 32'sd0;

  assign tmp_706 = {24'b0, s_666};

  assign tmp_707 = tmp_706 != 32'sd0;

  assign tmp_708 = {24'b0, s_666};

  assign tmp_709 = tmp_708 != 32'sd0;

  assign tmp_710 = {24'b0, s_666};

  assign tmp_711 = tmp_710 != 32'sd0;

  assign tmp_712 = {24'b0, s_666};

  assign tmp_713 = tmp_712 != 32'sd0;

  assign tmp_714 = {24'b0, s_666};

  assign tmp_715 = tmp_714 != 32'sd0;

  assign sel_4815 = 1'b0;

  assign sel_4816 = 1'b0;

  assign sel_4817 = 1'b0;

  assign sel_4818 = 1'b0;

  assign sel_4819 = 1'b0;

  assign sel_4820 = 1'b0;

  assign sel_4821 = 1'b0;

  assign sel_4822 = 1'b0;

  assign sel_4823 = 1'b0;

  assign tmp_716 = {24'b0, s_649};

  assign tmp_717 = tmp_716 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4815, sel_4816, sel_4817, sel_4818, sel_4819, sel_4820,
       sel_4821, sel_4822, sel_4823, tmp_703, tmp_705, tmp_707, tmp_709,
       tmp_711, tmp_713, tmp_715, tmp_717) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p747_sel_1 = sel_4823;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p747_sel_1 = sel_4822;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p747_sel_1 = sel_4821;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p747_sel_1 = sel_4820;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p747_sel_1 = sel_4819;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p747_sel_1 = sel_4818;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p747_sel_1 = sel_4817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p747_sel_1 = sel_4816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p747_sel_1 = sel_4815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p747_sel_1 = tmp_715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p747_sel_1 = tmp_713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p747_sel_1 = tmp_711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p747_sel_1 = tmp_709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p747_sel_1 = tmp_707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p747_sel_1 = tmp_705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p747_sel_1 = tmp_703;
        end
      default :
        begin
          p747_sel_1 = tmp_717;
        end
    endcase
    sel_1_1560 = p747_sel_1;
  end

  assign s_667 = 1'b1;

  assign s_668 = 1'b1;

  assign s_669 = 1'b1;

  assign s_670 = 1'b1;

  assign s_671 = 1'b1;

  assign s_672 = 1'b1;

  assign s_673 = 1'b1;

  assign sel_4824 = 1'b0;

  assign sel_4825 = 1'b0;

  assign sel_4826 = 1'b0;

  assign sel_4827 = 1'b0;

  assign sel_4828 = 1'b0;

  assign sel_4829 = 1'b0;

  assign sel_4830 = 1'b0;

  assign sel_4831 = 1'b0;

  assign sel_4832 = 1'b0;

  assign s_674 = 1'b1;

  always @(is_SPI_MNGR_38, s_667, s_668, s_669, s_670, s_671, s_672, s_673, s_674,
       sel_4824, sel_4825, sel_4826, sel_4827, sel_4828, sel_4829, sel_4830,
       sel_4831, sel_4832) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p728_sel_2 = sel_4832;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p728_sel_2 = sel_4831;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p728_sel_2 = sel_4830;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p728_sel_2 = sel_4829;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p728_sel_2 = sel_4828;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p728_sel_2 = sel_4827;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p728_sel_2 = sel_4826;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p728_sel_2 = sel_4825;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p728_sel_2 = sel_4824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p728_sel_2 = s_673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p728_sel_2 = s_672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p728_sel_2 = s_671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p728_sel_2 = s_670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p728_sel_2 = s_669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p728_sel_2 = s_668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p728_sel_2 = s_667;
        end
      default :
        begin
          p728_sel_2 = s_674;
        end
    endcase
    sel_2_273 = p728_sel_2;
  end

  assign s_675 = 32'sd5;

  assign s_676 = 32'sd5;

  assign s_677 = 32'sd5;

  assign s_678 = 32'sd5;

  assign s_679 = 32'sd5;

  assign s_680 = 32'sd5;

  assign s_681 = 32'sd5;

  assign sel_4833 = 32'sd0;

  assign sel_4834 = 32'sd0;

  assign sel_4835 = 32'sd0;

  assign sel_4836 = 32'sd0;

  assign sel_4837 = 32'sd0;

  assign sel_4838 = 32'sd0;

  assign sel_4839 = 32'sd0;

  assign sel_4840 = 32'sd0;

  assign sel_4841 = 32'sd0;

  assign s_682 = 32'sd6;

  always @(is_SPI_MNGR_38, s_675, s_676, s_677, s_678, s_679, s_680, s_681, s_682,
       sel_4833, sel_4834, sel_4835, sel_4836, sel_4837, sel_4838, sel_4839,
       sel_4840, sel_4841) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5336_sel_1 = sel_4841;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5336_sel_1 = sel_4840;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5336_sel_1 = sel_4839;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5336_sel_1 = sel_4838;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5336_sel_1 = sel_4837;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5336_sel_1 = sel_4836;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5336_sel_1 = sel_4835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5336_sel_1 = sel_4834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5336_sel_1 = sel_4833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5336_sel_1 = s_681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5336_sel_1 = s_680;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5336_sel_1 = s_679;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5336_sel_1 = s_678;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5336_sel_1 = s_677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5336_sel_1 = s_676;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5336_sel_1 = s_675;
        end
      default :
        begin
          p5336_sel_1 = s_682;
        end
    endcase
    sel_1_1561 = p5336_sel_1;
  end

  assign s_683 = tmp_636[sel_1_1561];

  assign tmp_718 = {24'b0, s_683};

  assign tmp_719 = tmp_718 != 32'sd0;

  assign tmp_720 = {24'b0, s_683};

  assign tmp_721 = tmp_720 != 32'sd0;

  assign tmp_722 = {24'b0, s_683};

  assign tmp_723 = tmp_722 != 32'sd0;

  assign tmp_724 = {24'b0, s_683};

  assign tmp_725 = tmp_724 != 32'sd0;

  assign tmp_726 = {24'b0, s_683};

  assign tmp_727 = tmp_726 != 32'sd0;

  assign tmp_728 = {24'b0, s_683};

  assign tmp_729 = tmp_728 != 32'sd0;

  assign tmp_730 = {24'b0, s_683};

  assign tmp_731 = tmp_730 != 32'sd0;

  assign sel_4842 = 1'b0;

  assign sel_4843 = 1'b0;

  assign sel_4844 = 1'b0;

  assign sel_4845 = 1'b0;

  assign sel_4846 = 1'b0;

  assign sel_4847 = 1'b0;

  assign sel_4848 = 1'b0;

  assign sel_4849 = 1'b0;

  assign sel_4850 = 1'b0;

  assign tmp_732 = {24'b0, s_666};

  assign tmp_733 = tmp_732 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4842, sel_4843, sel_4844, sel_4845, sel_4846, sel_4847,
       sel_4848, sel_4849, sel_4850, tmp_719, tmp_721, tmp_723, tmp_725,
       tmp_727, tmp_729, tmp_731, tmp_733) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p681_sel_1 = sel_4850;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p681_sel_1 = sel_4849;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p681_sel_1 = sel_4848;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p681_sel_1 = sel_4847;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p681_sel_1 = sel_4846;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p681_sel_1 = sel_4845;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p681_sel_1 = sel_4844;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p681_sel_1 = sel_4843;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p681_sel_1 = sel_4842;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p681_sel_1 = tmp_731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p681_sel_1 = tmp_729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p681_sel_1 = tmp_727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p681_sel_1 = tmp_725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p681_sel_1 = tmp_723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p681_sel_1 = tmp_721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p681_sel_1 = tmp_719;
        end
      default :
        begin
          p681_sel_1 = tmp_733;
        end
    endcase
    sel_1_1562 = p681_sel_1;
  end

  assign s_684 = 1'b1;

  assign s_685 = 1'b1;

  assign s_686 = 1'b1;

  assign s_687 = 1'b1;

  assign s_688 = 1'b1;

  assign s_689 = 1'b1;

  assign s_690 = 1'b1;

  assign sel_4851 = 1'b0;

  assign sel_4852 = 1'b0;

  assign sel_4853 = 1'b0;

  assign sel_4854 = 1'b0;

  assign sel_4855 = 1'b0;

  assign sel_4856 = 1'b0;

  assign sel_4857 = 1'b0;

  assign sel_4858 = 1'b0;

  assign sel_4859 = 1'b0;

  assign s_691 = 1'b1;

  always @(is_SPI_MNGR_38, s_684, s_685, s_686, s_687, s_688, s_689, s_690, s_691,
       sel_4851, sel_4852, sel_4853, sel_4854, sel_4855, sel_4856, sel_4857,
       sel_4858, sel_4859) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p662_sel_2 = sel_4859;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p662_sel_2 = sel_4858;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p662_sel_2 = sel_4857;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p662_sel_2 = sel_4856;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p662_sel_2 = sel_4855;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p662_sel_2 = sel_4854;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p662_sel_2 = sel_4853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p662_sel_2 = sel_4852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p662_sel_2 = sel_4851;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p662_sel_2 = s_690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p662_sel_2 = s_689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p662_sel_2 = s_688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p662_sel_2 = s_687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p662_sel_2 = s_686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p662_sel_2 = s_685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p662_sel_2 = s_684;
        end
      default :
        begin
          p662_sel_2 = s_691;
        end
    endcase
    sel_2_274 = p662_sel_2;
  end

  assign s_692 = 32'sd6;

  assign s_693 = 32'sd6;

  assign s_694 = 32'sd6;

  assign s_695 = 32'sd6;

  assign s_696 = 32'sd6;

  assign s_697 = 32'sd6;

  assign s_698 = 32'sd6;

  assign sel_4860 = 32'sd0;

  assign sel_4861 = 32'sd0;

  assign sel_4862 = 32'sd0;

  assign sel_4863 = 32'sd0;

  assign sel_4864 = 32'sd0;

  assign sel_4865 = 32'sd0;

  assign sel_4866 = 32'sd0;

  assign sel_4867 = 32'sd0;

  assign sel_4868 = 32'sd0;

  assign s_699 = 32'sd7;

  always @(is_SPI_MNGR_38, s_692, s_693, s_694, s_695, s_696, s_697, s_698, s_699,
       sel_4860, sel_4861, sel_4862, sel_4863, sel_4864, sel_4865, sel_4866,
       sel_4867, sel_4868) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5316_sel_1 = sel_4868;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5316_sel_1 = sel_4867;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5316_sel_1 = sel_4866;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5316_sel_1 = sel_4865;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5316_sel_1 = sel_4864;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5316_sel_1 = sel_4863;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5316_sel_1 = sel_4862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5316_sel_1 = sel_4861;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5316_sel_1 = sel_4860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5316_sel_1 = s_698;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5316_sel_1 = s_697;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5316_sel_1 = s_696;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5316_sel_1 = s_695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5316_sel_1 = s_694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5316_sel_1 = s_693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5316_sel_1 = s_692;
        end
      default :
        begin
          p5316_sel_1 = s_699;
        end
    endcase
    sel_1_1563 = p5316_sel_1;
  end

  assign s_700 = tmp_636[sel_1_1563];

  assign tmp_734 = {24'b0, s_700};

  assign tmp_735 = tmp_734 != 32'sd0;

  assign tmp_736 = {24'b0, s_700};

  assign tmp_737 = tmp_736 != 32'sd0;

  assign tmp_738 = {24'b0, s_700};

  assign tmp_739 = tmp_738 != 32'sd0;

  assign tmp_740 = {24'b0, s_700};

  assign tmp_741 = tmp_740 != 32'sd0;

  assign tmp_742 = {24'b0, s_700};

  assign tmp_743 = tmp_742 != 32'sd0;

  assign tmp_744 = {24'b0, s_700};

  assign tmp_745 = tmp_744 != 32'sd0;

  assign tmp_746 = {24'b0, s_700};

  assign tmp_747 = tmp_746 != 32'sd0;

  assign sel_4869 = 1'b0;

  assign sel_4870 = 1'b0;

  assign sel_4871 = 1'b0;

  assign sel_4872 = 1'b0;

  assign sel_4873 = 1'b0;

  assign sel_4874 = 1'b0;

  assign sel_4875 = 1'b0;

  assign sel_4876 = 1'b0;

  assign sel_4877 = 1'b0;

  assign tmp_748 = {24'b0, s_683};

  assign tmp_749 = tmp_748 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4869, sel_4870, sel_4871, sel_4872, sel_4873, sel_4874,
       sel_4875, sel_4876, sel_4877, tmp_735, tmp_737, tmp_739, tmp_741,
       tmp_743, tmp_745, tmp_747, tmp_749) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p615_sel_1 = sel_4877;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p615_sel_1 = sel_4876;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p615_sel_1 = sel_4875;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p615_sel_1 = sel_4874;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p615_sel_1 = sel_4873;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p615_sel_1 = sel_4872;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p615_sel_1 = sel_4871;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p615_sel_1 = sel_4870;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p615_sel_1 = sel_4869;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p615_sel_1 = tmp_747;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p615_sel_1 = tmp_745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p615_sel_1 = tmp_743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p615_sel_1 = tmp_741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p615_sel_1 = tmp_739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p615_sel_1 = tmp_737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p615_sel_1 = tmp_735;
        end
      default :
        begin
          p615_sel_1 = tmp_749;
        end
    endcase
    sel_1_1564 = p615_sel_1;
  end

  assign s_701 = 1'b1;

  assign s_702 = 1'b1;

  assign s_703 = 1'b1;

  assign s_704 = 1'b1;

  assign s_705 = 1'b1;

  assign s_706 = 1'b1;

  assign s_707 = 1'b1;

  assign sel_4878 = 1'b0;

  assign sel_4879 = 1'b0;

  assign sel_4880 = 1'b0;

  assign sel_4881 = 1'b0;

  assign sel_4882 = 1'b0;

  assign sel_4883 = 1'b0;

  assign sel_4884 = 1'b0;

  assign sel_4885 = 1'b0;

  assign sel_4886 = 1'b0;

  assign s_708 = 1'b1;

  always @(is_SPI_MNGR_38, s_701, s_702, s_703, s_704, s_705, s_706, s_707, s_708,
       sel_4878, sel_4879, sel_4880, sel_4881, sel_4882, sel_4883, sel_4884,
       sel_4885, sel_4886) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p596_sel_2 = sel_4886;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p596_sel_2 = sel_4885;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p596_sel_2 = sel_4884;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p596_sel_2 = sel_4883;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p596_sel_2 = sel_4882;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p596_sel_2 = sel_4881;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p596_sel_2 = sel_4880;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p596_sel_2 = sel_4879;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p596_sel_2 = sel_4878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p596_sel_2 = s_707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p596_sel_2 = s_706;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p596_sel_2 = s_705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p596_sel_2 = s_704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p596_sel_2 = s_703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p596_sel_2 = s_702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p596_sel_2 = s_701;
        end
      default :
        begin
          p596_sel_2 = s_708;
        end
    endcase
    sel_2_275 = p596_sel_2;
  end

  assign s_709 = 32'sd7;

  assign s_710 = 32'sd7;

  assign s_711 = 32'sd7;

  assign s_712 = 32'sd7;

  assign s_713 = 32'sd7;

  assign s_714 = 32'sd7;

  assign s_715 = 32'sd7;

  assign sel_4887 = 32'sd0;

  assign sel_4888 = 32'sd0;

  assign sel_4889 = 32'sd0;

  assign sel_4890 = 32'sd0;

  assign sel_4891 = 32'sd0;

  assign sel_4892 = 32'sd0;

  assign sel_4893 = 32'sd0;

  assign sel_4894 = 32'sd0;

  assign sel_4895 = 32'sd0;

  assign s_716 = 32'sd8;

  always @(is_SPI_MNGR_38, s_709, s_710, s_711, s_712, s_713, s_714, s_715, s_716,
       sel_4887, sel_4888, sel_4889, sel_4890, sel_4891, sel_4892, sel_4893,
       sel_4894, sel_4895) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5296_sel_1 = sel_4895;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5296_sel_1 = sel_4894;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5296_sel_1 = sel_4893;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5296_sel_1 = sel_4892;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5296_sel_1 = sel_4891;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5296_sel_1 = sel_4890;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5296_sel_1 = sel_4889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5296_sel_1 = sel_4888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5296_sel_1 = sel_4887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5296_sel_1 = s_715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5296_sel_1 = s_714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5296_sel_1 = s_713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5296_sel_1 = s_712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5296_sel_1 = s_711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5296_sel_1 = s_710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5296_sel_1 = s_709;
        end
      default :
        begin
          p5296_sel_1 = s_716;
        end
    endcase
    sel_1_1565 = p5296_sel_1;
  end

  assign s_717 = tmp_636[sel_1_1565];

  assign tmp_750 = {24'b0, s_717};

  assign tmp_751 = tmp_750 != 32'sd0;

  assign tmp_752 = {24'b0, s_717};

  assign tmp_753 = tmp_752 != 32'sd0;

  assign tmp_754 = {24'b0, s_717};

  assign tmp_755 = tmp_754 != 32'sd0;

  assign tmp_756 = {24'b0, s_717};

  assign tmp_757 = tmp_756 != 32'sd0;

  assign tmp_758 = {24'b0, s_717};

  assign tmp_759 = tmp_758 != 32'sd0;

  assign tmp_760 = {24'b0, s_717};

  assign tmp_761 = tmp_760 != 32'sd0;

  assign tmp_762 = {24'b0, s_717};

  assign tmp_763 = tmp_762 != 32'sd0;

  assign sel_4896 = 1'b0;

  assign sel_4897 = 1'b0;

  assign sel_4898 = 1'b0;

  assign sel_4899 = 1'b0;

  assign sel_4900 = 1'b0;

  assign sel_4901 = 1'b0;

  assign sel_4902 = 1'b0;

  assign sel_4903 = 1'b0;

  assign sel_4904 = 1'b0;

  assign tmp_764 = {24'b0, s_700};

  assign tmp_765 = tmp_764 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4896, sel_4897, sel_4898, sel_4899, sel_4900, sel_4901,
       sel_4902, sel_4903, sel_4904, tmp_751, tmp_753, tmp_755, tmp_757,
       tmp_759, tmp_761, tmp_763, tmp_765) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p549_sel_1 = sel_4904;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p549_sel_1 = sel_4903;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p549_sel_1 = sel_4902;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p549_sel_1 = sel_4901;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p549_sel_1 = sel_4900;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p549_sel_1 = sel_4899;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p549_sel_1 = sel_4898;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p549_sel_1 = sel_4897;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p549_sel_1 = sel_4896;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p549_sel_1 = tmp_763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p549_sel_1 = tmp_761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p549_sel_1 = tmp_759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p549_sel_1 = tmp_757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p549_sel_1 = tmp_755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p549_sel_1 = tmp_753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p549_sel_1 = tmp_751;
        end
      default :
        begin
          p549_sel_1 = tmp_765;
        end
    endcase
    sel_1_1566 = p549_sel_1;
  end

  assign s_718 = 1'b1;

  assign s_719 = 1'b1;

  assign s_720 = 1'b1;

  assign s_721 = 1'b1;

  assign s_722 = 1'b1;

  assign s_723 = 1'b1;

  assign s_724 = 1'b1;

  assign sel_4905 = 1'b0;

  assign sel_4906 = 1'b0;

  assign sel_4907 = 1'b0;

  assign sel_4908 = 1'b0;

  assign sel_4909 = 1'b0;

  assign sel_4910 = 1'b0;

  assign sel_4911 = 1'b0;

  assign sel_4912 = 1'b0;

  assign sel_4913 = 1'b0;

  assign s_725 = 1'b1;

  always @(is_SPI_MNGR_38, s_718, s_719, s_720, s_721, s_722, s_723, s_724, s_725,
       sel_4905, sel_4906, sel_4907, sel_4908, sel_4909, sel_4910, sel_4911,
       sel_4912, sel_4913) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p530_sel_2 = sel_4913;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p530_sel_2 = sel_4912;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p530_sel_2 = sel_4911;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p530_sel_2 = sel_4910;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p530_sel_2 = sel_4909;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p530_sel_2 = sel_4908;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p530_sel_2 = sel_4907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p530_sel_2 = sel_4906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p530_sel_2 = sel_4905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p530_sel_2 = s_724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p530_sel_2 = s_723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p530_sel_2 = s_722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p530_sel_2 = s_721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p530_sel_2 = s_720;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p530_sel_2 = s_719;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p530_sel_2 = s_718;
        end
      default :
        begin
          p530_sel_2 = s_725;
        end
    endcase
    sel_2_276 = p530_sel_2;
  end

  assign s_726 = 32'sd8;

  assign s_727 = 32'sd8;

  assign s_728 = 32'sd8;

  assign s_729 = 32'sd8;

  assign s_730 = 32'sd8;

  assign s_731 = 32'sd8;

  assign s_732 = 32'sd8;

  assign sel_4914 = 32'sd0;

  assign sel_4915 = 32'sd0;

  assign sel_4916 = 32'sd0;

  assign sel_4917 = 32'sd0;

  assign sel_4918 = 32'sd0;

  assign sel_4919 = 32'sd0;

  assign sel_4920 = 32'sd0;

  assign sel_4921 = 32'sd0;

  assign sel_4922 = 32'sd0;

  assign s_733 = 32'sd9;

  always @(is_SPI_MNGR_38, s_726, s_727, s_728, s_729, s_730, s_731, s_732, s_733,
       sel_4914, sel_4915, sel_4916, sel_4917, sel_4918, sel_4919, sel_4920,
       sel_4921, sel_4922) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5276_sel_1 = sel_4922;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5276_sel_1 = sel_4921;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5276_sel_1 = sel_4920;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5276_sel_1 = sel_4919;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5276_sel_1 = sel_4918;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5276_sel_1 = sel_4917;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5276_sel_1 = sel_4916;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5276_sel_1 = sel_4915;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5276_sel_1 = sel_4914;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5276_sel_1 = s_732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5276_sel_1 = s_731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5276_sel_1 = s_730;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5276_sel_1 = s_729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5276_sel_1 = s_728;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5276_sel_1 = s_727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5276_sel_1 = s_726;
        end
      default :
        begin
          p5276_sel_1 = s_733;
        end
    endcase
    sel_1_1567 = p5276_sel_1;
  end

  assign s_734 = tmp_636[sel_1_1567];

  assign tmp_766 = {24'b0, s_734};

  assign tmp_767 = tmp_766 != 32'sd0;

  assign tmp_768 = {24'b0, s_734};

  assign tmp_769 = tmp_768 != 32'sd0;

  assign tmp_770 = {24'b0, s_734};

  assign tmp_771 = tmp_770 != 32'sd0;

  assign tmp_772 = {24'b0, s_734};

  assign tmp_773 = tmp_772 != 32'sd0;

  assign tmp_774 = {24'b0, s_734};

  assign tmp_775 = tmp_774 != 32'sd0;

  assign tmp_776 = {24'b0, s_734};

  assign tmp_777 = tmp_776 != 32'sd0;

  assign tmp_778 = {24'b0, s_734};

  assign tmp_779 = tmp_778 != 32'sd0;

  assign sel_4923 = 1'b0;

  assign sel_4924 = 1'b0;

  assign sel_4925 = 1'b0;

  assign sel_4926 = 1'b0;

  assign sel_4927 = 1'b0;

  assign sel_4928 = 1'b0;

  assign sel_4929 = 1'b0;

  assign sel_4930 = 1'b0;

  assign sel_4931 = 1'b0;

  assign tmp_780 = {24'b0, s_717};

  assign tmp_781 = tmp_780 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4923, sel_4924, sel_4925, sel_4926, sel_4927, sel_4928,
       sel_4929, sel_4930, sel_4931, tmp_767, tmp_769, tmp_771, tmp_773,
       tmp_775, tmp_777, tmp_779, tmp_781) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p483_sel_1 = sel_4931;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p483_sel_1 = sel_4930;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p483_sel_1 = sel_4929;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p483_sel_1 = sel_4928;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p483_sel_1 = sel_4927;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p483_sel_1 = sel_4926;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p483_sel_1 = sel_4925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p483_sel_1 = sel_4924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p483_sel_1 = sel_4923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p483_sel_1 = tmp_779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p483_sel_1 = tmp_777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p483_sel_1 = tmp_775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p483_sel_1 = tmp_773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p483_sel_1 = tmp_771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p483_sel_1 = tmp_769;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p483_sel_1 = tmp_767;
        end
      default :
        begin
          p483_sel_1 = tmp_781;
        end
    endcase
    sel_1_1568 = p483_sel_1;
  end

  assign s_735 = 1'b1;

  assign s_736 = 1'b1;

  assign s_737 = 1'b1;

  assign s_738 = 1'b1;

  assign s_739 = 1'b1;

  assign s_740 = 1'b1;

  assign s_741 = 1'b1;

  assign sel_4932 = 1'b0;

  assign sel_4933 = 1'b0;

  assign sel_4934 = 1'b0;

  assign sel_4935 = 1'b0;

  assign sel_4936 = 1'b0;

  assign sel_4937 = 1'b0;

  assign sel_4938 = 1'b0;

  assign sel_4939 = 1'b0;

  assign sel_4940 = 1'b0;

  assign s_742 = 1'b1;

  always @(is_SPI_MNGR_38, s_735, s_736, s_737, s_738, s_739, s_740, s_741, s_742,
       sel_4932, sel_4933, sel_4934, sel_4935, sel_4936, sel_4937, sel_4938,
       sel_4939, sel_4940) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p464_sel_2 = sel_4940;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p464_sel_2 = sel_4939;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p464_sel_2 = sel_4938;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p464_sel_2 = sel_4937;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p464_sel_2 = sel_4936;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p464_sel_2 = sel_4935;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p464_sel_2 = sel_4934;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p464_sel_2 = sel_4933;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p464_sel_2 = sel_4932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p464_sel_2 = s_741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p464_sel_2 = s_740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p464_sel_2 = s_739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p464_sel_2 = s_738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p464_sel_2 = s_737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p464_sel_2 = s_736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p464_sel_2 = s_735;
        end
      default :
        begin
          p464_sel_2 = s_742;
        end
    endcase
    sel_2_277 = p464_sel_2;
  end

  assign s_743 = 32'sd9;

  assign s_744 = 32'sd9;

  assign s_745 = 32'sd9;

  assign s_746 = 32'sd9;

  assign s_747 = 32'sd9;

  assign s_748 = 32'sd9;

  assign s_749 = 32'sd9;

  assign sel_4941 = 32'sd0;

  assign sel_4942 = 32'sd0;

  assign sel_4943 = 32'sd0;

  assign sel_4944 = 32'sd0;

  assign sel_4945 = 32'sd0;

  assign sel_4946 = 32'sd0;

  assign sel_4947 = 32'sd0;

  assign sel_4948 = 32'sd0;

  assign sel_4949 = 32'sd0;

  assign s_750 = 32'sd10;

  always @(is_SPI_MNGR_38, s_743, s_744, s_745, s_746, s_747, s_748, s_749, s_750,
       sel_4941, sel_4942, sel_4943, sel_4944, sel_4945, sel_4946, sel_4947,
       sel_4948, sel_4949) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5256_sel_1 = sel_4949;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5256_sel_1 = sel_4948;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5256_sel_1 = sel_4947;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5256_sel_1 = sel_4946;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5256_sel_1 = sel_4945;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5256_sel_1 = sel_4944;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5256_sel_1 = sel_4943;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5256_sel_1 = sel_4942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5256_sel_1 = sel_4941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5256_sel_1 = s_749;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5256_sel_1 = s_748;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5256_sel_1 = s_747;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5256_sel_1 = s_746;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5256_sel_1 = s_745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5256_sel_1 = s_744;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5256_sel_1 = s_743;
        end
      default :
        begin
          p5256_sel_1 = s_750;
        end
    endcase
    sel_1_1569 = p5256_sel_1;
  end

  assign s_751 = tmp_636[sel_1_1569];

  assign tmp_782 = {24'b0, s_751};

  assign tmp_783 = tmp_782 != 32'sd0;

  assign tmp_784 = {24'b0, s_751};

  assign tmp_785 = tmp_784 != 32'sd0;

  assign tmp_786 = {24'b0, s_751};

  assign tmp_787 = tmp_786 != 32'sd0;

  assign tmp_788 = {24'b0, s_751};

  assign tmp_789 = tmp_788 != 32'sd0;

  assign tmp_790 = {24'b0, s_751};

  assign tmp_791 = tmp_790 != 32'sd0;

  assign tmp_792 = {24'b0, s_751};

  assign tmp_793 = tmp_792 != 32'sd0;

  assign tmp_794 = {24'b0, s_751};

  assign tmp_795 = tmp_794 != 32'sd0;

  assign sel_4950 = 1'b0;

  assign sel_4951 = 1'b0;

  assign sel_4952 = 1'b0;

  assign sel_4953 = 1'b0;

  assign sel_4954 = 1'b0;

  assign sel_4955 = 1'b0;

  assign sel_4956 = 1'b0;

  assign sel_4957 = 1'b0;

  assign sel_4958 = 1'b0;

  assign tmp_796 = {24'b0, s_734};

  assign tmp_797 = tmp_796 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4950, sel_4951, sel_4952, sel_4953, sel_4954, sel_4955,
       sel_4956, sel_4957, sel_4958, tmp_783, tmp_785, tmp_787, tmp_789,
       tmp_791, tmp_793, tmp_795, tmp_797) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p280_sel_1 = sel_4958;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p280_sel_1 = sel_4957;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p280_sel_1 = sel_4956;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p280_sel_1 = sel_4955;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p280_sel_1 = sel_4954;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p280_sel_1 = sel_4953;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p280_sel_1 = sel_4952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p280_sel_1 = sel_4951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p280_sel_1 = sel_4950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p280_sel_1 = tmp_795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p280_sel_1 = tmp_793;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p280_sel_1 = tmp_791;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p280_sel_1 = tmp_789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p280_sel_1 = tmp_787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p280_sel_1 = tmp_785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p280_sel_1 = tmp_783;
        end
      default :
        begin
          p280_sel_1 = tmp_797;
        end
    endcase
    sel_1_1570 = p280_sel_1;
  end

  assign s_752 = 1'b1;

  assign s_753 = 1'b1;

  assign s_754 = 1'b1;

  assign s_755 = 1'b1;

  assign s_756 = 1'b1;

  assign s_757 = 1'b1;

  assign s_758 = 1'b1;

  assign sel_4959 = 1'b0;

  assign sel_4960 = 1'b0;

  assign sel_4961 = 1'b0;

  assign sel_4962 = 1'b0;

  assign sel_4963 = 1'b0;

  assign sel_4964 = 1'b0;

  assign sel_4965 = 1'b0;

  assign sel_4966 = 1'b0;

  assign sel_4967 = 1'b0;

  assign s_759 = 1'b1;

  always @(is_SPI_MNGR_38, s_752, s_753, s_754, s_755, s_756, s_757, s_758, s_759,
       sel_4959, sel_4960, sel_4961, sel_4962, sel_4963, sel_4964, sel_4965,
       sel_4966, sel_4967) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p261_sel_2 = sel_4967;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p261_sel_2 = sel_4966;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p261_sel_2 = sel_4965;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p261_sel_2 = sel_4964;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p261_sel_2 = sel_4963;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p261_sel_2 = sel_4962;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p261_sel_2 = sel_4961;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p261_sel_2 = sel_4960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p261_sel_2 = sel_4959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p261_sel_2 = s_758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p261_sel_2 = s_757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p261_sel_2 = s_756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p261_sel_2 = s_755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p261_sel_2 = s_754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p261_sel_2 = s_753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p261_sel_2 = s_752;
        end
      default :
        begin
          p261_sel_2 = s_759;
        end
    endcase
    sel_2_278 = p261_sel_2;
  end

  assign s_760 = 32'sd10;

  assign s_761 = 32'sd10;

  assign s_762 = 32'sd10;

  assign s_763 = 32'sd10;

  assign s_764 = 32'sd10;

  assign s_765 = 32'sd10;

  assign s_766 = 32'sd10;

  assign sel_4968 = 32'sd0;

  assign sel_4969 = 32'sd0;

  assign sel_4970 = 32'sd0;

  assign sel_4971 = 32'sd0;

  assign sel_4972 = 32'sd0;

  assign sel_4973 = 32'sd0;

  assign sel_4974 = 32'sd0;

  assign sel_4975 = 32'sd0;

  assign sel_4976 = 32'sd0;

  assign s_767 = 32'sd11;

  always @(is_SPI_MNGR_38, s_760, s_761, s_762, s_763, s_764, s_765, s_766, s_767,
       sel_4968, sel_4969, sel_4970, sel_4971, sel_4972, sel_4973, sel_4974,
       sel_4975, sel_4976) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5236_sel_1 = sel_4976;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5236_sel_1 = sel_4975;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5236_sel_1 = sel_4974;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5236_sel_1 = sel_4973;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5236_sel_1 = sel_4972;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5236_sel_1 = sel_4971;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5236_sel_1 = sel_4970;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p5236_sel_1 = sel_4969;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p5236_sel_1 = sel_4968;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5236_sel_1 = s_766;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5236_sel_1 = s_765;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5236_sel_1 = s_764;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5236_sel_1 = s_763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5236_sel_1 = s_762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5236_sel_1 = s_761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5236_sel_1 = s_760;
        end
      default :
        begin
          p5236_sel_1 = s_767;
        end
    endcase
    sel_1_1571 = p5236_sel_1;
  end

  assign s_768 = tmp_636[sel_1_1571];

  assign tmp_798 = {24'b0, s_768};

  assign tmp_799 = tmp_798 != 32'sd0;

  assign tmp_800 = {24'b0, s_768};

  assign tmp_801 = tmp_800 != 32'sd0;

  assign tmp_802 = {24'b0, s_768};

  assign tmp_803 = tmp_802 != 32'sd0;

  assign tmp_804 = {24'b0, s_768};

  assign tmp_805 = tmp_804 != 32'sd0;

  assign tmp_806 = {24'b0, s_768};

  assign tmp_807 = tmp_806 != 32'sd0;

  assign tmp_808 = {24'b0, s_768};

  assign tmp_809 = tmp_808 != 32'sd0;

  assign tmp_810 = {24'b0, s_768};

  assign tmp_811 = tmp_810 != 32'sd0;

  assign sel_4977 = 1'b0;

  assign sel_4978 = 1'b0;

  assign sel_4979 = 1'b0;

  assign sel_4980 = 1'b0;

  assign sel_4981 = 1'b0;

  assign sel_4982 = 1'b0;

  assign sel_4983 = 1'b0;

  assign sel_4984 = 1'b0;

  assign sel_4985 = 1'b0;

  assign tmp_812 = {24'b0, s_751};

  assign tmp_813 = tmp_812 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4977, sel_4978, sel_4979, sel_4980, sel_4981, sel_4982,
       sel_4983, sel_4984, sel_4985, tmp_799, tmp_801, tmp_803, tmp_805,
       tmp_807, tmp_809, tmp_811, tmp_813) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p249_sel_1 = sel_4985;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p249_sel_1 = sel_4984;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p249_sel_1 = sel_4983;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p249_sel_1 = sel_4982;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p249_sel_1 = sel_4981;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p249_sel_1 = sel_4980;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p249_sel_1 = sel_4979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p249_sel_1 = sel_4978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p249_sel_1 = sel_4977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p249_sel_1 = tmp_811;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p249_sel_1 = tmp_809;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p249_sel_1 = tmp_807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p249_sel_1 = tmp_805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p249_sel_1 = tmp_803;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p249_sel_1 = tmp_801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p249_sel_1 = tmp_799;
        end
      default :
        begin
          p249_sel_1 = tmp_813;
        end
    endcase
    sel_1_1572 = p249_sel_1;
  end

  assign s_769 = 1'b1;

  assign s_770 = 1'b1;

  assign s_771 = 1'b1;

  assign s_772 = 1'b1;

  assign s_773 = 1'b1;

  assign s_774 = 1'b1;

  assign s_775 = 1'b1;

  assign sel_4986 = 1'b0;

  assign sel_4987 = 1'b0;

  assign sel_4988 = 1'b0;

  assign sel_4989 = 1'b0;

  assign sel_4990 = 1'b0;

  assign sel_4991 = 1'b0;

  assign sel_4992 = 1'b0;

  assign sel_4993 = 1'b0;

  assign sel_4994 = 1'b0;

  assign s_776 = 1'b1;

  always @(is_SPI_MNGR_38, s_769, s_770, s_771, s_772, s_773, s_774, s_775, s_776,
       sel_4986, sel_4987, sel_4988, sel_4989, sel_4990, sel_4991, sel_4992,
       sel_4993, sel_4994) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p230_sel_2 = sel_4994;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p230_sel_2 = sel_4993;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p230_sel_2 = sel_4992;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p230_sel_2 = sel_4991;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p230_sel_2 = sel_4990;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p230_sel_2 = sel_4989;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p230_sel_2 = sel_4988;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p230_sel_2 = sel_4987;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p230_sel_2 = sel_4986;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p230_sel_2 = s_775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p230_sel_2 = s_774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p230_sel_2 = s_773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p230_sel_2 = s_772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p230_sel_2 = s_771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p230_sel_2 = s_770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p230_sel_2 = s_769;
        end
      default :
        begin
          p230_sel_2 = s_776;
        end
    endcase
    sel_2_279 = p230_sel_2;
  end

  assign tmp_814 = {24'b0, s_598};

  assign tmp_815 = tmp_814 != 32'sd0;

  assign tmp_816 = {24'b0, s_598};

  assign tmp_817 = tmp_816 != 32'sd0;

  assign tmp_818 = {24'b0, s_598};

  assign tmp_819 = tmp_818 != 32'sd0;

  assign tmp_820 = {24'b0, s_598};

  assign tmp_821 = tmp_820 != 32'sd0;

  assign tmp_822 = {24'b0, s_598};

  assign tmp_823 = tmp_822 != 32'sd0;

  assign tmp_824 = {24'b0, s_598};

  assign tmp_825 = tmp_824 != 32'sd0;

  assign tmp_826 = {24'b0, s_598};

  assign tmp_827 = tmp_826 != 32'sd0;

  assign sel_4995 = 1'b0;

  assign sel_4996 = 1'b0;

  assign sel_4997 = 1'b0;

  assign sel_4998 = 1'b0;

  assign sel_4999 = 1'b0;

  assign sel_5000 = 1'b0;

  assign sel_5001 = 1'b0;

  assign sel_5002 = 1'b0;

  assign sel_5003 = 1'b0;

  assign tmp_828 = {24'b0, s_768};

  assign tmp_829 = tmp_828 != 32'sd0;

  always @(is_SPI_MNGR_38, sel_4995, sel_4996, sel_4997, sel_4998, sel_4999, sel_5000,
       sel_5001, sel_5002, sel_5003, tmp_815, tmp_817, tmp_819, tmp_821,
       tmp_823, tmp_825, tmp_827, tmp_829) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p218_sel_1 = sel_5003;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p218_sel_1 = sel_5002;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p218_sel_1 = sel_5001;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p218_sel_1 = sel_5000;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p218_sel_1 = sel_4999;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p218_sel_1 = sel_4998;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p218_sel_1 = sel_4997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p218_sel_1 = sel_4996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p218_sel_1 = sel_4995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p218_sel_1 = tmp_827;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p218_sel_1 = tmp_825;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p218_sel_1 = tmp_823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p218_sel_1 = tmp_821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p218_sel_1 = tmp_819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p218_sel_1 = tmp_817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p218_sel_1 = tmp_815;
        end
      default :
        begin
          p218_sel_1 = tmp_829;
        end
    endcase
    sel_1_1573 = p218_sel_1;
  end

  assign s_777 = 1'b1;

  assign s_778 = 1'b1;

  assign s_779 = 1'b1;

  assign s_780 = 1'b1;

  assign s_781 = 1'b1;

  assign s_782 = 1'b1;

  assign s_783 = 1'b1;

  assign sel_5004 = 1'b0;

  assign sel_5005 = 1'b0;

  assign sel_5006 = 1'b0;

  assign sel_5007 = 1'b0;

  assign sel_5008 = 1'b0;

  assign sel_5009 = 1'b0;

  assign sel_5010 = 1'b0;

  assign sel_5011 = 1'b0;

  assign sel_5012 = 1'b0;

  assign s_784 = 1'b1;

  always @(is_SPI_MNGR_38, s_777, s_778, s_779, s_780, s_781, s_782, s_783, s_784,
       sel_5004, sel_5005, sel_5006, sel_5007, sel_5008, sel_5009, sel_5010,
       sel_5011, sel_5012) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p199_sel_2 = sel_5012;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p199_sel_2 = sel_5011;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p199_sel_2 = sel_5010;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p199_sel_2 = sel_5009;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p199_sel_2 = sel_5008;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p199_sel_2 = sel_5007;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p199_sel_2 = sel_5006;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p199_sel_2 = sel_5005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p199_sel_2 = sel_5004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p199_sel_2 = s_783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p199_sel_2 = s_782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p199_sel_2 = s_781;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p199_sel_2 = s_780;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p199_sel_2 = s_779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p199_sel_2 = s_778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p199_sel_2 = s_777;
        end
      default :
        begin
          p199_sel_2 = s_784;
        end
    endcase
    sel_2_280 = p199_sel_2;
  end

  always @(posedge clk)
    begin : rd_540_process
      if (rst == 1'b1) begin
        tmp_831 <= {16{1'b0}};
      end
      else begin
        if (enb) begin
          tmp_831 <= tmp_830;
        end
      end
    end

  always @* begin
    p1514payload_payload[0] = tmp_831[0];
    if (sel_2_1) begin
      p1514payload_payload[0] = sel_1_1;
    end
    payload[0] = p1514payload_payload[0];
    payload[1] = tmp_831[1];
    payload[2] = tmp_831[2];
    payload[3] = tmp_831[3];
    payload[4] = tmp_831[4];
    payload[5] = tmp_831[5];
    payload[6] = tmp_831[6];
    payload[7] = tmp_831[7];
    payload[8] = tmp_831[8];
    payload[9] = tmp_831[9];
    payload[10] = tmp_831[10];
    payload[11] = tmp_831[11];
    payload[12] = tmp_831[12];
    payload[13] = tmp_831[13];
    payload[14] = tmp_831[14];
    payload[15] = tmp_831[15];
  end

  always @* begin
    p1167payload_payload[1] = payload[1];
    if (sel_2_2) begin
      p1167payload_payload[1] = tmp_81;
    end
    payload_1[0] = payload[0];
    payload_1[1] = p1167payload_payload[1];
    payload_1[2] = payload[2];
    payload_1[3] = payload[3];
    payload_1[4] = payload[4];
    payload_1[5] = payload[5];
    payload_1[6] = payload[6];
    payload_1[7] = payload[7];
    payload_1[8] = payload[8];
    payload_1[9] = payload[9];
    payload_1[10] = payload[10];
    payload_1[11] = payload[11];
    payload_1[12] = payload[12];
    payload_1[13] = payload[13];
    payload_1[14] = payload[14];
    payload_1[15] = payload[15];
  end

  always @* begin
    p1112payload_payload[2] = payload_1[2];
    if (sel_2_3) begin
      p1112payload_payload[2] = tmp_82;
    end
    payload_2[0] = payload_1[0];
    payload_2[1] = payload_1[1];
    payload_2[2] = p1112payload_payload[2];
    payload_2[3] = payload_1[3];
    payload_2[4] = payload_1[4];
    payload_2[5] = payload_1[5];
    payload_2[6] = payload_1[6];
    payload_2[7] = payload_1[7];
    payload_2[8] = payload_1[8];
    payload_2[9] = payload_1[9];
    payload_2[10] = payload_1[10];
    payload_2[11] = payload_1[11];
    payload_2[12] = payload_1[12];
    payload_2[13] = payload_1[13];
    payload_2[14] = payload_1[14];
    payload_2[15] = payload_1[15];
  end

  always @* begin
    p1057payload_payload[3] = payload_2[3];
    if (sel_2_4) begin
      p1057payload_payload[3] = tmp_83;
    end
    payload_3[0] = payload_2[0];
    payload_3[1] = payload_2[1];
    payload_3[2] = payload_2[2];
    payload_3[3] = p1057payload_payload[3];
    payload_3[4] = payload_2[4];
    payload_3[5] = payload_2[5];
    payload_3[6] = payload_2[6];
    payload_3[7] = payload_2[7];
    payload_3[8] = payload_2[8];
    payload_3[9] = payload_2[9];
    payload_3[10] = payload_2[10];
    payload_3[11] = payload_2[11];
    payload_3[12] = payload_2[12];
    payload_3[13] = payload_2[13];
    payload_3[14] = payload_2[14];
    payload_3[15] = payload_2[15];
  end

  always @* begin
    p991payload_payload[4] = payload_3[4];
    if (sel_2_269) begin
      p991payload_payload[4] = sel_1_1552;
    end
    payload_4[0] = payload_3[0];
    payload_4[1] = payload_3[1];
    payload_4[2] = payload_3[2];
    payload_4[3] = payload_3[3];
    payload_4[4] = p991payload_payload[4];
    payload_4[5] = payload_3[5];
    payload_4[6] = payload_3[6];
    payload_4[7] = payload_3[7];
    payload_4[8] = payload_3[8];
    payload_4[9] = payload_3[9];
    payload_4[10] = payload_3[10];
    payload_4[11] = payload_3[11];
    payload_4[12] = payload_3[12];
    payload_4[13] = payload_3[13];
    payload_4[14] = payload_3[14];
    payload_4[15] = payload_3[15];
  end

  always @* begin
    p925payload_payload[5] = payload_4[5];
    if (sel_2_270) begin
      p925payload_payload[5] = sel_1_1554;
    end
    payload_5[0] = payload_4[0];
    payload_5[1] = payload_4[1];
    payload_5[2] = payload_4[2];
    payload_5[3] = payload_4[3];
    payload_5[4] = payload_4[4];
    payload_5[5] = p925payload_payload[5];
    payload_5[6] = payload_4[6];
    payload_5[7] = payload_4[7];
    payload_5[8] = payload_4[8];
    payload_5[9] = payload_4[9];
    payload_5[10] = payload_4[10];
    payload_5[11] = payload_4[11];
    payload_5[12] = payload_4[12];
    payload_5[13] = payload_4[13];
    payload_5[14] = payload_4[14];
    payload_5[15] = payload_4[15];
  end

  always @* begin
    p859payload_payload[6] = payload_5[6];
    if (sel_2_271) begin
      p859payload_payload[6] = sel_1_1556;
    end
    payload_6[0] = payload_5[0];
    payload_6[1] = payload_5[1];
    payload_6[2] = payload_5[2];
    payload_6[3] = payload_5[3];
    payload_6[4] = payload_5[4];
    payload_6[5] = payload_5[5];
    payload_6[6] = p859payload_payload[6];
    payload_6[7] = payload_5[7];
    payload_6[8] = payload_5[8];
    payload_6[9] = payload_5[9];
    payload_6[10] = payload_5[10];
    payload_6[11] = payload_5[11];
    payload_6[12] = payload_5[12];
    payload_6[13] = payload_5[13];
    payload_6[14] = payload_5[14];
    payload_6[15] = payload_5[15];
  end

  always @* begin
    p793payload_payload[7] = payload_6[7];
    if (sel_2_272) begin
      p793payload_payload[7] = sel_1_1558;
    end
    payload_7[0] = payload_6[0];
    payload_7[1] = payload_6[1];
    payload_7[2] = payload_6[2];
    payload_7[3] = payload_6[3];
    payload_7[4] = payload_6[4];
    payload_7[5] = payload_6[5];
    payload_7[6] = payload_6[6];
    payload_7[7] = p793payload_payload[7];
    payload_7[8] = payload_6[8];
    payload_7[9] = payload_6[9];
    payload_7[10] = payload_6[10];
    payload_7[11] = payload_6[11];
    payload_7[12] = payload_6[12];
    payload_7[13] = payload_6[13];
    payload_7[14] = payload_6[14];
    payload_7[15] = payload_6[15];
  end

  always @* begin
    p727payload_payload[8] = payload_7[8];
    if (sel_2_273) begin
      p727payload_payload[8] = sel_1_1560;
    end
    payload_8[0] = payload_7[0];
    payload_8[1] = payload_7[1];
    payload_8[2] = payload_7[2];
    payload_8[3] = payload_7[3];
    payload_8[4] = payload_7[4];
    payload_8[5] = payload_7[5];
    payload_8[6] = payload_7[6];
    payload_8[7] = payload_7[7];
    payload_8[8] = p727payload_payload[8];
    payload_8[9] = payload_7[9];
    payload_8[10] = payload_7[10];
    payload_8[11] = payload_7[11];
    payload_8[12] = payload_7[12];
    payload_8[13] = payload_7[13];
    payload_8[14] = payload_7[14];
    payload_8[15] = payload_7[15];
  end

  always @* begin
    p661payload_payload[9] = payload_8[9];
    if (sel_2_274) begin
      p661payload_payload[9] = sel_1_1562;
    end
    payload_9[0] = payload_8[0];
    payload_9[1] = payload_8[1];
    payload_9[2] = payload_8[2];
    payload_9[3] = payload_8[3];
    payload_9[4] = payload_8[4];
    payload_9[5] = payload_8[5];
    payload_9[6] = payload_8[6];
    payload_9[7] = payload_8[7];
    payload_9[8] = payload_8[8];
    payload_9[9] = p661payload_payload[9];
    payload_9[10] = payload_8[10];
    payload_9[11] = payload_8[11];
    payload_9[12] = payload_8[12];
    payload_9[13] = payload_8[13];
    payload_9[14] = payload_8[14];
    payload_9[15] = payload_8[15];
  end

  always @* begin
    p595payload_payload[10] = payload_9[10];
    if (sel_2_275) begin
      p595payload_payload[10] = sel_1_1564;
    end
    payload_10[0] = payload_9[0];
    payload_10[1] = payload_9[1];
    payload_10[2] = payload_9[2];
    payload_10[3] = payload_9[3];
    payload_10[4] = payload_9[4];
    payload_10[5] = payload_9[5];
    payload_10[6] = payload_9[6];
    payload_10[7] = payload_9[7];
    payload_10[8] = payload_9[8];
    payload_10[9] = payload_9[9];
    payload_10[10] = p595payload_payload[10];
    payload_10[11] = payload_9[11];
    payload_10[12] = payload_9[12];
    payload_10[13] = payload_9[13];
    payload_10[14] = payload_9[14];
    payload_10[15] = payload_9[15];
  end

  always @* begin
    p529payload_payload[11] = payload_10[11];
    if (sel_2_276) begin
      p529payload_payload[11] = sel_1_1566;
    end
    payload_11[0] = payload_10[0];
    payload_11[1] = payload_10[1];
    payload_11[2] = payload_10[2];
    payload_11[3] = payload_10[3];
    payload_11[4] = payload_10[4];
    payload_11[5] = payload_10[5];
    payload_11[6] = payload_10[6];
    payload_11[7] = payload_10[7];
    payload_11[8] = payload_10[8];
    payload_11[9] = payload_10[9];
    payload_11[10] = payload_10[10];
    payload_11[11] = p529payload_payload[11];
    payload_11[12] = payload_10[12];
    payload_11[13] = payload_10[13];
    payload_11[14] = payload_10[14];
    payload_11[15] = payload_10[15];
  end

  always @* begin
    p463payload_payload[12] = payload_11[12];
    if (sel_2_277) begin
      p463payload_payload[12] = sel_1_1568;
    end
    payload_12[0] = payload_11[0];
    payload_12[1] = payload_11[1];
    payload_12[2] = payload_11[2];
    payload_12[3] = payload_11[3];
    payload_12[4] = payload_11[4];
    payload_12[5] = payload_11[5];
    payload_12[6] = payload_11[6];
    payload_12[7] = payload_11[7];
    payload_12[8] = payload_11[8];
    payload_12[9] = payload_11[9];
    payload_12[10] = payload_11[10];
    payload_12[11] = payload_11[11];
    payload_12[12] = p463payload_payload[12];
    payload_12[13] = payload_11[13];
    payload_12[14] = payload_11[14];
    payload_12[15] = payload_11[15];
  end

  always @* begin
    p260payload_payload[13] = payload_12[13];
    if (sel_2_278) begin
      p260payload_payload[13] = sel_1_1570;
    end
    payload_13[0] = payload_12[0];
    payload_13[1] = payload_12[1];
    payload_13[2] = payload_12[2];
    payload_13[3] = payload_12[3];
    payload_13[4] = payload_12[4];
    payload_13[5] = payload_12[5];
    payload_13[6] = payload_12[6];
    payload_13[7] = payload_12[7];
    payload_13[8] = payload_12[8];
    payload_13[9] = payload_12[9];
    payload_13[10] = payload_12[10];
    payload_13[11] = payload_12[11];
    payload_13[12] = payload_12[12];
    payload_13[13] = p260payload_payload[13];
    payload_13[14] = payload_12[14];
    payload_13[15] = payload_12[15];
  end

  always @* begin
    p229payload_payload[14] = payload_13[14];
    if (sel_2_279) begin
      p229payload_payload[14] = sel_1_1572;
    end
    payload_14[0] = payload_13[0];
    payload_14[1] = payload_13[1];
    payload_14[2] = payload_13[2];
    payload_14[3] = payload_13[3];
    payload_14[4] = payload_13[4];
    payload_14[5] = payload_13[5];
    payload_14[6] = payload_13[6];
    payload_14[7] = payload_13[7];
    payload_14[8] = payload_13[8];
    payload_14[9] = payload_13[9];
    payload_14[10] = payload_13[10];
    payload_14[11] = payload_13[11];
    payload_14[12] = payload_13[12];
    payload_14[13] = payload_13[13];
    payload_14[14] = p229payload_payload[14];
    payload_14[15] = payload_13[15];
  end

  always @* begin
    p198tmp_tmp[15] = payload_14[15];
    if (sel_2_280) begin
      p198tmp_tmp[15] = sel_1_1573;
    end
    tmp_830[0] = payload_14[0];
    tmp_830[1] = payload_14[1];
    tmp_830[2] = payload_14[2];
    tmp_830[3] = payload_14[3];
    tmp_830[4] = payload_14[4];
    tmp_830[5] = payload_14[5];
    tmp_830[6] = payload_14[6];
    tmp_830[7] = payload_14[7];
    tmp_830[8] = payload_14[8];
    tmp_830[9] = payload_14[9];
    tmp_830[10] = payload_14[10];
    tmp_830[11] = payload_14[11];
    tmp_830[12] = payload_14[12];
    tmp_830[13] = payload_14[13];
    tmp_830[14] = payload_14[14];
    tmp_830[15] = p198tmp_tmp[15];
  end

  always @(posedge clk)
    begin : rd_541_process
      if (rst == 1'b1) begin
        tmp_832 <= {16{1'b0}};
      end
      else begin
        if (enb) begin
          tmp_832 <= tmp_830;
        end
      end
    end

  assign sel_5013 = 32'sd0;

  assign sel_5014 = 32'sd0;

  assign sel_5015 = 32'sd0;

  assign sel_5016 = 32'sd0;

  assign sel_5017 = 32'sd0;

  assign sel_5018 = 32'sd0;

  assign sel_5019 = 32'sd0;

  assign tmp_833 = {16'b0, cnt_1};

  assign s_785 = tmp_833 - 32'sd1;

  assign tmp_834 = {16'b0, cnt_1};

  assign s_786 = tmp_834 - 32'sd1;

  assign tmp_835 = {16'b0, cnt_1};

  assign s_787 = tmp_835 - 32'sd1;

  assign sel_5020 = 32'sd0;

  assign tmp_836 = {16'b0, cnt_1};

  assign s_788 = tmp_836 - 32'sd1;

  assign tmp_837 = {16'b0, tmp_40};

  assign tmp_838 = tmp_837 - 32'sd1;

  assign sel_5021 = 32'sd0;

  assign sel_1_1574 = (s_22 == 1'b0 ? tmp_838 :
              sel_5021);

  assign sel_1_1575 = (s_23 == 1'b0 ? s_788 :
              sel_1_1574);

  assign sel_5022 = 32'sd0;

  assign sel_5023 = 32'sd0;

  assign sel_5024 = 32'sd0;

  assign sel_5025 = 32'sd0;

  assign sel_5026 = 32'sd0;

  always @(is_SPI_MNGR_38, s_785, s_786, s_787, sel_1_1575, sel_5013, sel_5014, sel_5015,
       sel_5016, sel_5017, sel_5018, sel_5019, sel_5020, sel_5022, sel_5023,
       sel_5024, sel_5025, sel_5026) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1546_sel_1 = sel_5025;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1546_sel_1 = sel_5024;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1546_sel_1 = sel_5023;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1546_sel_1 = sel_5022;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1546_sel_1 = sel_1_1575;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1546_sel_1 = sel_5020;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1546_sel_1 = s_787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p1546_sel_1 = s_786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p1546_sel_1 = s_785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1546_sel_1 = sel_5019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1546_sel_1 = sel_5018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1546_sel_1 = sel_5017;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1546_sel_1 = sel_5016;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1546_sel_1 = sel_5015;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1546_sel_1 = sel_5014;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1546_sel_1 = sel_5013;
        end
      default :
        begin
          p1546_sel_1 = sel_5026;
        end
    endcase
    sel_1_1576 = p1546_sel_1;
  end

  assign SDI_1 = tmp_832[sel_1_1576];

  assign tmp_839 = (s_28 == 1'b0 ? SDI_1 :
              SDI_1);

  assign SDI_2 = 1'b0;

  always @(posedge clk)
    begin : rd_545_process
      if (rst == 1'b1) begin
        tmp_841 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_841 <= tmp_840;
        end
      end
    end

  always @(posedge clk)
    begin : rd_544_process
      if (rst == 1'b1) begin
        tmp_842 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_842 <= tmp_840;
        end
      end
    end

  always @(posedge clk)
    begin : rd_543_process
      if (rst == 1'b1) begin
        tmp_843 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_843 <= tmp_840;
        end
      end
    end

  assign tmp_844 = (s_9 == 1'b0 ? tmp_843 :
              SDI_2);

  assign tmp_845 = (s_10 == 1'b0 ? tmp_844 :
              tmp_842);

  always @(posedge clk)
    begin : rd_542_process
      if (rst == 1'b1) begin
        tmp_846 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_846 <= tmp_840;
        end
      end
    end

  assign tmp_847 = (s_11 == 1'b0 ? tmp_846 :
              tmp_845);

  assign tmp_848 = (s_12 == 1'b0 ? tmp_847 :
              tmp_841);

  always @(posedge clk)
    begin : rd_546_process
      if (rst == 1'b1) begin
        tmp_849 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_849 <= tmp_840;
        end
      end
    end

  assign tmp_850 = (s_22 == 1'b0 ? SDI_1 :
              tmp_849);

  assign tmp_851 = (s_23 == 1'b0 ? SDI_1 :
              tmp_850);

  always @(posedge clk)
    begin : rd_547_process
      if (rst == 1'b1) begin
        tmp_852 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_852 <= tmp_840;
        end
      end
    end

  always @(SDI_1, is_SPI_MNGR_38, tmp_839, tmp_848, tmp_851, tmp_852) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p171_tmp = tmp_848;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p171_tmp = tmp_851;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p171_tmp = tmp_839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p171_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p171_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p171_tmp = tmp_852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p171_tmp = tmp_852;
        end
      default :
        begin
          p171_tmp = tmp_852;
        end
    endcase
    tmp_840 = p171_tmp;
  end

  always @(posedge clk)
    begin : rd_548_process
      if (rst == 1'b1) begin
        tmp_853 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_853 <= tmp_840;
        end
      end
    end

  assign SDI = tmp_853;

  assign SCK_1 = 1'b0;

  assign SCK_2 = 1'b0;

  assign SCK_3 = 1'b0;

  assign SCK_4 = 1'b1;

  assign tmp_854 = (s_27 == 1'b0 ? SCK_3 :
              SCK_4);

  assign SCK_5 = 1'b0;

  assign tmp_855 = (s_28 == 1'b0 ? tmp_854 :
              SCK_5);

  assign SCK_6 = 1'b1;

  assign SCK_7 = 1'b0;

  assign tmp_856 = (s_25 == 1'b0 ? SCK_6 :
              SCK_7);

  assign SCK_8 = 1'b1;

  assign tmp_857 = (s_26 == 1'b0 ? tmp_856 :
              SCK_8);

  assign SCK_9 = 1'b1;

  assign SCK_10 = 1'b1;

  assign tmp_858 = (s_24 == 1'b0 ? SCK_9 :
              SCK_10);

  assign SCK_11 = 1'b0;

  assign SCK_12 = 1'b0;

  assign tmp_859 = (s_22 == 1'b0 ? SCK_11 :
              SCK_12);

  assign tmp_860 = (s_23 == 1'b0 ? tmp_858 :
              tmp_859);

  assign SCK_13 = 1'b0;

  assign SCK_14 = 1'b0;

  assign SCK_15 = 1'b0;

  assign tmp_861 = (s_7 == 1'b0 ? SCK_14 :
              SCK_15);

  assign SCK_16 = 1'b1;

  assign tmp_862 = (s_8 == 1'b0 ? tmp_861 :
              SCK_16);

  always @(posedge clk)
    begin : rd_552_process
      if (rst == 1'b1) begin
        tmp_864 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_864 <= tmp_863;
        end
      end
    end

  always @(posedge clk)
    begin : rd_551_process
      if (rst == 1'b1) begin
        tmp_865 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_865 <= tmp_863;
        end
      end
    end

  always @(posedge clk)
    begin : rd_550_process
      if (rst == 1'b1) begin
        tmp_866 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_866 <= tmp_863;
        end
      end
    end

  assign tmp_867 = (s_9 == 1'b0 ? tmp_866 :
              SCK_13);

  assign tmp_868 = (s_10 == 1'b0 ? tmp_867 :
              tmp_865);

  always @(posedge clk)
    begin : rd_549_process
      if (rst == 1'b1) begin
        tmp_869 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_869 <= tmp_863;
        end
      end
    end

  assign tmp_870 = (s_11 == 1'b0 ? tmp_869 :
              tmp_868);

  assign tmp_871 = (s_12 == 1'b0 ? tmp_870 :
              tmp_864);

  always @(posedge clk)
    begin : rd_553_process
      if (rst == 1'b1) begin
        tmp_872 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_872 <= tmp_863;
        end
      end
    end

  always @(SCK_1, SCK_2, is_SPI_MNGR_38, tmp_855, tmp_857, tmp_860, tmp_862, tmp_871,
       tmp_872) begin
    case ( is_SPI_MNGR_38)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p174_tmp = tmp_862;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p174_tmp = tmp_871;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p174_tmp = tmp_860;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p174_tmp = tmp_857;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p174_tmp = tmp_855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p174_tmp = SCK_2;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p174_tmp = SCK_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p174_tmp = tmp_872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p174_tmp = tmp_872;
        end
      default :
        begin
          p174_tmp = tmp_872;
        end
    endcase
    tmp_863 = p174_tmp;
  end

  always @(posedge clk)
    begin : rd_554_process
      if (rst == 1'b1) begin
        tmp_873 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_873 <= tmp_863;
        end
      end
    end

  assign SCK = tmp_873;

  always @(posedge clk)
    begin : rd_555_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_84 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_84 <= is_SPI_MNGR_38;
        end
      end
    end

  assign nCS1_reg_ctrl_const_out = 1'b1;

  assign nCS1_reg_Initial_Val_out = 1'b1;

  assign nCS1_1 = 1'b1;

  assign nCS1_2 = 1'b1;

  assign nCS1_3 = 1'b1;

  assign nCS1_4 = 1'b1;

  assign nCS1_5 = 1'b1;

  assign nCS1_6 = 1'b1;

  assign nCS1_7 = 1'b1;

  assign nCS1_8 = 1'b0;

  assign nCS1_9 = 1'b0;

  always @(posedge clk)
    begin : rd_556_process
      if (rst == 1'b1) begin
        s_789 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_789 <= s_12;
        end
      end
    end

  assign nCS1_10 = 1'b1;

  assign nCS1_11 = 1'b1;

  assign nCS1_12 = 1'b1;

  assign nCS1_13 = 1'b1;

  assign nCS1_14 = 1'b1;

  assign nCS1_15 = 1'b1;

  assign nCS1_16 = 1'b1;

  assign nCS1_17 = 1'b0;

  assign nCS1_18 = 1'b0;

  assign nCS1_19 = 1'b1;

  assign nCS1_20 = 1'b1;

  assign tmp_874 = (s_7 == 1'b0 ? nCS1_19 :
              nCS1_20);

  assign tmp_875 = (s_8 == 1'b0 ? tmp_874 :
              nCS1_21);

  always @(posedge clk)
    begin : rd_557_process
      if (rst == 1'b1) begin
        tmp_876 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_876 <= tmp_875;
        end
      end
    end

  always @(posedge clk)
    begin : rd_559_process
      if (rst == 1'b1) begin
        nCS1_22 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS1_22 <= nCS1_21;
        end
      end
    end

  assign tmp_877 = (tmp_4 == 1'b0 ? nCS1_21 :
              nCS1_11);

  assign tmp_878 = (tmp_6 == 1'b0 ? tmp_877 :
              nCS1_12);

  assign tmp_879 = (tmp_8 == 1'b0 ? tmp_878 :
              nCS1_13);

  assign tmp_880 = (tmp_10 == 1'b0 ? tmp_879 :
              nCS1_14);

  assign tmp_881 = (tmp_12 == 1'b0 ? tmp_880 :
              nCS1_15);

  assign tmp_882 = (tmp_14 == 1'b0 ? tmp_881 :
              nCS1_16);

  assign tmp_883 = (tmp_16 == 1'b0 ? tmp_882 :
              nCS1_17);

  assign tmp_884 = (tmp_18 == 1'b0 ? tmp_883 :
              nCS1_18);

  assign tmp_885 = (s_9 == 1'b0 ? nCS1_21 :
              nCS1_10);

  assign tmp_886 = (s_10 == 1'b0 ? tmp_885 :
              tmp_884);

  assign tmp_887 = (s_11 == 1'b0 ? nCS1_21 :
              tmp_886);

  always @(posedge clk)
    begin : rd_558_process
      if (rst == 1'b1) begin
        tmp_888 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_888 <= tmp_887;
        end
      end
    end

  assign tmp_889 = (s_789 == 1'b0 ? tmp_888 :
              nCS1_22);

  assign tmp_890 = (s_14 == 1'b0 ? nCS1_21 :
              nCS1_2);

  assign tmp_891 = (s_15 == 1'b0 ? tmp_890 :
              nCS1_3);

  assign tmp_892 = (s_16 == 1'b0 ? tmp_891 :
              nCS1_4);

  assign tmp_893 = (s_17 == 1'b0 ? tmp_892 :
              nCS1_5);

  assign tmp_894 = (s_18 == 1'b0 ? tmp_893 :
              nCS1_6);

  assign tmp_895 = (s_19 == 1'b0 ? tmp_894 :
              nCS1_7);

  assign tmp_896 = (s_20 == 1'b0 ? tmp_895 :
              nCS1_8);

  assign tmp_897 = (s_21 == 1'b0 ? tmp_896 :
              nCS1_9);

  always @(posedge clk)
    begin : rd_560_process
      if (rst == 1'b1) begin
        tmp_898 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_898 <= tmp_897;
        end
      end
    end

  assign tmp_899 = (s_22 == 1'b0 ? nCS1_21 :
              nCS1_1);

  assign tmp_900 = (s_23 == 1'b0 ? nCS1_21 :
              tmp_899);

  always @(posedge clk)
    begin : rd_561_process
      if (rst == 1'b1) begin
        tmp_901 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_901 <= tmp_900;
        end
      end
    end

  assign nCS1_21 = (nCS1_reg_ctrl_const_out == 1'b0 ? nCS1_reg_Initial_Val_out :
              tmp_902);

  always @(posedge clk)
    begin : rd_562_process
      if (rst == 1'b1) begin
        nCS1_23 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS1_23 <= nCS1_21;
        end
      end
    end

  always @(is_SPI_MNGR_84, nCS1_23, tmp_876, tmp_889, tmp_898, tmp_901) begin
    case ( is_SPI_MNGR_84)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p180_tmp = tmp_876;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p180_tmp = tmp_889;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p180_tmp = tmp_898;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p180_tmp = tmp_901;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p180_tmp = nCS1_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p180_tmp = nCS1_23;
        end
      default :
        begin
          p180_tmp = nCS1_23;
        end
    endcase
    tmp_902 = p180_tmp;
  end

  assign nCS1 = tmp_902;

  always @(posedge clk)
    begin : rd_563_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_85 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_85 <= is_SPI_MNGR_38;
        end
      end
    end

  assign nCS2_reg_ctrl_const_out = 1'b1;

  assign nCS2_reg_Initial_Val_out = 1'b1;

  assign nCS2_1 = 1'b1;

  assign nCS2_2 = 1'b1;

  assign nCS2_3 = 1'b1;

  assign nCS2_4 = 1'b1;

  assign nCS2_5 = 1'b1;

  assign nCS2_6 = 1'b0;

  assign nCS2_7 = 1'b0;

  assign nCS2_8 = 1'b1;

  assign nCS2_9 = 1'b1;

  always @(posedge clk)
    begin : rd_564_process
      if (rst == 1'b1) begin
        s_790 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_790 <= s_12;
        end
      end
    end

  assign nCS2_10 = 1'b1;

  assign nCS2_11 = 1'b1;

  assign nCS2_12 = 1'b1;

  assign nCS2_13 = 1'b1;

  assign nCS2_14 = 1'b1;

  assign nCS2_15 = 1'b0;

  assign nCS2_16 = 1'b0;

  assign nCS2_17 = 1'b1;

  assign nCS2_18 = 1'b1;

  assign nCS2_19 = 1'b1;

  assign nCS2_20 = 1'b1;

  assign tmp_903 = (s_7 == 1'b0 ? nCS2_19 :
              nCS2_20);

  assign tmp_904 = (s_8 == 1'b0 ? tmp_903 :
              nCS2_21);

  always @(posedge clk)
    begin : rd_565_process
      if (rst == 1'b1) begin
        tmp_905 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_905 <= tmp_904;
        end
      end
    end

  always @(posedge clk)
    begin : rd_567_process
      if (rst == 1'b1) begin
        nCS2_22 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS2_22 <= nCS2_21;
        end
      end
    end

  assign tmp_906 = (tmp_4 == 1'b0 ? nCS2_21 :
              nCS2_11);

  assign tmp_907 = (tmp_6 == 1'b0 ? tmp_906 :
              nCS2_12);

  assign tmp_908 = (tmp_8 == 1'b0 ? tmp_907 :
              nCS2_13);

  assign tmp_909 = (tmp_10 == 1'b0 ? tmp_908 :
              nCS2_14);

  assign tmp_910 = (tmp_12 == 1'b0 ? tmp_909 :
              nCS2_15);

  assign tmp_911 = (tmp_14 == 1'b0 ? tmp_910 :
              nCS2_16);

  assign tmp_912 = (tmp_16 == 1'b0 ? tmp_911 :
              nCS2_17);

  assign tmp_913 = (tmp_18 == 1'b0 ? tmp_912 :
              nCS2_18);

  assign tmp_914 = (s_9 == 1'b0 ? nCS2_21 :
              nCS2_10);

  assign tmp_915 = (s_10 == 1'b0 ? tmp_914 :
              tmp_913);

  assign tmp_916 = (s_11 == 1'b0 ? nCS2_21 :
              tmp_915);

  always @(posedge clk)
    begin : rd_566_process
      if (rst == 1'b1) begin
        tmp_917 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_917 <= tmp_916;
        end
      end
    end

  assign tmp_918 = (s_790 == 1'b0 ? tmp_917 :
              nCS2_22);

  assign tmp_919 = (s_14 == 1'b0 ? nCS2_21 :
              nCS2_2);

  assign tmp_920 = (s_15 == 1'b0 ? tmp_919 :
              nCS2_3);

  assign tmp_921 = (s_16 == 1'b0 ? tmp_920 :
              nCS2_4);

  assign tmp_922 = (s_17 == 1'b0 ? tmp_921 :
              nCS2_5);

  assign tmp_923 = (s_18 == 1'b0 ? tmp_922 :
              nCS2_6);

  assign tmp_924 = (s_19 == 1'b0 ? tmp_923 :
              nCS2_7);

  assign tmp_925 = (s_20 == 1'b0 ? tmp_924 :
              nCS2_8);

  assign tmp_926 = (s_21 == 1'b0 ? tmp_925 :
              nCS2_9);

  always @(posedge clk)
    begin : rd_568_process
      if (rst == 1'b1) begin
        tmp_927 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_927 <= tmp_926;
        end
      end
    end

  assign tmp_928 = (s_22 == 1'b0 ? nCS2_21 :
              nCS2_1);

  assign tmp_929 = (s_23 == 1'b0 ? nCS2_21 :
              tmp_928);

  always @(posedge clk)
    begin : rd_569_process
      if (rst == 1'b1) begin
        tmp_930 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_930 <= tmp_929;
        end
      end
    end

  assign nCS2_21 = (nCS2_reg_ctrl_const_out == 1'b0 ? nCS2_reg_Initial_Val_out :
              tmp_931);

  always @(posedge clk)
    begin : rd_570_process
      if (rst == 1'b1) begin
        nCS2_23 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS2_23 <= nCS2_21;
        end
      end
    end

  always @(is_SPI_MNGR_85, nCS2_23, tmp_905, tmp_918, tmp_927, tmp_930) begin
    case ( is_SPI_MNGR_85)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p183_tmp = tmp_905;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p183_tmp = tmp_918;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p183_tmp = tmp_927;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p183_tmp = tmp_930;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p183_tmp = nCS2_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p183_tmp = nCS2_23;
        end
      default :
        begin
          p183_tmp = nCS2_23;
        end
    endcase
    tmp_931 = p183_tmp;
  end

  assign nCS2 = tmp_931;

  always @(posedge clk)
    begin : rd_571_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_86 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_86 <= is_SPI_MNGR_38;
        end
      end
    end

  assign nCS3_reg_ctrl_const_out = 1'b1;

  assign nCS3_reg_Initial_Val_out = 1'b1;

  assign nCS3_1 = 1'b1;

  assign nCS3_2 = 1'b1;

  assign nCS3_3 = 1'b1;

  assign nCS3_4 = 1'b0;

  assign nCS3_5 = 1'b0;

  assign nCS3_6 = 1'b1;

  assign nCS3_7 = 1'b1;

  assign nCS3_8 = 1'b1;

  assign nCS3_9 = 1'b1;

  always @(posedge clk)
    begin : rd_572_process
      if (rst == 1'b1) begin
        s_791 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_791 <= s_12;
        end
      end
    end

  assign nCS3_10 = 1'b1;

  assign nCS3_11 = 1'b1;

  assign nCS3_12 = 1'b1;

  assign nCS3_13 = 1'b0;

  assign nCS3_14 = 1'b0;

  assign nCS3_15 = 1'b1;

  assign nCS3_16 = 1'b1;

  assign nCS3_17 = 1'b1;

  assign nCS3_18 = 1'b1;

  assign nCS3_19 = 1'b1;

  assign nCS3_20 = 1'b1;

  assign tmp_932 = (s_7 == 1'b0 ? nCS3_19 :
              nCS3_20);

  assign tmp_933 = (s_8 == 1'b0 ? tmp_932 :
              nCS3_21);

  always @(posedge clk)
    begin : rd_573_process
      if (rst == 1'b1) begin
        tmp_934 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_934 <= tmp_933;
        end
      end
    end

  always @(posedge clk)
    begin : rd_575_process
      if (rst == 1'b1) begin
        nCS3_22 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS3_22 <= nCS3_21;
        end
      end
    end

  assign tmp_935 = (tmp_4 == 1'b0 ? nCS3_21 :
              nCS3_11);

  assign tmp_936 = (tmp_6 == 1'b0 ? tmp_935 :
              nCS3_12);

  assign tmp_937 = (tmp_8 == 1'b0 ? tmp_936 :
              nCS3_13);

  assign tmp_938 = (tmp_10 == 1'b0 ? tmp_937 :
              nCS3_14);

  assign tmp_939 = (tmp_12 == 1'b0 ? tmp_938 :
              nCS3_15);

  assign tmp_940 = (tmp_14 == 1'b0 ? tmp_939 :
              nCS3_16);

  assign tmp_941 = (tmp_16 == 1'b0 ? tmp_940 :
              nCS3_17);

  assign tmp_942 = (tmp_18 == 1'b0 ? tmp_941 :
              nCS3_18);

  assign tmp_943 = (s_9 == 1'b0 ? nCS3_21 :
              nCS3_10);

  assign tmp_944 = (s_10 == 1'b0 ? tmp_943 :
              tmp_942);

  assign tmp_945 = (s_11 == 1'b0 ? nCS3_21 :
              tmp_944);

  always @(posedge clk)
    begin : rd_574_process
      if (rst == 1'b1) begin
        tmp_946 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_946 <= tmp_945;
        end
      end
    end

  assign tmp_947 = (s_791 == 1'b0 ? tmp_946 :
              nCS3_22);

  assign tmp_948 = (s_14 == 1'b0 ? nCS3_21 :
              nCS3_2);

  assign tmp_949 = (s_15 == 1'b0 ? tmp_948 :
              nCS3_3);

  assign tmp_950 = (s_16 == 1'b0 ? tmp_949 :
              nCS3_4);

  assign tmp_951 = (s_17 == 1'b0 ? tmp_950 :
              nCS3_5);

  assign tmp_952 = (s_18 == 1'b0 ? tmp_951 :
              nCS3_6);

  assign tmp_953 = (s_19 == 1'b0 ? tmp_952 :
              nCS3_7);

  assign tmp_954 = (s_20 == 1'b0 ? tmp_953 :
              nCS3_8);

  assign tmp_955 = (s_21 == 1'b0 ? tmp_954 :
              nCS3_9);

  always @(posedge clk)
    begin : rd_576_process
      if (rst == 1'b1) begin
        tmp_956 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_956 <= tmp_955;
        end
      end
    end

  assign tmp_957 = (s_22 == 1'b0 ? nCS3_21 :
              nCS3_1);

  assign tmp_958 = (s_23 == 1'b0 ? nCS3_21 :
              tmp_957);

  always @(posedge clk)
    begin : rd_577_process
      if (rst == 1'b1) begin
        tmp_959 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_959 <= tmp_958;
        end
      end
    end

  assign nCS3_21 = (nCS3_reg_ctrl_const_out == 1'b0 ? nCS3_reg_Initial_Val_out :
              tmp_960);

  always @(posedge clk)
    begin : rd_578_process
      if (rst == 1'b1) begin
        nCS3_23 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS3_23 <= nCS3_21;
        end
      end
    end

  always @(is_SPI_MNGR_86, nCS3_23, tmp_934, tmp_947, tmp_956, tmp_959) begin
    case ( is_SPI_MNGR_86)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p186_tmp = tmp_934;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p186_tmp = tmp_947;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p186_tmp = tmp_956;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p186_tmp = tmp_959;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p186_tmp = nCS3_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p186_tmp = nCS3_23;
        end
      default :
        begin
          p186_tmp = nCS3_23;
        end
    endcase
    tmp_960 = p186_tmp;
  end

  assign nCS3 = tmp_960;

  always @(posedge clk)
    begin : rd_579_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_87 <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_87 <= is_SPI_MNGR_38;
        end
      end
    end

  assign nCS4_reg_ctrl_const_out = 1'b1;

  assign nCS4_reg_Initial_Val_out = 1'b1;

  assign nCS4_1 = 1'b1;

  assign nCS4_2 = 1'b0;

  assign nCS4_3 = 1'b0;

  assign nCS4_4 = 1'b1;

  assign nCS4_5 = 1'b1;

  assign nCS4_6 = 1'b1;

  assign nCS4_7 = 1'b1;

  assign nCS4_8 = 1'b1;

  assign nCS4_9 = 1'b1;

  always @(posedge clk)
    begin : rd_580_process
      if (rst == 1'b1) begin
        s_792 <= 1'b0;
      end
      else begin
        if (enb) begin
          s_792 <= s_12;
        end
      end
    end

  assign nCS4_10 = 1'b1;

  assign nCS4_11 = 1'b0;

  assign nCS4_12 = 1'b0;

  assign nCS4_13 = 1'b1;

  assign nCS4_14 = 1'b1;

  assign nCS4_15 = 1'b1;

  assign nCS4_16 = 1'b1;

  assign nCS4_17 = 1'b1;

  assign nCS4_18 = 1'b1;

  assign nCS4_19 = 1'b1;

  assign nCS4_20 = 1'b1;

  assign tmp_961 = (s_7 == 1'b0 ? nCS4_19 :
              nCS4_20);

  assign tmp_962 = (s_8 == 1'b0 ? tmp_961 :
              nCS4_21);

  always @(posedge clk)
    begin : rd_581_process
      if (rst == 1'b1) begin
        tmp_963 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_963 <= tmp_962;
        end
      end
    end

  always @(posedge clk)
    begin : rd_583_process
      if (rst == 1'b1) begin
        nCS4_22 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS4_22 <= nCS4_21;
        end
      end
    end

  assign tmp_964 = (tmp_4 == 1'b0 ? nCS4_21 :
              nCS4_11);

  assign tmp_965 = (tmp_6 == 1'b0 ? tmp_964 :
              nCS4_12);

  assign tmp_966 = (tmp_8 == 1'b0 ? tmp_965 :
              nCS4_13);

  assign tmp_967 = (tmp_10 == 1'b0 ? tmp_966 :
              nCS4_14);

  assign tmp_968 = (tmp_12 == 1'b0 ? tmp_967 :
              nCS4_15);

  assign tmp_969 = (tmp_14 == 1'b0 ? tmp_968 :
              nCS4_16);

  assign tmp_970 = (tmp_16 == 1'b0 ? tmp_969 :
              nCS4_17);

  assign tmp_971 = (tmp_18 == 1'b0 ? tmp_970 :
              nCS4_18);

  assign tmp_972 = (s_9 == 1'b0 ? nCS4_21 :
              nCS4_10);

  assign tmp_973 = (s_10 == 1'b0 ? tmp_972 :
              tmp_971);

  assign tmp_974 = (s_11 == 1'b0 ? nCS4_21 :
              tmp_973);

  always @(posedge clk)
    begin : rd_582_process
      if (rst == 1'b1) begin
        tmp_975 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_975 <= tmp_974;
        end
      end
    end

  assign tmp_976 = (s_792 == 1'b0 ? tmp_975 :
              nCS4_22);

  assign tmp_977 = (s_14 == 1'b0 ? nCS4_21 :
              nCS4_2);

  assign tmp_978 = (s_15 == 1'b0 ? tmp_977 :
              nCS4_3);

  assign tmp_979 = (s_16 == 1'b0 ? tmp_978 :
              nCS4_4);

  assign tmp_980 = (s_17 == 1'b0 ? tmp_979 :
              nCS4_5);

  assign tmp_981 = (s_18 == 1'b0 ? tmp_980 :
              nCS4_6);

  assign tmp_982 = (s_19 == 1'b0 ? tmp_981 :
              nCS4_7);

  assign tmp_983 = (s_20 == 1'b0 ? tmp_982 :
              nCS4_8);

  assign tmp_984 = (s_21 == 1'b0 ? tmp_983 :
              nCS4_9);

  always @(posedge clk)
    begin : rd_584_process
      if (rst == 1'b1) begin
        tmp_985 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_985 <= tmp_984;
        end
      end
    end

  assign tmp_986 = (s_22 == 1'b0 ? nCS4_21 :
              nCS4_1);

  assign tmp_987 = (s_23 == 1'b0 ? nCS4_21 :
              tmp_986);

  always @(posedge clk)
    begin : rd_585_process
      if (rst == 1'b1) begin
        tmp_988 <= 1'b0;
      end
      else begin
        if (enb) begin
          tmp_988 <= tmp_987;
        end
      end
    end

  assign nCS4_21 = (nCS4_reg_ctrl_const_out == 1'b0 ? nCS4_reg_Initial_Val_out :
              tmp_989);

  always @(posedge clk)
    begin : rd_586_process
      if (rst == 1'b1) begin
        nCS4_23 <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS4_23 <= nCS4_21;
        end
      end
    end

  always @(is_SPI_MNGR_87, nCS4_23, tmp_963, tmp_976, tmp_985, tmp_988) begin
    case ( is_SPI_MNGR_87)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p189_tmp = tmp_963;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p189_tmp = tmp_976;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p189_tmp = tmp_985;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p189_tmp = tmp_988;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_A :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_CH_B :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p189_tmp = nCS4_23;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p189_tmp = nCS4_23;
        end
      default :
        begin
          p189_tmp = nCS4_23;
        end
    endcase
    tmp_989 = p189_tmp;
  end

  assign nCS4 = tmp_989;

endmodule  // SPI_MNGR

