// -------------------------------------------------------------
// 
// File Name: C:\Users\Angel\Desktop\hil\ips\MCP_DRIVER\hdlsrc\int2bin_sdi\SPI_DAC.v
// Created: 2025-05-04 08:33:50
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.8e-06
// Target subsystem base rate: 1.8e-06
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1.8e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// SDI                           ce_out        1.8e-06
// SCK                           ce_out        1.8e-06
// nCS1                          ce_out        1.8e-06
// nCS2                          ce_out        1.8e-06
// nCS3                          ce_out        1.8e-06
// nCS4                          ce_out        1.8e-06
// debug_0                       ce_out        1.8e-06
// debug_1                       ce_out        1.8e-06
// debug_2                       ce_out        1.8e-06
// debug_3                       ce_out        1.8e-06
// debug_4                       ce_out        1.8e-06
// debug_5                       ce_out        1.8e-06
// debug_6                       ce_out        1.8e-06
// debug_7                       ce_out        1.8e-06
// debug_8                       ce_out        1.8e-06
// debug_9                       ce_out        1.8e-06
// debug_10                      ce_out        1.8e-06
// debug_11                      ce_out        1.8e-06
// debug_12                      ce_out        1.8e-06
// debug_13                      ce_out        1.8e-06
// debug_14                      ce_out        1.8e-06
// debug_15                      ce_out        1.8e-06
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SPI_DAC
// Source Path: int2bin_sdi/SPI_DAC
// Hierarchy Level: 0
// Model version: 3.158
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SPI_DAC
          (clk,
           rst,
           clk_enable,
           v1_1,
           v1_2,
           v2_1,
           v2_2,
           v3_2,
           v3_1,
           v4_1,
           v4_2,
           ce_out,
           SDI,
           SCK,
           nCS1,
           nCS2,
           nCS3,
           nCS4,
           debug_0,
           debug_1,
           debug_2,
           debug_3,
           debug_4,
           debug_5,
           debug_6,
           debug_7,
           debug_8,
           debug_9,
           debug_10,
           debug_11,
           debug_12,
           debug_13,
           debug_14,
           debug_15);


  input   clk;
  input   rst;
  input   clk_enable;
  input   [15:0] v1_1;  // uint16
  input   [15:0] v1_2;  // uint16
  input   [15:0] v2_1;  // uint16
  input   [15:0] v2_2;  // uint16
  input   [15:0] v3_2;  // uint16
  input   [15:0] v3_1;  // uint16
  input   [15:0] v4_1;  // uint16
  input   [15:0] v4_2;  // uint16
  output  ce_out;
  output  SDI;
  output  SCK;
  output  nCS1;
  output  nCS2;
  output  nCS3;
  output  nCS4;
  output  debug_0;  // boolean
  output  debug_1;  // boolean
  output  debug_2;  // boolean
  output  debug_3;  // boolean
  output  debug_4;  // boolean
  output  debug_5;  // boolean
  output  debug_6;  // boolean
  output  debug_7;  // boolean
  output  debug_8;  // boolean
  output  debug_9;  // boolean
  output  debug_10;  // boolean
  output  debug_11;  // boolean
  output  debug_12;  // boolean
  output  debug_13;  // boolean
  output  debug_14;  // boolean
  output  debug_15;  // boolean


  wire enb;
  reg [15:0] Delay1_out1;  // uint16
  reg [15:0] Delay2_out1;  // uint16
  reg [15:0] Delay3_out1;  // uint16
  reg [15:0] Delay4_out1;  // uint16
  reg [15:0] Delay5_out1;  // uint16
  reg [15:0] Delay12_out1;  // uint16
  reg [15:0] Delay13_out1;  // uint16
  reg [15:0] Delay14_out1;  // uint16
  wire SDI_1;
  wire SCK_1;
  wire nCS1_1;
  wire nCS2_1;
  wire nCS3_1;
  wire nCS4_1;
  wire payload_debug_0;
  wire payload_debug_1;
  wire payload_debug_2;
  wire payload_debug_3;
  wire payload_debug_4;
  wire payload_debug_5;
  wire payload_debug_6;
  wire payload_debug_7;
  wire payload_debug_8;
  wire payload_debug_9;
  wire payload_debug_10;
  wire payload_debug_11;
  wire payload_debug_12;
  wire payload_debug_13;
  wire payload_debug_14;
  wire payload_debug_15;
  reg  Delay10_out1;
  reg  Delay9_out1;
  wire Delay8_ctrl_const_out;
  reg  Delay8_ctrl_delay_out;
  wire Delay8_Initial_Val_out;
  reg  Delay8_out;
  wire Delay8_out1;
  wire Delay7_ctrl_const_out;
  reg  Delay7_ctrl_delay_out;
  wire Delay7_Initial_Val_out;
  reg  Delay7_out;
  wire Delay7_out1;
  wire Delay6_ctrl_const_out;
  reg  Delay6_ctrl_delay_out;
  wire Delay6_Initial_Val_out;
  reg  Delay6_out;
  wire Delay6_out1;
  wire Delay11_ctrl_const_out;
  reg  Delay11_ctrl_delay_out;
  wire Delay11_Initial_Val_out;
  reg  Delay11_out;
  wire Delay11_out1;
  wire [15:0] payload_debug;  // boolean [16]
  reg  [15:0] Delay15_out1;  // boolean [16]


  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay1_process
      if (rst == 1'b1) begin
        Delay1_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= v3_2;
        end
      end
    end
  always @(posedge clk)
    begin : Delay2_process
      if (rst == 1'b1) begin
        Delay2_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= v3_1;
        end
      end
    end
  always @(posedge clk)
    begin : Delay3_process
      if (rst == 1'b1) begin
        Delay3_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= v1_2;
        end
      end
    end
  always @(posedge clk)
    begin : Delay4_process
      if (rst == 1'b1) begin
        Delay4_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= v2_1;
        end
      end
    end
  always @(posedge clk)
    begin : Delay5_process
      if (rst == 1'b1) begin
        Delay5_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= v2_2;
        end
      end
    end
  always @(posedge clk)
    begin : Delay12_process
      if (rst == 1'b1) begin
        Delay12_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= v1_1;
        end
      end
    end
  always @(posedge clk)
    begin : Delay13_process
      if (rst == 1'b1) begin
        Delay13_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1 <= v4_1;
        end
      end
    end
  always @(posedge clk)
    begin : Delay14_process
      if (rst == 1'b1) begin
        Delay14_out1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= v4_2;
        end
      end
    end
  SPI_MNGR u_SPI_MNGR (.clk(clk),
                       .rst(rst),
                       .enb(clk_enable),
                       .v3_2(Delay1_out1),  // uint16
                       .v3_1(Delay2_out1),  // uint16
                       .v1_2(Delay3_out1),  // uint16
                       .v2_1(Delay4_out1),  // uint16
                       .v2_2(Delay5_out1),  // uint16
                       .v1_1(Delay12_out1),  // uint16
                       .v4_2(Delay13_out1),  // uint16
                       .v4_1(Delay14_out1),  // uint16
                       .SDI(SDI_1),
                       .SCK(SCK_1),
                       .nCS1(nCS1_1),
                       .nCS2(nCS2_1),
                       .nCS3(nCS3_1),
                       .nCS4(nCS4_1),
                       .payload_debug_0(payload_debug_0),  // boolean
                       .payload_debug_1(payload_debug_1),  // boolean
                       .payload_debug_2(payload_debug_2),  // boolean
                       .payload_debug_3(payload_debug_3),  // boolean
                       .payload_debug_4(payload_debug_4),  // boolean
                       .payload_debug_5(payload_debug_5),  // boolean
                       .payload_debug_6(payload_debug_6),  // boolean
                       .payload_debug_7(payload_debug_7),  // boolean
                       .payload_debug_8(payload_debug_8),  // boolean
                       .payload_debug_9(payload_debug_9),  // boolean
                       .payload_debug_10(payload_debug_10),  // boolean
                       .payload_debug_11(payload_debug_11),  // boolean
                       .payload_debug_12(payload_debug_12),  // boolean
                       .payload_debug_13(payload_debug_13),  // boolean
                       .payload_debug_14(payload_debug_14),  // boolean
                       .payload_debug_15(payload_debug_15)  // boolean
                       );
  always @(posedge clk)
    begin : Delay10_process
      if (rst == 1'b1) begin
        Delay10_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= SDI_1;
        end
      end
    end
  assign SDI = Delay10_out1;

  always @(posedge clk)
    begin : Delay9_process
      if (rst == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_out1 <= SCK_1;
        end
      end
    end
  assign SCK = Delay9_out1;

  assign Delay8_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : Delay8_ctrl_delay_process
      if (rst == 1'b1) begin
        Delay8_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_ctrl_delay_out <= Delay8_ctrl_const_out;
        end
      end
    end

  assign Delay8_Initial_Val_out = 1'b1;

  always @(posedge clk)
    begin : Delay8_process
      if (rst == 1'b1) begin
        Delay8_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_out <= nCS1_1;
        end
      end
    end
  assign Delay8_out1 = (Delay8_ctrl_delay_out == 1'b0 ? Delay8_Initial_Val_out :
              Delay8_out);

  assign nCS1 = Delay8_out1;

  assign Delay7_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : Delay7_ctrl_delay_process
      if (rst == 1'b1) begin
        Delay7_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_ctrl_delay_out <= Delay7_ctrl_const_out;
        end
      end
    end

  assign Delay7_Initial_Val_out = 1'b1;

  always @(posedge clk)
    begin : Delay7_process
      if (rst == 1'b1) begin
        Delay7_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_out <= nCS2_1;
        end
      end
    end
  assign Delay7_out1 = (Delay7_ctrl_delay_out == 1'b0 ? Delay7_Initial_Val_out :
              Delay7_out);

  assign nCS2 = Delay7_out1;

  assign Delay6_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : Delay6_ctrl_delay_process
      if (rst == 1'b1) begin
        Delay6_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_ctrl_delay_out <= Delay6_ctrl_const_out;
        end
      end
    end

  assign Delay6_Initial_Val_out = 1'b1;

  always @(posedge clk)
    begin : Delay6_process
      if (rst == 1'b1) begin
        Delay6_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out <= nCS3_1;
        end
      end
    end
  assign Delay6_out1 = (Delay6_ctrl_delay_out == 1'b0 ? Delay6_Initial_Val_out :
              Delay6_out);

  assign nCS3 = Delay6_out1;

  assign Delay11_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : Delay11_ctrl_delay_process
      if (rst == 1'b1) begin
        Delay11_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_ctrl_delay_out <= Delay11_ctrl_const_out;
        end
      end
    end

  assign Delay11_Initial_Val_out = 1'b1;

  always @(posedge clk)
    begin : Delay11_process
      if (rst == 1'b1) begin
        Delay11_out <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay11_out <= nCS4_1;
        end
      end
    end
  assign Delay11_out1 = (Delay11_ctrl_delay_out == 1'b0 ? Delay11_Initial_Val_out :
              Delay11_out);

  assign nCS4 = Delay11_out1;

  assign payload_debug[0] = payload_debug_0;
  assign payload_debug[1] = payload_debug_1;
  assign payload_debug[2] = payload_debug_2;
  assign payload_debug[3] = payload_debug_3;
  assign payload_debug[4] = payload_debug_4;
  assign payload_debug[5] = payload_debug_5;
  assign payload_debug[6] = payload_debug_6;
  assign payload_debug[7] = payload_debug_7;
  assign payload_debug[8] = payload_debug_8;
  assign payload_debug[9] = payload_debug_9;
  assign payload_debug[10] = payload_debug_10;
  assign payload_debug[11] = payload_debug_11;
  assign payload_debug[12] = payload_debug_12;
  assign payload_debug[13] = payload_debug_13;
  assign payload_debug[14] = payload_debug_14;
  assign payload_debug[15] = payload_debug_15;

  always @(posedge clk)
    begin : Delay15_process
      if (rst == 1'b1) begin
        Delay15_out1 <= {16{1'b0}};
      end
      else begin
        if (enb) begin
          Delay15_out1 <= payload_debug;
        end
      end
    end
  assign debug_0 = Delay15_out1[0];

  assign debug_1 = Delay15_out1[1];

  assign debug_2 = Delay15_out1[2];

  assign debug_3 = Delay15_out1[3];

  assign debug_4 = Delay15_out1[4];

  assign debug_5 = Delay15_out1[5];

  assign debug_6 = Delay15_out1[6];

  assign debug_7 = Delay15_out1[7];

  assign debug_8 = Delay15_out1[8];

  assign debug_9 = Delay15_out1[9];

  assign debug_10 = Delay15_out1[10];

  assign debug_11 = Delay15_out1[11];

  assign debug_12 = Delay15_out1[12];

  assign debug_13 = Delay15_out1[13];

  assign debug_14 = Delay15_out1[14];

  assign debug_15 = Delay15_out1[15];

  assign ce_out = clk_enable;

endmodule  // SPI_DAC

