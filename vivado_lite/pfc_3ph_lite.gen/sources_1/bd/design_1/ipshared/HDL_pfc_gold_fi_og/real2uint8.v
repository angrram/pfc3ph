// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi_og\real2uint8.v
// Created: 2025-04-29 18:38:06
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: real2uint8
// Source Path: HDL_pfc_gold_fi_og/simscape_system/real2uint8
// Hierarchy Level: 1
// Model version: 1.184
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module real2uint8
          (clk,
           reset,
           enb_1_37_1,
           enb,
           I_load,
           Vout,
           Ib,
           Ic,
           Ia,
           Vb,
           Vc,
           Va,
           O_Ia,
           O_Ib,
           O_Ic,
           O_Vc,
           O_Vb,
           O_Va,
           O_Vout,
           O_I_load);


  input   clk;
  input   reset;
  input   enb_1_37_1;
  input   enb;
  input   signed [17:0] I_load;  // sfix18_En6
  input   signed [17:0] Vout;  // sfix18_En6
  input   signed [17:0] Ib;  // sfix18_En6
  input   signed [17:0] Ic;  // sfix18_En6
  input   signed [17:0] Ia;  // sfix18_En6
  input   signed [17:0] Vb;  // sfix18_En6
  input   signed [17:0] Vc;  // sfix18_En6
  input   signed [17:0] Va;  // sfix18_En6
  output  [15:0] O_Ia;  // uint16
  output  [15:0] O_Ib;  // uint16
  output  [15:0] O_Ic;  // uint16
  output  [15:0] O_Vc;  // uint16
  output  [15:0] O_Vb;  // uint16
  output  [15:0] O_Va;  // uint16
  output  [15:0] O_Vout;  // uint16
  output  [15:0] O_I_load;  // uint16


  wire signed [17:0] Constant_out1;  // sfix18_En6
  wire signed [17:0] Mux1_out1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Mux1_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay3_bypass_reg [0:2];  // sfix18 [3]
  reg signed [17:0] Delay3_bypass_reg_next [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay3_out1 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Delay3_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay3_out1_2 [0:2];  // sfix18_En6 [3]
  wire signed [18:0] Add2_u;  // sfix19_En6
  wire signed [18:0] Add2_add_cast [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Add2_add_temp [0:2];  // sfix19_En6 [3]
  wire signed [17:0] Add2_out1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Add2_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay2_bypass_reg [0:2];  // sfix18 [3]
  reg signed [17:0] Delay2_bypass_reg_next [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay2_out1 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Delay2_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay2_out1_2 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] kconst;  // sfix18_En11
  reg signed [17:0] kconst_1;  // sfix18_En11
  (* use_dsp  = "no" *)   wire signed [35:0] Gain2_out1 [0:2];  // sfix36_En17 [3]
  reg signed [35:0] Gain2_out1_1 [0:2];  // sfix36_En17 [3]
  wire signed [17:0] Gain2_out1_2 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Gain2_out1_3 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay_bypass_reg [0:2];  // sfix18 [3]
  reg signed [17:0] Delay_bypass_reg_next [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay_out1 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Delay_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay_out1_2 [0:2];  // sfix18_En6 [3]
  wire [15:0] Data_Type_Conversion5_out1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion5_out1_1 [0:2];  // uint16 [3]
  reg [15:0] Delay1_bypass_reg [0:2];  // ufix16 [3]
  reg [15:0] Delay1_bypass_reg_next [0:2];  // ufix16 [3]
  reg [15:0] Delay1_out1 [0:2];  // uint16 [3]
  wire signed [17:0] Mux_out1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Mux_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay8_bypass_reg [0:2];  // sfix18 [3]
  reg signed [17:0] Delay8_bypass_reg_next [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay8_out1 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Delay8_out1_1 [0:2];  // sfix18_En6 [3]
  reg signed [17:0] Delay8_out1_2 [0:2];  // sfix18_En6 [3]
  wire signed [17:0] Constant1_out1;  // sfix18_En6
  wire signed [18:0] Add3_v;  // sfix19_En6
  wire signed [18:0] Add3_add_cast [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Add3_out1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Add3_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay11_bypass_reg [0:2];  // sfix19 [3]
  reg signed [18:0] Delay11_bypass_reg_next [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay11_out1 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Delay11_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay11_out1_2 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] kconst_2;  // sfix19_En15
  reg signed [18:0] kconst_3;  // sfix19_En15
  (* use_dsp  = "no" *)   wire signed [37:0] Gain5_out1 [0:2];  // sfix38_En21 [3]
  reg signed [37:0] Gain5_out1_1 [0:2];  // sfix38_En21 [3]
  wire signed [18:0] Gain5_out1_2 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Gain5_out1_3 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay22_bypass_reg [0:2];  // sfix19 [3]
  reg signed [18:0] Delay22_bypass_reg_next [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay22_out1 [0:2];  // sfix19_En6 [3]
  wire signed [18:0] Delay22_out1_1 [0:2];  // sfix19_En6 [3]
  reg signed [18:0] Delay22_out1_2 [0:2];  // sfix19_En6 [3]
  wire [15:0] Data_Type_Conversion3_out1 [0:2];  // uint16 [3]
  reg [15:0] Data_Type_Conversion3_out1_1 [0:2];  // uint16 [3]
  reg [15:0] Delay24_bypass_reg [0:2];  // ufix16 [3]
  reg [15:0] Delay24_bypass_reg_next [0:2];  // ufix16 [3]
  reg [15:0] Delay24_out1 [0:2];  // uint16 [3]
  wire signed [17:0] kconst_4;  // sfix18_En14
  reg signed [17:0] kconst_5;  // sfix18_En14
  reg signed [17:0] Vout_1;  // sfix18_En6
  reg signed [17:0] Delay9_bypass_reg;  // sfix18
  wire signed [17:0] Delay9_out1;  // sfix18_En6
  wire signed [17:0] Delay9_out1_1;  // sfix18_En6
  reg signed [17:0] Delay9_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain4_out1;  // sfix36_En20
  reg signed [35:0] Gain4_out1_1;  // sfix36_En20
  wire signed [17:0] Gain4_out1_2;  // sfix18_En6
  reg signed [17:0] Gain4_out1_3;  // sfix18_En6
  reg signed [17:0] Delay12_bypass_reg;  // sfix18
  wire signed [17:0] Delay12_out1;  // sfix18_En6
  wire signed [17:0] Delay12_out1_1;  // sfix18_En6
  reg signed [17:0] Delay12_out1_2;  // sfix18_En6
  wire [15:0] Data_Type_Conversion9_out1;  // uint16
  reg [15:0] Data_Type_Conversion9_out1_1;  // uint16
  reg [15:0] Delay25_bypass_reg;  // ufix16
  wire [15:0] Delay25_out1;  // uint16
  wire signed [17:0] kconst_6;  // sfix18_En9
  reg signed [17:0] kconst_7;  // sfix18_En9
  reg signed [17:0] I_load_1;  // sfix18_En6
  reg signed [17:0] Delay6_bypass_reg;  // sfix18
  wire signed [17:0] Delay6_out1;  // sfix18_En6
  wire signed [17:0] Delay6_out1_1;  // sfix18_En6
  reg signed [17:0] Delay6_out1_2;  // sfix18_En6
  (* use_dsp  = "no" *)   wire signed [35:0] Gain3_out1;  // sfix36_En15
  reg signed [35:0] Gain3_out1_1;  // sfix36_En15
  wire signed [17:0] Gain3_out1_2;  // sfix18_En6
  reg signed [17:0] Gain3_out1_3;  // sfix18_En6
  reg signed [17:0] Delay16_bypass_reg;  // sfix18
  wire signed [17:0] Delay16_out1;  // sfix18_En6
  wire signed [17:0] Delay16_out1_1;  // sfix18_En6
  reg signed [17:0] Delay16_out1_2;  // sfix18_En6
  wire [15:0] Data_Type_Conversion20_out1;  // uint16
  reg [15:0] Data_Type_Conversion20_out1_1;  // uint16
  reg [15:0] Delay29_bypass_reg;  // ufix16
  wire [15:0] Delay29_out1;  // uint16
  reg signed [31:0] rd_0_t_0_0;  // int32
  reg signed [31:0] rd_0_t_1;  // int32
  reg signed [31:0] Delay3_bypass_t_0_0;  // int32
  reg signed [31:0] Delay3_bypass_t_1;  // int32
  reg signed [31:0] Delay3_bypass_t_2;  // int32
  reg signed [31:0] Delay3_bypass_t_0_1;  // int32
  reg signed [31:0] Delay3_bypass_t_1_0;  // int32
  reg signed [31:0] rd_1_t_0_0;  // int32
  reg signed [31:0] rd_1_t_1;  // int32
  reg signed [31:0] rd_2_t_0_0;  // int32
  reg signed [31:0] rd_2_t_1;  // int32
  reg signed [31:0] Delay2_bypass_t_0_0;  // int32
  reg signed [31:0] Delay2_bypass_t_1;  // int32
  reg signed [31:0] Delay2_bypass_t_2;  // int32
  reg signed [31:0] Delay2_bypass_t_0_1;  // int32
  reg signed [31:0] Delay2_bypass_t_1_0;  // int32
  reg signed [31:0] HwModeRegister2_t_0_0;  // int32
  reg signed [31:0] HwModeRegister2_t_1;  // int32
  reg signed [31:0] PipelineRegister1_t_0_0;  // int32
  reg signed [31:0] PipelineRegister1_t_1;  // int32
  reg signed [31:0] rd_3_t_0_0;  // int32
  reg signed [31:0] rd_3_t_1;  // int32
  reg signed [31:0] Delay_bypass_t_0_0;  // int32
  reg signed [31:0] Delay_bypass_t_1;  // int32
  reg signed [31:0] Delay_bypass_t_2;  // int32
  reg signed [31:0] Delay_bypass_t_0_1;  // int32
  reg signed [31:0] Delay_bypass_t_1_0;  // int32
  reg signed [31:0] rd_4_t_0_0;  // int32
  reg signed [31:0] rd_4_t_1;  // int32
  reg signed [31:0] rd_5_t_0_0;  // int32
  reg signed [31:0] rd_5_t_1;  // int32
  reg signed [31:0] Delay1_bypass_t_0_0;  // int32
  reg signed [31:0] Delay1_bypass_t_1;  // int32
  reg signed [31:0] Delay1_bypass_t_2;  // int32
  reg signed [31:0] Delay1_bypass_t_0_1;  // int32
  reg signed [31:0] Delay1_bypass_t_1_0;  // int32
  reg signed [31:0] rd_6_t_0_0;  // int32
  reg signed [31:0] rd_6_t_1;  // int32
  reg signed [31:0] Delay8_bypass_t_0_0;  // int32
  reg signed [31:0] Delay8_bypass_t_1;  // int32
  reg signed [31:0] Delay8_bypass_t_2;  // int32
  reg signed [31:0] Delay8_bypass_t_0_1;  // int32
  reg signed [31:0] Delay8_bypass_t_1_0;  // int32
  reg signed [31:0] rd_7_t_0_0;  // int32
  reg signed [31:0] rd_7_t_1;  // int32
  reg signed [31:0] rd_8_t_0_0;  // int32
  reg signed [31:0] rd_8_t_1;  // int32
  reg signed [31:0] Delay11_bypass_t_0_0;  // int32
  reg signed [31:0] Delay11_bypass_t_1;  // int32
  reg signed [31:0] Delay11_bypass_t_2;  // int32
  reg signed [31:0] Delay11_bypass_t_0_1;  // int32
  reg signed [31:0] Delay11_bypass_t_1_0;  // int32
  reg signed [31:0] HwModeRegister_t_0_0;  // int32
  reg signed [31:0] HwModeRegister_t_1;  // int32
  reg signed [31:0] PipelineRegister_t_0_0;  // int32
  reg signed [31:0] PipelineRegister_t_1;  // int32
  reg signed [31:0] rd_9_t_0_0;  // int32
  reg signed [31:0] rd_9_t_1;  // int32
  reg signed [31:0] Delay22_bypass_t_0_0;  // int32
  reg signed [31:0] Delay22_bypass_t_1;  // int32
  reg signed [31:0] Delay22_bypass_t_2;  // int32
  reg signed [31:0] Delay22_bypass_t_0_1;  // int32
  reg signed [31:0] Delay22_bypass_t_1_0;  // int32
  reg signed [31:0] rd_10_t_0_0;  // int32
  reg signed [31:0] rd_10_t_1;  // int32
  reg signed [31:0] rd_11_t_0_0;  // int32
  reg signed [31:0] rd_11_t_1;  // int32
  reg signed [31:0] Delay24_bypass_t_0_0;  // int32
  reg signed [31:0] Delay24_bypass_t_1;  // int32
  reg signed [31:0] Delay24_bypass_t_2;  // int32
  reg signed [31:0] Delay24_bypass_t_0_1;  // int32
  reg signed [31:0] Delay24_bypass_t_1_0;  // int32


  assign Constant_out1 = 18'sb000000101000000000;
  assign Mux1_out1[0] = Ib;
  assign Mux1_out1[1] = Ia;
  assign Mux1_out1[2] = Ic;
  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        for(rd_0_t_1 = 32'sd0; rd_0_t_1 <= 32'sd2; rd_0_t_1 = rd_0_t_1 + 32'sd1) begin
          Mux1_out1_1[rd_0_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_0_t_0_0 = 32'sd0; rd_0_t_0_0 <= 32'sd2; rd_0_t_0_0 = rd_0_t_0_0 + 32'sd1) begin
            Mux1_out1_1[rd_0_t_0_0] <= Mux1_out1[rd_0_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay3_bypass_process
      if (reset == 1'b1) begin
        for(Delay3_bypass_t_1_0 = 32'sd0; Delay3_bypass_t_1_0 <= 32'sd2; Delay3_bypass_t_1_0 = Delay3_bypass_t_1_0 + 32'sd1) begin
          Delay3_bypass_reg[Delay3_bypass_t_1_0] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay3_bypass_t_0_1 = 32'sd0; Delay3_bypass_t_0_1 <= 32'sd2; Delay3_bypass_t_0_1 = Delay3_bypass_t_0_1 + 32'sd1) begin
            Delay3_bypass_reg[Delay3_bypass_t_0_1] <= Delay3_bypass_reg_next[Delay3_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay3_bypass_t_1 = 32'sd0; Delay3_bypass_t_1 <= 32'sd2; Delay3_bypass_t_1 = Delay3_bypass_t_1 + 32'sd1) begin
        Delay3_out1[Delay3_bypass_t_1] = Mux1_out1_1[Delay3_bypass_t_1];
      end
    end
    else begin
      for(Delay3_bypass_t_0_0 = 32'sd0; Delay3_bypass_t_0_0 <= 32'sd2; Delay3_bypass_t_0_0 = Delay3_bypass_t_0_0 + 32'sd1) begin
        Delay3_out1[Delay3_bypass_t_0_0] = Delay3_bypass_reg[Delay3_bypass_t_0_0];
      end
    end

    for(Delay3_bypass_t_2 = 32'sd0; Delay3_bypass_t_2 <= 32'sd2; Delay3_bypass_t_2 = Delay3_bypass_t_2 + 32'sd1) begin
      Delay3_bypass_reg_next[Delay3_bypass_t_2] = Mux1_out1_1[Delay3_bypass_t_2];
    end

  end

  assign Delay3_out1_1[0] = Delay3_out1[0];
  assign Delay3_out1_1[1] = Delay3_out1[1];
  assign Delay3_out1_1[2] = Delay3_out1[2];

  always @(posedge clk)
    begin : rd_1_process
      if (reset == 1'b1) begin
        for(rd_1_t_1 = 32'sd0; rd_1_t_1 <= 32'sd2; rd_1_t_1 = rd_1_t_1 + 32'sd1) begin
          Delay3_out1_2[rd_1_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_1_t_0_0 = 32'sd0; rd_1_t_0_0 <= 32'sd2; rd_1_t_0_0 = rd_1_t_0_0 + 32'sd1) begin
            Delay3_out1_2[rd_1_t_0_0] <= Delay3_out1_1[rd_1_t_0_0];
          end
        end
      end
    end

  assign Add2_u = {Constant_out1[17], Constant_out1};

  genvar t_0_04;
  generate
    for(t_0_04 = 32'sd0; t_0_04 <= 32'sd2; t_0_04 = t_0_04 + 32'sd1) begin:Add2_out1_gen
      assign Add2_add_cast[t_0_04] = {Delay3_out1_2[t_0_04][17], Delay3_out1_2[t_0_04]};
      assign Add2_add_temp[t_0_04] = Add2_u + Add2_add_cast[t_0_04];
      assign Add2_out1[t_0_04] = Add2_add_temp[t_0_04][17:0];
    end
  endgenerate
  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        for(rd_2_t_1 = 32'sd0; rd_2_t_1 <= 32'sd2; rd_2_t_1 = rd_2_t_1 + 32'sd1) begin
          Add2_out1_1[rd_2_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_2_t_0_0 = 32'sd0; rd_2_t_0_0 <= 32'sd2; rd_2_t_0_0 = rd_2_t_0_0 + 32'sd1) begin
            Add2_out1_1[rd_2_t_0_0] <= Add2_out1[rd_2_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay2_bypass_process
      if (reset == 1'b1) begin
        for(Delay2_bypass_t_1_0 = 32'sd0; Delay2_bypass_t_1_0 <= 32'sd2; Delay2_bypass_t_1_0 = Delay2_bypass_t_1_0 + 32'sd1) begin
          Delay2_bypass_reg[Delay2_bypass_t_1_0] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay2_bypass_t_0_1 = 32'sd0; Delay2_bypass_t_0_1 <= 32'sd2; Delay2_bypass_t_0_1 = Delay2_bypass_t_0_1 + 32'sd1) begin
            Delay2_bypass_reg[Delay2_bypass_t_0_1] <= Delay2_bypass_reg_next[Delay2_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay2_bypass_t_1 = 32'sd0; Delay2_bypass_t_1 <= 32'sd2; Delay2_bypass_t_1 = Delay2_bypass_t_1 + 32'sd1) begin
        Delay2_out1[Delay2_bypass_t_1] = Add2_out1_1[Delay2_bypass_t_1];
      end
    end
    else begin
      for(Delay2_bypass_t_0_0 = 32'sd0; Delay2_bypass_t_0_0 <= 32'sd2; Delay2_bypass_t_0_0 = Delay2_bypass_t_0_0 + 32'sd1) begin
        Delay2_out1[Delay2_bypass_t_0_0] = Delay2_bypass_reg[Delay2_bypass_t_0_0];
      end
    end

    for(Delay2_bypass_t_2 = 32'sd0; Delay2_bypass_t_2 <= 32'sd2; Delay2_bypass_t_2 = Delay2_bypass_t_2 + 32'sd1) begin
      Delay2_bypass_reg_next[Delay2_bypass_t_2] = Add2_out1_1[Delay2_bypass_t_2];
    end

  end

  assign Delay2_out1_1[0] = Delay2_out1[0];
  assign Delay2_out1_1[1] = Delay2_out1[1];
  assign Delay2_out1_1[2] = Delay2_out1[2];

  always @(posedge clk)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        for(HwModeRegister2_t_1 = 32'sd0; HwModeRegister2_t_1 <= 32'sd2; HwModeRegister2_t_1 = HwModeRegister2_t_1 + 32'sd1) begin
          Delay2_out1_2[HwModeRegister2_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister2_t_0_0 = 32'sd0; HwModeRegister2_t_0_0 <= 32'sd2; HwModeRegister2_t_0_0 = HwModeRegister2_t_0_0 + 32'sd1) begin
            Delay2_out1_2[HwModeRegister2_t_0_0] <= Delay2_out1_1[HwModeRegister2_t_0_0];
          end
        end
      end
    end

  assign kconst = 18'sb011001100101100110;

  always @(posedge clk)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        kconst_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_1 <= kconst;
        end
      end
    end


  genvar t_0_011;
  generate
    for(t_0_011 = 32'sd0; t_0_011 <= 32'sd2; t_0_011 = t_0_011 + 32'sd1) begin:Gain2_out1_gen
      assign Gain2_out1[t_0_011] = Delay2_out1_2[t_0_011] * kconst_1;
    end
  endgenerate
  always @(posedge clk)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        for(PipelineRegister1_t_1 = 32'sd0; PipelineRegister1_t_1 <= 32'sd2; PipelineRegister1_t_1 = PipelineRegister1_t_1 + 32'sd1) begin
          Gain2_out1_1[PipelineRegister1_t_1] <= 36'sh000000000;
        end
      end
      else begin
        if (enb) begin
          for(PipelineRegister1_t_0_0 = 32'sd0; PipelineRegister1_t_0_0 <= 32'sd2; PipelineRegister1_t_0_0 = PipelineRegister1_t_0_0 + 32'sd1) begin
            Gain2_out1_1[PipelineRegister1_t_0_0] <= Gain2_out1[PipelineRegister1_t_0_0];
          end
        end
      end
    end


  genvar ii4;
  generate
    for(ii4 = 32'sd0; ii4 <= 32'sd2; ii4 = ii4 + 32'sd1) begin:Gain2_out1_2_gen
      assign Gain2_out1_2[ii4] = Gain2_out1_1[ii4][28:11];
    end
  endgenerate

  always @(posedge clk)
    begin : rd_3_process
      if (reset == 1'b1) begin
        for(rd_3_t_1 = 32'sd0; rd_3_t_1 <= 32'sd2; rd_3_t_1 = rd_3_t_1 + 32'sd1) begin
          Gain2_out1_3[rd_3_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_3_t_0_0 = 32'sd0; rd_3_t_0_0 <= 32'sd2; rd_3_t_0_0 = rd_3_t_0_0 + 32'sd1) begin
            Gain2_out1_3[rd_3_t_0_0] <= Gain2_out1_2[rd_3_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay_bypass_process
      if (reset == 1'b1) begin
        for(Delay_bypass_t_1_0 = 32'sd0; Delay_bypass_t_1_0 <= 32'sd2; Delay_bypass_t_1_0 = Delay_bypass_t_1_0 + 32'sd1) begin
          Delay_bypass_reg[Delay_bypass_t_1_0] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay_bypass_t_0_1 = 32'sd0; Delay_bypass_t_0_1 <= 32'sd2; Delay_bypass_t_0_1 = Delay_bypass_t_0_1 + 32'sd1) begin
            Delay_bypass_reg[Delay_bypass_t_0_1] <= Delay_bypass_reg_next[Delay_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay_bypass_t_1 = 32'sd0; Delay_bypass_t_1 <= 32'sd2; Delay_bypass_t_1 = Delay_bypass_t_1 + 32'sd1) begin
        Delay_out1[Delay_bypass_t_1] = Gain2_out1_3[Delay_bypass_t_1];
      end
    end
    else begin
      for(Delay_bypass_t_0_0 = 32'sd0; Delay_bypass_t_0_0 <= 32'sd2; Delay_bypass_t_0_0 = Delay_bypass_t_0_0 + 32'sd1) begin
        Delay_out1[Delay_bypass_t_0_0] = Delay_bypass_reg[Delay_bypass_t_0_0];
      end
    end

    for(Delay_bypass_t_2 = 32'sd0; Delay_bypass_t_2 <= 32'sd2; Delay_bypass_t_2 = Delay_bypass_t_2 + 32'sd1) begin
      Delay_bypass_reg_next[Delay_bypass_t_2] = Gain2_out1_3[Delay_bypass_t_2];
    end

  end

  assign Delay_out1_1[0] = Delay_out1[0];
  assign Delay_out1_1[1] = Delay_out1[1];
  assign Delay_out1_1[2] = Delay_out1[2];

  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        for(rd_4_t_1 = 32'sd0; rd_4_t_1 <= 32'sd2; rd_4_t_1 = rd_4_t_1 + 32'sd1) begin
          Delay_out1_2[rd_4_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_4_t_0_0 = 32'sd0; rd_4_t_0_0 <= 32'sd2; rd_4_t_0_0 = rd_4_t_0_0 + 32'sd1) begin
            Delay_out1_2[rd_4_t_0_0] <= Delay_out1_1[rd_4_t_0_0];
          end
        end
      end
    end


  genvar ii11;
  generate
    for(ii11 = 32'sd0; ii11 <= 32'sd2; ii11 = ii11 + 32'sd1) begin:Data_Type_Conversion5_out1_gen
      assign Data_Type_Conversion5_out1[ii11] = ({{4{Delay_out1_2[ii11][17]}}, Delay_out1_2[ii11][17:6]}) + $signed({1'b0, Delay_out1_2[ii11][5]});
    end
  endgenerate
  always @(posedge clk)
    begin : rd_5_process
      if (reset == 1'b1) begin
        for(rd_5_t_1 = 32'sd0; rd_5_t_1 <= 32'sd2; rd_5_t_1 = rd_5_t_1 + 32'sd1) begin
          Data_Type_Conversion5_out1_1[rd_5_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_5_t_0_0 = 32'sd0; rd_5_t_0_0 <= 32'sd2; rd_5_t_0_0 = rd_5_t_0_0 + 32'sd1) begin
            Data_Type_Conversion5_out1_1[rd_5_t_0_0] <= Data_Type_Conversion5_out1[rd_5_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay1_bypass_process
      if (reset == 1'b1) begin
        for(Delay1_bypass_t_1_0 = 32'sd0; Delay1_bypass_t_1_0 <= 32'sd2; Delay1_bypass_t_1_0 = Delay1_bypass_t_1_0 + 32'sd1) begin
          Delay1_bypass_reg[Delay1_bypass_t_1_0] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay1_bypass_t_0_1 = 32'sd0; Delay1_bypass_t_0_1 <= 32'sd2; Delay1_bypass_t_0_1 = Delay1_bypass_t_0_1 + 32'sd1) begin
            Delay1_bypass_reg[Delay1_bypass_t_0_1] <= Delay1_bypass_reg_next[Delay1_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay1_bypass_t_1 = 32'sd0; Delay1_bypass_t_1 <= 32'sd2; Delay1_bypass_t_1 = Delay1_bypass_t_1 + 32'sd1) begin
        Delay1_out1[Delay1_bypass_t_1] = Data_Type_Conversion5_out1_1[Delay1_bypass_t_1];
      end
    end
    else begin
      for(Delay1_bypass_t_0_0 = 32'sd0; Delay1_bypass_t_0_0 <= 32'sd2; Delay1_bypass_t_0_0 = Delay1_bypass_t_0_0 + 32'sd1) begin
        Delay1_out1[Delay1_bypass_t_0_0] = Delay1_bypass_reg[Delay1_bypass_t_0_0];
      end
    end

    for(Delay1_bypass_t_2 = 32'sd0; Delay1_bypass_t_2 <= 32'sd2; Delay1_bypass_t_2 = Delay1_bypass_t_2 + 32'sd1) begin
      Delay1_bypass_reg_next[Delay1_bypass_t_2] = Data_Type_Conversion5_out1_1[Delay1_bypass_t_2];
    end

  end

  assign O_Ia = Delay1_out1[1];

  assign O_Ib = Delay1_out1[0];
  assign O_Ic = Delay1_out1[2];

  assign Mux_out1[0] = Vb;
  assign Mux_out1[1] = Vc;
  assign Mux_out1[2] = Va;
  always @(posedge clk)
    begin : rd_6_process
      if (reset == 1'b1) begin
        for(rd_6_t_1 = 32'sd0; rd_6_t_1 <= 32'sd2; rd_6_t_1 = rd_6_t_1 + 32'sd1) begin
          Mux_out1_1[rd_6_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_6_t_0_0 = 32'sd0; rd_6_t_0_0 <= 32'sd2; rd_6_t_0_0 = rd_6_t_0_0 + 32'sd1) begin
            Mux_out1_1[rd_6_t_0_0] <= Mux_out1[rd_6_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay8_bypass_process
      if (reset == 1'b1) begin
        for(Delay8_bypass_t_1_0 = 32'sd0; Delay8_bypass_t_1_0 <= 32'sd2; Delay8_bypass_t_1_0 = Delay8_bypass_t_1_0 + 32'sd1) begin
          Delay8_bypass_reg[Delay8_bypass_t_1_0] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay8_bypass_t_0_1 = 32'sd0; Delay8_bypass_t_0_1 <= 32'sd2; Delay8_bypass_t_0_1 = Delay8_bypass_t_0_1 + 32'sd1) begin
            Delay8_bypass_reg[Delay8_bypass_t_0_1] <= Delay8_bypass_reg_next[Delay8_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay8_bypass_t_1 = 32'sd0; Delay8_bypass_t_1 <= 32'sd2; Delay8_bypass_t_1 = Delay8_bypass_t_1 + 32'sd1) begin
        Delay8_out1[Delay8_bypass_t_1] = Mux_out1_1[Delay8_bypass_t_1];
      end
    end
    else begin
      for(Delay8_bypass_t_0_0 = 32'sd0; Delay8_bypass_t_0_0 <= 32'sd2; Delay8_bypass_t_0_0 = Delay8_bypass_t_0_0 + 32'sd1) begin
        Delay8_out1[Delay8_bypass_t_0_0] = Delay8_bypass_reg[Delay8_bypass_t_0_0];
      end
    end

    for(Delay8_bypass_t_2 = 32'sd0; Delay8_bypass_t_2 <= 32'sd2; Delay8_bypass_t_2 = Delay8_bypass_t_2 + 32'sd1) begin
      Delay8_bypass_reg_next[Delay8_bypass_t_2] = Mux_out1_1[Delay8_bypass_t_2];
    end

  end

  assign Delay8_out1_1[0] = Delay8_out1[0];
  assign Delay8_out1_1[1] = Delay8_out1[1];
  assign Delay8_out1_1[2] = Delay8_out1[2];

  always @(posedge clk)
    begin : rd_7_process
      if (reset == 1'b1) begin
        for(rd_7_t_1 = 32'sd0; rd_7_t_1 <= 32'sd2; rd_7_t_1 = rd_7_t_1 + 32'sd1) begin
          Delay8_out1_2[rd_7_t_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_7_t_0_0 = 32'sd0; rd_7_t_0_0 <= 32'sd2; rd_7_t_0_0 = rd_7_t_0_0 + 32'sd1) begin
            Delay8_out1_2[rd_7_t_0_0] <= Delay8_out1_1[rd_7_t_0_0];
          end
        end
      end
    end

  assign Constant1_out1 = 18'sb000110100100000000;
  assign Add3_v = {Constant1_out1[17], Constant1_out1};

  genvar t_0_021;
  generate
    for(t_0_021 = 32'sd0; t_0_021 <= 32'sd2; t_0_021 = t_0_021 + 32'sd1) begin:Add3_out1_gen
      assign Add3_add_cast[t_0_021] = {Delay8_out1_2[t_0_021][17], Delay8_out1_2[t_0_021]};
      assign Add3_out1[t_0_021] = Add3_add_cast[t_0_021] + Add3_v;
    end
  endgenerate
  always @(posedge clk)
    begin : rd_8_process
      if (reset == 1'b1) begin
        for(rd_8_t_1 = 32'sd0; rd_8_t_1 <= 32'sd2; rd_8_t_1 = rd_8_t_1 + 32'sd1) begin
          Add3_out1_1[rd_8_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_8_t_0_0 = 32'sd0; rd_8_t_0_0 <= 32'sd2; rd_8_t_0_0 = rd_8_t_0_0 + 32'sd1) begin
            Add3_out1_1[rd_8_t_0_0] <= Add3_out1[rd_8_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay11_bypass_process
      if (reset == 1'b1) begin
        for(Delay11_bypass_t_1_0 = 32'sd0; Delay11_bypass_t_1_0 <= 32'sd2; Delay11_bypass_t_1_0 = Delay11_bypass_t_1_0 + 32'sd1) begin
          Delay11_bypass_reg[Delay11_bypass_t_1_0] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay11_bypass_t_0_1 = 32'sd0; Delay11_bypass_t_0_1 <= 32'sd2; Delay11_bypass_t_0_1 = Delay11_bypass_t_0_1 + 32'sd1) begin
            Delay11_bypass_reg[Delay11_bypass_t_0_1] <= Delay11_bypass_reg_next[Delay11_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay11_bypass_t_1 = 32'sd0; Delay11_bypass_t_1 <= 32'sd2; Delay11_bypass_t_1 = Delay11_bypass_t_1 + 32'sd1) begin
        Delay11_out1[Delay11_bypass_t_1] = Add3_out1_1[Delay11_bypass_t_1];
      end
    end
    else begin
      for(Delay11_bypass_t_0_0 = 32'sd0; Delay11_bypass_t_0_0 <= 32'sd2; Delay11_bypass_t_0_0 = Delay11_bypass_t_0_0 + 32'sd1) begin
        Delay11_out1[Delay11_bypass_t_0_0] = Delay11_bypass_reg[Delay11_bypass_t_0_0];
      end
    end

    for(Delay11_bypass_t_2 = 32'sd0; Delay11_bypass_t_2 <= 32'sd2; Delay11_bypass_t_2 = Delay11_bypass_t_2 + 32'sd1) begin
      Delay11_bypass_reg_next[Delay11_bypass_t_2] = Add3_out1_1[Delay11_bypass_t_2];
    end

  end

  assign Delay11_out1_1[0] = Delay11_out1[0];
  assign Delay11_out1_1[1] = Delay11_out1[1];
  assign Delay11_out1_1[2] = Delay11_out1[2];

  always @(posedge clk)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        for(HwModeRegister_t_1 = 32'sd0; HwModeRegister_t_1 <= 32'sd2; HwModeRegister_t_1 = HwModeRegister_t_1 + 32'sd1) begin
          Delay11_out1_2[HwModeRegister_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(HwModeRegister_t_0_0 = 32'sd0; HwModeRegister_t_0_0 <= 32'sd2; HwModeRegister_t_0_0 = HwModeRegister_t_0_0 + 32'sd1) begin
            Delay11_out1_2[HwModeRegister_t_0_0] <= Delay11_out1_1[HwModeRegister_t_0_0];
          end
        end
      end
    end

  assign kconst_2 = 19'sb0100110111111011001;

  always @(posedge clk)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        kconst_3 <= 19'sb0000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_3 <= kconst_2;
        end
      end
    end


  genvar t_0_031;
  generate
    for(t_0_031 = 32'sd0; t_0_031 <= 32'sd2; t_0_031 = t_0_031 + 32'sd1) begin:Gain5_out1_gen
      assign Gain5_out1[t_0_031] = Delay11_out1_2[t_0_031] * kconst_3;
    end
  endgenerate
  always @(posedge clk)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        for(PipelineRegister_t_1 = 32'sd0; PipelineRegister_t_1 <= 32'sd2; PipelineRegister_t_1 = PipelineRegister_t_1 + 32'sd1) begin
          Gain5_out1_1[PipelineRegister_t_1] <= 38'sh0000000000;
        end
      end
      else begin
        if (enb) begin
          for(PipelineRegister_t_0_0 = 32'sd0; PipelineRegister_t_0_0 <= 32'sd2; PipelineRegister_t_0_0 = PipelineRegister_t_0_0 + 32'sd1) begin
            Gain5_out1_1[PipelineRegister_t_0_0] <= Gain5_out1[PipelineRegister_t_0_0];
          end
        end
      end
    end


  genvar ii21;
  generate
    for(ii21 = 32'sd0; ii21 <= 32'sd2; ii21 = ii21 + 32'sd1) begin:Gain5_out1_2_gen
      assign Gain5_out1_2[ii21] = Gain5_out1_1[ii21][33:15];
    end
  endgenerate

  always @(posedge clk)
    begin : rd_9_process
      if (reset == 1'b1) begin
        for(rd_9_t_1 = 32'sd0; rd_9_t_1 <= 32'sd2; rd_9_t_1 = rd_9_t_1 + 32'sd1) begin
          Gain5_out1_3[rd_9_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_9_t_0_0 = 32'sd0; rd_9_t_0_0 <= 32'sd2; rd_9_t_0_0 = rd_9_t_0_0 + 32'sd1) begin
            Gain5_out1_3[rd_9_t_0_0] <= Gain5_out1_2[rd_9_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay22_bypass_process
      if (reset == 1'b1) begin
        for(Delay22_bypass_t_1_0 = 32'sd0; Delay22_bypass_t_1_0 <= 32'sd2; Delay22_bypass_t_1_0 = Delay22_bypass_t_1_0 + 32'sd1) begin
          Delay22_bypass_reg[Delay22_bypass_t_1_0] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay22_bypass_t_0_1 = 32'sd0; Delay22_bypass_t_0_1 <= 32'sd2; Delay22_bypass_t_0_1 = Delay22_bypass_t_0_1 + 32'sd1) begin
            Delay22_bypass_reg[Delay22_bypass_t_0_1] <= Delay22_bypass_reg_next[Delay22_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay22_bypass_t_1 = 32'sd0; Delay22_bypass_t_1 <= 32'sd2; Delay22_bypass_t_1 = Delay22_bypass_t_1 + 32'sd1) begin
        Delay22_out1[Delay22_bypass_t_1] = Gain5_out1_3[Delay22_bypass_t_1];
      end
    end
    else begin
      for(Delay22_bypass_t_0_0 = 32'sd0; Delay22_bypass_t_0_0 <= 32'sd2; Delay22_bypass_t_0_0 = Delay22_bypass_t_0_0 + 32'sd1) begin
        Delay22_out1[Delay22_bypass_t_0_0] = Delay22_bypass_reg[Delay22_bypass_t_0_0];
      end
    end

    for(Delay22_bypass_t_2 = 32'sd0; Delay22_bypass_t_2 <= 32'sd2; Delay22_bypass_t_2 = Delay22_bypass_t_2 + 32'sd1) begin
      Delay22_bypass_reg_next[Delay22_bypass_t_2] = Gain5_out1_3[Delay22_bypass_t_2];
    end

  end

  assign Delay22_out1_1[0] = Delay22_out1[0];
  assign Delay22_out1_1[1] = Delay22_out1[1];
  assign Delay22_out1_1[2] = Delay22_out1[2];

  always @(posedge clk)
    begin : rd_10_process
      if (reset == 1'b1) begin
        for(rd_10_t_1 = 32'sd0; rd_10_t_1 <= 32'sd2; rd_10_t_1 = rd_10_t_1 + 32'sd1) begin
          Delay22_out1_2[rd_10_t_1] <= 19'sb0000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_10_t_0_0 = 32'sd0; rd_10_t_0_0 <= 32'sd2; rd_10_t_0_0 = rd_10_t_0_0 + 32'sd1) begin
            Delay22_out1_2[rd_10_t_0_0] <= Delay22_out1_1[rd_10_t_0_0];
          end
        end
      end
    end


  genvar ii31;
  generate
    for(ii31 = 32'sd0; ii31 <= 32'sd2; ii31 = ii31 + 32'sd1) begin:Data_Type_Conversion3_out1_gen
      assign Data_Type_Conversion3_out1[ii31] = ({{3{Delay22_out1_2[ii31][18]}}, Delay22_out1_2[ii31][18:6]}) + $signed({1'b0, Delay22_out1_2[ii31][5]});
    end
  endgenerate
  always @(posedge clk)
    begin : rd_11_process
      if (reset == 1'b1) begin
        for(rd_11_t_1 = 32'sd0; rd_11_t_1 <= 32'sd2; rd_11_t_1 = rd_11_t_1 + 32'sd1) begin
          Data_Type_Conversion3_out1_1[rd_11_t_1] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_11_t_0_0 = 32'sd0; rd_11_t_0_0 <= 32'sd2; rd_11_t_0_0 = rd_11_t_0_0 + 32'sd1) begin
            Data_Type_Conversion3_out1_1[rd_11_t_0_0] <= Data_Type_Conversion3_out1[rd_11_t_0_0];
          end
        end
      end
    end

  always @(posedge clk)
    begin : Delay24_bypass_process
      if (reset == 1'b1) begin
        for(Delay24_bypass_t_1_0 = 32'sd0; Delay24_bypass_t_1_0 <= 32'sd2; Delay24_bypass_t_1_0 = Delay24_bypass_t_1_0 + 32'sd1) begin
          Delay24_bypass_reg[Delay24_bypass_t_1_0] <= 16'b0000000000000000;
        end
      end
      else begin
        if (enb_1_37_1) begin
          for(Delay24_bypass_t_0_1 = 32'sd0; Delay24_bypass_t_0_1 <= 32'sd2; Delay24_bypass_t_0_1 = Delay24_bypass_t_0_1 + 32'sd1) begin
            Delay24_bypass_reg[Delay24_bypass_t_0_1] <= Delay24_bypass_reg_next[Delay24_bypass_t_0_1];
          end
        end
      end
    end

  always @* begin
    if (enb_1_37_1 == 1'b1) begin
      for(Delay24_bypass_t_1 = 32'sd0; Delay24_bypass_t_1 <= 32'sd2; Delay24_bypass_t_1 = Delay24_bypass_t_1 + 32'sd1) begin
        Delay24_out1[Delay24_bypass_t_1] = Data_Type_Conversion3_out1_1[Delay24_bypass_t_1];
      end
    end
    else begin
      for(Delay24_bypass_t_0_0 = 32'sd0; Delay24_bypass_t_0_0 <= 32'sd2; Delay24_bypass_t_0_0 = Delay24_bypass_t_0_0 + 32'sd1) begin
        Delay24_out1[Delay24_bypass_t_0_0] = Delay24_bypass_reg[Delay24_bypass_t_0_0];
      end
    end

    for(Delay24_bypass_t_2 = 32'sd0; Delay24_bypass_t_2 <= 32'sd2; Delay24_bypass_t_2 = Delay24_bypass_t_2 + 32'sd1) begin
      Delay24_bypass_reg_next[Delay24_bypass_t_2] = Data_Type_Conversion3_out1_1[Delay24_bypass_t_2];
    end

  end

  assign O_Vc = Delay24_out1[1];

  assign O_Vb = Delay24_out1[0];
  assign O_Va = Delay24_out1[2];

  assign kconst_4 = 18'sb010001001111001110;

  always @(posedge clk)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        kconst_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_5 <= kconst_4;
        end
      end
    end

  always @(posedge clk)
    begin : rd_12_process
      if (reset == 1'b1) begin
        Vout_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Vout_1 <= Vout;
        end
      end
    end

  always @(posedge clk)
    begin : Delay9_bypass_process
      if (reset == 1'b1) begin
        Delay9_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_37_1) begin
          Delay9_bypass_reg <= Vout_1;
        end
      end
    end

  assign Delay9_out1 = (enb_1_37_1 == 1'b1 ? Vout_1 :
              Delay9_bypass_reg);

  assign Delay9_out1_1 = Delay9_out1;

  always @(posedge clk)
    begin : HwModeRegister7_process
      if (reset == 1'b1) begin
        Delay9_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_2 <= Delay9_out1_1;
        end
      end
    end

  assign Gain4_out1 = kconst_5 * Delay9_out1_2;
  always @(posedge clk)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        Gain4_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain4_out1_1 <= Gain4_out1;
        end
      end
    end

  assign Gain4_out1_2 = Gain4_out1_1[31:14];

  always @(posedge clk)
    begin : rd_13_process
      if (reset == 1'b1) begin
        Gain4_out1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Gain4_out1_3 <= Gain4_out1_2;
        end
      end
    end

  always @(posedge clk)
    begin : Delay12_bypass_process
      if (reset == 1'b1) begin
        Delay12_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_37_1) begin
          Delay12_bypass_reg <= Gain4_out1_3;
        end
      end
    end

  assign Delay12_out1 = (enb_1_37_1 == 1'b1 ? Gain4_out1_3 :
              Delay12_bypass_reg);

  assign Delay12_out1_1 = Delay12_out1;

  always @(posedge clk)
    begin : rd_14_process
      if (reset == 1'b1) begin
        Delay12_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_2 <= Delay12_out1_1;
        end
      end
    end

  assign Data_Type_Conversion9_out1 = ({{4{Delay12_out1_2[17]}}, Delay12_out1_2[17:6]}) + $signed({1'b0, Delay12_out1_2[5]});
  always @(posedge clk)
    begin : rd_15_process
      if (reset == 1'b1) begin
        Data_Type_Conversion9_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Data_Type_Conversion9_out1_1 <= Data_Type_Conversion9_out1;
        end
      end
    end

  always @(posedge clk)
    begin : Delay25_bypass_process
      if (reset == 1'b1) begin
        Delay25_bypass_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_37_1) begin
          Delay25_bypass_reg <= Data_Type_Conversion9_out1_1;
        end
      end
    end

  assign Delay25_out1 = (enb_1_37_1 == 1'b1 ? Data_Type_Conversion9_out1_1 :
              Delay25_bypass_reg);

  assign O_Vout = Delay25_out1;

  assign kconst_6 = 18'sb011001100101100110;

  always @(posedge clk)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        kconst_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          kconst_7 <= kconst_6;
        end
      end
    end

  always @(posedge clk)
    begin : rd_16_process
      if (reset == 1'b1) begin
        I_load_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          I_load_1 <= I_load;
        end
      end
    end

  always @(posedge clk)
    begin : Delay6_bypass_process
      if (reset == 1'b1) begin
        Delay6_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_37_1) begin
          Delay6_bypass_reg <= I_load_1;
        end
      end
    end

  assign Delay6_out1 = (enb_1_37_1 == 1'b1 ? I_load_1 :
              Delay6_bypass_reg);

  assign Delay6_out1_1 = Delay6_out1;

  always @(posedge clk)
    begin : HwModeRegister5_process
      if (reset == 1'b1) begin
        Delay6_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_2 <= Delay6_out1_1;
        end
      end
    end

  assign Gain3_out1 = kconst_7 * Delay6_out1_2;
  always @(posedge clk)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        Gain3_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Gain3_out1_1 <= Gain3_out1;
        end
      end
    end

  assign Gain3_out1_2 = Gain3_out1_1[26:9];

  always @(posedge clk)
    begin : rd_17_process
      if (reset == 1'b1) begin
        Gain3_out1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Gain3_out1_3 <= Gain3_out1_2;
        end
      end
    end

  always @(posedge clk)
    begin : Delay16_bypass_process
      if (reset == 1'b1) begin
        Delay16_bypass_reg <= 18'sb000000000000000000;
      end
      else begin
        if (enb_1_37_1) begin
          Delay16_bypass_reg <= Gain3_out1_3;
        end
      end
    end

  assign Delay16_out1 = (enb_1_37_1 == 1'b1 ? Gain3_out1_3 :
              Delay16_bypass_reg);

  assign Delay16_out1_1 = Delay16_out1;

  always @(posedge clk)
    begin : rd_18_process
      if (reset == 1'b1) begin
        Delay16_out1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1_2 <= Delay16_out1_1;
        end
      end
    end

  assign Data_Type_Conversion20_out1 = ({{4{Delay16_out1_2[17]}}, Delay16_out1_2[17:6]}) + $signed({1'b0, Delay16_out1_2[5]});
  always @(posedge clk)
    begin : rd_19_process
      if (reset == 1'b1) begin
        Data_Type_Conversion20_out1_1 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          Data_Type_Conversion20_out1_1 <= Data_Type_Conversion20_out1;
        end
      end
    end

  always @(posedge clk)
    begin : Delay29_bypass_process
      if (reset == 1'b1) begin
        Delay29_bypass_reg <= 16'b0000000000000000;
      end
      else begin
        if (enb_1_37_1) begin
          Delay29_bypass_reg <= Data_Type_Conversion20_out1_1;
        end
      end
    end

  assign Delay29_out1 = (enb_1_37_1 == 1'b1 ? Data_Type_Conversion20_out1_1 :
              Delay29_bypass_reg);

  assign O_I_load = Delay29_out1;

endmodule  // real2uint8

