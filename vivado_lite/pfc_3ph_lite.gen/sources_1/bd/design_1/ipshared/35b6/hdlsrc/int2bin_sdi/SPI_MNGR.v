// -------------------------------------------------------------
// 
// File Name: C:\Users\Angel\Desktop\hil\ips\MCP_DRIVER\hdlsrc\int2bin_sdi\SPI_MNGR.v
// Created: 2025-05-12 19:25:24
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: SPI_MNGR
// Source Path: int2bin_sdi/SPI_DAC/SPI_MNGR
// Hierarchy Level: 1
// Model version: 3.159
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module SPI_MNGR
          (clk,
           rst,
           enb,
           v3_2,
           v3_1,
           v1_2,
           v2_1,
           v2_2,
           v1_1,
           v4_2,
           v4_1,
           SDI,
           SCK,
           nCS1,
           nCS2,
           nCS3,
           nCS4,
           payload_debug_0,
           payload_debug_1,
           payload_debug_2,
           payload_debug_3,
           payload_debug_4,
           payload_debug_5,
           payload_debug_6,
           payload_debug_7,
           payload_debug_8,
           payload_debug_9,
           payload_debug_10,
           payload_debug_11,
           payload_debug_12,
           payload_debug_13,
           payload_debug_14,
           payload_debug_15);

  // Default encoded enumeration values for type state_type_is_SPI_MNGR
  parameter state_type_is_SPI_MNGR_IN_NOP = 4'd0, state_type_is_SPI_MNGR_IN_NOP1 = 4'd1, state_type_is_SPI_MNGR_IN_off = 4'd2, state_type_is_SPI_MNGR_IN_on = 4'd3, state_type_is_SPI_MNGR_IN_sender_at_SCK = 4'd4, state_type_is_SPI_MNGR_IN_sender_at_SCK1 = 4'd5, state_type_is_SPI_MNGR_IN_sender_pre_SCK = 4'd6, state_type_is_SPI_MNGR_IN_toBsend_v1_1 = 4'd7, state_type_is_SPI_MNGR_IN_toBsend_v1_2 = 4'd8, state_type_is_SPI_MNGR_IN_toBsend_v2_1 = 4'd9, state_type_is_SPI_MNGR_IN_toBsend_v2_2 = 4'd10, state_type_is_SPI_MNGR_IN_toBsend_v3_1 = 4'd11, state_type_is_SPI_MNGR_IN_toBsend_v3_2 = 4'd12, state_type_is_SPI_MNGR_IN_toBsend_v3_3 = 4'd13, state_type_is_SPI_MNGR_IN_toBsend_v4_1 = 4'd14;

  input   clk;
  input   rst;
  input   enb;
  input   [15:0] v3_2;  // uint16
  input   [15:0] v3_1;  // uint16
  input   [15:0] v1_2;  // uint16
  input   [15:0] v2_1;  // uint16
  input   [15:0] v2_2;  // uint16
  input   [15:0] v1_1;  // uint16
  input   [15:0] v4_2;  // uint16
  input   [15:0] v4_1;  // uint16
  output  SDI;
  output  SCK;
  output  nCS1;
  output  nCS2;
  output  nCS3;
  output  nCS4;
  output  payload_debug_0;  // boolean
  output  payload_debug_1;  // boolean
  output  payload_debug_2;  // boolean
  output  payload_debug_3;  // boolean
  output  payload_debug_4;  // boolean
  output  payload_debug_5;  // boolean
  output  payload_debug_6;  // boolean
  output  payload_debug_7;  // boolean
  output  payload_debug_8;  // boolean
  output  payload_debug_9;  // boolean
  output  payload_debug_10;  // boolean
  output  payload_debug_11;  // boolean
  output  payload_debug_12;  // boolean
  output  payload_debug_13;  // boolean
  output  payload_debug_14;  // boolean
  output  payload_debug_15;  // boolean


  wire is_SPI_MNGR_reg_ctrl_const_out;
  reg  is_SPI_MNGR_reg_ctrl_delay_out;
  wire [3:0] is_SPI_MNGR_reg_Initial_Val_out;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_1;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_2;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_3;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_4;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_5;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_6;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire cnt_clk_reg_ctrl_const_out;
  reg  cnt_clk_reg_ctrl_delay_out;
  wire [15:0] cnt_clk_reg_Initial_Val_out;  // uint16
  wire [15:0] cnt_clk;  // uint16
  wire [15:0] s;  // uint16
  wire [15:0] cnt_clk_1;  // uint16
  wire [15:0] s_1;  // uint16
  wire [15:0] s_2;  // uint16
  wire [15:0] cnt_clk_2;  // uint16
  wire [15:0] cnt_clk_3;  // uint16
  wire [15:0] s_3;  // uint16
  wire [15:0] s_4;  // uint16
  wire [15:0] cnt_clk_4;  // uint16
  wire [3:0] is_SPI_MNGR_7;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_8;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_9;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_10;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_11;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire cnt_reg_ctrl_const_out;
  reg  cnt_reg_ctrl_delay_out;
  wire [15:0] cnt_reg_Initial_Val_out;  // uint16
  wire [15:0] s_5;  // uint16
  wire [15:0] cnt;  // uint16
  wire [3:0] is_SPI_MNGR_12;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_13;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_14;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire selector_reg_ctrl_const_out;
  reg  selector_reg_ctrl_delay_out;
  wire [15:0] selector_reg_Initial_Val_out;  // uint16
  wire [15:0] selector;  // uint16
  wire [15:0] s_6;  // uint16
  wire [3:0] is_SPI_MNGR_15;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_16;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_17;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_18;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_19;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_20;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_21;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_22;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_23;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_24;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_25;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_26;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_27;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_28;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_29;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_30;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_31;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_32;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_33;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_34;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] is_SPI_MNGR_35;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_7;
  wire [3:0] is_SPI_MNGR_36;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] tmp;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_8;
  wire [3:0] tmp_1;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [15:0] tmp_2;  // uint16
  wire tmp_3;
  wire [3:0] tmp_4;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_5;
  wire [3:0] tmp_6;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_7;
  wire [3:0] tmp_8;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_9;
  wire [3:0] tmp_10;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_11;
  wire [3:0] tmp_12;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_13;
  wire [3:0] tmp_14;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_15;
  wire [3:0] tmp_16;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire tmp_17;
  wire [3:0] tmp_18;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_9;
  wire [3:0] tmp_19;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_10;
  wire [3:0] tmp_20;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_11;
  wire [3:0] tmp_21;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_12;
  wire [3:0] tmp_22;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [15:0] selector_1;  // uint16
  wire s_13;
  wire [3:0] tmp_23;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_14;
  wire [3:0] tmp_24;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_15;
  wire [3:0] tmp_25;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_16;
  wire [3:0] tmp_26;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_17;
  wire [3:0] tmp_27;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_18;
  wire [3:0] tmp_28;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_19;
  wire [3:0] tmp_29;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [16:0] adder_add_temp;  // ufix17
  wire [16:0] adder_1;  // ufix17
  wire [16:0] adder_2;  // ufix17
  wire [15:0] tmp_30;  // uint16
  wire [15:0] tmp_31;  // uint16
  wire [15:0] tmp_32;  // uint16
  wire [15:0] tmp_33;  // uint16
  reg [15:0] tmp_34;  // uint16
  reg [15:0] selector_reg_out;  // uint16
  wire s_20;
  wire [3:0] tmp_35;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [15:0] cnt_1;  // uint16
  wire [16:0] adder_add_temp_1;  // ufix17
  wire [16:0] adder_4;  // ufix17
  wire [16:0] adder_5;  // ufix17
  wire [15:0] tmp_36;  // uint16
  wire s_21;
  wire [15:0] tmp_37;  // uint16
  wire s_22;
  wire [15:0] tmp_38;  // uint16
  reg [15:0] tmp_39;  // uint16
  reg [15:0] cnt_reg_out;  // uint16
  wire [3:0] tmp_40;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_23;
  wire [3:0] tmp_41;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [3:0] tmp_42;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_24;
  wire [3:0] tmp_43;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_25;
  wire [3:0] tmp_44;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire s_26;
  wire [3:0] tmp_45;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire [15:0] cnt_clk_5;  // uint16
  wire [16:0] adder_add_temp_2;  // ufix17
  wire [16:0] adder_7;  // ufix17
  wire [16:0] adder_8;  // ufix17
  wire [15:0] tmp_46;  // uint16
  wire [15:0] tmp_47;  // uint16
  wire [15:0] tmp_48;  // uint16
  wire [16:0] adder_add_temp_3;  // ufix17
  wire [16:0] adder_10;  // ufix17
  wire [16:0] adder_11;  // ufix17
  wire [15:0] tmp_49;  // uint16
  wire [15:0] tmp_50;  // uint16
  wire [15:0] tmp_51;  // uint16
  wire [16:0] adder_add_temp_4;  // ufix17
  wire [16:0] adder_13;  // ufix17
  wire [16:0] adder_14;  // ufix17
  wire [15:0] tmp_52;  // uint16
  wire [15:0] tmp_53;  // uint16
  wire [15:0] tmp_54;  // uint16
  wire [16:0] adder_add_temp_5;  // ufix17
  wire [16:0] adder_16;  // ufix17
  wire [16:0] adder_17;  // ufix17
  wire [15:0] tmp_55;  // uint16
  wire [15:0] tmp_56;  // uint16
  wire [15:0] tmp_57;  // uint16
  wire [16:0] adder_add_temp_6;  // ufix17
  wire [16:0] adder_19;  // ufix17
  wire [16:0] adder_20;  // ufix17
  wire [15:0] tmp_58;  // uint16
  wire [15:0] tmp_59;  // uint16
  wire s_27;
  wire [15:0] tmp_60;  // uint16
  reg [15:0] tmp_61;  // uint16
  reg [15:0] cnt_clk_reg_out;  // uint16
  wire [3:0] tmp_62;  // enum type state_type_is_SPI_MNGR (15 enums)
  reg [3:0] tmp_63;  // enum type state_type_is_SPI_MNGR (15 enums)
  reg [3:0] is_SPI_MNGR_reg_out;  // enum type state_type_is_SPI_MNGR (15 enums)
  wire sel;
  wire sel_1;
  wire sel_2;
  wire sel_3;
  wire sel_4;
  wire sel_5;
  wire sel_6;
  wire sel_7;
  wire sel_8;
  wire sel_9;
  wire sel_10;
  wire tmp_64;
  wire tmp_65;
  wire sel_1_1;
  wire tmp_66;
  wire sel_1_2;
  wire tmp_67;
  wire sel_1_3;
  wire tmp_68;
  wire sel_1_4;
  wire tmp_69;
  wire sel_1_5;
  wire tmp_70;
  wire sel_1_6;
  wire tmp_71;
  wire sel_1_7;
  wire tmp_72;
  wire tmp_73;
  wire sel_1_8;
  wire tmp_74;
  wire sel_1_9;
  wire tmp_75;
  wire sel_1_10;
  wire tmp_76;
  wire sel_1_11;
  wire tmp_77;
  wire sel_1_12;
  wire tmp_78;
  wire sel_1_13;
  wire tmp_79;
  wire sel_1_14;
  wire sel_11;
  wire sel_12;
  reg  sel_1_15;
  wire sel_13;
  wire sel_14;
  wire sel_15;
  wire sel_16;
  wire sel_17;
  wire sel_18;
  wire sel_19;
  wire sel_20;
  wire sel_21;
  wire sel_22;
  wire sel_23;
  wire sel_24;
  wire s_28;
  wire sel_2_1;
  wire s_29;
  wire sel_2_2;
  wire s_30;
  wire sel_2_3;
  wire s_31;
  wire sel_2_4;
  wire s_32;
  wire sel_2_5;
  wire s_33;
  wire sel_2_6;
  wire s_34;
  wire sel_2_7;
  wire s_35;
  wire sel_2_8;
  wire sel_25;
  wire sel_26;
  wire sel_27;
  wire s_36;
  wire sel_2_9;
  wire s_37;
  wire sel_2_10;
  wire s_38;
  wire sel_2_11;
  wire s_39;
  wire sel_2_12;
  wire s_40;
  wire sel_2_13;
  wire s_41;
  wire sel_2_14;
  wire s_42;
  wire sel_2_15;
  wire s_43;
  wire sel_2_16;
  wire sel_2_17;
  wire sel_2_18;
  wire sel_28;
  wire sel_2_19;
  wire sel_29;
  wire sel_30;
  reg  sel_2_20;
  wire tmp_80;
  wire sel_31;
  wire sel_32;
  wire sel_33;
  wire sel_34;
  wire sel_35;
  wire sel_36;
  wire sel_37;
  wire sel_38;
  wire sel_39;
  wire sel_40;
  wire sel_41;
  wire sel_42;
  wire s_44;
  wire sel_2_21;
  wire s_45;
  wire sel_2_22;
  wire s_46;
  wire sel_2_23;
  wire s_47;
  wire sel_2_24;
  wire s_48;
  wire sel_2_25;
  wire s_49;
  wire sel_2_26;
  wire s_50;
  wire sel_2_27;
  wire s_51;
  wire sel_2_28;
  wire sel_43;
  wire sel_44;
  wire sel_45;
  wire s_52;
  wire sel_2_29;
  wire s_53;
  wire sel_2_30;
  wire s_54;
  wire sel_2_31;
  wire s_55;
  wire sel_2_32;
  wire s_56;
  wire sel_2_33;
  wire s_57;
  wire sel_2_34;
  wire s_58;
  wire sel_2_35;
  wire s_59;
  wire sel_2_36;
  wire sel_2_37;
  wire sel_2_38;
  wire sel_46;
  wire sel_2_39;
  wire sel_47;
  wire sel_48;
  reg  sel_2_40;
  wire tmp_81;
  wire sel_49;
  wire sel_50;
  wire sel_51;
  wire sel_52;
  wire sel_53;
  wire sel_54;
  wire sel_55;
  wire sel_56;
  wire sel_57;
  wire sel_58;
  wire sel_59;
  wire sel_60;
  wire s_60;
  wire sel_2_41;
  wire s_61;
  wire sel_2_42;
  wire s_62;
  wire sel_2_43;
  wire s_63;
  wire sel_2_44;
  wire s_64;
  wire sel_2_45;
  wire s_65;
  wire sel_2_46;
  wire s_66;
  wire sel_2_47;
  wire s_67;
  wire sel_2_48;
  wire sel_61;
  wire sel_62;
  wire sel_63;
  wire s_68;
  wire sel_2_49;
  wire s_69;
  wire sel_2_50;
  wire s_70;
  wire sel_2_51;
  wire s_71;
  wire sel_2_52;
  wire s_72;
  wire sel_2_53;
  wire s_73;
  wire sel_2_54;
  wire s_74;
  wire sel_2_55;
  wire s_75;
  wire sel_2_56;
  wire sel_2_57;
  wire sel_2_58;
  wire sel_64;
  wire sel_2_59;
  wire sel_65;
  wire sel_66;
  reg  sel_2_60;
  wire tmp_82;
  wire sel_67;
  wire sel_68;
  wire sel_69;
  wire sel_70;
  wire sel_71;
  wire sel_72;
  wire sel_73;
  wire sel_74;
  wire sel_75;
  wire sel_76;
  wire sel_77;
  wire sel_78;
  wire s_76;
  wire sel_2_61;
  wire s_77;
  wire sel_2_62;
  wire s_78;
  wire sel_2_63;
  wire s_79;
  wire sel_2_64;
  wire s_80;
  wire sel_2_65;
  wire s_81;
  wire sel_2_66;
  wire s_82;
  wire sel_2_67;
  wire s_83;
  wire sel_2_68;
  wire sel_79;
  wire sel_80;
  wire sel_81;
  wire s_84;
  wire sel_2_69;
  wire s_85;
  wire sel_2_70;
  wire s_86;
  wire sel_2_71;
  wire s_87;
  wire sel_2_72;
  wire s_88;
  wire sel_2_73;
  wire s_89;
  wire sel_2_74;
  wire s_90;
  wire sel_2_75;
  wire s_91;
  wire sel_2_76;
  wire sel_2_77;
  wire sel_2_78;
  wire sel_82;
  wire sel_2_79;
  wire sel_83;
  wire sel_84;
  reg  sel_2_80;
  wire sel_85;
  wire sel_86;
  wire sel_87;
  wire sel_88;
  wire sel_89;
  wire sel_90;
  wire sel_91;
  wire sel_92;
  wire sel_93;
  wire sel_94;
  wire sel_95;
  wire [11:0] cont_bits_41;  // boolean [12]
  reg [15:0] r_v41;  // uint16
  wire [15:0] tmp_83;  // uint16
  wire [15:0] tmp_84;  // uint16
  wire [15:0] tmp_85;  // uint16
  wire [15:0] tmp_86;  // uint16
  wire [15:0] tmp_87;  // uint16
  wire [15:0] tmp_88;  // uint16
  wire [15:0] tmp_89;  // uint16
  wire [15:0] tmp_90;  // uint16
  reg [15:0] tmp_91;  // uint16
  wire functionOutput_0;
  wire functionOutput_1;
  wire functionOutput_2;
  wire functionOutput_3;
  wire functionOutput_4;
  wire functionOutput_5;
  wire functionOutput_6;
  wire functionOutput_7;
  wire functionOutput_8;
  wire functionOutput_9;
  wire functionOutput_10;
  wire functionOutput_11;
  wire [11:0] functionOutput;  // boolean [12]
  wire signed [31:0] sel_96;  // int32
  wire signed [31:0] sel_97;  // int32
  wire signed [31:0] sel_98;  // int32
  wire signed [31:0] sel_99;  // int32
  wire signed [31:0] sel_100;  // int32
  wire signed [31:0] sel_101;  // int32
  wire signed [31:0] sel_102;  // int32
  wire signed [31:0] sel_103;  // int32
  wire signed [31:0] sel_104;  // int32
  wire signed [31:0] sel_105;  // int32
  wire signed [31:0] sel_106;  // int32
  wire signed [31:0] sel_107;  // int32
  wire signed [31:0] s_92;  // int32
  wire signed [31:0] sel_1_16;  // int32
  wire signed [31:0] sel_108;  // int32
  wire signed [31:0] sel_1_17;  // int32
  wire signed [31:0] sel_109;  // int32
  wire signed [31:0] sel_1_18;  // int32
  wire signed [31:0] sel_110;  // int32
  wire signed [31:0] sel_1_19;  // int32
  wire signed [31:0] sel_111;  // int32
  wire signed [31:0] sel_1_20;  // int32
  wire signed [31:0] sel_112;  // int32
  wire signed [31:0] sel_1_21;  // int32
  wire signed [31:0] sel_113;  // int32
  wire signed [31:0] sel_1_22;  // int32
  wire signed [31:0] sel_114;  // int32
  wire signed [31:0] sel_1_23;  // int32
  wire signed [31:0] sel_115;  // int32
  wire signed [31:0] sel_116;  // int32
  wire signed [31:0] sel_117;  // int32
  reg signed [31:0] sel_1_24;  // int32
  wire tmp_92;
  wire sel_118;
  wire sel_119;
  wire sel_120;
  wire sel_121;
  wire sel_122;
  wire sel_123;
  wire sel_124;
  wire sel_125;
  wire sel_126;
  wire sel_127;
  wire sel_128;
  wire sel_129;
  wire s_93;
  wire sel_2_81;
  wire sel_130;
  wire sel_2_82;
  wire sel_131;
  wire sel_2_83;
  wire sel_132;
  wire sel_2_84;
  wire sel_133;
  wire sel_2_85;
  wire sel_134;
  wire sel_2_86;
  wire sel_135;
  wire sel_2_87;
  wire sel_136;
  wire sel_2_88;
  wire sel_137;
  wire sel_138;
  wire sel_139;
  reg  sel_2_89;
  reg  [11:0] cont_bits_41_1;  // boolean [12]
  wire signed [31:0] sel_140;  // int32
  wire signed [31:0] sel_141;  // int32
  wire signed [31:0] sel_142;  // int32
  wire signed [31:0] sel_143;  // int32
  wire signed [31:0] sel_144;  // int32
  wire signed [31:0] sel_145;  // int32
  wire signed [31:0] sel_146;  // int32
  wire signed [31:0] sel_147;  // int32
  wire signed [31:0] sel_148;  // int32
  wire signed [31:0] sel_149;  // int32
  wire signed [31:0] sel_150;  // int32
  wire signed [31:0] sel_151;  // int32
  wire signed [31:0] s_94;  // int32
  wire signed [31:0] sel_1_25;  // int32
  wire signed [31:0] sel_152;  // int32
  wire signed [31:0] sel_1_26;  // int32
  wire signed [31:0] sel_153;  // int32
  wire signed [31:0] sel_1_27;  // int32
  wire signed [31:0] sel_154;  // int32
  wire signed [31:0] sel_1_28;  // int32
  wire signed [31:0] sel_155;  // int32
  wire signed [31:0] sel_1_29;  // int32
  wire signed [31:0] sel_156;  // int32
  wire signed [31:0] sel_1_30;  // int32
  wire signed [31:0] sel_157;  // int32
  wire signed [31:0] sel_1_31;  // int32
  wire signed [31:0] sel_158;  // int32
  wire signed [31:0] sel_1_32;  // int32
  wire signed [31:0] sel_159;  // int32
  wire signed [31:0] sel_160;  // int32
  wire signed [31:0] sel_161;  // int32
  reg signed [31:0] sel_1_33;  // int32
  wire tmp_93;
  wire sel_162;
  wire sel_163;
  wire sel_164;
  wire sel_165;
  wire sel_166;
  wire sel_167;
  wire sel_168;
  wire sel_169;
  wire sel_170;
  wire sel_171;
  wire sel_172;
  wire sel_173;
  wire s_95;
  wire sel_2_90;
  wire sel_174;
  wire sel_2_91;
  wire sel_175;
  wire sel_2_92;
  wire sel_176;
  wire sel_2_93;
  wire sel_177;
  wire sel_2_94;
  wire sel_178;
  wire sel_2_95;
  wire sel_179;
  wire sel_2_96;
  wire sel_180;
  wire sel_2_97;
  wire sel_181;
  wire sel_182;
  wire sel_183;
  reg  sel_2_98;
  reg  [11:0] cont_bits_41_2;  // boolean [12]
  wire signed [31:0] sel_184;  // int32
  wire signed [31:0] sel_185;  // int32
  wire signed [31:0] sel_186;  // int32
  wire signed [31:0] sel_187;  // int32
  wire signed [31:0] sel_188;  // int32
  wire signed [31:0] sel_189;  // int32
  wire signed [31:0] sel_190;  // int32
  wire signed [31:0] sel_191;  // int32
  wire signed [31:0] sel_192;  // int32
  wire signed [31:0] sel_193;  // int32
  wire signed [31:0] sel_194;  // int32
  wire signed [31:0] sel_195;  // int32
  wire signed [31:0] s_96;  // int32
  wire signed [31:0] sel_1_34;  // int32
  wire signed [31:0] sel_196;  // int32
  wire signed [31:0] sel_1_35;  // int32
  wire signed [31:0] sel_197;  // int32
  wire signed [31:0] sel_1_36;  // int32
  wire signed [31:0] sel_198;  // int32
  wire signed [31:0] sel_1_37;  // int32
  wire signed [31:0] sel_199;  // int32
  wire signed [31:0] sel_1_38;  // int32
  wire signed [31:0] sel_200;  // int32
  wire signed [31:0] sel_1_39;  // int32
  wire signed [31:0] sel_201;  // int32
  wire signed [31:0] sel_1_40;  // int32
  wire signed [31:0] sel_202;  // int32
  wire signed [31:0] sel_1_41;  // int32
  wire signed [31:0] sel_203;  // int32
  wire signed [31:0] sel_204;  // int32
  wire signed [31:0] sel_205;  // int32
  reg signed [31:0] sel_1_42;  // int32
  wire tmp_94;
  wire sel_206;
  wire sel_207;
  wire sel_208;
  wire sel_209;
  wire sel_210;
  wire sel_211;
  wire sel_212;
  wire sel_213;
  wire sel_214;
  wire sel_215;
  wire sel_216;
  wire sel_217;
  wire s_97;
  wire sel_2_99;
  wire sel_218;
  wire sel_2_100;
  wire sel_219;
  wire sel_2_101;
  wire sel_220;
  wire sel_2_102;
  wire sel_221;
  wire sel_2_103;
  wire sel_222;
  wire sel_2_104;
  wire sel_223;
  wire sel_2_105;
  wire sel_224;
  wire sel_2_106;
  wire sel_225;
  wire sel_226;
  wire sel_227;
  reg  sel_2_107;
  reg  [11:0] cont_bits_41_3;  // boolean [12]
  wire signed [31:0] sel_228;  // int32
  wire signed [31:0] sel_229;  // int32
  wire signed [31:0] sel_230;  // int32
  wire signed [31:0] sel_231;  // int32
  wire signed [31:0] sel_232;  // int32
  wire signed [31:0] sel_233;  // int32
  wire signed [31:0] sel_234;  // int32
  wire signed [31:0] sel_235;  // int32
  wire signed [31:0] sel_236;  // int32
  wire signed [31:0] sel_237;  // int32
  wire signed [31:0] sel_238;  // int32
  wire signed [31:0] sel_239;  // int32
  wire signed [31:0] s_98;  // int32
  wire signed [31:0] sel_1_43;  // int32
  wire signed [31:0] sel_240;  // int32
  wire signed [31:0] sel_1_44;  // int32
  wire signed [31:0] sel_241;  // int32
  wire signed [31:0] sel_1_45;  // int32
  wire signed [31:0] sel_242;  // int32
  wire signed [31:0] sel_1_46;  // int32
  wire signed [31:0] sel_243;  // int32
  wire signed [31:0] sel_1_47;  // int32
  wire signed [31:0] sel_244;  // int32
  wire signed [31:0] sel_1_48;  // int32
  wire signed [31:0] sel_245;  // int32
  wire signed [31:0] sel_1_49;  // int32
  wire signed [31:0] sel_246;  // int32
  wire signed [31:0] sel_1_50;  // int32
  wire signed [31:0] sel_247;  // int32
  wire signed [31:0] sel_248;  // int32
  wire signed [31:0] sel_249;  // int32
  reg signed [31:0] sel_1_51;  // int32
  wire tmp_95;
  wire sel_250;
  wire sel_251;
  wire sel_252;
  wire sel_253;
  wire sel_254;
  wire sel_255;
  wire sel_256;
  wire sel_257;
  wire sel_258;
  wire sel_259;
  wire sel_260;
  wire sel_261;
  wire s_99;
  wire sel_2_108;
  wire sel_262;
  wire sel_2_109;
  wire sel_263;
  wire sel_2_110;
  wire sel_264;
  wire sel_2_111;
  wire sel_265;
  wire sel_2_112;
  wire sel_266;
  wire sel_2_113;
  wire sel_267;
  wire sel_2_114;
  wire sel_268;
  wire sel_2_115;
  wire sel_269;
  wire sel_270;
  wire sel_271;
  reg  sel_2_116;
  reg  [11:0] cont_bits_41_4;  // boolean [12]
  wire signed [31:0] sel_272;  // int32
  wire signed [31:0] sel_273;  // int32
  wire signed [31:0] sel_274;  // int32
  wire signed [31:0] sel_275;  // int32
  wire signed [31:0] sel_276;  // int32
  wire signed [31:0] sel_277;  // int32
  wire signed [31:0] sel_278;  // int32
  wire signed [31:0] sel_279;  // int32
  wire signed [31:0] sel_280;  // int32
  wire signed [31:0] sel_281;  // int32
  wire signed [31:0] sel_282;  // int32
  wire signed [31:0] sel_283;  // int32
  wire signed [31:0] s_100;  // int32
  wire signed [31:0] sel_1_52;  // int32
  wire signed [31:0] sel_284;  // int32
  wire signed [31:0] sel_1_53;  // int32
  wire signed [31:0] sel_285;  // int32
  wire signed [31:0] sel_1_54;  // int32
  wire signed [31:0] sel_286;  // int32
  wire signed [31:0] sel_1_55;  // int32
  wire signed [31:0] sel_287;  // int32
  wire signed [31:0] sel_1_56;  // int32
  wire signed [31:0] sel_288;  // int32
  wire signed [31:0] sel_1_57;  // int32
  wire signed [31:0] sel_289;  // int32
  wire signed [31:0] sel_1_58;  // int32
  wire signed [31:0] sel_290;  // int32
  wire signed [31:0] sel_1_59;  // int32
  wire signed [31:0] sel_291;  // int32
  wire signed [31:0] sel_292;  // int32
  wire signed [31:0] sel_293;  // int32
  reg signed [31:0] sel_1_60;  // int32
  wire tmp_96;
  wire sel_294;
  wire sel_295;
  wire sel_296;
  wire sel_297;
  wire sel_298;
  wire sel_299;
  wire sel_300;
  wire sel_301;
  wire sel_302;
  wire sel_303;
  wire sel_304;
  wire sel_305;
  wire s_101;
  wire sel_2_117;
  wire sel_306;
  wire sel_2_118;
  wire sel_307;
  wire sel_2_119;
  wire sel_308;
  wire sel_2_120;
  wire sel_309;
  wire sel_2_121;
  wire sel_310;
  wire sel_2_122;
  wire sel_311;
  wire sel_2_123;
  wire sel_312;
  wire sel_2_124;
  wire sel_313;
  wire sel_314;
  wire sel_315;
  reg  sel_2_125;
  reg  [11:0] cont_bits_41_5;  // boolean [12]
  wire signed [31:0] sel_316;  // int32
  wire signed [31:0] sel_317;  // int32
  wire signed [31:0] sel_318;  // int32
  wire signed [31:0] sel_319;  // int32
  wire signed [31:0] sel_320;  // int32
  wire signed [31:0] sel_321;  // int32
  wire signed [31:0] sel_322;  // int32
  wire signed [31:0] sel_323;  // int32
  wire signed [31:0] sel_324;  // int32
  wire signed [31:0] sel_325;  // int32
  wire signed [31:0] sel_326;  // int32
  wire signed [31:0] sel_327;  // int32
  wire signed [31:0] s_102;  // int32
  wire signed [31:0] sel_1_61;  // int32
  wire signed [31:0] sel_328;  // int32
  wire signed [31:0] sel_1_62;  // int32
  wire signed [31:0] sel_329;  // int32
  wire signed [31:0] sel_1_63;  // int32
  wire signed [31:0] sel_330;  // int32
  wire signed [31:0] sel_1_64;  // int32
  wire signed [31:0] sel_331;  // int32
  wire signed [31:0] sel_1_65;  // int32
  wire signed [31:0] sel_332;  // int32
  wire signed [31:0] sel_1_66;  // int32
  wire signed [31:0] sel_333;  // int32
  wire signed [31:0] sel_1_67;  // int32
  wire signed [31:0] sel_334;  // int32
  wire signed [31:0] sel_1_68;  // int32
  wire signed [31:0] sel_335;  // int32
  wire signed [31:0] sel_336;  // int32
  wire signed [31:0] sel_337;  // int32
  reg signed [31:0] sel_1_69;  // int32
  wire tmp_97;
  wire sel_338;
  wire sel_339;
  wire sel_340;
  wire sel_341;
  wire sel_342;
  wire sel_343;
  wire sel_344;
  wire sel_345;
  wire sel_346;
  wire sel_347;
  wire sel_348;
  wire sel_349;
  wire s_103;
  wire sel_2_126;
  wire sel_350;
  wire sel_2_127;
  wire sel_351;
  wire sel_2_128;
  wire sel_352;
  wire sel_2_129;
  wire sel_353;
  wire sel_2_130;
  wire sel_354;
  wire sel_2_131;
  wire sel_355;
  wire sel_2_132;
  wire sel_356;
  wire sel_2_133;
  wire sel_357;
  wire sel_358;
  wire sel_359;
  reg  sel_2_134;
  reg  [11:0] cont_bits_41_6;  // boolean [12]
  wire signed [31:0] sel_360;  // int32
  wire signed [31:0] sel_361;  // int32
  wire signed [31:0] sel_362;  // int32
  wire signed [31:0] sel_363;  // int32
  wire signed [31:0] sel_364;  // int32
  wire signed [31:0] sel_365;  // int32
  wire signed [31:0] sel_366;  // int32
  wire signed [31:0] sel_367;  // int32
  wire signed [31:0] sel_368;  // int32
  wire signed [31:0] sel_369;  // int32
  wire signed [31:0] sel_370;  // int32
  wire signed [31:0] sel_371;  // int32
  wire signed [31:0] s_104;  // int32
  wire signed [31:0] sel_1_70;  // int32
  wire signed [31:0] sel_372;  // int32
  wire signed [31:0] sel_1_71;  // int32
  wire signed [31:0] sel_373;  // int32
  wire signed [31:0] sel_1_72;  // int32
  wire signed [31:0] sel_374;  // int32
  wire signed [31:0] sel_1_73;  // int32
  wire signed [31:0] sel_375;  // int32
  wire signed [31:0] sel_1_74;  // int32
  wire signed [31:0] sel_376;  // int32
  wire signed [31:0] sel_1_75;  // int32
  wire signed [31:0] sel_377;  // int32
  wire signed [31:0] sel_1_76;  // int32
  wire signed [31:0] sel_378;  // int32
  wire signed [31:0] sel_1_77;  // int32
  wire signed [31:0] sel_379;  // int32
  wire signed [31:0] sel_380;  // int32
  wire signed [31:0] sel_381;  // int32
  reg signed [31:0] sel_1_78;  // int32
  wire tmp_98;
  wire sel_382;
  wire sel_383;
  wire sel_384;
  wire sel_385;
  wire sel_386;
  wire sel_387;
  wire sel_388;
  wire sel_389;
  wire sel_390;
  wire sel_391;
  wire sel_392;
  wire sel_393;
  wire s_105;
  wire sel_2_135;
  wire sel_394;
  wire sel_2_136;
  wire sel_395;
  wire sel_2_137;
  wire sel_396;
  wire sel_2_138;
  wire sel_397;
  wire sel_2_139;
  wire sel_398;
  wire sel_2_140;
  wire sel_399;
  wire sel_2_141;
  wire sel_400;
  wire sel_2_142;
  wire sel_401;
  wire sel_402;
  wire sel_403;
  reg  sel_2_143;
  reg  [11:0] cont_bits_41_7;  // boolean [12]
  wire signed [31:0] sel_404;  // int32
  wire signed [31:0] sel_405;  // int32
  wire signed [31:0] sel_406;  // int32
  wire signed [31:0] sel_407;  // int32
  wire signed [31:0] sel_408;  // int32
  wire signed [31:0] sel_409;  // int32
  wire signed [31:0] sel_410;  // int32
  wire signed [31:0] sel_411;  // int32
  wire signed [31:0] sel_412;  // int32
  wire signed [31:0] sel_413;  // int32
  wire signed [31:0] sel_414;  // int32
  wire signed [31:0] sel_415;  // int32
  wire signed [31:0] s_106;  // int32
  wire signed [31:0] sel_1_79;  // int32
  wire signed [31:0] sel_416;  // int32
  wire signed [31:0] sel_1_80;  // int32
  wire signed [31:0] sel_417;  // int32
  wire signed [31:0] sel_1_81;  // int32
  wire signed [31:0] sel_418;  // int32
  wire signed [31:0] sel_1_82;  // int32
  wire signed [31:0] sel_419;  // int32
  wire signed [31:0] sel_1_83;  // int32
  wire signed [31:0] sel_420;  // int32
  wire signed [31:0] sel_1_84;  // int32
  wire signed [31:0] sel_421;  // int32
  wire signed [31:0] sel_1_85;  // int32
  wire signed [31:0] sel_422;  // int32
  wire signed [31:0] sel_1_86;  // int32
  wire signed [31:0] sel_423;  // int32
  wire signed [31:0] sel_424;  // int32
  wire signed [31:0] sel_425;  // int32
  reg signed [31:0] sel_1_87;  // int32
  wire tmp_99;
  wire sel_426;
  wire sel_427;
  wire sel_428;
  wire sel_429;
  wire sel_430;
  wire sel_431;
  wire sel_432;
  wire sel_433;
  wire sel_434;
  wire sel_435;
  wire sel_436;
  wire sel_437;
  wire s_107;
  wire sel_2_144;
  wire sel_438;
  wire sel_2_145;
  wire sel_439;
  wire sel_2_146;
  wire sel_440;
  wire sel_2_147;
  wire sel_441;
  wire sel_2_148;
  wire sel_442;
  wire sel_2_149;
  wire sel_443;
  wire sel_2_150;
  wire sel_444;
  wire sel_2_151;
  wire sel_445;
  wire sel_446;
  wire sel_447;
  reg  sel_2_152;
  reg  [11:0] cont_bits_41_8;  // boolean [12]
  wire signed [31:0] sel_448;  // int32
  wire signed [31:0] sel_449;  // int32
  wire signed [31:0] sel_450;  // int32
  wire signed [31:0] sel_451;  // int32
  wire signed [31:0] sel_452;  // int32
  wire signed [31:0] sel_453;  // int32
  wire signed [31:0] sel_454;  // int32
  wire signed [31:0] sel_455;  // int32
  wire signed [31:0] sel_456;  // int32
  wire signed [31:0] sel_457;  // int32
  wire signed [31:0] sel_458;  // int32
  wire signed [31:0] sel_459;  // int32
  wire signed [31:0] s_108;  // int32
  wire signed [31:0] sel_1_88;  // int32
  wire signed [31:0] sel_460;  // int32
  wire signed [31:0] sel_1_89;  // int32
  wire signed [31:0] sel_461;  // int32
  wire signed [31:0] sel_1_90;  // int32
  wire signed [31:0] sel_462;  // int32
  wire signed [31:0] sel_1_91;  // int32
  wire signed [31:0] sel_463;  // int32
  wire signed [31:0] sel_1_92;  // int32
  wire signed [31:0] sel_464;  // int32
  wire signed [31:0] sel_1_93;  // int32
  wire signed [31:0] sel_465;  // int32
  wire signed [31:0] sel_1_94;  // int32
  wire signed [31:0] sel_466;  // int32
  wire signed [31:0] sel_1_95;  // int32
  wire signed [31:0] sel_467;  // int32
  wire signed [31:0] sel_468;  // int32
  wire signed [31:0] sel_469;  // int32
  reg signed [31:0] sel_1_96;  // int32
  wire tmp_100;
  wire sel_470;
  wire sel_471;
  wire sel_472;
  wire sel_473;
  wire sel_474;
  wire sel_475;
  wire sel_476;
  wire sel_477;
  wire sel_478;
  wire sel_479;
  wire sel_480;
  wire sel_481;
  wire s_109;
  wire sel_2_153;
  wire sel_482;
  wire sel_2_154;
  wire sel_483;
  wire sel_2_155;
  wire sel_484;
  wire sel_2_156;
  wire sel_485;
  wire sel_2_157;
  wire sel_486;
  wire sel_2_158;
  wire sel_487;
  wire sel_2_159;
  wire sel_488;
  wire sel_2_160;
  wire sel_489;
  wire sel_490;
  wire sel_491;
  reg  sel_2_161;
  reg  [11:0] cont_bits_41_9;  // boolean [12]
  wire signed [31:0] sel_492;  // int32
  wire signed [31:0] sel_493;  // int32
  wire signed [31:0] sel_494;  // int32
  wire signed [31:0] sel_495;  // int32
  wire signed [31:0] sel_496;  // int32
  wire signed [31:0] sel_497;  // int32
  wire signed [31:0] sel_498;  // int32
  wire signed [31:0] sel_499;  // int32
  wire signed [31:0] sel_500;  // int32
  wire signed [31:0] sel_501;  // int32
  wire signed [31:0] sel_502;  // int32
  wire signed [31:0] sel_503;  // int32
  wire signed [31:0] s_110;  // int32
  wire signed [31:0] sel_1_97;  // int32
  wire signed [31:0] sel_504;  // int32
  wire signed [31:0] sel_1_98;  // int32
  wire signed [31:0] sel_505;  // int32
  wire signed [31:0] sel_1_99;  // int32
  wire signed [31:0] sel_506;  // int32
  wire signed [31:0] sel_1_100;  // int32
  wire signed [31:0] sel_507;  // int32
  wire signed [31:0] sel_1_101;  // int32
  wire signed [31:0] sel_508;  // int32
  wire signed [31:0] sel_1_102;  // int32
  wire signed [31:0] sel_509;  // int32
  wire signed [31:0] sel_1_103;  // int32
  wire signed [31:0] sel_510;  // int32
  wire signed [31:0] sel_1_104;  // int32
  wire signed [31:0] sel_511;  // int32
  wire signed [31:0] sel_512;  // int32
  wire signed [31:0] sel_513;  // int32
  reg signed [31:0] sel_1_105;  // int32
  wire tmp_101;
  wire sel_514;
  wire sel_515;
  wire sel_516;
  wire sel_517;
  wire sel_518;
  wire sel_519;
  wire sel_520;
  wire sel_521;
  wire sel_522;
  wire sel_523;
  wire sel_524;
  wire sel_525;
  wire s_111;
  wire sel_2_162;
  wire sel_526;
  wire sel_2_163;
  wire sel_527;
  wire sel_2_164;
  wire sel_528;
  wire sel_2_165;
  wire sel_529;
  wire sel_2_166;
  wire sel_530;
  wire sel_2_167;
  wire sel_531;
  wire sel_2_168;
  wire sel_532;
  wire sel_2_169;
  wire sel_533;
  wire sel_534;
  wire sel_535;
  reg  sel_2_170;
  reg  [11:0] cont_bits_41_10;  // boolean [12]
  wire signed [31:0] sel_536;  // int32
  wire signed [31:0] sel_537;  // int32
  wire signed [31:0] sel_538;  // int32
  wire signed [31:0] sel_539;  // int32
  wire signed [31:0] sel_540;  // int32
  wire signed [31:0] sel_541;  // int32
  wire signed [31:0] sel_542;  // int32
  wire signed [31:0] sel_543;  // int32
  wire signed [31:0] sel_544;  // int32
  wire signed [31:0] sel_545;  // int32
  wire signed [31:0] sel_546;  // int32
  wire signed [31:0] sel_547;  // int32
  wire signed [31:0] s_112;  // int32
  wire signed [31:0] sel_1_106;  // int32
  wire signed [31:0] sel_548;  // int32
  wire signed [31:0] sel_1_107;  // int32
  wire signed [31:0] sel_549;  // int32
  wire signed [31:0] sel_1_108;  // int32
  wire signed [31:0] sel_550;  // int32
  wire signed [31:0] sel_1_109;  // int32
  wire signed [31:0] sel_551;  // int32
  wire signed [31:0] sel_1_110;  // int32
  wire signed [31:0] sel_552;  // int32
  wire signed [31:0] sel_1_111;  // int32
  wire signed [31:0] sel_553;  // int32
  wire signed [31:0] sel_1_112;  // int32
  wire signed [31:0] sel_554;  // int32
  wire signed [31:0] sel_1_113;  // int32
  wire signed [31:0] sel_555;  // int32
  wire signed [31:0] sel_556;  // int32
  wire signed [31:0] sel_557;  // int32
  reg signed [31:0] sel_1_114;  // int32
  wire tmp_102;
  wire sel_558;
  wire sel_559;
  wire sel_560;
  wire sel_561;
  wire sel_562;
  wire sel_563;
  wire sel_564;
  wire sel_565;
  wire sel_566;
  wire sel_567;
  wire sel_568;
  wire sel_569;
  wire s_113;
  wire sel_2_171;
  wire sel_570;
  wire sel_2_172;
  wire sel_571;
  wire sel_2_173;
  wire sel_572;
  wire sel_2_174;
  wire sel_573;
  wire sel_2_175;
  wire sel_574;
  wire sel_2_176;
  wire sel_575;
  wire sel_2_177;
  wire sel_576;
  wire sel_2_178;
  wire sel_577;
  wire sel_578;
  wire sel_579;
  reg  sel_2_179;
  reg  [11:0] cont_bits_41_11;  // boolean [12]
  wire signed [31:0] sel_580;  // int32
  wire signed [31:0] sel_581;  // int32
  wire signed [31:0] sel_582;  // int32
  wire signed [31:0] sel_583;  // int32
  wire signed [31:0] sel_584;  // int32
  wire signed [31:0] sel_585;  // int32
  wire signed [31:0] sel_586;  // int32
  wire signed [31:0] sel_587;  // int32
  wire signed [31:0] sel_588;  // int32
  wire signed [31:0] sel_589;  // int32
  wire signed [31:0] sel_590;  // int32
  wire signed [31:0] sel_591;  // int32
  wire signed [31:0] s_114;  // int32
  wire signed [31:0] sel_1_115;  // int32
  wire signed [31:0] sel_592;  // int32
  wire signed [31:0] sel_1_116;  // int32
  wire signed [31:0] sel_593;  // int32
  wire signed [31:0] sel_1_117;  // int32
  wire signed [31:0] sel_594;  // int32
  wire signed [31:0] sel_1_118;  // int32
  wire signed [31:0] sel_595;  // int32
  wire signed [31:0] sel_1_119;  // int32
  wire signed [31:0] sel_596;  // int32
  wire signed [31:0] sel_1_120;  // int32
  wire signed [31:0] sel_597;  // int32
  wire signed [31:0] sel_1_121;  // int32
  wire signed [31:0] sel_598;  // int32
  wire signed [31:0] sel_1_122;  // int32
  wire signed [31:0] sel_599;  // int32
  wire signed [31:0] sel_600;  // int32
  wire signed [31:0] sel_601;  // int32
  reg signed [31:0] sel_1_123;  // int32
  wire tmp_103;
  wire sel_602;
  wire sel_603;
  wire sel_604;
  wire sel_605;
  wire sel_606;
  wire sel_607;
  wire sel_608;
  wire sel_609;
  wire sel_610;
  wire sel_611;
  wire sel_612;
  wire sel_613;
  wire s_115;
  wire sel_2_180;
  wire sel_614;
  wire sel_2_181;
  wire sel_615;
  wire sel_2_182;
  wire sel_616;
  wire sel_2_183;
  wire sel_617;
  wire sel_2_184;
  wire sel_618;
  wire sel_2_185;
  wire sel_619;
  wire sel_2_186;
  wire sel_620;
  wire sel_2_187;
  wire sel_621;
  wire sel_622;
  wire sel_623;
  reg  sel_2_188;
  reg  [11:0] cont_bits_41_12;  // boolean [12]
  wire signed [31:0] sel_624;  // int32
  wire signed [31:0] sel_625;  // int32
  wire signed [31:0] sel_626;  // int32
  wire signed [31:0] sel_627;  // int32
  wire signed [31:0] sel_628;  // int32
  wire signed [31:0] sel_629;  // int32
  wire signed [31:0] sel_630;  // int32
  wire signed [31:0] sel_631;  // int32
  wire signed [31:0] sel_632;  // int32
  wire signed [31:0] sel_633;  // int32
  wire signed [31:0] sel_634;  // int32
  wire signed [31:0] sel_635;  // int32
  wire signed [31:0] s_116;  // int32
  wire signed [31:0] sel_1_124;  // int32
  wire signed [31:0] sel_636;  // int32
  wire signed [31:0] sel_1_125;  // int32
  wire signed [31:0] sel_637;  // int32
  wire signed [31:0] sel_1_126;  // int32
  wire signed [31:0] sel_638;  // int32
  wire signed [31:0] sel_1_127;  // int32
  wire signed [31:0] sel_639;  // int32
  wire signed [31:0] sel_1_128;  // int32
  wire signed [31:0] sel_640;  // int32
  wire signed [31:0] sel_1_129;  // int32
  wire signed [31:0] sel_641;  // int32
  wire signed [31:0] sel_1_130;  // int32
  wire signed [31:0] sel_642;  // int32
  wire signed [31:0] sel_1_131;  // int32
  wire signed [31:0] sel_643;  // int32
  wire signed [31:0] sel_644;  // int32
  wire signed [31:0] sel_645;  // int32
  reg signed [31:0] sel_1_132;  // int32
  wire cont_bits_41_13;
  wire [11:0] cont_bits_42;  // boolean [12]
  reg [15:0] r_v42;  // uint16
  wire [15:0] tmp_104;  // uint16
  wire [15:0] tmp_105;  // uint16
  wire [15:0] tmp_106;  // uint16
  wire [15:0] tmp_107;  // uint16
  wire [15:0] tmp_108;  // uint16
  wire [15:0] tmp_109;  // uint16
  wire [15:0] tmp_110;  // uint16
  wire [15:0] tmp_111;  // uint16
  reg [15:0] tmp_112;  // uint16
  wire functionOutput_0_1;
  wire functionOutput_1_1;
  wire functionOutput_2_1;
  wire functionOutput_3_1;
  wire functionOutput_4_1;
  wire functionOutput_5_1;
  wire functionOutput_6_1;
  wire functionOutput_7_1;
  wire functionOutput_8_1;
  wire functionOutput_9_1;
  wire functionOutput_10_1;
  wire functionOutput_11_1;
  wire [11:0] functionOutput_12;  // boolean [12]
  wire signed [31:0] sel_646;  // int32
  wire signed [31:0] sel_647;  // int32
  wire signed [31:0] sel_648;  // int32
  wire signed [31:0] sel_649;  // int32
  wire signed [31:0] sel_650;  // int32
  wire signed [31:0] sel_651;  // int32
  wire signed [31:0] sel_652;  // int32
  wire signed [31:0] sel_653;  // int32
  wire signed [31:0] sel_654;  // int32
  wire signed [31:0] sel_655;  // int32
  wire signed [31:0] sel_656;  // int32
  wire signed [31:0] sel_657;  // int32
  wire signed [31:0] s_117;  // int32
  wire signed [31:0] sel_1_133;  // int32
  wire signed [31:0] sel_658;  // int32
  wire signed [31:0] sel_1_134;  // int32
  wire signed [31:0] sel_659;  // int32
  wire signed [31:0] sel_1_135;  // int32
  wire signed [31:0] sel_660;  // int32
  wire signed [31:0] sel_1_136;  // int32
  wire signed [31:0] sel_661;  // int32
  wire signed [31:0] sel_1_137;  // int32
  wire signed [31:0] sel_662;  // int32
  wire signed [31:0] sel_1_138;  // int32
  wire signed [31:0] sel_663;  // int32
  wire signed [31:0] sel_1_139;  // int32
  wire signed [31:0] sel_664;  // int32
  wire signed [31:0] sel_665;  // int32
  wire signed [31:0] sel_666;  // int32
  reg signed [31:0] sel_1_140;  // int32
  wire tmp_113;
  wire sel_667;
  wire sel_668;
  wire sel_669;
  wire sel_670;
  wire sel_671;
  wire sel_672;
  wire sel_673;
  wire sel_674;
  wire sel_675;
  wire sel_676;
  wire sel_677;
  wire sel_678;
  wire s_118;
  wire sel_2_189;
  wire sel_679;
  wire sel_2_190;
  wire sel_680;
  wire sel_2_191;
  wire sel_681;
  wire sel_2_192;
  wire sel_682;
  wire sel_2_193;
  wire sel_683;
  wire sel_2_194;
  wire sel_684;
  wire sel_2_195;
  wire sel_685;
  wire sel_686;
  wire sel_687;
  reg  sel_2_196;
  reg  [11:0] cont_bits_42_1;  // boolean [12]
  wire signed [31:0] sel_688;  // int32
  wire signed [31:0] sel_689;  // int32
  wire signed [31:0] sel_690;  // int32
  wire signed [31:0] sel_691;  // int32
  wire signed [31:0] sel_692;  // int32
  wire signed [31:0] sel_693;  // int32
  wire signed [31:0] sel_694;  // int32
  wire signed [31:0] sel_695;  // int32
  wire signed [31:0] sel_696;  // int32
  wire signed [31:0] sel_697;  // int32
  wire signed [31:0] sel_698;  // int32
  wire signed [31:0] sel_699;  // int32
  wire signed [31:0] s_119;  // int32
  wire signed [31:0] sel_1_141;  // int32
  wire signed [31:0] sel_700;  // int32
  wire signed [31:0] sel_1_142;  // int32
  wire signed [31:0] sel_701;  // int32
  wire signed [31:0] sel_1_143;  // int32
  wire signed [31:0] sel_702;  // int32
  wire signed [31:0] sel_1_144;  // int32
  wire signed [31:0] sel_703;  // int32
  wire signed [31:0] sel_1_145;  // int32
  wire signed [31:0] sel_704;  // int32
  wire signed [31:0] sel_1_146;  // int32
  wire signed [31:0] sel_705;  // int32
  wire signed [31:0] sel_1_147;  // int32
  wire signed [31:0] sel_706;  // int32
  wire signed [31:0] sel_707;  // int32
  wire signed [31:0] sel_708;  // int32
  reg signed [31:0] sel_1_148;  // int32
  wire tmp_114;
  wire sel_709;
  wire sel_710;
  wire sel_711;
  wire sel_712;
  wire sel_713;
  wire sel_714;
  wire sel_715;
  wire sel_716;
  wire sel_717;
  wire sel_718;
  wire sel_719;
  wire sel_720;
  wire s_120;
  wire sel_2_197;
  wire sel_721;
  wire sel_2_198;
  wire sel_722;
  wire sel_2_199;
  wire sel_723;
  wire sel_2_200;
  wire sel_724;
  wire sel_2_201;
  wire sel_725;
  wire sel_2_202;
  wire sel_726;
  wire sel_2_203;
  wire sel_727;
  wire sel_728;
  wire sel_729;
  reg  sel_2_204;
  reg  [11:0] cont_bits_42_2;  // boolean [12]
  wire signed [31:0] sel_730;  // int32
  wire signed [31:0] sel_731;  // int32
  wire signed [31:0] sel_732;  // int32
  wire signed [31:0] sel_733;  // int32
  wire signed [31:0] sel_734;  // int32
  wire signed [31:0] sel_735;  // int32
  wire signed [31:0] sel_736;  // int32
  wire signed [31:0] sel_737;  // int32
  wire signed [31:0] sel_738;  // int32
  wire signed [31:0] sel_739;  // int32
  wire signed [31:0] sel_740;  // int32
  wire signed [31:0] sel_741;  // int32
  wire signed [31:0] s_121;  // int32
  wire signed [31:0] sel_1_149;  // int32
  wire signed [31:0] sel_742;  // int32
  wire signed [31:0] sel_1_150;  // int32
  wire signed [31:0] sel_743;  // int32
  wire signed [31:0] sel_1_151;  // int32
  wire signed [31:0] sel_744;  // int32
  wire signed [31:0] sel_1_152;  // int32
  wire signed [31:0] sel_745;  // int32
  wire signed [31:0] sel_1_153;  // int32
  wire signed [31:0] sel_746;  // int32
  wire signed [31:0] sel_1_154;  // int32
  wire signed [31:0] sel_747;  // int32
  wire signed [31:0] sel_1_155;  // int32
  wire signed [31:0] sel_748;  // int32
  wire signed [31:0] sel_749;  // int32
  wire signed [31:0] sel_750;  // int32
  reg signed [31:0] sel_1_156;  // int32
  wire tmp_115;
  wire sel_751;
  wire sel_752;
  wire sel_753;
  wire sel_754;
  wire sel_755;
  wire sel_756;
  wire sel_757;
  wire sel_758;
  wire sel_759;
  wire sel_760;
  wire sel_761;
  wire sel_762;
  wire s_122;
  wire sel_2_205;
  wire sel_763;
  wire sel_2_206;
  wire sel_764;
  wire sel_2_207;
  wire sel_765;
  wire sel_2_208;
  wire sel_766;
  wire sel_2_209;
  wire sel_767;
  wire sel_2_210;
  wire sel_768;
  wire sel_2_211;
  wire sel_769;
  wire sel_770;
  wire sel_771;
  reg  sel_2_212;
  reg  [11:0] cont_bits_42_3;  // boolean [12]
  wire signed [31:0] sel_772;  // int32
  wire signed [31:0] sel_773;  // int32
  wire signed [31:0] sel_774;  // int32
  wire signed [31:0] sel_775;  // int32
  wire signed [31:0] sel_776;  // int32
  wire signed [31:0] sel_777;  // int32
  wire signed [31:0] sel_778;  // int32
  wire signed [31:0] sel_779;  // int32
  wire signed [31:0] sel_780;  // int32
  wire signed [31:0] sel_781;  // int32
  wire signed [31:0] sel_782;  // int32
  wire signed [31:0] sel_783;  // int32
  wire signed [31:0] s_123;  // int32
  wire signed [31:0] sel_1_157;  // int32
  wire signed [31:0] sel_784;  // int32
  wire signed [31:0] sel_1_158;  // int32
  wire signed [31:0] sel_785;  // int32
  wire signed [31:0] sel_1_159;  // int32
  wire signed [31:0] sel_786;  // int32
  wire signed [31:0] sel_1_160;  // int32
  wire signed [31:0] sel_787;  // int32
  wire signed [31:0] sel_1_161;  // int32
  wire signed [31:0] sel_788;  // int32
  wire signed [31:0] sel_1_162;  // int32
  wire signed [31:0] sel_789;  // int32
  wire signed [31:0] sel_1_163;  // int32
  wire signed [31:0] sel_790;  // int32
  wire signed [31:0] sel_791;  // int32
  wire signed [31:0] sel_792;  // int32
  reg signed [31:0] sel_1_164;  // int32
  wire tmp_116;
  wire sel_793;
  wire sel_794;
  wire sel_795;
  wire sel_796;
  wire sel_797;
  wire sel_798;
  wire sel_799;
  wire sel_800;
  wire sel_801;
  wire sel_802;
  wire sel_803;
  wire sel_804;
  wire s_124;
  wire sel_2_213;
  wire sel_805;
  wire sel_2_214;
  wire sel_806;
  wire sel_2_215;
  wire sel_807;
  wire sel_2_216;
  wire sel_808;
  wire sel_2_217;
  wire sel_809;
  wire sel_2_218;
  wire sel_810;
  wire sel_2_219;
  wire sel_811;
  wire sel_812;
  wire sel_813;
  reg  sel_2_220;
  reg  [11:0] cont_bits_42_4;  // boolean [12]
  wire signed [31:0] sel_814;  // int32
  wire signed [31:0] sel_815;  // int32
  wire signed [31:0] sel_816;  // int32
  wire signed [31:0] sel_817;  // int32
  wire signed [31:0] sel_818;  // int32
  wire signed [31:0] sel_819;  // int32
  wire signed [31:0] sel_820;  // int32
  wire signed [31:0] sel_821;  // int32
  wire signed [31:0] sel_822;  // int32
  wire signed [31:0] sel_823;  // int32
  wire signed [31:0] sel_824;  // int32
  wire signed [31:0] sel_825;  // int32
  wire signed [31:0] s_125;  // int32
  wire signed [31:0] sel_1_165;  // int32
  wire signed [31:0] sel_826;  // int32
  wire signed [31:0] sel_1_166;  // int32
  wire signed [31:0] sel_827;  // int32
  wire signed [31:0] sel_1_167;  // int32
  wire signed [31:0] sel_828;  // int32
  wire signed [31:0] sel_1_168;  // int32
  wire signed [31:0] sel_829;  // int32
  wire signed [31:0] sel_1_169;  // int32
  wire signed [31:0] sel_830;  // int32
  wire signed [31:0] sel_1_170;  // int32
  wire signed [31:0] sel_831;  // int32
  wire signed [31:0] sel_1_171;  // int32
  wire signed [31:0] sel_832;  // int32
  wire signed [31:0] sel_833;  // int32
  wire signed [31:0] sel_834;  // int32
  reg signed [31:0] sel_1_172;  // int32
  wire tmp_117;
  wire sel_835;
  wire sel_836;
  wire sel_837;
  wire sel_838;
  wire sel_839;
  wire sel_840;
  wire sel_841;
  wire sel_842;
  wire sel_843;
  wire sel_844;
  wire sel_845;
  wire sel_846;
  wire s_126;
  wire sel_2_221;
  wire sel_847;
  wire sel_2_222;
  wire sel_848;
  wire sel_2_223;
  wire sel_849;
  wire sel_2_224;
  wire sel_850;
  wire sel_2_225;
  wire sel_851;
  wire sel_2_226;
  wire sel_852;
  wire sel_2_227;
  wire sel_853;
  wire sel_854;
  wire sel_855;
  reg  sel_2_228;
  reg  [11:0] cont_bits_42_5;  // boolean [12]
  wire signed [31:0] sel_856;  // int32
  wire signed [31:0] sel_857;  // int32
  wire signed [31:0] sel_858;  // int32
  wire signed [31:0] sel_859;  // int32
  wire signed [31:0] sel_860;  // int32
  wire signed [31:0] sel_861;  // int32
  wire signed [31:0] sel_862;  // int32
  wire signed [31:0] sel_863;  // int32
  wire signed [31:0] sel_864;  // int32
  wire signed [31:0] sel_865;  // int32
  wire signed [31:0] sel_866;  // int32
  wire signed [31:0] sel_867;  // int32
  wire signed [31:0] s_127;  // int32
  wire signed [31:0] sel_1_173;  // int32
  wire signed [31:0] sel_868;  // int32
  wire signed [31:0] sel_1_174;  // int32
  wire signed [31:0] sel_869;  // int32
  wire signed [31:0] sel_1_175;  // int32
  wire signed [31:0] sel_870;  // int32
  wire signed [31:0] sel_1_176;  // int32
  wire signed [31:0] sel_871;  // int32
  wire signed [31:0] sel_1_177;  // int32
  wire signed [31:0] sel_872;  // int32
  wire signed [31:0] sel_1_178;  // int32
  wire signed [31:0] sel_873;  // int32
  wire signed [31:0] sel_1_179;  // int32
  wire signed [31:0] sel_874;  // int32
  wire signed [31:0] sel_875;  // int32
  wire signed [31:0] sel_876;  // int32
  reg signed [31:0] sel_1_180;  // int32
  wire tmp_118;
  wire sel_877;
  wire sel_878;
  wire sel_879;
  wire sel_880;
  wire sel_881;
  wire sel_882;
  wire sel_883;
  wire sel_884;
  wire sel_885;
  wire sel_886;
  wire sel_887;
  wire sel_888;
  wire s_128;
  wire sel_2_229;
  wire sel_889;
  wire sel_2_230;
  wire sel_890;
  wire sel_2_231;
  wire sel_891;
  wire sel_2_232;
  wire sel_892;
  wire sel_2_233;
  wire sel_893;
  wire sel_2_234;
  wire sel_894;
  wire sel_2_235;
  wire sel_895;
  wire sel_896;
  wire sel_897;
  reg  sel_2_236;
  reg  [11:0] cont_bits_42_6;  // boolean [12]
  wire signed [31:0] sel_898;  // int32
  wire signed [31:0] sel_899;  // int32
  wire signed [31:0] sel_900;  // int32
  wire signed [31:0] sel_901;  // int32
  wire signed [31:0] sel_902;  // int32
  wire signed [31:0] sel_903;  // int32
  wire signed [31:0] sel_904;  // int32
  wire signed [31:0] sel_905;  // int32
  wire signed [31:0] sel_906;  // int32
  wire signed [31:0] sel_907;  // int32
  wire signed [31:0] sel_908;  // int32
  wire signed [31:0] sel_909;  // int32
  wire signed [31:0] s_129;  // int32
  wire signed [31:0] sel_1_181;  // int32
  wire signed [31:0] sel_910;  // int32
  wire signed [31:0] sel_1_182;  // int32
  wire signed [31:0] sel_911;  // int32
  wire signed [31:0] sel_1_183;  // int32
  wire signed [31:0] sel_912;  // int32
  wire signed [31:0] sel_1_184;  // int32
  wire signed [31:0] sel_913;  // int32
  wire signed [31:0] sel_1_185;  // int32
  wire signed [31:0] sel_914;  // int32
  wire signed [31:0] sel_1_186;  // int32
  wire signed [31:0] sel_915;  // int32
  wire signed [31:0] sel_1_187;  // int32
  wire signed [31:0] sel_916;  // int32
  wire signed [31:0] sel_917;  // int32
  wire signed [31:0] sel_918;  // int32
  reg signed [31:0] sel_1_188;  // int32
  wire tmp_119;
  wire sel_919;
  wire sel_920;
  wire sel_921;
  wire sel_922;
  wire sel_923;
  wire sel_924;
  wire sel_925;
  wire sel_926;
  wire sel_927;
  wire sel_928;
  wire sel_929;
  wire sel_930;
  wire s_130;
  wire sel_2_237;
  wire sel_931;
  wire sel_2_238;
  wire sel_932;
  wire sel_2_239;
  wire sel_933;
  wire sel_2_240;
  wire sel_934;
  wire sel_2_241;
  wire sel_935;
  wire sel_2_242;
  wire sel_936;
  wire sel_2_243;
  wire sel_937;
  wire sel_938;
  wire sel_939;
  reg  sel_2_244;
  reg  [11:0] cont_bits_42_7;  // boolean [12]
  wire signed [31:0] sel_940;  // int32
  wire signed [31:0] sel_941;  // int32
  wire signed [31:0] sel_942;  // int32
  wire signed [31:0] sel_943;  // int32
  wire signed [31:0] sel_944;  // int32
  wire signed [31:0] sel_945;  // int32
  wire signed [31:0] sel_946;  // int32
  wire signed [31:0] sel_947;  // int32
  wire signed [31:0] sel_948;  // int32
  wire signed [31:0] sel_949;  // int32
  wire signed [31:0] sel_950;  // int32
  wire signed [31:0] sel_951;  // int32
  wire signed [31:0] s_131;  // int32
  wire signed [31:0] sel_1_189;  // int32
  wire signed [31:0] sel_952;  // int32
  wire signed [31:0] sel_1_190;  // int32
  wire signed [31:0] sel_953;  // int32
  wire signed [31:0] sel_1_191;  // int32
  wire signed [31:0] sel_954;  // int32
  wire signed [31:0] sel_1_192;  // int32
  wire signed [31:0] sel_955;  // int32
  wire signed [31:0] sel_1_193;  // int32
  wire signed [31:0] sel_956;  // int32
  wire signed [31:0] sel_1_194;  // int32
  wire signed [31:0] sel_957;  // int32
  wire signed [31:0] sel_1_195;  // int32
  wire signed [31:0] sel_958;  // int32
  wire signed [31:0] sel_959;  // int32
  wire signed [31:0] sel_960;  // int32
  reg signed [31:0] sel_1_196;  // int32
  wire tmp_120;
  wire sel_961;
  wire sel_962;
  wire sel_963;
  wire sel_964;
  wire sel_965;
  wire sel_966;
  wire sel_967;
  wire sel_968;
  wire sel_969;
  wire sel_970;
  wire sel_971;
  wire sel_972;
  wire s_132;
  wire sel_2_245;
  wire sel_973;
  wire sel_2_246;
  wire sel_974;
  wire sel_2_247;
  wire sel_975;
  wire sel_2_248;
  wire sel_976;
  wire sel_2_249;
  wire sel_977;
  wire sel_2_250;
  wire sel_978;
  wire sel_2_251;
  wire sel_979;
  wire sel_980;
  wire sel_981;
  reg  sel_2_252;
  reg  [11:0] cont_bits_42_8;  // boolean [12]
  wire signed [31:0] sel_982;  // int32
  wire signed [31:0] sel_983;  // int32
  wire signed [31:0] sel_984;  // int32
  wire signed [31:0] sel_985;  // int32
  wire signed [31:0] sel_986;  // int32
  wire signed [31:0] sel_987;  // int32
  wire signed [31:0] sel_988;  // int32
  wire signed [31:0] sel_989;  // int32
  wire signed [31:0] sel_990;  // int32
  wire signed [31:0] sel_991;  // int32
  wire signed [31:0] sel_992;  // int32
  wire signed [31:0] sel_993;  // int32
  wire signed [31:0] s_133;  // int32
  wire signed [31:0] sel_1_197;  // int32
  wire signed [31:0] sel_994;  // int32
  wire signed [31:0] sel_1_198;  // int32
  wire signed [31:0] sel_995;  // int32
  wire signed [31:0] sel_1_199;  // int32
  wire signed [31:0] sel_996;  // int32
  wire signed [31:0] sel_1_200;  // int32
  wire signed [31:0] sel_997;  // int32
  wire signed [31:0] sel_1_201;  // int32
  wire signed [31:0] sel_998;  // int32
  wire signed [31:0] sel_1_202;  // int32
  wire signed [31:0] sel_999;  // int32
  wire signed [31:0] sel_1_203;  // int32
  wire signed [31:0] sel_1000;  // int32
  wire signed [31:0] sel_1001;  // int32
  wire signed [31:0] sel_1002;  // int32
  reg signed [31:0] sel_1_204;  // int32
  wire tmp_121;
  wire sel_1003;
  wire sel_1004;
  wire sel_1005;
  wire sel_1006;
  wire sel_1007;
  wire sel_1008;
  wire sel_1009;
  wire sel_1010;
  wire sel_1011;
  wire sel_1012;
  wire sel_1013;
  wire sel_1014;
  wire s_134;
  wire sel_2_253;
  wire sel_1015;
  wire sel_2_254;
  wire sel_1016;
  wire sel_2_255;
  wire sel_1017;
  wire sel_2_256;
  wire sel_1018;
  wire sel_2_257;
  wire sel_1019;
  wire sel_2_258;
  wire sel_1020;
  wire sel_2_259;
  wire sel_1021;
  wire sel_1022;
  wire sel_1023;
  reg  sel_2_260;
  reg  [11:0] cont_bits_42_9;  // boolean [12]
  wire signed [31:0] sel_1024;  // int32
  wire signed [31:0] sel_1025;  // int32
  wire signed [31:0] sel_1026;  // int32
  wire signed [31:0] sel_1027;  // int32
  wire signed [31:0] sel_1028;  // int32
  wire signed [31:0] sel_1029;  // int32
  wire signed [31:0] sel_1030;  // int32
  wire signed [31:0] sel_1031;  // int32
  wire signed [31:0] sel_1032;  // int32
  wire signed [31:0] sel_1033;  // int32
  wire signed [31:0] sel_1034;  // int32
  wire signed [31:0] sel_1035;  // int32
  wire signed [31:0] s_135;  // int32
  wire signed [31:0] sel_1_205;  // int32
  wire signed [31:0] sel_1036;  // int32
  wire signed [31:0] sel_1_206;  // int32
  wire signed [31:0] sel_1037;  // int32
  wire signed [31:0] sel_1_207;  // int32
  wire signed [31:0] sel_1038;  // int32
  wire signed [31:0] sel_1_208;  // int32
  wire signed [31:0] sel_1039;  // int32
  wire signed [31:0] sel_1_209;  // int32
  wire signed [31:0] sel_1040;  // int32
  wire signed [31:0] sel_1_210;  // int32
  wire signed [31:0] sel_1041;  // int32
  wire signed [31:0] sel_1_211;  // int32
  wire signed [31:0] sel_1042;  // int32
  wire signed [31:0] sel_1043;  // int32
  wire signed [31:0] sel_1044;  // int32
  reg signed [31:0] sel_1_212;  // int32
  wire tmp_122;
  wire sel_1045;
  wire sel_1046;
  wire sel_1047;
  wire sel_1048;
  wire sel_1049;
  wire sel_1050;
  wire sel_1051;
  wire sel_1052;
  wire sel_1053;
  wire sel_1054;
  wire sel_1055;
  wire sel_1056;
  wire s_136;
  wire sel_2_261;
  wire sel_1057;
  wire sel_2_262;
  wire sel_1058;
  wire sel_2_263;
  wire sel_1059;
  wire sel_2_264;
  wire sel_1060;
  wire sel_2_265;
  wire sel_1061;
  wire sel_2_266;
  wire sel_1062;
  wire sel_2_267;
  wire sel_1063;
  wire sel_1064;
  wire sel_1065;
  reg  sel_2_268;
  reg  [11:0] cont_bits_42_10;  // boolean [12]
  wire signed [31:0] sel_1066;  // int32
  wire signed [31:0] sel_1067;  // int32
  wire signed [31:0] sel_1068;  // int32
  wire signed [31:0] sel_1069;  // int32
  wire signed [31:0] sel_1070;  // int32
  wire signed [31:0] sel_1071;  // int32
  wire signed [31:0] sel_1072;  // int32
  wire signed [31:0] sel_1073;  // int32
  wire signed [31:0] sel_1074;  // int32
  wire signed [31:0] sel_1075;  // int32
  wire signed [31:0] sel_1076;  // int32
  wire signed [31:0] sel_1077;  // int32
  wire signed [31:0] s_137;  // int32
  wire signed [31:0] sel_1_213;  // int32
  wire signed [31:0] sel_1078;  // int32
  wire signed [31:0] sel_1_214;  // int32
  wire signed [31:0] sel_1079;  // int32
  wire signed [31:0] sel_1_215;  // int32
  wire signed [31:0] sel_1080;  // int32
  wire signed [31:0] sel_1_216;  // int32
  wire signed [31:0] sel_1081;  // int32
  wire signed [31:0] sel_1_217;  // int32
  wire signed [31:0] sel_1082;  // int32
  wire signed [31:0] sel_1_218;  // int32
  wire signed [31:0] sel_1083;  // int32
  wire signed [31:0] sel_1_219;  // int32
  wire signed [31:0] sel_1084;  // int32
  wire signed [31:0] sel_1085;  // int32
  wire signed [31:0] sel_1086;  // int32
  reg signed [31:0] sel_1_220;  // int32
  wire tmp_123;
  wire sel_1087;
  wire sel_1088;
  wire sel_1089;
  wire sel_1090;
  wire sel_1091;
  wire sel_1092;
  wire sel_1093;
  wire sel_1094;
  wire sel_1095;
  wire sel_1096;
  wire sel_1097;
  wire sel_1098;
  wire s_138;
  wire sel_2_269;
  wire sel_1099;
  wire sel_2_270;
  wire sel_1100;
  wire sel_2_271;
  wire sel_1101;
  wire sel_2_272;
  wire sel_1102;
  wire sel_2_273;
  wire sel_1103;
  wire sel_2_274;
  wire sel_1104;
  wire sel_2_275;
  wire sel_1105;
  wire sel_1106;
  wire sel_1107;
  reg  sel_2_276;
  reg  [11:0] cont_bits_42_11;  // boolean [12]
  wire signed [31:0] sel_1108;  // int32
  wire signed [31:0] sel_1109;  // int32
  wire signed [31:0] sel_1110;  // int32
  wire signed [31:0] sel_1111;  // int32
  wire signed [31:0] sel_1112;  // int32
  wire signed [31:0] sel_1113;  // int32
  wire signed [31:0] sel_1114;  // int32
  wire signed [31:0] sel_1115;  // int32
  wire signed [31:0] sel_1116;  // int32
  wire signed [31:0] sel_1117;  // int32
  wire signed [31:0] sel_1118;  // int32
  wire signed [31:0] sel_1119;  // int32
  wire signed [31:0] s_139;  // int32
  wire signed [31:0] sel_1_221;  // int32
  wire signed [31:0] sel_1120;  // int32
  wire signed [31:0] sel_1_222;  // int32
  wire signed [31:0] sel_1121;  // int32
  wire signed [31:0] sel_1_223;  // int32
  wire signed [31:0] sel_1122;  // int32
  wire signed [31:0] sel_1_224;  // int32
  wire signed [31:0] sel_1123;  // int32
  wire signed [31:0] sel_1_225;  // int32
  wire signed [31:0] sel_1124;  // int32
  wire signed [31:0] sel_1_226;  // int32
  wire signed [31:0] sel_1125;  // int32
  wire signed [31:0] sel_1_227;  // int32
  wire signed [31:0] sel_1126;  // int32
  wire signed [31:0] sel_1127;  // int32
  wire signed [31:0] sel_1128;  // int32
  reg signed [31:0] sel_1_228;  // int32
  wire tmp_124;
  wire sel_1129;
  wire sel_1130;
  wire sel_1131;
  wire sel_1132;
  wire sel_1133;
  wire sel_1134;
  wire sel_1135;
  wire sel_1136;
  wire sel_1137;
  wire sel_1138;
  wire sel_1139;
  wire sel_1140;
  wire s_140;
  wire sel_2_277;
  wire sel_1141;
  wire sel_2_278;
  wire sel_1142;
  wire sel_2_279;
  wire sel_1143;
  wire sel_2_280;
  wire sel_1144;
  wire sel_2_281;
  wire sel_1145;
  wire sel_2_282;
  wire sel_1146;
  wire sel_2_283;
  wire sel_1147;
  wire sel_1148;
  wire sel_1149;
  reg  sel_2_284;
  reg  [11:0] cont_bits_42_12;  // boolean [12]
  wire signed [31:0] sel_1150;  // int32
  wire signed [31:0] sel_1151;  // int32
  wire signed [31:0] sel_1152;  // int32
  wire signed [31:0] sel_1153;  // int32
  wire signed [31:0] sel_1154;  // int32
  wire signed [31:0] sel_1155;  // int32
  wire signed [31:0] sel_1156;  // int32
  wire signed [31:0] sel_1157;  // int32
  wire signed [31:0] sel_1158;  // int32
  wire signed [31:0] sel_1159;  // int32
  wire signed [31:0] sel_1160;  // int32
  wire signed [31:0] sel_1161;  // int32
  wire signed [31:0] s_141;  // int32
  wire signed [31:0] sel_1_229;  // int32
  wire signed [31:0] sel_1162;  // int32
  wire signed [31:0] sel_1_230;  // int32
  wire signed [31:0] sel_1163;  // int32
  wire signed [31:0] sel_1_231;  // int32
  wire signed [31:0] sel_1164;  // int32
  wire signed [31:0] sel_1_232;  // int32
  wire signed [31:0] sel_1165;  // int32
  wire signed [31:0] sel_1_233;  // int32
  wire signed [31:0] sel_1166;  // int32
  wire signed [31:0] sel_1_234;  // int32
  wire signed [31:0] sel_1167;  // int32
  wire signed [31:0] sel_1_235;  // int32
  wire signed [31:0] sel_1168;  // int32
  wire signed [31:0] sel_1169;  // int32
  wire signed [31:0] sel_1170;  // int32
  reg signed [31:0] sel_1_236;  // int32
  wire cont_bits_42_13;
  wire sel_1_237;
  wire [11:0] cont_bits_32;  // boolean [12]
  reg [15:0] r_v32;  // uint16
  wire [15:0] tmp_125;  // uint16
  wire [15:0] tmp_126;  // uint16
  wire [15:0] tmp_127;  // uint16
  wire [15:0] tmp_128;  // uint16
  wire [15:0] tmp_129;  // uint16
  wire [15:0] tmp_130;  // uint16
  wire [15:0] tmp_131;  // uint16
  wire [15:0] tmp_132;  // uint16
  reg [15:0] tmp_133;  // uint16
  wire functionOutput_0_2;
  wire functionOutput_1_2;
  wire functionOutput_2_2;
  wire functionOutput_3_2;
  wire functionOutput_4_2;
  wire functionOutput_5_2;
  wire functionOutput_6_2;
  wire functionOutput_7_2;
  wire functionOutput_8_2;
  wire functionOutput_9_2;
  wire functionOutput_10_2;
  wire functionOutput_11_2;
  wire [11:0] functionOutput_13;  // boolean [12]
  wire signed [31:0] sel_1171;  // int32
  wire signed [31:0] sel_1172;  // int32
  wire signed [31:0] sel_1173;  // int32
  wire signed [31:0] sel_1174;  // int32
  wire signed [31:0] sel_1175;  // int32
  wire signed [31:0] sel_1176;  // int32
  wire signed [31:0] sel_1177;  // int32
  wire signed [31:0] sel_1178;  // int32
  wire signed [31:0] sel_1179;  // int32
  wire signed [31:0] sel_1180;  // int32
  wire signed [31:0] sel_1181;  // int32
  wire signed [31:0] sel_1182;  // int32
  wire signed [31:0] s_142;  // int32
  wire signed [31:0] sel_1_238;  // int32
  wire signed [31:0] sel_1183;  // int32
  wire signed [31:0] sel_1_239;  // int32
  wire signed [31:0] sel_1184;  // int32
  wire signed [31:0] sel_1_240;  // int32
  wire signed [31:0] sel_1185;  // int32
  wire signed [31:0] sel_1_241;  // int32
  wire signed [31:0] sel_1186;  // int32
  wire signed [31:0] sel_1_242;  // int32
  wire signed [31:0] sel_1187;  // int32
  wire signed [31:0] sel_1_243;  // int32
  wire signed [31:0] sel_1188;  // int32
  wire signed [31:0] sel_1189;  // int32
  wire signed [31:0] sel_1190;  // int32
  reg signed [31:0] sel_1_244;  // int32
  wire tmp_134;
  wire sel_1191;
  wire sel_1192;
  wire sel_1193;
  wire sel_1194;
  wire sel_1195;
  wire sel_1196;
  wire sel_1197;
  wire sel_1198;
  wire sel_1199;
  wire sel_1200;
  wire sel_1201;
  wire sel_1202;
  wire s_143;
  wire sel_2_285;
  wire sel_1203;
  wire sel_2_286;
  wire sel_1204;
  wire sel_2_287;
  wire sel_1205;
  wire sel_2_288;
  wire sel_1206;
  wire sel_2_289;
  wire sel_1207;
  wire sel_2_290;
  wire sel_1208;
  wire sel_1209;
  wire sel_1210;
  reg  sel_2_291;
  reg  [11:0] cont_bits_32_1;  // boolean [12]
  wire signed [31:0] sel_1211;  // int32
  wire signed [31:0] sel_1212;  // int32
  wire signed [31:0] sel_1213;  // int32
  wire signed [31:0] sel_1214;  // int32
  wire signed [31:0] sel_1215;  // int32
  wire signed [31:0] sel_1216;  // int32
  wire signed [31:0] sel_1217;  // int32
  wire signed [31:0] sel_1218;  // int32
  wire signed [31:0] sel_1219;  // int32
  wire signed [31:0] sel_1220;  // int32
  wire signed [31:0] sel_1221;  // int32
  wire signed [31:0] sel_1222;  // int32
  wire signed [31:0] s_144;  // int32
  wire signed [31:0] sel_1_245;  // int32
  wire signed [31:0] sel_1223;  // int32
  wire signed [31:0] sel_1_246;  // int32
  wire signed [31:0] sel_1224;  // int32
  wire signed [31:0] sel_1_247;  // int32
  wire signed [31:0] sel_1225;  // int32
  wire signed [31:0] sel_1_248;  // int32
  wire signed [31:0] sel_1226;  // int32
  wire signed [31:0] sel_1_249;  // int32
  wire signed [31:0] sel_1227;  // int32
  wire signed [31:0] sel_1_250;  // int32
  wire signed [31:0] sel_1228;  // int32
  wire signed [31:0] sel_1229;  // int32
  wire signed [31:0] sel_1230;  // int32
  reg signed [31:0] sel_1_251;  // int32
  wire tmp_135;
  wire sel_1231;
  wire sel_1232;
  wire sel_1233;
  wire sel_1234;
  wire sel_1235;
  wire sel_1236;
  wire sel_1237;
  wire sel_1238;
  wire sel_1239;
  wire sel_1240;
  wire sel_1241;
  wire sel_1242;
  wire s_145;
  wire sel_2_292;
  wire sel_1243;
  wire sel_2_293;
  wire sel_1244;
  wire sel_2_294;
  wire sel_1245;
  wire sel_2_295;
  wire sel_1246;
  wire sel_2_296;
  wire sel_1247;
  wire sel_2_297;
  wire sel_1248;
  wire sel_1249;
  wire sel_1250;
  reg  sel_2_298;
  reg  [11:0] cont_bits_32_2;  // boolean [12]
  wire signed [31:0] sel_1251;  // int32
  wire signed [31:0] sel_1252;  // int32
  wire signed [31:0] sel_1253;  // int32
  wire signed [31:0] sel_1254;  // int32
  wire signed [31:0] sel_1255;  // int32
  wire signed [31:0] sel_1256;  // int32
  wire signed [31:0] sel_1257;  // int32
  wire signed [31:0] sel_1258;  // int32
  wire signed [31:0] sel_1259;  // int32
  wire signed [31:0] sel_1260;  // int32
  wire signed [31:0] sel_1261;  // int32
  wire signed [31:0] sel_1262;  // int32
  wire signed [31:0] s_146;  // int32
  wire signed [31:0] sel_1_252;  // int32
  wire signed [31:0] sel_1263;  // int32
  wire signed [31:0] sel_1_253;  // int32
  wire signed [31:0] sel_1264;  // int32
  wire signed [31:0] sel_1_254;  // int32
  wire signed [31:0] sel_1265;  // int32
  wire signed [31:0] sel_1_255;  // int32
  wire signed [31:0] sel_1266;  // int32
  wire signed [31:0] sel_1_256;  // int32
  wire signed [31:0] sel_1267;  // int32
  wire signed [31:0] sel_1_257;  // int32
  wire signed [31:0] sel_1268;  // int32
  wire signed [31:0] sel_1269;  // int32
  wire signed [31:0] sel_1270;  // int32
  reg signed [31:0] sel_1_258;  // int32
  wire tmp_136;
  wire sel_1271;
  wire sel_1272;
  wire sel_1273;
  wire sel_1274;
  wire sel_1275;
  wire sel_1276;
  wire sel_1277;
  wire sel_1278;
  wire sel_1279;
  wire sel_1280;
  wire sel_1281;
  wire sel_1282;
  wire s_147;
  wire sel_2_299;
  wire sel_1283;
  wire sel_2_300;
  wire sel_1284;
  wire sel_2_301;
  wire sel_1285;
  wire sel_2_302;
  wire sel_1286;
  wire sel_2_303;
  wire sel_1287;
  wire sel_2_304;
  wire sel_1288;
  wire sel_1289;
  wire sel_1290;
  reg  sel_2_305;
  reg  [11:0] cont_bits_32_3;  // boolean [12]
  wire signed [31:0] sel_1291;  // int32
  wire signed [31:0] sel_1292;  // int32
  wire signed [31:0] sel_1293;  // int32
  wire signed [31:0] sel_1294;  // int32
  wire signed [31:0] sel_1295;  // int32
  wire signed [31:0] sel_1296;  // int32
  wire signed [31:0] sel_1297;  // int32
  wire signed [31:0] sel_1298;  // int32
  wire signed [31:0] sel_1299;  // int32
  wire signed [31:0] sel_1300;  // int32
  wire signed [31:0] sel_1301;  // int32
  wire signed [31:0] sel_1302;  // int32
  wire signed [31:0] s_148;  // int32
  wire signed [31:0] sel_1_259;  // int32
  wire signed [31:0] sel_1303;  // int32
  wire signed [31:0] sel_1_260;  // int32
  wire signed [31:0] sel_1304;  // int32
  wire signed [31:0] sel_1_261;  // int32
  wire signed [31:0] sel_1305;  // int32
  wire signed [31:0] sel_1_262;  // int32
  wire signed [31:0] sel_1306;  // int32
  wire signed [31:0] sel_1_263;  // int32
  wire signed [31:0] sel_1307;  // int32
  wire signed [31:0] sel_1_264;  // int32
  wire signed [31:0] sel_1308;  // int32
  wire signed [31:0] sel_1309;  // int32
  wire signed [31:0] sel_1310;  // int32
  reg signed [31:0] sel_1_265;  // int32
  wire tmp_137;
  wire sel_1311;
  wire sel_1312;
  wire sel_1313;
  wire sel_1314;
  wire sel_1315;
  wire sel_1316;
  wire sel_1317;
  wire sel_1318;
  wire sel_1319;
  wire sel_1320;
  wire sel_1321;
  wire sel_1322;
  wire s_149;
  wire sel_2_306;
  wire sel_1323;
  wire sel_2_307;
  wire sel_1324;
  wire sel_2_308;
  wire sel_1325;
  wire sel_2_309;
  wire sel_1326;
  wire sel_2_310;
  wire sel_1327;
  wire sel_2_311;
  wire sel_1328;
  wire sel_1329;
  wire sel_1330;
  reg  sel_2_312;
  reg  [11:0] cont_bits_32_4;  // boolean [12]
  wire signed [31:0] sel_1331;  // int32
  wire signed [31:0] sel_1332;  // int32
  wire signed [31:0] sel_1333;  // int32
  wire signed [31:0] sel_1334;  // int32
  wire signed [31:0] sel_1335;  // int32
  wire signed [31:0] sel_1336;  // int32
  wire signed [31:0] sel_1337;  // int32
  wire signed [31:0] sel_1338;  // int32
  wire signed [31:0] sel_1339;  // int32
  wire signed [31:0] sel_1340;  // int32
  wire signed [31:0] sel_1341;  // int32
  wire signed [31:0] sel_1342;  // int32
  wire signed [31:0] s_150;  // int32
  wire signed [31:0] sel_1_266;  // int32
  wire signed [31:0] sel_1343;  // int32
  wire signed [31:0] sel_1_267;  // int32
  wire signed [31:0] sel_1344;  // int32
  wire signed [31:0] sel_1_268;  // int32
  wire signed [31:0] sel_1345;  // int32
  wire signed [31:0] sel_1_269;  // int32
  wire signed [31:0] sel_1346;  // int32
  wire signed [31:0] sel_1_270;  // int32
  wire signed [31:0] sel_1347;  // int32
  wire signed [31:0] sel_1_271;  // int32
  wire signed [31:0] sel_1348;  // int32
  wire signed [31:0] sel_1349;  // int32
  wire signed [31:0] sel_1350;  // int32
  reg signed [31:0] sel_1_272;  // int32
  wire tmp_138;
  wire sel_1351;
  wire sel_1352;
  wire sel_1353;
  wire sel_1354;
  wire sel_1355;
  wire sel_1356;
  wire sel_1357;
  wire sel_1358;
  wire sel_1359;
  wire sel_1360;
  wire sel_1361;
  wire sel_1362;
  wire s_151;
  wire sel_2_313;
  wire sel_1363;
  wire sel_2_314;
  wire sel_1364;
  wire sel_2_315;
  wire sel_1365;
  wire sel_2_316;
  wire sel_1366;
  wire sel_2_317;
  wire sel_1367;
  wire sel_2_318;
  wire sel_1368;
  wire sel_1369;
  wire sel_1370;
  reg  sel_2_319;
  reg  [11:0] cont_bits_32_5;  // boolean [12]
  wire signed [31:0] sel_1371;  // int32
  wire signed [31:0] sel_1372;  // int32
  wire signed [31:0] sel_1373;  // int32
  wire signed [31:0] sel_1374;  // int32
  wire signed [31:0] sel_1375;  // int32
  wire signed [31:0] sel_1376;  // int32
  wire signed [31:0] sel_1377;  // int32
  wire signed [31:0] sel_1378;  // int32
  wire signed [31:0] sel_1379;  // int32
  wire signed [31:0] sel_1380;  // int32
  wire signed [31:0] sel_1381;  // int32
  wire signed [31:0] sel_1382;  // int32
  wire signed [31:0] s_152;  // int32
  wire signed [31:0] sel_1_273;  // int32
  wire signed [31:0] sel_1383;  // int32
  wire signed [31:0] sel_1_274;  // int32
  wire signed [31:0] sel_1384;  // int32
  wire signed [31:0] sel_1_275;  // int32
  wire signed [31:0] sel_1385;  // int32
  wire signed [31:0] sel_1_276;  // int32
  wire signed [31:0] sel_1386;  // int32
  wire signed [31:0] sel_1_277;  // int32
  wire signed [31:0] sel_1387;  // int32
  wire signed [31:0] sel_1_278;  // int32
  wire signed [31:0] sel_1388;  // int32
  wire signed [31:0] sel_1389;  // int32
  wire signed [31:0] sel_1390;  // int32
  reg signed [31:0] sel_1_279;  // int32
  wire tmp_139;
  wire sel_1391;
  wire sel_1392;
  wire sel_1393;
  wire sel_1394;
  wire sel_1395;
  wire sel_1396;
  wire sel_1397;
  wire sel_1398;
  wire sel_1399;
  wire sel_1400;
  wire sel_1401;
  wire sel_1402;
  wire s_153;
  wire sel_2_320;
  wire sel_1403;
  wire sel_2_321;
  wire sel_1404;
  wire sel_2_322;
  wire sel_1405;
  wire sel_2_323;
  wire sel_1406;
  wire sel_2_324;
  wire sel_1407;
  wire sel_2_325;
  wire sel_1408;
  wire sel_1409;
  wire sel_1410;
  reg  sel_2_326;
  reg  [11:0] cont_bits_32_6;  // boolean [12]
  wire signed [31:0] sel_1411;  // int32
  wire signed [31:0] sel_1412;  // int32
  wire signed [31:0] sel_1413;  // int32
  wire signed [31:0] sel_1414;  // int32
  wire signed [31:0] sel_1415;  // int32
  wire signed [31:0] sel_1416;  // int32
  wire signed [31:0] sel_1417;  // int32
  wire signed [31:0] sel_1418;  // int32
  wire signed [31:0] sel_1419;  // int32
  wire signed [31:0] sel_1420;  // int32
  wire signed [31:0] sel_1421;  // int32
  wire signed [31:0] sel_1422;  // int32
  wire signed [31:0] s_154;  // int32
  wire signed [31:0] sel_1_280;  // int32
  wire signed [31:0] sel_1423;  // int32
  wire signed [31:0] sel_1_281;  // int32
  wire signed [31:0] sel_1424;  // int32
  wire signed [31:0] sel_1_282;  // int32
  wire signed [31:0] sel_1425;  // int32
  wire signed [31:0] sel_1_283;  // int32
  wire signed [31:0] sel_1426;  // int32
  wire signed [31:0] sel_1_284;  // int32
  wire signed [31:0] sel_1427;  // int32
  wire signed [31:0] sel_1_285;  // int32
  wire signed [31:0] sel_1428;  // int32
  wire signed [31:0] sel_1429;  // int32
  wire signed [31:0] sel_1430;  // int32
  reg signed [31:0] sel_1_286;  // int32
  wire tmp_140;
  wire sel_1431;
  wire sel_1432;
  wire sel_1433;
  wire sel_1434;
  wire sel_1435;
  wire sel_1436;
  wire sel_1437;
  wire sel_1438;
  wire sel_1439;
  wire sel_1440;
  wire sel_1441;
  wire sel_1442;
  wire s_155;
  wire sel_2_327;
  wire sel_1443;
  wire sel_2_328;
  wire sel_1444;
  wire sel_2_329;
  wire sel_1445;
  wire sel_2_330;
  wire sel_1446;
  wire sel_2_331;
  wire sel_1447;
  wire sel_2_332;
  wire sel_1448;
  wire sel_1449;
  wire sel_1450;
  reg  sel_2_333;
  reg  [11:0] cont_bits_32_7;  // boolean [12]
  wire signed [31:0] sel_1451;  // int32
  wire signed [31:0] sel_1452;  // int32
  wire signed [31:0] sel_1453;  // int32
  wire signed [31:0] sel_1454;  // int32
  wire signed [31:0] sel_1455;  // int32
  wire signed [31:0] sel_1456;  // int32
  wire signed [31:0] sel_1457;  // int32
  wire signed [31:0] sel_1458;  // int32
  wire signed [31:0] sel_1459;  // int32
  wire signed [31:0] sel_1460;  // int32
  wire signed [31:0] sel_1461;  // int32
  wire signed [31:0] sel_1462;  // int32
  wire signed [31:0] s_156;  // int32
  wire signed [31:0] sel_1_287;  // int32
  wire signed [31:0] sel_1463;  // int32
  wire signed [31:0] sel_1_288;  // int32
  wire signed [31:0] sel_1464;  // int32
  wire signed [31:0] sel_1_289;  // int32
  wire signed [31:0] sel_1465;  // int32
  wire signed [31:0] sel_1_290;  // int32
  wire signed [31:0] sel_1466;  // int32
  wire signed [31:0] sel_1_291;  // int32
  wire signed [31:0] sel_1467;  // int32
  wire signed [31:0] sel_1_292;  // int32
  wire signed [31:0] sel_1468;  // int32
  wire signed [31:0] sel_1469;  // int32
  wire signed [31:0] sel_1470;  // int32
  reg signed [31:0] sel_1_293;  // int32
  wire tmp_141;
  wire sel_1471;
  wire sel_1472;
  wire sel_1473;
  wire sel_1474;
  wire sel_1475;
  wire sel_1476;
  wire sel_1477;
  wire sel_1478;
  wire sel_1479;
  wire sel_1480;
  wire sel_1481;
  wire sel_1482;
  wire s_157;
  wire sel_2_334;
  wire sel_1483;
  wire sel_2_335;
  wire sel_1484;
  wire sel_2_336;
  wire sel_1485;
  wire sel_2_337;
  wire sel_1486;
  wire sel_2_338;
  wire sel_1487;
  wire sel_2_339;
  wire sel_1488;
  wire sel_1489;
  wire sel_1490;
  reg  sel_2_340;
  reg  [11:0] cont_bits_32_8;  // boolean [12]
  wire signed [31:0] sel_1491;  // int32
  wire signed [31:0] sel_1492;  // int32
  wire signed [31:0] sel_1493;  // int32
  wire signed [31:0] sel_1494;  // int32
  wire signed [31:0] sel_1495;  // int32
  wire signed [31:0] sel_1496;  // int32
  wire signed [31:0] sel_1497;  // int32
  wire signed [31:0] sel_1498;  // int32
  wire signed [31:0] sel_1499;  // int32
  wire signed [31:0] sel_1500;  // int32
  wire signed [31:0] sel_1501;  // int32
  wire signed [31:0] sel_1502;  // int32
  wire signed [31:0] s_158;  // int32
  wire signed [31:0] sel_1_294;  // int32
  wire signed [31:0] sel_1503;  // int32
  wire signed [31:0] sel_1_295;  // int32
  wire signed [31:0] sel_1504;  // int32
  wire signed [31:0] sel_1_296;  // int32
  wire signed [31:0] sel_1505;  // int32
  wire signed [31:0] sel_1_297;  // int32
  wire signed [31:0] sel_1506;  // int32
  wire signed [31:0] sel_1_298;  // int32
  wire signed [31:0] sel_1507;  // int32
  wire signed [31:0] sel_1_299;  // int32
  wire signed [31:0] sel_1508;  // int32
  wire signed [31:0] sel_1509;  // int32
  wire signed [31:0] sel_1510;  // int32
  reg signed [31:0] sel_1_300;  // int32
  wire tmp_142;
  wire sel_1511;
  wire sel_1512;
  wire sel_1513;
  wire sel_1514;
  wire sel_1515;
  wire sel_1516;
  wire sel_1517;
  wire sel_1518;
  wire sel_1519;
  wire sel_1520;
  wire sel_1521;
  wire sel_1522;
  wire s_159;
  wire sel_2_341;
  wire sel_1523;
  wire sel_2_342;
  wire sel_1524;
  wire sel_2_343;
  wire sel_1525;
  wire sel_2_344;
  wire sel_1526;
  wire sel_2_345;
  wire sel_1527;
  wire sel_2_346;
  wire sel_1528;
  wire sel_1529;
  wire sel_1530;
  reg  sel_2_347;
  reg  [11:0] cont_bits_32_9;  // boolean [12]
  wire signed [31:0] sel_1531;  // int32
  wire signed [31:0] sel_1532;  // int32
  wire signed [31:0] sel_1533;  // int32
  wire signed [31:0] sel_1534;  // int32
  wire signed [31:0] sel_1535;  // int32
  wire signed [31:0] sel_1536;  // int32
  wire signed [31:0] sel_1537;  // int32
  wire signed [31:0] sel_1538;  // int32
  wire signed [31:0] sel_1539;  // int32
  wire signed [31:0] sel_1540;  // int32
  wire signed [31:0] sel_1541;  // int32
  wire signed [31:0] sel_1542;  // int32
  wire signed [31:0] s_160;  // int32
  wire signed [31:0] sel_1_301;  // int32
  wire signed [31:0] sel_1543;  // int32
  wire signed [31:0] sel_1_302;  // int32
  wire signed [31:0] sel_1544;  // int32
  wire signed [31:0] sel_1_303;  // int32
  wire signed [31:0] sel_1545;  // int32
  wire signed [31:0] sel_1_304;  // int32
  wire signed [31:0] sel_1546;  // int32
  wire signed [31:0] sel_1_305;  // int32
  wire signed [31:0] sel_1547;  // int32
  wire signed [31:0] sel_1_306;  // int32
  wire signed [31:0] sel_1548;  // int32
  wire signed [31:0] sel_1549;  // int32
  wire signed [31:0] sel_1550;  // int32
  reg signed [31:0] sel_1_307;  // int32
  wire tmp_143;
  wire sel_1551;
  wire sel_1552;
  wire sel_1553;
  wire sel_1554;
  wire sel_1555;
  wire sel_1556;
  wire sel_1557;
  wire sel_1558;
  wire sel_1559;
  wire sel_1560;
  wire sel_1561;
  wire sel_1562;
  wire s_161;
  wire sel_2_348;
  wire sel_1563;
  wire sel_2_349;
  wire sel_1564;
  wire sel_2_350;
  wire sel_1565;
  wire sel_2_351;
  wire sel_1566;
  wire sel_2_352;
  wire sel_1567;
  wire sel_2_353;
  wire sel_1568;
  wire sel_1569;
  wire sel_1570;
  reg  sel_2_354;
  reg  [11:0] cont_bits_32_10;  // boolean [12]
  wire signed [31:0] sel_1571;  // int32
  wire signed [31:0] sel_1572;  // int32
  wire signed [31:0] sel_1573;  // int32
  wire signed [31:0] sel_1574;  // int32
  wire signed [31:0] sel_1575;  // int32
  wire signed [31:0] sel_1576;  // int32
  wire signed [31:0] sel_1577;  // int32
  wire signed [31:0] sel_1578;  // int32
  wire signed [31:0] sel_1579;  // int32
  wire signed [31:0] sel_1580;  // int32
  wire signed [31:0] sel_1581;  // int32
  wire signed [31:0] sel_1582;  // int32
  wire signed [31:0] s_162;  // int32
  wire signed [31:0] sel_1_308;  // int32
  wire signed [31:0] sel_1583;  // int32
  wire signed [31:0] sel_1_309;  // int32
  wire signed [31:0] sel_1584;  // int32
  wire signed [31:0] sel_1_310;  // int32
  wire signed [31:0] sel_1585;  // int32
  wire signed [31:0] sel_1_311;  // int32
  wire signed [31:0] sel_1586;  // int32
  wire signed [31:0] sel_1_312;  // int32
  wire signed [31:0] sel_1587;  // int32
  wire signed [31:0] sel_1_313;  // int32
  wire signed [31:0] sel_1588;  // int32
  wire signed [31:0] sel_1589;  // int32
  wire signed [31:0] sel_1590;  // int32
  reg signed [31:0] sel_1_314;  // int32
  wire tmp_144;
  wire sel_1591;
  wire sel_1592;
  wire sel_1593;
  wire sel_1594;
  wire sel_1595;
  wire sel_1596;
  wire sel_1597;
  wire sel_1598;
  wire sel_1599;
  wire sel_1600;
  wire sel_1601;
  wire sel_1602;
  wire s_163;
  wire sel_2_355;
  wire sel_1603;
  wire sel_2_356;
  wire sel_1604;
  wire sel_2_357;
  wire sel_1605;
  wire sel_2_358;
  wire sel_1606;
  wire sel_2_359;
  wire sel_1607;
  wire sel_2_360;
  wire sel_1608;
  wire sel_1609;
  wire sel_1610;
  reg  sel_2_361;
  reg  [11:0] cont_bits_32_11;  // boolean [12]
  wire signed [31:0] sel_1611;  // int32
  wire signed [31:0] sel_1612;  // int32
  wire signed [31:0] sel_1613;  // int32
  wire signed [31:0] sel_1614;  // int32
  wire signed [31:0] sel_1615;  // int32
  wire signed [31:0] sel_1616;  // int32
  wire signed [31:0] sel_1617;  // int32
  wire signed [31:0] sel_1618;  // int32
  wire signed [31:0] sel_1619;  // int32
  wire signed [31:0] sel_1620;  // int32
  wire signed [31:0] sel_1621;  // int32
  wire signed [31:0] sel_1622;  // int32
  wire signed [31:0] s_164;  // int32
  wire signed [31:0] sel_1_315;  // int32
  wire signed [31:0] sel_1623;  // int32
  wire signed [31:0] sel_1_316;  // int32
  wire signed [31:0] sel_1624;  // int32
  wire signed [31:0] sel_1_317;  // int32
  wire signed [31:0] sel_1625;  // int32
  wire signed [31:0] sel_1_318;  // int32
  wire signed [31:0] sel_1626;  // int32
  wire signed [31:0] sel_1_319;  // int32
  wire signed [31:0] sel_1627;  // int32
  wire signed [31:0] sel_1_320;  // int32
  wire signed [31:0] sel_1628;  // int32
  wire signed [31:0] sel_1629;  // int32
  wire signed [31:0] sel_1630;  // int32
  reg signed [31:0] sel_1_321;  // int32
  wire tmp_145;
  wire sel_1631;
  wire sel_1632;
  wire sel_1633;
  wire sel_1634;
  wire sel_1635;
  wire sel_1636;
  wire sel_1637;
  wire sel_1638;
  wire sel_1639;
  wire sel_1640;
  wire sel_1641;
  wire sel_1642;
  wire s_165;
  wire sel_2_362;
  wire sel_1643;
  wire sel_2_363;
  wire sel_1644;
  wire sel_2_364;
  wire sel_1645;
  wire sel_2_365;
  wire sel_1646;
  wire sel_2_366;
  wire sel_1647;
  wire sel_2_367;
  wire sel_1648;
  wire sel_1649;
  wire sel_1650;
  reg  sel_2_368;
  reg  [11:0] cont_bits_32_12;  // boolean [12]
  wire signed [31:0] sel_1651;  // int32
  wire signed [31:0] sel_1652;  // int32
  wire signed [31:0] sel_1653;  // int32
  wire signed [31:0] sel_1654;  // int32
  wire signed [31:0] sel_1655;  // int32
  wire signed [31:0] sel_1656;  // int32
  wire signed [31:0] sel_1657;  // int32
  wire signed [31:0] sel_1658;  // int32
  wire signed [31:0] sel_1659;  // int32
  wire signed [31:0] sel_1660;  // int32
  wire signed [31:0] sel_1661;  // int32
  wire signed [31:0] sel_1662;  // int32
  wire signed [31:0] s_166;  // int32
  wire signed [31:0] sel_1_322;  // int32
  wire signed [31:0] sel_1663;  // int32
  wire signed [31:0] sel_1_323;  // int32
  wire signed [31:0] sel_1664;  // int32
  wire signed [31:0] sel_1_324;  // int32
  wire signed [31:0] sel_1665;  // int32
  wire signed [31:0] sel_1_325;  // int32
  wire signed [31:0] sel_1666;  // int32
  wire signed [31:0] sel_1_326;  // int32
  wire signed [31:0] sel_1667;  // int32
  wire signed [31:0] sel_1_327;  // int32
  wire signed [31:0] sel_1668;  // int32
  wire signed [31:0] sel_1669;  // int32
  wire signed [31:0] sel_1670;  // int32
  reg signed [31:0] sel_1_328;  // int32
  wire cont_bits_32_13;
  wire sel_1_329;
  wire [11:0] cont_bits_31;  // boolean [12]
  reg [15:0] r_v31;  // uint16
  wire [15:0] tmp_146;  // uint16
  wire [15:0] tmp_147;  // uint16
  wire [15:0] tmp_148;  // uint16
  wire [15:0] tmp_149;  // uint16
  wire [15:0] tmp_150;  // uint16
  wire [15:0] tmp_151;  // uint16
  wire [15:0] tmp_152;  // uint16
  wire [15:0] tmp_153;  // uint16
  reg [15:0] tmp_154;  // uint16
  wire functionOutput_0_3;
  wire functionOutput_1_3;
  wire functionOutput_2_3;
  wire functionOutput_3_3;
  wire functionOutput_4_3;
  wire functionOutput_5_3;
  wire functionOutput_6_3;
  wire functionOutput_7_3;
  wire functionOutput_8_3;
  wire functionOutput_9_3;
  wire functionOutput_10_3;
  wire functionOutput_11_3;
  wire [11:0] functionOutput_14;  // boolean [12]
  wire signed [31:0] sel_1671;  // int32
  wire signed [31:0] sel_1672;  // int32
  wire signed [31:0] sel_1673;  // int32
  wire signed [31:0] sel_1674;  // int32
  wire signed [31:0] sel_1675;  // int32
  wire signed [31:0] sel_1676;  // int32
  wire signed [31:0] sel_1677;  // int32
  wire signed [31:0] sel_1678;  // int32
  wire signed [31:0] sel_1679;  // int32
  wire signed [31:0] sel_1680;  // int32
  wire signed [31:0] sel_1681;  // int32
  wire signed [31:0] sel_1682;  // int32
  wire signed [31:0] s_167;  // int32
  wire signed [31:0] sel_1_330;  // int32
  wire signed [31:0] sel_1683;  // int32
  wire signed [31:0] sel_1_331;  // int32
  wire signed [31:0] sel_1684;  // int32
  wire signed [31:0] sel_1_332;  // int32
  wire signed [31:0] sel_1685;  // int32
  wire signed [31:0] sel_1_333;  // int32
  wire signed [31:0] sel_1686;  // int32
  wire signed [31:0] sel_1_334;  // int32
  wire signed [31:0] sel_1687;  // int32
  wire signed [31:0] sel_1688;  // int32
  wire signed [31:0] sel_1689;  // int32
  reg signed [31:0] sel_1_335;  // int32
  wire tmp_155;
  wire sel_1690;
  wire sel_1691;
  wire sel_1692;
  wire sel_1693;
  wire sel_1694;
  wire sel_1695;
  wire sel_1696;
  wire sel_1697;
  wire sel_1698;
  wire sel_1699;
  wire sel_1700;
  wire sel_1701;
  wire s_168;
  wire sel_2_369;
  wire sel_1702;
  wire sel_2_370;
  wire sel_1703;
  wire sel_2_371;
  wire sel_1704;
  wire sel_2_372;
  wire sel_1705;
  wire sel_2_373;
  wire sel_1706;
  wire sel_1707;
  wire sel_1708;
  reg  sel_2_374;
  reg  [11:0] cont_bits_31_1;  // boolean [12]
  wire signed [31:0] sel_1709;  // int32
  wire signed [31:0] sel_1710;  // int32
  wire signed [31:0] sel_1711;  // int32
  wire signed [31:0] sel_1712;  // int32
  wire signed [31:0] sel_1713;  // int32
  wire signed [31:0] sel_1714;  // int32
  wire signed [31:0] sel_1715;  // int32
  wire signed [31:0] sel_1716;  // int32
  wire signed [31:0] sel_1717;  // int32
  wire signed [31:0] sel_1718;  // int32
  wire signed [31:0] sel_1719;  // int32
  wire signed [31:0] sel_1720;  // int32
  wire signed [31:0] s_169;  // int32
  wire signed [31:0] sel_1_336;  // int32
  wire signed [31:0] sel_1721;  // int32
  wire signed [31:0] sel_1_337;  // int32
  wire signed [31:0] sel_1722;  // int32
  wire signed [31:0] sel_1_338;  // int32
  wire signed [31:0] sel_1723;  // int32
  wire signed [31:0] sel_1_339;  // int32
  wire signed [31:0] sel_1724;  // int32
  wire signed [31:0] sel_1_340;  // int32
  wire signed [31:0] sel_1725;  // int32
  wire signed [31:0] sel_1726;  // int32
  wire signed [31:0] sel_1727;  // int32
  reg signed [31:0] sel_1_341;  // int32
  wire tmp_156;
  wire sel_1728;
  wire sel_1729;
  wire sel_1730;
  wire sel_1731;
  wire sel_1732;
  wire sel_1733;
  wire sel_1734;
  wire sel_1735;
  wire sel_1736;
  wire sel_1737;
  wire sel_1738;
  wire sel_1739;
  wire s_170;
  wire sel_2_375;
  wire sel_1740;
  wire sel_2_376;
  wire sel_1741;
  wire sel_2_377;
  wire sel_1742;
  wire sel_2_378;
  wire sel_1743;
  wire sel_2_379;
  wire sel_1744;
  wire sel_1745;
  wire sel_1746;
  reg  sel_2_380;
  reg  [11:0] cont_bits_31_2;  // boolean [12]
  wire signed [31:0] sel_1747;  // int32
  wire signed [31:0] sel_1748;  // int32
  wire signed [31:0] sel_1749;  // int32
  wire signed [31:0] sel_1750;  // int32
  wire signed [31:0] sel_1751;  // int32
  wire signed [31:0] sel_1752;  // int32
  wire signed [31:0] sel_1753;  // int32
  wire signed [31:0] sel_1754;  // int32
  wire signed [31:0] sel_1755;  // int32
  wire signed [31:0] sel_1756;  // int32
  wire signed [31:0] sel_1757;  // int32
  wire signed [31:0] sel_1758;  // int32
  wire signed [31:0] s_171;  // int32
  wire signed [31:0] sel_1_342;  // int32
  wire signed [31:0] sel_1759;  // int32
  wire signed [31:0] sel_1_343;  // int32
  wire signed [31:0] sel_1760;  // int32
  wire signed [31:0] sel_1_344;  // int32
  wire signed [31:0] sel_1761;  // int32
  wire signed [31:0] sel_1_345;  // int32
  wire signed [31:0] sel_1762;  // int32
  wire signed [31:0] sel_1_346;  // int32
  wire signed [31:0] sel_1763;  // int32
  wire signed [31:0] sel_1764;  // int32
  wire signed [31:0] sel_1765;  // int32
  reg signed [31:0] sel_1_347;  // int32
  wire tmp_157;
  wire sel_1766;
  wire sel_1767;
  wire sel_1768;
  wire sel_1769;
  wire sel_1770;
  wire sel_1771;
  wire sel_1772;
  wire sel_1773;
  wire sel_1774;
  wire sel_1775;
  wire sel_1776;
  wire sel_1777;
  wire s_172;
  wire sel_2_381;
  wire sel_1778;
  wire sel_2_382;
  wire sel_1779;
  wire sel_2_383;
  wire sel_1780;
  wire sel_2_384;
  wire sel_1781;
  wire sel_2_385;
  wire sel_1782;
  wire sel_1783;
  wire sel_1784;
  reg  sel_2_386;
  reg  [11:0] cont_bits_31_3;  // boolean [12]
  wire signed [31:0] sel_1785;  // int32
  wire signed [31:0] sel_1786;  // int32
  wire signed [31:0] sel_1787;  // int32
  wire signed [31:0] sel_1788;  // int32
  wire signed [31:0] sel_1789;  // int32
  wire signed [31:0] sel_1790;  // int32
  wire signed [31:0] sel_1791;  // int32
  wire signed [31:0] sel_1792;  // int32
  wire signed [31:0] sel_1793;  // int32
  wire signed [31:0] sel_1794;  // int32
  wire signed [31:0] sel_1795;  // int32
  wire signed [31:0] sel_1796;  // int32
  wire signed [31:0] s_173;  // int32
  wire signed [31:0] sel_1_348;  // int32
  wire signed [31:0] sel_1797;  // int32
  wire signed [31:0] sel_1_349;  // int32
  wire signed [31:0] sel_1798;  // int32
  wire signed [31:0] sel_1_350;  // int32
  wire signed [31:0] sel_1799;  // int32
  wire signed [31:0] sel_1_351;  // int32
  wire signed [31:0] sel_1800;  // int32
  wire signed [31:0] sel_1_352;  // int32
  wire signed [31:0] sel_1801;  // int32
  wire signed [31:0] sel_1802;  // int32
  wire signed [31:0] sel_1803;  // int32
  reg signed [31:0] sel_1_353;  // int32
  wire tmp_158;
  wire sel_1804;
  wire sel_1805;
  wire sel_1806;
  wire sel_1807;
  wire sel_1808;
  wire sel_1809;
  wire sel_1810;
  wire sel_1811;
  wire sel_1812;
  wire sel_1813;
  wire sel_1814;
  wire sel_1815;
  wire s_174;
  wire sel_2_387;
  wire sel_1816;
  wire sel_2_388;
  wire sel_1817;
  wire sel_2_389;
  wire sel_1818;
  wire sel_2_390;
  wire sel_1819;
  wire sel_2_391;
  wire sel_1820;
  wire sel_1821;
  wire sel_1822;
  reg  sel_2_392;
  reg  [11:0] cont_bits_31_4;  // boolean [12]
  wire signed [31:0] sel_1823;  // int32
  wire signed [31:0] sel_1824;  // int32
  wire signed [31:0] sel_1825;  // int32
  wire signed [31:0] sel_1826;  // int32
  wire signed [31:0] sel_1827;  // int32
  wire signed [31:0] sel_1828;  // int32
  wire signed [31:0] sel_1829;  // int32
  wire signed [31:0] sel_1830;  // int32
  wire signed [31:0] sel_1831;  // int32
  wire signed [31:0] sel_1832;  // int32
  wire signed [31:0] sel_1833;  // int32
  wire signed [31:0] sel_1834;  // int32
  wire signed [31:0] s_175;  // int32
  wire signed [31:0] sel_1_354;  // int32
  wire signed [31:0] sel_1835;  // int32
  wire signed [31:0] sel_1_355;  // int32
  wire signed [31:0] sel_1836;  // int32
  wire signed [31:0] sel_1_356;  // int32
  wire signed [31:0] sel_1837;  // int32
  wire signed [31:0] sel_1_357;  // int32
  wire signed [31:0] sel_1838;  // int32
  wire signed [31:0] sel_1_358;  // int32
  wire signed [31:0] sel_1839;  // int32
  wire signed [31:0] sel_1840;  // int32
  wire signed [31:0] sel_1841;  // int32
  reg signed [31:0] sel_1_359;  // int32
  wire tmp_159;
  wire sel_1842;
  wire sel_1843;
  wire sel_1844;
  wire sel_1845;
  wire sel_1846;
  wire sel_1847;
  wire sel_1848;
  wire sel_1849;
  wire sel_1850;
  wire sel_1851;
  wire sel_1852;
  wire sel_1853;
  wire s_176;
  wire sel_2_393;
  wire sel_1854;
  wire sel_2_394;
  wire sel_1855;
  wire sel_2_395;
  wire sel_1856;
  wire sel_2_396;
  wire sel_1857;
  wire sel_2_397;
  wire sel_1858;
  wire sel_1859;
  wire sel_1860;
  reg  sel_2_398;
  reg  [11:0] cont_bits_31_5;  // boolean [12]
  wire signed [31:0] sel_1861;  // int32
  wire signed [31:0] sel_1862;  // int32
  wire signed [31:0] sel_1863;  // int32
  wire signed [31:0] sel_1864;  // int32
  wire signed [31:0] sel_1865;  // int32
  wire signed [31:0] sel_1866;  // int32
  wire signed [31:0] sel_1867;  // int32
  wire signed [31:0] sel_1868;  // int32
  wire signed [31:0] sel_1869;  // int32
  wire signed [31:0] sel_1870;  // int32
  wire signed [31:0] sel_1871;  // int32
  wire signed [31:0] sel_1872;  // int32
  wire signed [31:0] s_177;  // int32
  wire signed [31:0] sel_1_360;  // int32
  wire signed [31:0] sel_1873;  // int32
  wire signed [31:0] sel_1_361;  // int32
  wire signed [31:0] sel_1874;  // int32
  wire signed [31:0] sel_1_362;  // int32
  wire signed [31:0] sel_1875;  // int32
  wire signed [31:0] sel_1_363;  // int32
  wire signed [31:0] sel_1876;  // int32
  wire signed [31:0] sel_1_364;  // int32
  wire signed [31:0] sel_1877;  // int32
  wire signed [31:0] sel_1878;  // int32
  wire signed [31:0] sel_1879;  // int32
  reg signed [31:0] sel_1_365;  // int32
  wire tmp_160;
  wire sel_1880;
  wire sel_1881;
  wire sel_1882;
  wire sel_1883;
  wire sel_1884;
  wire sel_1885;
  wire sel_1886;
  wire sel_1887;
  wire sel_1888;
  wire sel_1889;
  wire sel_1890;
  wire sel_1891;
  wire s_178;
  wire sel_2_399;
  wire sel_1892;
  wire sel_2_400;
  wire sel_1893;
  wire sel_2_401;
  wire sel_1894;
  wire sel_2_402;
  wire sel_1895;
  wire sel_2_403;
  wire sel_1896;
  wire sel_1897;
  wire sel_1898;
  reg  sel_2_404;
  reg  [11:0] cont_bits_31_6;  // boolean [12]
  wire signed [31:0] sel_1899;  // int32
  wire signed [31:0] sel_1900;  // int32
  wire signed [31:0] sel_1901;  // int32
  wire signed [31:0] sel_1902;  // int32
  wire signed [31:0] sel_1903;  // int32
  wire signed [31:0] sel_1904;  // int32
  wire signed [31:0] sel_1905;  // int32
  wire signed [31:0] sel_1906;  // int32
  wire signed [31:0] sel_1907;  // int32
  wire signed [31:0] sel_1908;  // int32
  wire signed [31:0] sel_1909;  // int32
  wire signed [31:0] sel_1910;  // int32
  wire signed [31:0] s_179;  // int32
  wire signed [31:0] sel_1_366;  // int32
  wire signed [31:0] sel_1911;  // int32
  wire signed [31:0] sel_1_367;  // int32
  wire signed [31:0] sel_1912;  // int32
  wire signed [31:0] sel_1_368;  // int32
  wire signed [31:0] sel_1913;  // int32
  wire signed [31:0] sel_1_369;  // int32
  wire signed [31:0] sel_1914;  // int32
  wire signed [31:0] sel_1_370;  // int32
  wire signed [31:0] sel_1915;  // int32
  wire signed [31:0] sel_1916;  // int32
  wire signed [31:0] sel_1917;  // int32
  reg signed [31:0] sel_1_371;  // int32
  wire tmp_161;
  wire sel_1918;
  wire sel_1919;
  wire sel_1920;
  wire sel_1921;
  wire sel_1922;
  wire sel_1923;
  wire sel_1924;
  wire sel_1925;
  wire sel_1926;
  wire sel_1927;
  wire sel_1928;
  wire sel_1929;
  wire s_180;
  wire sel_2_405;
  wire sel_1930;
  wire sel_2_406;
  wire sel_1931;
  wire sel_2_407;
  wire sel_1932;
  wire sel_2_408;
  wire sel_1933;
  wire sel_2_409;
  wire sel_1934;
  wire sel_1935;
  wire sel_1936;
  reg  sel_2_410;
  reg  [11:0] cont_bits_31_7;  // boolean [12]
  wire signed [31:0] sel_1937;  // int32
  wire signed [31:0] sel_1938;  // int32
  wire signed [31:0] sel_1939;  // int32
  wire signed [31:0] sel_1940;  // int32
  wire signed [31:0] sel_1941;  // int32
  wire signed [31:0] sel_1942;  // int32
  wire signed [31:0] sel_1943;  // int32
  wire signed [31:0] sel_1944;  // int32
  wire signed [31:0] sel_1945;  // int32
  wire signed [31:0] sel_1946;  // int32
  wire signed [31:0] sel_1947;  // int32
  wire signed [31:0] sel_1948;  // int32
  wire signed [31:0] s_181;  // int32
  wire signed [31:0] sel_1_372;  // int32
  wire signed [31:0] sel_1949;  // int32
  wire signed [31:0] sel_1_373;  // int32
  wire signed [31:0] sel_1950;  // int32
  wire signed [31:0] sel_1_374;  // int32
  wire signed [31:0] sel_1951;  // int32
  wire signed [31:0] sel_1_375;  // int32
  wire signed [31:0] sel_1952;  // int32
  wire signed [31:0] sel_1_376;  // int32
  wire signed [31:0] sel_1953;  // int32
  wire signed [31:0] sel_1954;  // int32
  wire signed [31:0] sel_1955;  // int32
  reg signed [31:0] sel_1_377;  // int32
  wire tmp_162;
  wire sel_1956;
  wire sel_1957;
  wire sel_1958;
  wire sel_1959;
  wire sel_1960;
  wire sel_1961;
  wire sel_1962;
  wire sel_1963;
  wire sel_1964;
  wire sel_1965;
  wire sel_1966;
  wire sel_1967;
  wire s_182;
  wire sel_2_411;
  wire sel_1968;
  wire sel_2_412;
  wire sel_1969;
  wire sel_2_413;
  wire sel_1970;
  wire sel_2_414;
  wire sel_1971;
  wire sel_2_415;
  wire sel_1972;
  wire sel_1973;
  wire sel_1974;
  reg  sel_2_416;
  reg  [11:0] cont_bits_31_8;  // boolean [12]
  wire signed [31:0] sel_1975;  // int32
  wire signed [31:0] sel_1976;  // int32
  wire signed [31:0] sel_1977;  // int32
  wire signed [31:0] sel_1978;  // int32
  wire signed [31:0] sel_1979;  // int32
  wire signed [31:0] sel_1980;  // int32
  wire signed [31:0] sel_1981;  // int32
  wire signed [31:0] sel_1982;  // int32
  wire signed [31:0] sel_1983;  // int32
  wire signed [31:0] sel_1984;  // int32
  wire signed [31:0] sel_1985;  // int32
  wire signed [31:0] sel_1986;  // int32
  wire signed [31:0] s_183;  // int32
  wire signed [31:0] sel_1_378;  // int32
  wire signed [31:0] sel_1987;  // int32
  wire signed [31:0] sel_1_379;  // int32
  wire signed [31:0] sel_1988;  // int32
  wire signed [31:0] sel_1_380;  // int32
  wire signed [31:0] sel_1989;  // int32
  wire signed [31:0] sel_1_381;  // int32
  wire signed [31:0] sel_1990;  // int32
  wire signed [31:0] sel_1_382;  // int32
  wire signed [31:0] sel_1991;  // int32
  wire signed [31:0] sel_1992;  // int32
  wire signed [31:0] sel_1993;  // int32
  reg signed [31:0] sel_1_383;  // int32
  wire tmp_163;
  wire sel_1994;
  wire sel_1995;
  wire sel_1996;
  wire sel_1997;
  wire sel_1998;
  wire sel_1999;
  wire sel_2000;
  wire sel_2001;
  wire sel_2002;
  wire sel_2003;
  wire sel_2004;
  wire sel_2005;
  wire s_184;
  wire sel_2_417;
  wire sel_2006;
  wire sel_2_418;
  wire sel_2007;
  wire sel_2_419;
  wire sel_2008;
  wire sel_2_420;
  wire sel_2009;
  wire sel_2_421;
  wire sel_2010;
  wire sel_2011;
  wire sel_2012;
  reg  sel_2_422;
  reg  [11:0] cont_bits_31_9;  // boolean [12]
  wire signed [31:0] sel_2013;  // int32
  wire signed [31:0] sel_2014;  // int32
  wire signed [31:0] sel_2015;  // int32
  wire signed [31:0] sel_2016;  // int32
  wire signed [31:0] sel_2017;  // int32
  wire signed [31:0] sel_2018;  // int32
  wire signed [31:0] sel_2019;  // int32
  wire signed [31:0] sel_2020;  // int32
  wire signed [31:0] sel_2021;  // int32
  wire signed [31:0] sel_2022;  // int32
  wire signed [31:0] sel_2023;  // int32
  wire signed [31:0] sel_2024;  // int32
  wire signed [31:0] s_185;  // int32
  wire signed [31:0] sel_1_384;  // int32
  wire signed [31:0] sel_2025;  // int32
  wire signed [31:0] sel_1_385;  // int32
  wire signed [31:0] sel_2026;  // int32
  wire signed [31:0] sel_1_386;  // int32
  wire signed [31:0] sel_2027;  // int32
  wire signed [31:0] sel_1_387;  // int32
  wire signed [31:0] sel_2028;  // int32
  wire signed [31:0] sel_1_388;  // int32
  wire signed [31:0] sel_2029;  // int32
  wire signed [31:0] sel_2030;  // int32
  wire signed [31:0] sel_2031;  // int32
  reg signed [31:0] sel_1_389;  // int32
  wire tmp_164;
  wire sel_2032;
  wire sel_2033;
  wire sel_2034;
  wire sel_2035;
  wire sel_2036;
  wire sel_2037;
  wire sel_2038;
  wire sel_2039;
  wire sel_2040;
  wire sel_2041;
  wire sel_2042;
  wire sel_2043;
  wire s_186;
  wire sel_2_423;
  wire sel_2044;
  wire sel_2_424;
  wire sel_2045;
  wire sel_2_425;
  wire sel_2046;
  wire sel_2_426;
  wire sel_2047;
  wire sel_2_427;
  wire sel_2048;
  wire sel_2049;
  wire sel_2050;
  reg  sel_2_428;
  reg  [11:0] cont_bits_31_10;  // boolean [12]
  wire signed [31:0] sel_2051;  // int32
  wire signed [31:0] sel_2052;  // int32
  wire signed [31:0] sel_2053;  // int32
  wire signed [31:0] sel_2054;  // int32
  wire signed [31:0] sel_2055;  // int32
  wire signed [31:0] sel_2056;  // int32
  wire signed [31:0] sel_2057;  // int32
  wire signed [31:0] sel_2058;  // int32
  wire signed [31:0] sel_2059;  // int32
  wire signed [31:0] sel_2060;  // int32
  wire signed [31:0] sel_2061;  // int32
  wire signed [31:0] sel_2062;  // int32
  wire signed [31:0] s_187;  // int32
  wire signed [31:0] sel_1_390;  // int32
  wire signed [31:0] sel_2063;  // int32
  wire signed [31:0] sel_1_391;  // int32
  wire signed [31:0] sel_2064;  // int32
  wire signed [31:0] sel_1_392;  // int32
  wire signed [31:0] sel_2065;  // int32
  wire signed [31:0] sel_1_393;  // int32
  wire signed [31:0] sel_2066;  // int32
  wire signed [31:0] sel_1_394;  // int32
  wire signed [31:0] sel_2067;  // int32
  wire signed [31:0] sel_2068;  // int32
  wire signed [31:0] sel_2069;  // int32
  reg signed [31:0] sel_1_395;  // int32
  wire tmp_165;
  wire sel_2070;
  wire sel_2071;
  wire sel_2072;
  wire sel_2073;
  wire sel_2074;
  wire sel_2075;
  wire sel_2076;
  wire sel_2077;
  wire sel_2078;
  wire sel_2079;
  wire sel_2080;
  wire sel_2081;
  wire s_188;
  wire sel_2_429;
  wire sel_2082;
  wire sel_2_430;
  wire sel_2083;
  wire sel_2_431;
  wire sel_2084;
  wire sel_2_432;
  wire sel_2085;
  wire sel_2_433;
  wire sel_2086;
  wire sel_2087;
  wire sel_2088;
  reg  sel_2_434;
  reg  [11:0] cont_bits_31_11;  // boolean [12]
  wire signed [31:0] sel_2089;  // int32
  wire signed [31:0] sel_2090;  // int32
  wire signed [31:0] sel_2091;  // int32
  wire signed [31:0] sel_2092;  // int32
  wire signed [31:0] sel_2093;  // int32
  wire signed [31:0] sel_2094;  // int32
  wire signed [31:0] sel_2095;  // int32
  wire signed [31:0] sel_2096;  // int32
  wire signed [31:0] sel_2097;  // int32
  wire signed [31:0] sel_2098;  // int32
  wire signed [31:0] sel_2099;  // int32
  wire signed [31:0] sel_2100;  // int32
  wire signed [31:0] s_189;  // int32
  wire signed [31:0] sel_1_396;  // int32
  wire signed [31:0] sel_2101;  // int32
  wire signed [31:0] sel_1_397;  // int32
  wire signed [31:0] sel_2102;  // int32
  wire signed [31:0] sel_1_398;  // int32
  wire signed [31:0] sel_2103;  // int32
  wire signed [31:0] sel_1_399;  // int32
  wire signed [31:0] sel_2104;  // int32
  wire signed [31:0] sel_1_400;  // int32
  wire signed [31:0] sel_2105;  // int32
  wire signed [31:0] sel_2106;  // int32
  wire signed [31:0] sel_2107;  // int32
  reg signed [31:0] sel_1_401;  // int32
  wire tmp_166;
  wire sel_2108;
  wire sel_2109;
  wire sel_2110;
  wire sel_2111;
  wire sel_2112;
  wire sel_2113;
  wire sel_2114;
  wire sel_2115;
  wire sel_2116;
  wire sel_2117;
  wire sel_2118;
  wire sel_2119;
  wire s_190;
  wire sel_2_435;
  wire sel_2120;
  wire sel_2_436;
  wire sel_2121;
  wire sel_2_437;
  wire sel_2122;
  wire sel_2_438;
  wire sel_2123;
  wire sel_2_439;
  wire sel_2124;
  wire sel_2125;
  wire sel_2126;
  reg  sel_2_440;
  reg  [11:0] cont_bits_31_12;  // boolean [12]
  wire signed [31:0] sel_2127;  // int32
  wire signed [31:0] sel_2128;  // int32
  wire signed [31:0] sel_2129;  // int32
  wire signed [31:0] sel_2130;  // int32
  wire signed [31:0] sel_2131;  // int32
  wire signed [31:0] sel_2132;  // int32
  wire signed [31:0] sel_2133;  // int32
  wire signed [31:0] sel_2134;  // int32
  wire signed [31:0] sel_2135;  // int32
  wire signed [31:0] sel_2136;  // int32
  wire signed [31:0] sel_2137;  // int32
  wire signed [31:0] sel_2138;  // int32
  wire signed [31:0] s_191;  // int32
  wire signed [31:0] sel_1_402;  // int32
  wire signed [31:0] sel_2139;  // int32
  wire signed [31:0] sel_1_403;  // int32
  wire signed [31:0] sel_2140;  // int32
  wire signed [31:0] sel_1_404;  // int32
  wire signed [31:0] sel_2141;  // int32
  wire signed [31:0] sel_1_405;  // int32
  wire signed [31:0] sel_2142;  // int32
  wire signed [31:0] sel_1_406;  // int32
  wire signed [31:0] sel_2143;  // int32
  wire signed [31:0] sel_2144;  // int32
  wire signed [31:0] sel_2145;  // int32
  reg signed [31:0] sel_1_407;  // int32
  wire cont_bits_31_13;
  wire sel_1_408;
  wire [11:0] cont_bits_22;  // boolean [12]
  reg [15:0] r_v22;  // uint16
  wire [15:0] tmp_167;  // uint16
  wire [15:0] tmp_168;  // uint16
  wire [15:0] tmp_169;  // uint16
  wire [15:0] tmp_170;  // uint16
  wire [15:0] tmp_171;  // uint16
  wire [15:0] tmp_172;  // uint16
  wire [15:0] tmp_173;  // uint16
  wire [15:0] tmp_174;  // uint16
  reg [15:0] tmp_175;  // uint16
  wire functionOutput_0_4;
  wire functionOutput_1_4;
  wire functionOutput_2_4;
  wire functionOutput_3_4;
  wire functionOutput_4_4;
  wire functionOutput_5_4;
  wire functionOutput_6_4;
  wire functionOutput_7_4;
  wire functionOutput_8_4;
  wire functionOutput_9_4;
  wire functionOutput_10_4;
  wire functionOutput_11_4;
  wire [11:0] functionOutput_15;  // boolean [12]
  wire signed [31:0] sel_2146;  // int32
  wire signed [31:0] sel_2147;  // int32
  wire signed [31:0] sel_2148;  // int32
  wire signed [31:0] sel_2149;  // int32
  wire signed [31:0] sel_2150;  // int32
  wire signed [31:0] sel_2151;  // int32
  wire signed [31:0] sel_2152;  // int32
  wire signed [31:0] sel_2153;  // int32
  wire signed [31:0] sel_2154;  // int32
  wire signed [31:0] sel_2155;  // int32
  wire signed [31:0] sel_2156;  // int32
  wire signed [31:0] sel_2157;  // int32
  wire signed [31:0] s_192;  // int32
  wire signed [31:0] sel_1_409;  // int32
  wire signed [31:0] sel_2158;  // int32
  wire signed [31:0] sel_1_410;  // int32
  wire signed [31:0] sel_2159;  // int32
  wire signed [31:0] sel_1_411;  // int32
  wire signed [31:0] sel_2160;  // int32
  wire signed [31:0] sel_1_412;  // int32
  wire signed [31:0] sel_2161;  // int32
  wire signed [31:0] sel_2162;  // int32
  wire signed [31:0] sel_2163;  // int32
  reg signed [31:0] sel_1_413;  // int32
  wire tmp_176;
  wire sel_2164;
  wire sel_2165;
  wire sel_2166;
  wire sel_2167;
  wire sel_2168;
  wire sel_2169;
  wire sel_2170;
  wire sel_2171;
  wire sel_2172;
  wire sel_2173;
  wire sel_2174;
  wire sel_2175;
  wire s_193;
  wire sel_2_441;
  wire sel_2176;
  wire sel_2_442;
  wire sel_2177;
  wire sel_2_443;
  wire sel_2178;
  wire sel_2_444;
  wire sel_2179;
  wire sel_2180;
  wire sel_2181;
  reg  sel_2_445;
  reg  [11:0] cont_bits_22_1;  // boolean [12]
  wire signed [31:0] sel_2182;  // int32
  wire signed [31:0] sel_2183;  // int32
  wire signed [31:0] sel_2184;  // int32
  wire signed [31:0] sel_2185;  // int32
  wire signed [31:0] sel_2186;  // int32
  wire signed [31:0] sel_2187;  // int32
  wire signed [31:0] sel_2188;  // int32
  wire signed [31:0] sel_2189;  // int32
  wire signed [31:0] sel_2190;  // int32
  wire signed [31:0] sel_2191;  // int32
  wire signed [31:0] sel_2192;  // int32
  wire signed [31:0] sel_2193;  // int32
  wire signed [31:0] s_194;  // int32
  wire signed [31:0] sel_1_414;  // int32
  wire signed [31:0] sel_2194;  // int32
  wire signed [31:0] sel_1_415;  // int32
  wire signed [31:0] sel_2195;  // int32
  wire signed [31:0] sel_1_416;  // int32
  wire signed [31:0] sel_2196;  // int32
  wire signed [31:0] sel_1_417;  // int32
  wire signed [31:0] sel_2197;  // int32
  wire signed [31:0] sel_2198;  // int32
  wire signed [31:0] sel_2199;  // int32
  reg signed [31:0] sel_1_418;  // int32
  wire tmp_177;
  wire sel_2200;
  wire sel_2201;
  wire sel_2202;
  wire sel_2203;
  wire sel_2204;
  wire sel_2205;
  wire sel_2206;
  wire sel_2207;
  wire sel_2208;
  wire sel_2209;
  wire sel_2210;
  wire sel_2211;
  wire s_195;
  wire sel_2_446;
  wire sel_2212;
  wire sel_2_447;
  wire sel_2213;
  wire sel_2_448;
  wire sel_2214;
  wire sel_2_449;
  wire sel_2215;
  wire sel_2216;
  wire sel_2217;
  reg  sel_2_450;
  reg  [11:0] cont_bits_22_2;  // boolean [12]
  wire signed [31:0] sel_2218;  // int32
  wire signed [31:0] sel_2219;  // int32
  wire signed [31:0] sel_2220;  // int32
  wire signed [31:0] sel_2221;  // int32
  wire signed [31:0] sel_2222;  // int32
  wire signed [31:0] sel_2223;  // int32
  wire signed [31:0] sel_2224;  // int32
  wire signed [31:0] sel_2225;  // int32
  wire signed [31:0] sel_2226;  // int32
  wire signed [31:0] sel_2227;  // int32
  wire signed [31:0] sel_2228;  // int32
  wire signed [31:0] sel_2229;  // int32
  wire signed [31:0] s_196;  // int32
  wire signed [31:0] sel_1_419;  // int32
  wire signed [31:0] sel_2230;  // int32
  wire signed [31:0] sel_1_420;  // int32
  wire signed [31:0] sel_2231;  // int32
  wire signed [31:0] sel_1_421;  // int32
  wire signed [31:0] sel_2232;  // int32
  wire signed [31:0] sel_1_422;  // int32
  wire signed [31:0] sel_2233;  // int32
  wire signed [31:0] sel_2234;  // int32
  wire signed [31:0] sel_2235;  // int32
  reg signed [31:0] sel_1_423;  // int32
  wire tmp_178;
  wire sel_2236;
  wire sel_2237;
  wire sel_2238;
  wire sel_2239;
  wire sel_2240;
  wire sel_2241;
  wire sel_2242;
  wire sel_2243;
  wire sel_2244;
  wire sel_2245;
  wire sel_2246;
  wire sel_2247;
  wire s_197;
  wire sel_2_451;
  wire sel_2248;
  wire sel_2_452;
  wire sel_2249;
  wire sel_2_453;
  wire sel_2250;
  wire sel_2_454;
  wire sel_2251;
  wire sel_2252;
  wire sel_2253;
  reg  sel_2_455;
  reg  [11:0] cont_bits_22_3;  // boolean [12]
  wire signed [31:0] sel_2254;  // int32
  wire signed [31:0] sel_2255;  // int32
  wire signed [31:0] sel_2256;  // int32
  wire signed [31:0] sel_2257;  // int32
  wire signed [31:0] sel_2258;  // int32
  wire signed [31:0] sel_2259;  // int32
  wire signed [31:0] sel_2260;  // int32
  wire signed [31:0] sel_2261;  // int32
  wire signed [31:0] sel_2262;  // int32
  wire signed [31:0] sel_2263;  // int32
  wire signed [31:0] sel_2264;  // int32
  wire signed [31:0] sel_2265;  // int32
  wire signed [31:0] s_198;  // int32
  wire signed [31:0] sel_1_424;  // int32
  wire signed [31:0] sel_2266;  // int32
  wire signed [31:0] sel_1_425;  // int32
  wire signed [31:0] sel_2267;  // int32
  wire signed [31:0] sel_1_426;  // int32
  wire signed [31:0] sel_2268;  // int32
  wire signed [31:0] sel_1_427;  // int32
  wire signed [31:0] sel_2269;  // int32
  wire signed [31:0] sel_2270;  // int32
  wire signed [31:0] sel_2271;  // int32
  reg signed [31:0] sel_1_428;  // int32
  wire tmp_179;
  wire sel_2272;
  wire sel_2273;
  wire sel_2274;
  wire sel_2275;
  wire sel_2276;
  wire sel_2277;
  wire sel_2278;
  wire sel_2279;
  wire sel_2280;
  wire sel_2281;
  wire sel_2282;
  wire sel_2283;
  wire s_199;
  wire sel_2_456;
  wire sel_2284;
  wire sel_2_457;
  wire sel_2285;
  wire sel_2_458;
  wire sel_2286;
  wire sel_2_459;
  wire sel_2287;
  wire sel_2288;
  wire sel_2289;
  reg  sel_2_460;
  reg  [11:0] cont_bits_22_4;  // boolean [12]
  wire signed [31:0] sel_2290;  // int32
  wire signed [31:0] sel_2291;  // int32
  wire signed [31:0] sel_2292;  // int32
  wire signed [31:0] sel_2293;  // int32
  wire signed [31:0] sel_2294;  // int32
  wire signed [31:0] sel_2295;  // int32
  wire signed [31:0] sel_2296;  // int32
  wire signed [31:0] sel_2297;  // int32
  wire signed [31:0] sel_2298;  // int32
  wire signed [31:0] sel_2299;  // int32
  wire signed [31:0] sel_2300;  // int32
  wire signed [31:0] sel_2301;  // int32
  wire signed [31:0] s_200;  // int32
  wire signed [31:0] sel_1_429;  // int32
  wire signed [31:0] sel_2302;  // int32
  wire signed [31:0] sel_1_430;  // int32
  wire signed [31:0] sel_2303;  // int32
  wire signed [31:0] sel_1_431;  // int32
  wire signed [31:0] sel_2304;  // int32
  wire signed [31:0] sel_1_432;  // int32
  wire signed [31:0] sel_2305;  // int32
  wire signed [31:0] sel_2306;  // int32
  wire signed [31:0] sel_2307;  // int32
  reg signed [31:0] sel_1_433;  // int32
  wire tmp_180;
  wire sel_2308;
  wire sel_2309;
  wire sel_2310;
  wire sel_2311;
  wire sel_2312;
  wire sel_2313;
  wire sel_2314;
  wire sel_2315;
  wire sel_2316;
  wire sel_2317;
  wire sel_2318;
  wire sel_2319;
  wire s_201;
  wire sel_2_461;
  wire sel_2320;
  wire sel_2_462;
  wire sel_2321;
  wire sel_2_463;
  wire sel_2322;
  wire sel_2_464;
  wire sel_2323;
  wire sel_2324;
  wire sel_2325;
  reg  sel_2_465;
  reg  [11:0] cont_bits_22_5;  // boolean [12]
  wire signed [31:0] sel_2326;  // int32
  wire signed [31:0] sel_2327;  // int32
  wire signed [31:0] sel_2328;  // int32
  wire signed [31:0] sel_2329;  // int32
  wire signed [31:0] sel_2330;  // int32
  wire signed [31:0] sel_2331;  // int32
  wire signed [31:0] sel_2332;  // int32
  wire signed [31:0] sel_2333;  // int32
  wire signed [31:0] sel_2334;  // int32
  wire signed [31:0] sel_2335;  // int32
  wire signed [31:0] sel_2336;  // int32
  wire signed [31:0] sel_2337;  // int32
  wire signed [31:0] s_202;  // int32
  wire signed [31:0] sel_1_434;  // int32
  wire signed [31:0] sel_2338;  // int32
  wire signed [31:0] sel_1_435;  // int32
  wire signed [31:0] sel_2339;  // int32
  wire signed [31:0] sel_1_436;  // int32
  wire signed [31:0] sel_2340;  // int32
  wire signed [31:0] sel_1_437;  // int32
  wire signed [31:0] sel_2341;  // int32
  wire signed [31:0] sel_2342;  // int32
  wire signed [31:0] sel_2343;  // int32
  reg signed [31:0] sel_1_438;  // int32
  wire tmp_181;
  wire sel_2344;
  wire sel_2345;
  wire sel_2346;
  wire sel_2347;
  wire sel_2348;
  wire sel_2349;
  wire sel_2350;
  wire sel_2351;
  wire sel_2352;
  wire sel_2353;
  wire sel_2354;
  wire sel_2355;
  wire s_203;
  wire sel_2_466;
  wire sel_2356;
  wire sel_2_467;
  wire sel_2357;
  wire sel_2_468;
  wire sel_2358;
  wire sel_2_469;
  wire sel_2359;
  wire sel_2360;
  wire sel_2361;
  reg  sel_2_470;
  reg  [11:0] cont_bits_22_6;  // boolean [12]
  wire signed [31:0] sel_2362;  // int32
  wire signed [31:0] sel_2363;  // int32
  wire signed [31:0] sel_2364;  // int32
  wire signed [31:0] sel_2365;  // int32
  wire signed [31:0] sel_2366;  // int32
  wire signed [31:0] sel_2367;  // int32
  wire signed [31:0] sel_2368;  // int32
  wire signed [31:0] sel_2369;  // int32
  wire signed [31:0] sel_2370;  // int32
  wire signed [31:0] sel_2371;  // int32
  wire signed [31:0] sel_2372;  // int32
  wire signed [31:0] sel_2373;  // int32
  wire signed [31:0] s_204;  // int32
  wire signed [31:0] sel_1_439;  // int32
  wire signed [31:0] sel_2374;  // int32
  wire signed [31:0] sel_1_440;  // int32
  wire signed [31:0] sel_2375;  // int32
  wire signed [31:0] sel_1_441;  // int32
  wire signed [31:0] sel_2376;  // int32
  wire signed [31:0] sel_1_442;  // int32
  wire signed [31:0] sel_2377;  // int32
  wire signed [31:0] sel_2378;  // int32
  wire signed [31:0] sel_2379;  // int32
  reg signed [31:0] sel_1_443;  // int32
  wire tmp_182;
  wire sel_2380;
  wire sel_2381;
  wire sel_2382;
  wire sel_2383;
  wire sel_2384;
  wire sel_2385;
  wire sel_2386;
  wire sel_2387;
  wire sel_2388;
  wire sel_2389;
  wire sel_2390;
  wire sel_2391;
  wire s_205;
  wire sel_2_471;
  wire sel_2392;
  wire sel_2_472;
  wire sel_2393;
  wire sel_2_473;
  wire sel_2394;
  wire sel_2_474;
  wire sel_2395;
  wire sel_2396;
  wire sel_2397;
  reg  sel_2_475;
  reg  [11:0] cont_bits_22_7;  // boolean [12]
  wire signed [31:0] sel_2398;  // int32
  wire signed [31:0] sel_2399;  // int32
  wire signed [31:0] sel_2400;  // int32
  wire signed [31:0] sel_2401;  // int32
  wire signed [31:0] sel_2402;  // int32
  wire signed [31:0] sel_2403;  // int32
  wire signed [31:0] sel_2404;  // int32
  wire signed [31:0] sel_2405;  // int32
  wire signed [31:0] sel_2406;  // int32
  wire signed [31:0] sel_2407;  // int32
  wire signed [31:0] sel_2408;  // int32
  wire signed [31:0] sel_2409;  // int32
  wire signed [31:0] s_206;  // int32
  wire signed [31:0] sel_1_444;  // int32
  wire signed [31:0] sel_2410;  // int32
  wire signed [31:0] sel_1_445;  // int32
  wire signed [31:0] sel_2411;  // int32
  wire signed [31:0] sel_1_446;  // int32
  wire signed [31:0] sel_2412;  // int32
  wire signed [31:0] sel_1_447;  // int32
  wire signed [31:0] sel_2413;  // int32
  wire signed [31:0] sel_2414;  // int32
  wire signed [31:0] sel_2415;  // int32
  reg signed [31:0] sel_1_448;  // int32
  wire tmp_183;
  wire sel_2416;
  wire sel_2417;
  wire sel_2418;
  wire sel_2419;
  wire sel_2420;
  wire sel_2421;
  wire sel_2422;
  wire sel_2423;
  wire sel_2424;
  wire sel_2425;
  wire sel_2426;
  wire sel_2427;
  wire s_207;
  wire sel_2_476;
  wire sel_2428;
  wire sel_2_477;
  wire sel_2429;
  wire sel_2_478;
  wire sel_2430;
  wire sel_2_479;
  wire sel_2431;
  wire sel_2432;
  wire sel_2433;
  reg  sel_2_480;
  reg  [11:0] cont_bits_22_8;  // boolean [12]
  wire signed [31:0] sel_2434;  // int32
  wire signed [31:0] sel_2435;  // int32
  wire signed [31:0] sel_2436;  // int32
  wire signed [31:0] sel_2437;  // int32
  wire signed [31:0] sel_2438;  // int32
  wire signed [31:0] sel_2439;  // int32
  wire signed [31:0] sel_2440;  // int32
  wire signed [31:0] sel_2441;  // int32
  wire signed [31:0] sel_2442;  // int32
  wire signed [31:0] sel_2443;  // int32
  wire signed [31:0] sel_2444;  // int32
  wire signed [31:0] sel_2445;  // int32
  wire signed [31:0] s_208;  // int32
  wire signed [31:0] sel_1_449;  // int32
  wire signed [31:0] sel_2446;  // int32
  wire signed [31:0] sel_1_450;  // int32
  wire signed [31:0] sel_2447;  // int32
  wire signed [31:0] sel_1_451;  // int32
  wire signed [31:0] sel_2448;  // int32
  wire signed [31:0] sel_1_452;  // int32
  wire signed [31:0] sel_2449;  // int32
  wire signed [31:0] sel_2450;  // int32
  wire signed [31:0] sel_2451;  // int32
  reg signed [31:0] sel_1_453;  // int32
  wire tmp_184;
  wire sel_2452;
  wire sel_2453;
  wire sel_2454;
  wire sel_2455;
  wire sel_2456;
  wire sel_2457;
  wire sel_2458;
  wire sel_2459;
  wire sel_2460;
  wire sel_2461;
  wire sel_2462;
  wire sel_2463;
  wire s_209;
  wire sel_2_481;
  wire sel_2464;
  wire sel_2_482;
  wire sel_2465;
  wire sel_2_483;
  wire sel_2466;
  wire sel_2_484;
  wire sel_2467;
  wire sel_2468;
  wire sel_2469;
  reg  sel_2_485;
  reg  [11:0] cont_bits_22_9;  // boolean [12]
  wire signed [31:0] sel_2470;  // int32
  wire signed [31:0] sel_2471;  // int32
  wire signed [31:0] sel_2472;  // int32
  wire signed [31:0] sel_2473;  // int32
  wire signed [31:0] sel_2474;  // int32
  wire signed [31:0] sel_2475;  // int32
  wire signed [31:0] sel_2476;  // int32
  wire signed [31:0] sel_2477;  // int32
  wire signed [31:0] sel_2478;  // int32
  wire signed [31:0] sel_2479;  // int32
  wire signed [31:0] sel_2480;  // int32
  wire signed [31:0] sel_2481;  // int32
  wire signed [31:0] s_210;  // int32
  wire signed [31:0] sel_1_454;  // int32
  wire signed [31:0] sel_2482;  // int32
  wire signed [31:0] sel_1_455;  // int32
  wire signed [31:0] sel_2483;  // int32
  wire signed [31:0] sel_1_456;  // int32
  wire signed [31:0] sel_2484;  // int32
  wire signed [31:0] sel_1_457;  // int32
  wire signed [31:0] sel_2485;  // int32
  wire signed [31:0] sel_2486;  // int32
  wire signed [31:0] sel_2487;  // int32
  reg signed [31:0] sel_1_458;  // int32
  wire tmp_185;
  wire sel_2488;
  wire sel_2489;
  wire sel_2490;
  wire sel_2491;
  wire sel_2492;
  wire sel_2493;
  wire sel_2494;
  wire sel_2495;
  wire sel_2496;
  wire sel_2497;
  wire sel_2498;
  wire sel_2499;
  wire s_211;
  wire sel_2_486;
  wire sel_2500;
  wire sel_2_487;
  wire sel_2501;
  wire sel_2_488;
  wire sel_2502;
  wire sel_2_489;
  wire sel_2503;
  wire sel_2504;
  wire sel_2505;
  reg  sel_2_490;
  reg  [11:0] cont_bits_22_10;  // boolean [12]
  wire signed [31:0] sel_2506;  // int32
  wire signed [31:0] sel_2507;  // int32
  wire signed [31:0] sel_2508;  // int32
  wire signed [31:0] sel_2509;  // int32
  wire signed [31:0] sel_2510;  // int32
  wire signed [31:0] sel_2511;  // int32
  wire signed [31:0] sel_2512;  // int32
  wire signed [31:0] sel_2513;  // int32
  wire signed [31:0] sel_2514;  // int32
  wire signed [31:0] sel_2515;  // int32
  wire signed [31:0] sel_2516;  // int32
  wire signed [31:0] sel_2517;  // int32
  wire signed [31:0] s_212;  // int32
  wire signed [31:0] sel_1_459;  // int32
  wire signed [31:0] sel_2518;  // int32
  wire signed [31:0] sel_1_460;  // int32
  wire signed [31:0] sel_2519;  // int32
  wire signed [31:0] sel_1_461;  // int32
  wire signed [31:0] sel_2520;  // int32
  wire signed [31:0] sel_1_462;  // int32
  wire signed [31:0] sel_2521;  // int32
  wire signed [31:0] sel_2522;  // int32
  wire signed [31:0] sel_2523;  // int32
  reg signed [31:0] sel_1_463;  // int32
  wire tmp_186;
  wire sel_2524;
  wire sel_2525;
  wire sel_2526;
  wire sel_2527;
  wire sel_2528;
  wire sel_2529;
  wire sel_2530;
  wire sel_2531;
  wire sel_2532;
  wire sel_2533;
  wire sel_2534;
  wire sel_2535;
  wire s_213;
  wire sel_2_491;
  wire sel_2536;
  wire sel_2_492;
  wire sel_2537;
  wire sel_2_493;
  wire sel_2538;
  wire sel_2_494;
  wire sel_2539;
  wire sel_2540;
  wire sel_2541;
  reg  sel_2_495;
  reg  [11:0] cont_bits_22_11;  // boolean [12]
  wire signed [31:0] sel_2542;  // int32
  wire signed [31:0] sel_2543;  // int32
  wire signed [31:0] sel_2544;  // int32
  wire signed [31:0] sel_2545;  // int32
  wire signed [31:0] sel_2546;  // int32
  wire signed [31:0] sel_2547;  // int32
  wire signed [31:0] sel_2548;  // int32
  wire signed [31:0] sel_2549;  // int32
  wire signed [31:0] sel_2550;  // int32
  wire signed [31:0] sel_2551;  // int32
  wire signed [31:0] sel_2552;  // int32
  wire signed [31:0] sel_2553;  // int32
  wire signed [31:0] s_214;  // int32
  wire signed [31:0] sel_1_464;  // int32
  wire signed [31:0] sel_2554;  // int32
  wire signed [31:0] sel_1_465;  // int32
  wire signed [31:0] sel_2555;  // int32
  wire signed [31:0] sel_1_466;  // int32
  wire signed [31:0] sel_2556;  // int32
  wire signed [31:0] sel_1_467;  // int32
  wire signed [31:0] sel_2557;  // int32
  wire signed [31:0] sel_2558;  // int32
  wire signed [31:0] sel_2559;  // int32
  reg signed [31:0] sel_1_468;  // int32
  wire tmp_187;
  wire sel_2560;
  wire sel_2561;
  wire sel_2562;
  wire sel_2563;
  wire sel_2564;
  wire sel_2565;
  wire sel_2566;
  wire sel_2567;
  wire sel_2568;
  wire sel_2569;
  wire sel_2570;
  wire sel_2571;
  wire s_215;
  wire sel_2_496;
  wire sel_2572;
  wire sel_2_497;
  wire sel_2573;
  wire sel_2_498;
  wire sel_2574;
  wire sel_2_499;
  wire sel_2575;
  wire sel_2576;
  wire sel_2577;
  reg  sel_2_500;
  reg  [11:0] cont_bits_22_12;  // boolean [12]
  wire signed [31:0] sel_2578;  // int32
  wire signed [31:0] sel_2579;  // int32
  wire signed [31:0] sel_2580;  // int32
  wire signed [31:0] sel_2581;  // int32
  wire signed [31:0] sel_2582;  // int32
  wire signed [31:0] sel_2583;  // int32
  wire signed [31:0] sel_2584;  // int32
  wire signed [31:0] sel_2585;  // int32
  wire signed [31:0] sel_2586;  // int32
  wire signed [31:0] sel_2587;  // int32
  wire signed [31:0] sel_2588;  // int32
  wire signed [31:0] sel_2589;  // int32
  wire signed [31:0] s_216;  // int32
  wire signed [31:0] sel_1_469;  // int32
  wire signed [31:0] sel_2590;  // int32
  wire signed [31:0] sel_1_470;  // int32
  wire signed [31:0] sel_2591;  // int32
  wire signed [31:0] sel_1_471;  // int32
  wire signed [31:0] sel_2592;  // int32
  wire signed [31:0] sel_1_472;  // int32
  wire signed [31:0] sel_2593;  // int32
  wire signed [31:0] sel_2594;  // int32
  wire signed [31:0] sel_2595;  // int32
  reg signed [31:0] sel_1_473;  // int32
  wire cont_bits_22_13;
  wire sel_1_474;
  wire [11:0] cont_bits_21;  // boolean [12]
  reg [15:0] r_v21;  // uint16
  wire [15:0] tmp_188;  // uint16
  wire [15:0] tmp_189;  // uint16
  wire [15:0] tmp_190;  // uint16
  wire [15:0] tmp_191;  // uint16
  wire [15:0] tmp_192;  // uint16
  wire [15:0] tmp_193;  // uint16
  wire [15:0] tmp_194;  // uint16
  wire [15:0] tmp_195;  // uint16
  reg [15:0] tmp_196;  // uint16
  wire functionOutput_0_5;
  wire functionOutput_1_5;
  wire functionOutput_2_5;
  wire functionOutput_3_5;
  wire functionOutput_4_5;
  wire functionOutput_5_5;
  wire functionOutput_6_5;
  wire functionOutput_7_5;
  wire functionOutput_8_5;
  wire functionOutput_9_5;
  wire functionOutput_10_5;
  wire functionOutput_11_5;
  wire [11:0] functionOutput_16;  // boolean [12]
  wire signed [31:0] sel_2596;  // int32
  wire signed [31:0] sel_2597;  // int32
  wire signed [31:0] sel_2598;  // int32
  wire signed [31:0] sel_2599;  // int32
  wire signed [31:0] sel_2600;  // int32
  wire signed [31:0] sel_2601;  // int32
  wire signed [31:0] sel_2602;  // int32
  wire signed [31:0] sel_2603;  // int32
  wire signed [31:0] sel_2604;  // int32
  wire signed [31:0] sel_2605;  // int32
  wire signed [31:0] sel_2606;  // int32
  wire signed [31:0] sel_2607;  // int32
  wire signed [31:0] s_217;  // int32
  wire signed [31:0] sel_1_475;  // int32
  wire signed [31:0] sel_2608;  // int32
  wire signed [31:0] sel_1_476;  // int32
  wire signed [31:0] sel_2609;  // int32
  wire signed [31:0] sel_1_477;  // int32
  wire signed [31:0] sel_2610;  // int32
  wire signed [31:0] sel_2611;  // int32
  wire signed [31:0] sel_2612;  // int32
  reg signed [31:0] sel_1_478;  // int32
  wire tmp_197;
  wire sel_2613;
  wire sel_2614;
  wire sel_2615;
  wire sel_2616;
  wire sel_2617;
  wire sel_2618;
  wire sel_2619;
  wire sel_2620;
  wire sel_2621;
  wire sel_2622;
  wire sel_2623;
  wire sel_2624;
  wire s_218;
  wire sel_2_501;
  wire sel_2625;
  wire sel_2_502;
  wire sel_2626;
  wire sel_2_503;
  wire sel_2627;
  wire sel_2628;
  wire sel_2629;
  reg  sel_2_504;
  reg  [11:0] cont_bits_21_1;  // boolean [12]
  wire signed [31:0] sel_2630;  // int32
  wire signed [31:0] sel_2631;  // int32
  wire signed [31:0] sel_2632;  // int32
  wire signed [31:0] sel_2633;  // int32
  wire signed [31:0] sel_2634;  // int32
  wire signed [31:0] sel_2635;  // int32
  wire signed [31:0] sel_2636;  // int32
  wire signed [31:0] sel_2637;  // int32
  wire signed [31:0] sel_2638;  // int32
  wire signed [31:0] sel_2639;  // int32
  wire signed [31:0] sel_2640;  // int32
  wire signed [31:0] sel_2641;  // int32
  wire signed [31:0] s_219;  // int32
  wire signed [31:0] sel_1_479;  // int32
  wire signed [31:0] sel_2642;  // int32
  wire signed [31:0] sel_1_480;  // int32
  wire signed [31:0] sel_2643;  // int32
  wire signed [31:0] sel_1_481;  // int32
  wire signed [31:0] sel_2644;  // int32
  wire signed [31:0] sel_2645;  // int32
  wire signed [31:0] sel_2646;  // int32
  reg signed [31:0] sel_1_482;  // int32
  wire tmp_198;
  wire sel_2647;
  wire sel_2648;
  wire sel_2649;
  wire sel_2650;
  wire sel_2651;
  wire sel_2652;
  wire sel_2653;
  wire sel_2654;
  wire sel_2655;
  wire sel_2656;
  wire sel_2657;
  wire sel_2658;
  wire s_220;
  wire sel_2_505;
  wire sel_2659;
  wire sel_2_506;
  wire sel_2660;
  wire sel_2_507;
  wire sel_2661;
  wire sel_2662;
  wire sel_2663;
  reg  sel_2_508;
  reg  [11:0] cont_bits_21_2;  // boolean [12]
  wire signed [31:0] sel_2664;  // int32
  wire signed [31:0] sel_2665;  // int32
  wire signed [31:0] sel_2666;  // int32
  wire signed [31:0] sel_2667;  // int32
  wire signed [31:0] sel_2668;  // int32
  wire signed [31:0] sel_2669;  // int32
  wire signed [31:0] sel_2670;  // int32
  wire signed [31:0] sel_2671;  // int32
  wire signed [31:0] sel_2672;  // int32
  wire signed [31:0] sel_2673;  // int32
  wire signed [31:0] sel_2674;  // int32
  wire signed [31:0] sel_2675;  // int32
  wire signed [31:0] s_221;  // int32
  wire signed [31:0] sel_1_483;  // int32
  wire signed [31:0] sel_2676;  // int32
  wire signed [31:0] sel_1_484;  // int32
  wire signed [31:0] sel_2677;  // int32
  wire signed [31:0] sel_1_485;  // int32
  wire signed [31:0] sel_2678;  // int32
  wire signed [31:0] sel_2679;  // int32
  wire signed [31:0] sel_2680;  // int32
  reg signed [31:0] sel_1_486;  // int32
  wire tmp_199;
  wire sel_2681;
  wire sel_2682;
  wire sel_2683;
  wire sel_2684;
  wire sel_2685;
  wire sel_2686;
  wire sel_2687;
  wire sel_2688;
  wire sel_2689;
  wire sel_2690;
  wire sel_2691;
  wire sel_2692;
  wire s_222;
  wire sel_2_509;
  wire sel_2693;
  wire sel_2_510;
  wire sel_2694;
  wire sel_2_511;
  wire sel_2695;
  wire sel_2696;
  wire sel_2697;
  reg  sel_2_512;
  reg  [11:0] cont_bits_21_3;  // boolean [12]
  wire signed [31:0] sel_2698;  // int32
  wire signed [31:0] sel_2699;  // int32
  wire signed [31:0] sel_2700;  // int32
  wire signed [31:0] sel_2701;  // int32
  wire signed [31:0] sel_2702;  // int32
  wire signed [31:0] sel_2703;  // int32
  wire signed [31:0] sel_2704;  // int32
  wire signed [31:0] sel_2705;  // int32
  wire signed [31:0] sel_2706;  // int32
  wire signed [31:0] sel_2707;  // int32
  wire signed [31:0] sel_2708;  // int32
  wire signed [31:0] sel_2709;  // int32
  wire signed [31:0] s_223;  // int32
  wire signed [31:0] sel_1_487;  // int32
  wire signed [31:0] sel_2710;  // int32
  wire signed [31:0] sel_1_488;  // int32
  wire signed [31:0] sel_2711;  // int32
  wire signed [31:0] sel_1_489;  // int32
  wire signed [31:0] sel_2712;  // int32
  wire signed [31:0] sel_2713;  // int32
  wire signed [31:0] sel_2714;  // int32
  reg signed [31:0] sel_1_490;  // int32
  wire tmp_200;
  wire sel_2715;
  wire sel_2716;
  wire sel_2717;
  wire sel_2718;
  wire sel_2719;
  wire sel_2720;
  wire sel_2721;
  wire sel_2722;
  wire sel_2723;
  wire sel_2724;
  wire sel_2725;
  wire sel_2726;
  wire s_224;
  wire sel_2_513;
  wire sel_2727;
  wire sel_2_514;
  wire sel_2728;
  wire sel_2_515;
  wire sel_2729;
  wire sel_2730;
  wire sel_2731;
  reg  sel_2_516;
  reg  [11:0] cont_bits_21_4;  // boolean [12]
  wire signed [31:0] sel_2732;  // int32
  wire signed [31:0] sel_2733;  // int32
  wire signed [31:0] sel_2734;  // int32
  wire signed [31:0] sel_2735;  // int32
  wire signed [31:0] sel_2736;  // int32
  wire signed [31:0] sel_2737;  // int32
  wire signed [31:0] sel_2738;  // int32
  wire signed [31:0] sel_2739;  // int32
  wire signed [31:0] sel_2740;  // int32
  wire signed [31:0] sel_2741;  // int32
  wire signed [31:0] sel_2742;  // int32
  wire signed [31:0] sel_2743;  // int32
  wire signed [31:0] s_225;  // int32
  wire signed [31:0] sel_1_491;  // int32
  wire signed [31:0] sel_2744;  // int32
  wire signed [31:0] sel_1_492;  // int32
  wire signed [31:0] sel_2745;  // int32
  wire signed [31:0] sel_1_493;  // int32
  wire signed [31:0] sel_2746;  // int32
  wire signed [31:0] sel_2747;  // int32
  wire signed [31:0] sel_2748;  // int32
  reg signed [31:0] sel_1_494;  // int32
  wire tmp_201;
  wire sel_2749;
  wire sel_2750;
  wire sel_2751;
  wire sel_2752;
  wire sel_2753;
  wire sel_2754;
  wire sel_2755;
  wire sel_2756;
  wire sel_2757;
  wire sel_2758;
  wire sel_2759;
  wire sel_2760;
  wire s_226;
  wire sel_2_517;
  wire sel_2761;
  wire sel_2_518;
  wire sel_2762;
  wire sel_2_519;
  wire sel_2763;
  wire sel_2764;
  wire sel_2765;
  reg  sel_2_520;
  reg  [11:0] cont_bits_21_5;  // boolean [12]
  wire signed [31:0] sel_2766;  // int32
  wire signed [31:0] sel_2767;  // int32
  wire signed [31:0] sel_2768;  // int32
  wire signed [31:0] sel_2769;  // int32
  wire signed [31:0] sel_2770;  // int32
  wire signed [31:0] sel_2771;  // int32
  wire signed [31:0] sel_2772;  // int32
  wire signed [31:0] sel_2773;  // int32
  wire signed [31:0] sel_2774;  // int32
  wire signed [31:0] sel_2775;  // int32
  wire signed [31:0] sel_2776;  // int32
  wire signed [31:0] sel_2777;  // int32
  wire signed [31:0] s_227;  // int32
  wire signed [31:0] sel_1_495;  // int32
  wire signed [31:0] sel_2778;  // int32
  wire signed [31:0] sel_1_496;  // int32
  wire signed [31:0] sel_2779;  // int32
  wire signed [31:0] sel_1_497;  // int32
  wire signed [31:0] sel_2780;  // int32
  wire signed [31:0] sel_2781;  // int32
  wire signed [31:0] sel_2782;  // int32
  reg signed [31:0] sel_1_498;  // int32
  wire tmp_202;
  wire sel_2783;
  wire sel_2784;
  wire sel_2785;
  wire sel_2786;
  wire sel_2787;
  wire sel_2788;
  wire sel_2789;
  wire sel_2790;
  wire sel_2791;
  wire sel_2792;
  wire sel_2793;
  wire sel_2794;
  wire s_228;
  wire sel_2_521;
  wire sel_2795;
  wire sel_2_522;
  wire sel_2796;
  wire sel_2_523;
  wire sel_2797;
  wire sel_2798;
  wire sel_2799;
  reg  sel_2_524;
  reg  [11:0] cont_bits_21_6;  // boolean [12]
  wire signed [31:0] sel_2800;  // int32
  wire signed [31:0] sel_2801;  // int32
  wire signed [31:0] sel_2802;  // int32
  wire signed [31:0] sel_2803;  // int32
  wire signed [31:0] sel_2804;  // int32
  wire signed [31:0] sel_2805;  // int32
  wire signed [31:0] sel_2806;  // int32
  wire signed [31:0] sel_2807;  // int32
  wire signed [31:0] sel_2808;  // int32
  wire signed [31:0] sel_2809;  // int32
  wire signed [31:0] sel_2810;  // int32
  wire signed [31:0] sel_2811;  // int32
  wire signed [31:0] s_229;  // int32
  wire signed [31:0] sel_1_499;  // int32
  wire signed [31:0] sel_2812;  // int32
  wire signed [31:0] sel_1_500;  // int32
  wire signed [31:0] sel_2813;  // int32
  wire signed [31:0] sel_1_501;  // int32
  wire signed [31:0] sel_2814;  // int32
  wire signed [31:0] sel_2815;  // int32
  wire signed [31:0] sel_2816;  // int32
  reg signed [31:0] sel_1_502;  // int32
  wire tmp_203;
  wire sel_2817;
  wire sel_2818;
  wire sel_2819;
  wire sel_2820;
  wire sel_2821;
  wire sel_2822;
  wire sel_2823;
  wire sel_2824;
  wire sel_2825;
  wire sel_2826;
  wire sel_2827;
  wire sel_2828;
  wire s_230;
  wire sel_2_525;
  wire sel_2829;
  wire sel_2_526;
  wire sel_2830;
  wire sel_2_527;
  wire sel_2831;
  wire sel_2832;
  wire sel_2833;
  reg  sel_2_528;
  reg  [11:0] cont_bits_21_7;  // boolean [12]
  wire signed [31:0] sel_2834;  // int32
  wire signed [31:0] sel_2835;  // int32
  wire signed [31:0] sel_2836;  // int32
  wire signed [31:0] sel_2837;  // int32
  wire signed [31:0] sel_2838;  // int32
  wire signed [31:0] sel_2839;  // int32
  wire signed [31:0] sel_2840;  // int32
  wire signed [31:0] sel_2841;  // int32
  wire signed [31:0] sel_2842;  // int32
  wire signed [31:0] sel_2843;  // int32
  wire signed [31:0] sel_2844;  // int32
  wire signed [31:0] sel_2845;  // int32
  wire signed [31:0] s_231;  // int32
  wire signed [31:0] sel_1_503;  // int32
  wire signed [31:0] sel_2846;  // int32
  wire signed [31:0] sel_1_504;  // int32
  wire signed [31:0] sel_2847;  // int32
  wire signed [31:0] sel_1_505;  // int32
  wire signed [31:0] sel_2848;  // int32
  wire signed [31:0] sel_2849;  // int32
  wire signed [31:0] sel_2850;  // int32
  reg signed [31:0] sel_1_506;  // int32
  wire tmp_204;
  wire sel_2851;
  wire sel_2852;
  wire sel_2853;
  wire sel_2854;
  wire sel_2855;
  wire sel_2856;
  wire sel_2857;
  wire sel_2858;
  wire sel_2859;
  wire sel_2860;
  wire sel_2861;
  wire sel_2862;
  wire s_232;
  wire sel_2_529;
  wire sel_2863;
  wire sel_2_530;
  wire sel_2864;
  wire sel_2_531;
  wire sel_2865;
  wire sel_2866;
  wire sel_2867;
  reg  sel_2_532;
  reg  [11:0] cont_bits_21_8;  // boolean [12]
  wire signed [31:0] sel_2868;  // int32
  wire signed [31:0] sel_2869;  // int32
  wire signed [31:0] sel_2870;  // int32
  wire signed [31:0] sel_2871;  // int32
  wire signed [31:0] sel_2872;  // int32
  wire signed [31:0] sel_2873;  // int32
  wire signed [31:0] sel_2874;  // int32
  wire signed [31:0] sel_2875;  // int32
  wire signed [31:0] sel_2876;  // int32
  wire signed [31:0] sel_2877;  // int32
  wire signed [31:0] sel_2878;  // int32
  wire signed [31:0] sel_2879;  // int32
  wire signed [31:0] s_233;  // int32
  wire signed [31:0] sel_1_507;  // int32
  wire signed [31:0] sel_2880;  // int32
  wire signed [31:0] sel_1_508;  // int32
  wire signed [31:0] sel_2881;  // int32
  wire signed [31:0] sel_1_509;  // int32
  wire signed [31:0] sel_2882;  // int32
  wire signed [31:0] sel_2883;  // int32
  wire signed [31:0] sel_2884;  // int32
  reg signed [31:0] sel_1_510;  // int32
  wire tmp_205;
  wire sel_2885;
  wire sel_2886;
  wire sel_2887;
  wire sel_2888;
  wire sel_2889;
  wire sel_2890;
  wire sel_2891;
  wire sel_2892;
  wire sel_2893;
  wire sel_2894;
  wire sel_2895;
  wire sel_2896;
  wire s_234;
  wire sel_2_533;
  wire sel_2897;
  wire sel_2_534;
  wire sel_2898;
  wire sel_2_535;
  wire sel_2899;
  wire sel_2900;
  wire sel_2901;
  reg  sel_2_536;
  reg  [11:0] cont_bits_21_9;  // boolean [12]
  wire signed [31:0] sel_2902;  // int32
  wire signed [31:0] sel_2903;  // int32
  wire signed [31:0] sel_2904;  // int32
  wire signed [31:0] sel_2905;  // int32
  wire signed [31:0] sel_2906;  // int32
  wire signed [31:0] sel_2907;  // int32
  wire signed [31:0] sel_2908;  // int32
  wire signed [31:0] sel_2909;  // int32
  wire signed [31:0] sel_2910;  // int32
  wire signed [31:0] sel_2911;  // int32
  wire signed [31:0] sel_2912;  // int32
  wire signed [31:0] sel_2913;  // int32
  wire signed [31:0] s_235;  // int32
  wire signed [31:0] sel_1_511;  // int32
  wire signed [31:0] sel_2914;  // int32
  wire signed [31:0] sel_1_512;  // int32
  wire signed [31:0] sel_2915;  // int32
  wire signed [31:0] sel_1_513;  // int32
  wire signed [31:0] sel_2916;  // int32
  wire signed [31:0] sel_2917;  // int32
  wire signed [31:0] sel_2918;  // int32
  reg signed [31:0] sel_1_514;  // int32
  wire tmp_206;
  wire sel_2919;
  wire sel_2920;
  wire sel_2921;
  wire sel_2922;
  wire sel_2923;
  wire sel_2924;
  wire sel_2925;
  wire sel_2926;
  wire sel_2927;
  wire sel_2928;
  wire sel_2929;
  wire sel_2930;
  wire s_236;
  wire sel_2_537;
  wire sel_2931;
  wire sel_2_538;
  wire sel_2932;
  wire sel_2_539;
  wire sel_2933;
  wire sel_2934;
  wire sel_2935;
  reg  sel_2_540;
  reg  [11:0] cont_bits_21_10;  // boolean [12]
  wire signed [31:0] sel_2936;  // int32
  wire signed [31:0] sel_2937;  // int32
  wire signed [31:0] sel_2938;  // int32
  wire signed [31:0] sel_2939;  // int32
  wire signed [31:0] sel_2940;  // int32
  wire signed [31:0] sel_2941;  // int32
  wire signed [31:0] sel_2942;  // int32
  wire signed [31:0] sel_2943;  // int32
  wire signed [31:0] sel_2944;  // int32
  wire signed [31:0] sel_2945;  // int32
  wire signed [31:0] sel_2946;  // int32
  wire signed [31:0] sel_2947;  // int32
  wire signed [31:0] s_237;  // int32
  wire signed [31:0] sel_1_515;  // int32
  wire signed [31:0] sel_2948;  // int32
  wire signed [31:0] sel_1_516;  // int32
  wire signed [31:0] sel_2949;  // int32
  wire signed [31:0] sel_1_517;  // int32
  wire signed [31:0] sel_2950;  // int32
  wire signed [31:0] sel_2951;  // int32
  wire signed [31:0] sel_2952;  // int32
  reg signed [31:0] sel_1_518;  // int32
  wire tmp_207;
  wire sel_2953;
  wire sel_2954;
  wire sel_2955;
  wire sel_2956;
  wire sel_2957;
  wire sel_2958;
  wire sel_2959;
  wire sel_2960;
  wire sel_2961;
  wire sel_2962;
  wire sel_2963;
  wire sel_2964;
  wire s_238;
  wire sel_2_541;
  wire sel_2965;
  wire sel_2_542;
  wire sel_2966;
  wire sel_2_543;
  wire sel_2967;
  wire sel_2968;
  wire sel_2969;
  reg  sel_2_544;
  reg  [11:0] cont_bits_21_11;  // boolean [12]
  wire signed [31:0] sel_2970;  // int32
  wire signed [31:0] sel_2971;  // int32
  wire signed [31:0] sel_2972;  // int32
  wire signed [31:0] sel_2973;  // int32
  wire signed [31:0] sel_2974;  // int32
  wire signed [31:0] sel_2975;  // int32
  wire signed [31:0] sel_2976;  // int32
  wire signed [31:0] sel_2977;  // int32
  wire signed [31:0] sel_2978;  // int32
  wire signed [31:0] sel_2979;  // int32
  wire signed [31:0] sel_2980;  // int32
  wire signed [31:0] sel_2981;  // int32
  wire signed [31:0] s_239;  // int32
  wire signed [31:0] sel_1_519;  // int32
  wire signed [31:0] sel_2982;  // int32
  wire signed [31:0] sel_1_520;  // int32
  wire signed [31:0] sel_2983;  // int32
  wire signed [31:0] sel_1_521;  // int32
  wire signed [31:0] sel_2984;  // int32
  wire signed [31:0] sel_2985;  // int32
  wire signed [31:0] sel_2986;  // int32
  reg signed [31:0] sel_1_522;  // int32
  wire tmp_208;
  wire sel_2987;
  wire sel_2988;
  wire sel_2989;
  wire sel_2990;
  wire sel_2991;
  wire sel_2992;
  wire sel_2993;
  wire sel_2994;
  wire sel_2995;
  wire sel_2996;
  wire sel_2997;
  wire sel_2998;
  wire s_240;
  wire sel_2_545;
  wire sel_2999;
  wire sel_2_546;
  wire sel_3000;
  wire sel_2_547;
  wire sel_3001;
  wire sel_3002;
  wire sel_3003;
  reg  sel_2_548;
  reg  [11:0] cont_bits_21_12;  // boolean [12]
  wire signed [31:0] sel_3004;  // int32
  wire signed [31:0] sel_3005;  // int32
  wire signed [31:0] sel_3006;  // int32
  wire signed [31:0] sel_3007;  // int32
  wire signed [31:0] sel_3008;  // int32
  wire signed [31:0] sel_3009;  // int32
  wire signed [31:0] sel_3010;  // int32
  wire signed [31:0] sel_3011;  // int32
  wire signed [31:0] sel_3012;  // int32
  wire signed [31:0] sel_3013;  // int32
  wire signed [31:0] sel_3014;  // int32
  wire signed [31:0] sel_3015;  // int32
  wire signed [31:0] s_241;  // int32
  wire signed [31:0] sel_1_523;  // int32
  wire signed [31:0] sel_3016;  // int32
  wire signed [31:0] sel_1_524;  // int32
  wire signed [31:0] sel_3017;  // int32
  wire signed [31:0] sel_1_525;  // int32
  wire signed [31:0] sel_3018;  // int32
  wire signed [31:0] sel_3019;  // int32
  wire signed [31:0] sel_3020;  // int32
  reg signed [31:0] sel_1_526;  // int32
  wire cont_bits_21_13;
  wire sel_1_527;
  wire [11:0] cont_bits_12;  // boolean [12]
  reg [15:0] r_v12;  // uint16
  wire [15:0] tmp_209;  // uint16
  wire [15:0] tmp_210;  // uint16
  wire [15:0] tmp_211;  // uint16
  wire [15:0] tmp_212;  // uint16
  wire [15:0] tmp_213;  // uint16
  wire [15:0] tmp_214;  // uint16
  wire [15:0] tmp_215;  // uint16
  wire [15:0] tmp_216;  // uint16
  reg [15:0] tmp_217;  // uint16
  wire functionOutput_0_6;
  wire functionOutput_1_6;
  wire functionOutput_2_6;
  wire functionOutput_3_6;
  wire functionOutput_4_6;
  wire functionOutput_5_6;
  wire functionOutput_6_6;
  wire functionOutput_7_6;
  wire functionOutput_8_6;
  wire functionOutput_9_6;
  wire functionOutput_10_6;
  wire functionOutput_11_6;
  wire [11:0] functionOutput_17;  // boolean [12]
  wire signed [31:0] sel_3021;  // int32
  wire signed [31:0] sel_3022;  // int32
  wire signed [31:0] sel_3023;  // int32
  wire signed [31:0] sel_3024;  // int32
  wire signed [31:0] sel_3025;  // int32
  wire signed [31:0] sel_3026;  // int32
  wire signed [31:0] sel_3027;  // int32
  wire signed [31:0] sel_3028;  // int32
  wire signed [31:0] sel_3029;  // int32
  wire signed [31:0] sel_3030;  // int32
  wire signed [31:0] sel_3031;  // int32
  wire signed [31:0] sel_3032;  // int32
  wire signed [31:0] s_242;  // int32
  wire signed [31:0] sel_1_528;  // int32
  wire signed [31:0] sel_3033;  // int32
  wire signed [31:0] sel_1_529;  // int32
  wire signed [31:0] sel_3034;  // int32
  wire signed [31:0] sel_3035;  // int32
  wire signed [31:0] sel_3036;  // int32
  reg signed [31:0] sel_1_530;  // int32
  wire tmp_218;
  wire sel_3037;
  wire sel_3038;
  wire sel_3039;
  wire sel_3040;
  wire sel_3041;
  wire sel_3042;
  wire sel_3043;
  wire sel_3044;
  wire sel_3045;
  wire sel_3046;
  wire sel_3047;
  wire sel_3048;
  wire s_243;
  wire sel_2_549;
  wire sel_3049;
  wire sel_2_550;
  wire sel_3050;
  wire sel_3051;
  wire sel_3052;
  reg  sel_2_551;
  reg  [11:0] cont_bits_12_1;  // boolean [12]
  wire signed [31:0] sel_3053;  // int32
  wire signed [31:0] sel_3054;  // int32
  wire signed [31:0] sel_3055;  // int32
  wire signed [31:0] sel_3056;  // int32
  wire signed [31:0] sel_3057;  // int32
  wire signed [31:0] sel_3058;  // int32
  wire signed [31:0] sel_3059;  // int32
  wire signed [31:0] sel_3060;  // int32
  wire signed [31:0] sel_3061;  // int32
  wire signed [31:0] sel_3062;  // int32
  wire signed [31:0] sel_3063;  // int32
  wire signed [31:0] sel_3064;  // int32
  wire signed [31:0] s_244;  // int32
  wire signed [31:0] sel_1_531;  // int32
  wire signed [31:0] sel_3065;  // int32
  wire signed [31:0] sel_1_532;  // int32
  wire signed [31:0] sel_3066;  // int32
  wire signed [31:0] sel_3067;  // int32
  wire signed [31:0] sel_3068;  // int32
  reg signed [31:0] sel_1_533;  // int32
  wire tmp_219;
  wire sel_3069;
  wire sel_3070;
  wire sel_3071;
  wire sel_3072;
  wire sel_3073;
  wire sel_3074;
  wire sel_3075;
  wire sel_3076;
  wire sel_3077;
  wire sel_3078;
  wire sel_3079;
  wire sel_3080;
  wire s_245;
  wire sel_2_552;
  wire sel_3081;
  wire sel_2_553;
  wire sel_3082;
  wire sel_3083;
  wire sel_3084;
  reg  sel_2_554;
  reg  [11:0] cont_bits_12_2;  // boolean [12]
  wire signed [31:0] sel_3085;  // int32
  wire signed [31:0] sel_3086;  // int32
  wire signed [31:0] sel_3087;  // int32
  wire signed [31:0] sel_3088;  // int32
  wire signed [31:0] sel_3089;  // int32
  wire signed [31:0] sel_3090;  // int32
  wire signed [31:0] sel_3091;  // int32
  wire signed [31:0] sel_3092;  // int32
  wire signed [31:0] sel_3093;  // int32
  wire signed [31:0] sel_3094;  // int32
  wire signed [31:0] sel_3095;  // int32
  wire signed [31:0] sel_3096;  // int32
  wire signed [31:0] s_246;  // int32
  wire signed [31:0] sel_1_534;  // int32
  wire signed [31:0] sel_3097;  // int32
  wire signed [31:0] sel_1_535;  // int32
  wire signed [31:0] sel_3098;  // int32
  wire signed [31:0] sel_3099;  // int32
  wire signed [31:0] sel_3100;  // int32
  reg signed [31:0] sel_1_536;  // int32
  wire tmp_220;
  wire sel_3101;
  wire sel_3102;
  wire sel_3103;
  wire sel_3104;
  wire sel_3105;
  wire sel_3106;
  wire sel_3107;
  wire sel_3108;
  wire sel_3109;
  wire sel_3110;
  wire sel_3111;
  wire sel_3112;
  wire s_247;
  wire sel_2_555;
  wire sel_3113;
  wire sel_2_556;
  wire sel_3114;
  wire sel_3115;
  wire sel_3116;
  reg  sel_2_557;
  reg  [11:0] cont_bits_12_3;  // boolean [12]
  wire signed [31:0] sel_3117;  // int32
  wire signed [31:0] sel_3118;  // int32
  wire signed [31:0] sel_3119;  // int32
  wire signed [31:0] sel_3120;  // int32
  wire signed [31:0] sel_3121;  // int32
  wire signed [31:0] sel_3122;  // int32
  wire signed [31:0] sel_3123;  // int32
  wire signed [31:0] sel_3124;  // int32
  wire signed [31:0] sel_3125;  // int32
  wire signed [31:0] sel_3126;  // int32
  wire signed [31:0] sel_3127;  // int32
  wire signed [31:0] sel_3128;  // int32
  wire signed [31:0] s_248;  // int32
  wire signed [31:0] sel_1_537;  // int32
  wire signed [31:0] sel_3129;  // int32
  wire signed [31:0] sel_1_538;  // int32
  wire signed [31:0] sel_3130;  // int32
  wire signed [31:0] sel_3131;  // int32
  wire signed [31:0] sel_3132;  // int32
  reg signed [31:0] sel_1_539;  // int32
  wire tmp_221;
  wire sel_3133;
  wire sel_3134;
  wire sel_3135;
  wire sel_3136;
  wire sel_3137;
  wire sel_3138;
  wire sel_3139;
  wire sel_3140;
  wire sel_3141;
  wire sel_3142;
  wire sel_3143;
  wire sel_3144;
  wire s_249;
  wire sel_2_558;
  wire sel_3145;
  wire sel_2_559;
  wire sel_3146;
  wire sel_3147;
  wire sel_3148;
  reg  sel_2_560;
  reg  [11:0] cont_bits_12_4;  // boolean [12]
  wire signed [31:0] sel_3149;  // int32
  wire signed [31:0] sel_3150;  // int32
  wire signed [31:0] sel_3151;  // int32
  wire signed [31:0] sel_3152;  // int32
  wire signed [31:0] sel_3153;  // int32
  wire signed [31:0] sel_3154;  // int32
  wire signed [31:0] sel_3155;  // int32
  wire signed [31:0] sel_3156;  // int32
  wire signed [31:0] sel_3157;  // int32
  wire signed [31:0] sel_3158;  // int32
  wire signed [31:0] sel_3159;  // int32
  wire signed [31:0] sel_3160;  // int32
  wire signed [31:0] s_250;  // int32
  wire signed [31:0] sel_1_540;  // int32
  wire signed [31:0] sel_3161;  // int32
  wire signed [31:0] sel_1_541;  // int32
  wire signed [31:0] sel_3162;  // int32
  wire signed [31:0] sel_3163;  // int32
  wire signed [31:0] sel_3164;  // int32
  reg signed [31:0] sel_1_542;  // int32
  wire tmp_222;
  wire sel_3165;
  wire sel_3166;
  wire sel_3167;
  wire sel_3168;
  wire sel_3169;
  wire sel_3170;
  wire sel_3171;
  wire sel_3172;
  wire sel_3173;
  wire sel_3174;
  wire sel_3175;
  wire sel_3176;
  wire s_251;
  wire sel_2_561;
  wire sel_3177;
  wire sel_2_562;
  wire sel_3178;
  wire sel_3179;
  wire sel_3180;
  reg  sel_2_563;
  reg  [11:0] cont_bits_12_5;  // boolean [12]
  wire signed [31:0] sel_3181;  // int32
  wire signed [31:0] sel_3182;  // int32
  wire signed [31:0] sel_3183;  // int32
  wire signed [31:0] sel_3184;  // int32
  wire signed [31:0] sel_3185;  // int32
  wire signed [31:0] sel_3186;  // int32
  wire signed [31:0] sel_3187;  // int32
  wire signed [31:0] sel_3188;  // int32
  wire signed [31:0] sel_3189;  // int32
  wire signed [31:0] sel_3190;  // int32
  wire signed [31:0] sel_3191;  // int32
  wire signed [31:0] sel_3192;  // int32
  wire signed [31:0] s_252;  // int32
  wire signed [31:0] sel_1_543;  // int32
  wire signed [31:0] sel_3193;  // int32
  wire signed [31:0] sel_1_544;  // int32
  wire signed [31:0] sel_3194;  // int32
  wire signed [31:0] sel_3195;  // int32
  wire signed [31:0] sel_3196;  // int32
  reg signed [31:0] sel_1_545;  // int32
  wire tmp_223;
  wire sel_3197;
  wire sel_3198;
  wire sel_3199;
  wire sel_3200;
  wire sel_3201;
  wire sel_3202;
  wire sel_3203;
  wire sel_3204;
  wire sel_3205;
  wire sel_3206;
  wire sel_3207;
  wire sel_3208;
  wire s_253;
  wire sel_2_564;
  wire sel_3209;
  wire sel_2_565;
  wire sel_3210;
  wire sel_3211;
  wire sel_3212;
  reg  sel_2_566;
  reg  [11:0] cont_bits_12_6;  // boolean [12]
  wire signed [31:0] sel_3213;  // int32
  wire signed [31:0] sel_3214;  // int32
  wire signed [31:0] sel_3215;  // int32
  wire signed [31:0] sel_3216;  // int32
  wire signed [31:0] sel_3217;  // int32
  wire signed [31:0] sel_3218;  // int32
  wire signed [31:0] sel_3219;  // int32
  wire signed [31:0] sel_3220;  // int32
  wire signed [31:0] sel_3221;  // int32
  wire signed [31:0] sel_3222;  // int32
  wire signed [31:0] sel_3223;  // int32
  wire signed [31:0] sel_3224;  // int32
  wire signed [31:0] s_254;  // int32
  wire signed [31:0] sel_1_546;  // int32
  wire signed [31:0] sel_3225;  // int32
  wire signed [31:0] sel_1_547;  // int32
  wire signed [31:0] sel_3226;  // int32
  wire signed [31:0] sel_3227;  // int32
  wire signed [31:0] sel_3228;  // int32
  reg signed [31:0] sel_1_548;  // int32
  wire tmp_224;
  wire sel_3229;
  wire sel_3230;
  wire sel_3231;
  wire sel_3232;
  wire sel_3233;
  wire sel_3234;
  wire sel_3235;
  wire sel_3236;
  wire sel_3237;
  wire sel_3238;
  wire sel_3239;
  wire sel_3240;
  wire s_255;
  wire sel_2_567;
  wire sel_3241;
  wire sel_2_568;
  wire sel_3242;
  wire sel_3243;
  wire sel_3244;
  reg  sel_2_569;
  reg  [11:0] cont_bits_12_7;  // boolean [12]
  wire signed [31:0] sel_3245;  // int32
  wire signed [31:0] sel_3246;  // int32
  wire signed [31:0] sel_3247;  // int32
  wire signed [31:0] sel_3248;  // int32
  wire signed [31:0] sel_3249;  // int32
  wire signed [31:0] sel_3250;  // int32
  wire signed [31:0] sel_3251;  // int32
  wire signed [31:0] sel_3252;  // int32
  wire signed [31:0] sel_3253;  // int32
  wire signed [31:0] sel_3254;  // int32
  wire signed [31:0] sel_3255;  // int32
  wire signed [31:0] sel_3256;  // int32
  wire signed [31:0] s_256;  // int32
  wire signed [31:0] sel_1_549;  // int32
  wire signed [31:0] sel_3257;  // int32
  wire signed [31:0] sel_1_550;  // int32
  wire signed [31:0] sel_3258;  // int32
  wire signed [31:0] sel_3259;  // int32
  wire signed [31:0] sel_3260;  // int32
  reg signed [31:0] sel_1_551;  // int32
  wire tmp_225;
  wire sel_3261;
  wire sel_3262;
  wire sel_3263;
  wire sel_3264;
  wire sel_3265;
  wire sel_3266;
  wire sel_3267;
  wire sel_3268;
  wire sel_3269;
  wire sel_3270;
  wire sel_3271;
  wire sel_3272;
  wire s_257;
  wire sel_2_570;
  wire sel_3273;
  wire sel_2_571;
  wire sel_3274;
  wire sel_3275;
  wire sel_3276;
  reg  sel_2_572;
  reg  [11:0] cont_bits_12_8;  // boolean [12]
  wire signed [31:0] sel_3277;  // int32
  wire signed [31:0] sel_3278;  // int32
  wire signed [31:0] sel_3279;  // int32
  wire signed [31:0] sel_3280;  // int32
  wire signed [31:0] sel_3281;  // int32
  wire signed [31:0] sel_3282;  // int32
  wire signed [31:0] sel_3283;  // int32
  wire signed [31:0] sel_3284;  // int32
  wire signed [31:0] sel_3285;  // int32
  wire signed [31:0] sel_3286;  // int32
  wire signed [31:0] sel_3287;  // int32
  wire signed [31:0] sel_3288;  // int32
  wire signed [31:0] s_258;  // int32
  wire signed [31:0] sel_1_552;  // int32
  wire signed [31:0] sel_3289;  // int32
  wire signed [31:0] sel_1_553;  // int32
  wire signed [31:0] sel_3290;  // int32
  wire signed [31:0] sel_3291;  // int32
  wire signed [31:0] sel_3292;  // int32
  reg signed [31:0] sel_1_554;  // int32
  wire tmp_226;
  wire sel_3293;
  wire sel_3294;
  wire sel_3295;
  wire sel_3296;
  wire sel_3297;
  wire sel_3298;
  wire sel_3299;
  wire sel_3300;
  wire sel_3301;
  wire sel_3302;
  wire sel_3303;
  wire sel_3304;
  wire s_259;
  wire sel_2_573;
  wire sel_3305;
  wire sel_2_574;
  wire sel_3306;
  wire sel_3307;
  wire sel_3308;
  reg  sel_2_575;
  reg  [11:0] cont_bits_12_9;  // boolean [12]
  wire signed [31:0] sel_3309;  // int32
  wire signed [31:0] sel_3310;  // int32
  wire signed [31:0] sel_3311;  // int32
  wire signed [31:0] sel_3312;  // int32
  wire signed [31:0] sel_3313;  // int32
  wire signed [31:0] sel_3314;  // int32
  wire signed [31:0] sel_3315;  // int32
  wire signed [31:0] sel_3316;  // int32
  wire signed [31:0] sel_3317;  // int32
  wire signed [31:0] sel_3318;  // int32
  wire signed [31:0] sel_3319;  // int32
  wire signed [31:0] sel_3320;  // int32
  wire signed [31:0] s_260;  // int32
  wire signed [31:0] sel_1_555;  // int32
  wire signed [31:0] sel_3321;  // int32
  wire signed [31:0] sel_1_556;  // int32
  wire signed [31:0] sel_3322;  // int32
  wire signed [31:0] sel_3323;  // int32
  wire signed [31:0] sel_3324;  // int32
  reg signed [31:0] sel_1_557;  // int32
  wire tmp_227;
  wire sel_3325;
  wire sel_3326;
  wire sel_3327;
  wire sel_3328;
  wire sel_3329;
  wire sel_3330;
  wire sel_3331;
  wire sel_3332;
  wire sel_3333;
  wire sel_3334;
  wire sel_3335;
  wire sel_3336;
  wire s_261;
  wire sel_2_576;
  wire sel_3337;
  wire sel_2_577;
  wire sel_3338;
  wire sel_3339;
  wire sel_3340;
  reg  sel_2_578;
  reg  [11:0] cont_bits_12_10;  // boolean [12]
  wire signed [31:0] sel_3341;  // int32
  wire signed [31:0] sel_3342;  // int32
  wire signed [31:0] sel_3343;  // int32
  wire signed [31:0] sel_3344;  // int32
  wire signed [31:0] sel_3345;  // int32
  wire signed [31:0] sel_3346;  // int32
  wire signed [31:0] sel_3347;  // int32
  wire signed [31:0] sel_3348;  // int32
  wire signed [31:0] sel_3349;  // int32
  wire signed [31:0] sel_3350;  // int32
  wire signed [31:0] sel_3351;  // int32
  wire signed [31:0] sel_3352;  // int32
  wire signed [31:0] s_262;  // int32
  wire signed [31:0] sel_1_558;  // int32
  wire signed [31:0] sel_3353;  // int32
  wire signed [31:0] sel_1_559;  // int32
  wire signed [31:0] sel_3354;  // int32
  wire signed [31:0] sel_3355;  // int32
  wire signed [31:0] sel_3356;  // int32
  reg signed [31:0] sel_1_560;  // int32
  wire tmp_228;
  wire sel_3357;
  wire sel_3358;
  wire sel_3359;
  wire sel_3360;
  wire sel_3361;
  wire sel_3362;
  wire sel_3363;
  wire sel_3364;
  wire sel_3365;
  wire sel_3366;
  wire sel_3367;
  wire sel_3368;
  wire s_263;
  wire sel_2_579;
  wire sel_3369;
  wire sel_2_580;
  wire sel_3370;
  wire sel_3371;
  wire sel_3372;
  reg  sel_2_581;
  reg  [11:0] cont_bits_12_11;  // boolean [12]
  wire signed [31:0] sel_3373;  // int32
  wire signed [31:0] sel_3374;  // int32
  wire signed [31:0] sel_3375;  // int32
  wire signed [31:0] sel_3376;  // int32
  wire signed [31:0] sel_3377;  // int32
  wire signed [31:0] sel_3378;  // int32
  wire signed [31:0] sel_3379;  // int32
  wire signed [31:0] sel_3380;  // int32
  wire signed [31:0] sel_3381;  // int32
  wire signed [31:0] sel_3382;  // int32
  wire signed [31:0] sel_3383;  // int32
  wire signed [31:0] sel_3384;  // int32
  wire signed [31:0] s_264;  // int32
  wire signed [31:0] sel_1_561;  // int32
  wire signed [31:0] sel_3385;  // int32
  wire signed [31:0] sel_1_562;  // int32
  wire signed [31:0] sel_3386;  // int32
  wire signed [31:0] sel_3387;  // int32
  wire signed [31:0] sel_3388;  // int32
  reg signed [31:0] sel_1_563;  // int32
  wire tmp_229;
  wire sel_3389;
  wire sel_3390;
  wire sel_3391;
  wire sel_3392;
  wire sel_3393;
  wire sel_3394;
  wire sel_3395;
  wire sel_3396;
  wire sel_3397;
  wire sel_3398;
  wire sel_3399;
  wire sel_3400;
  wire s_265;
  wire sel_2_582;
  wire sel_3401;
  wire sel_2_583;
  wire sel_3402;
  wire sel_3403;
  wire sel_3404;
  reg  sel_2_584;
  reg  [11:0] cont_bits_12_12;  // boolean [12]
  wire signed [31:0] sel_3405;  // int32
  wire signed [31:0] sel_3406;  // int32
  wire signed [31:0] sel_3407;  // int32
  wire signed [31:0] sel_3408;  // int32
  wire signed [31:0] sel_3409;  // int32
  wire signed [31:0] sel_3410;  // int32
  wire signed [31:0] sel_3411;  // int32
  wire signed [31:0] sel_3412;  // int32
  wire signed [31:0] sel_3413;  // int32
  wire signed [31:0] sel_3414;  // int32
  wire signed [31:0] sel_3415;  // int32
  wire signed [31:0] sel_3416;  // int32
  wire signed [31:0] s_266;  // int32
  wire signed [31:0] sel_1_564;  // int32
  wire signed [31:0] sel_3417;  // int32
  wire signed [31:0] sel_1_565;  // int32
  wire signed [31:0] sel_3418;  // int32
  wire signed [31:0] sel_3419;  // int32
  wire signed [31:0] sel_3420;  // int32
  reg signed [31:0] sel_1_566;  // int32
  wire cont_bits_12_13;
  wire sel_1_567;
  wire [11:0] cont_bits;  // boolean [12]
  reg [15:0] r_v11;  // uint16
  wire [15:0] tmp_230;  // uint16
  wire [15:0] tmp_231;  // uint16
  wire [15:0] tmp_232;  // uint16
  wire [15:0] tmp_233;  // uint16
  wire [15:0] tmp_234;  // uint16
  wire [15:0] tmp_235;  // uint16
  wire [15:0] tmp_236;  // uint16
  wire [15:0] tmp_237;  // uint16
  reg [15:0] tmp_238;  // uint16
  wire functionOutput_0_7;
  wire functionOutput_1_7;
  wire functionOutput_2_7;
  wire functionOutput_3_7;
  wire functionOutput_4_7;
  wire functionOutput_5_7;
  wire functionOutput_6_7;
  wire functionOutput_7_7;
  wire functionOutput_8_7;
  wire functionOutput_9_7;
  wire functionOutput_10_7;
  wire functionOutput_11_7;
  wire [11:0] functionOutput_18;  // boolean [12]
  wire signed [31:0] sel_3421;  // int32
  wire signed [31:0] sel_3422;  // int32
  wire signed [31:0] sel_3423;  // int32
  wire signed [31:0] sel_3424;  // int32
  wire signed [31:0] sel_3425;  // int32
  wire signed [31:0] sel_3426;  // int32
  wire signed [31:0] sel_3427;  // int32
  wire signed [31:0] sel_3428;  // int32
  wire signed [31:0] sel_3429;  // int32
  wire signed [31:0] sel_3430;  // int32
  wire signed [31:0] sel_3431;  // int32
  wire signed [31:0] sel_3432;  // int32
  wire signed [31:0] s_267;  // int32
  wire signed [31:0] sel_1_568;  // int32
  wire signed [31:0] sel_3433;  // int32
  wire signed [31:0] sel_3434;  // int32
  wire signed [31:0] sel_3435;  // int32
  reg signed [31:0] sel_1_569;  // int32
  wire tmp_239;
  wire sel_3436;
  wire sel_3437;
  wire sel_3438;
  wire sel_3439;
  wire sel_3440;
  wire sel_3441;
  wire sel_3442;
  wire sel_3443;
  wire sel_3444;
  wire sel_3445;
  wire sel_3446;
  wire sel_3447;
  wire s_268;
  wire sel_2_585;
  wire sel_3448;
  wire sel_3449;
  wire sel_3450;
  reg  sel_2_586;
  reg  [11:0] cont_bits_1;  // boolean [12]
  wire signed [31:0] sel_3451;  // int32
  wire signed [31:0] sel_3452;  // int32
  wire signed [31:0] sel_3453;  // int32
  wire signed [31:0] sel_3454;  // int32
  wire signed [31:0] sel_3455;  // int32
  wire signed [31:0] sel_3456;  // int32
  wire signed [31:0] sel_3457;  // int32
  wire signed [31:0] sel_3458;  // int32
  wire signed [31:0] sel_3459;  // int32
  wire signed [31:0] sel_3460;  // int32
  wire signed [31:0] sel_3461;  // int32
  wire signed [31:0] sel_3462;  // int32
  wire signed [31:0] s_269;  // int32
  wire signed [31:0] sel_1_570;  // int32
  wire signed [31:0] sel_3463;  // int32
  wire signed [31:0] sel_3464;  // int32
  wire signed [31:0] sel_3465;  // int32
  reg signed [31:0] sel_1_571;  // int32
  wire tmp_240;
  wire sel_3466;
  wire sel_3467;
  wire sel_3468;
  wire sel_3469;
  wire sel_3470;
  wire sel_3471;
  wire sel_3472;
  wire sel_3473;
  wire sel_3474;
  wire sel_3475;
  wire sel_3476;
  wire sel_3477;
  wire s_270;
  wire sel_2_587;
  wire sel_3478;
  wire sel_3479;
  wire sel_3480;
  reg  sel_2_588;
  reg  [11:0] cont_bits_2;  // boolean [12]
  wire signed [31:0] sel_3481;  // int32
  wire signed [31:0] sel_3482;  // int32
  wire signed [31:0] sel_3483;  // int32
  wire signed [31:0] sel_3484;  // int32
  wire signed [31:0] sel_3485;  // int32
  wire signed [31:0] sel_3486;  // int32
  wire signed [31:0] sel_3487;  // int32
  wire signed [31:0] sel_3488;  // int32
  wire signed [31:0] sel_3489;  // int32
  wire signed [31:0] sel_3490;  // int32
  wire signed [31:0] sel_3491;  // int32
  wire signed [31:0] sel_3492;  // int32
  wire signed [31:0] s_271;  // int32
  wire signed [31:0] sel_1_572;  // int32
  wire signed [31:0] sel_3493;  // int32
  wire signed [31:0] sel_3494;  // int32
  wire signed [31:0] sel_3495;  // int32
  reg signed [31:0] sel_1_573;  // int32
  wire tmp_241;
  wire sel_3496;
  wire sel_3497;
  wire sel_3498;
  wire sel_3499;
  wire sel_3500;
  wire sel_3501;
  wire sel_3502;
  wire sel_3503;
  wire sel_3504;
  wire sel_3505;
  wire sel_3506;
  wire sel_3507;
  wire s_272;
  wire sel_2_589;
  wire sel_3508;
  wire sel_3509;
  wire sel_3510;
  reg  sel_2_590;
  reg  [11:0] cont_bits_3;  // boolean [12]
  wire signed [31:0] sel_3511;  // int32
  wire signed [31:0] sel_3512;  // int32
  wire signed [31:0] sel_3513;  // int32
  wire signed [31:0] sel_3514;  // int32
  wire signed [31:0] sel_3515;  // int32
  wire signed [31:0] sel_3516;  // int32
  wire signed [31:0] sel_3517;  // int32
  wire signed [31:0] sel_3518;  // int32
  wire signed [31:0] sel_3519;  // int32
  wire signed [31:0] sel_3520;  // int32
  wire signed [31:0] sel_3521;  // int32
  wire signed [31:0] sel_3522;  // int32
  wire signed [31:0] s_273;  // int32
  wire signed [31:0] sel_1_574;  // int32
  wire signed [31:0] sel_3523;  // int32
  wire signed [31:0] sel_3524;  // int32
  wire signed [31:0] sel_3525;  // int32
  reg signed [31:0] sel_1_575;  // int32
  wire tmp_242;
  wire sel_3526;
  wire sel_3527;
  wire sel_3528;
  wire sel_3529;
  wire sel_3530;
  wire sel_3531;
  wire sel_3532;
  wire sel_3533;
  wire sel_3534;
  wire sel_3535;
  wire sel_3536;
  wire sel_3537;
  wire s_274;
  wire sel_2_591;
  wire sel_3538;
  wire sel_3539;
  wire sel_3540;
  reg  sel_2_592;
  reg  [11:0] cont_bits_4;  // boolean [12]
  wire signed [31:0] sel_3541;  // int32
  wire signed [31:0] sel_3542;  // int32
  wire signed [31:0] sel_3543;  // int32
  wire signed [31:0] sel_3544;  // int32
  wire signed [31:0] sel_3545;  // int32
  wire signed [31:0] sel_3546;  // int32
  wire signed [31:0] sel_3547;  // int32
  wire signed [31:0] sel_3548;  // int32
  wire signed [31:0] sel_3549;  // int32
  wire signed [31:0] sel_3550;  // int32
  wire signed [31:0] sel_3551;  // int32
  wire signed [31:0] sel_3552;  // int32
  wire signed [31:0] s_275;  // int32
  wire signed [31:0] sel_1_576;  // int32
  wire signed [31:0] sel_3553;  // int32
  wire signed [31:0] sel_3554;  // int32
  wire signed [31:0] sel_3555;  // int32
  reg signed [31:0] sel_1_577;  // int32
  wire tmp_243;
  wire sel_3556;
  wire sel_3557;
  wire sel_3558;
  wire sel_3559;
  wire sel_3560;
  wire sel_3561;
  wire sel_3562;
  wire sel_3563;
  wire sel_3564;
  wire sel_3565;
  wire sel_3566;
  wire sel_3567;
  wire s_276;
  wire sel_2_593;
  wire sel_3568;
  wire sel_3569;
  wire sel_3570;
  reg  sel_2_594;
  reg  [11:0] cont_bits_5;  // boolean [12]
  wire signed [31:0] sel_3571;  // int32
  wire signed [31:0] sel_3572;  // int32
  wire signed [31:0] sel_3573;  // int32
  wire signed [31:0] sel_3574;  // int32
  wire signed [31:0] sel_3575;  // int32
  wire signed [31:0] sel_3576;  // int32
  wire signed [31:0] sel_3577;  // int32
  wire signed [31:0] sel_3578;  // int32
  wire signed [31:0] sel_3579;  // int32
  wire signed [31:0] sel_3580;  // int32
  wire signed [31:0] sel_3581;  // int32
  wire signed [31:0] sel_3582;  // int32
  wire signed [31:0] s_277;  // int32
  wire signed [31:0] sel_1_578;  // int32
  wire signed [31:0] sel_3583;  // int32
  wire signed [31:0] sel_3584;  // int32
  wire signed [31:0] sel_3585;  // int32
  reg signed [31:0] sel_1_579;  // int32
  wire tmp_244;
  wire sel_3586;
  wire sel_3587;
  wire sel_3588;
  wire sel_3589;
  wire sel_3590;
  wire sel_3591;
  wire sel_3592;
  wire sel_3593;
  wire sel_3594;
  wire sel_3595;
  wire sel_3596;
  wire sel_3597;
  wire s_278;
  wire sel_2_595;
  wire sel_3598;
  wire sel_3599;
  wire sel_3600;
  reg  sel_2_596;
  reg  [11:0] cont_bits_6;  // boolean [12]
  wire signed [31:0] sel_3601;  // int32
  wire signed [31:0] sel_3602;  // int32
  wire signed [31:0] sel_3603;  // int32
  wire signed [31:0] sel_3604;  // int32
  wire signed [31:0] sel_3605;  // int32
  wire signed [31:0] sel_3606;  // int32
  wire signed [31:0] sel_3607;  // int32
  wire signed [31:0] sel_3608;  // int32
  wire signed [31:0] sel_3609;  // int32
  wire signed [31:0] sel_3610;  // int32
  wire signed [31:0] sel_3611;  // int32
  wire signed [31:0] sel_3612;  // int32
  wire signed [31:0] s_279;  // int32
  wire signed [31:0] sel_1_580;  // int32
  wire signed [31:0] sel_3613;  // int32
  wire signed [31:0] sel_3614;  // int32
  wire signed [31:0] sel_3615;  // int32
  reg signed [31:0] sel_1_581;  // int32
  wire tmp_245;
  wire sel_3616;
  wire sel_3617;
  wire sel_3618;
  wire sel_3619;
  wire sel_3620;
  wire sel_3621;
  wire sel_3622;
  wire sel_3623;
  wire sel_3624;
  wire sel_3625;
  wire sel_3626;
  wire sel_3627;
  wire s_280;
  wire sel_2_597;
  wire sel_3628;
  wire sel_3629;
  wire sel_3630;
  reg  sel_2_598;
  reg  [11:0] cont_bits_7;  // boolean [12]
  wire signed [31:0] sel_3631;  // int32
  wire signed [31:0] sel_3632;  // int32
  wire signed [31:0] sel_3633;  // int32
  wire signed [31:0] sel_3634;  // int32
  wire signed [31:0] sel_3635;  // int32
  wire signed [31:0] sel_3636;  // int32
  wire signed [31:0] sel_3637;  // int32
  wire signed [31:0] sel_3638;  // int32
  wire signed [31:0] sel_3639;  // int32
  wire signed [31:0] sel_3640;  // int32
  wire signed [31:0] sel_3641;  // int32
  wire signed [31:0] sel_3642;  // int32
  wire signed [31:0] s_281;  // int32
  wire signed [31:0] sel_1_582;  // int32
  wire signed [31:0] sel_3643;  // int32
  wire signed [31:0] sel_3644;  // int32
  wire signed [31:0] sel_3645;  // int32
  reg signed [31:0] sel_1_583;  // int32
  wire tmp_246;
  wire sel_3646;
  wire sel_3647;
  wire sel_3648;
  wire sel_3649;
  wire sel_3650;
  wire sel_3651;
  wire sel_3652;
  wire sel_3653;
  wire sel_3654;
  wire sel_3655;
  wire sel_3656;
  wire sel_3657;
  wire s_282;
  wire sel_2_599;
  wire sel_3658;
  wire sel_3659;
  wire sel_3660;
  reg  sel_2_600;
  reg  [11:0] cont_bits_8;  // boolean [12]
  wire signed [31:0] sel_3661;  // int32
  wire signed [31:0] sel_3662;  // int32
  wire signed [31:0] sel_3663;  // int32
  wire signed [31:0] sel_3664;  // int32
  wire signed [31:0] sel_3665;  // int32
  wire signed [31:0] sel_3666;  // int32
  wire signed [31:0] sel_3667;  // int32
  wire signed [31:0] sel_3668;  // int32
  wire signed [31:0] sel_3669;  // int32
  wire signed [31:0] sel_3670;  // int32
  wire signed [31:0] sel_3671;  // int32
  wire signed [31:0] sel_3672;  // int32
  wire signed [31:0] s_283;  // int32
  wire signed [31:0] sel_1_584;  // int32
  wire signed [31:0] sel_3673;  // int32
  wire signed [31:0] sel_3674;  // int32
  wire signed [31:0] sel_3675;  // int32
  reg signed [31:0] sel_1_585;  // int32
  wire tmp_247;
  wire sel_3676;
  wire sel_3677;
  wire sel_3678;
  wire sel_3679;
  wire sel_3680;
  wire sel_3681;
  wire sel_3682;
  wire sel_3683;
  wire sel_3684;
  wire sel_3685;
  wire sel_3686;
  wire sel_3687;
  wire s_284;
  wire sel_2_601;
  wire sel_3688;
  wire sel_3689;
  wire sel_3690;
  reg  sel_2_602;
  reg  [11:0] cont_bits_9;  // boolean [12]
  wire signed [31:0] sel_3691;  // int32
  wire signed [31:0] sel_3692;  // int32
  wire signed [31:0] sel_3693;  // int32
  wire signed [31:0] sel_3694;  // int32
  wire signed [31:0] sel_3695;  // int32
  wire signed [31:0] sel_3696;  // int32
  wire signed [31:0] sel_3697;  // int32
  wire signed [31:0] sel_3698;  // int32
  wire signed [31:0] sel_3699;  // int32
  wire signed [31:0] sel_3700;  // int32
  wire signed [31:0] sel_3701;  // int32
  wire signed [31:0] sel_3702;  // int32
  wire signed [31:0] s_285;  // int32
  wire signed [31:0] sel_1_586;  // int32
  wire signed [31:0] sel_3703;  // int32
  wire signed [31:0] sel_3704;  // int32
  wire signed [31:0] sel_3705;  // int32
  reg signed [31:0] sel_1_587;  // int32
  wire tmp_248;
  wire sel_3706;
  wire sel_3707;
  wire sel_3708;
  wire sel_3709;
  wire sel_3710;
  wire sel_3711;
  wire sel_3712;
  wire sel_3713;
  wire sel_3714;
  wire sel_3715;
  wire sel_3716;
  wire sel_3717;
  wire s_286;
  wire sel_2_603;
  wire sel_3718;
  wire sel_3719;
  wire sel_3720;
  reg  sel_2_604;
  reg  [11:0] cont_bits_10;  // boolean [12]
  wire signed [31:0] sel_3721;  // int32
  wire signed [31:0] sel_3722;  // int32
  wire signed [31:0] sel_3723;  // int32
  wire signed [31:0] sel_3724;  // int32
  wire signed [31:0] sel_3725;  // int32
  wire signed [31:0] sel_3726;  // int32
  wire signed [31:0] sel_3727;  // int32
  wire signed [31:0] sel_3728;  // int32
  wire signed [31:0] sel_3729;  // int32
  wire signed [31:0] sel_3730;  // int32
  wire signed [31:0] sel_3731;  // int32
  wire signed [31:0] sel_3732;  // int32
  wire signed [31:0] s_287;  // int32
  wire signed [31:0] sel_1_588;  // int32
  wire signed [31:0] sel_3733;  // int32
  wire signed [31:0] sel_3734;  // int32
  wire signed [31:0] sel_3735;  // int32
  reg signed [31:0] sel_1_589;  // int32
  wire tmp_249;
  wire sel_3736;
  wire sel_3737;
  wire sel_3738;
  wire sel_3739;
  wire sel_3740;
  wire sel_3741;
  wire sel_3742;
  wire sel_3743;
  wire sel_3744;
  wire sel_3745;
  wire sel_3746;
  wire sel_3747;
  wire s_288;
  wire sel_2_605;
  wire sel_3748;
  wire sel_3749;
  wire sel_3750;
  reg  sel_2_606;
  reg  [11:0] cont_bits_11;  // boolean [12]
  wire signed [31:0] sel_3751;  // int32
  wire signed [31:0] sel_3752;  // int32
  wire signed [31:0] sel_3753;  // int32
  wire signed [31:0] sel_3754;  // int32
  wire signed [31:0] sel_3755;  // int32
  wire signed [31:0] sel_3756;  // int32
  wire signed [31:0] sel_3757;  // int32
  wire signed [31:0] sel_3758;  // int32
  wire signed [31:0] sel_3759;  // int32
  wire signed [31:0] sel_3760;  // int32
  wire signed [31:0] sel_3761;  // int32
  wire signed [31:0] sel_3762;  // int32
  wire signed [31:0] s_289;  // int32
  wire signed [31:0] sel_1_590;  // int32
  wire signed [31:0] sel_3763;  // int32
  wire signed [31:0] sel_3764;  // int32
  wire signed [31:0] sel_3765;  // int32
  reg signed [31:0] sel_1_591;  // int32
  wire tmp_250;
  wire sel_3766;
  wire sel_3767;
  wire sel_3768;
  wire sel_3769;
  wire sel_3770;
  wire sel_3771;
  wire sel_3772;
  wire sel_3773;
  wire sel_3774;
  wire sel_3775;
  wire sel_3776;
  wire sel_3777;
  wire s_290;
  wire sel_2_607;
  wire sel_3778;
  wire sel_3779;
  wire sel_3780;
  reg  sel_2_608;
  reg  [11:0] cont_bits_13;  // boolean [12]
  wire signed [31:0] sel_3781;  // int32
  wire signed [31:0] sel_3782;  // int32
  wire signed [31:0] sel_3783;  // int32
  wire signed [31:0] sel_3784;  // int32
  wire signed [31:0] sel_3785;  // int32
  wire signed [31:0] sel_3786;  // int32
  wire signed [31:0] sel_3787;  // int32
  wire signed [31:0] sel_3788;  // int32
  wire signed [31:0] sel_3789;  // int32
  wire signed [31:0] sel_3790;  // int32
  wire signed [31:0] sel_3791;  // int32
  wire signed [31:0] sel_3792;  // int32
  wire signed [31:0] s_291;  // int32
  wire signed [31:0] sel_1_592;  // int32
  wire signed [31:0] sel_3793;  // int32
  wire signed [31:0] sel_3794;  // int32
  wire signed [31:0] sel_3795;  // int32
  reg signed [31:0] sel_1_593;  // int32
  wire cont_bits_14;
  wire sel_1_594;
  wire [11:0] cont_bits_41_14;  // boolean [12]
  wire functionOutput_0_8;
  wire functionOutput_1_8;
  wire functionOutput_2_8;
  wire functionOutput_3_8;
  wire functionOutput_4_8;
  wire functionOutput_5_8;
  wire functionOutput_6_8;
  wire functionOutput_7_8;
  wire functionOutput_8_8;
  wire functionOutput_9_8;
  wire functionOutput_10_8;
  wire functionOutput_11_8;
  wire [11:0] functionOutput_19;  // boolean [12]
  wire signed [31:0] sel_3796;  // int32
  wire signed [31:0] sel_3797;  // int32
  wire signed [31:0] sel_3798;  // int32
  wire signed [31:0] sel_3799;  // int32
  wire signed [31:0] sel_3800;  // int32
  wire signed [31:0] sel_3801;  // int32
  wire signed [31:0] sel_3802;  // int32
  wire signed [31:0] sel_3803;  // int32
  wire signed [31:0] sel_3804;  // int32
  wire signed [31:0] sel_3805;  // int32
  wire signed [31:0] sel_3806;  // int32
  wire signed [31:0] sel_3807;  // int32
  wire signed [31:0] sel_3808;  // int32
  wire signed [31:0] sel_3809;  // int32
  wire signed [31:0] sel_3810;  // int32
  wire signed [31:0] s_292;  // int32
  wire signed [31:0] sel_1_595;  // int32
  wire signed [31:0] sel_3811;  // int32
  wire signed [31:0] sel_1_596;  // int32
  wire signed [31:0] sel_3812;  // int32
  wire signed [31:0] sel_1_597;  // int32
  wire signed [31:0] sel_3813;  // int32
  wire signed [31:0] sel_1_598;  // int32
  wire signed [31:0] sel_3814;  // int32
  wire signed [31:0] sel_1_599;  // int32
  wire signed [31:0] sel_3815;  // int32
  wire signed [31:0] sel_1_600;  // int32
  wire signed [31:0] sel_3816;  // int32
  wire signed [31:0] sel_1_601;  // int32
  wire signed [31:0] sel_3817;  // int32
  wire signed [31:0] sel_1_602;  // int32
  wire signed [31:0] sel_1_603;  // int32
  wire signed [31:0] sel_1_604;  // int32
  wire signed [31:0] sel_3818;  // int32
  wire signed [31:0] sel_1_605;  // int32
  wire signed [31:0] sel_3819;  // int32
  wire signed [31:0] sel_3820;  // int32
  reg signed [31:0] sel_1_606;  // int32
  wire tmp_251;
  wire sel_3821;
  wire sel_3822;
  wire sel_3823;
  wire sel_3824;
  wire sel_3825;
  wire sel_3826;
  wire sel_3827;
  wire sel_3828;
  wire sel_3829;
  wire sel_3830;
  wire sel_3831;
  wire sel_3832;
  wire sel_3833;
  wire sel_3834;
  wire sel_3835;
  wire s_293;
  wire sel_2_609;
  wire sel_3836;
  wire sel_2_610;
  wire sel_3837;
  wire sel_2_611;
  wire sel_3838;
  wire sel_2_612;
  wire sel_3839;
  wire sel_2_613;
  wire sel_3840;
  wire sel_2_614;
  wire sel_3841;
  wire sel_2_615;
  wire sel_3842;
  wire sel_2_616;
  wire sel_2_617;
  wire sel_2_618;
  wire sel_3843;
  wire sel_2_619;
  wire sel_3844;
  wire sel_3845;
  reg  sel_2_620;
  reg  [11:0] cont_bits_41_15;  // boolean [12]
  wire signed [31:0] sel_3846;  // int32
  wire signed [31:0] sel_3847;  // int32
  wire signed [31:0] sel_3848;  // int32
  wire signed [31:0] sel_3849;  // int32
  wire signed [31:0] sel_3850;  // int32
  wire signed [31:0] sel_3851;  // int32
  wire signed [31:0] sel_3852;  // int32
  wire signed [31:0] sel_3853;  // int32
  wire signed [31:0] sel_3854;  // int32
  wire signed [31:0] sel_3855;  // int32
  wire signed [31:0] sel_3856;  // int32
  wire signed [31:0] sel_3857;  // int32
  wire signed [31:0] sel_3858;  // int32
  wire signed [31:0] sel_3859;  // int32
  wire signed [31:0] sel_3860;  // int32
  wire signed [31:0] s_294;  // int32
  wire signed [31:0] sel_1_607;  // int32
  wire signed [31:0] sel_3861;  // int32
  wire signed [31:0] sel_1_608;  // int32
  wire signed [31:0] sel_3862;  // int32
  wire signed [31:0] sel_1_609;  // int32
  wire signed [31:0] sel_3863;  // int32
  wire signed [31:0] sel_1_610;  // int32
  wire signed [31:0] sel_3864;  // int32
  wire signed [31:0] sel_1_611;  // int32
  wire signed [31:0] sel_3865;  // int32
  wire signed [31:0] sel_1_612;  // int32
  wire signed [31:0] sel_3866;  // int32
  wire signed [31:0] sel_1_613;  // int32
  wire signed [31:0] sel_3867;  // int32
  wire signed [31:0] sel_1_614;  // int32
  wire signed [31:0] sel_1_615;  // int32
  wire signed [31:0] sel_1_616;  // int32
  wire signed [31:0] sel_3868;  // int32
  wire signed [31:0] sel_1_617;  // int32
  wire signed [31:0] sel_3869;  // int32
  wire signed [31:0] sel_3870;  // int32
  reg signed [31:0] sel_1_618;  // int32
  wire tmp_252;
  wire sel_3871;
  wire sel_3872;
  wire sel_3873;
  wire sel_3874;
  wire sel_3875;
  wire sel_3876;
  wire sel_3877;
  wire sel_3878;
  wire sel_3879;
  wire sel_3880;
  wire sel_3881;
  wire sel_3882;
  wire sel_3883;
  wire sel_3884;
  wire sel_3885;
  wire s_295;
  wire sel_2_621;
  wire sel_3886;
  wire sel_2_622;
  wire sel_3887;
  wire sel_2_623;
  wire sel_3888;
  wire sel_2_624;
  wire sel_3889;
  wire sel_2_625;
  wire sel_3890;
  wire sel_2_626;
  wire sel_3891;
  wire sel_2_627;
  wire sel_3892;
  wire sel_2_628;
  wire sel_2_629;
  wire sel_2_630;
  wire sel_3893;
  wire sel_2_631;
  wire sel_3894;
  wire sel_3895;
  reg  sel_2_632;
  reg  [11:0] cont_bits_41_16;  // boolean [12]
  wire signed [31:0] sel_3896;  // int32
  wire signed [31:0] sel_3897;  // int32
  wire signed [31:0] sel_3898;  // int32
  wire signed [31:0] sel_3899;  // int32
  wire signed [31:0] sel_3900;  // int32
  wire signed [31:0] sel_3901;  // int32
  wire signed [31:0] sel_3902;  // int32
  wire signed [31:0] sel_3903;  // int32
  wire signed [31:0] sel_3904;  // int32
  wire signed [31:0] sel_3905;  // int32
  wire signed [31:0] sel_3906;  // int32
  wire signed [31:0] sel_3907;  // int32
  wire signed [31:0] sel_3908;  // int32
  wire signed [31:0] sel_3909;  // int32
  wire signed [31:0] sel_3910;  // int32
  wire signed [31:0] s_296;  // int32
  wire signed [31:0] sel_1_619;  // int32
  wire signed [31:0] sel_3911;  // int32
  wire signed [31:0] sel_1_620;  // int32
  wire signed [31:0] sel_3912;  // int32
  wire signed [31:0] sel_1_621;  // int32
  wire signed [31:0] sel_3913;  // int32
  wire signed [31:0] sel_1_622;  // int32
  wire signed [31:0] sel_3914;  // int32
  wire signed [31:0] sel_1_623;  // int32
  wire signed [31:0] sel_3915;  // int32
  wire signed [31:0] sel_1_624;  // int32
  wire signed [31:0] sel_3916;  // int32
  wire signed [31:0] sel_1_625;  // int32
  wire signed [31:0] sel_3917;  // int32
  wire signed [31:0] sel_1_626;  // int32
  wire signed [31:0] sel_1_627;  // int32
  wire signed [31:0] sel_1_628;  // int32
  wire signed [31:0] sel_3918;  // int32
  wire signed [31:0] sel_1_629;  // int32
  wire signed [31:0] sel_3919;  // int32
  wire signed [31:0] sel_3920;  // int32
  reg signed [31:0] sel_1_630;  // int32
  wire tmp_253;
  wire sel_3921;
  wire sel_3922;
  wire sel_3923;
  wire sel_3924;
  wire sel_3925;
  wire sel_3926;
  wire sel_3927;
  wire sel_3928;
  wire sel_3929;
  wire sel_3930;
  wire sel_3931;
  wire sel_3932;
  wire sel_3933;
  wire sel_3934;
  wire sel_3935;
  wire s_297;
  wire sel_2_633;
  wire sel_3936;
  wire sel_2_634;
  wire sel_3937;
  wire sel_2_635;
  wire sel_3938;
  wire sel_2_636;
  wire sel_3939;
  wire sel_2_637;
  wire sel_3940;
  wire sel_2_638;
  wire sel_3941;
  wire sel_2_639;
  wire sel_3942;
  wire sel_2_640;
  wire sel_2_641;
  wire sel_2_642;
  wire sel_3943;
  wire sel_2_643;
  wire sel_3944;
  wire sel_3945;
  reg  sel_2_644;
  reg  [11:0] cont_bits_41_17;  // boolean [12]
  wire signed [31:0] sel_3946;  // int32
  wire signed [31:0] sel_3947;  // int32
  wire signed [31:0] sel_3948;  // int32
  wire signed [31:0] sel_3949;  // int32
  wire signed [31:0] sel_3950;  // int32
  wire signed [31:0] sel_3951;  // int32
  wire signed [31:0] sel_3952;  // int32
  wire signed [31:0] sel_3953;  // int32
  wire signed [31:0] sel_3954;  // int32
  wire signed [31:0] sel_3955;  // int32
  wire signed [31:0] sel_3956;  // int32
  wire signed [31:0] sel_3957;  // int32
  wire signed [31:0] sel_3958;  // int32
  wire signed [31:0] sel_3959;  // int32
  wire signed [31:0] sel_3960;  // int32
  wire signed [31:0] s_298;  // int32
  wire signed [31:0] sel_1_631;  // int32
  wire signed [31:0] sel_3961;  // int32
  wire signed [31:0] sel_1_632;  // int32
  wire signed [31:0] sel_3962;  // int32
  wire signed [31:0] sel_1_633;  // int32
  wire signed [31:0] sel_3963;  // int32
  wire signed [31:0] sel_1_634;  // int32
  wire signed [31:0] sel_3964;  // int32
  wire signed [31:0] sel_1_635;  // int32
  wire signed [31:0] sel_3965;  // int32
  wire signed [31:0] sel_1_636;  // int32
  wire signed [31:0] sel_3966;  // int32
  wire signed [31:0] sel_1_637;  // int32
  wire signed [31:0] sel_3967;  // int32
  wire signed [31:0] sel_1_638;  // int32
  wire signed [31:0] sel_1_639;  // int32
  wire signed [31:0] sel_1_640;  // int32
  wire signed [31:0] sel_3968;  // int32
  wire signed [31:0] sel_1_641;  // int32
  wire signed [31:0] sel_3969;  // int32
  wire signed [31:0] sel_3970;  // int32
  reg signed [31:0] sel_1_642;  // int32
  wire tmp_254;
  wire sel_3971;
  wire sel_3972;
  wire sel_3973;
  wire sel_3974;
  wire sel_3975;
  wire sel_3976;
  wire sel_3977;
  wire sel_3978;
  wire sel_3979;
  wire sel_3980;
  wire sel_3981;
  wire sel_3982;
  wire sel_3983;
  wire sel_3984;
  wire sel_3985;
  wire s_299;
  wire sel_2_645;
  wire sel_3986;
  wire sel_2_646;
  wire sel_3987;
  wire sel_2_647;
  wire sel_3988;
  wire sel_2_648;
  wire sel_3989;
  wire sel_2_649;
  wire sel_3990;
  wire sel_2_650;
  wire sel_3991;
  wire sel_2_651;
  wire sel_3992;
  wire sel_2_652;
  wire sel_2_653;
  wire sel_2_654;
  wire sel_3993;
  wire sel_2_655;
  wire sel_3994;
  wire sel_3995;
  reg  sel_2_656;
  reg  [11:0] cont_bits_41_18;  // boolean [12]
  wire signed [31:0] sel_3996;  // int32
  wire signed [31:0] sel_3997;  // int32
  wire signed [31:0] sel_3998;  // int32
  wire signed [31:0] sel_3999;  // int32
  wire signed [31:0] sel_4000;  // int32
  wire signed [31:0] sel_4001;  // int32
  wire signed [31:0] sel_4002;  // int32
  wire signed [31:0] sel_4003;  // int32
  wire signed [31:0] sel_4004;  // int32
  wire signed [31:0] sel_4005;  // int32
  wire signed [31:0] sel_4006;  // int32
  wire signed [31:0] sel_4007;  // int32
  wire signed [31:0] sel_4008;  // int32
  wire signed [31:0] sel_4009;  // int32
  wire signed [31:0] sel_4010;  // int32
  wire signed [31:0] s_300;  // int32
  wire signed [31:0] sel_1_643;  // int32
  wire signed [31:0] sel_4011;  // int32
  wire signed [31:0] sel_1_644;  // int32
  wire signed [31:0] sel_4012;  // int32
  wire signed [31:0] sel_1_645;  // int32
  wire signed [31:0] sel_4013;  // int32
  wire signed [31:0] sel_1_646;  // int32
  wire signed [31:0] sel_4014;  // int32
  wire signed [31:0] sel_1_647;  // int32
  wire signed [31:0] sel_4015;  // int32
  wire signed [31:0] sel_1_648;  // int32
  wire signed [31:0] sel_4016;  // int32
  wire signed [31:0] sel_1_649;  // int32
  wire signed [31:0] sel_4017;  // int32
  wire signed [31:0] sel_1_650;  // int32
  wire signed [31:0] sel_1_651;  // int32
  wire signed [31:0] sel_1_652;  // int32
  wire signed [31:0] sel_4018;  // int32
  wire signed [31:0] sel_1_653;  // int32
  wire signed [31:0] sel_4019;  // int32
  wire signed [31:0] sel_4020;  // int32
  reg signed [31:0] sel_1_654;  // int32
  wire tmp_255;
  wire sel_4021;
  wire sel_4022;
  wire sel_4023;
  wire sel_4024;
  wire sel_4025;
  wire sel_4026;
  wire sel_4027;
  wire sel_4028;
  wire sel_4029;
  wire sel_4030;
  wire sel_4031;
  wire sel_4032;
  wire sel_4033;
  wire sel_4034;
  wire sel_4035;
  wire s_301;
  wire sel_2_657;
  wire sel_4036;
  wire sel_2_658;
  wire sel_4037;
  wire sel_2_659;
  wire sel_4038;
  wire sel_2_660;
  wire sel_4039;
  wire sel_2_661;
  wire sel_4040;
  wire sel_2_662;
  wire sel_4041;
  wire sel_2_663;
  wire sel_4042;
  wire sel_2_664;
  wire sel_2_665;
  wire sel_2_666;
  wire sel_4043;
  wire sel_2_667;
  wire sel_4044;
  wire sel_4045;
  reg  sel_2_668;
  reg  [11:0] cont_bits_41_19;  // boolean [12]
  wire signed [31:0] sel_4046;  // int32
  wire signed [31:0] sel_4047;  // int32
  wire signed [31:0] sel_4048;  // int32
  wire signed [31:0] sel_4049;  // int32
  wire signed [31:0] sel_4050;  // int32
  wire signed [31:0] sel_4051;  // int32
  wire signed [31:0] sel_4052;  // int32
  wire signed [31:0] sel_4053;  // int32
  wire signed [31:0] sel_4054;  // int32
  wire signed [31:0] sel_4055;  // int32
  wire signed [31:0] sel_4056;  // int32
  wire signed [31:0] sel_4057;  // int32
  wire signed [31:0] sel_4058;  // int32
  wire signed [31:0] sel_4059;  // int32
  wire signed [31:0] sel_4060;  // int32
  wire signed [31:0] s_302;  // int32
  wire signed [31:0] sel_1_655;  // int32
  wire signed [31:0] sel_4061;  // int32
  wire signed [31:0] sel_1_656;  // int32
  wire signed [31:0] sel_4062;  // int32
  wire signed [31:0] sel_1_657;  // int32
  wire signed [31:0] sel_4063;  // int32
  wire signed [31:0] sel_1_658;  // int32
  wire signed [31:0] sel_4064;  // int32
  wire signed [31:0] sel_1_659;  // int32
  wire signed [31:0] sel_4065;  // int32
  wire signed [31:0] sel_1_660;  // int32
  wire signed [31:0] sel_4066;  // int32
  wire signed [31:0] sel_1_661;  // int32
  wire signed [31:0] sel_4067;  // int32
  wire signed [31:0] sel_1_662;  // int32
  wire signed [31:0] sel_1_663;  // int32
  wire signed [31:0] sel_1_664;  // int32
  wire signed [31:0] sel_4068;  // int32
  wire signed [31:0] sel_1_665;  // int32
  wire signed [31:0] sel_4069;  // int32
  wire signed [31:0] sel_4070;  // int32
  reg signed [31:0] sel_1_666;  // int32
  wire tmp_256;
  wire sel_4071;
  wire sel_4072;
  wire sel_4073;
  wire sel_4074;
  wire sel_4075;
  wire sel_4076;
  wire sel_4077;
  wire sel_4078;
  wire sel_4079;
  wire sel_4080;
  wire sel_4081;
  wire sel_4082;
  wire sel_4083;
  wire sel_4084;
  wire sel_4085;
  wire s_303;
  wire sel_2_669;
  wire sel_4086;
  wire sel_2_670;
  wire sel_4087;
  wire sel_2_671;
  wire sel_4088;
  wire sel_2_672;
  wire sel_4089;
  wire sel_2_673;
  wire sel_4090;
  wire sel_2_674;
  wire sel_4091;
  wire sel_2_675;
  wire sel_4092;
  wire sel_2_676;
  wire sel_2_677;
  wire sel_2_678;
  wire sel_4093;
  wire sel_2_679;
  wire sel_4094;
  wire sel_4095;
  reg  sel_2_680;
  reg  [11:0] cont_bits_41_20;  // boolean [12]
  wire signed [31:0] sel_4096;  // int32
  wire signed [31:0] sel_4097;  // int32
  wire signed [31:0] sel_4098;  // int32
  wire signed [31:0] sel_4099;  // int32
  wire signed [31:0] sel_4100;  // int32
  wire signed [31:0] sel_4101;  // int32
  wire signed [31:0] sel_4102;  // int32
  wire signed [31:0] sel_4103;  // int32
  wire signed [31:0] sel_4104;  // int32
  wire signed [31:0] sel_4105;  // int32
  wire signed [31:0] sel_4106;  // int32
  wire signed [31:0] sel_4107;  // int32
  wire signed [31:0] sel_4108;  // int32
  wire signed [31:0] sel_4109;  // int32
  wire signed [31:0] sel_4110;  // int32
  wire signed [31:0] s_304;  // int32
  wire signed [31:0] sel_1_667;  // int32
  wire signed [31:0] sel_4111;  // int32
  wire signed [31:0] sel_1_668;  // int32
  wire signed [31:0] sel_4112;  // int32
  wire signed [31:0] sel_1_669;  // int32
  wire signed [31:0] sel_4113;  // int32
  wire signed [31:0] sel_1_670;  // int32
  wire signed [31:0] sel_4114;  // int32
  wire signed [31:0] sel_1_671;  // int32
  wire signed [31:0] sel_4115;  // int32
  wire signed [31:0] sel_1_672;  // int32
  wire signed [31:0] sel_4116;  // int32
  wire signed [31:0] sel_1_673;  // int32
  wire signed [31:0] sel_4117;  // int32
  wire signed [31:0] sel_1_674;  // int32
  wire signed [31:0] sel_1_675;  // int32
  wire signed [31:0] sel_1_676;  // int32
  wire signed [31:0] sel_4118;  // int32
  wire signed [31:0] sel_1_677;  // int32
  wire signed [31:0] sel_4119;  // int32
  wire signed [31:0] sel_4120;  // int32
  reg signed [31:0] sel_1_678;  // int32
  wire tmp_257;
  wire sel_4121;
  wire sel_4122;
  wire sel_4123;
  wire sel_4124;
  wire sel_4125;
  wire sel_4126;
  wire sel_4127;
  wire sel_4128;
  wire sel_4129;
  wire sel_4130;
  wire sel_4131;
  wire sel_4132;
  wire sel_4133;
  wire sel_4134;
  wire sel_4135;
  wire s_305;
  wire sel_2_681;
  wire sel_4136;
  wire sel_2_682;
  wire sel_4137;
  wire sel_2_683;
  wire sel_4138;
  wire sel_2_684;
  wire sel_4139;
  wire sel_2_685;
  wire sel_4140;
  wire sel_2_686;
  wire sel_4141;
  wire sel_2_687;
  wire sel_4142;
  wire sel_2_688;
  wire sel_2_689;
  wire sel_2_690;
  wire sel_4143;
  wire sel_2_691;
  wire sel_4144;
  wire sel_4145;
  reg  sel_2_692;
  reg  [11:0] cont_bits_41_21;  // boolean [12]
  wire signed [31:0] sel_4146;  // int32
  wire signed [31:0] sel_4147;  // int32
  wire signed [31:0] sel_4148;  // int32
  wire signed [31:0] sel_4149;  // int32
  wire signed [31:0] sel_4150;  // int32
  wire signed [31:0] sel_4151;  // int32
  wire signed [31:0] sel_4152;  // int32
  wire signed [31:0] sel_4153;  // int32
  wire signed [31:0] sel_4154;  // int32
  wire signed [31:0] sel_4155;  // int32
  wire signed [31:0] sel_4156;  // int32
  wire signed [31:0] sel_4157;  // int32
  wire signed [31:0] sel_4158;  // int32
  wire signed [31:0] sel_4159;  // int32
  wire signed [31:0] sel_4160;  // int32
  wire signed [31:0] s_306;  // int32
  wire signed [31:0] sel_1_679;  // int32
  wire signed [31:0] sel_4161;  // int32
  wire signed [31:0] sel_1_680;  // int32
  wire signed [31:0] sel_4162;  // int32
  wire signed [31:0] sel_1_681;  // int32
  wire signed [31:0] sel_4163;  // int32
  wire signed [31:0] sel_1_682;  // int32
  wire signed [31:0] sel_4164;  // int32
  wire signed [31:0] sel_1_683;  // int32
  wire signed [31:0] sel_4165;  // int32
  wire signed [31:0] sel_1_684;  // int32
  wire signed [31:0] sel_4166;  // int32
  wire signed [31:0] sel_1_685;  // int32
  wire signed [31:0] sel_4167;  // int32
  wire signed [31:0] sel_1_686;  // int32
  wire signed [31:0] sel_1_687;  // int32
  wire signed [31:0] sel_1_688;  // int32
  wire signed [31:0] sel_4168;  // int32
  wire signed [31:0] sel_1_689;  // int32
  wire signed [31:0] sel_4169;  // int32
  wire signed [31:0] sel_4170;  // int32
  reg signed [31:0] sel_1_690;  // int32
  wire tmp_258;
  wire sel_4171;
  wire sel_4172;
  wire sel_4173;
  wire sel_4174;
  wire sel_4175;
  wire sel_4176;
  wire sel_4177;
  wire sel_4178;
  wire sel_4179;
  wire sel_4180;
  wire sel_4181;
  wire sel_4182;
  wire sel_4183;
  wire sel_4184;
  wire sel_4185;
  wire s_307;
  wire sel_2_693;
  wire sel_4186;
  wire sel_2_694;
  wire sel_4187;
  wire sel_2_695;
  wire sel_4188;
  wire sel_2_696;
  wire sel_4189;
  wire sel_2_697;
  wire sel_4190;
  wire sel_2_698;
  wire sel_4191;
  wire sel_2_699;
  wire sel_4192;
  wire sel_2_700;
  wire sel_2_701;
  wire sel_2_702;
  wire sel_4193;
  wire sel_2_703;
  wire sel_4194;
  wire sel_4195;
  reg  sel_2_704;
  reg  [11:0] cont_bits_41_22;  // boolean [12]
  wire signed [31:0] sel_4196;  // int32
  wire signed [31:0] sel_4197;  // int32
  wire signed [31:0] sel_4198;  // int32
  wire signed [31:0] sel_4199;  // int32
  wire signed [31:0] sel_4200;  // int32
  wire signed [31:0] sel_4201;  // int32
  wire signed [31:0] sel_4202;  // int32
  wire signed [31:0] sel_4203;  // int32
  wire signed [31:0] sel_4204;  // int32
  wire signed [31:0] sel_4205;  // int32
  wire signed [31:0] sel_4206;  // int32
  wire signed [31:0] sel_4207;  // int32
  wire signed [31:0] sel_4208;  // int32
  wire signed [31:0] sel_4209;  // int32
  wire signed [31:0] sel_4210;  // int32
  wire signed [31:0] s_308;  // int32
  wire signed [31:0] sel_1_691;  // int32
  wire signed [31:0] sel_4211;  // int32
  wire signed [31:0] sel_1_692;  // int32
  wire signed [31:0] sel_4212;  // int32
  wire signed [31:0] sel_1_693;  // int32
  wire signed [31:0] sel_4213;  // int32
  wire signed [31:0] sel_1_694;  // int32
  wire signed [31:0] sel_4214;  // int32
  wire signed [31:0] sel_1_695;  // int32
  wire signed [31:0] sel_4215;  // int32
  wire signed [31:0] sel_1_696;  // int32
  wire signed [31:0] sel_4216;  // int32
  wire signed [31:0] sel_1_697;  // int32
  wire signed [31:0] sel_4217;  // int32
  wire signed [31:0] sel_1_698;  // int32
  wire signed [31:0] sel_1_699;  // int32
  wire signed [31:0] sel_1_700;  // int32
  wire signed [31:0] sel_4218;  // int32
  wire signed [31:0] sel_1_701;  // int32
  wire signed [31:0] sel_4219;  // int32
  wire signed [31:0] sel_4220;  // int32
  reg signed [31:0] sel_1_702;  // int32
  wire tmp_259;
  wire sel_4221;
  wire sel_4222;
  wire sel_4223;
  wire sel_4224;
  wire sel_4225;
  wire sel_4226;
  wire sel_4227;
  wire sel_4228;
  wire sel_4229;
  wire sel_4230;
  wire sel_4231;
  wire sel_4232;
  wire sel_4233;
  wire sel_4234;
  wire sel_4235;
  wire s_309;
  wire sel_2_705;
  wire sel_4236;
  wire sel_2_706;
  wire sel_4237;
  wire sel_2_707;
  wire sel_4238;
  wire sel_2_708;
  wire sel_4239;
  wire sel_2_709;
  wire sel_4240;
  wire sel_2_710;
  wire sel_4241;
  wire sel_2_711;
  wire sel_4242;
  wire sel_2_712;
  wire sel_2_713;
  wire sel_2_714;
  wire sel_4243;
  wire sel_2_715;
  wire sel_4244;
  wire sel_4245;
  reg  sel_2_716;
  reg  [11:0] cont_bits_41_23;  // boolean [12]
  wire signed [31:0] sel_4246;  // int32
  wire signed [31:0] sel_4247;  // int32
  wire signed [31:0] sel_4248;  // int32
  wire signed [31:0] sel_4249;  // int32
  wire signed [31:0] sel_4250;  // int32
  wire signed [31:0] sel_4251;  // int32
  wire signed [31:0] sel_4252;  // int32
  wire signed [31:0] sel_4253;  // int32
  wire signed [31:0] sel_4254;  // int32
  wire signed [31:0] sel_4255;  // int32
  wire signed [31:0] sel_4256;  // int32
  wire signed [31:0] sel_4257;  // int32
  wire signed [31:0] sel_4258;  // int32
  wire signed [31:0] sel_4259;  // int32
  wire signed [31:0] sel_4260;  // int32
  wire signed [31:0] s_310;  // int32
  wire signed [31:0] sel_1_703;  // int32
  wire signed [31:0] sel_4261;  // int32
  wire signed [31:0] sel_1_704;  // int32
  wire signed [31:0] sel_4262;  // int32
  wire signed [31:0] sel_1_705;  // int32
  wire signed [31:0] sel_4263;  // int32
  wire signed [31:0] sel_1_706;  // int32
  wire signed [31:0] sel_4264;  // int32
  wire signed [31:0] sel_1_707;  // int32
  wire signed [31:0] sel_4265;  // int32
  wire signed [31:0] sel_1_708;  // int32
  wire signed [31:0] sel_4266;  // int32
  wire signed [31:0] sel_1_709;  // int32
  wire signed [31:0] sel_4267;  // int32
  wire signed [31:0] sel_1_710;  // int32
  wire signed [31:0] sel_1_711;  // int32
  wire signed [31:0] sel_1_712;  // int32
  wire signed [31:0] sel_4268;  // int32
  wire signed [31:0] sel_1_713;  // int32
  wire signed [31:0] sel_4269;  // int32
  wire signed [31:0] sel_4270;  // int32
  reg signed [31:0] sel_1_714;  // int32
  wire tmp_260;
  wire sel_4271;
  wire sel_4272;
  wire sel_4273;
  wire sel_4274;
  wire sel_4275;
  wire sel_4276;
  wire sel_4277;
  wire sel_4278;
  wire sel_4279;
  wire sel_4280;
  wire sel_4281;
  wire sel_4282;
  wire sel_4283;
  wire sel_4284;
  wire sel_4285;
  wire s_311;
  wire sel_2_717;
  wire sel_4286;
  wire sel_2_718;
  wire sel_4287;
  wire sel_2_719;
  wire sel_4288;
  wire sel_2_720;
  wire sel_4289;
  wire sel_2_721;
  wire sel_4290;
  wire sel_2_722;
  wire sel_4291;
  wire sel_2_723;
  wire sel_4292;
  wire sel_2_724;
  wire sel_2_725;
  wire sel_2_726;
  wire sel_4293;
  wire sel_2_727;
  wire sel_4294;
  wire sel_4295;
  reg  sel_2_728;
  reg  [11:0] cont_bits_41_24;  // boolean [12]
  wire signed [31:0] sel_4296;  // int32
  wire signed [31:0] sel_4297;  // int32
  wire signed [31:0] sel_4298;  // int32
  wire signed [31:0] sel_4299;  // int32
  wire signed [31:0] sel_4300;  // int32
  wire signed [31:0] sel_4301;  // int32
  wire signed [31:0] sel_4302;  // int32
  wire signed [31:0] sel_4303;  // int32
  wire signed [31:0] sel_4304;  // int32
  wire signed [31:0] sel_4305;  // int32
  wire signed [31:0] sel_4306;  // int32
  wire signed [31:0] sel_4307;  // int32
  wire signed [31:0] sel_4308;  // int32
  wire signed [31:0] sel_4309;  // int32
  wire signed [31:0] sel_4310;  // int32
  wire signed [31:0] s_312;  // int32
  wire signed [31:0] sel_1_715;  // int32
  wire signed [31:0] sel_4311;  // int32
  wire signed [31:0] sel_1_716;  // int32
  wire signed [31:0] sel_4312;  // int32
  wire signed [31:0] sel_1_717;  // int32
  wire signed [31:0] sel_4313;  // int32
  wire signed [31:0] sel_1_718;  // int32
  wire signed [31:0] sel_4314;  // int32
  wire signed [31:0] sel_1_719;  // int32
  wire signed [31:0] sel_4315;  // int32
  wire signed [31:0] sel_1_720;  // int32
  wire signed [31:0] sel_4316;  // int32
  wire signed [31:0] sel_1_721;  // int32
  wire signed [31:0] sel_4317;  // int32
  wire signed [31:0] sel_1_722;  // int32
  wire signed [31:0] sel_1_723;  // int32
  wire signed [31:0] sel_1_724;  // int32
  wire signed [31:0] sel_4318;  // int32
  wire signed [31:0] sel_1_725;  // int32
  wire signed [31:0] sel_4319;  // int32
  wire signed [31:0] sel_4320;  // int32
  reg signed [31:0] sel_1_726;  // int32
  wire tmp_261;
  wire sel_4321;
  wire sel_4322;
  wire sel_4323;
  wire sel_4324;
  wire sel_4325;
  wire sel_4326;
  wire sel_4327;
  wire sel_4328;
  wire sel_4329;
  wire sel_4330;
  wire sel_4331;
  wire sel_4332;
  wire sel_4333;
  wire sel_4334;
  wire sel_4335;
  wire s_313;
  wire sel_2_729;
  wire sel_4336;
  wire sel_2_730;
  wire sel_4337;
  wire sel_2_731;
  wire sel_4338;
  wire sel_2_732;
  wire sel_4339;
  wire sel_2_733;
  wire sel_4340;
  wire sel_2_734;
  wire sel_4341;
  wire sel_2_735;
  wire sel_4342;
  wire sel_2_736;
  wire sel_2_737;
  wire sel_2_738;
  wire sel_4343;
  wire sel_2_739;
  wire sel_4344;
  wire sel_4345;
  reg  sel_2_740;
  reg  [11:0] cont_bits_41_25;  // boolean [12]
  wire signed [31:0] sel_4346;  // int32
  wire signed [31:0] sel_4347;  // int32
  wire signed [31:0] sel_4348;  // int32
  wire signed [31:0] sel_4349;  // int32
  wire signed [31:0] sel_4350;  // int32
  wire signed [31:0] sel_4351;  // int32
  wire signed [31:0] sel_4352;  // int32
  wire signed [31:0] sel_4353;  // int32
  wire signed [31:0] sel_4354;  // int32
  wire signed [31:0] sel_4355;  // int32
  wire signed [31:0] sel_4356;  // int32
  wire signed [31:0] sel_4357;  // int32
  wire signed [31:0] sel_4358;  // int32
  wire signed [31:0] sel_4359;  // int32
  wire signed [31:0] sel_4360;  // int32
  wire signed [31:0] s_314;  // int32
  wire signed [31:0] sel_1_727;  // int32
  wire signed [31:0] sel_4361;  // int32
  wire signed [31:0] sel_1_728;  // int32
  wire signed [31:0] sel_4362;  // int32
  wire signed [31:0] sel_1_729;  // int32
  wire signed [31:0] sel_4363;  // int32
  wire signed [31:0] sel_1_730;  // int32
  wire signed [31:0] sel_4364;  // int32
  wire signed [31:0] sel_1_731;  // int32
  wire signed [31:0] sel_4365;  // int32
  wire signed [31:0] sel_1_732;  // int32
  wire signed [31:0] sel_4366;  // int32
  wire signed [31:0] sel_1_733;  // int32
  wire signed [31:0] sel_4367;  // int32
  wire signed [31:0] sel_1_734;  // int32
  wire signed [31:0] sel_1_735;  // int32
  wire signed [31:0] sel_1_736;  // int32
  wire signed [31:0] sel_4368;  // int32
  wire signed [31:0] sel_1_737;  // int32
  wire signed [31:0] sel_4369;  // int32
  wire signed [31:0] sel_4370;  // int32
  reg signed [31:0] sel_1_738;  // int32
  wire tmp_262;
  wire sel_4371;
  wire sel_4372;
  wire sel_4373;
  wire sel_4374;
  wire sel_4375;
  wire sel_4376;
  wire sel_4377;
  wire sel_4378;
  wire sel_4379;
  wire sel_4380;
  wire sel_4381;
  wire sel_4382;
  wire sel_4383;
  wire sel_4384;
  wire sel_4385;
  wire s_315;
  wire sel_2_741;
  wire sel_4386;
  wire sel_2_742;
  wire sel_4387;
  wire sel_2_743;
  wire sel_4388;
  wire sel_2_744;
  wire sel_4389;
  wire sel_2_745;
  wire sel_4390;
  wire sel_2_746;
  wire sel_4391;
  wire sel_2_747;
  wire sel_4392;
  wire sel_2_748;
  wire sel_2_749;
  wire sel_2_750;
  wire sel_4393;
  wire sel_2_751;
  wire sel_4394;
  wire sel_4395;
  reg  sel_2_752;
  reg  [11:0] cont_bits_41_26;  // boolean [12]
  wire signed [31:0] sel_4396;  // int32
  wire signed [31:0] sel_4397;  // int32
  wire signed [31:0] sel_4398;  // int32
  wire signed [31:0] sel_4399;  // int32
  wire signed [31:0] sel_4400;  // int32
  wire signed [31:0] sel_4401;  // int32
  wire signed [31:0] sel_4402;  // int32
  wire signed [31:0] sel_4403;  // int32
  wire signed [31:0] sel_4404;  // int32
  wire signed [31:0] sel_4405;  // int32
  wire signed [31:0] sel_4406;  // int32
  wire signed [31:0] sel_4407;  // int32
  wire signed [31:0] sel_4408;  // int32
  wire signed [31:0] sel_4409;  // int32
  wire signed [31:0] sel_4410;  // int32
  wire signed [31:0] s_316;  // int32
  wire signed [31:0] sel_1_739;  // int32
  wire signed [31:0] sel_4411;  // int32
  wire signed [31:0] sel_1_740;  // int32
  wire signed [31:0] sel_4412;  // int32
  wire signed [31:0] sel_1_741;  // int32
  wire signed [31:0] sel_4413;  // int32
  wire signed [31:0] sel_1_742;  // int32
  wire signed [31:0] sel_4414;  // int32
  wire signed [31:0] sel_1_743;  // int32
  wire signed [31:0] sel_4415;  // int32
  wire signed [31:0] sel_1_744;  // int32
  wire signed [31:0] sel_4416;  // int32
  wire signed [31:0] sel_1_745;  // int32
  wire signed [31:0] sel_4417;  // int32
  wire signed [31:0] sel_1_746;  // int32
  wire signed [31:0] sel_1_747;  // int32
  wire signed [31:0] sel_1_748;  // int32
  wire signed [31:0] sel_4418;  // int32
  wire signed [31:0] sel_1_749;  // int32
  wire signed [31:0] sel_4419;  // int32
  wire signed [31:0] sel_4420;  // int32
  reg signed [31:0] sel_1_750;  // int32
  wire cont_bits_41_27;
  wire [11:0] cont_bits_42_14;  // boolean [12]
  wire functionOutput_0_9;
  wire functionOutput_1_9;
  wire functionOutput_2_9;
  wire functionOutput_3_9;
  wire functionOutput_4_9;
  wire functionOutput_5_9;
  wire functionOutput_6_9;
  wire functionOutput_7_9;
  wire functionOutput_8_9;
  wire functionOutput_9_9;
  wire functionOutput_10_9;
  wire functionOutput_11_9;
  wire [11:0] functionOutput_20;  // boolean [12]
  wire signed [31:0] sel_4421;  // int32
  wire signed [31:0] sel_4422;  // int32
  wire signed [31:0] sel_4423;  // int32
  wire signed [31:0] sel_4424;  // int32
  wire signed [31:0] sel_4425;  // int32
  wire signed [31:0] sel_4426;  // int32
  wire signed [31:0] sel_4427;  // int32
  wire signed [31:0] sel_4428;  // int32
  wire signed [31:0] sel_4429;  // int32
  wire signed [31:0] sel_4430;  // int32
  wire signed [31:0] sel_4431;  // int32
  wire signed [31:0] sel_4432;  // int32
  wire signed [31:0] sel_4433;  // int32
  wire signed [31:0] sel_4434;  // int32
  wire signed [31:0] sel_4435;  // int32
  wire signed [31:0] s_317;  // int32
  wire signed [31:0] sel_1_751;  // int32
  wire signed [31:0] sel_4436;  // int32
  wire signed [31:0] sel_1_752;  // int32
  wire signed [31:0] sel_4437;  // int32
  wire signed [31:0] sel_1_753;  // int32
  wire signed [31:0] sel_4438;  // int32
  wire signed [31:0] sel_1_754;  // int32
  wire signed [31:0] sel_4439;  // int32
  wire signed [31:0] sel_1_755;  // int32
  wire signed [31:0] sel_4440;  // int32
  wire signed [31:0] sel_1_756;  // int32
  wire signed [31:0] sel_4441;  // int32
  wire signed [31:0] sel_1_757;  // int32
  wire signed [31:0] sel_1_758;  // int32
  wire signed [31:0] sel_1_759;  // int32
  wire signed [31:0] sel_4442;  // int32
  wire signed [31:0] sel_1_760;  // int32
  wire signed [31:0] sel_4443;  // int32
  wire signed [31:0] sel_4444;  // int32
  reg signed [31:0] sel_1_761;  // int32
  wire tmp_263;
  wire sel_4445;
  wire sel_4446;
  wire sel_4447;
  wire sel_4448;
  wire sel_4449;
  wire sel_4450;
  wire sel_4451;
  wire sel_4452;
  wire sel_4453;
  wire sel_4454;
  wire sel_4455;
  wire sel_4456;
  wire sel_4457;
  wire sel_4458;
  wire sel_4459;
  wire s_318;
  wire sel_2_753;
  wire sel_4460;
  wire sel_2_754;
  wire sel_4461;
  wire sel_2_755;
  wire sel_4462;
  wire sel_2_756;
  wire sel_4463;
  wire sel_2_757;
  wire sel_4464;
  wire sel_2_758;
  wire sel_4465;
  wire sel_2_759;
  wire sel_2_760;
  wire sel_2_761;
  wire sel_4466;
  wire sel_2_762;
  wire sel_4467;
  wire sel_4468;
  reg  sel_2_763;
  reg  [11:0] cont_bits_42_15;  // boolean [12]
  wire signed [31:0] sel_4469;  // int32
  wire signed [31:0] sel_4470;  // int32
  wire signed [31:0] sel_4471;  // int32
  wire signed [31:0] sel_4472;  // int32
  wire signed [31:0] sel_4473;  // int32
  wire signed [31:0] sel_4474;  // int32
  wire signed [31:0] sel_4475;  // int32
  wire signed [31:0] sel_4476;  // int32
  wire signed [31:0] sel_4477;  // int32
  wire signed [31:0] sel_4478;  // int32
  wire signed [31:0] sel_4479;  // int32
  wire signed [31:0] sel_4480;  // int32
  wire signed [31:0] sel_4481;  // int32
  wire signed [31:0] sel_4482;  // int32
  wire signed [31:0] sel_4483;  // int32
  wire signed [31:0] s_319;  // int32
  wire signed [31:0] sel_1_762;  // int32
  wire signed [31:0] sel_4484;  // int32
  wire signed [31:0] sel_1_763;  // int32
  wire signed [31:0] sel_4485;  // int32
  wire signed [31:0] sel_1_764;  // int32
  wire signed [31:0] sel_4486;  // int32
  wire signed [31:0] sel_1_765;  // int32
  wire signed [31:0] sel_4487;  // int32
  wire signed [31:0] sel_1_766;  // int32
  wire signed [31:0] sel_4488;  // int32
  wire signed [31:0] sel_1_767;  // int32
  wire signed [31:0] sel_4489;  // int32
  wire signed [31:0] sel_1_768;  // int32
  wire signed [31:0] sel_1_769;  // int32
  wire signed [31:0] sel_1_770;  // int32
  wire signed [31:0] sel_4490;  // int32
  wire signed [31:0] sel_1_771;  // int32
  wire signed [31:0] sel_4491;  // int32
  wire signed [31:0] sel_4492;  // int32
  reg signed [31:0] sel_1_772;  // int32
  wire tmp_264;
  wire sel_4493;
  wire sel_4494;
  wire sel_4495;
  wire sel_4496;
  wire sel_4497;
  wire sel_4498;
  wire sel_4499;
  wire sel_4500;
  wire sel_4501;
  wire sel_4502;
  wire sel_4503;
  wire sel_4504;
  wire sel_4505;
  wire sel_4506;
  wire sel_4507;
  wire s_320;
  wire sel_2_764;
  wire sel_4508;
  wire sel_2_765;
  wire sel_4509;
  wire sel_2_766;
  wire sel_4510;
  wire sel_2_767;
  wire sel_4511;
  wire sel_2_768;
  wire sel_4512;
  wire sel_2_769;
  wire sel_4513;
  wire sel_2_770;
  wire sel_2_771;
  wire sel_2_772;
  wire sel_4514;
  wire sel_2_773;
  wire sel_4515;
  wire sel_4516;
  reg  sel_2_774;
  reg  [11:0] cont_bits_42_16;  // boolean [12]
  wire signed [31:0] sel_4517;  // int32
  wire signed [31:0] sel_4518;  // int32
  wire signed [31:0] sel_4519;  // int32
  wire signed [31:0] sel_4520;  // int32
  wire signed [31:0] sel_4521;  // int32
  wire signed [31:0] sel_4522;  // int32
  wire signed [31:0] sel_4523;  // int32
  wire signed [31:0] sel_4524;  // int32
  wire signed [31:0] sel_4525;  // int32
  wire signed [31:0] sel_4526;  // int32
  wire signed [31:0] sel_4527;  // int32
  wire signed [31:0] sel_4528;  // int32
  wire signed [31:0] sel_4529;  // int32
  wire signed [31:0] sel_4530;  // int32
  wire signed [31:0] sel_4531;  // int32
  wire signed [31:0] s_321;  // int32
  wire signed [31:0] sel_1_773;  // int32
  wire signed [31:0] sel_4532;  // int32
  wire signed [31:0] sel_1_774;  // int32
  wire signed [31:0] sel_4533;  // int32
  wire signed [31:0] sel_1_775;  // int32
  wire signed [31:0] sel_4534;  // int32
  wire signed [31:0] sel_1_776;  // int32
  wire signed [31:0] sel_4535;  // int32
  wire signed [31:0] sel_1_777;  // int32
  wire signed [31:0] sel_4536;  // int32
  wire signed [31:0] sel_1_778;  // int32
  wire signed [31:0] sel_4537;  // int32
  wire signed [31:0] sel_1_779;  // int32
  wire signed [31:0] sel_1_780;  // int32
  wire signed [31:0] sel_1_781;  // int32
  wire signed [31:0] sel_4538;  // int32
  wire signed [31:0] sel_1_782;  // int32
  wire signed [31:0] sel_4539;  // int32
  wire signed [31:0] sel_4540;  // int32
  reg signed [31:0] sel_1_783;  // int32
  wire tmp_265;
  wire sel_4541;
  wire sel_4542;
  wire sel_4543;
  wire sel_4544;
  wire sel_4545;
  wire sel_4546;
  wire sel_4547;
  wire sel_4548;
  wire sel_4549;
  wire sel_4550;
  wire sel_4551;
  wire sel_4552;
  wire sel_4553;
  wire sel_4554;
  wire sel_4555;
  wire s_322;
  wire sel_2_775;
  wire sel_4556;
  wire sel_2_776;
  wire sel_4557;
  wire sel_2_777;
  wire sel_4558;
  wire sel_2_778;
  wire sel_4559;
  wire sel_2_779;
  wire sel_4560;
  wire sel_2_780;
  wire sel_4561;
  wire sel_2_781;
  wire sel_2_782;
  wire sel_2_783;
  wire sel_4562;
  wire sel_2_784;
  wire sel_4563;
  wire sel_4564;
  reg  sel_2_785;
  reg  [11:0] cont_bits_42_17;  // boolean [12]
  wire signed [31:0] sel_4565;  // int32
  wire signed [31:0] sel_4566;  // int32
  wire signed [31:0] sel_4567;  // int32
  wire signed [31:0] sel_4568;  // int32
  wire signed [31:0] sel_4569;  // int32
  wire signed [31:0] sel_4570;  // int32
  wire signed [31:0] sel_4571;  // int32
  wire signed [31:0] sel_4572;  // int32
  wire signed [31:0] sel_4573;  // int32
  wire signed [31:0] sel_4574;  // int32
  wire signed [31:0] sel_4575;  // int32
  wire signed [31:0] sel_4576;  // int32
  wire signed [31:0] sel_4577;  // int32
  wire signed [31:0] sel_4578;  // int32
  wire signed [31:0] sel_4579;  // int32
  wire signed [31:0] s_323;  // int32
  wire signed [31:0] sel_1_784;  // int32
  wire signed [31:0] sel_4580;  // int32
  wire signed [31:0] sel_1_785;  // int32
  wire signed [31:0] sel_4581;  // int32
  wire signed [31:0] sel_1_786;  // int32
  wire signed [31:0] sel_4582;  // int32
  wire signed [31:0] sel_1_787;  // int32
  wire signed [31:0] sel_4583;  // int32
  wire signed [31:0] sel_1_788;  // int32
  wire signed [31:0] sel_4584;  // int32
  wire signed [31:0] sel_1_789;  // int32
  wire signed [31:0] sel_4585;  // int32
  wire signed [31:0] sel_1_790;  // int32
  wire signed [31:0] sel_1_791;  // int32
  wire signed [31:0] sel_1_792;  // int32
  wire signed [31:0] sel_4586;  // int32
  wire signed [31:0] sel_1_793;  // int32
  wire signed [31:0] sel_4587;  // int32
  wire signed [31:0] sel_4588;  // int32
  reg signed [31:0] sel_1_794;  // int32
  wire tmp_266;
  wire sel_4589;
  wire sel_4590;
  wire sel_4591;
  wire sel_4592;
  wire sel_4593;
  wire sel_4594;
  wire sel_4595;
  wire sel_4596;
  wire sel_4597;
  wire sel_4598;
  wire sel_4599;
  wire sel_4600;
  wire sel_4601;
  wire sel_4602;
  wire sel_4603;
  wire s_324;
  wire sel_2_786;
  wire sel_4604;
  wire sel_2_787;
  wire sel_4605;
  wire sel_2_788;
  wire sel_4606;
  wire sel_2_789;
  wire sel_4607;
  wire sel_2_790;
  wire sel_4608;
  wire sel_2_791;
  wire sel_4609;
  wire sel_2_792;
  wire sel_2_793;
  wire sel_2_794;
  wire sel_4610;
  wire sel_2_795;
  wire sel_4611;
  wire sel_4612;
  reg  sel_2_796;
  reg  [11:0] cont_bits_42_18;  // boolean [12]
  wire signed [31:0] sel_4613;  // int32
  wire signed [31:0] sel_4614;  // int32
  wire signed [31:0] sel_4615;  // int32
  wire signed [31:0] sel_4616;  // int32
  wire signed [31:0] sel_4617;  // int32
  wire signed [31:0] sel_4618;  // int32
  wire signed [31:0] sel_4619;  // int32
  wire signed [31:0] sel_4620;  // int32
  wire signed [31:0] sel_4621;  // int32
  wire signed [31:0] sel_4622;  // int32
  wire signed [31:0] sel_4623;  // int32
  wire signed [31:0] sel_4624;  // int32
  wire signed [31:0] sel_4625;  // int32
  wire signed [31:0] sel_4626;  // int32
  wire signed [31:0] sel_4627;  // int32
  wire signed [31:0] s_325;  // int32
  wire signed [31:0] sel_1_795;  // int32
  wire signed [31:0] sel_4628;  // int32
  wire signed [31:0] sel_1_796;  // int32
  wire signed [31:0] sel_4629;  // int32
  wire signed [31:0] sel_1_797;  // int32
  wire signed [31:0] sel_4630;  // int32
  wire signed [31:0] sel_1_798;  // int32
  wire signed [31:0] sel_4631;  // int32
  wire signed [31:0] sel_1_799;  // int32
  wire signed [31:0] sel_4632;  // int32
  wire signed [31:0] sel_1_800;  // int32
  wire signed [31:0] sel_4633;  // int32
  wire signed [31:0] sel_1_801;  // int32
  wire signed [31:0] sel_1_802;  // int32
  wire signed [31:0] sel_1_803;  // int32
  wire signed [31:0] sel_4634;  // int32
  wire signed [31:0] sel_1_804;  // int32
  wire signed [31:0] sel_4635;  // int32
  wire signed [31:0] sel_4636;  // int32
  reg signed [31:0] sel_1_805;  // int32
  wire tmp_267;
  wire sel_4637;
  wire sel_4638;
  wire sel_4639;
  wire sel_4640;
  wire sel_4641;
  wire sel_4642;
  wire sel_4643;
  wire sel_4644;
  wire sel_4645;
  wire sel_4646;
  wire sel_4647;
  wire sel_4648;
  wire sel_4649;
  wire sel_4650;
  wire sel_4651;
  wire s_326;
  wire sel_2_797;
  wire sel_4652;
  wire sel_2_798;
  wire sel_4653;
  wire sel_2_799;
  wire sel_4654;
  wire sel_2_800;
  wire sel_4655;
  wire sel_2_801;
  wire sel_4656;
  wire sel_2_802;
  wire sel_4657;
  wire sel_2_803;
  wire sel_2_804;
  wire sel_2_805;
  wire sel_4658;
  wire sel_2_806;
  wire sel_4659;
  wire sel_4660;
  reg  sel_2_807;
  reg  [11:0] cont_bits_42_19;  // boolean [12]
  wire signed [31:0] sel_4661;  // int32
  wire signed [31:0] sel_4662;  // int32
  wire signed [31:0] sel_4663;  // int32
  wire signed [31:0] sel_4664;  // int32
  wire signed [31:0] sel_4665;  // int32
  wire signed [31:0] sel_4666;  // int32
  wire signed [31:0] sel_4667;  // int32
  wire signed [31:0] sel_4668;  // int32
  wire signed [31:0] sel_4669;  // int32
  wire signed [31:0] sel_4670;  // int32
  wire signed [31:0] sel_4671;  // int32
  wire signed [31:0] sel_4672;  // int32
  wire signed [31:0] sel_4673;  // int32
  wire signed [31:0] sel_4674;  // int32
  wire signed [31:0] sel_4675;  // int32
  wire signed [31:0] s_327;  // int32
  wire signed [31:0] sel_1_806;  // int32
  wire signed [31:0] sel_4676;  // int32
  wire signed [31:0] sel_1_807;  // int32
  wire signed [31:0] sel_4677;  // int32
  wire signed [31:0] sel_1_808;  // int32
  wire signed [31:0] sel_4678;  // int32
  wire signed [31:0] sel_1_809;  // int32
  wire signed [31:0] sel_4679;  // int32
  wire signed [31:0] sel_1_810;  // int32
  wire signed [31:0] sel_4680;  // int32
  wire signed [31:0] sel_1_811;  // int32
  wire signed [31:0] sel_4681;  // int32
  wire signed [31:0] sel_1_812;  // int32
  wire signed [31:0] sel_1_813;  // int32
  wire signed [31:0] sel_1_814;  // int32
  wire signed [31:0] sel_4682;  // int32
  wire signed [31:0] sel_1_815;  // int32
  wire signed [31:0] sel_4683;  // int32
  wire signed [31:0] sel_4684;  // int32
  reg signed [31:0] sel_1_816;  // int32
  wire tmp_268;
  wire sel_4685;
  wire sel_4686;
  wire sel_4687;
  wire sel_4688;
  wire sel_4689;
  wire sel_4690;
  wire sel_4691;
  wire sel_4692;
  wire sel_4693;
  wire sel_4694;
  wire sel_4695;
  wire sel_4696;
  wire sel_4697;
  wire sel_4698;
  wire sel_4699;
  wire s_328;
  wire sel_2_808;
  wire sel_4700;
  wire sel_2_809;
  wire sel_4701;
  wire sel_2_810;
  wire sel_4702;
  wire sel_2_811;
  wire sel_4703;
  wire sel_2_812;
  wire sel_4704;
  wire sel_2_813;
  wire sel_4705;
  wire sel_2_814;
  wire sel_2_815;
  wire sel_2_816;
  wire sel_4706;
  wire sel_2_817;
  wire sel_4707;
  wire sel_4708;
  reg  sel_2_818;
  reg  [11:0] cont_bits_42_20;  // boolean [12]
  wire signed [31:0] sel_4709;  // int32
  wire signed [31:0] sel_4710;  // int32
  wire signed [31:0] sel_4711;  // int32
  wire signed [31:0] sel_4712;  // int32
  wire signed [31:0] sel_4713;  // int32
  wire signed [31:0] sel_4714;  // int32
  wire signed [31:0] sel_4715;  // int32
  wire signed [31:0] sel_4716;  // int32
  wire signed [31:0] sel_4717;  // int32
  wire signed [31:0] sel_4718;  // int32
  wire signed [31:0] sel_4719;  // int32
  wire signed [31:0] sel_4720;  // int32
  wire signed [31:0] sel_4721;  // int32
  wire signed [31:0] sel_4722;  // int32
  wire signed [31:0] sel_4723;  // int32
  wire signed [31:0] s_329;  // int32
  wire signed [31:0] sel_1_817;  // int32
  wire signed [31:0] sel_4724;  // int32
  wire signed [31:0] sel_1_818;  // int32
  wire signed [31:0] sel_4725;  // int32
  wire signed [31:0] sel_1_819;  // int32
  wire signed [31:0] sel_4726;  // int32
  wire signed [31:0] sel_1_820;  // int32
  wire signed [31:0] sel_4727;  // int32
  wire signed [31:0] sel_1_821;  // int32
  wire signed [31:0] sel_4728;  // int32
  wire signed [31:0] sel_1_822;  // int32
  wire signed [31:0] sel_4729;  // int32
  wire signed [31:0] sel_1_823;  // int32
  wire signed [31:0] sel_1_824;  // int32
  wire signed [31:0] sel_1_825;  // int32
  wire signed [31:0] sel_4730;  // int32
  wire signed [31:0] sel_1_826;  // int32
  wire signed [31:0] sel_4731;  // int32
  wire signed [31:0] sel_4732;  // int32
  reg signed [31:0] sel_1_827;  // int32
  wire tmp_269;
  wire sel_4733;
  wire sel_4734;
  wire sel_4735;
  wire sel_4736;
  wire sel_4737;
  wire sel_4738;
  wire sel_4739;
  wire sel_4740;
  wire sel_4741;
  wire sel_4742;
  wire sel_4743;
  wire sel_4744;
  wire sel_4745;
  wire sel_4746;
  wire sel_4747;
  wire s_330;
  wire sel_2_819;
  wire sel_4748;
  wire sel_2_820;
  wire sel_4749;
  wire sel_2_821;
  wire sel_4750;
  wire sel_2_822;
  wire sel_4751;
  wire sel_2_823;
  wire sel_4752;
  wire sel_2_824;
  wire sel_4753;
  wire sel_2_825;
  wire sel_2_826;
  wire sel_2_827;
  wire sel_4754;
  wire sel_2_828;
  wire sel_4755;
  wire sel_4756;
  reg  sel_2_829;
  reg  [11:0] cont_bits_42_21;  // boolean [12]
  wire signed [31:0] sel_4757;  // int32
  wire signed [31:0] sel_4758;  // int32
  wire signed [31:0] sel_4759;  // int32
  wire signed [31:0] sel_4760;  // int32
  wire signed [31:0] sel_4761;  // int32
  wire signed [31:0] sel_4762;  // int32
  wire signed [31:0] sel_4763;  // int32
  wire signed [31:0] sel_4764;  // int32
  wire signed [31:0] sel_4765;  // int32
  wire signed [31:0] sel_4766;  // int32
  wire signed [31:0] sel_4767;  // int32
  wire signed [31:0] sel_4768;  // int32
  wire signed [31:0] sel_4769;  // int32
  wire signed [31:0] sel_4770;  // int32
  wire signed [31:0] sel_4771;  // int32
  wire signed [31:0] s_331;  // int32
  wire signed [31:0] sel_1_828;  // int32
  wire signed [31:0] sel_4772;  // int32
  wire signed [31:0] sel_1_829;  // int32
  wire signed [31:0] sel_4773;  // int32
  wire signed [31:0] sel_1_830;  // int32
  wire signed [31:0] sel_4774;  // int32
  wire signed [31:0] sel_1_831;  // int32
  wire signed [31:0] sel_4775;  // int32
  wire signed [31:0] sel_1_832;  // int32
  wire signed [31:0] sel_4776;  // int32
  wire signed [31:0] sel_1_833;  // int32
  wire signed [31:0] sel_4777;  // int32
  wire signed [31:0] sel_1_834;  // int32
  wire signed [31:0] sel_1_835;  // int32
  wire signed [31:0] sel_1_836;  // int32
  wire signed [31:0] sel_4778;  // int32
  wire signed [31:0] sel_1_837;  // int32
  wire signed [31:0] sel_4779;  // int32
  wire signed [31:0] sel_4780;  // int32
  reg signed [31:0] sel_1_838;  // int32
  wire tmp_270;
  wire sel_4781;
  wire sel_4782;
  wire sel_4783;
  wire sel_4784;
  wire sel_4785;
  wire sel_4786;
  wire sel_4787;
  wire sel_4788;
  wire sel_4789;
  wire sel_4790;
  wire sel_4791;
  wire sel_4792;
  wire sel_4793;
  wire sel_4794;
  wire sel_4795;
  wire s_332;
  wire sel_2_830;
  wire sel_4796;
  wire sel_2_831;
  wire sel_4797;
  wire sel_2_832;
  wire sel_4798;
  wire sel_2_833;
  wire sel_4799;
  wire sel_2_834;
  wire sel_4800;
  wire sel_2_835;
  wire sel_4801;
  wire sel_2_836;
  wire sel_2_837;
  wire sel_2_838;
  wire sel_4802;
  wire sel_2_839;
  wire sel_4803;
  wire sel_4804;
  reg  sel_2_840;
  reg  [11:0] cont_bits_42_22;  // boolean [12]
  wire signed [31:0] sel_4805;  // int32
  wire signed [31:0] sel_4806;  // int32
  wire signed [31:0] sel_4807;  // int32
  wire signed [31:0] sel_4808;  // int32
  wire signed [31:0] sel_4809;  // int32
  wire signed [31:0] sel_4810;  // int32
  wire signed [31:0] sel_4811;  // int32
  wire signed [31:0] sel_4812;  // int32
  wire signed [31:0] sel_4813;  // int32
  wire signed [31:0] sel_4814;  // int32
  wire signed [31:0] sel_4815;  // int32
  wire signed [31:0] sel_4816;  // int32
  wire signed [31:0] sel_4817;  // int32
  wire signed [31:0] sel_4818;  // int32
  wire signed [31:0] sel_4819;  // int32
  wire signed [31:0] s_333;  // int32
  wire signed [31:0] sel_1_839;  // int32
  wire signed [31:0] sel_4820;  // int32
  wire signed [31:0] sel_1_840;  // int32
  wire signed [31:0] sel_4821;  // int32
  wire signed [31:0] sel_1_841;  // int32
  wire signed [31:0] sel_4822;  // int32
  wire signed [31:0] sel_1_842;  // int32
  wire signed [31:0] sel_4823;  // int32
  wire signed [31:0] sel_1_843;  // int32
  wire signed [31:0] sel_4824;  // int32
  wire signed [31:0] sel_1_844;  // int32
  wire signed [31:0] sel_4825;  // int32
  wire signed [31:0] sel_1_845;  // int32
  wire signed [31:0] sel_1_846;  // int32
  wire signed [31:0] sel_1_847;  // int32
  wire signed [31:0] sel_4826;  // int32
  wire signed [31:0] sel_1_848;  // int32
  wire signed [31:0] sel_4827;  // int32
  wire signed [31:0] sel_4828;  // int32
  reg signed [31:0] sel_1_849;  // int32
  wire tmp_271;
  wire sel_4829;
  wire sel_4830;
  wire sel_4831;
  wire sel_4832;
  wire sel_4833;
  wire sel_4834;
  wire sel_4835;
  wire sel_4836;
  wire sel_4837;
  wire sel_4838;
  wire sel_4839;
  wire sel_4840;
  wire sel_4841;
  wire sel_4842;
  wire sel_4843;
  wire s_334;
  wire sel_2_841;
  wire sel_4844;
  wire sel_2_842;
  wire sel_4845;
  wire sel_2_843;
  wire sel_4846;
  wire sel_2_844;
  wire sel_4847;
  wire sel_2_845;
  wire sel_4848;
  wire sel_2_846;
  wire sel_4849;
  wire sel_2_847;
  wire sel_2_848;
  wire sel_2_849;
  wire sel_4850;
  wire sel_2_850;
  wire sel_4851;
  wire sel_4852;
  reg  sel_2_851;
  reg  [11:0] cont_bits_42_23;  // boolean [12]
  wire signed [31:0] sel_4853;  // int32
  wire signed [31:0] sel_4854;  // int32
  wire signed [31:0] sel_4855;  // int32
  wire signed [31:0] sel_4856;  // int32
  wire signed [31:0] sel_4857;  // int32
  wire signed [31:0] sel_4858;  // int32
  wire signed [31:0] sel_4859;  // int32
  wire signed [31:0] sel_4860;  // int32
  wire signed [31:0] sel_4861;  // int32
  wire signed [31:0] sel_4862;  // int32
  wire signed [31:0] sel_4863;  // int32
  wire signed [31:0] sel_4864;  // int32
  wire signed [31:0] sel_4865;  // int32
  wire signed [31:0] sel_4866;  // int32
  wire signed [31:0] sel_4867;  // int32
  wire signed [31:0] s_335;  // int32
  wire signed [31:0] sel_1_850;  // int32
  wire signed [31:0] sel_4868;  // int32
  wire signed [31:0] sel_1_851;  // int32
  wire signed [31:0] sel_4869;  // int32
  wire signed [31:0] sel_1_852;  // int32
  wire signed [31:0] sel_4870;  // int32
  wire signed [31:0] sel_1_853;  // int32
  wire signed [31:0] sel_4871;  // int32
  wire signed [31:0] sel_1_854;  // int32
  wire signed [31:0] sel_4872;  // int32
  wire signed [31:0] sel_1_855;  // int32
  wire signed [31:0] sel_4873;  // int32
  wire signed [31:0] sel_1_856;  // int32
  wire signed [31:0] sel_1_857;  // int32
  wire signed [31:0] sel_1_858;  // int32
  wire signed [31:0] sel_4874;  // int32
  wire signed [31:0] sel_1_859;  // int32
  wire signed [31:0] sel_4875;  // int32
  wire signed [31:0] sel_4876;  // int32
  reg signed [31:0] sel_1_860;  // int32
  wire tmp_272;
  wire sel_4877;
  wire sel_4878;
  wire sel_4879;
  wire sel_4880;
  wire sel_4881;
  wire sel_4882;
  wire sel_4883;
  wire sel_4884;
  wire sel_4885;
  wire sel_4886;
  wire sel_4887;
  wire sel_4888;
  wire sel_4889;
  wire sel_4890;
  wire sel_4891;
  wire s_336;
  wire sel_2_852;
  wire sel_4892;
  wire sel_2_853;
  wire sel_4893;
  wire sel_2_854;
  wire sel_4894;
  wire sel_2_855;
  wire sel_4895;
  wire sel_2_856;
  wire sel_4896;
  wire sel_2_857;
  wire sel_4897;
  wire sel_2_858;
  wire sel_2_859;
  wire sel_2_860;
  wire sel_4898;
  wire sel_2_861;
  wire sel_4899;
  wire sel_4900;
  reg  sel_2_862;
  reg  [11:0] cont_bits_42_24;  // boolean [12]
  wire signed [31:0] sel_4901;  // int32
  wire signed [31:0] sel_4902;  // int32
  wire signed [31:0] sel_4903;  // int32
  wire signed [31:0] sel_4904;  // int32
  wire signed [31:0] sel_4905;  // int32
  wire signed [31:0] sel_4906;  // int32
  wire signed [31:0] sel_4907;  // int32
  wire signed [31:0] sel_4908;  // int32
  wire signed [31:0] sel_4909;  // int32
  wire signed [31:0] sel_4910;  // int32
  wire signed [31:0] sel_4911;  // int32
  wire signed [31:0] sel_4912;  // int32
  wire signed [31:0] sel_4913;  // int32
  wire signed [31:0] sel_4914;  // int32
  wire signed [31:0] sel_4915;  // int32
  wire signed [31:0] s_337;  // int32
  wire signed [31:0] sel_1_861;  // int32
  wire signed [31:0] sel_4916;  // int32
  wire signed [31:0] sel_1_862;  // int32
  wire signed [31:0] sel_4917;  // int32
  wire signed [31:0] sel_1_863;  // int32
  wire signed [31:0] sel_4918;  // int32
  wire signed [31:0] sel_1_864;  // int32
  wire signed [31:0] sel_4919;  // int32
  wire signed [31:0] sel_1_865;  // int32
  wire signed [31:0] sel_4920;  // int32
  wire signed [31:0] sel_1_866;  // int32
  wire signed [31:0] sel_4921;  // int32
  wire signed [31:0] sel_1_867;  // int32
  wire signed [31:0] sel_1_868;  // int32
  wire signed [31:0] sel_1_869;  // int32
  wire signed [31:0] sel_4922;  // int32
  wire signed [31:0] sel_1_870;  // int32
  wire signed [31:0] sel_4923;  // int32
  wire signed [31:0] sel_4924;  // int32
  reg signed [31:0] sel_1_871;  // int32
  wire tmp_273;
  wire sel_4925;
  wire sel_4926;
  wire sel_4927;
  wire sel_4928;
  wire sel_4929;
  wire sel_4930;
  wire sel_4931;
  wire sel_4932;
  wire sel_4933;
  wire sel_4934;
  wire sel_4935;
  wire sel_4936;
  wire sel_4937;
  wire sel_4938;
  wire sel_4939;
  wire s_338;
  wire sel_2_863;
  wire sel_4940;
  wire sel_2_864;
  wire sel_4941;
  wire sel_2_865;
  wire sel_4942;
  wire sel_2_866;
  wire sel_4943;
  wire sel_2_867;
  wire sel_4944;
  wire sel_2_868;
  wire sel_4945;
  wire sel_2_869;
  wire sel_2_870;
  wire sel_2_871;
  wire sel_4946;
  wire sel_2_872;
  wire sel_4947;
  wire sel_4948;
  reg  sel_2_873;
  reg  [11:0] cont_bits_42_25;  // boolean [12]
  wire signed [31:0] sel_4949;  // int32
  wire signed [31:0] sel_4950;  // int32
  wire signed [31:0] sel_4951;  // int32
  wire signed [31:0] sel_4952;  // int32
  wire signed [31:0] sel_4953;  // int32
  wire signed [31:0] sel_4954;  // int32
  wire signed [31:0] sel_4955;  // int32
  wire signed [31:0] sel_4956;  // int32
  wire signed [31:0] sel_4957;  // int32
  wire signed [31:0] sel_4958;  // int32
  wire signed [31:0] sel_4959;  // int32
  wire signed [31:0] sel_4960;  // int32
  wire signed [31:0] sel_4961;  // int32
  wire signed [31:0] sel_4962;  // int32
  wire signed [31:0] sel_4963;  // int32
  wire signed [31:0] s_339;  // int32
  wire signed [31:0] sel_1_872;  // int32
  wire signed [31:0] sel_4964;  // int32
  wire signed [31:0] sel_1_873;  // int32
  wire signed [31:0] sel_4965;  // int32
  wire signed [31:0] sel_1_874;  // int32
  wire signed [31:0] sel_4966;  // int32
  wire signed [31:0] sel_1_875;  // int32
  wire signed [31:0] sel_4967;  // int32
  wire signed [31:0] sel_1_876;  // int32
  wire signed [31:0] sel_4968;  // int32
  wire signed [31:0] sel_1_877;  // int32
  wire signed [31:0] sel_4969;  // int32
  wire signed [31:0] sel_1_878;  // int32
  wire signed [31:0] sel_1_879;  // int32
  wire signed [31:0] sel_1_880;  // int32
  wire signed [31:0] sel_4970;  // int32
  wire signed [31:0] sel_1_881;  // int32
  wire signed [31:0] sel_4971;  // int32
  wire signed [31:0] sel_4972;  // int32
  reg signed [31:0] sel_1_882;  // int32
  wire tmp_274;
  wire sel_4973;
  wire sel_4974;
  wire sel_4975;
  wire sel_4976;
  wire sel_4977;
  wire sel_4978;
  wire sel_4979;
  wire sel_4980;
  wire sel_4981;
  wire sel_4982;
  wire sel_4983;
  wire sel_4984;
  wire sel_4985;
  wire sel_4986;
  wire sel_4987;
  wire s_340;
  wire sel_2_874;
  wire sel_4988;
  wire sel_2_875;
  wire sel_4989;
  wire sel_2_876;
  wire sel_4990;
  wire sel_2_877;
  wire sel_4991;
  wire sel_2_878;
  wire sel_4992;
  wire sel_2_879;
  wire sel_4993;
  wire sel_2_880;
  wire sel_2_881;
  wire sel_2_882;
  wire sel_4994;
  wire sel_2_883;
  wire sel_4995;
  wire sel_4996;
  reg  sel_2_884;
  reg  [11:0] cont_bits_42_26;  // boolean [12]
  wire signed [31:0] sel_4997;  // int32
  wire signed [31:0] sel_4998;  // int32
  wire signed [31:0] sel_4999;  // int32
  wire signed [31:0] sel_5000;  // int32
  wire signed [31:0] sel_5001;  // int32
  wire signed [31:0] sel_5002;  // int32
  wire signed [31:0] sel_5003;  // int32
  wire signed [31:0] sel_5004;  // int32
  wire signed [31:0] sel_5005;  // int32
  wire signed [31:0] sel_5006;  // int32
  wire signed [31:0] sel_5007;  // int32
  wire signed [31:0] sel_5008;  // int32
  wire signed [31:0] sel_5009;  // int32
  wire signed [31:0] sel_5010;  // int32
  wire signed [31:0] sel_5011;  // int32
  wire signed [31:0] s_341;  // int32
  wire signed [31:0] sel_1_883;  // int32
  wire signed [31:0] sel_5012;  // int32
  wire signed [31:0] sel_1_884;  // int32
  wire signed [31:0] sel_5013;  // int32
  wire signed [31:0] sel_1_885;  // int32
  wire signed [31:0] sel_5014;  // int32
  wire signed [31:0] sel_1_886;  // int32
  wire signed [31:0] sel_5015;  // int32
  wire signed [31:0] sel_1_887;  // int32
  wire signed [31:0] sel_5016;  // int32
  wire signed [31:0] sel_1_888;  // int32
  wire signed [31:0] sel_5017;  // int32
  wire signed [31:0] sel_1_889;  // int32
  wire signed [31:0] sel_1_890;  // int32
  wire signed [31:0] sel_1_891;  // int32
  wire signed [31:0] sel_5018;  // int32
  wire signed [31:0] sel_1_892;  // int32
  wire signed [31:0] sel_5019;  // int32
  wire signed [31:0] sel_5020;  // int32
  reg signed [31:0] sel_1_893;  // int32
  wire cont_bits_42_27;
  wire sel_1_894;
  wire [11:0] cont_bits_32_14;  // boolean [12]
  wire functionOutput_0_10;
  wire functionOutput_1_10;
  wire functionOutput_2_10;
  wire functionOutput_3_10;
  wire functionOutput_4_10;
  wire functionOutput_5_10;
  wire functionOutput_6_10;
  wire functionOutput_7_10;
  wire functionOutput_8_10;
  wire functionOutput_9_10;
  wire functionOutput_10_10;
  wire functionOutput_11_10;
  wire [11:0] functionOutput_21;  // boolean [12]
  wire signed [31:0] sel_5021;  // int32
  wire signed [31:0] sel_5022;  // int32
  wire signed [31:0] sel_5023;  // int32
  wire signed [31:0] sel_5024;  // int32
  wire signed [31:0] sel_5025;  // int32
  wire signed [31:0] sel_5026;  // int32
  wire signed [31:0] sel_5027;  // int32
  wire signed [31:0] sel_5028;  // int32
  wire signed [31:0] sel_5029;  // int32
  wire signed [31:0] sel_5030;  // int32
  wire signed [31:0] sel_5031;  // int32
  wire signed [31:0] sel_5032;  // int32
  wire signed [31:0] sel_5033;  // int32
  wire signed [31:0] sel_5034;  // int32
  wire signed [31:0] sel_5035;  // int32
  wire signed [31:0] s_342;  // int32
  wire signed [31:0] sel_1_895;  // int32
  wire signed [31:0] sel_5036;  // int32
  wire signed [31:0] sel_1_896;  // int32
  wire signed [31:0] sel_5037;  // int32
  wire signed [31:0] sel_1_897;  // int32
  wire signed [31:0] sel_5038;  // int32
  wire signed [31:0] sel_1_898;  // int32
  wire signed [31:0] sel_5039;  // int32
  wire signed [31:0] sel_1_899;  // int32
  wire signed [31:0] sel_5040;  // int32
  wire signed [31:0] sel_1_900;  // int32
  wire signed [31:0] sel_1_901;  // int32
  wire signed [31:0] sel_1_902;  // int32
  wire signed [31:0] sel_5041;  // int32
  wire signed [31:0] sel_1_903;  // int32
  wire signed [31:0] sel_5042;  // int32
  wire signed [31:0] sel_5043;  // int32
  reg signed [31:0] sel_1_904;  // int32
  wire tmp_275;
  wire sel_5044;
  wire sel_5045;
  wire sel_5046;
  wire sel_5047;
  wire sel_5048;
  wire sel_5049;
  wire sel_5050;
  wire sel_5051;
  wire sel_5052;
  wire sel_5053;
  wire sel_5054;
  wire sel_5055;
  wire sel_5056;
  wire sel_5057;
  wire sel_5058;
  wire s_343;
  wire sel_2_885;
  wire sel_5059;
  wire sel_2_886;
  wire sel_5060;
  wire sel_2_887;
  wire sel_5061;
  wire sel_2_888;
  wire sel_5062;
  wire sel_2_889;
  wire sel_5063;
  wire sel_2_890;
  wire sel_2_891;
  wire sel_2_892;
  wire sel_5064;
  wire sel_2_893;
  wire sel_5065;
  wire sel_5066;
  reg  sel_2_894;
  reg  [11:0] cont_bits_32_15;  // boolean [12]
  wire signed [31:0] sel_5067;  // int32
  wire signed [31:0] sel_5068;  // int32
  wire signed [31:0] sel_5069;  // int32
  wire signed [31:0] sel_5070;  // int32
  wire signed [31:0] sel_5071;  // int32
  wire signed [31:0] sel_5072;  // int32
  wire signed [31:0] sel_5073;  // int32
  wire signed [31:0] sel_5074;  // int32
  wire signed [31:0] sel_5075;  // int32
  wire signed [31:0] sel_5076;  // int32
  wire signed [31:0] sel_5077;  // int32
  wire signed [31:0] sel_5078;  // int32
  wire signed [31:0] sel_5079;  // int32
  wire signed [31:0] sel_5080;  // int32
  wire signed [31:0] sel_5081;  // int32
  wire signed [31:0] s_344;  // int32
  wire signed [31:0] sel_1_905;  // int32
  wire signed [31:0] sel_5082;  // int32
  wire signed [31:0] sel_1_906;  // int32
  wire signed [31:0] sel_5083;  // int32
  wire signed [31:0] sel_1_907;  // int32
  wire signed [31:0] sel_5084;  // int32
  wire signed [31:0] sel_1_908;  // int32
  wire signed [31:0] sel_5085;  // int32
  wire signed [31:0] sel_1_909;  // int32
  wire signed [31:0] sel_5086;  // int32
  wire signed [31:0] sel_1_910;  // int32
  wire signed [31:0] sel_1_911;  // int32
  wire signed [31:0] sel_1_912;  // int32
  wire signed [31:0] sel_5087;  // int32
  wire signed [31:0] sel_1_913;  // int32
  wire signed [31:0] sel_5088;  // int32
  wire signed [31:0] sel_5089;  // int32
  reg signed [31:0] sel_1_914;  // int32
  wire tmp_276;
  wire sel_5090;
  wire sel_5091;
  wire sel_5092;
  wire sel_5093;
  wire sel_5094;
  wire sel_5095;
  wire sel_5096;
  wire sel_5097;
  wire sel_5098;
  wire sel_5099;
  wire sel_5100;
  wire sel_5101;
  wire sel_5102;
  wire sel_5103;
  wire sel_5104;
  wire s_345;
  wire sel_2_895;
  wire sel_5105;
  wire sel_2_896;
  wire sel_5106;
  wire sel_2_897;
  wire sel_5107;
  wire sel_2_898;
  wire sel_5108;
  wire sel_2_899;
  wire sel_5109;
  wire sel_2_900;
  wire sel_2_901;
  wire sel_2_902;
  wire sel_5110;
  wire sel_2_903;
  wire sel_5111;
  wire sel_5112;
  reg  sel_2_904;
  reg  [11:0] cont_bits_32_16;  // boolean [12]
  wire signed [31:0] sel_5113;  // int32
  wire signed [31:0] sel_5114;  // int32
  wire signed [31:0] sel_5115;  // int32
  wire signed [31:0] sel_5116;  // int32
  wire signed [31:0] sel_5117;  // int32
  wire signed [31:0] sel_5118;  // int32
  wire signed [31:0] sel_5119;  // int32
  wire signed [31:0] sel_5120;  // int32
  wire signed [31:0] sel_5121;  // int32
  wire signed [31:0] sel_5122;  // int32
  wire signed [31:0] sel_5123;  // int32
  wire signed [31:0] sel_5124;  // int32
  wire signed [31:0] sel_5125;  // int32
  wire signed [31:0] sel_5126;  // int32
  wire signed [31:0] sel_5127;  // int32
  wire signed [31:0] s_346;  // int32
  wire signed [31:0] sel_1_915;  // int32
  wire signed [31:0] sel_5128;  // int32
  wire signed [31:0] sel_1_916;  // int32
  wire signed [31:0] sel_5129;  // int32
  wire signed [31:0] sel_1_917;  // int32
  wire signed [31:0] sel_5130;  // int32
  wire signed [31:0] sel_1_918;  // int32
  wire signed [31:0] sel_5131;  // int32
  wire signed [31:0] sel_1_919;  // int32
  wire signed [31:0] sel_5132;  // int32
  wire signed [31:0] sel_1_920;  // int32
  wire signed [31:0] sel_1_921;  // int32
  wire signed [31:0] sel_1_922;  // int32
  wire signed [31:0] sel_5133;  // int32
  wire signed [31:0] sel_1_923;  // int32
  wire signed [31:0] sel_5134;  // int32
  wire signed [31:0] sel_5135;  // int32
  reg signed [31:0] sel_1_924;  // int32
  wire tmp_277;
  wire sel_5136;
  wire sel_5137;
  wire sel_5138;
  wire sel_5139;
  wire sel_5140;
  wire sel_5141;
  wire sel_5142;
  wire sel_5143;
  wire sel_5144;
  wire sel_5145;
  wire sel_5146;
  wire sel_5147;
  wire sel_5148;
  wire sel_5149;
  wire sel_5150;
  wire s_347;
  wire sel_2_905;
  wire sel_5151;
  wire sel_2_906;
  wire sel_5152;
  wire sel_2_907;
  wire sel_5153;
  wire sel_2_908;
  wire sel_5154;
  wire sel_2_909;
  wire sel_5155;
  wire sel_2_910;
  wire sel_2_911;
  wire sel_2_912;
  wire sel_5156;
  wire sel_2_913;
  wire sel_5157;
  wire sel_5158;
  reg  sel_2_914;
  reg  [11:0] cont_bits_32_17;  // boolean [12]
  wire signed [31:0] sel_5159;  // int32
  wire signed [31:0] sel_5160;  // int32
  wire signed [31:0] sel_5161;  // int32
  wire signed [31:0] sel_5162;  // int32
  wire signed [31:0] sel_5163;  // int32
  wire signed [31:0] sel_5164;  // int32
  wire signed [31:0] sel_5165;  // int32
  wire signed [31:0] sel_5166;  // int32
  wire signed [31:0] sel_5167;  // int32
  wire signed [31:0] sel_5168;  // int32
  wire signed [31:0] sel_5169;  // int32
  wire signed [31:0] sel_5170;  // int32
  wire signed [31:0] sel_5171;  // int32
  wire signed [31:0] sel_5172;  // int32
  wire signed [31:0] sel_5173;  // int32
  wire signed [31:0] s_348;  // int32
  wire signed [31:0] sel_1_925;  // int32
  wire signed [31:0] sel_5174;  // int32
  wire signed [31:0] sel_1_926;  // int32
  wire signed [31:0] sel_5175;  // int32
  wire signed [31:0] sel_1_927;  // int32
  wire signed [31:0] sel_5176;  // int32
  wire signed [31:0] sel_1_928;  // int32
  wire signed [31:0] sel_5177;  // int32
  wire signed [31:0] sel_1_929;  // int32
  wire signed [31:0] sel_5178;  // int32
  wire signed [31:0] sel_1_930;  // int32
  wire signed [31:0] sel_1_931;  // int32
  wire signed [31:0] sel_1_932;  // int32
  wire signed [31:0] sel_5179;  // int32
  wire signed [31:0] sel_1_933;  // int32
  wire signed [31:0] sel_5180;  // int32
  wire signed [31:0] sel_5181;  // int32
  reg signed [31:0] sel_1_934;  // int32
  wire tmp_278;
  wire sel_5182;
  wire sel_5183;
  wire sel_5184;
  wire sel_5185;
  wire sel_5186;
  wire sel_5187;
  wire sel_5188;
  wire sel_5189;
  wire sel_5190;
  wire sel_5191;
  wire sel_5192;
  wire sel_5193;
  wire sel_5194;
  wire sel_5195;
  wire sel_5196;
  wire s_349;
  wire sel_2_915;
  wire sel_5197;
  wire sel_2_916;
  wire sel_5198;
  wire sel_2_917;
  wire sel_5199;
  wire sel_2_918;
  wire sel_5200;
  wire sel_2_919;
  wire sel_5201;
  wire sel_2_920;
  wire sel_2_921;
  wire sel_2_922;
  wire sel_5202;
  wire sel_2_923;
  wire sel_5203;
  wire sel_5204;
  reg  sel_2_924;
  reg  [11:0] cont_bits_32_18;  // boolean [12]
  wire signed [31:0] sel_5205;  // int32
  wire signed [31:0] sel_5206;  // int32
  wire signed [31:0] sel_5207;  // int32
  wire signed [31:0] sel_5208;  // int32
  wire signed [31:0] sel_5209;  // int32
  wire signed [31:0] sel_5210;  // int32
  wire signed [31:0] sel_5211;  // int32
  wire signed [31:0] sel_5212;  // int32
  wire signed [31:0] sel_5213;  // int32
  wire signed [31:0] sel_5214;  // int32
  wire signed [31:0] sel_5215;  // int32
  wire signed [31:0] sel_5216;  // int32
  wire signed [31:0] sel_5217;  // int32
  wire signed [31:0] sel_5218;  // int32
  wire signed [31:0] sel_5219;  // int32
  wire signed [31:0] s_350;  // int32
  wire signed [31:0] sel_1_935;  // int32
  wire signed [31:0] sel_5220;  // int32
  wire signed [31:0] sel_1_936;  // int32
  wire signed [31:0] sel_5221;  // int32
  wire signed [31:0] sel_1_937;  // int32
  wire signed [31:0] sel_5222;  // int32
  wire signed [31:0] sel_1_938;  // int32
  wire signed [31:0] sel_5223;  // int32
  wire signed [31:0] sel_1_939;  // int32
  wire signed [31:0] sel_5224;  // int32
  wire signed [31:0] sel_1_940;  // int32
  wire signed [31:0] sel_1_941;  // int32
  wire signed [31:0] sel_1_942;  // int32
  wire signed [31:0] sel_5225;  // int32
  wire signed [31:0] sel_1_943;  // int32
  wire signed [31:0] sel_5226;  // int32
  wire signed [31:0] sel_5227;  // int32
  reg signed [31:0] sel_1_944;  // int32
  wire tmp_279;
  wire sel_5228;
  wire sel_5229;
  wire sel_5230;
  wire sel_5231;
  wire sel_5232;
  wire sel_5233;
  wire sel_5234;
  wire sel_5235;
  wire sel_5236;
  wire sel_5237;
  wire sel_5238;
  wire sel_5239;
  wire sel_5240;
  wire sel_5241;
  wire sel_5242;
  wire s_351;
  wire sel_2_925;
  wire sel_5243;
  wire sel_2_926;
  wire sel_5244;
  wire sel_2_927;
  wire sel_5245;
  wire sel_2_928;
  wire sel_5246;
  wire sel_2_929;
  wire sel_5247;
  wire sel_2_930;
  wire sel_2_931;
  wire sel_2_932;
  wire sel_5248;
  wire sel_2_933;
  wire sel_5249;
  wire sel_5250;
  reg  sel_2_934;
  reg  [11:0] cont_bits_32_19;  // boolean [12]
  wire signed [31:0] sel_5251;  // int32
  wire signed [31:0] sel_5252;  // int32
  wire signed [31:0] sel_5253;  // int32
  wire signed [31:0] sel_5254;  // int32
  wire signed [31:0] sel_5255;  // int32
  wire signed [31:0] sel_5256;  // int32
  wire signed [31:0] sel_5257;  // int32
  wire signed [31:0] sel_5258;  // int32
  wire signed [31:0] sel_5259;  // int32
  wire signed [31:0] sel_5260;  // int32
  wire signed [31:0] sel_5261;  // int32
  wire signed [31:0] sel_5262;  // int32
  wire signed [31:0] sel_5263;  // int32
  wire signed [31:0] sel_5264;  // int32
  wire signed [31:0] sel_5265;  // int32
  wire signed [31:0] s_352;  // int32
  wire signed [31:0] sel_1_945;  // int32
  wire signed [31:0] sel_5266;  // int32
  wire signed [31:0] sel_1_946;  // int32
  wire signed [31:0] sel_5267;  // int32
  wire signed [31:0] sel_1_947;  // int32
  wire signed [31:0] sel_5268;  // int32
  wire signed [31:0] sel_1_948;  // int32
  wire signed [31:0] sel_5269;  // int32
  wire signed [31:0] sel_1_949;  // int32
  wire signed [31:0] sel_5270;  // int32
  wire signed [31:0] sel_1_950;  // int32
  wire signed [31:0] sel_1_951;  // int32
  wire signed [31:0] sel_1_952;  // int32
  wire signed [31:0] sel_5271;  // int32
  wire signed [31:0] sel_1_953;  // int32
  wire signed [31:0] sel_5272;  // int32
  wire signed [31:0] sel_5273;  // int32
  reg signed [31:0] sel_1_954;  // int32
  wire tmp_280;
  wire sel_5274;
  wire sel_5275;
  wire sel_5276;
  wire sel_5277;
  wire sel_5278;
  wire sel_5279;
  wire sel_5280;
  wire sel_5281;
  wire sel_5282;
  wire sel_5283;
  wire sel_5284;
  wire sel_5285;
  wire sel_5286;
  wire sel_5287;
  wire sel_5288;
  wire s_353;
  wire sel_2_935;
  wire sel_5289;
  wire sel_2_936;
  wire sel_5290;
  wire sel_2_937;
  wire sel_5291;
  wire sel_2_938;
  wire sel_5292;
  wire sel_2_939;
  wire sel_5293;
  wire sel_2_940;
  wire sel_2_941;
  wire sel_2_942;
  wire sel_5294;
  wire sel_2_943;
  wire sel_5295;
  wire sel_5296;
  reg  sel_2_944;
  reg  [11:0] cont_bits_32_20;  // boolean [12]
  wire signed [31:0] sel_5297;  // int32
  wire signed [31:0] sel_5298;  // int32
  wire signed [31:0] sel_5299;  // int32
  wire signed [31:0] sel_5300;  // int32
  wire signed [31:0] sel_5301;  // int32
  wire signed [31:0] sel_5302;  // int32
  wire signed [31:0] sel_5303;  // int32
  wire signed [31:0] sel_5304;  // int32
  wire signed [31:0] sel_5305;  // int32
  wire signed [31:0] sel_5306;  // int32
  wire signed [31:0] sel_5307;  // int32
  wire signed [31:0] sel_5308;  // int32
  wire signed [31:0] sel_5309;  // int32
  wire signed [31:0] sel_5310;  // int32
  wire signed [31:0] sel_5311;  // int32
  wire signed [31:0] s_354;  // int32
  wire signed [31:0] sel_1_955;  // int32
  wire signed [31:0] sel_5312;  // int32
  wire signed [31:0] sel_1_956;  // int32
  wire signed [31:0] sel_5313;  // int32
  wire signed [31:0] sel_1_957;  // int32
  wire signed [31:0] sel_5314;  // int32
  wire signed [31:0] sel_1_958;  // int32
  wire signed [31:0] sel_5315;  // int32
  wire signed [31:0] sel_1_959;  // int32
  wire signed [31:0] sel_5316;  // int32
  wire signed [31:0] sel_1_960;  // int32
  wire signed [31:0] sel_1_961;  // int32
  wire signed [31:0] sel_1_962;  // int32
  wire signed [31:0] sel_5317;  // int32
  wire signed [31:0] sel_1_963;  // int32
  wire signed [31:0] sel_5318;  // int32
  wire signed [31:0] sel_5319;  // int32
  reg signed [31:0] sel_1_964;  // int32
  wire tmp_281;
  wire sel_5320;
  wire sel_5321;
  wire sel_5322;
  wire sel_5323;
  wire sel_5324;
  wire sel_5325;
  wire sel_5326;
  wire sel_5327;
  wire sel_5328;
  wire sel_5329;
  wire sel_5330;
  wire sel_5331;
  wire sel_5332;
  wire sel_5333;
  wire sel_5334;
  wire s_355;
  wire sel_2_945;
  wire sel_5335;
  wire sel_2_946;
  wire sel_5336;
  wire sel_2_947;
  wire sel_5337;
  wire sel_2_948;
  wire sel_5338;
  wire sel_2_949;
  wire sel_5339;
  wire sel_2_950;
  wire sel_2_951;
  wire sel_2_952;
  wire sel_5340;
  wire sel_2_953;
  wire sel_5341;
  wire sel_5342;
  reg  sel_2_954;
  reg  [11:0] cont_bits_32_21;  // boolean [12]
  wire signed [31:0] sel_5343;  // int32
  wire signed [31:0] sel_5344;  // int32
  wire signed [31:0] sel_5345;  // int32
  wire signed [31:0] sel_5346;  // int32
  wire signed [31:0] sel_5347;  // int32
  wire signed [31:0] sel_5348;  // int32
  wire signed [31:0] sel_5349;  // int32
  wire signed [31:0] sel_5350;  // int32
  wire signed [31:0] sel_5351;  // int32
  wire signed [31:0] sel_5352;  // int32
  wire signed [31:0] sel_5353;  // int32
  wire signed [31:0] sel_5354;  // int32
  wire signed [31:0] sel_5355;  // int32
  wire signed [31:0] sel_5356;  // int32
  wire signed [31:0] sel_5357;  // int32
  wire signed [31:0] s_356;  // int32
  wire signed [31:0] sel_1_965;  // int32
  wire signed [31:0] sel_5358;  // int32
  wire signed [31:0] sel_1_966;  // int32
  wire signed [31:0] sel_5359;  // int32
  wire signed [31:0] sel_1_967;  // int32
  wire signed [31:0] sel_5360;  // int32
  wire signed [31:0] sel_1_968;  // int32
  wire signed [31:0] sel_5361;  // int32
  wire signed [31:0] sel_1_969;  // int32
  wire signed [31:0] sel_5362;  // int32
  wire signed [31:0] sel_1_970;  // int32
  wire signed [31:0] sel_1_971;  // int32
  wire signed [31:0] sel_1_972;  // int32
  wire signed [31:0] sel_5363;  // int32
  wire signed [31:0] sel_1_973;  // int32
  wire signed [31:0] sel_5364;  // int32
  wire signed [31:0] sel_5365;  // int32
  reg signed [31:0] sel_1_974;  // int32
  wire tmp_282;
  wire sel_5366;
  wire sel_5367;
  wire sel_5368;
  wire sel_5369;
  wire sel_5370;
  wire sel_5371;
  wire sel_5372;
  wire sel_5373;
  wire sel_5374;
  wire sel_5375;
  wire sel_5376;
  wire sel_5377;
  wire sel_5378;
  wire sel_5379;
  wire sel_5380;
  wire s_357;
  wire sel_2_955;
  wire sel_5381;
  wire sel_2_956;
  wire sel_5382;
  wire sel_2_957;
  wire sel_5383;
  wire sel_2_958;
  wire sel_5384;
  wire sel_2_959;
  wire sel_5385;
  wire sel_2_960;
  wire sel_2_961;
  wire sel_2_962;
  wire sel_5386;
  wire sel_2_963;
  wire sel_5387;
  wire sel_5388;
  reg  sel_2_964;
  reg  [11:0] cont_bits_32_22;  // boolean [12]
  wire signed [31:0] sel_5389;  // int32
  wire signed [31:0] sel_5390;  // int32
  wire signed [31:0] sel_5391;  // int32
  wire signed [31:0] sel_5392;  // int32
  wire signed [31:0] sel_5393;  // int32
  wire signed [31:0] sel_5394;  // int32
  wire signed [31:0] sel_5395;  // int32
  wire signed [31:0] sel_5396;  // int32
  wire signed [31:0] sel_5397;  // int32
  wire signed [31:0] sel_5398;  // int32
  wire signed [31:0] sel_5399;  // int32
  wire signed [31:0] sel_5400;  // int32
  wire signed [31:0] sel_5401;  // int32
  wire signed [31:0] sel_5402;  // int32
  wire signed [31:0] sel_5403;  // int32
  wire signed [31:0] s_358;  // int32
  wire signed [31:0] sel_1_975;  // int32
  wire signed [31:0] sel_5404;  // int32
  wire signed [31:0] sel_1_976;  // int32
  wire signed [31:0] sel_5405;  // int32
  wire signed [31:0] sel_1_977;  // int32
  wire signed [31:0] sel_5406;  // int32
  wire signed [31:0] sel_1_978;  // int32
  wire signed [31:0] sel_5407;  // int32
  wire signed [31:0] sel_1_979;  // int32
  wire signed [31:0] sel_5408;  // int32
  wire signed [31:0] sel_1_980;  // int32
  wire signed [31:0] sel_1_981;  // int32
  wire signed [31:0] sel_1_982;  // int32
  wire signed [31:0] sel_5409;  // int32
  wire signed [31:0] sel_1_983;  // int32
  wire signed [31:0] sel_5410;  // int32
  wire signed [31:0] sel_5411;  // int32
  reg signed [31:0] sel_1_984;  // int32
  wire tmp_283;
  wire sel_5412;
  wire sel_5413;
  wire sel_5414;
  wire sel_5415;
  wire sel_5416;
  wire sel_5417;
  wire sel_5418;
  wire sel_5419;
  wire sel_5420;
  wire sel_5421;
  wire sel_5422;
  wire sel_5423;
  wire sel_5424;
  wire sel_5425;
  wire sel_5426;
  wire s_359;
  wire sel_2_965;
  wire sel_5427;
  wire sel_2_966;
  wire sel_5428;
  wire sel_2_967;
  wire sel_5429;
  wire sel_2_968;
  wire sel_5430;
  wire sel_2_969;
  wire sel_5431;
  wire sel_2_970;
  wire sel_2_971;
  wire sel_2_972;
  wire sel_5432;
  wire sel_2_973;
  wire sel_5433;
  wire sel_5434;
  reg  sel_2_974;
  reg  [11:0] cont_bits_32_23;  // boolean [12]
  wire signed [31:0] sel_5435;  // int32
  wire signed [31:0] sel_5436;  // int32
  wire signed [31:0] sel_5437;  // int32
  wire signed [31:0] sel_5438;  // int32
  wire signed [31:0] sel_5439;  // int32
  wire signed [31:0] sel_5440;  // int32
  wire signed [31:0] sel_5441;  // int32
  wire signed [31:0] sel_5442;  // int32
  wire signed [31:0] sel_5443;  // int32
  wire signed [31:0] sel_5444;  // int32
  wire signed [31:0] sel_5445;  // int32
  wire signed [31:0] sel_5446;  // int32
  wire signed [31:0] sel_5447;  // int32
  wire signed [31:0] sel_5448;  // int32
  wire signed [31:0] sel_5449;  // int32
  wire signed [31:0] s_360;  // int32
  wire signed [31:0] sel_1_985;  // int32
  wire signed [31:0] sel_5450;  // int32
  wire signed [31:0] sel_1_986;  // int32
  wire signed [31:0] sel_5451;  // int32
  wire signed [31:0] sel_1_987;  // int32
  wire signed [31:0] sel_5452;  // int32
  wire signed [31:0] sel_1_988;  // int32
  wire signed [31:0] sel_5453;  // int32
  wire signed [31:0] sel_1_989;  // int32
  wire signed [31:0] sel_5454;  // int32
  wire signed [31:0] sel_1_990;  // int32
  wire signed [31:0] sel_1_991;  // int32
  wire signed [31:0] sel_1_992;  // int32
  wire signed [31:0] sel_5455;  // int32
  wire signed [31:0] sel_1_993;  // int32
  wire signed [31:0] sel_5456;  // int32
  wire signed [31:0] sel_5457;  // int32
  reg signed [31:0] sel_1_994;  // int32
  wire tmp_284;
  wire sel_5458;
  wire sel_5459;
  wire sel_5460;
  wire sel_5461;
  wire sel_5462;
  wire sel_5463;
  wire sel_5464;
  wire sel_5465;
  wire sel_5466;
  wire sel_5467;
  wire sel_5468;
  wire sel_5469;
  wire sel_5470;
  wire sel_5471;
  wire sel_5472;
  wire s_361;
  wire sel_2_975;
  wire sel_5473;
  wire sel_2_976;
  wire sel_5474;
  wire sel_2_977;
  wire sel_5475;
  wire sel_2_978;
  wire sel_5476;
  wire sel_2_979;
  wire sel_5477;
  wire sel_2_980;
  wire sel_2_981;
  wire sel_2_982;
  wire sel_5478;
  wire sel_2_983;
  wire sel_5479;
  wire sel_5480;
  reg  sel_2_984;
  reg  [11:0] cont_bits_32_24;  // boolean [12]
  wire signed [31:0] sel_5481;  // int32
  wire signed [31:0] sel_5482;  // int32
  wire signed [31:0] sel_5483;  // int32
  wire signed [31:0] sel_5484;  // int32
  wire signed [31:0] sel_5485;  // int32
  wire signed [31:0] sel_5486;  // int32
  wire signed [31:0] sel_5487;  // int32
  wire signed [31:0] sel_5488;  // int32
  wire signed [31:0] sel_5489;  // int32
  wire signed [31:0] sel_5490;  // int32
  wire signed [31:0] sel_5491;  // int32
  wire signed [31:0] sel_5492;  // int32
  wire signed [31:0] sel_5493;  // int32
  wire signed [31:0] sel_5494;  // int32
  wire signed [31:0] sel_5495;  // int32
  wire signed [31:0] s_362;  // int32
  wire signed [31:0] sel_1_995;  // int32
  wire signed [31:0] sel_5496;  // int32
  wire signed [31:0] sel_1_996;  // int32
  wire signed [31:0] sel_5497;  // int32
  wire signed [31:0] sel_1_997;  // int32
  wire signed [31:0] sel_5498;  // int32
  wire signed [31:0] sel_1_998;  // int32
  wire signed [31:0] sel_5499;  // int32
  wire signed [31:0] sel_1_999;  // int32
  wire signed [31:0] sel_5500;  // int32
  wire signed [31:0] sel_1_1000;  // int32
  wire signed [31:0] sel_1_1001;  // int32
  wire signed [31:0] sel_1_1002;  // int32
  wire signed [31:0] sel_5501;  // int32
  wire signed [31:0] sel_1_1003;  // int32
  wire signed [31:0] sel_5502;  // int32
  wire signed [31:0] sel_5503;  // int32
  reg signed [31:0] sel_1_1004;  // int32
  wire tmp_285;
  wire sel_5504;
  wire sel_5505;
  wire sel_5506;
  wire sel_5507;
  wire sel_5508;
  wire sel_5509;
  wire sel_5510;
  wire sel_5511;
  wire sel_5512;
  wire sel_5513;
  wire sel_5514;
  wire sel_5515;
  wire sel_5516;
  wire sel_5517;
  wire sel_5518;
  wire s_363;
  wire sel_2_985;
  wire sel_5519;
  wire sel_2_986;
  wire sel_5520;
  wire sel_2_987;
  wire sel_5521;
  wire sel_2_988;
  wire sel_5522;
  wire sel_2_989;
  wire sel_5523;
  wire sel_2_990;
  wire sel_2_991;
  wire sel_2_992;
  wire sel_5524;
  wire sel_2_993;
  wire sel_5525;
  wire sel_5526;
  reg  sel_2_994;
  reg  [11:0] cont_bits_32_25;  // boolean [12]
  wire signed [31:0] sel_5527;  // int32
  wire signed [31:0] sel_5528;  // int32
  wire signed [31:0] sel_5529;  // int32
  wire signed [31:0] sel_5530;  // int32
  wire signed [31:0] sel_5531;  // int32
  wire signed [31:0] sel_5532;  // int32
  wire signed [31:0] sel_5533;  // int32
  wire signed [31:0] sel_5534;  // int32
  wire signed [31:0] sel_5535;  // int32
  wire signed [31:0] sel_5536;  // int32
  wire signed [31:0] sel_5537;  // int32
  wire signed [31:0] sel_5538;  // int32
  wire signed [31:0] sel_5539;  // int32
  wire signed [31:0] sel_5540;  // int32
  wire signed [31:0] sel_5541;  // int32
  wire signed [31:0] s_364;  // int32
  wire signed [31:0] sel_1_1005;  // int32
  wire signed [31:0] sel_5542;  // int32
  wire signed [31:0] sel_1_1006;  // int32
  wire signed [31:0] sel_5543;  // int32
  wire signed [31:0] sel_1_1007;  // int32
  wire signed [31:0] sel_5544;  // int32
  wire signed [31:0] sel_1_1008;  // int32
  wire signed [31:0] sel_5545;  // int32
  wire signed [31:0] sel_1_1009;  // int32
  wire signed [31:0] sel_5546;  // int32
  wire signed [31:0] sel_1_1010;  // int32
  wire signed [31:0] sel_1_1011;  // int32
  wire signed [31:0] sel_1_1012;  // int32
  wire signed [31:0] sel_5547;  // int32
  wire signed [31:0] sel_1_1013;  // int32
  wire signed [31:0] sel_5548;  // int32
  wire signed [31:0] sel_5549;  // int32
  reg signed [31:0] sel_1_1014;  // int32
  wire tmp_286;
  wire sel_5550;
  wire sel_5551;
  wire sel_5552;
  wire sel_5553;
  wire sel_5554;
  wire sel_5555;
  wire sel_5556;
  wire sel_5557;
  wire sel_5558;
  wire sel_5559;
  wire sel_5560;
  wire sel_5561;
  wire sel_5562;
  wire sel_5563;
  wire sel_5564;
  wire s_365;
  wire sel_2_995;
  wire sel_5565;
  wire sel_2_996;
  wire sel_5566;
  wire sel_2_997;
  wire sel_5567;
  wire sel_2_998;
  wire sel_5568;
  wire sel_2_999;
  wire sel_5569;
  wire sel_2_1000;
  wire sel_2_1001;
  wire sel_2_1002;
  wire sel_5570;
  wire sel_2_1003;
  wire sel_5571;
  wire sel_5572;
  reg  sel_2_1004;
  reg  [11:0] cont_bits_32_26;  // boolean [12]
  wire signed [31:0] sel_5573;  // int32
  wire signed [31:0] sel_5574;  // int32
  wire signed [31:0] sel_5575;  // int32
  wire signed [31:0] sel_5576;  // int32
  wire signed [31:0] sel_5577;  // int32
  wire signed [31:0] sel_5578;  // int32
  wire signed [31:0] sel_5579;  // int32
  wire signed [31:0] sel_5580;  // int32
  wire signed [31:0] sel_5581;  // int32
  wire signed [31:0] sel_5582;  // int32
  wire signed [31:0] sel_5583;  // int32
  wire signed [31:0] sel_5584;  // int32
  wire signed [31:0] sel_5585;  // int32
  wire signed [31:0] sel_5586;  // int32
  wire signed [31:0] sel_5587;  // int32
  wire signed [31:0] s_366;  // int32
  wire signed [31:0] sel_1_1015;  // int32
  wire signed [31:0] sel_5588;  // int32
  wire signed [31:0] sel_1_1016;  // int32
  wire signed [31:0] sel_5589;  // int32
  wire signed [31:0] sel_1_1017;  // int32
  wire signed [31:0] sel_5590;  // int32
  wire signed [31:0] sel_1_1018;  // int32
  wire signed [31:0] sel_5591;  // int32
  wire signed [31:0] sel_1_1019;  // int32
  wire signed [31:0] sel_5592;  // int32
  wire signed [31:0] sel_1_1020;  // int32
  wire signed [31:0] sel_1_1021;  // int32
  wire signed [31:0] sel_1_1022;  // int32
  wire signed [31:0] sel_5593;  // int32
  wire signed [31:0] sel_1_1023;  // int32
  wire signed [31:0] sel_5594;  // int32
  wire signed [31:0] sel_5595;  // int32
  reg signed [31:0] sel_1_1024;  // int32
  wire cont_bits_32_27;
  wire sel_1_1025;
  wire [11:0] cont_bits_31_14;  // boolean [12]
  wire functionOutput_0_11;
  wire functionOutput_1_11;
  wire functionOutput_2_11;
  wire functionOutput_3_11;
  wire functionOutput_4_11;
  wire functionOutput_5_11;
  wire functionOutput_6_11;
  wire functionOutput_7_11;
  wire functionOutput_8_11;
  wire functionOutput_9_11;
  wire functionOutput_10_11;
  wire functionOutput_11_11;
  wire [11:0] functionOutput_22;  // boolean [12]
  wire signed [31:0] sel_5596;  // int32
  wire signed [31:0] sel_5597;  // int32
  wire signed [31:0] sel_5598;  // int32
  wire signed [31:0] sel_5599;  // int32
  wire signed [31:0] sel_5600;  // int32
  wire signed [31:0] sel_5601;  // int32
  wire signed [31:0] sel_5602;  // int32
  wire signed [31:0] sel_5603;  // int32
  wire signed [31:0] sel_5604;  // int32
  wire signed [31:0] sel_5605;  // int32
  wire signed [31:0] sel_5606;  // int32
  wire signed [31:0] sel_5607;  // int32
  wire signed [31:0] sel_5608;  // int32
  wire signed [31:0] sel_5609;  // int32
  wire signed [31:0] sel_5610;  // int32
  wire signed [31:0] s_367;  // int32
  wire signed [31:0] sel_1_1026;  // int32
  wire signed [31:0] sel_5611;  // int32
  wire signed [31:0] sel_1_1027;  // int32
  wire signed [31:0] sel_5612;  // int32
  wire signed [31:0] sel_1_1028;  // int32
  wire signed [31:0] sel_5613;  // int32
  wire signed [31:0] sel_1_1029;  // int32
  wire signed [31:0] sel_5614;  // int32
  wire signed [31:0] sel_1_1030;  // int32
  wire signed [31:0] sel_1_1031;  // int32
  wire signed [31:0] sel_1_1032;  // int32
  wire signed [31:0] sel_5615;  // int32
  wire signed [31:0] sel_1_1033;  // int32
  wire signed [31:0] sel_5616;  // int32
  wire signed [31:0] sel_5617;  // int32
  reg signed [31:0] sel_1_1034;  // int32
  wire tmp_287;
  wire sel_5618;
  wire sel_5619;
  wire sel_5620;
  wire sel_5621;
  wire sel_5622;
  wire sel_5623;
  wire sel_5624;
  wire sel_5625;
  wire sel_5626;
  wire sel_5627;
  wire sel_5628;
  wire sel_5629;
  wire sel_5630;
  wire sel_5631;
  wire sel_5632;
  wire s_368;
  wire sel_2_1005;
  wire sel_5633;
  wire sel_2_1006;
  wire sel_5634;
  wire sel_2_1007;
  wire sel_5635;
  wire sel_2_1008;
  wire sel_5636;
  wire sel_2_1009;
  wire sel_2_1010;
  wire sel_2_1011;
  wire sel_5637;
  wire sel_2_1012;
  wire sel_5638;
  wire sel_5639;
  reg  sel_2_1013;
  reg  [11:0] cont_bits_31_15;  // boolean [12]
  wire signed [31:0] sel_5640;  // int32
  wire signed [31:0] sel_5641;  // int32
  wire signed [31:0] sel_5642;  // int32
  wire signed [31:0] sel_5643;  // int32
  wire signed [31:0] sel_5644;  // int32
  wire signed [31:0] sel_5645;  // int32
  wire signed [31:0] sel_5646;  // int32
  wire signed [31:0] sel_5647;  // int32
  wire signed [31:0] sel_5648;  // int32
  wire signed [31:0] sel_5649;  // int32
  wire signed [31:0] sel_5650;  // int32
  wire signed [31:0] sel_5651;  // int32
  wire signed [31:0] sel_5652;  // int32
  wire signed [31:0] sel_5653;  // int32
  wire signed [31:0] sel_5654;  // int32
  wire signed [31:0] s_369;  // int32
  wire signed [31:0] sel_1_1035;  // int32
  wire signed [31:0] sel_5655;  // int32
  wire signed [31:0] sel_1_1036;  // int32
  wire signed [31:0] sel_5656;  // int32
  wire signed [31:0] sel_1_1037;  // int32
  wire signed [31:0] sel_5657;  // int32
  wire signed [31:0] sel_1_1038;  // int32
  wire signed [31:0] sel_5658;  // int32
  wire signed [31:0] sel_1_1039;  // int32
  wire signed [31:0] sel_1_1040;  // int32
  wire signed [31:0] sel_1_1041;  // int32
  wire signed [31:0] sel_5659;  // int32
  wire signed [31:0] sel_1_1042;  // int32
  wire signed [31:0] sel_5660;  // int32
  wire signed [31:0] sel_5661;  // int32
  reg signed [31:0] sel_1_1043;  // int32
  wire tmp_288;
  wire sel_5662;
  wire sel_5663;
  wire sel_5664;
  wire sel_5665;
  wire sel_5666;
  wire sel_5667;
  wire sel_5668;
  wire sel_5669;
  wire sel_5670;
  wire sel_5671;
  wire sel_5672;
  wire sel_5673;
  wire sel_5674;
  wire sel_5675;
  wire sel_5676;
  wire s_370;
  wire sel_2_1014;
  wire sel_5677;
  wire sel_2_1015;
  wire sel_5678;
  wire sel_2_1016;
  wire sel_5679;
  wire sel_2_1017;
  wire sel_5680;
  wire sel_2_1018;
  wire sel_2_1019;
  wire sel_2_1020;
  wire sel_5681;
  wire sel_2_1021;
  wire sel_5682;
  wire sel_5683;
  reg  sel_2_1022;
  reg  [11:0] cont_bits_31_16;  // boolean [12]
  wire signed [31:0] sel_5684;  // int32
  wire signed [31:0] sel_5685;  // int32
  wire signed [31:0] sel_5686;  // int32
  wire signed [31:0] sel_5687;  // int32
  wire signed [31:0] sel_5688;  // int32
  wire signed [31:0] sel_5689;  // int32
  wire signed [31:0] sel_5690;  // int32
  wire signed [31:0] sel_5691;  // int32
  wire signed [31:0] sel_5692;  // int32
  wire signed [31:0] sel_5693;  // int32
  wire signed [31:0] sel_5694;  // int32
  wire signed [31:0] sel_5695;  // int32
  wire signed [31:0] sel_5696;  // int32
  wire signed [31:0] sel_5697;  // int32
  wire signed [31:0] sel_5698;  // int32
  wire signed [31:0] s_371;  // int32
  wire signed [31:0] sel_1_1044;  // int32
  wire signed [31:0] sel_5699;  // int32
  wire signed [31:0] sel_1_1045;  // int32
  wire signed [31:0] sel_5700;  // int32
  wire signed [31:0] sel_1_1046;  // int32
  wire signed [31:0] sel_5701;  // int32
  wire signed [31:0] sel_1_1047;  // int32
  wire signed [31:0] sel_5702;  // int32
  wire signed [31:0] sel_1_1048;  // int32
  wire signed [31:0] sel_1_1049;  // int32
  wire signed [31:0] sel_1_1050;  // int32
  wire signed [31:0] sel_5703;  // int32
  wire signed [31:0] sel_1_1051;  // int32
  wire signed [31:0] sel_5704;  // int32
  wire signed [31:0] sel_5705;  // int32
  reg signed [31:0] sel_1_1052;  // int32
  wire tmp_289;
  wire sel_5706;
  wire sel_5707;
  wire sel_5708;
  wire sel_5709;
  wire sel_5710;
  wire sel_5711;
  wire sel_5712;
  wire sel_5713;
  wire sel_5714;
  wire sel_5715;
  wire sel_5716;
  wire sel_5717;
  wire sel_5718;
  wire sel_5719;
  wire sel_5720;
  wire s_372;
  wire sel_2_1023;
  wire sel_5721;
  wire sel_2_1024;
  wire sel_5722;
  wire sel_2_1025;
  wire sel_5723;
  wire sel_2_1026;
  wire sel_5724;
  wire sel_2_1027;
  wire sel_2_1028;
  wire sel_2_1029;
  wire sel_5725;
  wire sel_2_1030;
  wire sel_5726;
  wire sel_5727;
  reg  sel_2_1031;
  reg  [11:0] cont_bits_31_17;  // boolean [12]
  wire signed [31:0] sel_5728;  // int32
  wire signed [31:0] sel_5729;  // int32
  wire signed [31:0] sel_5730;  // int32
  wire signed [31:0] sel_5731;  // int32
  wire signed [31:0] sel_5732;  // int32
  wire signed [31:0] sel_5733;  // int32
  wire signed [31:0] sel_5734;  // int32
  wire signed [31:0] sel_5735;  // int32
  wire signed [31:0] sel_5736;  // int32
  wire signed [31:0] sel_5737;  // int32
  wire signed [31:0] sel_5738;  // int32
  wire signed [31:0] sel_5739;  // int32
  wire signed [31:0] sel_5740;  // int32
  wire signed [31:0] sel_5741;  // int32
  wire signed [31:0] sel_5742;  // int32
  wire signed [31:0] s_373;  // int32
  wire signed [31:0] sel_1_1053;  // int32
  wire signed [31:0] sel_5743;  // int32
  wire signed [31:0] sel_1_1054;  // int32
  wire signed [31:0] sel_5744;  // int32
  wire signed [31:0] sel_1_1055;  // int32
  wire signed [31:0] sel_5745;  // int32
  wire signed [31:0] sel_1_1056;  // int32
  wire signed [31:0] sel_5746;  // int32
  wire signed [31:0] sel_1_1057;  // int32
  wire signed [31:0] sel_1_1058;  // int32
  wire signed [31:0] sel_1_1059;  // int32
  wire signed [31:0] sel_5747;  // int32
  wire signed [31:0] sel_1_1060;  // int32
  wire signed [31:0] sel_5748;  // int32
  wire signed [31:0] sel_5749;  // int32
  reg signed [31:0] sel_1_1061;  // int32
  wire tmp_290;
  wire sel_5750;
  wire sel_5751;
  wire sel_5752;
  wire sel_5753;
  wire sel_5754;
  wire sel_5755;
  wire sel_5756;
  wire sel_5757;
  wire sel_5758;
  wire sel_5759;
  wire sel_5760;
  wire sel_5761;
  wire sel_5762;
  wire sel_5763;
  wire sel_5764;
  wire s_374;
  wire sel_2_1032;
  wire sel_5765;
  wire sel_2_1033;
  wire sel_5766;
  wire sel_2_1034;
  wire sel_5767;
  wire sel_2_1035;
  wire sel_5768;
  wire sel_2_1036;
  wire sel_2_1037;
  wire sel_2_1038;
  wire sel_5769;
  wire sel_2_1039;
  wire sel_5770;
  wire sel_5771;
  reg  sel_2_1040;
  reg  [11:0] cont_bits_31_18;  // boolean [12]
  wire signed [31:0] sel_5772;  // int32
  wire signed [31:0] sel_5773;  // int32
  wire signed [31:0] sel_5774;  // int32
  wire signed [31:0] sel_5775;  // int32
  wire signed [31:0] sel_5776;  // int32
  wire signed [31:0] sel_5777;  // int32
  wire signed [31:0] sel_5778;  // int32
  wire signed [31:0] sel_5779;  // int32
  wire signed [31:0] sel_5780;  // int32
  wire signed [31:0] sel_5781;  // int32
  wire signed [31:0] sel_5782;  // int32
  wire signed [31:0] sel_5783;  // int32
  wire signed [31:0] sel_5784;  // int32
  wire signed [31:0] sel_5785;  // int32
  wire signed [31:0] sel_5786;  // int32
  wire signed [31:0] s_375;  // int32
  wire signed [31:0] sel_1_1062;  // int32
  wire signed [31:0] sel_5787;  // int32
  wire signed [31:0] sel_1_1063;  // int32
  wire signed [31:0] sel_5788;  // int32
  wire signed [31:0] sel_1_1064;  // int32
  wire signed [31:0] sel_5789;  // int32
  wire signed [31:0] sel_1_1065;  // int32
  wire signed [31:0] sel_5790;  // int32
  wire signed [31:0] sel_1_1066;  // int32
  wire signed [31:0] sel_1_1067;  // int32
  wire signed [31:0] sel_1_1068;  // int32
  wire signed [31:0] sel_5791;  // int32
  wire signed [31:0] sel_1_1069;  // int32
  wire signed [31:0] sel_5792;  // int32
  wire signed [31:0] sel_5793;  // int32
  reg signed [31:0] sel_1_1070;  // int32
  wire tmp_291;
  wire sel_5794;
  wire sel_5795;
  wire sel_5796;
  wire sel_5797;
  wire sel_5798;
  wire sel_5799;
  wire sel_5800;
  wire sel_5801;
  wire sel_5802;
  wire sel_5803;
  wire sel_5804;
  wire sel_5805;
  wire sel_5806;
  wire sel_5807;
  wire sel_5808;
  wire s_376;
  wire sel_2_1041;
  wire sel_5809;
  wire sel_2_1042;
  wire sel_5810;
  wire sel_2_1043;
  wire sel_5811;
  wire sel_2_1044;
  wire sel_5812;
  wire sel_2_1045;
  wire sel_2_1046;
  wire sel_2_1047;
  wire sel_5813;
  wire sel_2_1048;
  wire sel_5814;
  wire sel_5815;
  reg  sel_2_1049;
  reg  [11:0] cont_bits_31_19;  // boolean [12]
  wire signed [31:0] sel_5816;  // int32
  wire signed [31:0] sel_5817;  // int32
  wire signed [31:0] sel_5818;  // int32
  wire signed [31:0] sel_5819;  // int32
  wire signed [31:0] sel_5820;  // int32
  wire signed [31:0] sel_5821;  // int32
  wire signed [31:0] sel_5822;  // int32
  wire signed [31:0] sel_5823;  // int32
  wire signed [31:0] sel_5824;  // int32
  wire signed [31:0] sel_5825;  // int32
  wire signed [31:0] sel_5826;  // int32
  wire signed [31:0] sel_5827;  // int32
  wire signed [31:0] sel_5828;  // int32
  wire signed [31:0] sel_5829;  // int32
  wire signed [31:0] sel_5830;  // int32
  wire signed [31:0] s_377;  // int32
  wire signed [31:0] sel_1_1071;  // int32
  wire signed [31:0] sel_5831;  // int32
  wire signed [31:0] sel_1_1072;  // int32
  wire signed [31:0] sel_5832;  // int32
  wire signed [31:0] sel_1_1073;  // int32
  wire signed [31:0] sel_5833;  // int32
  wire signed [31:0] sel_1_1074;  // int32
  wire signed [31:0] sel_5834;  // int32
  wire signed [31:0] sel_1_1075;  // int32
  wire signed [31:0] sel_1_1076;  // int32
  wire signed [31:0] sel_1_1077;  // int32
  wire signed [31:0] sel_5835;  // int32
  wire signed [31:0] sel_1_1078;  // int32
  wire signed [31:0] sel_5836;  // int32
  wire signed [31:0] sel_5837;  // int32
  reg signed [31:0] sel_1_1079;  // int32
  wire tmp_292;
  wire sel_5838;
  wire sel_5839;
  wire sel_5840;
  wire sel_5841;
  wire sel_5842;
  wire sel_5843;
  wire sel_5844;
  wire sel_5845;
  wire sel_5846;
  wire sel_5847;
  wire sel_5848;
  wire sel_5849;
  wire sel_5850;
  wire sel_5851;
  wire sel_5852;
  wire s_378;
  wire sel_2_1050;
  wire sel_5853;
  wire sel_2_1051;
  wire sel_5854;
  wire sel_2_1052;
  wire sel_5855;
  wire sel_2_1053;
  wire sel_5856;
  wire sel_2_1054;
  wire sel_2_1055;
  wire sel_2_1056;
  wire sel_5857;
  wire sel_2_1057;
  wire sel_5858;
  wire sel_5859;
  reg  sel_2_1058;
  reg  [11:0] cont_bits_31_20;  // boolean [12]
  wire signed [31:0] sel_5860;  // int32
  wire signed [31:0] sel_5861;  // int32
  wire signed [31:0] sel_5862;  // int32
  wire signed [31:0] sel_5863;  // int32
  wire signed [31:0] sel_5864;  // int32
  wire signed [31:0] sel_5865;  // int32
  wire signed [31:0] sel_5866;  // int32
  wire signed [31:0] sel_5867;  // int32
  wire signed [31:0] sel_5868;  // int32
  wire signed [31:0] sel_5869;  // int32
  wire signed [31:0] sel_5870;  // int32
  wire signed [31:0] sel_5871;  // int32
  wire signed [31:0] sel_5872;  // int32
  wire signed [31:0] sel_5873;  // int32
  wire signed [31:0] sel_5874;  // int32
  wire signed [31:0] s_379;  // int32
  wire signed [31:0] sel_1_1080;  // int32
  wire signed [31:0] sel_5875;  // int32
  wire signed [31:0] sel_1_1081;  // int32
  wire signed [31:0] sel_5876;  // int32
  wire signed [31:0] sel_1_1082;  // int32
  wire signed [31:0] sel_5877;  // int32
  wire signed [31:0] sel_1_1083;  // int32
  wire signed [31:0] sel_5878;  // int32
  wire signed [31:0] sel_1_1084;  // int32
  wire signed [31:0] sel_1_1085;  // int32
  wire signed [31:0] sel_1_1086;  // int32
  wire signed [31:0] sel_5879;  // int32
  wire signed [31:0] sel_1_1087;  // int32
  wire signed [31:0] sel_5880;  // int32
  wire signed [31:0] sel_5881;  // int32
  reg signed [31:0] sel_1_1088;  // int32
  wire tmp_293;
  wire sel_5882;
  wire sel_5883;
  wire sel_5884;
  wire sel_5885;
  wire sel_5886;
  wire sel_5887;
  wire sel_5888;
  wire sel_5889;
  wire sel_5890;
  wire sel_5891;
  wire sel_5892;
  wire sel_5893;
  wire sel_5894;
  wire sel_5895;
  wire sel_5896;
  wire s_380;
  wire sel_2_1059;
  wire sel_5897;
  wire sel_2_1060;
  wire sel_5898;
  wire sel_2_1061;
  wire sel_5899;
  wire sel_2_1062;
  wire sel_5900;
  wire sel_2_1063;
  wire sel_2_1064;
  wire sel_2_1065;
  wire sel_5901;
  wire sel_2_1066;
  wire sel_5902;
  wire sel_5903;
  reg  sel_2_1067;
  reg  [11:0] cont_bits_31_21;  // boolean [12]
  wire signed [31:0] sel_5904;  // int32
  wire signed [31:0] sel_5905;  // int32
  wire signed [31:0] sel_5906;  // int32
  wire signed [31:0] sel_5907;  // int32
  wire signed [31:0] sel_5908;  // int32
  wire signed [31:0] sel_5909;  // int32
  wire signed [31:0] sel_5910;  // int32
  wire signed [31:0] sel_5911;  // int32
  wire signed [31:0] sel_5912;  // int32
  wire signed [31:0] sel_5913;  // int32
  wire signed [31:0] sel_5914;  // int32
  wire signed [31:0] sel_5915;  // int32
  wire signed [31:0] sel_5916;  // int32
  wire signed [31:0] sel_5917;  // int32
  wire signed [31:0] sel_5918;  // int32
  wire signed [31:0] s_381;  // int32
  wire signed [31:0] sel_1_1089;  // int32
  wire signed [31:0] sel_5919;  // int32
  wire signed [31:0] sel_1_1090;  // int32
  wire signed [31:0] sel_5920;  // int32
  wire signed [31:0] sel_1_1091;  // int32
  wire signed [31:0] sel_5921;  // int32
  wire signed [31:0] sel_1_1092;  // int32
  wire signed [31:0] sel_5922;  // int32
  wire signed [31:0] sel_1_1093;  // int32
  wire signed [31:0] sel_1_1094;  // int32
  wire signed [31:0] sel_1_1095;  // int32
  wire signed [31:0] sel_5923;  // int32
  wire signed [31:0] sel_1_1096;  // int32
  wire signed [31:0] sel_5924;  // int32
  wire signed [31:0] sel_5925;  // int32
  reg signed [31:0] sel_1_1097;  // int32
  wire tmp_294;
  wire sel_5926;
  wire sel_5927;
  wire sel_5928;
  wire sel_5929;
  wire sel_5930;
  wire sel_5931;
  wire sel_5932;
  wire sel_5933;
  wire sel_5934;
  wire sel_5935;
  wire sel_5936;
  wire sel_5937;
  wire sel_5938;
  wire sel_5939;
  wire sel_5940;
  wire s_382;
  wire sel_2_1068;
  wire sel_5941;
  wire sel_2_1069;
  wire sel_5942;
  wire sel_2_1070;
  wire sel_5943;
  wire sel_2_1071;
  wire sel_5944;
  wire sel_2_1072;
  wire sel_2_1073;
  wire sel_2_1074;
  wire sel_5945;
  wire sel_2_1075;
  wire sel_5946;
  wire sel_5947;
  reg  sel_2_1076;
  reg  [11:0] cont_bits_31_22;  // boolean [12]
  wire signed [31:0] sel_5948;  // int32
  wire signed [31:0] sel_5949;  // int32
  wire signed [31:0] sel_5950;  // int32
  wire signed [31:0] sel_5951;  // int32
  wire signed [31:0] sel_5952;  // int32
  wire signed [31:0] sel_5953;  // int32
  wire signed [31:0] sel_5954;  // int32
  wire signed [31:0] sel_5955;  // int32
  wire signed [31:0] sel_5956;  // int32
  wire signed [31:0] sel_5957;  // int32
  wire signed [31:0] sel_5958;  // int32
  wire signed [31:0] sel_5959;  // int32
  wire signed [31:0] sel_5960;  // int32
  wire signed [31:0] sel_5961;  // int32
  wire signed [31:0] sel_5962;  // int32
  wire signed [31:0] s_383;  // int32
  wire signed [31:0] sel_1_1098;  // int32
  wire signed [31:0] sel_5963;  // int32
  wire signed [31:0] sel_1_1099;  // int32
  wire signed [31:0] sel_5964;  // int32
  wire signed [31:0] sel_1_1100;  // int32
  wire signed [31:0] sel_5965;  // int32
  wire signed [31:0] sel_1_1101;  // int32
  wire signed [31:0] sel_5966;  // int32
  wire signed [31:0] sel_1_1102;  // int32
  wire signed [31:0] sel_1_1103;  // int32
  wire signed [31:0] sel_1_1104;  // int32
  wire signed [31:0] sel_5967;  // int32
  wire signed [31:0] sel_1_1105;  // int32
  wire signed [31:0] sel_5968;  // int32
  wire signed [31:0] sel_5969;  // int32
  reg signed [31:0] sel_1_1106;  // int32
  wire tmp_295;
  wire sel_5970;
  wire sel_5971;
  wire sel_5972;
  wire sel_5973;
  wire sel_5974;
  wire sel_5975;
  wire sel_5976;
  wire sel_5977;
  wire sel_5978;
  wire sel_5979;
  wire sel_5980;
  wire sel_5981;
  wire sel_5982;
  wire sel_5983;
  wire sel_5984;
  wire s_384;
  wire sel_2_1077;
  wire sel_5985;
  wire sel_2_1078;
  wire sel_5986;
  wire sel_2_1079;
  wire sel_5987;
  wire sel_2_1080;
  wire sel_5988;
  wire sel_2_1081;
  wire sel_2_1082;
  wire sel_2_1083;
  wire sel_5989;
  wire sel_2_1084;
  wire sel_5990;
  wire sel_5991;
  reg  sel_2_1085;
  reg  [11:0] cont_bits_31_23;  // boolean [12]
  wire signed [31:0] sel_5992;  // int32
  wire signed [31:0] sel_5993;  // int32
  wire signed [31:0] sel_5994;  // int32
  wire signed [31:0] sel_5995;  // int32
  wire signed [31:0] sel_5996;  // int32
  wire signed [31:0] sel_5997;  // int32
  wire signed [31:0] sel_5998;  // int32
  wire signed [31:0] sel_5999;  // int32
  wire signed [31:0] sel_6000;  // int32
  wire signed [31:0] sel_6001;  // int32
  wire signed [31:0] sel_6002;  // int32
  wire signed [31:0] sel_6003;  // int32
  wire signed [31:0] sel_6004;  // int32
  wire signed [31:0] sel_6005;  // int32
  wire signed [31:0] sel_6006;  // int32
  wire signed [31:0] s_385;  // int32
  wire signed [31:0] sel_1_1107;  // int32
  wire signed [31:0] sel_6007;  // int32
  wire signed [31:0] sel_1_1108;  // int32
  wire signed [31:0] sel_6008;  // int32
  wire signed [31:0] sel_1_1109;  // int32
  wire signed [31:0] sel_6009;  // int32
  wire signed [31:0] sel_1_1110;  // int32
  wire signed [31:0] sel_6010;  // int32
  wire signed [31:0] sel_1_1111;  // int32
  wire signed [31:0] sel_1_1112;  // int32
  wire signed [31:0] sel_1_1113;  // int32
  wire signed [31:0] sel_6011;  // int32
  wire signed [31:0] sel_1_1114;  // int32
  wire signed [31:0] sel_6012;  // int32
  wire signed [31:0] sel_6013;  // int32
  reg signed [31:0] sel_1_1115;  // int32
  wire tmp_296;
  wire sel_6014;
  wire sel_6015;
  wire sel_6016;
  wire sel_6017;
  wire sel_6018;
  wire sel_6019;
  wire sel_6020;
  wire sel_6021;
  wire sel_6022;
  wire sel_6023;
  wire sel_6024;
  wire sel_6025;
  wire sel_6026;
  wire sel_6027;
  wire sel_6028;
  wire s_386;
  wire sel_2_1086;
  wire sel_6029;
  wire sel_2_1087;
  wire sel_6030;
  wire sel_2_1088;
  wire sel_6031;
  wire sel_2_1089;
  wire sel_6032;
  wire sel_2_1090;
  wire sel_2_1091;
  wire sel_2_1092;
  wire sel_6033;
  wire sel_2_1093;
  wire sel_6034;
  wire sel_6035;
  reg  sel_2_1094;
  reg  [11:0] cont_bits_31_24;  // boolean [12]
  wire signed [31:0] sel_6036;  // int32
  wire signed [31:0] sel_6037;  // int32
  wire signed [31:0] sel_6038;  // int32
  wire signed [31:0] sel_6039;  // int32
  wire signed [31:0] sel_6040;  // int32
  wire signed [31:0] sel_6041;  // int32
  wire signed [31:0] sel_6042;  // int32
  wire signed [31:0] sel_6043;  // int32
  wire signed [31:0] sel_6044;  // int32
  wire signed [31:0] sel_6045;  // int32
  wire signed [31:0] sel_6046;  // int32
  wire signed [31:0] sel_6047;  // int32
  wire signed [31:0] sel_6048;  // int32
  wire signed [31:0] sel_6049;  // int32
  wire signed [31:0] sel_6050;  // int32
  wire signed [31:0] s_387;  // int32
  wire signed [31:0] sel_1_1116;  // int32
  wire signed [31:0] sel_6051;  // int32
  wire signed [31:0] sel_1_1117;  // int32
  wire signed [31:0] sel_6052;  // int32
  wire signed [31:0] sel_1_1118;  // int32
  wire signed [31:0] sel_6053;  // int32
  wire signed [31:0] sel_1_1119;  // int32
  wire signed [31:0] sel_6054;  // int32
  wire signed [31:0] sel_1_1120;  // int32
  wire signed [31:0] sel_1_1121;  // int32
  wire signed [31:0] sel_1_1122;  // int32
  wire signed [31:0] sel_6055;  // int32
  wire signed [31:0] sel_1_1123;  // int32
  wire signed [31:0] sel_6056;  // int32
  wire signed [31:0] sel_6057;  // int32
  reg signed [31:0] sel_1_1124;  // int32
  wire tmp_297;
  wire sel_6058;
  wire sel_6059;
  wire sel_6060;
  wire sel_6061;
  wire sel_6062;
  wire sel_6063;
  wire sel_6064;
  wire sel_6065;
  wire sel_6066;
  wire sel_6067;
  wire sel_6068;
  wire sel_6069;
  wire sel_6070;
  wire sel_6071;
  wire sel_6072;
  wire s_388;
  wire sel_2_1095;
  wire sel_6073;
  wire sel_2_1096;
  wire sel_6074;
  wire sel_2_1097;
  wire sel_6075;
  wire sel_2_1098;
  wire sel_6076;
  wire sel_2_1099;
  wire sel_2_1100;
  wire sel_2_1101;
  wire sel_6077;
  wire sel_2_1102;
  wire sel_6078;
  wire sel_6079;
  reg  sel_2_1103;
  reg  [11:0] cont_bits_31_25;  // boolean [12]
  wire signed [31:0] sel_6080;  // int32
  wire signed [31:0] sel_6081;  // int32
  wire signed [31:0] sel_6082;  // int32
  wire signed [31:0] sel_6083;  // int32
  wire signed [31:0] sel_6084;  // int32
  wire signed [31:0] sel_6085;  // int32
  wire signed [31:0] sel_6086;  // int32
  wire signed [31:0] sel_6087;  // int32
  wire signed [31:0] sel_6088;  // int32
  wire signed [31:0] sel_6089;  // int32
  wire signed [31:0] sel_6090;  // int32
  wire signed [31:0] sel_6091;  // int32
  wire signed [31:0] sel_6092;  // int32
  wire signed [31:0] sel_6093;  // int32
  wire signed [31:0] sel_6094;  // int32
  wire signed [31:0] s_389;  // int32
  wire signed [31:0] sel_1_1125;  // int32
  wire signed [31:0] sel_6095;  // int32
  wire signed [31:0] sel_1_1126;  // int32
  wire signed [31:0] sel_6096;  // int32
  wire signed [31:0] sel_1_1127;  // int32
  wire signed [31:0] sel_6097;  // int32
  wire signed [31:0] sel_1_1128;  // int32
  wire signed [31:0] sel_6098;  // int32
  wire signed [31:0] sel_1_1129;  // int32
  wire signed [31:0] sel_1_1130;  // int32
  wire signed [31:0] sel_1_1131;  // int32
  wire signed [31:0] sel_6099;  // int32
  wire signed [31:0] sel_1_1132;  // int32
  wire signed [31:0] sel_6100;  // int32
  wire signed [31:0] sel_6101;  // int32
  reg signed [31:0] sel_1_1133;  // int32
  wire tmp_298;
  wire sel_6102;
  wire sel_6103;
  wire sel_6104;
  wire sel_6105;
  wire sel_6106;
  wire sel_6107;
  wire sel_6108;
  wire sel_6109;
  wire sel_6110;
  wire sel_6111;
  wire sel_6112;
  wire sel_6113;
  wire sel_6114;
  wire sel_6115;
  wire sel_6116;
  wire s_390;
  wire sel_2_1104;
  wire sel_6117;
  wire sel_2_1105;
  wire sel_6118;
  wire sel_2_1106;
  wire sel_6119;
  wire sel_2_1107;
  wire sel_6120;
  wire sel_2_1108;
  wire sel_2_1109;
  wire sel_2_1110;
  wire sel_6121;
  wire sel_2_1111;
  wire sel_6122;
  wire sel_6123;
  reg  sel_2_1112;
  reg  [11:0] cont_bits_31_26;  // boolean [12]
  wire signed [31:0] sel_6124;  // int32
  wire signed [31:0] sel_6125;  // int32
  wire signed [31:0] sel_6126;  // int32
  wire signed [31:0] sel_6127;  // int32
  wire signed [31:0] sel_6128;  // int32
  wire signed [31:0] sel_6129;  // int32
  wire signed [31:0] sel_6130;  // int32
  wire signed [31:0] sel_6131;  // int32
  wire signed [31:0] sel_6132;  // int32
  wire signed [31:0] sel_6133;  // int32
  wire signed [31:0] sel_6134;  // int32
  wire signed [31:0] sel_6135;  // int32
  wire signed [31:0] sel_6136;  // int32
  wire signed [31:0] sel_6137;  // int32
  wire signed [31:0] sel_6138;  // int32
  wire signed [31:0] s_391;  // int32
  wire signed [31:0] sel_1_1134;  // int32
  wire signed [31:0] sel_6139;  // int32
  wire signed [31:0] sel_1_1135;  // int32
  wire signed [31:0] sel_6140;  // int32
  wire signed [31:0] sel_1_1136;  // int32
  wire signed [31:0] sel_6141;  // int32
  wire signed [31:0] sel_1_1137;  // int32
  wire signed [31:0] sel_6142;  // int32
  wire signed [31:0] sel_1_1138;  // int32
  wire signed [31:0] sel_1_1139;  // int32
  wire signed [31:0] sel_1_1140;  // int32
  wire signed [31:0] sel_6143;  // int32
  wire signed [31:0] sel_1_1141;  // int32
  wire signed [31:0] sel_6144;  // int32
  wire signed [31:0] sel_6145;  // int32
  reg signed [31:0] sel_1_1142;  // int32
  wire cont_bits_31_27;
  wire sel_1_1143;
  wire [11:0] cont_bits_22_14;  // boolean [12]
  wire functionOutput_0_12;
  wire functionOutput_1_12;
  wire functionOutput_2_12;
  wire functionOutput_3_12;
  wire functionOutput_4_12;
  wire functionOutput_5_12;
  wire functionOutput_6_12;
  wire functionOutput_7_12;
  wire functionOutput_8_12;
  wire functionOutput_9_12;
  wire functionOutput_10_12;
  wire functionOutput_11_12;
  wire [11:0] functionOutput_23;  // boolean [12]
  wire signed [31:0] sel_6146;  // int32
  wire signed [31:0] sel_6147;  // int32
  wire signed [31:0] sel_6148;  // int32
  wire signed [31:0] sel_6149;  // int32
  wire signed [31:0] sel_6150;  // int32
  wire signed [31:0] sel_6151;  // int32
  wire signed [31:0] sel_6152;  // int32
  wire signed [31:0] sel_6153;  // int32
  wire signed [31:0] sel_6154;  // int32
  wire signed [31:0] sel_6155;  // int32
  wire signed [31:0] sel_6156;  // int32
  wire signed [31:0] sel_6157;  // int32
  wire signed [31:0] sel_6158;  // int32
  wire signed [31:0] sel_6159;  // int32
  wire signed [31:0] sel_6160;  // int32
  wire signed [31:0] s_392;  // int32
  wire signed [31:0] sel_1_1144;  // int32
  wire signed [31:0] sel_6161;  // int32
  wire signed [31:0] sel_1_1145;  // int32
  wire signed [31:0] sel_6162;  // int32
  wire signed [31:0] sel_1_1146;  // int32
  wire signed [31:0] sel_6163;  // int32
  wire signed [31:0] sel_1_1147;  // int32
  wire signed [31:0] sel_1_1148;  // int32
  wire signed [31:0] sel_1_1149;  // int32
  wire signed [31:0] sel_6164;  // int32
  wire signed [31:0] sel_1_1150;  // int32
  wire signed [31:0] sel_6165;  // int32
  wire signed [31:0] sel_6166;  // int32
  reg signed [31:0] sel_1_1151;  // int32
  wire tmp_299;
  wire sel_6167;
  wire sel_6168;
  wire sel_6169;
  wire sel_6170;
  wire sel_6171;
  wire sel_6172;
  wire sel_6173;
  wire sel_6174;
  wire sel_6175;
  wire sel_6176;
  wire sel_6177;
  wire sel_6178;
  wire sel_6179;
  wire sel_6180;
  wire sel_6181;
  wire s_393;
  wire sel_2_1113;
  wire sel_6182;
  wire sel_2_1114;
  wire sel_6183;
  wire sel_2_1115;
  wire sel_6184;
  wire sel_2_1116;
  wire sel_2_1117;
  wire sel_2_1118;
  wire sel_6185;
  wire sel_2_1119;
  wire sel_6186;
  wire sel_6187;
  reg  sel_2_1120;
  reg  [11:0] cont_bits_22_15;  // boolean [12]
  wire signed [31:0] sel_6188;  // int32
  wire signed [31:0] sel_6189;  // int32
  wire signed [31:0] sel_6190;  // int32
  wire signed [31:0] sel_6191;  // int32
  wire signed [31:0] sel_6192;  // int32
  wire signed [31:0] sel_6193;  // int32
  wire signed [31:0] sel_6194;  // int32
  wire signed [31:0] sel_6195;  // int32
  wire signed [31:0] sel_6196;  // int32
  wire signed [31:0] sel_6197;  // int32
  wire signed [31:0] sel_6198;  // int32
  wire signed [31:0] sel_6199;  // int32
  wire signed [31:0] sel_6200;  // int32
  wire signed [31:0] sel_6201;  // int32
  wire signed [31:0] sel_6202;  // int32
  wire signed [31:0] s_394;  // int32
  wire signed [31:0] sel_1_1152;  // int32
  wire signed [31:0] sel_6203;  // int32
  wire signed [31:0] sel_1_1153;  // int32
  wire signed [31:0] sel_6204;  // int32
  wire signed [31:0] sel_1_1154;  // int32
  wire signed [31:0] sel_6205;  // int32
  wire signed [31:0] sel_1_1155;  // int32
  wire signed [31:0] sel_1_1156;  // int32
  wire signed [31:0] sel_1_1157;  // int32
  wire signed [31:0] sel_6206;  // int32
  wire signed [31:0] sel_1_1158;  // int32
  wire signed [31:0] sel_6207;  // int32
  wire signed [31:0] sel_6208;  // int32
  reg signed [31:0] sel_1_1159;  // int32
  wire tmp_300;
  wire sel_6209;
  wire sel_6210;
  wire sel_6211;
  wire sel_6212;
  wire sel_6213;
  wire sel_6214;
  wire sel_6215;
  wire sel_6216;
  wire sel_6217;
  wire sel_6218;
  wire sel_6219;
  wire sel_6220;
  wire sel_6221;
  wire sel_6222;
  wire sel_6223;
  wire s_395;
  wire sel_2_1121;
  wire sel_6224;
  wire sel_2_1122;
  wire sel_6225;
  wire sel_2_1123;
  wire sel_6226;
  wire sel_2_1124;
  wire sel_2_1125;
  wire sel_2_1126;
  wire sel_6227;
  wire sel_2_1127;
  wire sel_6228;
  wire sel_6229;
  reg  sel_2_1128;
  reg  [11:0] cont_bits_22_16;  // boolean [12]
  wire signed [31:0] sel_6230;  // int32
  wire signed [31:0] sel_6231;  // int32
  wire signed [31:0] sel_6232;  // int32
  wire signed [31:0] sel_6233;  // int32
  wire signed [31:0] sel_6234;  // int32
  wire signed [31:0] sel_6235;  // int32
  wire signed [31:0] sel_6236;  // int32
  wire signed [31:0] sel_6237;  // int32
  wire signed [31:0] sel_6238;  // int32
  wire signed [31:0] sel_6239;  // int32
  wire signed [31:0] sel_6240;  // int32
  wire signed [31:0] sel_6241;  // int32
  wire signed [31:0] sel_6242;  // int32
  wire signed [31:0] sel_6243;  // int32
  wire signed [31:0] sel_6244;  // int32
  wire signed [31:0] s_396;  // int32
  wire signed [31:0] sel_1_1160;  // int32
  wire signed [31:0] sel_6245;  // int32
  wire signed [31:0] sel_1_1161;  // int32
  wire signed [31:0] sel_6246;  // int32
  wire signed [31:0] sel_1_1162;  // int32
  wire signed [31:0] sel_6247;  // int32
  wire signed [31:0] sel_1_1163;  // int32
  wire signed [31:0] sel_1_1164;  // int32
  wire signed [31:0] sel_1_1165;  // int32
  wire signed [31:0] sel_6248;  // int32
  wire signed [31:0] sel_1_1166;  // int32
  wire signed [31:0] sel_6249;  // int32
  wire signed [31:0] sel_6250;  // int32
  reg signed [31:0] sel_1_1167;  // int32
  wire tmp_301;
  wire sel_6251;
  wire sel_6252;
  wire sel_6253;
  wire sel_6254;
  wire sel_6255;
  wire sel_6256;
  wire sel_6257;
  wire sel_6258;
  wire sel_6259;
  wire sel_6260;
  wire sel_6261;
  wire sel_6262;
  wire sel_6263;
  wire sel_6264;
  wire sel_6265;
  wire s_397;
  wire sel_2_1129;
  wire sel_6266;
  wire sel_2_1130;
  wire sel_6267;
  wire sel_2_1131;
  wire sel_6268;
  wire sel_2_1132;
  wire sel_2_1133;
  wire sel_2_1134;
  wire sel_6269;
  wire sel_2_1135;
  wire sel_6270;
  wire sel_6271;
  reg  sel_2_1136;
  reg  [11:0] cont_bits_22_17;  // boolean [12]
  wire signed [31:0] sel_6272;  // int32
  wire signed [31:0] sel_6273;  // int32
  wire signed [31:0] sel_6274;  // int32
  wire signed [31:0] sel_6275;  // int32
  wire signed [31:0] sel_6276;  // int32
  wire signed [31:0] sel_6277;  // int32
  wire signed [31:0] sel_6278;  // int32
  wire signed [31:0] sel_6279;  // int32
  wire signed [31:0] sel_6280;  // int32
  wire signed [31:0] sel_6281;  // int32
  wire signed [31:0] sel_6282;  // int32
  wire signed [31:0] sel_6283;  // int32
  wire signed [31:0] sel_6284;  // int32
  wire signed [31:0] sel_6285;  // int32
  wire signed [31:0] sel_6286;  // int32
  wire signed [31:0] s_398;  // int32
  wire signed [31:0] sel_1_1168;  // int32
  wire signed [31:0] sel_6287;  // int32
  wire signed [31:0] sel_1_1169;  // int32
  wire signed [31:0] sel_6288;  // int32
  wire signed [31:0] sel_1_1170;  // int32
  wire signed [31:0] sel_6289;  // int32
  wire signed [31:0] sel_1_1171;  // int32
  wire signed [31:0] sel_1_1172;  // int32
  wire signed [31:0] sel_1_1173;  // int32
  wire signed [31:0] sel_6290;  // int32
  wire signed [31:0] sel_1_1174;  // int32
  wire signed [31:0] sel_6291;  // int32
  wire signed [31:0] sel_6292;  // int32
  reg signed [31:0] sel_1_1175;  // int32
  wire tmp_302;
  wire sel_6293;
  wire sel_6294;
  wire sel_6295;
  wire sel_6296;
  wire sel_6297;
  wire sel_6298;
  wire sel_6299;
  wire sel_6300;
  wire sel_6301;
  wire sel_6302;
  wire sel_6303;
  wire sel_6304;
  wire sel_6305;
  wire sel_6306;
  wire sel_6307;
  wire s_399;
  wire sel_2_1137;
  wire sel_6308;
  wire sel_2_1138;
  wire sel_6309;
  wire sel_2_1139;
  wire sel_6310;
  wire sel_2_1140;
  wire sel_2_1141;
  wire sel_2_1142;
  wire sel_6311;
  wire sel_2_1143;
  wire sel_6312;
  wire sel_6313;
  reg  sel_2_1144;
  reg  [11:0] cont_bits_22_18;  // boolean [12]
  wire signed [31:0] sel_6314;  // int32
  wire signed [31:0] sel_6315;  // int32
  wire signed [31:0] sel_6316;  // int32
  wire signed [31:0] sel_6317;  // int32
  wire signed [31:0] sel_6318;  // int32
  wire signed [31:0] sel_6319;  // int32
  wire signed [31:0] sel_6320;  // int32
  wire signed [31:0] sel_6321;  // int32
  wire signed [31:0] sel_6322;  // int32
  wire signed [31:0] sel_6323;  // int32
  wire signed [31:0] sel_6324;  // int32
  wire signed [31:0] sel_6325;  // int32
  wire signed [31:0] sel_6326;  // int32
  wire signed [31:0] sel_6327;  // int32
  wire signed [31:0] sel_6328;  // int32
  wire signed [31:0] s_400;  // int32
  wire signed [31:0] sel_1_1176;  // int32
  wire signed [31:0] sel_6329;  // int32
  wire signed [31:0] sel_1_1177;  // int32
  wire signed [31:0] sel_6330;  // int32
  wire signed [31:0] sel_1_1178;  // int32
  wire signed [31:0] sel_6331;  // int32
  wire signed [31:0] sel_1_1179;  // int32
  wire signed [31:0] sel_1_1180;  // int32
  wire signed [31:0] sel_1_1181;  // int32
  wire signed [31:0] sel_6332;  // int32
  wire signed [31:0] sel_1_1182;  // int32
  wire signed [31:0] sel_6333;  // int32
  wire signed [31:0] sel_6334;  // int32
  reg signed [31:0] sel_1_1183;  // int32
  wire tmp_303;
  wire sel_6335;
  wire sel_6336;
  wire sel_6337;
  wire sel_6338;
  wire sel_6339;
  wire sel_6340;
  wire sel_6341;
  wire sel_6342;
  wire sel_6343;
  wire sel_6344;
  wire sel_6345;
  wire sel_6346;
  wire sel_6347;
  wire sel_6348;
  wire sel_6349;
  wire s_401;
  wire sel_2_1145;
  wire sel_6350;
  wire sel_2_1146;
  wire sel_6351;
  wire sel_2_1147;
  wire sel_6352;
  wire sel_2_1148;
  wire sel_2_1149;
  wire sel_2_1150;
  wire sel_6353;
  wire sel_2_1151;
  wire sel_6354;
  wire sel_6355;
  reg  sel_2_1152;
  reg  [11:0] cont_bits_22_19;  // boolean [12]
  wire signed [31:0] sel_6356;  // int32
  wire signed [31:0] sel_6357;  // int32
  wire signed [31:0] sel_6358;  // int32
  wire signed [31:0] sel_6359;  // int32
  wire signed [31:0] sel_6360;  // int32
  wire signed [31:0] sel_6361;  // int32
  wire signed [31:0] sel_6362;  // int32
  wire signed [31:0] sel_6363;  // int32
  wire signed [31:0] sel_6364;  // int32
  wire signed [31:0] sel_6365;  // int32
  wire signed [31:0] sel_6366;  // int32
  wire signed [31:0] sel_6367;  // int32
  wire signed [31:0] sel_6368;  // int32
  wire signed [31:0] sel_6369;  // int32
  wire signed [31:0] sel_6370;  // int32
  wire signed [31:0] s_402;  // int32
  wire signed [31:0] sel_1_1184;  // int32
  wire signed [31:0] sel_6371;  // int32
  wire signed [31:0] sel_1_1185;  // int32
  wire signed [31:0] sel_6372;  // int32
  wire signed [31:0] sel_1_1186;  // int32
  wire signed [31:0] sel_6373;  // int32
  wire signed [31:0] sel_1_1187;  // int32
  wire signed [31:0] sel_1_1188;  // int32
  wire signed [31:0] sel_1_1189;  // int32
  wire signed [31:0] sel_6374;  // int32
  wire signed [31:0] sel_1_1190;  // int32
  wire signed [31:0] sel_6375;  // int32
  wire signed [31:0] sel_6376;  // int32
  reg signed [31:0] sel_1_1191;  // int32
  wire tmp_304;
  wire sel_6377;
  wire sel_6378;
  wire sel_6379;
  wire sel_6380;
  wire sel_6381;
  wire sel_6382;
  wire sel_6383;
  wire sel_6384;
  wire sel_6385;
  wire sel_6386;
  wire sel_6387;
  wire sel_6388;
  wire sel_6389;
  wire sel_6390;
  wire sel_6391;
  wire s_403;
  wire sel_2_1153;
  wire sel_6392;
  wire sel_2_1154;
  wire sel_6393;
  wire sel_2_1155;
  wire sel_6394;
  wire sel_2_1156;
  wire sel_2_1157;
  wire sel_2_1158;
  wire sel_6395;
  wire sel_2_1159;
  wire sel_6396;
  wire sel_6397;
  reg  sel_2_1160;
  reg  [11:0] cont_bits_22_20;  // boolean [12]
  wire signed [31:0] sel_6398;  // int32
  wire signed [31:0] sel_6399;  // int32
  wire signed [31:0] sel_6400;  // int32
  wire signed [31:0] sel_6401;  // int32
  wire signed [31:0] sel_6402;  // int32
  wire signed [31:0] sel_6403;  // int32
  wire signed [31:0] sel_6404;  // int32
  wire signed [31:0] sel_6405;  // int32
  wire signed [31:0] sel_6406;  // int32
  wire signed [31:0] sel_6407;  // int32
  wire signed [31:0] sel_6408;  // int32
  wire signed [31:0] sel_6409;  // int32
  wire signed [31:0] sel_6410;  // int32
  wire signed [31:0] sel_6411;  // int32
  wire signed [31:0] sel_6412;  // int32
  wire signed [31:0] s_404;  // int32
  wire signed [31:0] sel_1_1192;  // int32
  wire signed [31:0] sel_6413;  // int32
  wire signed [31:0] sel_1_1193;  // int32
  wire signed [31:0] sel_6414;  // int32
  wire signed [31:0] sel_1_1194;  // int32
  wire signed [31:0] sel_6415;  // int32
  wire signed [31:0] sel_1_1195;  // int32
  wire signed [31:0] sel_1_1196;  // int32
  wire signed [31:0] sel_1_1197;  // int32
  wire signed [31:0] sel_6416;  // int32
  wire signed [31:0] sel_1_1198;  // int32
  wire signed [31:0] sel_6417;  // int32
  wire signed [31:0] sel_6418;  // int32
  reg signed [31:0] sel_1_1199;  // int32
  wire tmp_305;
  wire sel_6419;
  wire sel_6420;
  wire sel_6421;
  wire sel_6422;
  wire sel_6423;
  wire sel_6424;
  wire sel_6425;
  wire sel_6426;
  wire sel_6427;
  wire sel_6428;
  wire sel_6429;
  wire sel_6430;
  wire sel_6431;
  wire sel_6432;
  wire sel_6433;
  wire s_405;
  wire sel_2_1161;
  wire sel_6434;
  wire sel_2_1162;
  wire sel_6435;
  wire sel_2_1163;
  wire sel_6436;
  wire sel_2_1164;
  wire sel_2_1165;
  wire sel_2_1166;
  wire sel_6437;
  wire sel_2_1167;
  wire sel_6438;
  wire sel_6439;
  reg  sel_2_1168;
  reg  [11:0] cont_bits_22_21;  // boolean [12]
  wire signed [31:0] sel_6440;  // int32
  wire signed [31:0] sel_6441;  // int32
  wire signed [31:0] sel_6442;  // int32
  wire signed [31:0] sel_6443;  // int32
  wire signed [31:0] sel_6444;  // int32
  wire signed [31:0] sel_6445;  // int32
  wire signed [31:0] sel_6446;  // int32
  wire signed [31:0] sel_6447;  // int32
  wire signed [31:0] sel_6448;  // int32
  wire signed [31:0] sel_6449;  // int32
  wire signed [31:0] sel_6450;  // int32
  wire signed [31:0] sel_6451;  // int32
  wire signed [31:0] sel_6452;  // int32
  wire signed [31:0] sel_6453;  // int32
  wire signed [31:0] sel_6454;  // int32
  wire signed [31:0] s_406;  // int32
  wire signed [31:0] sel_1_1200;  // int32
  wire signed [31:0] sel_6455;  // int32
  wire signed [31:0] sel_1_1201;  // int32
  wire signed [31:0] sel_6456;  // int32
  wire signed [31:0] sel_1_1202;  // int32
  wire signed [31:0] sel_6457;  // int32
  wire signed [31:0] sel_1_1203;  // int32
  wire signed [31:0] sel_1_1204;  // int32
  wire signed [31:0] sel_1_1205;  // int32
  wire signed [31:0] sel_6458;  // int32
  wire signed [31:0] sel_1_1206;  // int32
  wire signed [31:0] sel_6459;  // int32
  wire signed [31:0] sel_6460;  // int32
  reg signed [31:0] sel_1_1207;  // int32
  wire tmp_306;
  wire sel_6461;
  wire sel_6462;
  wire sel_6463;
  wire sel_6464;
  wire sel_6465;
  wire sel_6466;
  wire sel_6467;
  wire sel_6468;
  wire sel_6469;
  wire sel_6470;
  wire sel_6471;
  wire sel_6472;
  wire sel_6473;
  wire sel_6474;
  wire sel_6475;
  wire s_407;
  wire sel_2_1169;
  wire sel_6476;
  wire sel_2_1170;
  wire sel_6477;
  wire sel_2_1171;
  wire sel_6478;
  wire sel_2_1172;
  wire sel_2_1173;
  wire sel_2_1174;
  wire sel_6479;
  wire sel_2_1175;
  wire sel_6480;
  wire sel_6481;
  reg  sel_2_1176;
  reg  [11:0] cont_bits_22_22;  // boolean [12]
  wire signed [31:0] sel_6482;  // int32
  wire signed [31:0] sel_6483;  // int32
  wire signed [31:0] sel_6484;  // int32
  wire signed [31:0] sel_6485;  // int32
  wire signed [31:0] sel_6486;  // int32
  wire signed [31:0] sel_6487;  // int32
  wire signed [31:0] sel_6488;  // int32
  wire signed [31:0] sel_6489;  // int32
  wire signed [31:0] sel_6490;  // int32
  wire signed [31:0] sel_6491;  // int32
  wire signed [31:0] sel_6492;  // int32
  wire signed [31:0] sel_6493;  // int32
  wire signed [31:0] sel_6494;  // int32
  wire signed [31:0] sel_6495;  // int32
  wire signed [31:0] sel_6496;  // int32
  wire signed [31:0] s_408;  // int32
  wire signed [31:0] sel_1_1208;  // int32
  wire signed [31:0] sel_6497;  // int32
  wire signed [31:0] sel_1_1209;  // int32
  wire signed [31:0] sel_6498;  // int32
  wire signed [31:0] sel_1_1210;  // int32
  wire signed [31:0] sel_6499;  // int32
  wire signed [31:0] sel_1_1211;  // int32
  wire signed [31:0] sel_1_1212;  // int32
  wire signed [31:0] sel_1_1213;  // int32
  wire signed [31:0] sel_6500;  // int32
  wire signed [31:0] sel_1_1214;  // int32
  wire signed [31:0] sel_6501;  // int32
  wire signed [31:0] sel_6502;  // int32
  reg signed [31:0] sel_1_1215;  // int32
  wire tmp_307;
  wire sel_6503;
  wire sel_6504;
  wire sel_6505;
  wire sel_6506;
  wire sel_6507;
  wire sel_6508;
  wire sel_6509;
  wire sel_6510;
  wire sel_6511;
  wire sel_6512;
  wire sel_6513;
  wire sel_6514;
  wire sel_6515;
  wire sel_6516;
  wire sel_6517;
  wire s_409;
  wire sel_2_1177;
  wire sel_6518;
  wire sel_2_1178;
  wire sel_6519;
  wire sel_2_1179;
  wire sel_6520;
  wire sel_2_1180;
  wire sel_2_1181;
  wire sel_2_1182;
  wire sel_6521;
  wire sel_2_1183;
  wire sel_6522;
  wire sel_6523;
  reg  sel_2_1184;
  reg  [11:0] cont_bits_22_23;  // boolean [12]
  wire signed [31:0] sel_6524;  // int32
  wire signed [31:0] sel_6525;  // int32
  wire signed [31:0] sel_6526;  // int32
  wire signed [31:0] sel_6527;  // int32
  wire signed [31:0] sel_6528;  // int32
  wire signed [31:0] sel_6529;  // int32
  wire signed [31:0] sel_6530;  // int32
  wire signed [31:0] sel_6531;  // int32
  wire signed [31:0] sel_6532;  // int32
  wire signed [31:0] sel_6533;  // int32
  wire signed [31:0] sel_6534;  // int32
  wire signed [31:0] sel_6535;  // int32
  wire signed [31:0] sel_6536;  // int32
  wire signed [31:0] sel_6537;  // int32
  wire signed [31:0] sel_6538;  // int32
  wire signed [31:0] s_410;  // int32
  wire signed [31:0] sel_1_1216;  // int32
  wire signed [31:0] sel_6539;  // int32
  wire signed [31:0] sel_1_1217;  // int32
  wire signed [31:0] sel_6540;  // int32
  wire signed [31:0] sel_1_1218;  // int32
  wire signed [31:0] sel_6541;  // int32
  wire signed [31:0] sel_1_1219;  // int32
  wire signed [31:0] sel_1_1220;  // int32
  wire signed [31:0] sel_1_1221;  // int32
  wire signed [31:0] sel_6542;  // int32
  wire signed [31:0] sel_1_1222;  // int32
  wire signed [31:0] sel_6543;  // int32
  wire signed [31:0] sel_6544;  // int32
  reg signed [31:0] sel_1_1223;  // int32
  wire tmp_308;
  wire sel_6545;
  wire sel_6546;
  wire sel_6547;
  wire sel_6548;
  wire sel_6549;
  wire sel_6550;
  wire sel_6551;
  wire sel_6552;
  wire sel_6553;
  wire sel_6554;
  wire sel_6555;
  wire sel_6556;
  wire sel_6557;
  wire sel_6558;
  wire sel_6559;
  wire s_411;
  wire sel_2_1185;
  wire sel_6560;
  wire sel_2_1186;
  wire sel_6561;
  wire sel_2_1187;
  wire sel_6562;
  wire sel_2_1188;
  wire sel_2_1189;
  wire sel_2_1190;
  wire sel_6563;
  wire sel_2_1191;
  wire sel_6564;
  wire sel_6565;
  reg  sel_2_1192;
  reg  [11:0] cont_bits_22_24;  // boolean [12]
  wire signed [31:0] sel_6566;  // int32
  wire signed [31:0] sel_6567;  // int32
  wire signed [31:0] sel_6568;  // int32
  wire signed [31:0] sel_6569;  // int32
  wire signed [31:0] sel_6570;  // int32
  wire signed [31:0] sel_6571;  // int32
  wire signed [31:0] sel_6572;  // int32
  wire signed [31:0] sel_6573;  // int32
  wire signed [31:0] sel_6574;  // int32
  wire signed [31:0] sel_6575;  // int32
  wire signed [31:0] sel_6576;  // int32
  wire signed [31:0] sel_6577;  // int32
  wire signed [31:0] sel_6578;  // int32
  wire signed [31:0] sel_6579;  // int32
  wire signed [31:0] sel_6580;  // int32
  wire signed [31:0] s_412;  // int32
  wire signed [31:0] sel_1_1224;  // int32
  wire signed [31:0] sel_6581;  // int32
  wire signed [31:0] sel_1_1225;  // int32
  wire signed [31:0] sel_6582;  // int32
  wire signed [31:0] sel_1_1226;  // int32
  wire signed [31:0] sel_6583;  // int32
  wire signed [31:0] sel_1_1227;  // int32
  wire signed [31:0] sel_1_1228;  // int32
  wire signed [31:0] sel_1_1229;  // int32
  wire signed [31:0] sel_6584;  // int32
  wire signed [31:0] sel_1_1230;  // int32
  wire signed [31:0] sel_6585;  // int32
  wire signed [31:0] sel_6586;  // int32
  reg signed [31:0] sel_1_1231;  // int32
  wire tmp_309;
  wire sel_6587;
  wire sel_6588;
  wire sel_6589;
  wire sel_6590;
  wire sel_6591;
  wire sel_6592;
  wire sel_6593;
  wire sel_6594;
  wire sel_6595;
  wire sel_6596;
  wire sel_6597;
  wire sel_6598;
  wire sel_6599;
  wire sel_6600;
  wire sel_6601;
  wire s_413;
  wire sel_2_1193;
  wire sel_6602;
  wire sel_2_1194;
  wire sel_6603;
  wire sel_2_1195;
  wire sel_6604;
  wire sel_2_1196;
  wire sel_2_1197;
  wire sel_2_1198;
  wire sel_6605;
  wire sel_2_1199;
  wire sel_6606;
  wire sel_6607;
  reg  sel_2_1200;
  reg  [11:0] cont_bits_22_25;  // boolean [12]
  wire signed [31:0] sel_6608;  // int32
  wire signed [31:0] sel_6609;  // int32
  wire signed [31:0] sel_6610;  // int32
  wire signed [31:0] sel_6611;  // int32
  wire signed [31:0] sel_6612;  // int32
  wire signed [31:0] sel_6613;  // int32
  wire signed [31:0] sel_6614;  // int32
  wire signed [31:0] sel_6615;  // int32
  wire signed [31:0] sel_6616;  // int32
  wire signed [31:0] sel_6617;  // int32
  wire signed [31:0] sel_6618;  // int32
  wire signed [31:0] sel_6619;  // int32
  wire signed [31:0] sel_6620;  // int32
  wire signed [31:0] sel_6621;  // int32
  wire signed [31:0] sel_6622;  // int32
  wire signed [31:0] s_414;  // int32
  wire signed [31:0] sel_1_1232;  // int32
  wire signed [31:0] sel_6623;  // int32
  wire signed [31:0] sel_1_1233;  // int32
  wire signed [31:0] sel_6624;  // int32
  wire signed [31:0] sel_1_1234;  // int32
  wire signed [31:0] sel_6625;  // int32
  wire signed [31:0] sel_1_1235;  // int32
  wire signed [31:0] sel_1_1236;  // int32
  wire signed [31:0] sel_1_1237;  // int32
  wire signed [31:0] sel_6626;  // int32
  wire signed [31:0] sel_1_1238;  // int32
  wire signed [31:0] sel_6627;  // int32
  wire signed [31:0] sel_6628;  // int32
  reg signed [31:0] sel_1_1239;  // int32
  wire tmp_310;
  wire sel_6629;
  wire sel_6630;
  wire sel_6631;
  wire sel_6632;
  wire sel_6633;
  wire sel_6634;
  wire sel_6635;
  wire sel_6636;
  wire sel_6637;
  wire sel_6638;
  wire sel_6639;
  wire sel_6640;
  wire sel_6641;
  wire sel_6642;
  wire sel_6643;
  wire s_415;
  wire sel_2_1201;
  wire sel_6644;
  wire sel_2_1202;
  wire sel_6645;
  wire sel_2_1203;
  wire sel_6646;
  wire sel_2_1204;
  wire sel_2_1205;
  wire sel_2_1206;
  wire sel_6647;
  wire sel_2_1207;
  wire sel_6648;
  wire sel_6649;
  reg  sel_2_1208;
  reg  [11:0] cont_bits_22_26;  // boolean [12]
  wire signed [31:0] sel_6650;  // int32
  wire signed [31:0] sel_6651;  // int32
  wire signed [31:0] sel_6652;  // int32
  wire signed [31:0] sel_6653;  // int32
  wire signed [31:0] sel_6654;  // int32
  wire signed [31:0] sel_6655;  // int32
  wire signed [31:0] sel_6656;  // int32
  wire signed [31:0] sel_6657;  // int32
  wire signed [31:0] sel_6658;  // int32
  wire signed [31:0] sel_6659;  // int32
  wire signed [31:0] sel_6660;  // int32
  wire signed [31:0] sel_6661;  // int32
  wire signed [31:0] sel_6662;  // int32
  wire signed [31:0] sel_6663;  // int32
  wire signed [31:0] sel_6664;  // int32
  wire signed [31:0] s_416;  // int32
  wire signed [31:0] sel_1_1240;  // int32
  wire signed [31:0] sel_6665;  // int32
  wire signed [31:0] sel_1_1241;  // int32
  wire signed [31:0] sel_6666;  // int32
  wire signed [31:0] sel_1_1242;  // int32
  wire signed [31:0] sel_6667;  // int32
  wire signed [31:0] sel_1_1243;  // int32
  wire signed [31:0] sel_1_1244;  // int32
  wire signed [31:0] sel_1_1245;  // int32
  wire signed [31:0] sel_6668;  // int32
  wire signed [31:0] sel_1_1246;  // int32
  wire signed [31:0] sel_6669;  // int32
  wire signed [31:0] sel_6670;  // int32
  reg signed [31:0] sel_1_1247;  // int32
  wire cont_bits_22_27;
  wire sel_1_1248;
  wire [11:0] cont_bits_21_14;  // boolean [12]
  wire functionOutput_0_13;
  wire functionOutput_1_13;
  wire functionOutput_2_13;
  wire functionOutput_3_13;
  wire functionOutput_4_13;
  wire functionOutput_5_13;
  wire functionOutput_6_13;
  wire functionOutput_7_13;
  wire functionOutput_8_13;
  wire functionOutput_9_13;
  wire functionOutput_10_13;
  wire functionOutput_11_13;
  wire [11:0] functionOutput_24;  // boolean [12]
  wire signed [31:0] sel_6671;  // int32
  wire signed [31:0] sel_6672;  // int32
  wire signed [31:0] sel_6673;  // int32
  wire signed [31:0] sel_6674;  // int32
  wire signed [31:0] sel_6675;  // int32
  wire signed [31:0] sel_6676;  // int32
  wire signed [31:0] sel_6677;  // int32
  wire signed [31:0] sel_6678;  // int32
  wire signed [31:0] sel_6679;  // int32
  wire signed [31:0] sel_6680;  // int32
  wire signed [31:0] sel_6681;  // int32
  wire signed [31:0] sel_6682;  // int32
  wire signed [31:0] sel_6683;  // int32
  wire signed [31:0] sel_6684;  // int32
  wire signed [31:0] sel_6685;  // int32
  wire signed [31:0] s_417;  // int32
  wire signed [31:0] sel_1_1249;  // int32
  wire signed [31:0] sel_6686;  // int32
  wire signed [31:0] sel_1_1250;  // int32
  wire signed [31:0] sel_6687;  // int32
  wire signed [31:0] sel_1_1251;  // int32
  wire signed [31:0] sel_1_1252;  // int32
  wire signed [31:0] sel_1_1253;  // int32
  wire signed [31:0] sel_6688;  // int32
  wire signed [31:0] sel_1_1254;  // int32
  wire signed [31:0] sel_6689;  // int32
  wire signed [31:0] sel_6690;  // int32
  reg signed [31:0] sel_1_1255;  // int32
  wire tmp_311;
  wire sel_6691;
  wire sel_6692;
  wire sel_6693;
  wire sel_6694;
  wire sel_6695;
  wire sel_6696;
  wire sel_6697;
  wire sel_6698;
  wire sel_6699;
  wire sel_6700;
  wire sel_6701;
  wire sel_6702;
  wire sel_6703;
  wire sel_6704;
  wire sel_6705;
  wire s_418;
  wire sel_2_1209;
  wire sel_6706;
  wire sel_2_1210;
  wire sel_6707;
  wire sel_2_1211;
  wire sel_2_1212;
  wire sel_2_1213;
  wire sel_6708;
  wire sel_2_1214;
  wire sel_6709;
  wire sel_6710;
  reg  sel_2_1215;
  reg  [11:0] cont_bits_21_15;  // boolean [12]
  wire signed [31:0] sel_6711;  // int32
  wire signed [31:0] sel_6712;  // int32
  wire signed [31:0] sel_6713;  // int32
  wire signed [31:0] sel_6714;  // int32
  wire signed [31:0] sel_6715;  // int32
  wire signed [31:0] sel_6716;  // int32
  wire signed [31:0] sel_6717;  // int32
  wire signed [31:0] sel_6718;  // int32
  wire signed [31:0] sel_6719;  // int32
  wire signed [31:0] sel_6720;  // int32
  wire signed [31:0] sel_6721;  // int32
  wire signed [31:0] sel_6722;  // int32
  wire signed [31:0] sel_6723;  // int32
  wire signed [31:0] sel_6724;  // int32
  wire signed [31:0] sel_6725;  // int32
  wire signed [31:0] s_419;  // int32
  wire signed [31:0] sel_1_1256;  // int32
  wire signed [31:0] sel_6726;  // int32
  wire signed [31:0] sel_1_1257;  // int32
  wire signed [31:0] sel_6727;  // int32
  wire signed [31:0] sel_1_1258;  // int32
  wire signed [31:0] sel_1_1259;  // int32
  wire signed [31:0] sel_1_1260;  // int32
  wire signed [31:0] sel_6728;  // int32
  wire signed [31:0] sel_1_1261;  // int32
  wire signed [31:0] sel_6729;  // int32
  wire signed [31:0] sel_6730;  // int32
  reg signed [31:0] sel_1_1262;  // int32
  wire tmp_312;
  wire sel_6731;
  wire sel_6732;
  wire sel_6733;
  wire sel_6734;
  wire sel_6735;
  wire sel_6736;
  wire sel_6737;
  wire sel_6738;
  wire sel_6739;
  wire sel_6740;
  wire sel_6741;
  wire sel_6742;
  wire sel_6743;
  wire sel_6744;
  wire sel_6745;
  wire s_420;
  wire sel_2_1216;
  wire sel_6746;
  wire sel_2_1217;
  wire sel_6747;
  wire sel_2_1218;
  wire sel_2_1219;
  wire sel_2_1220;
  wire sel_6748;
  wire sel_2_1221;
  wire sel_6749;
  wire sel_6750;
  reg  sel_2_1222;
  reg  [11:0] cont_bits_21_16;  // boolean [12]
  wire signed [31:0] sel_6751;  // int32
  wire signed [31:0] sel_6752;  // int32
  wire signed [31:0] sel_6753;  // int32
  wire signed [31:0] sel_6754;  // int32
  wire signed [31:0] sel_6755;  // int32
  wire signed [31:0] sel_6756;  // int32
  wire signed [31:0] sel_6757;  // int32
  wire signed [31:0] sel_6758;  // int32
  wire signed [31:0] sel_6759;  // int32
  wire signed [31:0] sel_6760;  // int32
  wire signed [31:0] sel_6761;  // int32
  wire signed [31:0] sel_6762;  // int32
  wire signed [31:0] sel_6763;  // int32
  wire signed [31:0] sel_6764;  // int32
  wire signed [31:0] sel_6765;  // int32
  wire signed [31:0] s_421;  // int32
  wire signed [31:0] sel_1_1263;  // int32
  wire signed [31:0] sel_6766;  // int32
  wire signed [31:0] sel_1_1264;  // int32
  wire signed [31:0] sel_6767;  // int32
  wire signed [31:0] sel_1_1265;  // int32
  wire signed [31:0] sel_1_1266;  // int32
  wire signed [31:0] sel_1_1267;  // int32
  wire signed [31:0] sel_6768;  // int32
  wire signed [31:0] sel_1_1268;  // int32
  wire signed [31:0] sel_6769;  // int32
  wire signed [31:0] sel_6770;  // int32
  reg signed [31:0] sel_1_1269;  // int32
  wire tmp_313;
  wire sel_6771;
  wire sel_6772;
  wire sel_6773;
  wire sel_6774;
  wire sel_6775;
  wire sel_6776;
  wire sel_6777;
  wire sel_6778;
  wire sel_6779;
  wire sel_6780;
  wire sel_6781;
  wire sel_6782;
  wire sel_6783;
  wire sel_6784;
  wire sel_6785;
  wire s_422;
  wire sel_2_1223;
  wire sel_6786;
  wire sel_2_1224;
  wire sel_6787;
  wire sel_2_1225;
  wire sel_2_1226;
  wire sel_2_1227;
  wire sel_6788;
  wire sel_2_1228;
  wire sel_6789;
  wire sel_6790;
  reg  sel_2_1229;
  reg  [11:0] cont_bits_21_17;  // boolean [12]
  wire signed [31:0] sel_6791;  // int32
  wire signed [31:0] sel_6792;  // int32
  wire signed [31:0] sel_6793;  // int32
  wire signed [31:0] sel_6794;  // int32
  wire signed [31:0] sel_6795;  // int32
  wire signed [31:0] sel_6796;  // int32
  wire signed [31:0] sel_6797;  // int32
  wire signed [31:0] sel_6798;  // int32
  wire signed [31:0] sel_6799;  // int32
  wire signed [31:0] sel_6800;  // int32
  wire signed [31:0] sel_6801;  // int32
  wire signed [31:0] sel_6802;  // int32
  wire signed [31:0] sel_6803;  // int32
  wire signed [31:0] sel_6804;  // int32
  wire signed [31:0] sel_6805;  // int32
  wire signed [31:0] s_423;  // int32
  wire signed [31:0] sel_1_1270;  // int32
  wire signed [31:0] sel_6806;  // int32
  wire signed [31:0] sel_1_1271;  // int32
  wire signed [31:0] sel_6807;  // int32
  wire signed [31:0] sel_1_1272;  // int32
  wire signed [31:0] sel_1_1273;  // int32
  wire signed [31:0] sel_1_1274;  // int32
  wire signed [31:0] sel_6808;  // int32
  wire signed [31:0] sel_1_1275;  // int32
  wire signed [31:0] sel_6809;  // int32
  wire signed [31:0] sel_6810;  // int32
  reg signed [31:0] sel_1_1276;  // int32
  wire tmp_314;
  wire sel_6811;
  wire sel_6812;
  wire sel_6813;
  wire sel_6814;
  wire sel_6815;
  wire sel_6816;
  wire sel_6817;
  wire sel_6818;
  wire sel_6819;
  wire sel_6820;
  wire sel_6821;
  wire sel_6822;
  wire sel_6823;
  wire sel_6824;
  wire sel_6825;
  wire s_424;
  wire sel_2_1230;
  wire sel_6826;
  wire sel_2_1231;
  wire sel_6827;
  wire sel_2_1232;
  wire sel_2_1233;
  wire sel_2_1234;
  wire sel_6828;
  wire sel_2_1235;
  wire sel_6829;
  wire sel_6830;
  reg  sel_2_1236;
  reg  [11:0] cont_bits_21_18;  // boolean [12]
  wire signed [31:0] sel_6831;  // int32
  wire signed [31:0] sel_6832;  // int32
  wire signed [31:0] sel_6833;  // int32
  wire signed [31:0] sel_6834;  // int32
  wire signed [31:0] sel_6835;  // int32
  wire signed [31:0] sel_6836;  // int32
  wire signed [31:0] sel_6837;  // int32
  wire signed [31:0] sel_6838;  // int32
  wire signed [31:0] sel_6839;  // int32
  wire signed [31:0] sel_6840;  // int32
  wire signed [31:0] sel_6841;  // int32
  wire signed [31:0] sel_6842;  // int32
  wire signed [31:0] sel_6843;  // int32
  wire signed [31:0] sel_6844;  // int32
  wire signed [31:0] sel_6845;  // int32
  wire signed [31:0] s_425;  // int32
  wire signed [31:0] sel_1_1277;  // int32
  wire signed [31:0] sel_6846;  // int32
  wire signed [31:0] sel_1_1278;  // int32
  wire signed [31:0] sel_6847;  // int32
  wire signed [31:0] sel_1_1279;  // int32
  wire signed [31:0] sel_1_1280;  // int32
  wire signed [31:0] sel_1_1281;  // int32
  wire signed [31:0] sel_6848;  // int32
  wire signed [31:0] sel_1_1282;  // int32
  wire signed [31:0] sel_6849;  // int32
  wire signed [31:0] sel_6850;  // int32
  reg signed [31:0] sel_1_1283;  // int32
  wire tmp_315;
  wire sel_6851;
  wire sel_6852;
  wire sel_6853;
  wire sel_6854;
  wire sel_6855;
  wire sel_6856;
  wire sel_6857;
  wire sel_6858;
  wire sel_6859;
  wire sel_6860;
  wire sel_6861;
  wire sel_6862;
  wire sel_6863;
  wire sel_6864;
  wire sel_6865;
  wire s_426;
  wire sel_2_1237;
  wire sel_6866;
  wire sel_2_1238;
  wire sel_6867;
  wire sel_2_1239;
  wire sel_2_1240;
  wire sel_2_1241;
  wire sel_6868;
  wire sel_2_1242;
  wire sel_6869;
  wire sel_6870;
  reg  sel_2_1243;
  reg  [11:0] cont_bits_21_19;  // boolean [12]
  wire signed [31:0] sel_6871;  // int32
  wire signed [31:0] sel_6872;  // int32
  wire signed [31:0] sel_6873;  // int32
  wire signed [31:0] sel_6874;  // int32
  wire signed [31:0] sel_6875;  // int32
  wire signed [31:0] sel_6876;  // int32
  wire signed [31:0] sel_6877;  // int32
  wire signed [31:0] sel_6878;  // int32
  wire signed [31:0] sel_6879;  // int32
  wire signed [31:0] sel_6880;  // int32
  wire signed [31:0] sel_6881;  // int32
  wire signed [31:0] sel_6882;  // int32
  wire signed [31:0] sel_6883;  // int32
  wire signed [31:0] sel_6884;  // int32
  wire signed [31:0] sel_6885;  // int32
  wire signed [31:0] s_427;  // int32
  wire signed [31:0] sel_1_1284;  // int32
  wire signed [31:0] sel_6886;  // int32
  wire signed [31:0] sel_1_1285;  // int32
  wire signed [31:0] sel_6887;  // int32
  wire signed [31:0] sel_1_1286;  // int32
  wire signed [31:0] sel_1_1287;  // int32
  wire signed [31:0] sel_1_1288;  // int32
  wire signed [31:0] sel_6888;  // int32
  wire signed [31:0] sel_1_1289;  // int32
  wire signed [31:0] sel_6889;  // int32
  wire signed [31:0] sel_6890;  // int32
  reg signed [31:0] sel_1_1290;  // int32
  wire tmp_316;
  wire sel_6891;
  wire sel_6892;
  wire sel_6893;
  wire sel_6894;
  wire sel_6895;
  wire sel_6896;
  wire sel_6897;
  wire sel_6898;
  wire sel_6899;
  wire sel_6900;
  wire sel_6901;
  wire sel_6902;
  wire sel_6903;
  wire sel_6904;
  wire sel_6905;
  wire s_428;
  wire sel_2_1244;
  wire sel_6906;
  wire sel_2_1245;
  wire sel_6907;
  wire sel_2_1246;
  wire sel_2_1247;
  wire sel_2_1248;
  wire sel_6908;
  wire sel_2_1249;
  wire sel_6909;
  wire sel_6910;
  reg  sel_2_1250;
  reg  [11:0] cont_bits_21_20;  // boolean [12]
  wire signed [31:0] sel_6911;  // int32
  wire signed [31:0] sel_6912;  // int32
  wire signed [31:0] sel_6913;  // int32
  wire signed [31:0] sel_6914;  // int32
  wire signed [31:0] sel_6915;  // int32
  wire signed [31:0] sel_6916;  // int32
  wire signed [31:0] sel_6917;  // int32
  wire signed [31:0] sel_6918;  // int32
  wire signed [31:0] sel_6919;  // int32
  wire signed [31:0] sel_6920;  // int32
  wire signed [31:0] sel_6921;  // int32
  wire signed [31:0] sel_6922;  // int32
  wire signed [31:0] sel_6923;  // int32
  wire signed [31:0] sel_6924;  // int32
  wire signed [31:0] sel_6925;  // int32
  wire signed [31:0] s_429;  // int32
  wire signed [31:0] sel_1_1291;  // int32
  wire signed [31:0] sel_6926;  // int32
  wire signed [31:0] sel_1_1292;  // int32
  wire signed [31:0] sel_6927;  // int32
  wire signed [31:0] sel_1_1293;  // int32
  wire signed [31:0] sel_1_1294;  // int32
  wire signed [31:0] sel_1_1295;  // int32
  wire signed [31:0] sel_6928;  // int32
  wire signed [31:0] sel_1_1296;  // int32
  wire signed [31:0] sel_6929;  // int32
  wire signed [31:0] sel_6930;  // int32
  reg signed [31:0] sel_1_1297;  // int32
  wire tmp_317;
  wire sel_6931;
  wire sel_6932;
  wire sel_6933;
  wire sel_6934;
  wire sel_6935;
  wire sel_6936;
  wire sel_6937;
  wire sel_6938;
  wire sel_6939;
  wire sel_6940;
  wire sel_6941;
  wire sel_6942;
  wire sel_6943;
  wire sel_6944;
  wire sel_6945;
  wire s_430;
  wire sel_2_1251;
  wire sel_6946;
  wire sel_2_1252;
  wire sel_6947;
  wire sel_2_1253;
  wire sel_2_1254;
  wire sel_2_1255;
  wire sel_6948;
  wire sel_2_1256;
  wire sel_6949;
  wire sel_6950;
  reg  sel_2_1257;
  reg  [11:0] cont_bits_21_21;  // boolean [12]
  wire signed [31:0] sel_6951;  // int32
  wire signed [31:0] sel_6952;  // int32
  wire signed [31:0] sel_6953;  // int32
  wire signed [31:0] sel_6954;  // int32
  wire signed [31:0] sel_6955;  // int32
  wire signed [31:0] sel_6956;  // int32
  wire signed [31:0] sel_6957;  // int32
  wire signed [31:0] sel_6958;  // int32
  wire signed [31:0] sel_6959;  // int32
  wire signed [31:0] sel_6960;  // int32
  wire signed [31:0] sel_6961;  // int32
  wire signed [31:0] sel_6962;  // int32
  wire signed [31:0] sel_6963;  // int32
  wire signed [31:0] sel_6964;  // int32
  wire signed [31:0] sel_6965;  // int32
  wire signed [31:0] s_431;  // int32
  wire signed [31:0] sel_1_1298;  // int32
  wire signed [31:0] sel_6966;  // int32
  wire signed [31:0] sel_1_1299;  // int32
  wire signed [31:0] sel_6967;  // int32
  wire signed [31:0] sel_1_1300;  // int32
  wire signed [31:0] sel_1_1301;  // int32
  wire signed [31:0] sel_1_1302;  // int32
  wire signed [31:0] sel_6968;  // int32
  wire signed [31:0] sel_1_1303;  // int32
  wire signed [31:0] sel_6969;  // int32
  wire signed [31:0] sel_6970;  // int32
  reg signed [31:0] sel_1_1304;  // int32
  wire tmp_318;
  wire sel_6971;
  wire sel_6972;
  wire sel_6973;
  wire sel_6974;
  wire sel_6975;
  wire sel_6976;
  wire sel_6977;
  wire sel_6978;
  wire sel_6979;
  wire sel_6980;
  wire sel_6981;
  wire sel_6982;
  wire sel_6983;
  wire sel_6984;
  wire sel_6985;
  wire s_432;
  wire sel_2_1258;
  wire sel_6986;
  wire sel_2_1259;
  wire sel_6987;
  wire sel_2_1260;
  wire sel_2_1261;
  wire sel_2_1262;
  wire sel_6988;
  wire sel_2_1263;
  wire sel_6989;
  wire sel_6990;
  reg  sel_2_1264;
  reg  [11:0] cont_bits_21_22;  // boolean [12]
  wire signed [31:0] sel_6991;  // int32
  wire signed [31:0] sel_6992;  // int32
  wire signed [31:0] sel_6993;  // int32
  wire signed [31:0] sel_6994;  // int32
  wire signed [31:0] sel_6995;  // int32
  wire signed [31:0] sel_6996;  // int32
  wire signed [31:0] sel_6997;  // int32
  wire signed [31:0] sel_6998;  // int32
  wire signed [31:0] sel_6999;  // int32
  wire signed [31:0] sel_7000;  // int32
  wire signed [31:0] sel_7001;  // int32
  wire signed [31:0] sel_7002;  // int32
  wire signed [31:0] sel_7003;  // int32
  wire signed [31:0] sel_7004;  // int32
  wire signed [31:0] sel_7005;  // int32
  wire signed [31:0] s_433;  // int32
  wire signed [31:0] sel_1_1305;  // int32
  wire signed [31:0] sel_7006;  // int32
  wire signed [31:0] sel_1_1306;  // int32
  wire signed [31:0] sel_7007;  // int32
  wire signed [31:0] sel_1_1307;  // int32
  wire signed [31:0] sel_1_1308;  // int32
  wire signed [31:0] sel_1_1309;  // int32
  wire signed [31:0] sel_7008;  // int32
  wire signed [31:0] sel_1_1310;  // int32
  wire signed [31:0] sel_7009;  // int32
  wire signed [31:0] sel_7010;  // int32
  reg signed [31:0] sel_1_1311;  // int32
  wire tmp_319;
  wire sel_7011;
  wire sel_7012;
  wire sel_7013;
  wire sel_7014;
  wire sel_7015;
  wire sel_7016;
  wire sel_7017;
  wire sel_7018;
  wire sel_7019;
  wire sel_7020;
  wire sel_7021;
  wire sel_7022;
  wire sel_7023;
  wire sel_7024;
  wire sel_7025;
  wire s_434;
  wire sel_2_1265;
  wire sel_7026;
  wire sel_2_1266;
  wire sel_7027;
  wire sel_2_1267;
  wire sel_2_1268;
  wire sel_2_1269;
  wire sel_7028;
  wire sel_2_1270;
  wire sel_7029;
  wire sel_7030;
  reg  sel_2_1271;
  reg  [11:0] cont_bits_21_23;  // boolean [12]
  wire signed [31:0] sel_7031;  // int32
  wire signed [31:0] sel_7032;  // int32
  wire signed [31:0] sel_7033;  // int32
  wire signed [31:0] sel_7034;  // int32
  wire signed [31:0] sel_7035;  // int32
  wire signed [31:0] sel_7036;  // int32
  wire signed [31:0] sel_7037;  // int32
  wire signed [31:0] sel_7038;  // int32
  wire signed [31:0] sel_7039;  // int32
  wire signed [31:0] sel_7040;  // int32
  wire signed [31:0] sel_7041;  // int32
  wire signed [31:0] sel_7042;  // int32
  wire signed [31:0] sel_7043;  // int32
  wire signed [31:0] sel_7044;  // int32
  wire signed [31:0] sel_7045;  // int32
  wire signed [31:0] s_435;  // int32
  wire signed [31:0] sel_1_1312;  // int32
  wire signed [31:0] sel_7046;  // int32
  wire signed [31:0] sel_1_1313;  // int32
  wire signed [31:0] sel_7047;  // int32
  wire signed [31:0] sel_1_1314;  // int32
  wire signed [31:0] sel_1_1315;  // int32
  wire signed [31:0] sel_1_1316;  // int32
  wire signed [31:0] sel_7048;  // int32
  wire signed [31:0] sel_1_1317;  // int32
  wire signed [31:0] sel_7049;  // int32
  wire signed [31:0] sel_7050;  // int32
  reg signed [31:0] sel_1_1318;  // int32
  wire tmp_320;
  wire sel_7051;
  wire sel_7052;
  wire sel_7053;
  wire sel_7054;
  wire sel_7055;
  wire sel_7056;
  wire sel_7057;
  wire sel_7058;
  wire sel_7059;
  wire sel_7060;
  wire sel_7061;
  wire sel_7062;
  wire sel_7063;
  wire sel_7064;
  wire sel_7065;
  wire s_436;
  wire sel_2_1272;
  wire sel_7066;
  wire sel_2_1273;
  wire sel_7067;
  wire sel_2_1274;
  wire sel_2_1275;
  wire sel_2_1276;
  wire sel_7068;
  wire sel_2_1277;
  wire sel_7069;
  wire sel_7070;
  reg  sel_2_1278;
  reg  [11:0] cont_bits_21_24;  // boolean [12]
  wire signed [31:0] sel_7071;  // int32
  wire signed [31:0] sel_7072;  // int32
  wire signed [31:0] sel_7073;  // int32
  wire signed [31:0] sel_7074;  // int32
  wire signed [31:0] sel_7075;  // int32
  wire signed [31:0] sel_7076;  // int32
  wire signed [31:0] sel_7077;  // int32
  wire signed [31:0] sel_7078;  // int32
  wire signed [31:0] sel_7079;  // int32
  wire signed [31:0] sel_7080;  // int32
  wire signed [31:0] sel_7081;  // int32
  wire signed [31:0] sel_7082;  // int32
  wire signed [31:0] sel_7083;  // int32
  wire signed [31:0] sel_7084;  // int32
  wire signed [31:0] sel_7085;  // int32
  wire signed [31:0] s_437;  // int32
  wire signed [31:0] sel_1_1319;  // int32
  wire signed [31:0] sel_7086;  // int32
  wire signed [31:0] sel_1_1320;  // int32
  wire signed [31:0] sel_7087;  // int32
  wire signed [31:0] sel_1_1321;  // int32
  wire signed [31:0] sel_1_1322;  // int32
  wire signed [31:0] sel_1_1323;  // int32
  wire signed [31:0] sel_7088;  // int32
  wire signed [31:0] sel_1_1324;  // int32
  wire signed [31:0] sel_7089;  // int32
  wire signed [31:0] sel_7090;  // int32
  reg signed [31:0] sel_1_1325;  // int32
  wire tmp_321;
  wire sel_7091;
  wire sel_7092;
  wire sel_7093;
  wire sel_7094;
  wire sel_7095;
  wire sel_7096;
  wire sel_7097;
  wire sel_7098;
  wire sel_7099;
  wire sel_7100;
  wire sel_7101;
  wire sel_7102;
  wire sel_7103;
  wire sel_7104;
  wire sel_7105;
  wire s_438;
  wire sel_2_1279;
  wire sel_7106;
  wire sel_2_1280;
  wire sel_7107;
  wire sel_2_1281;
  wire sel_2_1282;
  wire sel_2_1283;
  wire sel_7108;
  wire sel_2_1284;
  wire sel_7109;
  wire sel_7110;
  reg  sel_2_1285;
  reg  [11:0] cont_bits_21_25;  // boolean [12]
  wire signed [31:0] sel_7111;  // int32
  wire signed [31:0] sel_7112;  // int32
  wire signed [31:0] sel_7113;  // int32
  wire signed [31:0] sel_7114;  // int32
  wire signed [31:0] sel_7115;  // int32
  wire signed [31:0] sel_7116;  // int32
  wire signed [31:0] sel_7117;  // int32
  wire signed [31:0] sel_7118;  // int32
  wire signed [31:0] sel_7119;  // int32
  wire signed [31:0] sel_7120;  // int32
  wire signed [31:0] sel_7121;  // int32
  wire signed [31:0] sel_7122;  // int32
  wire signed [31:0] sel_7123;  // int32
  wire signed [31:0] sel_7124;  // int32
  wire signed [31:0] sel_7125;  // int32
  wire signed [31:0] s_439;  // int32
  wire signed [31:0] sel_1_1326;  // int32
  wire signed [31:0] sel_7126;  // int32
  wire signed [31:0] sel_1_1327;  // int32
  wire signed [31:0] sel_7127;  // int32
  wire signed [31:0] sel_1_1328;  // int32
  wire signed [31:0] sel_1_1329;  // int32
  wire signed [31:0] sel_1_1330;  // int32
  wire signed [31:0] sel_7128;  // int32
  wire signed [31:0] sel_1_1331;  // int32
  wire signed [31:0] sel_7129;  // int32
  wire signed [31:0] sel_7130;  // int32
  reg signed [31:0] sel_1_1332;  // int32
  wire tmp_322;
  wire sel_7131;
  wire sel_7132;
  wire sel_7133;
  wire sel_7134;
  wire sel_7135;
  wire sel_7136;
  wire sel_7137;
  wire sel_7138;
  wire sel_7139;
  wire sel_7140;
  wire sel_7141;
  wire sel_7142;
  wire sel_7143;
  wire sel_7144;
  wire sel_7145;
  wire s_440;
  wire sel_2_1286;
  wire sel_7146;
  wire sel_2_1287;
  wire sel_7147;
  wire sel_2_1288;
  wire sel_2_1289;
  wire sel_2_1290;
  wire sel_7148;
  wire sel_2_1291;
  wire sel_7149;
  wire sel_7150;
  reg  sel_2_1292;
  reg  [11:0] cont_bits_21_26;  // boolean [12]
  wire signed [31:0] sel_7151;  // int32
  wire signed [31:0] sel_7152;  // int32
  wire signed [31:0] sel_7153;  // int32
  wire signed [31:0] sel_7154;  // int32
  wire signed [31:0] sel_7155;  // int32
  wire signed [31:0] sel_7156;  // int32
  wire signed [31:0] sel_7157;  // int32
  wire signed [31:0] sel_7158;  // int32
  wire signed [31:0] sel_7159;  // int32
  wire signed [31:0] sel_7160;  // int32
  wire signed [31:0] sel_7161;  // int32
  wire signed [31:0] sel_7162;  // int32
  wire signed [31:0] sel_7163;  // int32
  wire signed [31:0] sel_7164;  // int32
  wire signed [31:0] sel_7165;  // int32
  wire signed [31:0] s_441;  // int32
  wire signed [31:0] sel_1_1333;  // int32
  wire signed [31:0] sel_7166;  // int32
  wire signed [31:0] sel_1_1334;  // int32
  wire signed [31:0] sel_7167;  // int32
  wire signed [31:0] sel_1_1335;  // int32
  wire signed [31:0] sel_1_1336;  // int32
  wire signed [31:0] sel_1_1337;  // int32
  wire signed [31:0] sel_7168;  // int32
  wire signed [31:0] sel_1_1338;  // int32
  wire signed [31:0] sel_7169;  // int32
  wire signed [31:0] sel_7170;  // int32
  reg signed [31:0] sel_1_1339;  // int32
  wire cont_bits_21_27;
  wire sel_1_1340;
  wire [11:0] cont_bits_12_14;  // boolean [12]
  wire functionOutput_0_14;
  wire functionOutput_1_14;
  wire functionOutput_2_14;
  wire functionOutput_3_14;
  wire functionOutput_4_14;
  wire functionOutput_5_14;
  wire functionOutput_6_14;
  wire functionOutput_7_14;
  wire functionOutput_8_14;
  wire functionOutput_9_14;
  wire functionOutput_10_14;
  wire functionOutput_11_14;
  wire [11:0] functionOutput_25;  // boolean [12]
  wire signed [31:0] sel_7171;  // int32
  wire signed [31:0] sel_7172;  // int32
  wire signed [31:0] sel_7173;  // int32
  wire signed [31:0] sel_7174;  // int32
  wire signed [31:0] sel_7175;  // int32
  wire signed [31:0] sel_7176;  // int32
  wire signed [31:0] sel_7177;  // int32
  wire signed [31:0] sel_7178;  // int32
  wire signed [31:0] sel_7179;  // int32
  wire signed [31:0] sel_7180;  // int32
  wire signed [31:0] sel_7181;  // int32
  wire signed [31:0] sel_7182;  // int32
  wire signed [31:0] sel_7183;  // int32
  wire signed [31:0] sel_7184;  // int32
  wire signed [31:0] sel_7185;  // int32
  wire signed [31:0] s_442;  // int32
  wire signed [31:0] sel_1_1341;  // int32
  wire signed [31:0] sel_7186;  // int32
  wire signed [31:0] sel_1_1342;  // int32
  wire signed [31:0] sel_1_1343;  // int32
  wire signed [31:0] sel_1_1344;  // int32
  wire signed [31:0] sel_7187;  // int32
  wire signed [31:0] sel_1_1345;  // int32
  wire signed [31:0] sel_7188;  // int32
  wire signed [31:0] sel_7189;  // int32
  reg signed [31:0] sel_1_1346;  // int32
  wire tmp_323;
  wire sel_7190;
  wire sel_7191;
  wire sel_7192;
  wire sel_7193;
  wire sel_7194;
  wire sel_7195;
  wire sel_7196;
  wire sel_7197;
  wire sel_7198;
  wire sel_7199;
  wire sel_7200;
  wire sel_7201;
  wire sel_7202;
  wire sel_7203;
  wire sel_7204;
  wire s_443;
  wire sel_2_1293;
  wire sel_7205;
  wire sel_2_1294;
  wire sel_2_1295;
  wire sel_2_1296;
  wire sel_7206;
  wire sel_2_1297;
  wire sel_7207;
  wire sel_7208;
  reg  sel_2_1298;
  reg  [11:0] cont_bits_12_15;  // boolean [12]
  wire signed [31:0] sel_7209;  // int32
  wire signed [31:0] sel_7210;  // int32
  wire signed [31:0] sel_7211;  // int32
  wire signed [31:0] sel_7212;  // int32
  wire signed [31:0] sel_7213;  // int32
  wire signed [31:0] sel_7214;  // int32
  wire signed [31:0] sel_7215;  // int32
  wire signed [31:0] sel_7216;  // int32
  wire signed [31:0] sel_7217;  // int32
  wire signed [31:0] sel_7218;  // int32
  wire signed [31:0] sel_7219;  // int32
  wire signed [31:0] sel_7220;  // int32
  wire signed [31:0] sel_7221;  // int32
  wire signed [31:0] sel_7222;  // int32
  wire signed [31:0] sel_7223;  // int32
  wire signed [31:0] s_444;  // int32
  wire signed [31:0] sel_1_1347;  // int32
  wire signed [31:0] sel_7224;  // int32
  wire signed [31:0] sel_1_1348;  // int32
  wire signed [31:0] sel_1_1349;  // int32
  wire signed [31:0] sel_1_1350;  // int32
  wire signed [31:0] sel_7225;  // int32
  wire signed [31:0] sel_1_1351;  // int32
  wire signed [31:0] sel_7226;  // int32
  wire signed [31:0] sel_7227;  // int32
  reg signed [31:0] sel_1_1352;  // int32
  wire tmp_324;
  wire sel_7228;
  wire sel_7229;
  wire sel_7230;
  wire sel_7231;
  wire sel_7232;
  wire sel_7233;
  wire sel_7234;
  wire sel_7235;
  wire sel_7236;
  wire sel_7237;
  wire sel_7238;
  wire sel_7239;
  wire sel_7240;
  wire sel_7241;
  wire sel_7242;
  wire s_445;
  wire sel_2_1299;
  wire sel_7243;
  wire sel_2_1300;
  wire sel_2_1301;
  wire sel_2_1302;
  wire sel_7244;
  wire sel_2_1303;
  wire sel_7245;
  wire sel_7246;
  reg  sel_2_1304;
  reg  [11:0] cont_bits_12_16;  // boolean [12]
  wire signed [31:0] sel_7247;  // int32
  wire signed [31:0] sel_7248;  // int32
  wire signed [31:0] sel_7249;  // int32
  wire signed [31:0] sel_7250;  // int32
  wire signed [31:0] sel_7251;  // int32
  wire signed [31:0] sel_7252;  // int32
  wire signed [31:0] sel_7253;  // int32
  wire signed [31:0] sel_7254;  // int32
  wire signed [31:0] sel_7255;  // int32
  wire signed [31:0] sel_7256;  // int32
  wire signed [31:0] sel_7257;  // int32
  wire signed [31:0] sel_7258;  // int32
  wire signed [31:0] sel_7259;  // int32
  wire signed [31:0] sel_7260;  // int32
  wire signed [31:0] sel_7261;  // int32
  wire signed [31:0] s_446;  // int32
  wire signed [31:0] sel_1_1353;  // int32
  wire signed [31:0] sel_7262;  // int32
  wire signed [31:0] sel_1_1354;  // int32
  wire signed [31:0] sel_1_1355;  // int32
  wire signed [31:0] sel_1_1356;  // int32
  wire signed [31:0] sel_7263;  // int32
  wire signed [31:0] sel_1_1357;  // int32
  wire signed [31:0] sel_7264;  // int32
  wire signed [31:0] sel_7265;  // int32
  reg signed [31:0] sel_1_1358;  // int32
  wire tmp_325;
  wire sel_7266;
  wire sel_7267;
  wire sel_7268;
  wire sel_7269;
  wire sel_7270;
  wire sel_7271;
  wire sel_7272;
  wire sel_7273;
  wire sel_7274;
  wire sel_7275;
  wire sel_7276;
  wire sel_7277;
  wire sel_7278;
  wire sel_7279;
  wire sel_7280;
  wire s_447;
  wire sel_2_1305;
  wire sel_7281;
  wire sel_2_1306;
  wire sel_2_1307;
  wire sel_2_1308;
  wire sel_7282;
  wire sel_2_1309;
  wire sel_7283;
  wire sel_7284;
  reg  sel_2_1310;
  reg  [11:0] cont_bits_12_17;  // boolean [12]
  wire signed [31:0] sel_7285;  // int32
  wire signed [31:0] sel_7286;  // int32
  wire signed [31:0] sel_7287;  // int32
  wire signed [31:0] sel_7288;  // int32
  wire signed [31:0] sel_7289;  // int32
  wire signed [31:0] sel_7290;  // int32
  wire signed [31:0] sel_7291;  // int32
  wire signed [31:0] sel_7292;  // int32
  wire signed [31:0] sel_7293;  // int32
  wire signed [31:0] sel_7294;  // int32
  wire signed [31:0] sel_7295;  // int32
  wire signed [31:0] sel_7296;  // int32
  wire signed [31:0] sel_7297;  // int32
  wire signed [31:0] sel_7298;  // int32
  wire signed [31:0] sel_7299;  // int32
  wire signed [31:0] s_448;  // int32
  wire signed [31:0] sel_1_1359;  // int32
  wire signed [31:0] sel_7300;  // int32
  wire signed [31:0] sel_1_1360;  // int32
  wire signed [31:0] sel_1_1361;  // int32
  wire signed [31:0] sel_1_1362;  // int32
  wire signed [31:0] sel_7301;  // int32
  wire signed [31:0] sel_1_1363;  // int32
  wire signed [31:0] sel_7302;  // int32
  wire signed [31:0] sel_7303;  // int32
  reg signed [31:0] sel_1_1364;  // int32
  wire tmp_326;
  wire sel_7304;
  wire sel_7305;
  wire sel_7306;
  wire sel_7307;
  wire sel_7308;
  wire sel_7309;
  wire sel_7310;
  wire sel_7311;
  wire sel_7312;
  wire sel_7313;
  wire sel_7314;
  wire sel_7315;
  wire sel_7316;
  wire sel_7317;
  wire sel_7318;
  wire s_449;
  wire sel_2_1311;
  wire sel_7319;
  wire sel_2_1312;
  wire sel_2_1313;
  wire sel_2_1314;
  wire sel_7320;
  wire sel_2_1315;
  wire sel_7321;
  wire sel_7322;
  reg  sel_2_1316;
  reg  [11:0] cont_bits_12_18;  // boolean [12]
  wire signed [31:0] sel_7323;  // int32
  wire signed [31:0] sel_7324;  // int32
  wire signed [31:0] sel_7325;  // int32
  wire signed [31:0] sel_7326;  // int32
  wire signed [31:0] sel_7327;  // int32
  wire signed [31:0] sel_7328;  // int32
  wire signed [31:0] sel_7329;  // int32
  wire signed [31:0] sel_7330;  // int32
  wire signed [31:0] sel_7331;  // int32
  wire signed [31:0] sel_7332;  // int32
  wire signed [31:0] sel_7333;  // int32
  wire signed [31:0] sel_7334;  // int32
  wire signed [31:0] sel_7335;  // int32
  wire signed [31:0] sel_7336;  // int32
  wire signed [31:0] sel_7337;  // int32
  wire signed [31:0] s_450;  // int32
  wire signed [31:0] sel_1_1365;  // int32
  wire signed [31:0] sel_7338;  // int32
  wire signed [31:0] sel_1_1366;  // int32
  wire signed [31:0] sel_1_1367;  // int32
  wire signed [31:0] sel_1_1368;  // int32
  wire signed [31:0] sel_7339;  // int32
  wire signed [31:0] sel_1_1369;  // int32
  wire signed [31:0] sel_7340;  // int32
  wire signed [31:0] sel_7341;  // int32
  reg signed [31:0] sel_1_1370;  // int32
  wire tmp_327;
  wire sel_7342;
  wire sel_7343;
  wire sel_7344;
  wire sel_7345;
  wire sel_7346;
  wire sel_7347;
  wire sel_7348;
  wire sel_7349;
  wire sel_7350;
  wire sel_7351;
  wire sel_7352;
  wire sel_7353;
  wire sel_7354;
  wire sel_7355;
  wire sel_7356;
  wire s_451;
  wire sel_2_1317;
  wire sel_7357;
  wire sel_2_1318;
  wire sel_2_1319;
  wire sel_2_1320;
  wire sel_7358;
  wire sel_2_1321;
  wire sel_7359;
  wire sel_7360;
  reg  sel_2_1322;
  reg  [11:0] cont_bits_12_19;  // boolean [12]
  wire signed [31:0] sel_7361;  // int32
  wire signed [31:0] sel_7362;  // int32
  wire signed [31:0] sel_7363;  // int32
  wire signed [31:0] sel_7364;  // int32
  wire signed [31:0] sel_7365;  // int32
  wire signed [31:0] sel_7366;  // int32
  wire signed [31:0] sel_7367;  // int32
  wire signed [31:0] sel_7368;  // int32
  wire signed [31:0] sel_7369;  // int32
  wire signed [31:0] sel_7370;  // int32
  wire signed [31:0] sel_7371;  // int32
  wire signed [31:0] sel_7372;  // int32
  wire signed [31:0] sel_7373;  // int32
  wire signed [31:0] sel_7374;  // int32
  wire signed [31:0] sel_7375;  // int32
  wire signed [31:0] s_452;  // int32
  wire signed [31:0] sel_1_1371;  // int32
  wire signed [31:0] sel_7376;  // int32
  wire signed [31:0] sel_1_1372;  // int32
  wire signed [31:0] sel_1_1373;  // int32
  wire signed [31:0] sel_1_1374;  // int32
  wire signed [31:0] sel_7377;  // int32
  wire signed [31:0] sel_1_1375;  // int32
  wire signed [31:0] sel_7378;  // int32
  wire signed [31:0] sel_7379;  // int32
  reg signed [31:0] sel_1_1376;  // int32
  wire tmp_328;
  wire sel_7380;
  wire sel_7381;
  wire sel_7382;
  wire sel_7383;
  wire sel_7384;
  wire sel_7385;
  wire sel_7386;
  wire sel_7387;
  wire sel_7388;
  wire sel_7389;
  wire sel_7390;
  wire sel_7391;
  wire sel_7392;
  wire sel_7393;
  wire sel_7394;
  wire s_453;
  wire sel_2_1323;
  wire sel_7395;
  wire sel_2_1324;
  wire sel_2_1325;
  wire sel_2_1326;
  wire sel_7396;
  wire sel_2_1327;
  wire sel_7397;
  wire sel_7398;
  reg  sel_2_1328;
  reg  [11:0] cont_bits_12_20;  // boolean [12]
  wire signed [31:0] sel_7399;  // int32
  wire signed [31:0] sel_7400;  // int32
  wire signed [31:0] sel_7401;  // int32
  wire signed [31:0] sel_7402;  // int32
  wire signed [31:0] sel_7403;  // int32
  wire signed [31:0] sel_7404;  // int32
  wire signed [31:0] sel_7405;  // int32
  wire signed [31:0] sel_7406;  // int32
  wire signed [31:0] sel_7407;  // int32
  wire signed [31:0] sel_7408;  // int32
  wire signed [31:0] sel_7409;  // int32
  wire signed [31:0] sel_7410;  // int32
  wire signed [31:0] sel_7411;  // int32
  wire signed [31:0] sel_7412;  // int32
  wire signed [31:0] sel_7413;  // int32
  wire signed [31:0] s_454;  // int32
  wire signed [31:0] sel_1_1377;  // int32
  wire signed [31:0] sel_7414;  // int32
  wire signed [31:0] sel_1_1378;  // int32
  wire signed [31:0] sel_1_1379;  // int32
  wire signed [31:0] sel_1_1380;  // int32
  wire signed [31:0] sel_7415;  // int32
  wire signed [31:0] sel_1_1381;  // int32
  wire signed [31:0] sel_7416;  // int32
  wire signed [31:0] sel_7417;  // int32
  reg signed [31:0] sel_1_1382;  // int32
  wire tmp_329;
  wire sel_7418;
  wire sel_7419;
  wire sel_7420;
  wire sel_7421;
  wire sel_7422;
  wire sel_7423;
  wire sel_7424;
  wire sel_7425;
  wire sel_7426;
  wire sel_7427;
  wire sel_7428;
  wire sel_7429;
  wire sel_7430;
  wire sel_7431;
  wire sel_7432;
  wire s_455;
  wire sel_2_1329;
  wire sel_7433;
  wire sel_2_1330;
  wire sel_2_1331;
  wire sel_2_1332;
  wire sel_7434;
  wire sel_2_1333;
  wire sel_7435;
  wire sel_7436;
  reg  sel_2_1334;
  reg  [11:0] cont_bits_12_21;  // boolean [12]
  wire signed [31:0] sel_7437;  // int32
  wire signed [31:0] sel_7438;  // int32
  wire signed [31:0] sel_7439;  // int32
  wire signed [31:0] sel_7440;  // int32
  wire signed [31:0] sel_7441;  // int32
  wire signed [31:0] sel_7442;  // int32
  wire signed [31:0] sel_7443;  // int32
  wire signed [31:0] sel_7444;  // int32
  wire signed [31:0] sel_7445;  // int32
  wire signed [31:0] sel_7446;  // int32
  wire signed [31:0] sel_7447;  // int32
  wire signed [31:0] sel_7448;  // int32
  wire signed [31:0] sel_7449;  // int32
  wire signed [31:0] sel_7450;  // int32
  wire signed [31:0] sel_7451;  // int32
  wire signed [31:0] s_456;  // int32
  wire signed [31:0] sel_1_1383;  // int32
  wire signed [31:0] sel_7452;  // int32
  wire signed [31:0] sel_1_1384;  // int32
  wire signed [31:0] sel_1_1385;  // int32
  wire signed [31:0] sel_1_1386;  // int32
  wire signed [31:0] sel_7453;  // int32
  wire signed [31:0] sel_1_1387;  // int32
  wire signed [31:0] sel_7454;  // int32
  wire signed [31:0] sel_7455;  // int32
  reg signed [31:0] sel_1_1388;  // int32
  wire tmp_330;
  wire sel_7456;
  wire sel_7457;
  wire sel_7458;
  wire sel_7459;
  wire sel_7460;
  wire sel_7461;
  wire sel_7462;
  wire sel_7463;
  wire sel_7464;
  wire sel_7465;
  wire sel_7466;
  wire sel_7467;
  wire sel_7468;
  wire sel_7469;
  wire sel_7470;
  wire s_457;
  wire sel_2_1335;
  wire sel_7471;
  wire sel_2_1336;
  wire sel_2_1337;
  wire sel_2_1338;
  wire sel_7472;
  wire sel_2_1339;
  wire sel_7473;
  wire sel_7474;
  reg  sel_2_1340;
  reg  [11:0] cont_bits_12_22;  // boolean [12]
  wire signed [31:0] sel_7475;  // int32
  wire signed [31:0] sel_7476;  // int32
  wire signed [31:0] sel_7477;  // int32
  wire signed [31:0] sel_7478;  // int32
  wire signed [31:0] sel_7479;  // int32
  wire signed [31:0] sel_7480;  // int32
  wire signed [31:0] sel_7481;  // int32
  wire signed [31:0] sel_7482;  // int32
  wire signed [31:0] sel_7483;  // int32
  wire signed [31:0] sel_7484;  // int32
  wire signed [31:0] sel_7485;  // int32
  wire signed [31:0] sel_7486;  // int32
  wire signed [31:0] sel_7487;  // int32
  wire signed [31:0] sel_7488;  // int32
  wire signed [31:0] sel_7489;  // int32
  wire signed [31:0] s_458;  // int32
  wire signed [31:0] sel_1_1389;  // int32
  wire signed [31:0] sel_7490;  // int32
  wire signed [31:0] sel_1_1390;  // int32
  wire signed [31:0] sel_1_1391;  // int32
  wire signed [31:0] sel_1_1392;  // int32
  wire signed [31:0] sel_7491;  // int32
  wire signed [31:0] sel_1_1393;  // int32
  wire signed [31:0] sel_7492;  // int32
  wire signed [31:0] sel_7493;  // int32
  reg signed [31:0] sel_1_1394;  // int32
  wire tmp_331;
  wire sel_7494;
  wire sel_7495;
  wire sel_7496;
  wire sel_7497;
  wire sel_7498;
  wire sel_7499;
  wire sel_7500;
  wire sel_7501;
  wire sel_7502;
  wire sel_7503;
  wire sel_7504;
  wire sel_7505;
  wire sel_7506;
  wire sel_7507;
  wire sel_7508;
  wire s_459;
  wire sel_2_1341;
  wire sel_7509;
  wire sel_2_1342;
  wire sel_2_1343;
  wire sel_2_1344;
  wire sel_7510;
  wire sel_2_1345;
  wire sel_7511;
  wire sel_7512;
  reg  sel_2_1346;
  reg  [11:0] cont_bits_12_23;  // boolean [12]
  wire signed [31:0] sel_7513;  // int32
  wire signed [31:0] sel_7514;  // int32
  wire signed [31:0] sel_7515;  // int32
  wire signed [31:0] sel_7516;  // int32
  wire signed [31:0] sel_7517;  // int32
  wire signed [31:0] sel_7518;  // int32
  wire signed [31:0] sel_7519;  // int32
  wire signed [31:0] sel_7520;  // int32
  wire signed [31:0] sel_7521;  // int32
  wire signed [31:0] sel_7522;  // int32
  wire signed [31:0] sel_7523;  // int32
  wire signed [31:0] sel_7524;  // int32
  wire signed [31:0] sel_7525;  // int32
  wire signed [31:0] sel_7526;  // int32
  wire signed [31:0] sel_7527;  // int32
  wire signed [31:0] s_460;  // int32
  wire signed [31:0] sel_1_1395;  // int32
  wire signed [31:0] sel_7528;  // int32
  wire signed [31:0] sel_1_1396;  // int32
  wire signed [31:0] sel_1_1397;  // int32
  wire signed [31:0] sel_1_1398;  // int32
  wire signed [31:0] sel_7529;  // int32
  wire signed [31:0] sel_1_1399;  // int32
  wire signed [31:0] sel_7530;  // int32
  wire signed [31:0] sel_7531;  // int32
  reg signed [31:0] sel_1_1400;  // int32
  wire tmp_332;
  wire sel_7532;
  wire sel_7533;
  wire sel_7534;
  wire sel_7535;
  wire sel_7536;
  wire sel_7537;
  wire sel_7538;
  wire sel_7539;
  wire sel_7540;
  wire sel_7541;
  wire sel_7542;
  wire sel_7543;
  wire sel_7544;
  wire sel_7545;
  wire sel_7546;
  wire s_461;
  wire sel_2_1347;
  wire sel_7547;
  wire sel_2_1348;
  wire sel_2_1349;
  wire sel_2_1350;
  wire sel_7548;
  wire sel_2_1351;
  wire sel_7549;
  wire sel_7550;
  reg  sel_2_1352;
  reg  [11:0] cont_bits_12_24;  // boolean [12]
  wire signed [31:0] sel_7551;  // int32
  wire signed [31:0] sel_7552;  // int32
  wire signed [31:0] sel_7553;  // int32
  wire signed [31:0] sel_7554;  // int32
  wire signed [31:0] sel_7555;  // int32
  wire signed [31:0] sel_7556;  // int32
  wire signed [31:0] sel_7557;  // int32
  wire signed [31:0] sel_7558;  // int32
  wire signed [31:0] sel_7559;  // int32
  wire signed [31:0] sel_7560;  // int32
  wire signed [31:0] sel_7561;  // int32
  wire signed [31:0] sel_7562;  // int32
  wire signed [31:0] sel_7563;  // int32
  wire signed [31:0] sel_7564;  // int32
  wire signed [31:0] sel_7565;  // int32
  wire signed [31:0] s_462;  // int32
  wire signed [31:0] sel_1_1401;  // int32
  wire signed [31:0] sel_7566;  // int32
  wire signed [31:0] sel_1_1402;  // int32
  wire signed [31:0] sel_1_1403;  // int32
  wire signed [31:0] sel_1_1404;  // int32
  wire signed [31:0] sel_7567;  // int32
  wire signed [31:0] sel_1_1405;  // int32
  wire signed [31:0] sel_7568;  // int32
  wire signed [31:0] sel_7569;  // int32
  reg signed [31:0] sel_1_1406;  // int32
  wire tmp_333;
  wire sel_7570;
  wire sel_7571;
  wire sel_7572;
  wire sel_7573;
  wire sel_7574;
  wire sel_7575;
  wire sel_7576;
  wire sel_7577;
  wire sel_7578;
  wire sel_7579;
  wire sel_7580;
  wire sel_7581;
  wire sel_7582;
  wire sel_7583;
  wire sel_7584;
  wire s_463;
  wire sel_2_1353;
  wire sel_7585;
  wire sel_2_1354;
  wire sel_2_1355;
  wire sel_2_1356;
  wire sel_7586;
  wire sel_2_1357;
  wire sel_7587;
  wire sel_7588;
  reg  sel_2_1358;
  reg  [11:0] cont_bits_12_25;  // boolean [12]
  wire signed [31:0] sel_7589;  // int32
  wire signed [31:0] sel_7590;  // int32
  wire signed [31:0] sel_7591;  // int32
  wire signed [31:0] sel_7592;  // int32
  wire signed [31:0] sel_7593;  // int32
  wire signed [31:0] sel_7594;  // int32
  wire signed [31:0] sel_7595;  // int32
  wire signed [31:0] sel_7596;  // int32
  wire signed [31:0] sel_7597;  // int32
  wire signed [31:0] sel_7598;  // int32
  wire signed [31:0] sel_7599;  // int32
  wire signed [31:0] sel_7600;  // int32
  wire signed [31:0] sel_7601;  // int32
  wire signed [31:0] sel_7602;  // int32
  wire signed [31:0] sel_7603;  // int32
  wire signed [31:0] s_464;  // int32
  wire signed [31:0] sel_1_1407;  // int32
  wire signed [31:0] sel_7604;  // int32
  wire signed [31:0] sel_1_1408;  // int32
  wire signed [31:0] sel_1_1409;  // int32
  wire signed [31:0] sel_1_1410;  // int32
  wire signed [31:0] sel_7605;  // int32
  wire signed [31:0] sel_1_1411;  // int32
  wire signed [31:0] sel_7606;  // int32
  wire signed [31:0] sel_7607;  // int32
  reg signed [31:0] sel_1_1412;  // int32
  wire tmp_334;
  wire sel_7608;
  wire sel_7609;
  wire sel_7610;
  wire sel_7611;
  wire sel_7612;
  wire sel_7613;
  wire sel_7614;
  wire sel_7615;
  wire sel_7616;
  wire sel_7617;
  wire sel_7618;
  wire sel_7619;
  wire sel_7620;
  wire sel_7621;
  wire sel_7622;
  wire s_465;
  wire sel_2_1359;
  wire sel_7623;
  wire sel_2_1360;
  wire sel_2_1361;
  wire sel_2_1362;
  wire sel_7624;
  wire sel_2_1363;
  wire sel_7625;
  wire sel_7626;
  reg  sel_2_1364;
  reg  [11:0] cont_bits_12_26;  // boolean [12]
  wire signed [31:0] sel_7627;  // int32
  wire signed [31:0] sel_7628;  // int32
  wire signed [31:0] sel_7629;  // int32
  wire signed [31:0] sel_7630;  // int32
  wire signed [31:0] sel_7631;  // int32
  wire signed [31:0] sel_7632;  // int32
  wire signed [31:0] sel_7633;  // int32
  wire signed [31:0] sel_7634;  // int32
  wire signed [31:0] sel_7635;  // int32
  wire signed [31:0] sel_7636;  // int32
  wire signed [31:0] sel_7637;  // int32
  wire signed [31:0] sel_7638;  // int32
  wire signed [31:0] sel_7639;  // int32
  wire signed [31:0] sel_7640;  // int32
  wire signed [31:0] sel_7641;  // int32
  wire signed [31:0] s_466;  // int32
  wire signed [31:0] sel_1_1413;  // int32
  wire signed [31:0] sel_7642;  // int32
  wire signed [31:0] sel_1_1414;  // int32
  wire signed [31:0] sel_1_1415;  // int32
  wire signed [31:0] sel_1_1416;  // int32
  wire signed [31:0] sel_7643;  // int32
  wire signed [31:0] sel_1_1417;  // int32
  wire signed [31:0] sel_7644;  // int32
  wire signed [31:0] sel_7645;  // int32
  reg signed [31:0] sel_1_1418;  // int32
  wire cont_bits_12_27;
  wire sel_1_1419;
  wire [11:0] cont_bits_15;  // boolean [12]
  wire functionOutput_0_15;
  wire functionOutput_1_15;
  wire functionOutput_2_15;
  wire functionOutput_3_15;
  wire functionOutput_4_15;
  wire functionOutput_5_15;
  wire functionOutput_6_15;
  wire functionOutput_7_15;
  wire functionOutput_8_15;
  wire functionOutput_9_15;
  wire functionOutput_10_15;
  wire functionOutput_11_15;
  wire [11:0] functionOutput_26;  // boolean [12]
  wire signed [31:0] sel_7646;  // int32
  wire signed [31:0] sel_7647;  // int32
  wire signed [31:0] sel_7648;  // int32
  wire signed [31:0] sel_7649;  // int32
  wire signed [31:0] sel_7650;  // int32
  wire signed [31:0] sel_7651;  // int32
  wire signed [31:0] sel_7652;  // int32
  wire signed [31:0] sel_7653;  // int32
  wire signed [31:0] sel_7654;  // int32
  wire signed [31:0] sel_7655;  // int32
  wire signed [31:0] sel_7656;  // int32
  wire signed [31:0] sel_7657;  // int32
  wire signed [31:0] sel_7658;  // int32
  wire signed [31:0] sel_7659;  // int32
  wire signed [31:0] sel_7660;  // int32
  wire signed [31:0] s_467;  // int32
  wire signed [31:0] sel_1_1420;  // int32
  wire signed [31:0] sel_1_1421;  // int32
  wire signed [31:0] sel_1_1422;  // int32
  wire signed [31:0] sel_7661;  // int32
  wire signed [31:0] sel_1_1423;  // int32
  wire signed [31:0] sel_7662;  // int32
  wire signed [31:0] sel_7663;  // int32
  reg signed [31:0] sel_1_1424;  // int32
  wire tmp_335;
  wire sel_7664;
  wire sel_7665;
  wire sel_7666;
  wire sel_7667;
  wire sel_7668;
  wire sel_7669;
  wire sel_7670;
  wire sel_7671;
  wire sel_7672;
  wire sel_7673;
  wire sel_7674;
  wire sel_7675;
  wire sel_7676;
  wire sel_7677;
  wire sel_7678;
  wire s_468;
  wire sel_2_1365;
  wire sel_2_1366;
  wire sel_2_1367;
  wire sel_7679;
  wire sel_2_1368;
  wire sel_7680;
  wire sel_7681;
  reg  sel_2_1369;
  reg  [11:0] cont_bits_16;  // boolean [12]
  wire signed [31:0] sel_7682;  // int32
  wire signed [31:0] sel_7683;  // int32
  wire signed [31:0] sel_7684;  // int32
  wire signed [31:0] sel_7685;  // int32
  wire signed [31:0] sel_7686;  // int32
  wire signed [31:0] sel_7687;  // int32
  wire signed [31:0] sel_7688;  // int32
  wire signed [31:0] sel_7689;  // int32
  wire signed [31:0] sel_7690;  // int32
  wire signed [31:0] sel_7691;  // int32
  wire signed [31:0] sel_7692;  // int32
  wire signed [31:0] sel_7693;  // int32
  wire signed [31:0] sel_7694;  // int32
  wire signed [31:0] sel_7695;  // int32
  wire signed [31:0] sel_7696;  // int32
  wire signed [31:0] s_469;  // int32
  wire signed [31:0] sel_1_1425;  // int32
  wire signed [31:0] sel_1_1426;  // int32
  wire signed [31:0] sel_1_1427;  // int32
  wire signed [31:0] sel_7697;  // int32
  wire signed [31:0] sel_1_1428;  // int32
  wire signed [31:0] sel_7698;  // int32
  wire signed [31:0] sel_7699;  // int32
  reg signed [31:0] sel_1_1429;  // int32
  wire tmp_336;
  wire sel_7700;
  wire sel_7701;
  wire sel_7702;
  wire sel_7703;
  wire sel_7704;
  wire sel_7705;
  wire sel_7706;
  wire sel_7707;
  wire sel_7708;
  wire sel_7709;
  wire sel_7710;
  wire sel_7711;
  wire sel_7712;
  wire sel_7713;
  wire sel_7714;
  wire s_470;
  wire sel_2_1370;
  wire sel_2_1371;
  wire sel_2_1372;
  wire sel_7715;
  wire sel_2_1373;
  wire sel_7716;
  wire sel_7717;
  reg  sel_2_1374;
  reg  [11:0] cont_bits_17;  // boolean [12]
  wire signed [31:0] sel_7718;  // int32
  wire signed [31:0] sel_7719;  // int32
  wire signed [31:0] sel_7720;  // int32
  wire signed [31:0] sel_7721;  // int32
  wire signed [31:0] sel_7722;  // int32
  wire signed [31:0] sel_7723;  // int32
  wire signed [31:0] sel_7724;  // int32
  wire signed [31:0] sel_7725;  // int32
  wire signed [31:0] sel_7726;  // int32
  wire signed [31:0] sel_7727;  // int32
  wire signed [31:0] sel_7728;  // int32
  wire signed [31:0] sel_7729;  // int32
  wire signed [31:0] sel_7730;  // int32
  wire signed [31:0] sel_7731;  // int32
  wire signed [31:0] sel_7732;  // int32
  wire signed [31:0] s_471;  // int32
  wire signed [31:0] sel_1_1430;  // int32
  wire signed [31:0] sel_1_1431;  // int32
  wire signed [31:0] sel_1_1432;  // int32
  wire signed [31:0] sel_7733;  // int32
  wire signed [31:0] sel_1_1433;  // int32
  wire signed [31:0] sel_7734;  // int32
  wire signed [31:0] sel_7735;  // int32
  reg signed [31:0] sel_1_1434;  // int32
  wire tmp_337;
  wire sel_7736;
  wire sel_7737;
  wire sel_7738;
  wire sel_7739;
  wire sel_7740;
  wire sel_7741;
  wire sel_7742;
  wire sel_7743;
  wire sel_7744;
  wire sel_7745;
  wire sel_7746;
  wire sel_7747;
  wire sel_7748;
  wire sel_7749;
  wire sel_7750;
  wire s_472;
  wire sel_2_1375;
  wire sel_2_1376;
  wire sel_2_1377;
  wire sel_7751;
  wire sel_2_1378;
  wire sel_7752;
  wire sel_7753;
  reg  sel_2_1379;
  reg  [11:0] cont_bits_18;  // boolean [12]
  wire signed [31:0] sel_7754;  // int32
  wire signed [31:0] sel_7755;  // int32
  wire signed [31:0] sel_7756;  // int32
  wire signed [31:0] sel_7757;  // int32
  wire signed [31:0] sel_7758;  // int32
  wire signed [31:0] sel_7759;  // int32
  wire signed [31:0] sel_7760;  // int32
  wire signed [31:0] sel_7761;  // int32
  wire signed [31:0] sel_7762;  // int32
  wire signed [31:0] sel_7763;  // int32
  wire signed [31:0] sel_7764;  // int32
  wire signed [31:0] sel_7765;  // int32
  wire signed [31:0] sel_7766;  // int32
  wire signed [31:0] sel_7767;  // int32
  wire signed [31:0] sel_7768;  // int32
  wire signed [31:0] s_473;  // int32
  wire signed [31:0] sel_1_1435;  // int32
  wire signed [31:0] sel_1_1436;  // int32
  wire signed [31:0] sel_1_1437;  // int32
  wire signed [31:0] sel_7769;  // int32
  wire signed [31:0] sel_1_1438;  // int32
  wire signed [31:0] sel_7770;  // int32
  wire signed [31:0] sel_7771;  // int32
  reg signed [31:0] sel_1_1439;  // int32
  wire tmp_338;
  wire sel_7772;
  wire sel_7773;
  wire sel_7774;
  wire sel_7775;
  wire sel_7776;
  wire sel_7777;
  wire sel_7778;
  wire sel_7779;
  wire sel_7780;
  wire sel_7781;
  wire sel_7782;
  wire sel_7783;
  wire sel_7784;
  wire sel_7785;
  wire sel_7786;
  wire s_474;
  wire sel_2_1380;
  wire sel_2_1381;
  wire sel_2_1382;
  wire sel_7787;
  wire sel_2_1383;
  wire sel_7788;
  wire sel_7789;
  reg  sel_2_1384;
  reg  [11:0] cont_bits_19;  // boolean [12]
  wire signed [31:0] sel_7790;  // int32
  wire signed [31:0] sel_7791;  // int32
  wire signed [31:0] sel_7792;  // int32
  wire signed [31:0] sel_7793;  // int32
  wire signed [31:0] sel_7794;  // int32
  wire signed [31:0] sel_7795;  // int32
  wire signed [31:0] sel_7796;  // int32
  wire signed [31:0] sel_7797;  // int32
  wire signed [31:0] sel_7798;  // int32
  wire signed [31:0] sel_7799;  // int32
  wire signed [31:0] sel_7800;  // int32
  wire signed [31:0] sel_7801;  // int32
  wire signed [31:0] sel_7802;  // int32
  wire signed [31:0] sel_7803;  // int32
  wire signed [31:0] sel_7804;  // int32
  wire signed [31:0] s_475;  // int32
  wire signed [31:0] sel_1_1440;  // int32
  wire signed [31:0] sel_1_1441;  // int32
  wire signed [31:0] sel_1_1442;  // int32
  wire signed [31:0] sel_7805;  // int32
  wire signed [31:0] sel_1_1443;  // int32
  wire signed [31:0] sel_7806;  // int32
  wire signed [31:0] sel_7807;  // int32
  reg signed [31:0] sel_1_1444;  // int32
  wire tmp_339;
  wire sel_7808;
  wire sel_7809;
  wire sel_7810;
  wire sel_7811;
  wire sel_7812;
  wire sel_7813;
  wire sel_7814;
  wire sel_7815;
  wire sel_7816;
  wire sel_7817;
  wire sel_7818;
  wire sel_7819;
  wire sel_7820;
  wire sel_7821;
  wire sel_7822;
  wire s_476;
  wire sel_2_1385;
  wire sel_2_1386;
  wire sel_2_1387;
  wire sel_7823;
  wire sel_2_1388;
  wire sel_7824;
  wire sel_7825;
  reg  sel_2_1389;
  reg  [11:0] cont_bits_20;  // boolean [12]
  wire signed [31:0] sel_7826;  // int32
  wire signed [31:0] sel_7827;  // int32
  wire signed [31:0] sel_7828;  // int32
  wire signed [31:0] sel_7829;  // int32
  wire signed [31:0] sel_7830;  // int32
  wire signed [31:0] sel_7831;  // int32
  wire signed [31:0] sel_7832;  // int32
  wire signed [31:0] sel_7833;  // int32
  wire signed [31:0] sel_7834;  // int32
  wire signed [31:0] sel_7835;  // int32
  wire signed [31:0] sel_7836;  // int32
  wire signed [31:0] sel_7837;  // int32
  wire signed [31:0] sel_7838;  // int32
  wire signed [31:0] sel_7839;  // int32
  wire signed [31:0] sel_7840;  // int32
  wire signed [31:0] s_477;  // int32
  wire signed [31:0] sel_1_1445;  // int32
  wire signed [31:0] sel_1_1446;  // int32
  wire signed [31:0] sel_1_1447;  // int32
  wire signed [31:0] sel_7841;  // int32
  wire signed [31:0] sel_1_1448;  // int32
  wire signed [31:0] sel_7842;  // int32
  wire signed [31:0] sel_7843;  // int32
  reg signed [31:0] sel_1_1449;  // int32
  wire tmp_340;
  wire sel_7844;
  wire sel_7845;
  wire sel_7846;
  wire sel_7847;
  wire sel_7848;
  wire sel_7849;
  wire sel_7850;
  wire sel_7851;
  wire sel_7852;
  wire sel_7853;
  wire sel_7854;
  wire sel_7855;
  wire sel_7856;
  wire sel_7857;
  wire sel_7858;
  wire s_478;
  wire sel_2_1390;
  wire sel_2_1391;
  wire sel_2_1392;
  wire sel_7859;
  wire sel_2_1393;
  wire sel_7860;
  wire sel_7861;
  reg  sel_2_1394;
  reg  [11:0] cont_bits_23;  // boolean [12]
  wire signed [31:0] sel_7862;  // int32
  wire signed [31:0] sel_7863;  // int32
  wire signed [31:0] sel_7864;  // int32
  wire signed [31:0] sel_7865;  // int32
  wire signed [31:0] sel_7866;  // int32
  wire signed [31:0] sel_7867;  // int32
  wire signed [31:0] sel_7868;  // int32
  wire signed [31:0] sel_7869;  // int32
  wire signed [31:0] sel_7870;  // int32
  wire signed [31:0] sel_7871;  // int32
  wire signed [31:0] sel_7872;  // int32
  wire signed [31:0] sel_7873;  // int32
  wire signed [31:0] sel_7874;  // int32
  wire signed [31:0] sel_7875;  // int32
  wire signed [31:0] sel_7876;  // int32
  wire signed [31:0] s_479;  // int32
  wire signed [31:0] sel_1_1450;  // int32
  wire signed [31:0] sel_1_1451;  // int32
  wire signed [31:0] sel_1_1452;  // int32
  wire signed [31:0] sel_7877;  // int32
  wire signed [31:0] sel_1_1453;  // int32
  wire signed [31:0] sel_7878;  // int32
  wire signed [31:0] sel_7879;  // int32
  reg signed [31:0] sel_1_1454;  // int32
  wire tmp_341;
  wire sel_7880;
  wire sel_7881;
  wire sel_7882;
  wire sel_7883;
  wire sel_7884;
  wire sel_7885;
  wire sel_7886;
  wire sel_7887;
  wire sel_7888;
  wire sel_7889;
  wire sel_7890;
  wire sel_7891;
  wire sel_7892;
  wire sel_7893;
  wire sel_7894;
  wire s_480;
  wire sel_2_1395;
  wire sel_2_1396;
  wire sel_2_1397;
  wire sel_7895;
  wire sel_2_1398;
  wire sel_7896;
  wire sel_7897;
  reg  sel_2_1399;
  reg  [11:0] cont_bits_24;  // boolean [12]
  wire signed [31:0] sel_7898;  // int32
  wire signed [31:0] sel_7899;  // int32
  wire signed [31:0] sel_7900;  // int32
  wire signed [31:0] sel_7901;  // int32
  wire signed [31:0] sel_7902;  // int32
  wire signed [31:0] sel_7903;  // int32
  wire signed [31:0] sel_7904;  // int32
  wire signed [31:0] sel_7905;  // int32
  wire signed [31:0] sel_7906;  // int32
  wire signed [31:0] sel_7907;  // int32
  wire signed [31:0] sel_7908;  // int32
  wire signed [31:0] sel_7909;  // int32
  wire signed [31:0] sel_7910;  // int32
  wire signed [31:0] sel_7911;  // int32
  wire signed [31:0] sel_7912;  // int32
  wire signed [31:0] s_481;  // int32
  wire signed [31:0] sel_1_1455;  // int32
  wire signed [31:0] sel_1_1456;  // int32
  wire signed [31:0] sel_1_1457;  // int32
  wire signed [31:0] sel_7913;  // int32
  wire signed [31:0] sel_1_1458;  // int32
  wire signed [31:0] sel_7914;  // int32
  wire signed [31:0] sel_7915;  // int32
  reg signed [31:0] sel_1_1459;  // int32
  wire tmp_342;
  wire sel_7916;
  wire sel_7917;
  wire sel_7918;
  wire sel_7919;
  wire sel_7920;
  wire sel_7921;
  wire sel_7922;
  wire sel_7923;
  wire sel_7924;
  wire sel_7925;
  wire sel_7926;
  wire sel_7927;
  wire sel_7928;
  wire sel_7929;
  wire sel_7930;
  wire s_482;
  wire sel_2_1400;
  wire sel_2_1401;
  wire sel_2_1402;
  wire sel_7931;
  wire sel_2_1403;
  wire sel_7932;
  wire sel_7933;
  reg  sel_2_1404;
  reg  [11:0] cont_bits_25;  // boolean [12]
  wire signed [31:0] sel_7934;  // int32
  wire signed [31:0] sel_7935;  // int32
  wire signed [31:0] sel_7936;  // int32
  wire signed [31:0] sel_7937;  // int32
  wire signed [31:0] sel_7938;  // int32
  wire signed [31:0] sel_7939;  // int32
  wire signed [31:0] sel_7940;  // int32
  wire signed [31:0] sel_7941;  // int32
  wire signed [31:0] sel_7942;  // int32
  wire signed [31:0] sel_7943;  // int32
  wire signed [31:0] sel_7944;  // int32
  wire signed [31:0] sel_7945;  // int32
  wire signed [31:0] sel_7946;  // int32
  wire signed [31:0] sel_7947;  // int32
  wire signed [31:0] sel_7948;  // int32
  wire signed [31:0] s_483;  // int32
  wire signed [31:0] sel_1_1460;  // int32
  wire signed [31:0] sel_1_1461;  // int32
  wire signed [31:0] sel_1_1462;  // int32
  wire signed [31:0] sel_7949;  // int32
  wire signed [31:0] sel_1_1463;  // int32
  wire signed [31:0] sel_7950;  // int32
  wire signed [31:0] sel_7951;  // int32
  reg signed [31:0] sel_1_1464;  // int32
  wire tmp_343;
  wire sel_7952;
  wire sel_7953;
  wire sel_7954;
  wire sel_7955;
  wire sel_7956;
  wire sel_7957;
  wire sel_7958;
  wire sel_7959;
  wire sel_7960;
  wire sel_7961;
  wire sel_7962;
  wire sel_7963;
  wire sel_7964;
  wire sel_7965;
  wire sel_7966;
  wire s_484;
  wire sel_2_1405;
  wire sel_2_1406;
  wire sel_2_1407;
  wire sel_7967;
  wire sel_2_1408;
  wire sel_7968;
  wire sel_7969;
  reg  sel_2_1409;
  reg  [11:0] cont_bits_26;  // boolean [12]
  wire signed [31:0] sel_7970;  // int32
  wire signed [31:0] sel_7971;  // int32
  wire signed [31:0] sel_7972;  // int32
  wire signed [31:0] sel_7973;  // int32
  wire signed [31:0] sel_7974;  // int32
  wire signed [31:0] sel_7975;  // int32
  wire signed [31:0] sel_7976;  // int32
  wire signed [31:0] sel_7977;  // int32
  wire signed [31:0] sel_7978;  // int32
  wire signed [31:0] sel_7979;  // int32
  wire signed [31:0] sel_7980;  // int32
  wire signed [31:0] sel_7981;  // int32
  wire signed [31:0] sel_7982;  // int32
  wire signed [31:0] sel_7983;  // int32
  wire signed [31:0] sel_7984;  // int32
  wire signed [31:0] s_485;  // int32
  wire signed [31:0] sel_1_1465;  // int32
  wire signed [31:0] sel_1_1466;  // int32
  wire signed [31:0] sel_1_1467;  // int32
  wire signed [31:0] sel_7985;  // int32
  wire signed [31:0] sel_1_1468;  // int32
  wire signed [31:0] sel_7986;  // int32
  wire signed [31:0] sel_7987;  // int32
  reg signed [31:0] sel_1_1469;  // int32
  wire tmp_344;
  wire sel_7988;
  wire sel_7989;
  wire sel_7990;
  wire sel_7991;
  wire sel_7992;
  wire sel_7993;
  wire sel_7994;
  wire sel_7995;
  wire sel_7996;
  wire sel_7997;
  wire sel_7998;
  wire sel_7999;
  wire sel_8000;
  wire sel_8001;
  wire sel_8002;
  wire s_486;
  wire sel_2_1410;
  wire sel_2_1411;
  wire sel_2_1412;
  wire sel_8003;
  wire sel_2_1413;
  wire sel_8004;
  wire sel_8005;
  reg  sel_2_1414;
  reg  [11:0] cont_bits_27;  // boolean [12]
  wire signed [31:0] sel_8006;  // int32
  wire signed [31:0] sel_8007;  // int32
  wire signed [31:0] sel_8008;  // int32
  wire signed [31:0] sel_8009;  // int32
  wire signed [31:0] sel_8010;  // int32
  wire signed [31:0] sel_8011;  // int32
  wire signed [31:0] sel_8012;  // int32
  wire signed [31:0] sel_8013;  // int32
  wire signed [31:0] sel_8014;  // int32
  wire signed [31:0] sel_8015;  // int32
  wire signed [31:0] sel_8016;  // int32
  wire signed [31:0] sel_8017;  // int32
  wire signed [31:0] sel_8018;  // int32
  wire signed [31:0] sel_8019;  // int32
  wire signed [31:0] sel_8020;  // int32
  wire signed [31:0] s_487;  // int32
  wire signed [31:0] sel_1_1470;  // int32
  wire signed [31:0] sel_1_1471;  // int32
  wire signed [31:0] sel_1_1472;  // int32
  wire signed [31:0] sel_8021;  // int32
  wire signed [31:0] sel_1_1473;  // int32
  wire signed [31:0] sel_8022;  // int32
  wire signed [31:0] sel_8023;  // int32
  reg signed [31:0] sel_1_1474;  // int32
  wire tmp_345;
  wire sel_8024;
  wire sel_8025;
  wire sel_8026;
  wire sel_8027;
  wire sel_8028;
  wire sel_8029;
  wire sel_8030;
  wire sel_8031;
  wire sel_8032;
  wire sel_8033;
  wire sel_8034;
  wire sel_8035;
  wire sel_8036;
  wire sel_8037;
  wire sel_8038;
  wire s_488;
  wire sel_2_1415;
  wire sel_2_1416;
  wire sel_2_1417;
  wire sel_8039;
  wire sel_2_1418;
  wire sel_8040;
  wire sel_8041;
  reg  sel_2_1419;
  reg  [11:0] cont_bits_28;  // boolean [12]
  wire signed [31:0] sel_8042;  // int32
  wire signed [31:0] sel_8043;  // int32
  wire signed [31:0] sel_8044;  // int32
  wire signed [31:0] sel_8045;  // int32
  wire signed [31:0] sel_8046;  // int32
  wire signed [31:0] sel_8047;  // int32
  wire signed [31:0] sel_8048;  // int32
  wire signed [31:0] sel_8049;  // int32
  wire signed [31:0] sel_8050;  // int32
  wire signed [31:0] sel_8051;  // int32
  wire signed [31:0] sel_8052;  // int32
  wire signed [31:0] sel_8053;  // int32
  wire signed [31:0] sel_8054;  // int32
  wire signed [31:0] sel_8055;  // int32
  wire signed [31:0] sel_8056;  // int32
  wire signed [31:0] s_489;  // int32
  wire signed [31:0] sel_1_1475;  // int32
  wire signed [31:0] sel_1_1476;  // int32
  wire signed [31:0] sel_1_1477;  // int32
  wire signed [31:0] sel_8057;  // int32
  wire signed [31:0] sel_1_1478;  // int32
  wire signed [31:0] sel_8058;  // int32
  wire signed [31:0] sel_8059;  // int32
  reg signed [31:0] sel_1_1479;  // int32
  wire tmp_346;
  wire sel_8060;
  wire sel_8061;
  wire sel_8062;
  wire sel_8063;
  wire sel_8064;
  wire sel_8065;
  wire sel_8066;
  wire sel_8067;
  wire sel_8068;
  wire sel_8069;
  wire sel_8070;
  wire sel_8071;
  wire sel_8072;
  wire sel_8073;
  wire sel_8074;
  wire s_490;
  wire sel_2_1420;
  wire sel_2_1421;
  wire sel_2_1422;
  wire sel_8075;
  wire sel_2_1423;
  wire sel_8076;
  wire sel_8077;
  reg  sel_2_1424;
  reg  [11:0] cont_bits_29;  // boolean [12]
  wire signed [31:0] sel_8078;  // int32
  wire signed [31:0] sel_8079;  // int32
  wire signed [31:0] sel_8080;  // int32
  wire signed [31:0] sel_8081;  // int32
  wire signed [31:0] sel_8082;  // int32
  wire signed [31:0] sel_8083;  // int32
  wire signed [31:0] sel_8084;  // int32
  wire signed [31:0] sel_8085;  // int32
  wire signed [31:0] sel_8086;  // int32
  wire signed [31:0] sel_8087;  // int32
  wire signed [31:0] sel_8088;  // int32
  wire signed [31:0] sel_8089;  // int32
  wire signed [31:0] sel_8090;  // int32
  wire signed [31:0] sel_8091;  // int32
  wire signed [31:0] sel_8092;  // int32
  wire signed [31:0] s_491;  // int32
  wire signed [31:0] sel_1_1480;  // int32
  wire signed [31:0] sel_1_1481;  // int32
  wire signed [31:0] sel_1_1482;  // int32
  wire signed [31:0] sel_8093;  // int32
  wire signed [31:0] sel_1_1483;  // int32
  wire signed [31:0] sel_8094;  // int32
  wire signed [31:0] sel_8095;  // int32
  reg signed [31:0] sel_1_1484;  // int32
  wire cont_bits_30;
  wire sel_1_1485;
  wire sel_8096;
  wire sel_8097;
  reg  sel_1_1486;
  wire sel_8098;
  wire sel_8099;
  wire sel_8100;
  wire sel_8101;
  wire sel_8102;
  wire sel_8103;
  wire sel_8104;
  wire sel_8105;
  wire sel_8106;
  wire sel_8107;
  wire sel_8108;
  wire sel_8109;
  wire s_492;
  wire sel_2_1425;
  wire s_493;
  wire sel_2_1426;
  wire s_494;
  wire sel_2_1427;
  wire s_495;
  wire sel_2_1428;
  wire s_496;
  wire sel_2_1429;
  wire s_497;
  wire sel_2_1430;
  wire s_498;
  wire sel_2_1431;
  wire s_499;
  wire sel_2_1432;
  wire sel_8110;
  wire sel_8111;
  wire sel_8112;
  wire s_500;
  wire sel_2_1433;
  wire s_501;
  wire sel_2_1434;
  wire s_502;
  wire sel_2_1435;
  wire s_503;
  wire sel_2_1436;
  wire s_504;
  wire sel_2_1437;
  wire s_505;
  wire sel_2_1438;
  wire s_506;
  wire sel_2_1439;
  wire s_507;
  wire sel_2_1440;
  wire sel_2_1441;
  wire sel_2_1442;
  wire sel_8113;
  wire sel_2_1443;
  wire sel_8114;
  wire sel_8115;
  reg  sel_2_1444;
  wire sel_8116;
  wire sel_8117;
  wire sel_8118;
  wire sel_8119;
  wire sel_8120;
  wire sel_8121;
  wire sel_8122;
  wire sel_8123;
  wire sel_8124;
  wire sel_8125;
  wire sel_8126;
  wire signed [31:0] sel_8127;  // int32
  wire signed [31:0] sel_8128;  // int32
  wire signed [31:0] sel_8129;  // int32
  wire signed [31:0] sel_8130;  // int32
  wire signed [31:0] sel_8131;  // int32
  wire signed [31:0] sel_8132;  // int32
  wire signed [31:0] sel_8133;  // int32
  wire signed [31:0] sel_8134;  // int32
  wire signed [31:0] sel_8135;  // int32
  wire signed [31:0] sel_8136;  // int32
  wire signed [31:0] sel_8137;  // int32
  wire signed [31:0] sel_8138;  // int32
  wire signed [31:0] s_508;  // int32
  wire signed [31:0] sel_1_1487;  // int32
  wire signed [31:0] sel_8139;  // int32
  wire signed [31:0] sel_1_1488;  // int32
  wire signed [31:0] sel_8140;  // int32
  wire signed [31:0] sel_1_1489;  // int32
  wire signed [31:0] sel_8141;  // int32
  wire signed [31:0] sel_1_1490;  // int32
  wire signed [31:0] sel_8142;  // int32
  wire signed [31:0] sel_1_1491;  // int32
  wire signed [31:0] sel_8143;  // int32
  wire signed [31:0] sel_1_1492;  // int32
  wire signed [31:0] sel_8144;  // int32
  wire signed [31:0] sel_1_1493;  // int32
  wire signed [31:0] sel_8145;  // int32
  wire signed [31:0] sel_1_1494;  // int32
  wire signed [31:0] sel_8146;  // int32
  wire signed [31:0] sel_8147;  // int32
  wire signed [31:0] sel_8148;  // int32
  reg signed [31:0] sel_1_1495;  // int32
  wire cont_bits_41_28;
  wire signed [31:0] sel_8149;  // int32
  wire signed [31:0] sel_8150;  // int32
  wire signed [31:0] sel_8151;  // int32
  wire signed [31:0] sel_8152;  // int32
  wire signed [31:0] sel_8153;  // int32
  wire signed [31:0] sel_8154;  // int32
  wire signed [31:0] sel_8155;  // int32
  wire signed [31:0] sel_8156;  // int32
  wire signed [31:0] sel_8157;  // int32
  wire signed [31:0] sel_8158;  // int32
  wire signed [31:0] sel_8159;  // int32
  wire signed [31:0] sel_8160;  // int32
  wire signed [31:0] s_509;  // int32
  wire signed [31:0] sel_1_1496;  // int32
  wire signed [31:0] sel_8161;  // int32
  wire signed [31:0] sel_1_1497;  // int32
  wire signed [31:0] sel_8162;  // int32
  wire signed [31:0] sel_1_1498;  // int32
  wire signed [31:0] sel_8163;  // int32
  wire signed [31:0] sel_1_1499;  // int32
  wire signed [31:0] sel_8164;  // int32
  wire signed [31:0] sel_1_1500;  // int32
  wire signed [31:0] sel_8165;  // int32
  wire signed [31:0] sel_1_1501;  // int32
  wire signed [31:0] sel_8166;  // int32
  wire signed [31:0] sel_1_1502;  // int32
  wire signed [31:0] sel_8167;  // int32
  wire signed [31:0] sel_8168;  // int32
  wire signed [31:0] sel_8169;  // int32
  reg signed [31:0] sel_1_1503;  // int32
  wire cont_bits_42_28;
  wire sel_1_1504;
  wire signed [31:0] sel_8170;  // int32
  wire signed [31:0] sel_8171;  // int32
  wire signed [31:0] sel_8172;  // int32
  wire signed [31:0] sel_8173;  // int32
  wire signed [31:0] sel_8174;  // int32
  wire signed [31:0] sel_8175;  // int32
  wire signed [31:0] sel_8176;  // int32
  wire signed [31:0] sel_8177;  // int32
  wire signed [31:0] sel_8178;  // int32
  wire signed [31:0] sel_8179;  // int32
  wire signed [31:0] sel_8180;  // int32
  wire signed [31:0] sel_8181;  // int32
  wire signed [31:0] s_510;  // int32
  wire signed [31:0] sel_1_1505;  // int32
  wire signed [31:0] sel_8182;  // int32
  wire signed [31:0] sel_1_1506;  // int32
  wire signed [31:0] sel_8183;  // int32
  wire signed [31:0] sel_1_1507;  // int32
  wire signed [31:0] sel_8184;  // int32
  wire signed [31:0] sel_1_1508;  // int32
  wire signed [31:0] sel_8185;  // int32
  wire signed [31:0] sel_1_1509;  // int32
  wire signed [31:0] sel_8186;  // int32
  wire signed [31:0] sel_1_1510;  // int32
  wire signed [31:0] sel_8187;  // int32
  wire signed [31:0] sel_8188;  // int32
  wire signed [31:0] sel_8189;  // int32
  reg signed [31:0] sel_1_1511;  // int32
  wire cont_bits_32_28;
  wire sel_1_1512;
  wire signed [31:0] sel_8190;  // int32
  wire signed [31:0] sel_8191;  // int32
  wire signed [31:0] sel_8192;  // int32
  wire signed [31:0] sel_8193;  // int32
  wire signed [31:0] sel_8194;  // int32
  wire signed [31:0] sel_8195;  // int32
  wire signed [31:0] sel_8196;  // int32
  wire signed [31:0] sel_8197;  // int32
  wire signed [31:0] sel_8198;  // int32
  wire signed [31:0] sel_8199;  // int32
  wire signed [31:0] sel_8200;  // int32
  wire signed [31:0] sel_8201;  // int32
  wire signed [31:0] s_511;  // int32
  wire signed [31:0] sel_1_1513;  // int32
  wire signed [31:0] sel_8202;  // int32
  wire signed [31:0] sel_1_1514;  // int32
  wire signed [31:0] sel_8203;  // int32
  wire signed [31:0] sel_1_1515;  // int32
  wire signed [31:0] sel_8204;  // int32
  wire signed [31:0] sel_1_1516;  // int32
  wire signed [31:0] sel_8205;  // int32
  wire signed [31:0] sel_1_1517;  // int32
  wire signed [31:0] sel_8206;  // int32
  wire signed [31:0] sel_8207;  // int32
  wire signed [31:0] sel_8208;  // int32
  reg signed [31:0] sel_1_1518;  // int32
  wire cont_bits_31_28;
  wire sel_1_1519;
  wire signed [31:0] sel_8209;  // int32
  wire signed [31:0] sel_8210;  // int32
  wire signed [31:0] sel_8211;  // int32
  wire signed [31:0] sel_8212;  // int32
  wire signed [31:0] sel_8213;  // int32
  wire signed [31:0] sel_8214;  // int32
  wire signed [31:0] sel_8215;  // int32
  wire signed [31:0] sel_8216;  // int32
  wire signed [31:0] sel_8217;  // int32
  wire signed [31:0] sel_8218;  // int32
  wire signed [31:0] sel_8219;  // int32
  wire signed [31:0] sel_8220;  // int32
  wire signed [31:0] s_512;  // int32
  wire signed [31:0] sel_1_1520;  // int32
  wire signed [31:0] sel_8221;  // int32
  wire signed [31:0] sel_1_1521;  // int32
  wire signed [31:0] sel_8222;  // int32
  wire signed [31:0] sel_1_1522;  // int32
  wire signed [31:0] sel_8223;  // int32
  wire signed [31:0] sel_1_1523;  // int32
  wire signed [31:0] sel_8224;  // int32
  wire signed [31:0] sel_8225;  // int32
  wire signed [31:0] sel_8226;  // int32
  reg signed [31:0] sel_1_1524;  // int32
  wire cont_bits_22_28;
  wire sel_1_1525;
  wire signed [31:0] sel_8227;  // int32
  wire signed [31:0] sel_8228;  // int32
  wire signed [31:0] sel_8229;  // int32
  wire signed [31:0] sel_8230;  // int32
  wire signed [31:0] sel_8231;  // int32
  wire signed [31:0] sel_8232;  // int32
  wire signed [31:0] sel_8233;  // int32
  wire signed [31:0] sel_8234;  // int32
  wire signed [31:0] sel_8235;  // int32
  wire signed [31:0] sel_8236;  // int32
  wire signed [31:0] sel_8237;  // int32
  wire signed [31:0] sel_8238;  // int32
  wire signed [31:0] s_513;  // int32
  wire signed [31:0] sel_1_1526;  // int32
  wire signed [31:0] sel_8239;  // int32
  wire signed [31:0] sel_1_1527;  // int32
  wire signed [31:0] sel_8240;  // int32
  wire signed [31:0] sel_1_1528;  // int32
  wire signed [31:0] sel_8241;  // int32
  wire signed [31:0] sel_8242;  // int32
  wire signed [31:0] sel_8243;  // int32
  reg signed [31:0] sel_1_1529;  // int32
  wire cont_bits_21_28;
  wire sel_1_1530;
  wire signed [31:0] sel_8244;  // int32
  wire signed [31:0] sel_8245;  // int32
  wire signed [31:0] sel_8246;  // int32
  wire signed [31:0] sel_8247;  // int32
  wire signed [31:0] sel_8248;  // int32
  wire signed [31:0] sel_8249;  // int32
  wire signed [31:0] sel_8250;  // int32
  wire signed [31:0] sel_8251;  // int32
  wire signed [31:0] sel_8252;  // int32
  wire signed [31:0] sel_8253;  // int32
  wire signed [31:0] sel_8254;  // int32
  wire signed [31:0] sel_8255;  // int32
  wire signed [31:0] s_514;  // int32
  wire signed [31:0] sel_1_1531;  // int32
  wire signed [31:0] sel_8256;  // int32
  wire signed [31:0] sel_1_1532;  // int32
  wire signed [31:0] sel_8257;  // int32
  wire signed [31:0] sel_8258;  // int32
  wire signed [31:0] sel_8259;  // int32
  reg signed [31:0] sel_1_1533;  // int32
  wire cont_bits_12_28;
  wire sel_1_1534;
  wire signed [31:0] sel_8260;  // int32
  wire signed [31:0] sel_8261;  // int32
  wire signed [31:0] sel_8262;  // int32
  wire signed [31:0] sel_8263;  // int32
  wire signed [31:0] sel_8264;  // int32
  wire signed [31:0] sel_8265;  // int32
  wire signed [31:0] sel_8266;  // int32
  wire signed [31:0] sel_8267;  // int32
  wire signed [31:0] sel_8268;  // int32
  wire signed [31:0] sel_8269;  // int32
  wire signed [31:0] sel_8270;  // int32
  wire signed [31:0] sel_8271;  // int32
  wire signed [31:0] s_515;  // int32
  wire signed [31:0] sel_1_1535;  // int32
  wire signed [31:0] sel_8272;  // int32
  wire signed [31:0] sel_8273;  // int32
  wire signed [31:0] sel_8274;  // int32
  reg signed [31:0] sel_1_1536;  // int32
  wire cont_bits_33;
  wire sel_1_1537;
  wire signed [31:0] sel_8275;  // int32
  wire signed [31:0] sel_8276;  // int32
  wire signed [31:0] sel_8277;  // int32
  wire signed [31:0] sel_8278;  // int32
  wire signed [31:0] sel_8279;  // int32
  wire signed [31:0] sel_8280;  // int32
  wire signed [31:0] sel_8281;  // int32
  wire signed [31:0] sel_8282;  // int32
  wire signed [31:0] sel_8283;  // int32
  wire signed [31:0] sel_8284;  // int32
  wire signed [31:0] sel_8285;  // int32
  wire signed [31:0] sel_8286;  // int32
  wire signed [31:0] sel_8287;  // int32
  wire signed [31:0] sel_8288;  // int32
  wire signed [31:0] sel_8289;  // int32
  wire signed [31:0] s_516;  // int32
  wire signed [31:0] sel_1_1538;  // int32
  wire signed [31:0] sel_8290;  // int32
  wire signed [31:0] sel_1_1539;  // int32
  wire signed [31:0] sel_8291;  // int32
  wire signed [31:0] sel_1_1540;  // int32
  wire signed [31:0] sel_8292;  // int32
  wire signed [31:0] sel_1_1541;  // int32
  wire signed [31:0] sel_8293;  // int32
  wire signed [31:0] sel_1_1542;  // int32
  wire signed [31:0] sel_8294;  // int32
  wire signed [31:0] sel_1_1543;  // int32
  wire signed [31:0] sel_8295;  // int32
  wire signed [31:0] sel_1_1544;  // int32
  wire signed [31:0] sel_8296;  // int32
  wire signed [31:0] sel_1_1545;  // int32
  wire signed [31:0] sel_1_1546;  // int32
  wire signed [31:0] sel_1_1547;  // int32
  wire signed [31:0] sel_8297;  // int32
  wire signed [31:0] sel_1_1548;  // int32
  wire signed [31:0] sel_8298;  // int32
  wire signed [31:0] sel_8299;  // int32
  reg signed [31:0] sel_1_1549;  // int32
  wire cont_bits_41_29;
  wire signed [31:0] sel_8300;  // int32
  wire signed [31:0] sel_8301;  // int32
  wire signed [31:0] sel_8302;  // int32
  wire signed [31:0] sel_8303;  // int32
  wire signed [31:0] sel_8304;  // int32
  wire signed [31:0] sel_8305;  // int32
  wire signed [31:0] sel_8306;  // int32
  wire signed [31:0] sel_8307;  // int32
  wire signed [31:0] sel_8308;  // int32
  wire signed [31:0] sel_8309;  // int32
  wire signed [31:0] sel_8310;  // int32
  wire signed [31:0] sel_8311;  // int32
  wire signed [31:0] sel_8312;  // int32
  wire signed [31:0] sel_8313;  // int32
  wire signed [31:0] sel_8314;  // int32
  wire signed [31:0] s_517;  // int32
  wire signed [31:0] sel_1_1550;  // int32
  wire signed [31:0] sel_8315;  // int32
  wire signed [31:0] sel_1_1551;  // int32
  wire signed [31:0] sel_8316;  // int32
  wire signed [31:0] sel_1_1552;  // int32
  wire signed [31:0] sel_8317;  // int32
  wire signed [31:0] sel_1_1553;  // int32
  wire signed [31:0] sel_8318;  // int32
  wire signed [31:0] sel_1_1554;  // int32
  wire signed [31:0] sel_8319;  // int32
  wire signed [31:0] sel_1_1555;  // int32
  wire signed [31:0] sel_8320;  // int32
  wire signed [31:0] sel_1_1556;  // int32
  wire signed [31:0] sel_1_1557;  // int32
  wire signed [31:0] sel_1_1558;  // int32
  wire signed [31:0] sel_8321;  // int32
  wire signed [31:0] sel_1_1559;  // int32
  wire signed [31:0] sel_8322;  // int32
  wire signed [31:0] sel_8323;  // int32
  reg signed [31:0] sel_1_1560;  // int32
  wire cont_bits_42_29;
  wire sel_1_1561;
  wire signed [31:0] sel_8324;  // int32
  wire signed [31:0] sel_8325;  // int32
  wire signed [31:0] sel_8326;  // int32
  wire signed [31:0] sel_8327;  // int32
  wire signed [31:0] sel_8328;  // int32
  wire signed [31:0] sel_8329;  // int32
  wire signed [31:0] sel_8330;  // int32
  wire signed [31:0] sel_8331;  // int32
  wire signed [31:0] sel_8332;  // int32
  wire signed [31:0] sel_8333;  // int32
  wire signed [31:0] sel_8334;  // int32
  wire signed [31:0] sel_8335;  // int32
  wire signed [31:0] sel_8336;  // int32
  wire signed [31:0] sel_8337;  // int32
  wire signed [31:0] sel_8338;  // int32
  wire signed [31:0] s_518;  // int32
  wire signed [31:0] sel_1_1562;  // int32
  wire signed [31:0] sel_8339;  // int32
  wire signed [31:0] sel_1_1563;  // int32
  wire signed [31:0] sel_8340;  // int32
  wire signed [31:0] sel_1_1564;  // int32
  wire signed [31:0] sel_8341;  // int32
  wire signed [31:0] sel_1_1565;  // int32
  wire signed [31:0] sel_8342;  // int32
  wire signed [31:0] sel_1_1566;  // int32
  wire signed [31:0] sel_8343;  // int32
  wire signed [31:0] sel_1_1567;  // int32
  wire signed [31:0] sel_1_1568;  // int32
  wire signed [31:0] sel_1_1569;  // int32
  wire signed [31:0] sel_8344;  // int32
  wire signed [31:0] sel_1_1570;  // int32
  wire signed [31:0] sel_8345;  // int32
  wire signed [31:0] sel_8346;  // int32
  reg signed [31:0] sel_1_1571;  // int32
  wire cont_bits_32_29;
  wire sel_1_1572;
  wire signed [31:0] sel_8347;  // int32
  wire signed [31:0] sel_8348;  // int32
  wire signed [31:0] sel_8349;  // int32
  wire signed [31:0] sel_8350;  // int32
  wire signed [31:0] sel_8351;  // int32
  wire signed [31:0] sel_8352;  // int32
  wire signed [31:0] sel_8353;  // int32
  wire signed [31:0] sel_8354;  // int32
  wire signed [31:0] sel_8355;  // int32
  wire signed [31:0] sel_8356;  // int32
  wire signed [31:0] sel_8357;  // int32
  wire signed [31:0] sel_8358;  // int32
  wire signed [31:0] sel_8359;  // int32
  wire signed [31:0] sel_8360;  // int32
  wire signed [31:0] sel_8361;  // int32
  wire signed [31:0] s_519;  // int32
  wire signed [31:0] sel_1_1573;  // int32
  wire signed [31:0] sel_8362;  // int32
  wire signed [31:0] sel_1_1574;  // int32
  wire signed [31:0] sel_8363;  // int32
  wire signed [31:0] sel_1_1575;  // int32
  wire signed [31:0] sel_8364;  // int32
  wire signed [31:0] sel_1_1576;  // int32
  wire signed [31:0] sel_8365;  // int32
  wire signed [31:0] sel_1_1577;  // int32
  wire signed [31:0] sel_1_1578;  // int32
  wire signed [31:0] sel_1_1579;  // int32
  wire signed [31:0] sel_8366;  // int32
  wire signed [31:0] sel_1_1580;  // int32
  wire signed [31:0] sel_8367;  // int32
  wire signed [31:0] sel_8368;  // int32
  reg signed [31:0] sel_1_1581;  // int32
  wire cont_bits_31_29;
  wire sel_1_1582;
  wire signed [31:0] sel_8369;  // int32
  wire signed [31:0] sel_8370;  // int32
  wire signed [31:0] sel_8371;  // int32
  wire signed [31:0] sel_8372;  // int32
  wire signed [31:0] sel_8373;  // int32
  wire signed [31:0] sel_8374;  // int32
  wire signed [31:0] sel_8375;  // int32
  wire signed [31:0] sel_8376;  // int32
  wire signed [31:0] sel_8377;  // int32
  wire signed [31:0] sel_8378;  // int32
  wire signed [31:0] sel_8379;  // int32
  wire signed [31:0] sel_8380;  // int32
  wire signed [31:0] sel_8381;  // int32
  wire signed [31:0] sel_8382;  // int32
  wire signed [31:0] sel_8383;  // int32
  wire signed [31:0] s_520;  // int32
  wire signed [31:0] sel_1_1583;  // int32
  wire signed [31:0] sel_8384;  // int32
  wire signed [31:0] sel_1_1584;  // int32
  wire signed [31:0] sel_8385;  // int32
  wire signed [31:0] sel_1_1585;  // int32
  wire signed [31:0] sel_8386;  // int32
  wire signed [31:0] sel_1_1586;  // int32
  wire signed [31:0] sel_1_1587;  // int32
  wire signed [31:0] sel_1_1588;  // int32
  wire signed [31:0] sel_8387;  // int32
  wire signed [31:0] sel_1_1589;  // int32
  wire signed [31:0] sel_8388;  // int32
  wire signed [31:0] sel_8389;  // int32
  reg signed [31:0] sel_1_1590;  // int32
  wire cont_bits_22_29;
  wire sel_1_1591;
  wire signed [31:0] sel_8390;  // int32
  wire signed [31:0] sel_8391;  // int32
  wire signed [31:0] sel_8392;  // int32
  wire signed [31:0] sel_8393;  // int32
  wire signed [31:0] sel_8394;  // int32
  wire signed [31:0] sel_8395;  // int32
  wire signed [31:0] sel_8396;  // int32
  wire signed [31:0] sel_8397;  // int32
  wire signed [31:0] sel_8398;  // int32
  wire signed [31:0] sel_8399;  // int32
  wire signed [31:0] sel_8400;  // int32
  wire signed [31:0] sel_8401;  // int32
  wire signed [31:0] sel_8402;  // int32
  wire signed [31:0] sel_8403;  // int32
  wire signed [31:0] sel_8404;  // int32
  wire signed [31:0] s_521;  // int32
  wire signed [31:0] sel_1_1592;  // int32
  wire signed [31:0] sel_8405;  // int32
  wire signed [31:0] sel_1_1593;  // int32
  wire signed [31:0] sel_8406;  // int32
  wire signed [31:0] sel_1_1594;  // int32
  wire signed [31:0] sel_1_1595;  // int32
  wire signed [31:0] sel_1_1596;  // int32
  wire signed [31:0] sel_8407;  // int32
  wire signed [31:0] sel_1_1597;  // int32
  wire signed [31:0] sel_8408;  // int32
  wire signed [31:0] sel_8409;  // int32
  reg signed [31:0] sel_1_1598;  // int32
  wire cont_bits_21_29;
  wire sel_1_1599;
  wire signed [31:0] sel_8410;  // int32
  wire signed [31:0] sel_8411;  // int32
  wire signed [31:0] sel_8412;  // int32
  wire signed [31:0] sel_8413;  // int32
  wire signed [31:0] sel_8414;  // int32
  wire signed [31:0] sel_8415;  // int32
  wire signed [31:0] sel_8416;  // int32
  wire signed [31:0] sel_8417;  // int32
  wire signed [31:0] sel_8418;  // int32
  wire signed [31:0] sel_8419;  // int32
  wire signed [31:0] sel_8420;  // int32
  wire signed [31:0] sel_8421;  // int32
  wire signed [31:0] sel_8422;  // int32
  wire signed [31:0] sel_8423;  // int32
  wire signed [31:0] sel_8424;  // int32
  wire signed [31:0] s_522;  // int32
  wire signed [31:0] sel_1_1600;  // int32
  wire signed [31:0] sel_8425;  // int32
  wire signed [31:0] sel_1_1601;  // int32
  wire signed [31:0] sel_1_1602;  // int32
  wire signed [31:0] sel_1_1603;  // int32
  wire signed [31:0] sel_8426;  // int32
  wire signed [31:0] sel_1_1604;  // int32
  wire signed [31:0] sel_8427;  // int32
  wire signed [31:0] sel_8428;  // int32
  reg signed [31:0] sel_1_1605;  // int32
  wire cont_bits_12_29;
  wire sel_1_1606;
  wire signed [31:0] sel_8429;  // int32
  wire signed [31:0] sel_8430;  // int32
  wire signed [31:0] sel_8431;  // int32
  wire signed [31:0] sel_8432;  // int32
  wire signed [31:0] sel_8433;  // int32
  wire signed [31:0] sel_8434;  // int32
  wire signed [31:0] sel_8435;  // int32
  wire signed [31:0] sel_8436;  // int32
  wire signed [31:0] sel_8437;  // int32
  wire signed [31:0] sel_8438;  // int32
  wire signed [31:0] sel_8439;  // int32
  wire signed [31:0] sel_8440;  // int32
  wire signed [31:0] sel_8441;  // int32
  wire signed [31:0] sel_8442;  // int32
  wire signed [31:0] sel_8443;  // int32
  wire signed [31:0] s_523;  // int32
  wire signed [31:0] sel_1_1607;  // int32
  wire signed [31:0] sel_1_1608;  // int32
  wire signed [31:0] sel_1_1609;  // int32
  wire signed [31:0] sel_8444;  // int32
  wire signed [31:0] sel_1_1610;  // int32
  wire signed [31:0] sel_8445;  // int32
  wire signed [31:0] sel_8446;  // int32
  reg signed [31:0] sel_1_1611;  // int32
  wire cont_bits_34;
  wire sel_1_1612;
  wire sel_8447;
  wire sel_8448;
  reg  sel_1_1613;
  wire sel_8449;
  wire sel_8450;
  wire sel_8451;
  wire sel_8452;
  wire sel_8453;
  wire sel_8454;
  wire sel_8455;
  wire sel_8456;
  wire sel_8457;
  wire sel_8458;
  wire sel_8459;
  wire sel_8460;
  wire s_524;
  wire sel_2_1445;
  wire s_525;
  wire sel_2_1446;
  wire s_526;
  wire sel_2_1447;
  wire s_527;
  wire sel_2_1448;
  wire s_528;
  wire sel_2_1449;
  wire s_529;
  wire sel_2_1450;
  wire s_530;
  wire sel_2_1451;
  wire s_531;
  wire sel_2_1452;
  wire sel_8461;
  wire sel_8462;
  wire sel_8463;
  wire s_532;
  wire sel_2_1453;
  wire s_533;
  wire sel_2_1454;
  wire s_534;
  wire sel_2_1455;
  wire s_535;
  wire sel_2_1456;
  wire s_536;
  wire sel_2_1457;
  wire s_537;
  wire sel_2_1458;
  wire s_538;
  wire sel_2_1459;
  wire s_539;
  wire sel_2_1460;
  wire sel_2_1461;
  wire sel_2_1462;
  wire sel_8464;
  wire sel_2_1463;
  wire sel_8465;
  wire sel_8466;
  reg  sel_2_1464;
  wire sel_8467;
  wire sel_8468;
  wire sel_8469;
  wire sel_8470;
  wire sel_8471;
  wire sel_8472;
  wire sel_8473;
  wire sel_8474;
  wire sel_8475;
  wire sel_8476;
  wire sel_8477;
  wire signed [31:0] sel_8478;  // int32
  wire signed [31:0] sel_8479;  // int32
  wire signed [31:0] sel_8480;  // int32
  wire signed [31:0] sel_8481;  // int32
  wire signed [31:0] sel_8482;  // int32
  wire signed [31:0] sel_8483;  // int32
  wire signed [31:0] sel_8484;  // int32
  wire signed [31:0] sel_8485;  // int32
  wire signed [31:0] sel_8486;  // int32
  wire signed [31:0] sel_8487;  // int32
  wire signed [31:0] sel_8488;  // int32
  wire signed [31:0] sel_8489;  // int32
  wire signed [31:0] s_540;  // int32
  wire signed [31:0] sel_1_1614;  // int32
  wire signed [31:0] sel_8490;  // int32
  wire signed [31:0] sel_1_1615;  // int32
  wire signed [31:0] sel_8491;  // int32
  wire signed [31:0] sel_1_1616;  // int32
  wire signed [31:0] sel_8492;  // int32
  wire signed [31:0] sel_1_1617;  // int32
  wire signed [31:0] sel_8493;  // int32
  wire signed [31:0] sel_1_1618;  // int32
  wire signed [31:0] sel_8494;  // int32
  wire signed [31:0] sel_1_1619;  // int32
  wire signed [31:0] sel_8495;  // int32
  wire signed [31:0] sel_1_1620;  // int32
  wire signed [31:0] sel_8496;  // int32
  wire signed [31:0] sel_1_1621;  // int32
  wire signed [31:0] sel_8497;  // int32
  wire signed [31:0] sel_8498;  // int32
  wire signed [31:0] sel_8499;  // int32
  reg signed [31:0] sel_1_1622;  // int32
  wire cont_bits_41_30;
  wire signed [31:0] sel_8500;  // int32
  wire signed [31:0] sel_8501;  // int32
  wire signed [31:0] sel_8502;  // int32
  wire signed [31:0] sel_8503;  // int32
  wire signed [31:0] sel_8504;  // int32
  wire signed [31:0] sel_8505;  // int32
  wire signed [31:0] sel_8506;  // int32
  wire signed [31:0] sel_8507;  // int32
  wire signed [31:0] sel_8508;  // int32
  wire signed [31:0] sel_8509;  // int32
  wire signed [31:0] sel_8510;  // int32
  wire signed [31:0] sel_8511;  // int32
  wire signed [31:0] s_541;  // int32
  wire signed [31:0] sel_1_1623;  // int32
  wire signed [31:0] sel_8512;  // int32
  wire signed [31:0] sel_1_1624;  // int32
  wire signed [31:0] sel_8513;  // int32
  wire signed [31:0] sel_1_1625;  // int32
  wire signed [31:0] sel_8514;  // int32
  wire signed [31:0] sel_1_1626;  // int32
  wire signed [31:0] sel_8515;  // int32
  wire signed [31:0] sel_1_1627;  // int32
  wire signed [31:0] sel_8516;  // int32
  wire signed [31:0] sel_1_1628;  // int32
  wire signed [31:0] sel_8517;  // int32
  wire signed [31:0] sel_1_1629;  // int32
  wire signed [31:0] sel_8518;  // int32
  wire signed [31:0] sel_8519;  // int32
  wire signed [31:0] sel_8520;  // int32
  reg signed [31:0] sel_1_1630;  // int32
  wire cont_bits_42_30;
  wire sel_1_1631;
  wire signed [31:0] sel_8521;  // int32
  wire signed [31:0] sel_8522;  // int32
  wire signed [31:0] sel_8523;  // int32
  wire signed [31:0] sel_8524;  // int32
  wire signed [31:0] sel_8525;  // int32
  wire signed [31:0] sel_8526;  // int32
  wire signed [31:0] sel_8527;  // int32
  wire signed [31:0] sel_8528;  // int32
  wire signed [31:0] sel_8529;  // int32
  wire signed [31:0] sel_8530;  // int32
  wire signed [31:0] sel_8531;  // int32
  wire signed [31:0] sel_8532;  // int32
  wire signed [31:0] s_542;  // int32
  wire signed [31:0] sel_1_1632;  // int32
  wire signed [31:0] sel_8533;  // int32
  wire signed [31:0] sel_1_1633;  // int32
  wire signed [31:0] sel_8534;  // int32
  wire signed [31:0] sel_1_1634;  // int32
  wire signed [31:0] sel_8535;  // int32
  wire signed [31:0] sel_1_1635;  // int32
  wire signed [31:0] sel_8536;  // int32
  wire signed [31:0] sel_1_1636;  // int32
  wire signed [31:0] sel_8537;  // int32
  wire signed [31:0] sel_1_1637;  // int32
  wire signed [31:0] sel_8538;  // int32
  wire signed [31:0] sel_8539;  // int32
  wire signed [31:0] sel_8540;  // int32
  reg signed [31:0] sel_1_1638;  // int32
  wire cont_bits_32_30;
  wire sel_1_1639;
  wire signed [31:0] sel_8541;  // int32
  wire signed [31:0] sel_8542;  // int32
  wire signed [31:0] sel_8543;  // int32
  wire signed [31:0] sel_8544;  // int32
  wire signed [31:0] sel_8545;  // int32
  wire signed [31:0] sel_8546;  // int32
  wire signed [31:0] sel_8547;  // int32
  wire signed [31:0] sel_8548;  // int32
  wire signed [31:0] sel_8549;  // int32
  wire signed [31:0] sel_8550;  // int32
  wire signed [31:0] sel_8551;  // int32
  wire signed [31:0] sel_8552;  // int32
  wire signed [31:0] s_543;  // int32
  wire signed [31:0] sel_1_1640;  // int32
  wire signed [31:0] sel_8553;  // int32
  wire signed [31:0] sel_1_1641;  // int32
  wire signed [31:0] sel_8554;  // int32
  wire signed [31:0] sel_1_1642;  // int32
  wire signed [31:0] sel_8555;  // int32
  wire signed [31:0] sel_1_1643;  // int32
  wire signed [31:0] sel_8556;  // int32
  wire signed [31:0] sel_1_1644;  // int32
  wire signed [31:0] sel_8557;  // int32
  wire signed [31:0] sel_8558;  // int32
  wire signed [31:0] sel_8559;  // int32
  reg signed [31:0] sel_1_1645;  // int32
  wire cont_bits_31_30;
  wire sel_1_1646;
  wire signed [31:0] sel_8560;  // int32
  wire signed [31:0] sel_8561;  // int32
  wire signed [31:0] sel_8562;  // int32
  wire signed [31:0] sel_8563;  // int32
  wire signed [31:0] sel_8564;  // int32
  wire signed [31:0] sel_8565;  // int32
  wire signed [31:0] sel_8566;  // int32
  wire signed [31:0] sel_8567;  // int32
  wire signed [31:0] sel_8568;  // int32
  wire signed [31:0] sel_8569;  // int32
  wire signed [31:0] sel_8570;  // int32
  wire signed [31:0] sel_8571;  // int32
  wire signed [31:0] s_544;  // int32
  wire signed [31:0] sel_1_1647;  // int32
  wire signed [31:0] sel_8572;  // int32
  wire signed [31:0] sel_1_1648;  // int32
  wire signed [31:0] sel_8573;  // int32
  wire signed [31:0] sel_1_1649;  // int32
  wire signed [31:0] sel_8574;  // int32
  wire signed [31:0] sel_1_1650;  // int32
  wire signed [31:0] sel_8575;  // int32
  wire signed [31:0] sel_8576;  // int32
  wire signed [31:0] sel_8577;  // int32
  reg signed [31:0] sel_1_1651;  // int32
  wire cont_bits_22_30;
  wire sel_1_1652;
  wire signed [31:0] sel_8578;  // int32
  wire signed [31:0] sel_8579;  // int32
  wire signed [31:0] sel_8580;  // int32
  wire signed [31:0] sel_8581;  // int32
  wire signed [31:0] sel_8582;  // int32
  wire signed [31:0] sel_8583;  // int32
  wire signed [31:0] sel_8584;  // int32
  wire signed [31:0] sel_8585;  // int32
  wire signed [31:0] sel_8586;  // int32
  wire signed [31:0] sel_8587;  // int32
  wire signed [31:0] sel_8588;  // int32
  wire signed [31:0] sel_8589;  // int32
  wire signed [31:0] s_545;  // int32
  wire signed [31:0] sel_1_1653;  // int32
  wire signed [31:0] sel_8590;  // int32
  wire signed [31:0] sel_1_1654;  // int32
  wire signed [31:0] sel_8591;  // int32
  wire signed [31:0] sel_1_1655;  // int32
  wire signed [31:0] sel_8592;  // int32
  wire signed [31:0] sel_8593;  // int32
  wire signed [31:0] sel_8594;  // int32
  reg signed [31:0] sel_1_1656;  // int32
  wire cont_bits_21_30;
  wire sel_1_1657;
  wire signed [31:0] sel_8595;  // int32
  wire signed [31:0] sel_8596;  // int32
  wire signed [31:0] sel_8597;  // int32
  wire signed [31:0] sel_8598;  // int32
  wire signed [31:0] sel_8599;  // int32
  wire signed [31:0] sel_8600;  // int32
  wire signed [31:0] sel_8601;  // int32
  wire signed [31:0] sel_8602;  // int32
  wire signed [31:0] sel_8603;  // int32
  wire signed [31:0] sel_8604;  // int32
  wire signed [31:0] sel_8605;  // int32
  wire signed [31:0] sel_8606;  // int32
  wire signed [31:0] s_546;  // int32
  wire signed [31:0] sel_1_1658;  // int32
  wire signed [31:0] sel_8607;  // int32
  wire signed [31:0] sel_1_1659;  // int32
  wire signed [31:0] sel_8608;  // int32
  wire signed [31:0] sel_8609;  // int32
  wire signed [31:0] sel_8610;  // int32
  reg signed [31:0] sel_1_1660;  // int32
  wire cont_bits_12_30;
  wire sel_1_1661;
  wire signed [31:0] sel_8611;  // int32
  wire signed [31:0] sel_8612;  // int32
  wire signed [31:0] sel_8613;  // int32
  wire signed [31:0] sel_8614;  // int32
  wire signed [31:0] sel_8615;  // int32
  wire signed [31:0] sel_8616;  // int32
  wire signed [31:0] sel_8617;  // int32
  wire signed [31:0] sel_8618;  // int32
  wire signed [31:0] sel_8619;  // int32
  wire signed [31:0] sel_8620;  // int32
  wire signed [31:0] sel_8621;  // int32
  wire signed [31:0] sel_8622;  // int32
  wire signed [31:0] s_547;  // int32
  wire signed [31:0] sel_1_1662;  // int32
  wire signed [31:0] sel_8623;  // int32
  wire signed [31:0] sel_8624;  // int32
  wire signed [31:0] sel_8625;  // int32
  reg signed [31:0] sel_1_1663;  // int32
  wire cont_bits_35;
  wire sel_1_1664;
  wire signed [31:0] sel_8626;  // int32
  wire signed [31:0] sel_8627;  // int32
  wire signed [31:0] sel_8628;  // int32
  wire signed [31:0] sel_8629;  // int32
  wire signed [31:0] sel_8630;  // int32
  wire signed [31:0] sel_8631;  // int32
  wire signed [31:0] sel_8632;  // int32
  wire signed [31:0] sel_8633;  // int32
  wire signed [31:0] sel_8634;  // int32
  wire signed [31:0] sel_8635;  // int32
  wire signed [31:0] sel_8636;  // int32
  wire signed [31:0] sel_8637;  // int32
  wire signed [31:0] sel_8638;  // int32
  wire signed [31:0] sel_8639;  // int32
  wire signed [31:0] sel_8640;  // int32
  wire signed [31:0] s_548;  // int32
  wire signed [31:0] sel_1_1665;  // int32
  wire signed [31:0] sel_8641;  // int32
  wire signed [31:0] sel_1_1666;  // int32
  wire signed [31:0] sel_8642;  // int32
  wire signed [31:0] sel_1_1667;  // int32
  wire signed [31:0] sel_8643;  // int32
  wire signed [31:0] sel_1_1668;  // int32
  wire signed [31:0] sel_8644;  // int32
  wire signed [31:0] sel_1_1669;  // int32
  wire signed [31:0] sel_8645;  // int32
  wire signed [31:0] sel_1_1670;  // int32
  wire signed [31:0] sel_8646;  // int32
  wire signed [31:0] sel_1_1671;  // int32
  wire signed [31:0] sel_8647;  // int32
  wire signed [31:0] sel_1_1672;  // int32
  wire signed [31:0] sel_1_1673;  // int32
  wire signed [31:0] sel_1_1674;  // int32
  wire signed [31:0] sel_8648;  // int32
  wire signed [31:0] sel_1_1675;  // int32
  wire signed [31:0] sel_8649;  // int32
  wire signed [31:0] sel_8650;  // int32
  reg signed [31:0] sel_1_1676;  // int32
  wire cont_bits_41_31;
  wire signed [31:0] sel_8651;  // int32
  wire signed [31:0] sel_8652;  // int32
  wire signed [31:0] sel_8653;  // int32
  wire signed [31:0] sel_8654;  // int32
  wire signed [31:0] sel_8655;  // int32
  wire signed [31:0] sel_8656;  // int32
  wire signed [31:0] sel_8657;  // int32
  wire signed [31:0] sel_8658;  // int32
  wire signed [31:0] sel_8659;  // int32
  wire signed [31:0] sel_8660;  // int32
  wire signed [31:0] sel_8661;  // int32
  wire signed [31:0] sel_8662;  // int32
  wire signed [31:0] sel_8663;  // int32
  wire signed [31:0] sel_8664;  // int32
  wire signed [31:0] sel_8665;  // int32
  wire signed [31:0] s_549;  // int32
  wire signed [31:0] sel_1_1677;  // int32
  wire signed [31:0] sel_8666;  // int32
  wire signed [31:0] sel_1_1678;  // int32
  wire signed [31:0] sel_8667;  // int32
  wire signed [31:0] sel_1_1679;  // int32
  wire signed [31:0] sel_8668;  // int32
  wire signed [31:0] sel_1_1680;  // int32
  wire signed [31:0] sel_8669;  // int32
  wire signed [31:0] sel_1_1681;  // int32
  wire signed [31:0] sel_8670;  // int32
  wire signed [31:0] sel_1_1682;  // int32
  wire signed [31:0] sel_8671;  // int32
  wire signed [31:0] sel_1_1683;  // int32
  wire signed [31:0] sel_1_1684;  // int32
  wire signed [31:0] sel_1_1685;  // int32
  wire signed [31:0] sel_8672;  // int32
  wire signed [31:0] sel_1_1686;  // int32
  wire signed [31:0] sel_8673;  // int32
  wire signed [31:0] sel_8674;  // int32
  reg signed [31:0] sel_1_1687;  // int32
  wire cont_bits_42_31;
  wire sel_1_1688;
  wire signed [31:0] sel_8675;  // int32
  wire signed [31:0] sel_8676;  // int32
  wire signed [31:0] sel_8677;  // int32
  wire signed [31:0] sel_8678;  // int32
  wire signed [31:0] sel_8679;  // int32
  wire signed [31:0] sel_8680;  // int32
  wire signed [31:0] sel_8681;  // int32
  wire signed [31:0] sel_8682;  // int32
  wire signed [31:0] sel_8683;  // int32
  wire signed [31:0] sel_8684;  // int32
  wire signed [31:0] sel_8685;  // int32
  wire signed [31:0] sel_8686;  // int32
  wire signed [31:0] sel_8687;  // int32
  wire signed [31:0] sel_8688;  // int32
  wire signed [31:0] sel_8689;  // int32
  wire signed [31:0] s_550;  // int32
  wire signed [31:0] sel_1_1689;  // int32
  wire signed [31:0] sel_8690;  // int32
  wire signed [31:0] sel_1_1690;  // int32
  wire signed [31:0] sel_8691;  // int32
  wire signed [31:0] sel_1_1691;  // int32
  wire signed [31:0] sel_8692;  // int32
  wire signed [31:0] sel_1_1692;  // int32
  wire signed [31:0] sel_8693;  // int32
  wire signed [31:0] sel_1_1693;  // int32
  wire signed [31:0] sel_8694;  // int32
  wire signed [31:0] sel_1_1694;  // int32
  wire signed [31:0] sel_1_1695;  // int32
  wire signed [31:0] sel_1_1696;  // int32
  wire signed [31:0] sel_8695;  // int32
  wire signed [31:0] sel_1_1697;  // int32
  wire signed [31:0] sel_8696;  // int32
  wire signed [31:0] sel_8697;  // int32
  reg signed [31:0] sel_1_1698;  // int32
  wire cont_bits_32_31;
  wire sel_1_1699;
  wire signed [31:0] sel_8698;  // int32
  wire signed [31:0] sel_8699;  // int32
  wire signed [31:0] sel_8700;  // int32
  wire signed [31:0] sel_8701;  // int32
  wire signed [31:0] sel_8702;  // int32
  wire signed [31:0] sel_8703;  // int32
  wire signed [31:0] sel_8704;  // int32
  wire signed [31:0] sel_8705;  // int32
  wire signed [31:0] sel_8706;  // int32
  wire signed [31:0] sel_8707;  // int32
  wire signed [31:0] sel_8708;  // int32
  wire signed [31:0] sel_8709;  // int32
  wire signed [31:0] sel_8710;  // int32
  wire signed [31:0] sel_8711;  // int32
  wire signed [31:0] sel_8712;  // int32
  wire signed [31:0] s_551;  // int32
  wire signed [31:0] sel_1_1700;  // int32
  wire signed [31:0] sel_8713;  // int32
  wire signed [31:0] sel_1_1701;  // int32
  wire signed [31:0] sel_8714;  // int32
  wire signed [31:0] sel_1_1702;  // int32
  wire signed [31:0] sel_8715;  // int32
  wire signed [31:0] sel_1_1703;  // int32
  wire signed [31:0] sel_8716;  // int32
  wire signed [31:0] sel_1_1704;  // int32
  wire signed [31:0] sel_1_1705;  // int32
  wire signed [31:0] sel_1_1706;  // int32
  wire signed [31:0] sel_8717;  // int32
  wire signed [31:0] sel_1_1707;  // int32
  wire signed [31:0] sel_8718;  // int32
  wire signed [31:0] sel_8719;  // int32
  reg signed [31:0] sel_1_1708;  // int32
  wire cont_bits_31_31;
  wire sel_1_1709;
  wire signed [31:0] sel_8720;  // int32
  wire signed [31:0] sel_8721;  // int32
  wire signed [31:0] sel_8722;  // int32
  wire signed [31:0] sel_8723;  // int32
  wire signed [31:0] sel_8724;  // int32
  wire signed [31:0] sel_8725;  // int32
  wire signed [31:0] sel_8726;  // int32
  wire signed [31:0] sel_8727;  // int32
  wire signed [31:0] sel_8728;  // int32
  wire signed [31:0] sel_8729;  // int32
  wire signed [31:0] sel_8730;  // int32
  wire signed [31:0] sel_8731;  // int32
  wire signed [31:0] sel_8732;  // int32
  wire signed [31:0] sel_8733;  // int32
  wire signed [31:0] sel_8734;  // int32
  wire signed [31:0] s_552;  // int32
  wire signed [31:0] sel_1_1710;  // int32
  wire signed [31:0] sel_8735;  // int32
  wire signed [31:0] sel_1_1711;  // int32
  wire signed [31:0] sel_8736;  // int32
  wire signed [31:0] sel_1_1712;  // int32
  wire signed [31:0] sel_8737;  // int32
  wire signed [31:0] sel_1_1713;  // int32
  wire signed [31:0] sel_1_1714;  // int32
  wire signed [31:0] sel_1_1715;  // int32
  wire signed [31:0] sel_8738;  // int32
  wire signed [31:0] sel_1_1716;  // int32
  wire signed [31:0] sel_8739;  // int32
  wire signed [31:0] sel_8740;  // int32
  reg signed [31:0] sel_1_1717;  // int32
  wire cont_bits_22_31;
  wire sel_1_1718;
  wire signed [31:0] sel_8741;  // int32
  wire signed [31:0] sel_8742;  // int32
  wire signed [31:0] sel_8743;  // int32
  wire signed [31:0] sel_8744;  // int32
  wire signed [31:0] sel_8745;  // int32
  wire signed [31:0] sel_8746;  // int32
  wire signed [31:0] sel_8747;  // int32
  wire signed [31:0] sel_8748;  // int32
  wire signed [31:0] sel_8749;  // int32
  wire signed [31:0] sel_8750;  // int32
  wire signed [31:0] sel_8751;  // int32
  wire signed [31:0] sel_8752;  // int32
  wire signed [31:0] sel_8753;  // int32
  wire signed [31:0] sel_8754;  // int32
  wire signed [31:0] sel_8755;  // int32
  wire signed [31:0] s_553;  // int32
  wire signed [31:0] sel_1_1719;  // int32
  wire signed [31:0] sel_8756;  // int32
  wire signed [31:0] sel_1_1720;  // int32
  wire signed [31:0] sel_8757;  // int32
  wire signed [31:0] sel_1_1721;  // int32
  wire signed [31:0] sel_1_1722;  // int32
  wire signed [31:0] sel_1_1723;  // int32
  wire signed [31:0] sel_8758;  // int32
  wire signed [31:0] sel_1_1724;  // int32
  wire signed [31:0] sel_8759;  // int32
  wire signed [31:0] sel_8760;  // int32
  reg signed [31:0] sel_1_1725;  // int32
  wire cont_bits_21_31;
  wire sel_1_1726;
  wire signed [31:0] sel_8761;  // int32
  wire signed [31:0] sel_8762;  // int32
  wire signed [31:0] sel_8763;  // int32
  wire signed [31:0] sel_8764;  // int32
  wire signed [31:0] sel_8765;  // int32
  wire signed [31:0] sel_8766;  // int32
  wire signed [31:0] sel_8767;  // int32
  wire signed [31:0] sel_8768;  // int32
  wire signed [31:0] sel_8769;  // int32
  wire signed [31:0] sel_8770;  // int32
  wire signed [31:0] sel_8771;  // int32
  wire signed [31:0] sel_8772;  // int32
  wire signed [31:0] sel_8773;  // int32
  wire signed [31:0] sel_8774;  // int32
  wire signed [31:0] sel_8775;  // int32
  wire signed [31:0] s_554;  // int32
  wire signed [31:0] sel_1_1727;  // int32
  wire signed [31:0] sel_8776;  // int32
  wire signed [31:0] sel_1_1728;  // int32
  wire signed [31:0] sel_1_1729;  // int32
  wire signed [31:0] sel_1_1730;  // int32
  wire signed [31:0] sel_8777;  // int32
  wire signed [31:0] sel_1_1731;  // int32
  wire signed [31:0] sel_8778;  // int32
  wire signed [31:0] sel_8779;  // int32
  reg signed [31:0] sel_1_1732;  // int32
  wire cont_bits_12_31;
  wire sel_1_1733;
  wire signed [31:0] sel_8780;  // int32
  wire signed [31:0] sel_8781;  // int32
  wire signed [31:0] sel_8782;  // int32
  wire signed [31:0] sel_8783;  // int32
  wire signed [31:0] sel_8784;  // int32
  wire signed [31:0] sel_8785;  // int32
  wire signed [31:0] sel_8786;  // int32
  wire signed [31:0] sel_8787;  // int32
  wire signed [31:0] sel_8788;  // int32
  wire signed [31:0] sel_8789;  // int32
  wire signed [31:0] sel_8790;  // int32
  wire signed [31:0] sel_8791;  // int32
  wire signed [31:0] sel_8792;  // int32
  wire signed [31:0] sel_8793;  // int32
  wire signed [31:0] sel_8794;  // int32
  wire signed [31:0] s_555;  // int32
  wire signed [31:0] sel_1_1734;  // int32
  wire signed [31:0] sel_1_1735;  // int32
  wire signed [31:0] sel_1_1736;  // int32
  wire signed [31:0] sel_8795;  // int32
  wire signed [31:0] sel_1_1737;  // int32
  wire signed [31:0] sel_8796;  // int32
  wire signed [31:0] sel_8797;  // int32
  reg signed [31:0] sel_1_1738;  // int32
  wire cont_bits_36;
  wire sel_1_1739;
  wire sel_8798;
  wire sel_8799;
  reg  sel_1_1740;
  wire sel_8800;
  wire sel_8801;
  wire sel_8802;
  wire sel_8803;
  wire sel_8804;
  wire sel_8805;
  wire sel_8806;
  wire sel_8807;
  wire sel_8808;
  wire sel_8809;
  wire sel_8810;
  wire sel_8811;
  wire s_556;
  wire sel_2_1465;
  wire s_557;
  wire sel_2_1466;
  wire s_558;
  wire sel_2_1467;
  wire s_559;
  wire sel_2_1468;
  wire s_560;
  wire sel_2_1469;
  wire s_561;
  wire sel_2_1470;
  wire s_562;
  wire sel_2_1471;
  wire s_563;
  wire sel_2_1472;
  wire sel_8812;
  wire sel_8813;
  wire sel_8814;
  wire s_564;
  wire sel_2_1473;
  wire s_565;
  wire sel_2_1474;
  wire s_566;
  wire sel_2_1475;
  wire s_567;
  wire sel_2_1476;
  wire s_568;
  wire sel_2_1477;
  wire s_569;
  wire sel_2_1478;
  wire s_570;
  wire sel_2_1479;
  wire s_571;
  wire sel_2_1480;
  wire sel_2_1481;
  wire sel_2_1482;
  wire sel_8815;
  wire sel_2_1483;
  wire sel_8816;
  wire sel_8817;
  reg  sel_2_1484;
  wire sel_8818;
  wire sel_8819;
  wire sel_8820;
  wire sel_8821;
  wire sel_8822;
  wire sel_8823;
  wire sel_8824;
  wire sel_8825;
  wire sel_8826;
  wire sel_8827;
  wire sel_8828;
  wire signed [31:0] sel_8829;  // int32
  wire signed [31:0] sel_8830;  // int32
  wire signed [31:0] sel_8831;  // int32
  wire signed [31:0] sel_8832;  // int32
  wire signed [31:0] sel_8833;  // int32
  wire signed [31:0] sel_8834;  // int32
  wire signed [31:0] sel_8835;  // int32
  wire signed [31:0] sel_8836;  // int32
  wire signed [31:0] sel_8837;  // int32
  wire signed [31:0] sel_8838;  // int32
  wire signed [31:0] sel_8839;  // int32
  wire signed [31:0] sel_8840;  // int32
  wire signed [31:0] s_572;  // int32
  wire signed [31:0] sel_1_1741;  // int32
  wire signed [31:0] sel_8841;  // int32
  wire signed [31:0] sel_1_1742;  // int32
  wire signed [31:0] sel_8842;  // int32
  wire signed [31:0] sel_1_1743;  // int32
  wire signed [31:0] sel_8843;  // int32
  wire signed [31:0] sel_1_1744;  // int32
  wire signed [31:0] sel_8844;  // int32
  wire signed [31:0] sel_1_1745;  // int32
  wire signed [31:0] sel_8845;  // int32
  wire signed [31:0] sel_1_1746;  // int32
  wire signed [31:0] sel_8846;  // int32
  wire signed [31:0] sel_1_1747;  // int32
  wire signed [31:0] sel_8847;  // int32
  wire signed [31:0] sel_1_1748;  // int32
  wire signed [31:0] sel_8848;  // int32
  wire signed [31:0] sel_8849;  // int32
  wire signed [31:0] sel_8850;  // int32
  reg signed [31:0] sel_1_1749;  // int32
  wire cont_bits_41_32;
  wire signed [31:0] sel_8851;  // int32
  wire signed [31:0] sel_8852;  // int32
  wire signed [31:0] sel_8853;  // int32
  wire signed [31:0] sel_8854;  // int32
  wire signed [31:0] sel_8855;  // int32
  wire signed [31:0] sel_8856;  // int32
  wire signed [31:0] sel_8857;  // int32
  wire signed [31:0] sel_8858;  // int32
  wire signed [31:0] sel_8859;  // int32
  wire signed [31:0] sel_8860;  // int32
  wire signed [31:0] sel_8861;  // int32
  wire signed [31:0] sel_8862;  // int32
  wire signed [31:0] s_573;  // int32
  wire signed [31:0] sel_1_1750;  // int32
  wire signed [31:0] sel_8863;  // int32
  wire signed [31:0] sel_1_1751;  // int32
  wire signed [31:0] sel_8864;  // int32
  wire signed [31:0] sel_1_1752;  // int32
  wire signed [31:0] sel_8865;  // int32
  wire signed [31:0] sel_1_1753;  // int32
  wire signed [31:0] sel_8866;  // int32
  wire signed [31:0] sel_1_1754;  // int32
  wire signed [31:0] sel_8867;  // int32
  wire signed [31:0] sel_1_1755;  // int32
  wire signed [31:0] sel_8868;  // int32
  wire signed [31:0] sel_1_1756;  // int32
  wire signed [31:0] sel_8869;  // int32
  wire signed [31:0] sel_8870;  // int32
  wire signed [31:0] sel_8871;  // int32
  reg signed [31:0] sel_1_1757;  // int32
  wire cont_bits_42_32;
  wire sel_1_1758;
  wire signed [31:0] sel_8872;  // int32
  wire signed [31:0] sel_8873;  // int32
  wire signed [31:0] sel_8874;  // int32
  wire signed [31:0] sel_8875;  // int32
  wire signed [31:0] sel_8876;  // int32
  wire signed [31:0] sel_8877;  // int32
  wire signed [31:0] sel_8878;  // int32
  wire signed [31:0] sel_8879;  // int32
  wire signed [31:0] sel_8880;  // int32
  wire signed [31:0] sel_8881;  // int32
  wire signed [31:0] sel_8882;  // int32
  wire signed [31:0] sel_8883;  // int32
  wire signed [31:0] s_574;  // int32
  wire signed [31:0] sel_1_1759;  // int32
  wire signed [31:0] sel_8884;  // int32
  wire signed [31:0] sel_1_1760;  // int32
  wire signed [31:0] sel_8885;  // int32
  wire signed [31:0] sel_1_1761;  // int32
  wire signed [31:0] sel_8886;  // int32
  wire signed [31:0] sel_1_1762;  // int32
  wire signed [31:0] sel_8887;  // int32
  wire signed [31:0] sel_1_1763;  // int32
  wire signed [31:0] sel_8888;  // int32
  wire signed [31:0] sel_1_1764;  // int32
  wire signed [31:0] sel_8889;  // int32
  wire signed [31:0] sel_8890;  // int32
  wire signed [31:0] sel_8891;  // int32
  reg signed [31:0] sel_1_1765;  // int32
  wire cont_bits_32_32;
  wire sel_1_1766;
  wire signed [31:0] sel_8892;  // int32
  wire signed [31:0] sel_8893;  // int32
  wire signed [31:0] sel_8894;  // int32
  wire signed [31:0] sel_8895;  // int32
  wire signed [31:0] sel_8896;  // int32
  wire signed [31:0] sel_8897;  // int32
  wire signed [31:0] sel_8898;  // int32
  wire signed [31:0] sel_8899;  // int32
  wire signed [31:0] sel_8900;  // int32
  wire signed [31:0] sel_8901;  // int32
  wire signed [31:0] sel_8902;  // int32
  wire signed [31:0] sel_8903;  // int32
  wire signed [31:0] s_575;  // int32
  wire signed [31:0] sel_1_1767;  // int32
  wire signed [31:0] sel_8904;  // int32
  wire signed [31:0] sel_1_1768;  // int32
  wire signed [31:0] sel_8905;  // int32
  wire signed [31:0] sel_1_1769;  // int32
  wire signed [31:0] sel_8906;  // int32
  wire signed [31:0] sel_1_1770;  // int32
  wire signed [31:0] sel_8907;  // int32
  wire signed [31:0] sel_1_1771;  // int32
  wire signed [31:0] sel_8908;  // int32
  wire signed [31:0] sel_8909;  // int32
  wire signed [31:0] sel_8910;  // int32
  reg signed [31:0] sel_1_1772;  // int32
  wire cont_bits_31_32;
  wire sel_1_1773;
  wire signed [31:0] sel_8911;  // int32
  wire signed [31:0] sel_8912;  // int32
  wire signed [31:0] sel_8913;  // int32
  wire signed [31:0] sel_8914;  // int32
  wire signed [31:0] sel_8915;  // int32
  wire signed [31:0] sel_8916;  // int32
  wire signed [31:0] sel_8917;  // int32
  wire signed [31:0] sel_8918;  // int32
  wire signed [31:0] sel_8919;  // int32
  wire signed [31:0] sel_8920;  // int32
  wire signed [31:0] sel_8921;  // int32
  wire signed [31:0] sel_8922;  // int32
  wire signed [31:0] s_576;  // int32
  wire signed [31:0] sel_1_1774;  // int32
  wire signed [31:0] sel_8923;  // int32
  wire signed [31:0] sel_1_1775;  // int32
  wire signed [31:0] sel_8924;  // int32
  wire signed [31:0] sel_1_1776;  // int32
  wire signed [31:0] sel_8925;  // int32
  wire signed [31:0] sel_1_1777;  // int32
  wire signed [31:0] sel_8926;  // int32
  wire signed [31:0] sel_8927;  // int32
  wire signed [31:0] sel_8928;  // int32
  reg signed [31:0] sel_1_1778;  // int32
  wire cont_bits_22_32;
  wire sel_1_1779;
  wire signed [31:0] sel_8929;  // int32
  wire signed [31:0] sel_8930;  // int32
  wire signed [31:0] sel_8931;  // int32
  wire signed [31:0] sel_8932;  // int32
  wire signed [31:0] sel_8933;  // int32
  wire signed [31:0] sel_8934;  // int32
  wire signed [31:0] sel_8935;  // int32
  wire signed [31:0] sel_8936;  // int32
  wire signed [31:0] sel_8937;  // int32
  wire signed [31:0] sel_8938;  // int32
  wire signed [31:0] sel_8939;  // int32
  wire signed [31:0] sel_8940;  // int32
  wire signed [31:0] s_577;  // int32
  wire signed [31:0] sel_1_1780;  // int32
  wire signed [31:0] sel_8941;  // int32
  wire signed [31:0] sel_1_1781;  // int32
  wire signed [31:0] sel_8942;  // int32
  wire signed [31:0] sel_1_1782;  // int32
  wire signed [31:0] sel_8943;  // int32
  wire signed [31:0] sel_8944;  // int32
  wire signed [31:0] sel_8945;  // int32
  reg signed [31:0] sel_1_1783;  // int32
  wire cont_bits_21_32;
  wire sel_1_1784;
  wire signed [31:0] sel_8946;  // int32
  wire signed [31:0] sel_8947;  // int32
  wire signed [31:0] sel_8948;  // int32
  wire signed [31:0] sel_8949;  // int32
  wire signed [31:0] sel_8950;  // int32
  wire signed [31:0] sel_8951;  // int32
  wire signed [31:0] sel_8952;  // int32
  wire signed [31:0] sel_8953;  // int32
  wire signed [31:0] sel_8954;  // int32
  wire signed [31:0] sel_8955;  // int32
  wire signed [31:0] sel_8956;  // int32
  wire signed [31:0] sel_8957;  // int32
  wire signed [31:0] s_578;  // int32
  wire signed [31:0] sel_1_1785;  // int32
  wire signed [31:0] sel_8958;  // int32
  wire signed [31:0] sel_1_1786;  // int32
  wire signed [31:0] sel_8959;  // int32
  wire signed [31:0] sel_8960;  // int32
  wire signed [31:0] sel_8961;  // int32
  reg signed [31:0] sel_1_1787;  // int32
  wire cont_bits_12_32;
  wire sel_1_1788;
  wire signed [31:0] sel_8962;  // int32
  wire signed [31:0] sel_8963;  // int32
  wire signed [31:0] sel_8964;  // int32
  wire signed [31:0] sel_8965;  // int32
  wire signed [31:0] sel_8966;  // int32
  wire signed [31:0] sel_8967;  // int32
  wire signed [31:0] sel_8968;  // int32
  wire signed [31:0] sel_8969;  // int32
  wire signed [31:0] sel_8970;  // int32
  wire signed [31:0] sel_8971;  // int32
  wire signed [31:0] sel_8972;  // int32
  wire signed [31:0] sel_8973;  // int32
  wire signed [31:0] s_579;  // int32
  wire signed [31:0] sel_1_1789;  // int32
  wire signed [31:0] sel_8974;  // int32
  wire signed [31:0] sel_8975;  // int32
  wire signed [31:0] sel_8976;  // int32
  reg signed [31:0] sel_1_1790;  // int32
  wire cont_bits_37;
  wire sel_1_1791;
  wire signed [31:0] sel_8977;  // int32
  wire signed [31:0] sel_8978;  // int32
  wire signed [31:0] sel_8979;  // int32
  wire signed [31:0] sel_8980;  // int32
  wire signed [31:0] sel_8981;  // int32
  wire signed [31:0] sel_8982;  // int32
  wire signed [31:0] sel_8983;  // int32
  wire signed [31:0] sel_8984;  // int32
  wire signed [31:0] sel_8985;  // int32
  wire signed [31:0] sel_8986;  // int32
  wire signed [31:0] sel_8987;  // int32
  wire signed [31:0] sel_8988;  // int32
  wire signed [31:0] sel_8989;  // int32
  wire signed [31:0] sel_8990;  // int32
  wire signed [31:0] sel_8991;  // int32
  wire signed [31:0] s_580;  // int32
  wire signed [31:0] sel_1_1792;  // int32
  wire signed [31:0] sel_8992;  // int32
  wire signed [31:0] sel_1_1793;  // int32
  wire signed [31:0] sel_8993;  // int32
  wire signed [31:0] sel_1_1794;  // int32
  wire signed [31:0] sel_8994;  // int32
  wire signed [31:0] sel_1_1795;  // int32
  wire signed [31:0] sel_8995;  // int32
  wire signed [31:0] sel_1_1796;  // int32
  wire signed [31:0] sel_8996;  // int32
  wire signed [31:0] sel_1_1797;  // int32
  wire signed [31:0] sel_8997;  // int32
  wire signed [31:0] sel_1_1798;  // int32
  wire signed [31:0] sel_8998;  // int32
  wire signed [31:0] sel_1_1799;  // int32
  wire signed [31:0] sel_1_1800;  // int32
  wire signed [31:0] sel_1_1801;  // int32
  wire signed [31:0] sel_8999;  // int32
  wire signed [31:0] sel_1_1802;  // int32
  wire signed [31:0] sel_9000;  // int32
  wire signed [31:0] sel_9001;  // int32
  reg signed [31:0] sel_1_1803;  // int32
  wire cont_bits_41_33;
  wire signed [31:0] sel_9002;  // int32
  wire signed [31:0] sel_9003;  // int32
  wire signed [31:0] sel_9004;  // int32
  wire signed [31:0] sel_9005;  // int32
  wire signed [31:0] sel_9006;  // int32
  wire signed [31:0] sel_9007;  // int32
  wire signed [31:0] sel_9008;  // int32
  wire signed [31:0] sel_9009;  // int32
  wire signed [31:0] sel_9010;  // int32
  wire signed [31:0] sel_9011;  // int32
  wire signed [31:0] sel_9012;  // int32
  wire signed [31:0] sel_9013;  // int32
  wire signed [31:0] sel_9014;  // int32
  wire signed [31:0] sel_9015;  // int32
  wire signed [31:0] sel_9016;  // int32
  wire signed [31:0] s_581;  // int32
  wire signed [31:0] sel_1_1804;  // int32
  wire signed [31:0] sel_9017;  // int32
  wire signed [31:0] sel_1_1805;  // int32
  wire signed [31:0] sel_9018;  // int32
  wire signed [31:0] sel_1_1806;  // int32
  wire signed [31:0] sel_9019;  // int32
  wire signed [31:0] sel_1_1807;  // int32
  wire signed [31:0] sel_9020;  // int32
  wire signed [31:0] sel_1_1808;  // int32
  wire signed [31:0] sel_9021;  // int32
  wire signed [31:0] sel_1_1809;  // int32
  wire signed [31:0] sel_9022;  // int32
  wire signed [31:0] sel_1_1810;  // int32
  wire signed [31:0] sel_1_1811;  // int32
  wire signed [31:0] sel_1_1812;  // int32
  wire signed [31:0] sel_9023;  // int32
  wire signed [31:0] sel_1_1813;  // int32
  wire signed [31:0] sel_9024;  // int32
  wire signed [31:0] sel_9025;  // int32
  reg signed [31:0] sel_1_1814;  // int32
  wire cont_bits_42_33;
  wire sel_1_1815;
  wire signed [31:0] sel_9026;  // int32
  wire signed [31:0] sel_9027;  // int32
  wire signed [31:0] sel_9028;  // int32
  wire signed [31:0] sel_9029;  // int32
  wire signed [31:0] sel_9030;  // int32
  wire signed [31:0] sel_9031;  // int32
  wire signed [31:0] sel_9032;  // int32
  wire signed [31:0] sel_9033;  // int32
  wire signed [31:0] sel_9034;  // int32
  wire signed [31:0] sel_9035;  // int32
  wire signed [31:0] sel_9036;  // int32
  wire signed [31:0] sel_9037;  // int32
  wire signed [31:0] sel_9038;  // int32
  wire signed [31:0] sel_9039;  // int32
  wire signed [31:0] sel_9040;  // int32
  wire signed [31:0] s_582;  // int32
  wire signed [31:0] sel_1_1816;  // int32
  wire signed [31:0] sel_9041;  // int32
  wire signed [31:0] sel_1_1817;  // int32
  wire signed [31:0] sel_9042;  // int32
  wire signed [31:0] sel_1_1818;  // int32
  wire signed [31:0] sel_9043;  // int32
  wire signed [31:0] sel_1_1819;  // int32
  wire signed [31:0] sel_9044;  // int32
  wire signed [31:0] sel_1_1820;  // int32
  wire signed [31:0] sel_9045;  // int32
  wire signed [31:0] sel_1_1821;  // int32
  wire signed [31:0] sel_1_1822;  // int32
  wire signed [31:0] sel_1_1823;  // int32
  wire signed [31:0] sel_9046;  // int32
  wire signed [31:0] sel_1_1824;  // int32
  wire signed [31:0] sel_9047;  // int32
  wire signed [31:0] sel_9048;  // int32
  reg signed [31:0] sel_1_1825;  // int32
  wire cont_bits_32_33;
  wire sel_1_1826;
  wire signed [31:0] sel_9049;  // int32
  wire signed [31:0] sel_9050;  // int32
  wire signed [31:0] sel_9051;  // int32
  wire signed [31:0] sel_9052;  // int32
  wire signed [31:0] sel_9053;  // int32
  wire signed [31:0] sel_9054;  // int32
  wire signed [31:0] sel_9055;  // int32
  wire signed [31:0] sel_9056;  // int32
  wire signed [31:0] sel_9057;  // int32
  wire signed [31:0] sel_9058;  // int32
  wire signed [31:0] sel_9059;  // int32
  wire signed [31:0] sel_9060;  // int32
  wire signed [31:0] sel_9061;  // int32
  wire signed [31:0] sel_9062;  // int32
  wire signed [31:0] sel_9063;  // int32
  wire signed [31:0] s_583;  // int32
  wire signed [31:0] sel_1_1827;  // int32
  wire signed [31:0] sel_9064;  // int32
  wire signed [31:0] sel_1_1828;  // int32
  wire signed [31:0] sel_9065;  // int32
  wire signed [31:0] sel_1_1829;  // int32
  wire signed [31:0] sel_9066;  // int32
  wire signed [31:0] sel_1_1830;  // int32
  wire signed [31:0] sel_9067;  // int32
  wire signed [31:0] sel_1_1831;  // int32
  wire signed [31:0] sel_1_1832;  // int32
  wire signed [31:0] sel_1_1833;  // int32
  wire signed [31:0] sel_9068;  // int32
  wire signed [31:0] sel_1_1834;  // int32
  wire signed [31:0] sel_9069;  // int32
  wire signed [31:0] sel_9070;  // int32
  reg signed [31:0] sel_1_1835;  // int32
  wire cont_bits_31_33;
  wire sel_1_1836;
  wire signed [31:0] sel_9071;  // int32
  wire signed [31:0] sel_9072;  // int32
  wire signed [31:0] sel_9073;  // int32
  wire signed [31:0] sel_9074;  // int32
  wire signed [31:0] sel_9075;  // int32
  wire signed [31:0] sel_9076;  // int32
  wire signed [31:0] sel_9077;  // int32
  wire signed [31:0] sel_9078;  // int32
  wire signed [31:0] sel_9079;  // int32
  wire signed [31:0] sel_9080;  // int32
  wire signed [31:0] sel_9081;  // int32
  wire signed [31:0] sel_9082;  // int32
  wire signed [31:0] sel_9083;  // int32
  wire signed [31:0] sel_9084;  // int32
  wire signed [31:0] sel_9085;  // int32
  wire signed [31:0] s_584;  // int32
  wire signed [31:0] sel_1_1837;  // int32
  wire signed [31:0] sel_9086;  // int32
  wire signed [31:0] sel_1_1838;  // int32
  wire signed [31:0] sel_9087;  // int32
  wire signed [31:0] sel_1_1839;  // int32
  wire signed [31:0] sel_9088;  // int32
  wire signed [31:0] sel_1_1840;  // int32
  wire signed [31:0] sel_1_1841;  // int32
  wire signed [31:0] sel_1_1842;  // int32
  wire signed [31:0] sel_9089;  // int32
  wire signed [31:0] sel_1_1843;  // int32
  wire signed [31:0] sel_9090;  // int32
  wire signed [31:0] sel_9091;  // int32
  reg signed [31:0] sel_1_1844;  // int32
  wire cont_bits_22_33;
  wire sel_1_1845;
  wire signed [31:0] sel_9092;  // int32
  wire signed [31:0] sel_9093;  // int32
  wire signed [31:0] sel_9094;  // int32
  wire signed [31:0] sel_9095;  // int32
  wire signed [31:0] sel_9096;  // int32
  wire signed [31:0] sel_9097;  // int32
  wire signed [31:0] sel_9098;  // int32
  wire signed [31:0] sel_9099;  // int32
  wire signed [31:0] sel_9100;  // int32
  wire signed [31:0] sel_9101;  // int32
  wire signed [31:0] sel_9102;  // int32
  wire signed [31:0] sel_9103;  // int32
  wire signed [31:0] sel_9104;  // int32
  wire signed [31:0] sel_9105;  // int32
  wire signed [31:0] sel_9106;  // int32
  wire signed [31:0] s_585;  // int32
  wire signed [31:0] sel_1_1846;  // int32
  wire signed [31:0] sel_9107;  // int32
  wire signed [31:0] sel_1_1847;  // int32
  wire signed [31:0] sel_9108;  // int32
  wire signed [31:0] sel_1_1848;  // int32
  wire signed [31:0] sel_1_1849;  // int32
  wire signed [31:0] sel_1_1850;  // int32
  wire signed [31:0] sel_9109;  // int32
  wire signed [31:0] sel_1_1851;  // int32
  wire signed [31:0] sel_9110;  // int32
  wire signed [31:0] sel_9111;  // int32
  reg signed [31:0] sel_1_1852;  // int32
  wire cont_bits_21_33;
  wire sel_1_1853;
  wire signed [31:0] sel_9112;  // int32
  wire signed [31:0] sel_9113;  // int32
  wire signed [31:0] sel_9114;  // int32
  wire signed [31:0] sel_9115;  // int32
  wire signed [31:0] sel_9116;  // int32
  wire signed [31:0] sel_9117;  // int32
  wire signed [31:0] sel_9118;  // int32
  wire signed [31:0] sel_9119;  // int32
  wire signed [31:0] sel_9120;  // int32
  wire signed [31:0] sel_9121;  // int32
  wire signed [31:0] sel_9122;  // int32
  wire signed [31:0] sel_9123;  // int32
  wire signed [31:0] sel_9124;  // int32
  wire signed [31:0] sel_9125;  // int32
  wire signed [31:0] sel_9126;  // int32
  wire signed [31:0] s_586;  // int32
  wire signed [31:0] sel_1_1854;  // int32
  wire signed [31:0] sel_9127;  // int32
  wire signed [31:0] sel_1_1855;  // int32
  wire signed [31:0] sel_1_1856;  // int32
  wire signed [31:0] sel_1_1857;  // int32
  wire signed [31:0] sel_9128;  // int32
  wire signed [31:0] sel_1_1858;  // int32
  wire signed [31:0] sel_9129;  // int32
  wire signed [31:0] sel_9130;  // int32
  reg signed [31:0] sel_1_1859;  // int32
  wire cont_bits_12_33;
  wire sel_1_1860;
  wire signed [31:0] sel_9131;  // int32
  wire signed [31:0] sel_9132;  // int32
  wire signed [31:0] sel_9133;  // int32
  wire signed [31:0] sel_9134;  // int32
  wire signed [31:0] sel_9135;  // int32
  wire signed [31:0] sel_9136;  // int32
  wire signed [31:0] sel_9137;  // int32
  wire signed [31:0] sel_9138;  // int32
  wire signed [31:0] sel_9139;  // int32
  wire signed [31:0] sel_9140;  // int32
  wire signed [31:0] sel_9141;  // int32
  wire signed [31:0] sel_9142;  // int32
  wire signed [31:0] sel_9143;  // int32
  wire signed [31:0] sel_9144;  // int32
  wire signed [31:0] sel_9145;  // int32
  wire signed [31:0] s_587;  // int32
  wire signed [31:0] sel_1_1861;  // int32
  wire signed [31:0] sel_1_1862;  // int32
  wire signed [31:0] sel_1_1863;  // int32
  wire signed [31:0] sel_9146;  // int32
  wire signed [31:0] sel_1_1864;  // int32
  wire signed [31:0] sel_9147;  // int32
  wire signed [31:0] sel_9148;  // int32
  reg signed [31:0] sel_1_1865;  // int32
  wire cont_bits_38;
  wire sel_1_1866;
  wire sel_9149;
  wire sel_9150;
  reg  sel_1_1867;
  wire sel_9151;
  wire sel_9152;
  wire sel_9153;
  wire sel_9154;
  wire sel_9155;
  wire sel_9156;
  wire sel_9157;
  wire sel_9158;
  wire sel_9159;
  wire sel_9160;
  wire sel_9161;
  wire sel_9162;
  wire s_588;
  wire sel_2_1485;
  wire s_589;
  wire sel_2_1486;
  wire s_590;
  wire sel_2_1487;
  wire s_591;
  wire sel_2_1488;
  wire s_592;
  wire sel_2_1489;
  wire s_593;
  wire sel_2_1490;
  wire s_594;
  wire sel_2_1491;
  wire s_595;
  wire sel_2_1492;
  wire sel_9163;
  wire sel_9164;
  wire sel_9165;
  wire s_596;
  wire sel_2_1493;
  wire s_597;
  wire sel_2_1494;
  wire s_598;
  wire sel_2_1495;
  wire s_599;
  wire sel_2_1496;
  wire s_600;
  wire sel_2_1497;
  wire s_601;
  wire sel_2_1498;
  wire s_602;
  wire sel_2_1499;
  wire s_603;
  wire sel_2_1500;
  wire sel_2_1501;
  wire sel_2_1502;
  wire sel_9166;
  wire sel_2_1503;
  wire sel_9167;
  wire sel_9168;
  reg  sel_2_1504;
  wire sel_9169;
  wire sel_9170;
  wire sel_9171;
  wire sel_9172;
  wire sel_9173;
  wire sel_9174;
  wire sel_9175;
  wire sel_9176;
  wire sel_9177;
  wire sel_9178;
  wire sel_9179;
  wire signed [31:0] sel_9180;  // int32
  wire signed [31:0] sel_9181;  // int32
  wire signed [31:0] sel_9182;  // int32
  wire signed [31:0] sel_9183;  // int32
  wire signed [31:0] sel_9184;  // int32
  wire signed [31:0] sel_9185;  // int32
  wire signed [31:0] sel_9186;  // int32
  wire signed [31:0] sel_9187;  // int32
  wire signed [31:0] sel_9188;  // int32
  wire signed [31:0] sel_9189;  // int32
  wire signed [31:0] sel_9190;  // int32
  wire signed [31:0] sel_9191;  // int32
  wire signed [31:0] s_604;  // int32
  wire signed [31:0] sel_1_1868;  // int32
  wire signed [31:0] sel_9192;  // int32
  wire signed [31:0] sel_1_1869;  // int32
  wire signed [31:0] sel_9193;  // int32
  wire signed [31:0] sel_1_1870;  // int32
  wire signed [31:0] sel_9194;  // int32
  wire signed [31:0] sel_1_1871;  // int32
  wire signed [31:0] sel_9195;  // int32
  wire signed [31:0] sel_1_1872;  // int32
  wire signed [31:0] sel_9196;  // int32
  wire signed [31:0] sel_1_1873;  // int32
  wire signed [31:0] sel_9197;  // int32
  wire signed [31:0] sel_1_1874;  // int32
  wire signed [31:0] sel_9198;  // int32
  wire signed [31:0] sel_1_1875;  // int32
  wire signed [31:0] sel_9199;  // int32
  wire signed [31:0] sel_9200;  // int32
  wire signed [31:0] sel_9201;  // int32
  reg signed [31:0] sel_1_1876;  // int32
  wire cont_bits_41_34;
  wire signed [31:0] sel_9202;  // int32
  wire signed [31:0] sel_9203;  // int32
  wire signed [31:0] sel_9204;  // int32
  wire signed [31:0] sel_9205;  // int32
  wire signed [31:0] sel_9206;  // int32
  wire signed [31:0] sel_9207;  // int32
  wire signed [31:0] sel_9208;  // int32
  wire signed [31:0] sel_9209;  // int32
  wire signed [31:0] sel_9210;  // int32
  wire signed [31:0] sel_9211;  // int32
  wire signed [31:0] sel_9212;  // int32
  wire signed [31:0] sel_9213;  // int32
  wire signed [31:0] s_605;  // int32
  wire signed [31:0] sel_1_1877;  // int32
  wire signed [31:0] sel_9214;  // int32
  wire signed [31:0] sel_1_1878;  // int32
  wire signed [31:0] sel_9215;  // int32
  wire signed [31:0] sel_1_1879;  // int32
  wire signed [31:0] sel_9216;  // int32
  wire signed [31:0] sel_1_1880;  // int32
  wire signed [31:0] sel_9217;  // int32
  wire signed [31:0] sel_1_1881;  // int32
  wire signed [31:0] sel_9218;  // int32
  wire signed [31:0] sel_1_1882;  // int32
  wire signed [31:0] sel_9219;  // int32
  wire signed [31:0] sel_1_1883;  // int32
  wire signed [31:0] sel_9220;  // int32
  wire signed [31:0] sel_9221;  // int32
  wire signed [31:0] sel_9222;  // int32
  reg signed [31:0] sel_1_1884;  // int32
  wire cont_bits_42_34;
  wire sel_1_1885;
  wire signed [31:0] sel_9223;  // int32
  wire signed [31:0] sel_9224;  // int32
  wire signed [31:0] sel_9225;  // int32
  wire signed [31:0] sel_9226;  // int32
  wire signed [31:0] sel_9227;  // int32
  wire signed [31:0] sel_9228;  // int32
  wire signed [31:0] sel_9229;  // int32
  wire signed [31:0] sel_9230;  // int32
  wire signed [31:0] sel_9231;  // int32
  wire signed [31:0] sel_9232;  // int32
  wire signed [31:0] sel_9233;  // int32
  wire signed [31:0] sel_9234;  // int32
  wire signed [31:0] s_606;  // int32
  wire signed [31:0] sel_1_1886;  // int32
  wire signed [31:0] sel_9235;  // int32
  wire signed [31:0] sel_1_1887;  // int32
  wire signed [31:0] sel_9236;  // int32
  wire signed [31:0] sel_1_1888;  // int32
  wire signed [31:0] sel_9237;  // int32
  wire signed [31:0] sel_1_1889;  // int32
  wire signed [31:0] sel_9238;  // int32
  wire signed [31:0] sel_1_1890;  // int32
  wire signed [31:0] sel_9239;  // int32
  wire signed [31:0] sel_1_1891;  // int32
  wire signed [31:0] sel_9240;  // int32
  wire signed [31:0] sel_9241;  // int32
  wire signed [31:0] sel_9242;  // int32
  reg signed [31:0] sel_1_1892;  // int32
  wire cont_bits_32_34;
  wire sel_1_1893;
  wire signed [31:0] sel_9243;  // int32
  wire signed [31:0] sel_9244;  // int32
  wire signed [31:0] sel_9245;  // int32
  wire signed [31:0] sel_9246;  // int32
  wire signed [31:0] sel_9247;  // int32
  wire signed [31:0] sel_9248;  // int32
  wire signed [31:0] sel_9249;  // int32
  wire signed [31:0] sel_9250;  // int32
  wire signed [31:0] sel_9251;  // int32
  wire signed [31:0] sel_9252;  // int32
  wire signed [31:0] sel_9253;  // int32
  wire signed [31:0] sel_9254;  // int32
  wire signed [31:0] s_607;  // int32
  wire signed [31:0] sel_1_1894;  // int32
  wire signed [31:0] sel_9255;  // int32
  wire signed [31:0] sel_1_1895;  // int32
  wire signed [31:0] sel_9256;  // int32
  wire signed [31:0] sel_1_1896;  // int32
  wire signed [31:0] sel_9257;  // int32
  wire signed [31:0] sel_1_1897;  // int32
  wire signed [31:0] sel_9258;  // int32
  wire signed [31:0] sel_1_1898;  // int32
  wire signed [31:0] sel_9259;  // int32
  wire signed [31:0] sel_9260;  // int32
  wire signed [31:0] sel_9261;  // int32
  reg signed [31:0] sel_1_1899;  // int32
  wire cont_bits_31_34;
  wire sel_1_1900;
  wire signed [31:0] sel_9262;  // int32
  wire signed [31:0] sel_9263;  // int32
  wire signed [31:0] sel_9264;  // int32
  wire signed [31:0] sel_9265;  // int32
  wire signed [31:0] sel_9266;  // int32
  wire signed [31:0] sel_9267;  // int32
  wire signed [31:0] sel_9268;  // int32
  wire signed [31:0] sel_9269;  // int32
  wire signed [31:0] sel_9270;  // int32
  wire signed [31:0] sel_9271;  // int32
  wire signed [31:0] sel_9272;  // int32
  wire signed [31:0] sel_9273;  // int32
  wire signed [31:0] s_608;  // int32
  wire signed [31:0] sel_1_1901;  // int32
  wire signed [31:0] sel_9274;  // int32
  wire signed [31:0] sel_1_1902;  // int32
  wire signed [31:0] sel_9275;  // int32
  wire signed [31:0] sel_1_1903;  // int32
  wire signed [31:0] sel_9276;  // int32
  wire signed [31:0] sel_1_1904;  // int32
  wire signed [31:0] sel_9277;  // int32
  wire signed [31:0] sel_9278;  // int32
  wire signed [31:0] sel_9279;  // int32
  reg signed [31:0] sel_1_1905;  // int32
  wire cont_bits_22_34;
  wire sel_1_1906;
  wire signed [31:0] sel_9280;  // int32
  wire signed [31:0] sel_9281;  // int32
  wire signed [31:0] sel_9282;  // int32
  wire signed [31:0] sel_9283;  // int32
  wire signed [31:0] sel_9284;  // int32
  wire signed [31:0] sel_9285;  // int32
  wire signed [31:0] sel_9286;  // int32
  wire signed [31:0] sel_9287;  // int32
  wire signed [31:0] sel_9288;  // int32
  wire signed [31:0] sel_9289;  // int32
  wire signed [31:0] sel_9290;  // int32
  wire signed [31:0] sel_9291;  // int32
  wire signed [31:0] s_609;  // int32
  wire signed [31:0] sel_1_1907;  // int32
  wire signed [31:0] sel_9292;  // int32
  wire signed [31:0] sel_1_1908;  // int32
  wire signed [31:0] sel_9293;  // int32
  wire signed [31:0] sel_1_1909;  // int32
  wire signed [31:0] sel_9294;  // int32
  wire signed [31:0] sel_9295;  // int32
  wire signed [31:0] sel_9296;  // int32
  reg signed [31:0] sel_1_1910;  // int32
  wire cont_bits_21_34;
  wire sel_1_1911;
  wire signed [31:0] sel_9297;  // int32
  wire signed [31:0] sel_9298;  // int32
  wire signed [31:0] sel_9299;  // int32
  wire signed [31:0] sel_9300;  // int32
  wire signed [31:0] sel_9301;  // int32
  wire signed [31:0] sel_9302;  // int32
  wire signed [31:0] sel_9303;  // int32
  wire signed [31:0] sel_9304;  // int32
  wire signed [31:0] sel_9305;  // int32
  wire signed [31:0] sel_9306;  // int32
  wire signed [31:0] sel_9307;  // int32
  wire signed [31:0] sel_9308;  // int32
  wire signed [31:0] s_610;  // int32
  wire signed [31:0] sel_1_1912;  // int32
  wire signed [31:0] sel_9309;  // int32
  wire signed [31:0] sel_1_1913;  // int32
  wire signed [31:0] sel_9310;  // int32
  wire signed [31:0] sel_9311;  // int32
  wire signed [31:0] sel_9312;  // int32
  reg signed [31:0] sel_1_1914;  // int32
  wire cont_bits_12_34;
  wire sel_1_1915;
  wire signed [31:0] sel_9313;  // int32
  wire signed [31:0] sel_9314;  // int32
  wire signed [31:0] sel_9315;  // int32
  wire signed [31:0] sel_9316;  // int32
  wire signed [31:0] sel_9317;  // int32
  wire signed [31:0] sel_9318;  // int32
  wire signed [31:0] sel_9319;  // int32
  wire signed [31:0] sel_9320;  // int32
  wire signed [31:0] sel_9321;  // int32
  wire signed [31:0] sel_9322;  // int32
  wire signed [31:0] sel_9323;  // int32
  wire signed [31:0] sel_9324;  // int32
  wire signed [31:0] s_611;  // int32
  wire signed [31:0] sel_1_1916;  // int32
  wire signed [31:0] sel_9325;  // int32
  wire signed [31:0] sel_9326;  // int32
  wire signed [31:0] sel_9327;  // int32
  reg signed [31:0] sel_1_1917;  // int32
  wire cont_bits_39;
  wire sel_1_1918;
  wire signed [31:0] sel_9328;  // int32
  wire signed [31:0] sel_9329;  // int32
  wire signed [31:0] sel_9330;  // int32
  wire signed [31:0] sel_9331;  // int32
  wire signed [31:0] sel_9332;  // int32
  wire signed [31:0] sel_9333;  // int32
  wire signed [31:0] sel_9334;  // int32
  wire signed [31:0] sel_9335;  // int32
  wire signed [31:0] sel_9336;  // int32
  wire signed [31:0] sel_9337;  // int32
  wire signed [31:0] sel_9338;  // int32
  wire signed [31:0] sel_9339;  // int32
  wire signed [31:0] sel_9340;  // int32
  wire signed [31:0] sel_9341;  // int32
  wire signed [31:0] sel_9342;  // int32
  wire signed [31:0] s_612;  // int32
  wire signed [31:0] sel_1_1919;  // int32
  wire signed [31:0] sel_9343;  // int32
  wire signed [31:0] sel_1_1920;  // int32
  wire signed [31:0] sel_9344;  // int32
  wire signed [31:0] sel_1_1921;  // int32
  wire signed [31:0] sel_9345;  // int32
  wire signed [31:0] sel_1_1922;  // int32
  wire signed [31:0] sel_9346;  // int32
  wire signed [31:0] sel_1_1923;  // int32
  wire signed [31:0] sel_9347;  // int32
  wire signed [31:0] sel_1_1924;  // int32
  wire signed [31:0] sel_9348;  // int32
  wire signed [31:0] sel_1_1925;  // int32
  wire signed [31:0] sel_9349;  // int32
  wire signed [31:0] sel_1_1926;  // int32
  wire signed [31:0] sel_1_1927;  // int32
  wire signed [31:0] sel_1_1928;  // int32
  wire signed [31:0] sel_9350;  // int32
  wire signed [31:0] sel_1_1929;  // int32
  wire signed [31:0] sel_9351;  // int32
  wire signed [31:0] sel_9352;  // int32
  reg signed [31:0] sel_1_1930;  // int32
  wire cont_bits_41_35;
  wire signed [31:0] sel_9353;  // int32
  wire signed [31:0] sel_9354;  // int32
  wire signed [31:0] sel_9355;  // int32
  wire signed [31:0] sel_9356;  // int32
  wire signed [31:0] sel_9357;  // int32
  wire signed [31:0] sel_9358;  // int32
  wire signed [31:0] sel_9359;  // int32
  wire signed [31:0] sel_9360;  // int32
  wire signed [31:0] sel_9361;  // int32
  wire signed [31:0] sel_9362;  // int32
  wire signed [31:0] sel_9363;  // int32
  wire signed [31:0] sel_9364;  // int32
  wire signed [31:0] sel_9365;  // int32
  wire signed [31:0] sel_9366;  // int32
  wire signed [31:0] sel_9367;  // int32
  wire signed [31:0] s_613;  // int32
  wire signed [31:0] sel_1_1931;  // int32
  wire signed [31:0] sel_9368;  // int32
  wire signed [31:0] sel_1_1932;  // int32
  wire signed [31:0] sel_9369;  // int32
  wire signed [31:0] sel_1_1933;  // int32
  wire signed [31:0] sel_9370;  // int32
  wire signed [31:0] sel_1_1934;  // int32
  wire signed [31:0] sel_9371;  // int32
  wire signed [31:0] sel_1_1935;  // int32
  wire signed [31:0] sel_9372;  // int32
  wire signed [31:0] sel_1_1936;  // int32
  wire signed [31:0] sel_9373;  // int32
  wire signed [31:0] sel_1_1937;  // int32
  wire signed [31:0] sel_1_1938;  // int32
  wire signed [31:0] sel_1_1939;  // int32
  wire signed [31:0] sel_9374;  // int32
  wire signed [31:0] sel_1_1940;  // int32
  wire signed [31:0] sel_9375;  // int32
  wire signed [31:0] sel_9376;  // int32
  reg signed [31:0] sel_1_1941;  // int32
  wire cont_bits_42_35;
  wire sel_1_1942;
  wire signed [31:0] sel_9377;  // int32
  wire signed [31:0] sel_9378;  // int32
  wire signed [31:0] sel_9379;  // int32
  wire signed [31:0] sel_9380;  // int32
  wire signed [31:0] sel_9381;  // int32
  wire signed [31:0] sel_9382;  // int32
  wire signed [31:0] sel_9383;  // int32
  wire signed [31:0] sel_9384;  // int32
  wire signed [31:0] sel_9385;  // int32
  wire signed [31:0] sel_9386;  // int32
  wire signed [31:0] sel_9387;  // int32
  wire signed [31:0] sel_9388;  // int32
  wire signed [31:0] sel_9389;  // int32
  wire signed [31:0] sel_9390;  // int32
  wire signed [31:0] sel_9391;  // int32
  wire signed [31:0] s_614;  // int32
  wire signed [31:0] sel_1_1943;  // int32
  wire signed [31:0] sel_9392;  // int32
  wire signed [31:0] sel_1_1944;  // int32
  wire signed [31:0] sel_9393;  // int32
  wire signed [31:0] sel_1_1945;  // int32
  wire signed [31:0] sel_9394;  // int32
  wire signed [31:0] sel_1_1946;  // int32
  wire signed [31:0] sel_9395;  // int32
  wire signed [31:0] sel_1_1947;  // int32
  wire signed [31:0] sel_9396;  // int32
  wire signed [31:0] sel_1_1948;  // int32
  wire signed [31:0] sel_1_1949;  // int32
  wire signed [31:0] sel_1_1950;  // int32
  wire signed [31:0] sel_9397;  // int32
  wire signed [31:0] sel_1_1951;  // int32
  wire signed [31:0] sel_9398;  // int32
  wire signed [31:0] sel_9399;  // int32
  reg signed [31:0] sel_1_1952;  // int32
  wire cont_bits_32_35;
  wire sel_1_1953;
  wire signed [31:0] sel_9400;  // int32
  wire signed [31:0] sel_9401;  // int32
  wire signed [31:0] sel_9402;  // int32
  wire signed [31:0] sel_9403;  // int32
  wire signed [31:0] sel_9404;  // int32
  wire signed [31:0] sel_9405;  // int32
  wire signed [31:0] sel_9406;  // int32
  wire signed [31:0] sel_9407;  // int32
  wire signed [31:0] sel_9408;  // int32
  wire signed [31:0] sel_9409;  // int32
  wire signed [31:0] sel_9410;  // int32
  wire signed [31:0] sel_9411;  // int32
  wire signed [31:0] sel_9412;  // int32
  wire signed [31:0] sel_9413;  // int32
  wire signed [31:0] sel_9414;  // int32
  wire signed [31:0] s_615;  // int32
  wire signed [31:0] sel_1_1954;  // int32
  wire signed [31:0] sel_9415;  // int32
  wire signed [31:0] sel_1_1955;  // int32
  wire signed [31:0] sel_9416;  // int32
  wire signed [31:0] sel_1_1956;  // int32
  wire signed [31:0] sel_9417;  // int32
  wire signed [31:0] sel_1_1957;  // int32
  wire signed [31:0] sel_9418;  // int32
  wire signed [31:0] sel_1_1958;  // int32
  wire signed [31:0] sel_1_1959;  // int32
  wire signed [31:0] sel_1_1960;  // int32
  wire signed [31:0] sel_9419;  // int32
  wire signed [31:0] sel_1_1961;  // int32
  wire signed [31:0] sel_9420;  // int32
  wire signed [31:0] sel_9421;  // int32
  reg signed [31:0] sel_1_1962;  // int32
  wire cont_bits_31_35;
  wire sel_1_1963;
  wire signed [31:0] sel_9422;  // int32
  wire signed [31:0] sel_9423;  // int32
  wire signed [31:0] sel_9424;  // int32
  wire signed [31:0] sel_9425;  // int32
  wire signed [31:0] sel_9426;  // int32
  wire signed [31:0] sel_9427;  // int32
  wire signed [31:0] sel_9428;  // int32
  wire signed [31:0] sel_9429;  // int32
  wire signed [31:0] sel_9430;  // int32
  wire signed [31:0] sel_9431;  // int32
  wire signed [31:0] sel_9432;  // int32
  wire signed [31:0] sel_9433;  // int32
  wire signed [31:0] sel_9434;  // int32
  wire signed [31:0] sel_9435;  // int32
  wire signed [31:0] sel_9436;  // int32
  wire signed [31:0] s_616;  // int32
  wire signed [31:0] sel_1_1964;  // int32
  wire signed [31:0] sel_9437;  // int32
  wire signed [31:0] sel_1_1965;  // int32
  wire signed [31:0] sel_9438;  // int32
  wire signed [31:0] sel_1_1966;  // int32
  wire signed [31:0] sel_9439;  // int32
  wire signed [31:0] sel_1_1967;  // int32
  wire signed [31:0] sel_1_1968;  // int32
  wire signed [31:0] sel_1_1969;  // int32
  wire signed [31:0] sel_9440;  // int32
  wire signed [31:0] sel_1_1970;  // int32
  wire signed [31:0] sel_9441;  // int32
  wire signed [31:0] sel_9442;  // int32
  reg signed [31:0] sel_1_1971;  // int32
  wire cont_bits_22_35;
  wire sel_1_1972;
  wire signed [31:0] sel_9443;  // int32
  wire signed [31:0] sel_9444;  // int32
  wire signed [31:0] sel_9445;  // int32
  wire signed [31:0] sel_9446;  // int32
  wire signed [31:0] sel_9447;  // int32
  wire signed [31:0] sel_9448;  // int32
  wire signed [31:0] sel_9449;  // int32
  wire signed [31:0] sel_9450;  // int32
  wire signed [31:0] sel_9451;  // int32
  wire signed [31:0] sel_9452;  // int32
  wire signed [31:0] sel_9453;  // int32
  wire signed [31:0] sel_9454;  // int32
  wire signed [31:0] sel_9455;  // int32
  wire signed [31:0] sel_9456;  // int32
  wire signed [31:0] sel_9457;  // int32
  wire signed [31:0] s_617;  // int32
  wire signed [31:0] sel_1_1973;  // int32
  wire signed [31:0] sel_9458;  // int32
  wire signed [31:0] sel_1_1974;  // int32
  wire signed [31:0] sel_9459;  // int32
  wire signed [31:0] sel_1_1975;  // int32
  wire signed [31:0] sel_1_1976;  // int32
  wire signed [31:0] sel_1_1977;  // int32
  wire signed [31:0] sel_9460;  // int32
  wire signed [31:0] sel_1_1978;  // int32
  wire signed [31:0] sel_9461;  // int32
  wire signed [31:0] sel_9462;  // int32
  reg signed [31:0] sel_1_1979;  // int32
  wire cont_bits_21_35;
  wire sel_1_1980;
  wire signed [31:0] sel_9463;  // int32
  wire signed [31:0] sel_9464;  // int32
  wire signed [31:0] sel_9465;  // int32
  wire signed [31:0] sel_9466;  // int32
  wire signed [31:0] sel_9467;  // int32
  wire signed [31:0] sel_9468;  // int32
  wire signed [31:0] sel_9469;  // int32
  wire signed [31:0] sel_9470;  // int32
  wire signed [31:0] sel_9471;  // int32
  wire signed [31:0] sel_9472;  // int32
  wire signed [31:0] sel_9473;  // int32
  wire signed [31:0] sel_9474;  // int32
  wire signed [31:0] sel_9475;  // int32
  wire signed [31:0] sel_9476;  // int32
  wire signed [31:0] sel_9477;  // int32
  wire signed [31:0] s_618;  // int32
  wire signed [31:0] sel_1_1981;  // int32
  wire signed [31:0] sel_9478;  // int32
  wire signed [31:0] sel_1_1982;  // int32
  wire signed [31:0] sel_1_1983;  // int32
  wire signed [31:0] sel_1_1984;  // int32
  wire signed [31:0] sel_9479;  // int32
  wire signed [31:0] sel_1_1985;  // int32
  wire signed [31:0] sel_9480;  // int32
  wire signed [31:0] sel_9481;  // int32
  reg signed [31:0] sel_1_1986;  // int32
  wire cont_bits_12_35;
  wire sel_1_1987;
  wire signed [31:0] sel_9482;  // int32
  wire signed [31:0] sel_9483;  // int32
  wire signed [31:0] sel_9484;  // int32
  wire signed [31:0] sel_9485;  // int32
  wire signed [31:0] sel_9486;  // int32
  wire signed [31:0] sel_9487;  // int32
  wire signed [31:0] sel_9488;  // int32
  wire signed [31:0] sel_9489;  // int32
  wire signed [31:0] sel_9490;  // int32
  wire signed [31:0] sel_9491;  // int32
  wire signed [31:0] sel_9492;  // int32
  wire signed [31:0] sel_9493;  // int32
  wire signed [31:0] sel_9494;  // int32
  wire signed [31:0] sel_9495;  // int32
  wire signed [31:0] sel_9496;  // int32
  wire signed [31:0] s_619;  // int32
  wire signed [31:0] sel_1_1988;  // int32
  wire signed [31:0] sel_1_1989;  // int32
  wire signed [31:0] sel_1_1990;  // int32
  wire signed [31:0] sel_9497;  // int32
  wire signed [31:0] sel_1_1991;  // int32
  wire signed [31:0] sel_9498;  // int32
  wire signed [31:0] sel_9499;  // int32
  reg signed [31:0] sel_1_1992;  // int32
  wire cont_bits_40;
  wire sel_1_1993;
  wire sel_9500;
  wire sel_9501;
  reg  sel_1_1994;
  wire sel_9502;
  wire sel_9503;
  wire sel_9504;
  wire sel_9505;
  wire sel_9506;
  wire sel_9507;
  wire sel_9508;
  wire sel_9509;
  wire sel_9510;
  wire sel_9511;
  wire sel_9512;
  wire sel_9513;
  wire s_620;
  wire sel_2_1505;
  wire s_621;
  wire sel_2_1506;
  wire s_622;
  wire sel_2_1507;
  wire s_623;
  wire sel_2_1508;
  wire s_624;
  wire sel_2_1509;
  wire s_625;
  wire sel_2_1510;
  wire s_626;
  wire sel_2_1511;
  wire s_627;
  wire sel_2_1512;
  wire sel_9514;
  wire sel_9515;
  wire sel_9516;
  wire s_628;
  wire sel_2_1513;
  wire s_629;
  wire sel_2_1514;
  wire s_630;
  wire sel_2_1515;
  wire s_631;
  wire sel_2_1516;
  wire s_632;
  wire sel_2_1517;
  wire s_633;
  wire sel_2_1518;
  wire s_634;
  wire sel_2_1519;
  wire s_635;
  wire sel_2_1520;
  wire sel_2_1521;
  wire sel_2_1522;
  wire sel_9517;
  wire sel_2_1523;
  wire sel_9518;
  wire sel_9519;
  reg  sel_2_1524;
  wire sel_9520;
  wire sel_9521;
  wire sel_9522;
  wire sel_9523;
  wire sel_9524;
  wire sel_9525;
  wire sel_9526;
  wire sel_9527;
  wire sel_9528;
  wire sel_9529;
  wire sel_9530;
  wire signed [31:0] sel_9531;  // int32
  wire signed [31:0] sel_9532;  // int32
  wire signed [31:0] sel_9533;  // int32
  wire signed [31:0] sel_9534;  // int32
  wire signed [31:0] sel_9535;  // int32
  wire signed [31:0] sel_9536;  // int32
  wire signed [31:0] sel_9537;  // int32
  wire signed [31:0] sel_9538;  // int32
  wire signed [31:0] sel_9539;  // int32
  wire signed [31:0] sel_9540;  // int32
  wire signed [31:0] sel_9541;  // int32
  wire signed [31:0] sel_9542;  // int32
  wire signed [31:0] s_636;  // int32
  wire signed [31:0] sel_1_1995;  // int32
  wire signed [31:0] sel_9543;  // int32
  wire signed [31:0] sel_1_1996;  // int32
  wire signed [31:0] sel_9544;  // int32
  wire signed [31:0] sel_1_1997;  // int32
  wire signed [31:0] sel_9545;  // int32
  wire signed [31:0] sel_1_1998;  // int32
  wire signed [31:0] sel_9546;  // int32
  wire signed [31:0] sel_1_1999;  // int32
  wire signed [31:0] sel_9547;  // int32
  wire signed [31:0] sel_1_2000;  // int32
  wire signed [31:0] sel_9548;  // int32
  wire signed [31:0] sel_1_2001;  // int32
  wire signed [31:0] sel_9549;  // int32
  wire signed [31:0] sel_1_2002;  // int32
  wire signed [31:0] sel_9550;  // int32
  wire signed [31:0] sel_9551;  // int32
  wire signed [31:0] sel_9552;  // int32
  reg signed [31:0] sel_1_2003;  // int32
  wire cont_bits_41_36;
  wire signed [31:0] sel_9553;  // int32
  wire signed [31:0] sel_9554;  // int32
  wire signed [31:0] sel_9555;  // int32
  wire signed [31:0] sel_9556;  // int32
  wire signed [31:0] sel_9557;  // int32
  wire signed [31:0] sel_9558;  // int32
  wire signed [31:0] sel_9559;  // int32
  wire signed [31:0] sel_9560;  // int32
  wire signed [31:0] sel_9561;  // int32
  wire signed [31:0] sel_9562;  // int32
  wire signed [31:0] sel_9563;  // int32
  wire signed [31:0] sel_9564;  // int32
  wire signed [31:0] s_637;  // int32
  wire signed [31:0] sel_1_2004;  // int32
  wire signed [31:0] sel_9565;  // int32
  wire signed [31:0] sel_1_2005;  // int32
  wire signed [31:0] sel_9566;  // int32
  wire signed [31:0] sel_1_2006;  // int32
  wire signed [31:0] sel_9567;  // int32
  wire signed [31:0] sel_1_2007;  // int32
  wire signed [31:0] sel_9568;  // int32
  wire signed [31:0] sel_1_2008;  // int32
  wire signed [31:0] sel_9569;  // int32
  wire signed [31:0] sel_1_2009;  // int32
  wire signed [31:0] sel_9570;  // int32
  wire signed [31:0] sel_1_2010;  // int32
  wire signed [31:0] sel_9571;  // int32
  wire signed [31:0] sel_9572;  // int32
  wire signed [31:0] sel_9573;  // int32
  reg signed [31:0] sel_1_2011;  // int32
  wire cont_bits_42_36;
  wire sel_1_2012;
  wire signed [31:0] sel_9574;  // int32
  wire signed [31:0] sel_9575;  // int32
  wire signed [31:0] sel_9576;  // int32
  wire signed [31:0] sel_9577;  // int32
  wire signed [31:0] sel_9578;  // int32
  wire signed [31:0] sel_9579;  // int32
  wire signed [31:0] sel_9580;  // int32
  wire signed [31:0] sel_9581;  // int32
  wire signed [31:0] sel_9582;  // int32
  wire signed [31:0] sel_9583;  // int32
  wire signed [31:0] sel_9584;  // int32
  wire signed [31:0] sel_9585;  // int32
  wire signed [31:0] s_638;  // int32
  wire signed [31:0] sel_1_2013;  // int32
  wire signed [31:0] sel_9586;  // int32
  wire signed [31:0] sel_1_2014;  // int32
  wire signed [31:0] sel_9587;  // int32
  wire signed [31:0] sel_1_2015;  // int32
  wire signed [31:0] sel_9588;  // int32
  wire signed [31:0] sel_1_2016;  // int32
  wire signed [31:0] sel_9589;  // int32
  wire signed [31:0] sel_1_2017;  // int32
  wire signed [31:0] sel_9590;  // int32
  wire signed [31:0] sel_1_2018;  // int32
  wire signed [31:0] sel_9591;  // int32
  wire signed [31:0] sel_9592;  // int32
  wire signed [31:0] sel_9593;  // int32
  reg signed [31:0] sel_1_2019;  // int32
  wire cont_bits_32_36;
  wire sel_1_2020;
  wire signed [31:0] sel_9594;  // int32
  wire signed [31:0] sel_9595;  // int32
  wire signed [31:0] sel_9596;  // int32
  wire signed [31:0] sel_9597;  // int32
  wire signed [31:0] sel_9598;  // int32
  wire signed [31:0] sel_9599;  // int32
  wire signed [31:0] sel_9600;  // int32
  wire signed [31:0] sel_9601;  // int32
  wire signed [31:0] sel_9602;  // int32
  wire signed [31:0] sel_9603;  // int32
  wire signed [31:0] sel_9604;  // int32
  wire signed [31:0] sel_9605;  // int32
  wire signed [31:0] s_639;  // int32
  wire signed [31:0] sel_1_2021;  // int32
  wire signed [31:0] sel_9606;  // int32
  wire signed [31:0] sel_1_2022;  // int32
  wire signed [31:0] sel_9607;  // int32
  wire signed [31:0] sel_1_2023;  // int32
  wire signed [31:0] sel_9608;  // int32
  wire signed [31:0] sel_1_2024;  // int32
  wire signed [31:0] sel_9609;  // int32
  wire signed [31:0] sel_1_2025;  // int32
  wire signed [31:0] sel_9610;  // int32
  wire signed [31:0] sel_9611;  // int32
  wire signed [31:0] sel_9612;  // int32
  reg signed [31:0] sel_1_2026;  // int32
  wire cont_bits_31_36;
  wire sel_1_2027;
  wire signed [31:0] sel_9613;  // int32
  wire signed [31:0] sel_9614;  // int32
  wire signed [31:0] sel_9615;  // int32
  wire signed [31:0] sel_9616;  // int32
  wire signed [31:0] sel_9617;  // int32
  wire signed [31:0] sel_9618;  // int32
  wire signed [31:0] sel_9619;  // int32
  wire signed [31:0] sel_9620;  // int32
  wire signed [31:0] sel_9621;  // int32
  wire signed [31:0] sel_9622;  // int32
  wire signed [31:0] sel_9623;  // int32
  wire signed [31:0] sel_9624;  // int32
  wire signed [31:0] s_640;  // int32
  wire signed [31:0] sel_1_2028;  // int32
  wire signed [31:0] sel_9625;  // int32
  wire signed [31:0] sel_1_2029;  // int32
  wire signed [31:0] sel_9626;  // int32
  wire signed [31:0] sel_1_2030;  // int32
  wire signed [31:0] sel_9627;  // int32
  wire signed [31:0] sel_1_2031;  // int32
  wire signed [31:0] sel_9628;  // int32
  wire signed [31:0] sel_9629;  // int32
  wire signed [31:0] sel_9630;  // int32
  reg signed [31:0] sel_1_2032;  // int32
  wire cont_bits_22_36;
  wire sel_1_2033;
  wire signed [31:0] sel_9631;  // int32
  wire signed [31:0] sel_9632;  // int32
  wire signed [31:0] sel_9633;  // int32
  wire signed [31:0] sel_9634;  // int32
  wire signed [31:0] sel_9635;  // int32
  wire signed [31:0] sel_9636;  // int32
  wire signed [31:0] sel_9637;  // int32
  wire signed [31:0] sel_9638;  // int32
  wire signed [31:0] sel_9639;  // int32
  wire signed [31:0] sel_9640;  // int32
  wire signed [31:0] sel_9641;  // int32
  wire signed [31:0] sel_9642;  // int32
  wire signed [31:0] s_641;  // int32
  wire signed [31:0] sel_1_2034;  // int32
  wire signed [31:0] sel_9643;  // int32
  wire signed [31:0] sel_1_2035;  // int32
  wire signed [31:0] sel_9644;  // int32
  wire signed [31:0] sel_1_2036;  // int32
  wire signed [31:0] sel_9645;  // int32
  wire signed [31:0] sel_9646;  // int32
  wire signed [31:0] sel_9647;  // int32
  reg signed [31:0] sel_1_2037;  // int32
  wire cont_bits_21_36;
  wire sel_1_2038;
  wire signed [31:0] sel_9648;  // int32
  wire signed [31:0] sel_9649;  // int32
  wire signed [31:0] sel_9650;  // int32
  wire signed [31:0] sel_9651;  // int32
  wire signed [31:0] sel_9652;  // int32
  wire signed [31:0] sel_9653;  // int32
  wire signed [31:0] sel_9654;  // int32
  wire signed [31:0] sel_9655;  // int32
  wire signed [31:0] sel_9656;  // int32
  wire signed [31:0] sel_9657;  // int32
  wire signed [31:0] sel_9658;  // int32
  wire signed [31:0] sel_9659;  // int32
  wire signed [31:0] s_642;  // int32
  wire signed [31:0] sel_1_2039;  // int32
  wire signed [31:0] sel_9660;  // int32
  wire signed [31:0] sel_1_2040;  // int32
  wire signed [31:0] sel_9661;  // int32
  wire signed [31:0] sel_9662;  // int32
  wire signed [31:0] sel_9663;  // int32
  reg signed [31:0] sel_1_2041;  // int32
  wire cont_bits_12_36;
  wire sel_1_2042;
  wire signed [31:0] sel_9664;  // int32
  wire signed [31:0] sel_9665;  // int32
  wire signed [31:0] sel_9666;  // int32
  wire signed [31:0] sel_9667;  // int32
  wire signed [31:0] sel_9668;  // int32
  wire signed [31:0] sel_9669;  // int32
  wire signed [31:0] sel_9670;  // int32
  wire signed [31:0] sel_9671;  // int32
  wire signed [31:0] sel_9672;  // int32
  wire signed [31:0] sel_9673;  // int32
  wire signed [31:0] sel_9674;  // int32
  wire signed [31:0] sel_9675;  // int32
  wire signed [31:0] s_643;  // int32
  wire signed [31:0] sel_1_2043;  // int32
  wire signed [31:0] sel_9676;  // int32
  wire signed [31:0] sel_9677;  // int32
  wire signed [31:0] sel_9678;  // int32
  reg signed [31:0] sel_1_2044;  // int32
  wire cont_bits_43;
  wire sel_1_2045;
  wire signed [31:0] sel_9679;  // int32
  wire signed [31:0] sel_9680;  // int32
  wire signed [31:0] sel_9681;  // int32
  wire signed [31:0] sel_9682;  // int32
  wire signed [31:0] sel_9683;  // int32
  wire signed [31:0] sel_9684;  // int32
  wire signed [31:0] sel_9685;  // int32
  wire signed [31:0] sel_9686;  // int32
  wire signed [31:0] sel_9687;  // int32
  wire signed [31:0] sel_9688;  // int32
  wire signed [31:0] sel_9689;  // int32
  wire signed [31:0] sel_9690;  // int32
  wire signed [31:0] sel_9691;  // int32
  wire signed [31:0] sel_9692;  // int32
  wire signed [31:0] sel_9693;  // int32
  wire signed [31:0] s_644;  // int32
  wire signed [31:0] sel_1_2046;  // int32
  wire signed [31:0] sel_9694;  // int32
  wire signed [31:0] sel_1_2047;  // int32
  wire signed [31:0] sel_9695;  // int32
  wire signed [31:0] sel_1_2048;  // int32
  wire signed [31:0] sel_9696;  // int32
  wire signed [31:0] sel_1_2049;  // int32
  wire signed [31:0] sel_9697;  // int32
  wire signed [31:0] sel_1_2050;  // int32
  wire signed [31:0] sel_9698;  // int32
  wire signed [31:0] sel_1_2051;  // int32
  wire signed [31:0] sel_9699;  // int32
  wire signed [31:0] sel_1_2052;  // int32
  wire signed [31:0] sel_9700;  // int32
  wire signed [31:0] sel_1_2053;  // int32
  wire signed [31:0] sel_1_2054;  // int32
  wire signed [31:0] sel_1_2055;  // int32
  wire signed [31:0] sel_9701;  // int32
  wire signed [31:0] sel_1_2056;  // int32
  wire signed [31:0] sel_9702;  // int32
  wire signed [31:0] sel_9703;  // int32
  reg signed [31:0] sel_1_2057;  // int32
  wire cont_bits_41_37;
  wire signed [31:0] sel_9704;  // int32
  wire signed [31:0] sel_9705;  // int32
  wire signed [31:0] sel_9706;  // int32
  wire signed [31:0] sel_9707;  // int32
  wire signed [31:0] sel_9708;  // int32
  wire signed [31:0] sel_9709;  // int32
  wire signed [31:0] sel_9710;  // int32
  wire signed [31:0] sel_9711;  // int32
  wire signed [31:0] sel_9712;  // int32
  wire signed [31:0] sel_9713;  // int32
  wire signed [31:0] sel_9714;  // int32
  wire signed [31:0] sel_9715;  // int32
  wire signed [31:0] sel_9716;  // int32
  wire signed [31:0] sel_9717;  // int32
  wire signed [31:0] sel_9718;  // int32
  wire signed [31:0] s_645;  // int32
  wire signed [31:0] sel_1_2058;  // int32
  wire signed [31:0] sel_9719;  // int32
  wire signed [31:0] sel_1_2059;  // int32
  wire signed [31:0] sel_9720;  // int32
  wire signed [31:0] sel_1_2060;  // int32
  wire signed [31:0] sel_9721;  // int32
  wire signed [31:0] sel_1_2061;  // int32
  wire signed [31:0] sel_9722;  // int32
  wire signed [31:0] sel_1_2062;  // int32
  wire signed [31:0] sel_9723;  // int32
  wire signed [31:0] sel_1_2063;  // int32
  wire signed [31:0] sel_9724;  // int32
  wire signed [31:0] sel_1_2064;  // int32
  wire signed [31:0] sel_1_2065;  // int32
  wire signed [31:0] sel_1_2066;  // int32
  wire signed [31:0] sel_9725;  // int32
  wire signed [31:0] sel_1_2067;  // int32
  wire signed [31:0] sel_9726;  // int32
  wire signed [31:0] sel_9727;  // int32
  reg signed [31:0] sel_1_2068;  // int32
  wire cont_bits_42_37;
  wire sel_1_2069;
  wire signed [31:0] sel_9728;  // int32
  wire signed [31:0] sel_9729;  // int32
  wire signed [31:0] sel_9730;  // int32
  wire signed [31:0] sel_9731;  // int32
  wire signed [31:0] sel_9732;  // int32
  wire signed [31:0] sel_9733;  // int32
  wire signed [31:0] sel_9734;  // int32
  wire signed [31:0] sel_9735;  // int32
  wire signed [31:0] sel_9736;  // int32
  wire signed [31:0] sel_9737;  // int32
  wire signed [31:0] sel_9738;  // int32
  wire signed [31:0] sel_9739;  // int32
  wire signed [31:0] sel_9740;  // int32
  wire signed [31:0] sel_9741;  // int32
  wire signed [31:0] sel_9742;  // int32
  wire signed [31:0] s_646;  // int32
  wire signed [31:0] sel_1_2070;  // int32
  wire signed [31:0] sel_9743;  // int32
  wire signed [31:0] sel_1_2071;  // int32
  wire signed [31:0] sel_9744;  // int32
  wire signed [31:0] sel_1_2072;  // int32
  wire signed [31:0] sel_9745;  // int32
  wire signed [31:0] sel_1_2073;  // int32
  wire signed [31:0] sel_9746;  // int32
  wire signed [31:0] sel_1_2074;  // int32
  wire signed [31:0] sel_9747;  // int32
  wire signed [31:0] sel_1_2075;  // int32
  wire signed [31:0] sel_1_2076;  // int32
  wire signed [31:0] sel_1_2077;  // int32
  wire signed [31:0] sel_9748;  // int32
  wire signed [31:0] sel_1_2078;  // int32
  wire signed [31:0] sel_9749;  // int32
  wire signed [31:0] sel_9750;  // int32
  reg signed [31:0] sel_1_2079;  // int32
  wire cont_bits_32_37;
  wire sel_1_2080;
  wire signed [31:0] sel_9751;  // int32
  wire signed [31:0] sel_9752;  // int32
  wire signed [31:0] sel_9753;  // int32
  wire signed [31:0] sel_9754;  // int32
  wire signed [31:0] sel_9755;  // int32
  wire signed [31:0] sel_9756;  // int32
  wire signed [31:0] sel_9757;  // int32
  wire signed [31:0] sel_9758;  // int32
  wire signed [31:0] sel_9759;  // int32
  wire signed [31:0] sel_9760;  // int32
  wire signed [31:0] sel_9761;  // int32
  wire signed [31:0] sel_9762;  // int32
  wire signed [31:0] sel_9763;  // int32
  wire signed [31:0] sel_9764;  // int32
  wire signed [31:0] sel_9765;  // int32
  wire signed [31:0] s_647;  // int32
  wire signed [31:0] sel_1_2081;  // int32
  wire signed [31:0] sel_9766;  // int32
  wire signed [31:0] sel_1_2082;  // int32
  wire signed [31:0] sel_9767;  // int32
  wire signed [31:0] sel_1_2083;  // int32
  wire signed [31:0] sel_9768;  // int32
  wire signed [31:0] sel_1_2084;  // int32
  wire signed [31:0] sel_9769;  // int32
  wire signed [31:0] sel_1_2085;  // int32
  wire signed [31:0] sel_1_2086;  // int32
  wire signed [31:0] sel_1_2087;  // int32
  wire signed [31:0] sel_9770;  // int32
  wire signed [31:0] sel_1_2088;  // int32
  wire signed [31:0] sel_9771;  // int32
  wire signed [31:0] sel_9772;  // int32
  reg signed [31:0] sel_1_2089;  // int32
  wire cont_bits_31_37;
  wire sel_1_2090;
  wire signed [31:0] sel_9773;  // int32
  wire signed [31:0] sel_9774;  // int32
  wire signed [31:0] sel_9775;  // int32
  wire signed [31:0] sel_9776;  // int32
  wire signed [31:0] sel_9777;  // int32
  wire signed [31:0] sel_9778;  // int32
  wire signed [31:0] sel_9779;  // int32
  wire signed [31:0] sel_9780;  // int32
  wire signed [31:0] sel_9781;  // int32
  wire signed [31:0] sel_9782;  // int32
  wire signed [31:0] sel_9783;  // int32
  wire signed [31:0] sel_9784;  // int32
  wire signed [31:0] sel_9785;  // int32
  wire signed [31:0] sel_9786;  // int32
  wire signed [31:0] sel_9787;  // int32
  wire signed [31:0] s_648;  // int32
  wire signed [31:0] sel_1_2091;  // int32
  wire signed [31:0] sel_9788;  // int32
  wire signed [31:0] sel_1_2092;  // int32
  wire signed [31:0] sel_9789;  // int32
  wire signed [31:0] sel_1_2093;  // int32
  wire signed [31:0] sel_9790;  // int32
  wire signed [31:0] sel_1_2094;  // int32
  wire signed [31:0] sel_1_2095;  // int32
  wire signed [31:0] sel_1_2096;  // int32
  wire signed [31:0] sel_9791;  // int32
  wire signed [31:0] sel_1_2097;  // int32
  wire signed [31:0] sel_9792;  // int32
  wire signed [31:0] sel_9793;  // int32
  reg signed [31:0] sel_1_2098;  // int32
  wire cont_bits_22_37;
  wire sel_1_2099;
  wire signed [31:0] sel_9794;  // int32
  wire signed [31:0] sel_9795;  // int32
  wire signed [31:0] sel_9796;  // int32
  wire signed [31:0] sel_9797;  // int32
  wire signed [31:0] sel_9798;  // int32
  wire signed [31:0] sel_9799;  // int32
  wire signed [31:0] sel_9800;  // int32
  wire signed [31:0] sel_9801;  // int32
  wire signed [31:0] sel_9802;  // int32
  wire signed [31:0] sel_9803;  // int32
  wire signed [31:0] sel_9804;  // int32
  wire signed [31:0] sel_9805;  // int32
  wire signed [31:0] sel_9806;  // int32
  wire signed [31:0] sel_9807;  // int32
  wire signed [31:0] sel_9808;  // int32
  wire signed [31:0] s_649;  // int32
  wire signed [31:0] sel_1_2100;  // int32
  wire signed [31:0] sel_9809;  // int32
  wire signed [31:0] sel_1_2101;  // int32
  wire signed [31:0] sel_9810;  // int32
  wire signed [31:0] sel_1_2102;  // int32
  wire signed [31:0] sel_1_2103;  // int32
  wire signed [31:0] sel_1_2104;  // int32
  wire signed [31:0] sel_9811;  // int32
  wire signed [31:0] sel_1_2105;  // int32
  wire signed [31:0] sel_9812;  // int32
  wire signed [31:0] sel_9813;  // int32
  reg signed [31:0] sel_1_2106;  // int32
  wire cont_bits_21_37;
  wire sel_1_2107;
  wire signed [31:0] sel_9814;  // int32
  wire signed [31:0] sel_9815;  // int32
  wire signed [31:0] sel_9816;  // int32
  wire signed [31:0] sel_9817;  // int32
  wire signed [31:0] sel_9818;  // int32
  wire signed [31:0] sel_9819;  // int32
  wire signed [31:0] sel_9820;  // int32
  wire signed [31:0] sel_9821;  // int32
  wire signed [31:0] sel_9822;  // int32
  wire signed [31:0] sel_9823;  // int32
  wire signed [31:0] sel_9824;  // int32
  wire signed [31:0] sel_9825;  // int32
  wire signed [31:0] sel_9826;  // int32
  wire signed [31:0] sel_9827;  // int32
  wire signed [31:0] sel_9828;  // int32
  wire signed [31:0] s_650;  // int32
  wire signed [31:0] sel_1_2108;  // int32
  wire signed [31:0] sel_9829;  // int32
  wire signed [31:0] sel_1_2109;  // int32
  wire signed [31:0] sel_1_2110;  // int32
  wire signed [31:0] sel_1_2111;  // int32
  wire signed [31:0] sel_9830;  // int32
  wire signed [31:0] sel_1_2112;  // int32
  wire signed [31:0] sel_9831;  // int32
  wire signed [31:0] sel_9832;  // int32
  reg signed [31:0] sel_1_2113;  // int32
  wire cont_bits_12_37;
  wire sel_1_2114;
  wire signed [31:0] sel_9833;  // int32
  wire signed [31:0] sel_9834;  // int32
  wire signed [31:0] sel_9835;  // int32
  wire signed [31:0] sel_9836;  // int32
  wire signed [31:0] sel_9837;  // int32
  wire signed [31:0] sel_9838;  // int32
  wire signed [31:0] sel_9839;  // int32
  wire signed [31:0] sel_9840;  // int32
  wire signed [31:0] sel_9841;  // int32
  wire signed [31:0] sel_9842;  // int32
  wire signed [31:0] sel_9843;  // int32
  wire signed [31:0] sel_9844;  // int32
  wire signed [31:0] sel_9845;  // int32
  wire signed [31:0] sel_9846;  // int32
  wire signed [31:0] sel_9847;  // int32
  wire signed [31:0] s_651;  // int32
  wire signed [31:0] sel_1_2115;  // int32
  wire signed [31:0] sel_1_2116;  // int32
  wire signed [31:0] sel_1_2117;  // int32
  wire signed [31:0] sel_9848;  // int32
  wire signed [31:0] sel_1_2118;  // int32
  wire signed [31:0] sel_9849;  // int32
  wire signed [31:0] sel_9850;  // int32
  reg signed [31:0] sel_1_2119;  // int32
  wire cont_bits_44;
  wire sel_1_2120;
  wire sel_9851;
  wire sel_9852;
  reg  sel_1_2121;
  wire sel_9853;
  wire sel_9854;
  wire sel_9855;
  wire sel_9856;
  wire sel_9857;
  wire sel_9858;
  wire sel_9859;
  wire sel_9860;
  wire sel_9861;
  wire sel_9862;
  wire sel_9863;
  wire sel_9864;
  wire s_652;
  wire sel_2_1525;
  wire s_653;
  wire sel_2_1526;
  wire s_654;
  wire sel_2_1527;
  wire s_655;
  wire sel_2_1528;
  wire s_656;
  wire sel_2_1529;
  wire s_657;
  wire sel_2_1530;
  wire s_658;
  wire sel_2_1531;
  wire s_659;
  wire sel_2_1532;
  wire sel_9865;
  wire sel_9866;
  wire sel_9867;
  wire s_660;
  wire sel_2_1533;
  wire s_661;
  wire sel_2_1534;
  wire s_662;
  wire sel_2_1535;
  wire s_663;
  wire sel_2_1536;
  wire s_664;
  wire sel_2_1537;
  wire s_665;
  wire sel_2_1538;
  wire s_666;
  wire sel_2_1539;
  wire s_667;
  wire sel_2_1540;
  wire sel_2_1541;
  wire sel_2_1542;
  wire sel_9868;
  wire sel_2_1543;
  wire sel_9869;
  wire sel_9870;
  reg  sel_2_1544;
  wire sel_9871;
  wire sel_9872;
  wire sel_9873;
  wire sel_9874;
  wire sel_9875;
  wire sel_9876;
  wire sel_9877;
  wire sel_9878;
  wire sel_9879;
  wire sel_9880;
  wire sel_9881;
  wire signed [31:0] sel_9882;  // int32
  wire signed [31:0] sel_9883;  // int32
  wire signed [31:0] sel_9884;  // int32
  wire signed [31:0] sel_9885;  // int32
  wire signed [31:0] sel_9886;  // int32
  wire signed [31:0] sel_9887;  // int32
  wire signed [31:0] sel_9888;  // int32
  wire signed [31:0] sel_9889;  // int32
  wire signed [31:0] sel_9890;  // int32
  wire signed [31:0] sel_9891;  // int32
  wire signed [31:0] sel_9892;  // int32
  wire signed [31:0] sel_9893;  // int32
  wire signed [31:0] s_668;  // int32
  wire signed [31:0] sel_1_2122;  // int32
  wire signed [31:0] sel_9894;  // int32
  wire signed [31:0] sel_1_2123;  // int32
  wire signed [31:0] sel_9895;  // int32
  wire signed [31:0] sel_1_2124;  // int32
  wire signed [31:0] sel_9896;  // int32
  wire signed [31:0] sel_1_2125;  // int32
  wire signed [31:0] sel_9897;  // int32
  wire signed [31:0] sel_1_2126;  // int32
  wire signed [31:0] sel_9898;  // int32
  wire signed [31:0] sel_1_2127;  // int32
  wire signed [31:0] sel_9899;  // int32
  wire signed [31:0] sel_1_2128;  // int32
  wire signed [31:0] sel_9900;  // int32
  wire signed [31:0] sel_1_2129;  // int32
  wire signed [31:0] sel_9901;  // int32
  wire signed [31:0] sel_9902;  // int32
  wire signed [31:0] sel_9903;  // int32
  reg signed [31:0] sel_1_2130;  // int32
  wire cont_bits_41_38;
  wire signed [31:0] sel_9904;  // int32
  wire signed [31:0] sel_9905;  // int32
  wire signed [31:0] sel_9906;  // int32
  wire signed [31:0] sel_9907;  // int32
  wire signed [31:0] sel_9908;  // int32
  wire signed [31:0] sel_9909;  // int32
  wire signed [31:0] sel_9910;  // int32
  wire signed [31:0] sel_9911;  // int32
  wire signed [31:0] sel_9912;  // int32
  wire signed [31:0] sel_9913;  // int32
  wire signed [31:0] sel_9914;  // int32
  wire signed [31:0] sel_9915;  // int32
  wire signed [31:0] s_669;  // int32
  wire signed [31:0] sel_1_2131;  // int32
  wire signed [31:0] sel_9916;  // int32
  wire signed [31:0] sel_1_2132;  // int32
  wire signed [31:0] sel_9917;  // int32
  wire signed [31:0] sel_1_2133;  // int32
  wire signed [31:0] sel_9918;  // int32
  wire signed [31:0] sel_1_2134;  // int32
  wire signed [31:0] sel_9919;  // int32
  wire signed [31:0] sel_1_2135;  // int32
  wire signed [31:0] sel_9920;  // int32
  wire signed [31:0] sel_1_2136;  // int32
  wire signed [31:0] sel_9921;  // int32
  wire signed [31:0] sel_1_2137;  // int32
  wire signed [31:0] sel_9922;  // int32
  wire signed [31:0] sel_9923;  // int32
  wire signed [31:0] sel_9924;  // int32
  reg signed [31:0] sel_1_2138;  // int32
  wire cont_bits_42_38;
  wire sel_1_2139;
  wire signed [31:0] sel_9925;  // int32
  wire signed [31:0] sel_9926;  // int32
  wire signed [31:0] sel_9927;  // int32
  wire signed [31:0] sel_9928;  // int32
  wire signed [31:0] sel_9929;  // int32
  wire signed [31:0] sel_9930;  // int32
  wire signed [31:0] sel_9931;  // int32
  wire signed [31:0] sel_9932;  // int32
  wire signed [31:0] sel_9933;  // int32
  wire signed [31:0] sel_9934;  // int32
  wire signed [31:0] sel_9935;  // int32
  wire signed [31:0] sel_9936;  // int32
  wire signed [31:0] s_670;  // int32
  wire signed [31:0] sel_1_2140;  // int32
  wire signed [31:0] sel_9937;  // int32
  wire signed [31:0] sel_1_2141;  // int32
  wire signed [31:0] sel_9938;  // int32
  wire signed [31:0] sel_1_2142;  // int32
  wire signed [31:0] sel_9939;  // int32
  wire signed [31:0] sel_1_2143;  // int32
  wire signed [31:0] sel_9940;  // int32
  wire signed [31:0] sel_1_2144;  // int32
  wire signed [31:0] sel_9941;  // int32
  wire signed [31:0] sel_1_2145;  // int32
  wire signed [31:0] sel_9942;  // int32
  wire signed [31:0] sel_9943;  // int32
  wire signed [31:0] sel_9944;  // int32
  reg signed [31:0] sel_1_2146;  // int32
  wire cont_bits_32_38;
  wire sel_1_2147;
  wire signed [31:0] sel_9945;  // int32
  wire signed [31:0] sel_9946;  // int32
  wire signed [31:0] sel_9947;  // int32
  wire signed [31:0] sel_9948;  // int32
  wire signed [31:0] sel_9949;  // int32
  wire signed [31:0] sel_9950;  // int32
  wire signed [31:0] sel_9951;  // int32
  wire signed [31:0] sel_9952;  // int32
  wire signed [31:0] sel_9953;  // int32
  wire signed [31:0] sel_9954;  // int32
  wire signed [31:0] sel_9955;  // int32
  wire signed [31:0] sel_9956;  // int32
  wire signed [31:0] s_671;  // int32
  wire signed [31:0] sel_1_2148;  // int32
  wire signed [31:0] sel_9957;  // int32
  wire signed [31:0] sel_1_2149;  // int32
  wire signed [31:0] sel_9958;  // int32
  wire signed [31:0] sel_1_2150;  // int32
  wire signed [31:0] sel_9959;  // int32
  wire signed [31:0] sel_1_2151;  // int32
  wire signed [31:0] sel_9960;  // int32
  wire signed [31:0] sel_1_2152;  // int32
  wire signed [31:0] sel_9961;  // int32
  wire signed [31:0] sel_9962;  // int32
  wire signed [31:0] sel_9963;  // int32
  reg signed [31:0] sel_1_2153;  // int32
  wire cont_bits_31_38;
  wire sel_1_2154;
  wire signed [31:0] sel_9964;  // int32
  wire signed [31:0] sel_9965;  // int32
  wire signed [31:0] sel_9966;  // int32
  wire signed [31:0] sel_9967;  // int32
  wire signed [31:0] sel_9968;  // int32
  wire signed [31:0] sel_9969;  // int32
  wire signed [31:0] sel_9970;  // int32
  wire signed [31:0] sel_9971;  // int32
  wire signed [31:0] sel_9972;  // int32
  wire signed [31:0] sel_9973;  // int32
  wire signed [31:0] sel_9974;  // int32
  wire signed [31:0] sel_9975;  // int32
  wire signed [31:0] s_672;  // int32
  wire signed [31:0] sel_1_2155;  // int32
  wire signed [31:0] sel_9976;  // int32
  wire signed [31:0] sel_1_2156;  // int32
  wire signed [31:0] sel_9977;  // int32
  wire signed [31:0] sel_1_2157;  // int32
  wire signed [31:0] sel_9978;  // int32
  wire signed [31:0] sel_1_2158;  // int32
  wire signed [31:0] sel_9979;  // int32
  wire signed [31:0] sel_9980;  // int32
  wire signed [31:0] sel_9981;  // int32
  reg signed [31:0] sel_1_2159;  // int32
  wire cont_bits_22_38;
  wire sel_1_2160;
  wire signed [31:0] sel_9982;  // int32
  wire signed [31:0] sel_9983;  // int32
  wire signed [31:0] sel_9984;  // int32
  wire signed [31:0] sel_9985;  // int32
  wire signed [31:0] sel_9986;  // int32
  wire signed [31:0] sel_9987;  // int32
  wire signed [31:0] sel_9988;  // int32
  wire signed [31:0] sel_9989;  // int32
  wire signed [31:0] sel_9990;  // int32
  wire signed [31:0] sel_9991;  // int32
  wire signed [31:0] sel_9992;  // int32
  wire signed [31:0] sel_9993;  // int32
  wire signed [31:0] s_673;  // int32
  wire signed [31:0] sel_1_2161;  // int32
  wire signed [31:0] sel_9994;  // int32
  wire signed [31:0] sel_1_2162;  // int32
  wire signed [31:0] sel_9995;  // int32
  wire signed [31:0] sel_1_2163;  // int32
  wire signed [31:0] sel_9996;  // int32
  wire signed [31:0] sel_9997;  // int32
  wire signed [31:0] sel_9998;  // int32
  reg signed [31:0] sel_1_2164;  // int32
  wire cont_bits_21_38;
  wire sel_1_2165;
  wire signed [31:0] sel_9999;  // int32
  wire signed [31:0] sel_10000;  // int32
  wire signed [31:0] sel_10001;  // int32
  wire signed [31:0] sel_10002;  // int32
  wire signed [31:0] sel_10003;  // int32
  wire signed [31:0] sel_10004;  // int32
  wire signed [31:0] sel_10005;  // int32
  wire signed [31:0] sel_10006;  // int32
  wire signed [31:0] sel_10007;  // int32
  wire signed [31:0] sel_10008;  // int32
  wire signed [31:0] sel_10009;  // int32
  wire signed [31:0] sel_10010;  // int32
  wire signed [31:0] s_674;  // int32
  wire signed [31:0] sel_1_2166;  // int32
  wire signed [31:0] sel_10011;  // int32
  wire signed [31:0] sel_1_2167;  // int32
  wire signed [31:0] sel_10012;  // int32
  wire signed [31:0] sel_10013;  // int32
  wire signed [31:0] sel_10014;  // int32
  reg signed [31:0] sel_1_2168;  // int32
  wire cont_bits_12_38;
  wire sel_1_2169;
  wire signed [31:0] sel_10015;  // int32
  wire signed [31:0] sel_10016;  // int32
  wire signed [31:0] sel_10017;  // int32
  wire signed [31:0] sel_10018;  // int32
  wire signed [31:0] sel_10019;  // int32
  wire signed [31:0] sel_10020;  // int32
  wire signed [31:0] sel_10021;  // int32
  wire signed [31:0] sel_10022;  // int32
  wire signed [31:0] sel_10023;  // int32
  wire signed [31:0] sel_10024;  // int32
  wire signed [31:0] sel_10025;  // int32
  wire signed [31:0] sel_10026;  // int32
  wire signed [31:0] s_675;  // int32
  wire signed [31:0] sel_1_2170;  // int32
  wire signed [31:0] sel_10027;  // int32
  wire signed [31:0] sel_10028;  // int32
  wire signed [31:0] sel_10029;  // int32
  reg signed [31:0] sel_1_2171;  // int32
  wire cont_bits_45;
  wire sel_1_2172;
  wire signed [31:0] sel_10030;  // int32
  wire signed [31:0] sel_10031;  // int32
  wire signed [31:0] sel_10032;  // int32
  wire signed [31:0] sel_10033;  // int32
  wire signed [31:0] sel_10034;  // int32
  wire signed [31:0] sel_10035;  // int32
  wire signed [31:0] sel_10036;  // int32
  wire signed [31:0] sel_10037;  // int32
  wire signed [31:0] sel_10038;  // int32
  wire signed [31:0] sel_10039;  // int32
  wire signed [31:0] sel_10040;  // int32
  wire signed [31:0] sel_10041;  // int32
  wire signed [31:0] sel_10042;  // int32
  wire signed [31:0] sel_10043;  // int32
  wire signed [31:0] sel_10044;  // int32
  wire signed [31:0] s_676;  // int32
  wire signed [31:0] sel_1_2173;  // int32
  wire signed [31:0] sel_10045;  // int32
  wire signed [31:0] sel_1_2174;  // int32
  wire signed [31:0] sel_10046;  // int32
  wire signed [31:0] sel_1_2175;  // int32
  wire signed [31:0] sel_10047;  // int32
  wire signed [31:0] sel_1_2176;  // int32
  wire signed [31:0] sel_10048;  // int32
  wire signed [31:0] sel_1_2177;  // int32
  wire signed [31:0] sel_10049;  // int32
  wire signed [31:0] sel_1_2178;  // int32
  wire signed [31:0] sel_10050;  // int32
  wire signed [31:0] sel_1_2179;  // int32
  wire signed [31:0] sel_10051;  // int32
  wire signed [31:0] sel_1_2180;  // int32
  wire signed [31:0] sel_1_2181;  // int32
  wire signed [31:0] sel_1_2182;  // int32
  wire signed [31:0] sel_10052;  // int32
  wire signed [31:0] sel_1_2183;  // int32
  wire signed [31:0] sel_10053;  // int32
  wire signed [31:0] sel_10054;  // int32
  reg signed [31:0] sel_1_2184;  // int32
  wire cont_bits_41_39;
  wire signed [31:0] sel_10055;  // int32
  wire signed [31:0] sel_10056;  // int32
  wire signed [31:0] sel_10057;  // int32
  wire signed [31:0] sel_10058;  // int32
  wire signed [31:0] sel_10059;  // int32
  wire signed [31:0] sel_10060;  // int32
  wire signed [31:0] sel_10061;  // int32
  wire signed [31:0] sel_10062;  // int32
  wire signed [31:0] sel_10063;  // int32
  wire signed [31:0] sel_10064;  // int32
  wire signed [31:0] sel_10065;  // int32
  wire signed [31:0] sel_10066;  // int32
  wire signed [31:0] sel_10067;  // int32
  wire signed [31:0] sel_10068;  // int32
  wire signed [31:0] sel_10069;  // int32
  wire signed [31:0] s_677;  // int32
  wire signed [31:0] sel_1_2185;  // int32
  wire signed [31:0] sel_10070;  // int32
  wire signed [31:0] sel_1_2186;  // int32
  wire signed [31:0] sel_10071;  // int32
  wire signed [31:0] sel_1_2187;  // int32
  wire signed [31:0] sel_10072;  // int32
  wire signed [31:0] sel_1_2188;  // int32
  wire signed [31:0] sel_10073;  // int32
  wire signed [31:0] sel_1_2189;  // int32
  wire signed [31:0] sel_10074;  // int32
  wire signed [31:0] sel_1_2190;  // int32
  wire signed [31:0] sel_10075;  // int32
  wire signed [31:0] sel_1_2191;  // int32
  wire signed [31:0] sel_1_2192;  // int32
  wire signed [31:0] sel_1_2193;  // int32
  wire signed [31:0] sel_10076;  // int32
  wire signed [31:0] sel_1_2194;  // int32
  wire signed [31:0] sel_10077;  // int32
  wire signed [31:0] sel_10078;  // int32
  reg signed [31:0] sel_1_2195;  // int32
  wire cont_bits_42_39;
  wire sel_1_2196;
  wire signed [31:0] sel_10079;  // int32
  wire signed [31:0] sel_10080;  // int32
  wire signed [31:0] sel_10081;  // int32
  wire signed [31:0] sel_10082;  // int32
  wire signed [31:0] sel_10083;  // int32
  wire signed [31:0] sel_10084;  // int32
  wire signed [31:0] sel_10085;  // int32
  wire signed [31:0] sel_10086;  // int32
  wire signed [31:0] sel_10087;  // int32
  wire signed [31:0] sel_10088;  // int32
  wire signed [31:0] sel_10089;  // int32
  wire signed [31:0] sel_10090;  // int32
  wire signed [31:0] sel_10091;  // int32
  wire signed [31:0] sel_10092;  // int32
  wire signed [31:0] sel_10093;  // int32
  wire signed [31:0] s_678;  // int32
  wire signed [31:0] sel_1_2197;  // int32
  wire signed [31:0] sel_10094;  // int32
  wire signed [31:0] sel_1_2198;  // int32
  wire signed [31:0] sel_10095;  // int32
  wire signed [31:0] sel_1_2199;  // int32
  wire signed [31:0] sel_10096;  // int32
  wire signed [31:0] sel_1_2200;  // int32
  wire signed [31:0] sel_10097;  // int32
  wire signed [31:0] sel_1_2201;  // int32
  wire signed [31:0] sel_10098;  // int32
  wire signed [31:0] sel_1_2202;  // int32
  wire signed [31:0] sel_1_2203;  // int32
  wire signed [31:0] sel_1_2204;  // int32
  wire signed [31:0] sel_10099;  // int32
  wire signed [31:0] sel_1_2205;  // int32
  wire signed [31:0] sel_10100;  // int32
  wire signed [31:0] sel_10101;  // int32
  reg signed [31:0] sel_1_2206;  // int32
  wire cont_bits_32_39;
  wire sel_1_2207;
  wire signed [31:0] sel_10102;  // int32
  wire signed [31:0] sel_10103;  // int32
  wire signed [31:0] sel_10104;  // int32
  wire signed [31:0] sel_10105;  // int32
  wire signed [31:0] sel_10106;  // int32
  wire signed [31:0] sel_10107;  // int32
  wire signed [31:0] sel_10108;  // int32
  wire signed [31:0] sel_10109;  // int32
  wire signed [31:0] sel_10110;  // int32
  wire signed [31:0] sel_10111;  // int32
  wire signed [31:0] sel_10112;  // int32
  wire signed [31:0] sel_10113;  // int32
  wire signed [31:0] sel_10114;  // int32
  wire signed [31:0] sel_10115;  // int32
  wire signed [31:0] sel_10116;  // int32
  wire signed [31:0] s_679;  // int32
  wire signed [31:0] sel_1_2208;  // int32
  wire signed [31:0] sel_10117;  // int32
  wire signed [31:0] sel_1_2209;  // int32
  wire signed [31:0] sel_10118;  // int32
  wire signed [31:0] sel_1_2210;  // int32
  wire signed [31:0] sel_10119;  // int32
  wire signed [31:0] sel_1_2211;  // int32
  wire signed [31:0] sel_10120;  // int32
  wire signed [31:0] sel_1_2212;  // int32
  wire signed [31:0] sel_1_2213;  // int32
  wire signed [31:0] sel_1_2214;  // int32
  wire signed [31:0] sel_10121;  // int32
  wire signed [31:0] sel_1_2215;  // int32
  wire signed [31:0] sel_10122;  // int32
  wire signed [31:0] sel_10123;  // int32
  reg signed [31:0] sel_1_2216;  // int32
  wire cont_bits_31_39;
  wire sel_1_2217;
  wire signed [31:0] sel_10124;  // int32
  wire signed [31:0] sel_10125;  // int32
  wire signed [31:0] sel_10126;  // int32
  wire signed [31:0] sel_10127;  // int32
  wire signed [31:0] sel_10128;  // int32
  wire signed [31:0] sel_10129;  // int32
  wire signed [31:0] sel_10130;  // int32
  wire signed [31:0] sel_10131;  // int32
  wire signed [31:0] sel_10132;  // int32
  wire signed [31:0] sel_10133;  // int32
  wire signed [31:0] sel_10134;  // int32
  wire signed [31:0] sel_10135;  // int32
  wire signed [31:0] sel_10136;  // int32
  wire signed [31:0] sel_10137;  // int32
  wire signed [31:0] sel_10138;  // int32
  wire signed [31:0] s_680;  // int32
  wire signed [31:0] sel_1_2218;  // int32
  wire signed [31:0] sel_10139;  // int32
  wire signed [31:0] sel_1_2219;  // int32
  wire signed [31:0] sel_10140;  // int32
  wire signed [31:0] sel_1_2220;  // int32
  wire signed [31:0] sel_10141;  // int32
  wire signed [31:0] sel_1_2221;  // int32
  wire signed [31:0] sel_1_2222;  // int32
  wire signed [31:0] sel_1_2223;  // int32
  wire signed [31:0] sel_10142;  // int32
  wire signed [31:0] sel_1_2224;  // int32
  wire signed [31:0] sel_10143;  // int32
  wire signed [31:0] sel_10144;  // int32
  reg signed [31:0] sel_1_2225;  // int32
  wire cont_bits_22_39;
  wire sel_1_2226;
  wire signed [31:0] sel_10145;  // int32
  wire signed [31:0] sel_10146;  // int32
  wire signed [31:0] sel_10147;  // int32
  wire signed [31:0] sel_10148;  // int32
  wire signed [31:0] sel_10149;  // int32
  wire signed [31:0] sel_10150;  // int32
  wire signed [31:0] sel_10151;  // int32
  wire signed [31:0] sel_10152;  // int32
  wire signed [31:0] sel_10153;  // int32
  wire signed [31:0] sel_10154;  // int32
  wire signed [31:0] sel_10155;  // int32
  wire signed [31:0] sel_10156;  // int32
  wire signed [31:0] sel_10157;  // int32
  wire signed [31:0] sel_10158;  // int32
  wire signed [31:0] sel_10159;  // int32
  wire signed [31:0] s_681;  // int32
  wire signed [31:0] sel_1_2227;  // int32
  wire signed [31:0] sel_10160;  // int32
  wire signed [31:0] sel_1_2228;  // int32
  wire signed [31:0] sel_10161;  // int32
  wire signed [31:0] sel_1_2229;  // int32
  wire signed [31:0] sel_1_2230;  // int32
  wire signed [31:0] sel_1_2231;  // int32
  wire signed [31:0] sel_10162;  // int32
  wire signed [31:0] sel_1_2232;  // int32
  wire signed [31:0] sel_10163;  // int32
  wire signed [31:0] sel_10164;  // int32
  reg signed [31:0] sel_1_2233;  // int32
  wire cont_bits_21_39;
  wire sel_1_2234;
  wire signed [31:0] sel_10165;  // int32
  wire signed [31:0] sel_10166;  // int32
  wire signed [31:0] sel_10167;  // int32
  wire signed [31:0] sel_10168;  // int32
  wire signed [31:0] sel_10169;  // int32
  wire signed [31:0] sel_10170;  // int32
  wire signed [31:0] sel_10171;  // int32
  wire signed [31:0] sel_10172;  // int32
  wire signed [31:0] sel_10173;  // int32
  wire signed [31:0] sel_10174;  // int32
  wire signed [31:0] sel_10175;  // int32
  wire signed [31:0] sel_10176;  // int32
  wire signed [31:0] sel_10177;  // int32
  wire signed [31:0] sel_10178;  // int32
  wire signed [31:0] sel_10179;  // int32
  wire signed [31:0] s_682;  // int32
  wire signed [31:0] sel_1_2235;  // int32
  wire signed [31:0] sel_10180;  // int32
  wire signed [31:0] sel_1_2236;  // int32
  wire signed [31:0] sel_1_2237;  // int32
  wire signed [31:0] sel_1_2238;  // int32
  wire signed [31:0] sel_10181;  // int32
  wire signed [31:0] sel_1_2239;  // int32
  wire signed [31:0] sel_10182;  // int32
  wire signed [31:0] sel_10183;  // int32
  reg signed [31:0] sel_1_2240;  // int32
  wire cont_bits_12_39;
  wire sel_1_2241;
  wire signed [31:0] sel_10184;  // int32
  wire signed [31:0] sel_10185;  // int32
  wire signed [31:0] sel_10186;  // int32
  wire signed [31:0] sel_10187;  // int32
  wire signed [31:0] sel_10188;  // int32
  wire signed [31:0] sel_10189;  // int32
  wire signed [31:0] sel_10190;  // int32
  wire signed [31:0] sel_10191;  // int32
  wire signed [31:0] sel_10192;  // int32
  wire signed [31:0] sel_10193;  // int32
  wire signed [31:0] sel_10194;  // int32
  wire signed [31:0] sel_10195;  // int32
  wire signed [31:0] sel_10196;  // int32
  wire signed [31:0] sel_10197;  // int32
  wire signed [31:0] sel_10198;  // int32
  wire signed [31:0] s_683;  // int32
  wire signed [31:0] sel_1_2242;  // int32
  wire signed [31:0] sel_1_2243;  // int32
  wire signed [31:0] sel_1_2244;  // int32
  wire signed [31:0] sel_10199;  // int32
  wire signed [31:0] sel_1_2245;  // int32
  wire signed [31:0] sel_10200;  // int32
  wire signed [31:0] sel_10201;  // int32
  reg signed [31:0] sel_1_2246;  // int32
  wire cont_bits_46;
  wire sel_1_2247;
  wire sel_10202;
  wire sel_10203;
  reg  sel_1_2248;
  wire sel_10204;
  wire sel_10205;
  wire sel_10206;
  wire sel_10207;
  wire sel_10208;
  wire sel_10209;
  wire sel_10210;
  wire sel_10211;
  wire sel_10212;
  wire sel_10213;
  wire sel_10214;
  wire sel_10215;
  wire s_684;
  wire sel_2_1545;
  wire s_685;
  wire sel_2_1546;
  wire s_686;
  wire sel_2_1547;
  wire s_687;
  wire sel_2_1548;
  wire s_688;
  wire sel_2_1549;
  wire s_689;
  wire sel_2_1550;
  wire s_690;
  wire sel_2_1551;
  wire s_691;
  wire sel_2_1552;
  wire sel_10216;
  wire sel_10217;
  wire sel_10218;
  wire s_692;
  wire sel_2_1553;
  wire s_693;
  wire sel_2_1554;
  wire s_694;
  wire sel_2_1555;
  wire s_695;
  wire sel_2_1556;
  wire s_696;
  wire sel_2_1557;
  wire s_697;
  wire sel_2_1558;
  wire s_698;
  wire sel_2_1559;
  wire s_699;
  wire sel_2_1560;
  wire sel_2_1561;
  wire sel_2_1562;
  wire sel_10219;
  wire sel_2_1563;
  wire sel_10220;
  wire sel_10221;
  reg  sel_2_1564;
  wire sel_10222;
  wire sel_10223;
  wire sel_10224;
  wire sel_10225;
  wire sel_10226;
  wire sel_10227;
  wire sel_10228;
  wire sel_10229;
  wire sel_10230;
  wire sel_10231;
  wire sel_10232;
  wire signed [31:0] sel_10233;  // int32
  wire signed [31:0] sel_10234;  // int32
  wire signed [31:0] sel_10235;  // int32
  wire signed [31:0] sel_10236;  // int32
  wire signed [31:0] sel_10237;  // int32
  wire signed [31:0] sel_10238;  // int32
  wire signed [31:0] sel_10239;  // int32
  wire signed [31:0] sel_10240;  // int32
  wire signed [31:0] sel_10241;  // int32
  wire signed [31:0] sel_10242;  // int32
  wire signed [31:0] sel_10243;  // int32
  wire signed [31:0] sel_10244;  // int32
  wire signed [31:0] s_700;  // int32
  wire signed [31:0] sel_1_2249;  // int32
  wire signed [31:0] sel_10245;  // int32
  wire signed [31:0] sel_1_2250;  // int32
  wire signed [31:0] sel_10246;  // int32
  wire signed [31:0] sel_1_2251;  // int32
  wire signed [31:0] sel_10247;  // int32
  wire signed [31:0] sel_1_2252;  // int32
  wire signed [31:0] sel_10248;  // int32
  wire signed [31:0] sel_1_2253;  // int32
  wire signed [31:0] sel_10249;  // int32
  wire signed [31:0] sel_1_2254;  // int32
  wire signed [31:0] sel_10250;  // int32
  wire signed [31:0] sel_1_2255;  // int32
  wire signed [31:0] sel_10251;  // int32
  wire signed [31:0] sel_1_2256;  // int32
  wire signed [31:0] sel_10252;  // int32
  wire signed [31:0] sel_10253;  // int32
  wire signed [31:0] sel_10254;  // int32
  reg signed [31:0] sel_1_2257;  // int32
  wire cont_bits_41_40;
  wire signed [31:0] sel_10255;  // int32
  wire signed [31:0] sel_10256;  // int32
  wire signed [31:0] sel_10257;  // int32
  wire signed [31:0] sel_10258;  // int32
  wire signed [31:0] sel_10259;  // int32
  wire signed [31:0] sel_10260;  // int32
  wire signed [31:0] sel_10261;  // int32
  wire signed [31:0] sel_10262;  // int32
  wire signed [31:0] sel_10263;  // int32
  wire signed [31:0] sel_10264;  // int32
  wire signed [31:0] sel_10265;  // int32
  wire signed [31:0] sel_10266;  // int32
  wire signed [31:0] s_701;  // int32
  wire signed [31:0] sel_1_2258;  // int32
  wire signed [31:0] sel_10267;  // int32
  wire signed [31:0] sel_1_2259;  // int32
  wire signed [31:0] sel_10268;  // int32
  wire signed [31:0] sel_1_2260;  // int32
  wire signed [31:0] sel_10269;  // int32
  wire signed [31:0] sel_1_2261;  // int32
  wire signed [31:0] sel_10270;  // int32
  wire signed [31:0] sel_1_2262;  // int32
  wire signed [31:0] sel_10271;  // int32
  wire signed [31:0] sel_1_2263;  // int32
  wire signed [31:0] sel_10272;  // int32
  wire signed [31:0] sel_1_2264;  // int32
  wire signed [31:0] sel_10273;  // int32
  wire signed [31:0] sel_10274;  // int32
  wire signed [31:0] sel_10275;  // int32
  reg signed [31:0] sel_1_2265;  // int32
  wire cont_bits_42_40;
  wire sel_1_2266;
  wire signed [31:0] sel_10276;  // int32
  wire signed [31:0] sel_10277;  // int32
  wire signed [31:0] sel_10278;  // int32
  wire signed [31:0] sel_10279;  // int32
  wire signed [31:0] sel_10280;  // int32
  wire signed [31:0] sel_10281;  // int32
  wire signed [31:0] sel_10282;  // int32
  wire signed [31:0] sel_10283;  // int32
  wire signed [31:0] sel_10284;  // int32
  wire signed [31:0] sel_10285;  // int32
  wire signed [31:0] sel_10286;  // int32
  wire signed [31:0] sel_10287;  // int32
  wire signed [31:0] s_702;  // int32
  wire signed [31:0] sel_1_2267;  // int32
  wire signed [31:0] sel_10288;  // int32
  wire signed [31:0] sel_1_2268;  // int32
  wire signed [31:0] sel_10289;  // int32
  wire signed [31:0] sel_1_2269;  // int32
  wire signed [31:0] sel_10290;  // int32
  wire signed [31:0] sel_1_2270;  // int32
  wire signed [31:0] sel_10291;  // int32
  wire signed [31:0] sel_1_2271;  // int32
  wire signed [31:0] sel_10292;  // int32
  wire signed [31:0] sel_1_2272;  // int32
  wire signed [31:0] sel_10293;  // int32
  wire signed [31:0] sel_10294;  // int32
  wire signed [31:0] sel_10295;  // int32
  reg signed [31:0] sel_1_2273;  // int32
  wire cont_bits_32_40;
  wire sel_1_2274;
  wire signed [31:0] sel_10296;  // int32
  wire signed [31:0] sel_10297;  // int32
  wire signed [31:0] sel_10298;  // int32
  wire signed [31:0] sel_10299;  // int32
  wire signed [31:0] sel_10300;  // int32
  wire signed [31:0] sel_10301;  // int32
  wire signed [31:0] sel_10302;  // int32
  wire signed [31:0] sel_10303;  // int32
  wire signed [31:0] sel_10304;  // int32
  wire signed [31:0] sel_10305;  // int32
  wire signed [31:0] sel_10306;  // int32
  wire signed [31:0] sel_10307;  // int32
  wire signed [31:0] s_703;  // int32
  wire signed [31:0] sel_1_2275;  // int32
  wire signed [31:0] sel_10308;  // int32
  wire signed [31:0] sel_1_2276;  // int32
  wire signed [31:0] sel_10309;  // int32
  wire signed [31:0] sel_1_2277;  // int32
  wire signed [31:0] sel_10310;  // int32
  wire signed [31:0] sel_1_2278;  // int32
  wire signed [31:0] sel_10311;  // int32
  wire signed [31:0] sel_1_2279;  // int32
  wire signed [31:0] sel_10312;  // int32
  wire signed [31:0] sel_10313;  // int32
  wire signed [31:0] sel_10314;  // int32
  reg signed [31:0] sel_1_2280;  // int32
  wire cont_bits_31_40;
  wire sel_1_2281;
  wire signed [31:0] sel_10315;  // int32
  wire signed [31:0] sel_10316;  // int32
  wire signed [31:0] sel_10317;  // int32
  wire signed [31:0] sel_10318;  // int32
  wire signed [31:0] sel_10319;  // int32
  wire signed [31:0] sel_10320;  // int32
  wire signed [31:0] sel_10321;  // int32
  wire signed [31:0] sel_10322;  // int32
  wire signed [31:0] sel_10323;  // int32
  wire signed [31:0] sel_10324;  // int32
  wire signed [31:0] sel_10325;  // int32
  wire signed [31:0] sel_10326;  // int32
  wire signed [31:0] s_704;  // int32
  wire signed [31:0] sel_1_2282;  // int32
  wire signed [31:0] sel_10327;  // int32
  wire signed [31:0] sel_1_2283;  // int32
  wire signed [31:0] sel_10328;  // int32
  wire signed [31:0] sel_1_2284;  // int32
  wire signed [31:0] sel_10329;  // int32
  wire signed [31:0] sel_1_2285;  // int32
  wire signed [31:0] sel_10330;  // int32
  wire signed [31:0] sel_10331;  // int32
  wire signed [31:0] sel_10332;  // int32
  reg signed [31:0] sel_1_2286;  // int32
  wire cont_bits_22_40;
  wire sel_1_2287;
  wire signed [31:0] sel_10333;  // int32
  wire signed [31:0] sel_10334;  // int32
  wire signed [31:0] sel_10335;  // int32
  wire signed [31:0] sel_10336;  // int32
  wire signed [31:0] sel_10337;  // int32
  wire signed [31:0] sel_10338;  // int32
  wire signed [31:0] sel_10339;  // int32
  wire signed [31:0] sel_10340;  // int32
  wire signed [31:0] sel_10341;  // int32
  wire signed [31:0] sel_10342;  // int32
  wire signed [31:0] sel_10343;  // int32
  wire signed [31:0] sel_10344;  // int32
  wire signed [31:0] s_705;  // int32
  wire signed [31:0] sel_1_2288;  // int32
  wire signed [31:0] sel_10345;  // int32
  wire signed [31:0] sel_1_2289;  // int32
  wire signed [31:0] sel_10346;  // int32
  wire signed [31:0] sel_1_2290;  // int32
  wire signed [31:0] sel_10347;  // int32
  wire signed [31:0] sel_10348;  // int32
  wire signed [31:0] sel_10349;  // int32
  reg signed [31:0] sel_1_2291;  // int32
  wire cont_bits_21_40;
  wire sel_1_2292;
  wire signed [31:0] sel_10350;  // int32
  wire signed [31:0] sel_10351;  // int32
  wire signed [31:0] sel_10352;  // int32
  wire signed [31:0] sel_10353;  // int32
  wire signed [31:0] sel_10354;  // int32
  wire signed [31:0] sel_10355;  // int32
  wire signed [31:0] sel_10356;  // int32
  wire signed [31:0] sel_10357;  // int32
  wire signed [31:0] sel_10358;  // int32
  wire signed [31:0] sel_10359;  // int32
  wire signed [31:0] sel_10360;  // int32
  wire signed [31:0] sel_10361;  // int32
  wire signed [31:0] s_706;  // int32
  wire signed [31:0] sel_1_2293;  // int32
  wire signed [31:0] sel_10362;  // int32
  wire signed [31:0] sel_1_2294;  // int32
  wire signed [31:0] sel_10363;  // int32
  wire signed [31:0] sel_10364;  // int32
  wire signed [31:0] sel_10365;  // int32
  reg signed [31:0] sel_1_2295;  // int32
  wire cont_bits_12_40;
  wire sel_1_2296;
  wire signed [31:0] sel_10366;  // int32
  wire signed [31:0] sel_10367;  // int32
  wire signed [31:0] sel_10368;  // int32
  wire signed [31:0] sel_10369;  // int32
  wire signed [31:0] sel_10370;  // int32
  wire signed [31:0] sel_10371;  // int32
  wire signed [31:0] sel_10372;  // int32
  wire signed [31:0] sel_10373;  // int32
  wire signed [31:0] sel_10374;  // int32
  wire signed [31:0] sel_10375;  // int32
  wire signed [31:0] sel_10376;  // int32
  wire signed [31:0] sel_10377;  // int32
  wire signed [31:0] s_707;  // int32
  wire signed [31:0] sel_1_2297;  // int32
  wire signed [31:0] sel_10378;  // int32
  wire signed [31:0] sel_10379;  // int32
  wire signed [31:0] sel_10380;  // int32
  reg signed [31:0] sel_1_2298;  // int32
  wire cont_bits_47;
  wire sel_1_2299;
  wire signed [31:0] sel_10381;  // int32
  wire signed [31:0] sel_10382;  // int32
  wire signed [31:0] sel_10383;  // int32
  wire signed [31:0] sel_10384;  // int32
  wire signed [31:0] sel_10385;  // int32
  wire signed [31:0] sel_10386;  // int32
  wire signed [31:0] sel_10387;  // int32
  wire signed [31:0] sel_10388;  // int32
  wire signed [31:0] sel_10389;  // int32
  wire signed [31:0] sel_10390;  // int32
  wire signed [31:0] sel_10391;  // int32
  wire signed [31:0] sel_10392;  // int32
  wire signed [31:0] sel_10393;  // int32
  wire signed [31:0] sel_10394;  // int32
  wire signed [31:0] sel_10395;  // int32
  wire signed [31:0] s_708;  // int32
  wire signed [31:0] sel_1_2300;  // int32
  wire signed [31:0] sel_10396;  // int32
  wire signed [31:0] sel_1_2301;  // int32
  wire signed [31:0] sel_10397;  // int32
  wire signed [31:0] sel_1_2302;  // int32
  wire signed [31:0] sel_10398;  // int32
  wire signed [31:0] sel_1_2303;  // int32
  wire signed [31:0] sel_10399;  // int32
  wire signed [31:0] sel_1_2304;  // int32
  wire signed [31:0] sel_10400;  // int32
  wire signed [31:0] sel_1_2305;  // int32
  wire signed [31:0] sel_10401;  // int32
  wire signed [31:0] sel_1_2306;  // int32
  wire signed [31:0] sel_10402;  // int32
  wire signed [31:0] sel_1_2307;  // int32
  wire signed [31:0] sel_1_2308;  // int32
  wire signed [31:0] sel_1_2309;  // int32
  wire signed [31:0] sel_10403;  // int32
  wire signed [31:0] sel_1_2310;  // int32
  wire signed [31:0] sel_10404;  // int32
  wire signed [31:0] sel_10405;  // int32
  reg signed [31:0] sel_1_2311;  // int32
  wire cont_bits_41_41;
  wire signed [31:0] sel_10406;  // int32
  wire signed [31:0] sel_10407;  // int32
  wire signed [31:0] sel_10408;  // int32
  wire signed [31:0] sel_10409;  // int32
  wire signed [31:0] sel_10410;  // int32
  wire signed [31:0] sel_10411;  // int32
  wire signed [31:0] sel_10412;  // int32
  wire signed [31:0] sel_10413;  // int32
  wire signed [31:0] sel_10414;  // int32
  wire signed [31:0] sel_10415;  // int32
  wire signed [31:0] sel_10416;  // int32
  wire signed [31:0] sel_10417;  // int32
  wire signed [31:0] sel_10418;  // int32
  wire signed [31:0] sel_10419;  // int32
  wire signed [31:0] sel_10420;  // int32
  wire signed [31:0] s_709;  // int32
  wire signed [31:0] sel_1_2312;  // int32
  wire signed [31:0] sel_10421;  // int32
  wire signed [31:0] sel_1_2313;  // int32
  wire signed [31:0] sel_10422;  // int32
  wire signed [31:0] sel_1_2314;  // int32
  wire signed [31:0] sel_10423;  // int32
  wire signed [31:0] sel_1_2315;  // int32
  wire signed [31:0] sel_10424;  // int32
  wire signed [31:0] sel_1_2316;  // int32
  wire signed [31:0] sel_10425;  // int32
  wire signed [31:0] sel_1_2317;  // int32
  wire signed [31:0] sel_10426;  // int32
  wire signed [31:0] sel_1_2318;  // int32
  wire signed [31:0] sel_1_2319;  // int32
  wire signed [31:0] sel_1_2320;  // int32
  wire signed [31:0] sel_10427;  // int32
  wire signed [31:0] sel_1_2321;  // int32
  wire signed [31:0] sel_10428;  // int32
  wire signed [31:0] sel_10429;  // int32
  reg signed [31:0] sel_1_2322;  // int32
  wire cont_bits_42_41;
  wire sel_1_2323;
  wire signed [31:0] sel_10430;  // int32
  wire signed [31:0] sel_10431;  // int32
  wire signed [31:0] sel_10432;  // int32
  wire signed [31:0] sel_10433;  // int32
  wire signed [31:0] sel_10434;  // int32
  wire signed [31:0] sel_10435;  // int32
  wire signed [31:0] sel_10436;  // int32
  wire signed [31:0] sel_10437;  // int32
  wire signed [31:0] sel_10438;  // int32
  wire signed [31:0] sel_10439;  // int32
  wire signed [31:0] sel_10440;  // int32
  wire signed [31:0] sel_10441;  // int32
  wire signed [31:0] sel_10442;  // int32
  wire signed [31:0] sel_10443;  // int32
  wire signed [31:0] sel_10444;  // int32
  wire signed [31:0] s_710;  // int32
  wire signed [31:0] sel_1_2324;  // int32
  wire signed [31:0] sel_10445;  // int32
  wire signed [31:0] sel_1_2325;  // int32
  wire signed [31:0] sel_10446;  // int32
  wire signed [31:0] sel_1_2326;  // int32
  wire signed [31:0] sel_10447;  // int32
  wire signed [31:0] sel_1_2327;  // int32
  wire signed [31:0] sel_10448;  // int32
  wire signed [31:0] sel_1_2328;  // int32
  wire signed [31:0] sel_10449;  // int32
  wire signed [31:0] sel_1_2329;  // int32
  wire signed [31:0] sel_1_2330;  // int32
  wire signed [31:0] sel_1_2331;  // int32
  wire signed [31:0] sel_10450;  // int32
  wire signed [31:0] sel_1_2332;  // int32
  wire signed [31:0] sel_10451;  // int32
  wire signed [31:0] sel_10452;  // int32
  reg signed [31:0] sel_1_2333;  // int32
  wire cont_bits_32_41;
  wire sel_1_2334;
  wire signed [31:0] sel_10453;  // int32
  wire signed [31:0] sel_10454;  // int32
  wire signed [31:0] sel_10455;  // int32
  wire signed [31:0] sel_10456;  // int32
  wire signed [31:0] sel_10457;  // int32
  wire signed [31:0] sel_10458;  // int32
  wire signed [31:0] sel_10459;  // int32
  wire signed [31:0] sel_10460;  // int32
  wire signed [31:0] sel_10461;  // int32
  wire signed [31:0] sel_10462;  // int32
  wire signed [31:0] sel_10463;  // int32
  wire signed [31:0] sel_10464;  // int32
  wire signed [31:0] sel_10465;  // int32
  wire signed [31:0] sel_10466;  // int32
  wire signed [31:0] sel_10467;  // int32
  wire signed [31:0] s_711;  // int32
  wire signed [31:0] sel_1_2335;  // int32
  wire signed [31:0] sel_10468;  // int32
  wire signed [31:0] sel_1_2336;  // int32
  wire signed [31:0] sel_10469;  // int32
  wire signed [31:0] sel_1_2337;  // int32
  wire signed [31:0] sel_10470;  // int32
  wire signed [31:0] sel_1_2338;  // int32
  wire signed [31:0] sel_10471;  // int32
  wire signed [31:0] sel_1_2339;  // int32
  wire signed [31:0] sel_1_2340;  // int32
  wire signed [31:0] sel_1_2341;  // int32
  wire signed [31:0] sel_10472;  // int32
  wire signed [31:0] sel_1_2342;  // int32
  wire signed [31:0] sel_10473;  // int32
  wire signed [31:0] sel_10474;  // int32
  reg signed [31:0] sel_1_2343;  // int32
  wire cont_bits_31_41;
  wire sel_1_2344;
  wire signed [31:0] sel_10475;  // int32
  wire signed [31:0] sel_10476;  // int32
  wire signed [31:0] sel_10477;  // int32
  wire signed [31:0] sel_10478;  // int32
  wire signed [31:0] sel_10479;  // int32
  wire signed [31:0] sel_10480;  // int32
  wire signed [31:0] sel_10481;  // int32
  wire signed [31:0] sel_10482;  // int32
  wire signed [31:0] sel_10483;  // int32
  wire signed [31:0] sel_10484;  // int32
  wire signed [31:0] sel_10485;  // int32
  wire signed [31:0] sel_10486;  // int32
  wire signed [31:0] sel_10487;  // int32
  wire signed [31:0] sel_10488;  // int32
  wire signed [31:0] sel_10489;  // int32
  wire signed [31:0] s_712;  // int32
  wire signed [31:0] sel_1_2345;  // int32
  wire signed [31:0] sel_10490;  // int32
  wire signed [31:0] sel_1_2346;  // int32
  wire signed [31:0] sel_10491;  // int32
  wire signed [31:0] sel_1_2347;  // int32
  wire signed [31:0] sel_10492;  // int32
  wire signed [31:0] sel_1_2348;  // int32
  wire signed [31:0] sel_1_2349;  // int32
  wire signed [31:0] sel_1_2350;  // int32
  wire signed [31:0] sel_10493;  // int32
  wire signed [31:0] sel_1_2351;  // int32
  wire signed [31:0] sel_10494;  // int32
  wire signed [31:0] sel_10495;  // int32
  reg signed [31:0] sel_1_2352;  // int32
  wire cont_bits_22_41;
  wire sel_1_2353;
  wire signed [31:0] sel_10496;  // int32
  wire signed [31:0] sel_10497;  // int32
  wire signed [31:0] sel_10498;  // int32
  wire signed [31:0] sel_10499;  // int32
  wire signed [31:0] sel_10500;  // int32
  wire signed [31:0] sel_10501;  // int32
  wire signed [31:0] sel_10502;  // int32
  wire signed [31:0] sel_10503;  // int32
  wire signed [31:0] sel_10504;  // int32
  wire signed [31:0] sel_10505;  // int32
  wire signed [31:0] sel_10506;  // int32
  wire signed [31:0] sel_10507;  // int32
  wire signed [31:0] sel_10508;  // int32
  wire signed [31:0] sel_10509;  // int32
  wire signed [31:0] sel_10510;  // int32
  wire signed [31:0] s_713;  // int32
  wire signed [31:0] sel_1_2354;  // int32
  wire signed [31:0] sel_10511;  // int32
  wire signed [31:0] sel_1_2355;  // int32
  wire signed [31:0] sel_10512;  // int32
  wire signed [31:0] sel_1_2356;  // int32
  wire signed [31:0] sel_1_2357;  // int32
  wire signed [31:0] sel_1_2358;  // int32
  wire signed [31:0] sel_10513;  // int32
  wire signed [31:0] sel_1_2359;  // int32
  wire signed [31:0] sel_10514;  // int32
  wire signed [31:0] sel_10515;  // int32
  reg signed [31:0] sel_1_2360;  // int32
  wire cont_bits_21_41;
  wire sel_1_2361;
  wire signed [31:0] sel_10516;  // int32
  wire signed [31:0] sel_10517;  // int32
  wire signed [31:0] sel_10518;  // int32
  wire signed [31:0] sel_10519;  // int32
  wire signed [31:0] sel_10520;  // int32
  wire signed [31:0] sel_10521;  // int32
  wire signed [31:0] sel_10522;  // int32
  wire signed [31:0] sel_10523;  // int32
  wire signed [31:0] sel_10524;  // int32
  wire signed [31:0] sel_10525;  // int32
  wire signed [31:0] sel_10526;  // int32
  wire signed [31:0] sel_10527;  // int32
  wire signed [31:0] sel_10528;  // int32
  wire signed [31:0] sel_10529;  // int32
  wire signed [31:0] sel_10530;  // int32
  wire signed [31:0] s_714;  // int32
  wire signed [31:0] sel_1_2362;  // int32
  wire signed [31:0] sel_10531;  // int32
  wire signed [31:0] sel_1_2363;  // int32
  wire signed [31:0] sel_1_2364;  // int32
  wire signed [31:0] sel_1_2365;  // int32
  wire signed [31:0] sel_10532;  // int32
  wire signed [31:0] sel_1_2366;  // int32
  wire signed [31:0] sel_10533;  // int32
  wire signed [31:0] sel_10534;  // int32
  reg signed [31:0] sel_1_2367;  // int32
  wire cont_bits_12_41;
  wire sel_1_2368;
  wire signed [31:0] sel_10535;  // int32
  wire signed [31:0] sel_10536;  // int32
  wire signed [31:0] sel_10537;  // int32
  wire signed [31:0] sel_10538;  // int32
  wire signed [31:0] sel_10539;  // int32
  wire signed [31:0] sel_10540;  // int32
  wire signed [31:0] sel_10541;  // int32
  wire signed [31:0] sel_10542;  // int32
  wire signed [31:0] sel_10543;  // int32
  wire signed [31:0] sel_10544;  // int32
  wire signed [31:0] sel_10545;  // int32
  wire signed [31:0] sel_10546;  // int32
  wire signed [31:0] sel_10547;  // int32
  wire signed [31:0] sel_10548;  // int32
  wire signed [31:0] sel_10549;  // int32
  wire signed [31:0] s_715;  // int32
  wire signed [31:0] sel_1_2369;  // int32
  wire signed [31:0] sel_1_2370;  // int32
  wire signed [31:0] sel_1_2371;  // int32
  wire signed [31:0] sel_10550;  // int32
  wire signed [31:0] sel_1_2372;  // int32
  wire signed [31:0] sel_10551;  // int32
  wire signed [31:0] sel_10552;  // int32
  reg signed [31:0] sel_1_2373;  // int32
  wire cont_bits_48;
  wire sel_1_2374;
  wire sel_10553;
  wire sel_10554;
  reg  sel_1_2375;
  wire sel_10555;
  wire sel_10556;
  wire sel_10557;
  wire sel_10558;
  wire sel_10559;
  wire sel_10560;
  wire sel_10561;
  wire sel_10562;
  wire sel_10563;
  wire sel_10564;
  wire sel_10565;
  wire sel_10566;
  wire s_716;
  wire sel_2_1565;
  wire s_717;
  wire sel_2_1566;
  wire s_718;
  wire sel_2_1567;
  wire s_719;
  wire sel_2_1568;
  wire s_720;
  wire sel_2_1569;
  wire s_721;
  wire sel_2_1570;
  wire s_722;
  wire sel_2_1571;
  wire s_723;
  wire sel_2_1572;
  wire sel_10567;
  wire sel_10568;
  wire sel_10569;
  wire s_724;
  wire sel_2_1573;
  wire s_725;
  wire sel_2_1574;
  wire s_726;
  wire sel_2_1575;
  wire s_727;
  wire sel_2_1576;
  wire s_728;
  wire sel_2_1577;
  wire s_729;
  wire sel_2_1578;
  wire s_730;
  wire sel_2_1579;
  wire s_731;
  wire sel_2_1580;
  wire sel_2_1581;
  wire sel_2_1582;
  wire sel_10570;
  wire sel_2_1583;
  wire sel_10571;
  wire sel_10572;
  reg  sel_2_1584;
  wire sel_10573;
  wire sel_10574;
  wire sel_10575;
  wire sel_10576;
  wire sel_10577;
  wire sel_10578;
  wire sel_10579;
  wire sel_10580;
  wire sel_10581;
  wire sel_10582;
  wire sel_10583;
  wire signed [31:0] sel_10584;  // int32
  wire signed [31:0] sel_10585;  // int32
  wire signed [31:0] sel_10586;  // int32
  wire signed [31:0] sel_10587;  // int32
  wire signed [31:0] sel_10588;  // int32
  wire signed [31:0] sel_10589;  // int32
  wire signed [31:0] sel_10590;  // int32
  wire signed [31:0] sel_10591;  // int32
  wire signed [31:0] sel_10592;  // int32
  wire signed [31:0] sel_10593;  // int32
  wire signed [31:0] sel_10594;  // int32
  wire signed [31:0] sel_10595;  // int32
  wire signed [31:0] s_732;  // int32
  wire signed [31:0] sel_1_2376;  // int32
  wire signed [31:0] sel_10596;  // int32
  wire signed [31:0] sel_1_2377;  // int32
  wire signed [31:0] sel_10597;  // int32
  wire signed [31:0] sel_1_2378;  // int32
  wire signed [31:0] sel_10598;  // int32
  wire signed [31:0] sel_1_2379;  // int32
  wire signed [31:0] sel_10599;  // int32
  wire signed [31:0] sel_1_2380;  // int32
  wire signed [31:0] sel_10600;  // int32
  wire signed [31:0] sel_1_2381;  // int32
  wire signed [31:0] sel_10601;  // int32
  wire signed [31:0] sel_1_2382;  // int32
  wire signed [31:0] sel_10602;  // int32
  wire signed [31:0] sel_1_2383;  // int32
  wire signed [31:0] sel_10603;  // int32
  wire signed [31:0] sel_10604;  // int32
  wire signed [31:0] sel_10605;  // int32
  reg signed [31:0] sel_1_2384;  // int32
  wire cont_bits_41_42;
  wire signed [31:0] sel_10606;  // int32
  wire signed [31:0] sel_10607;  // int32
  wire signed [31:0] sel_10608;  // int32
  wire signed [31:0] sel_10609;  // int32
  wire signed [31:0] sel_10610;  // int32
  wire signed [31:0] sel_10611;  // int32
  wire signed [31:0] sel_10612;  // int32
  wire signed [31:0] sel_10613;  // int32
  wire signed [31:0] sel_10614;  // int32
  wire signed [31:0] sel_10615;  // int32
  wire signed [31:0] sel_10616;  // int32
  wire signed [31:0] sel_10617;  // int32
  wire signed [31:0] s_733;  // int32
  wire signed [31:0] sel_1_2385;  // int32
  wire signed [31:0] sel_10618;  // int32
  wire signed [31:0] sel_1_2386;  // int32
  wire signed [31:0] sel_10619;  // int32
  wire signed [31:0] sel_1_2387;  // int32
  wire signed [31:0] sel_10620;  // int32
  wire signed [31:0] sel_1_2388;  // int32
  wire signed [31:0] sel_10621;  // int32
  wire signed [31:0] sel_1_2389;  // int32
  wire signed [31:0] sel_10622;  // int32
  wire signed [31:0] sel_1_2390;  // int32
  wire signed [31:0] sel_10623;  // int32
  wire signed [31:0] sel_1_2391;  // int32
  wire signed [31:0] sel_10624;  // int32
  wire signed [31:0] sel_10625;  // int32
  wire signed [31:0] sel_10626;  // int32
  reg signed [31:0] sel_1_2392;  // int32
  wire cont_bits_42_42;
  wire sel_1_2393;
  wire signed [31:0] sel_10627;  // int32
  wire signed [31:0] sel_10628;  // int32
  wire signed [31:0] sel_10629;  // int32
  wire signed [31:0] sel_10630;  // int32
  wire signed [31:0] sel_10631;  // int32
  wire signed [31:0] sel_10632;  // int32
  wire signed [31:0] sel_10633;  // int32
  wire signed [31:0] sel_10634;  // int32
  wire signed [31:0] sel_10635;  // int32
  wire signed [31:0] sel_10636;  // int32
  wire signed [31:0] sel_10637;  // int32
  wire signed [31:0] sel_10638;  // int32
  wire signed [31:0] s_734;  // int32
  wire signed [31:0] sel_1_2394;  // int32
  wire signed [31:0] sel_10639;  // int32
  wire signed [31:0] sel_1_2395;  // int32
  wire signed [31:0] sel_10640;  // int32
  wire signed [31:0] sel_1_2396;  // int32
  wire signed [31:0] sel_10641;  // int32
  wire signed [31:0] sel_1_2397;  // int32
  wire signed [31:0] sel_10642;  // int32
  wire signed [31:0] sel_1_2398;  // int32
  wire signed [31:0] sel_10643;  // int32
  wire signed [31:0] sel_1_2399;  // int32
  wire signed [31:0] sel_10644;  // int32
  wire signed [31:0] sel_10645;  // int32
  wire signed [31:0] sel_10646;  // int32
  reg signed [31:0] sel_1_2400;  // int32
  wire cont_bits_32_42;
  wire sel_1_2401;
  wire signed [31:0] sel_10647;  // int32
  wire signed [31:0] sel_10648;  // int32
  wire signed [31:0] sel_10649;  // int32
  wire signed [31:0] sel_10650;  // int32
  wire signed [31:0] sel_10651;  // int32
  wire signed [31:0] sel_10652;  // int32
  wire signed [31:0] sel_10653;  // int32
  wire signed [31:0] sel_10654;  // int32
  wire signed [31:0] sel_10655;  // int32
  wire signed [31:0] sel_10656;  // int32
  wire signed [31:0] sel_10657;  // int32
  wire signed [31:0] sel_10658;  // int32
  wire signed [31:0] s_735;  // int32
  wire signed [31:0] sel_1_2402;  // int32
  wire signed [31:0] sel_10659;  // int32
  wire signed [31:0] sel_1_2403;  // int32
  wire signed [31:0] sel_10660;  // int32
  wire signed [31:0] sel_1_2404;  // int32
  wire signed [31:0] sel_10661;  // int32
  wire signed [31:0] sel_1_2405;  // int32
  wire signed [31:0] sel_10662;  // int32
  wire signed [31:0] sel_1_2406;  // int32
  wire signed [31:0] sel_10663;  // int32
  wire signed [31:0] sel_10664;  // int32
  wire signed [31:0] sel_10665;  // int32
  reg signed [31:0] sel_1_2407;  // int32
  wire cont_bits_31_42;
  wire sel_1_2408;
  wire signed [31:0] sel_10666;  // int32
  wire signed [31:0] sel_10667;  // int32
  wire signed [31:0] sel_10668;  // int32
  wire signed [31:0] sel_10669;  // int32
  wire signed [31:0] sel_10670;  // int32
  wire signed [31:0] sel_10671;  // int32
  wire signed [31:0] sel_10672;  // int32
  wire signed [31:0] sel_10673;  // int32
  wire signed [31:0] sel_10674;  // int32
  wire signed [31:0] sel_10675;  // int32
  wire signed [31:0] sel_10676;  // int32
  wire signed [31:0] sel_10677;  // int32
  wire signed [31:0] s_736;  // int32
  wire signed [31:0] sel_1_2409;  // int32
  wire signed [31:0] sel_10678;  // int32
  wire signed [31:0] sel_1_2410;  // int32
  wire signed [31:0] sel_10679;  // int32
  wire signed [31:0] sel_1_2411;  // int32
  wire signed [31:0] sel_10680;  // int32
  wire signed [31:0] sel_1_2412;  // int32
  wire signed [31:0] sel_10681;  // int32
  wire signed [31:0] sel_10682;  // int32
  wire signed [31:0] sel_10683;  // int32
  reg signed [31:0] sel_1_2413;  // int32
  wire cont_bits_22_42;
  wire sel_1_2414;
  wire signed [31:0] sel_10684;  // int32
  wire signed [31:0] sel_10685;  // int32
  wire signed [31:0] sel_10686;  // int32
  wire signed [31:0] sel_10687;  // int32
  wire signed [31:0] sel_10688;  // int32
  wire signed [31:0] sel_10689;  // int32
  wire signed [31:0] sel_10690;  // int32
  wire signed [31:0] sel_10691;  // int32
  wire signed [31:0] sel_10692;  // int32
  wire signed [31:0] sel_10693;  // int32
  wire signed [31:0] sel_10694;  // int32
  wire signed [31:0] sel_10695;  // int32
  wire signed [31:0] s_737;  // int32
  wire signed [31:0] sel_1_2415;  // int32
  wire signed [31:0] sel_10696;  // int32
  wire signed [31:0] sel_1_2416;  // int32
  wire signed [31:0] sel_10697;  // int32
  wire signed [31:0] sel_1_2417;  // int32
  wire signed [31:0] sel_10698;  // int32
  wire signed [31:0] sel_10699;  // int32
  wire signed [31:0] sel_10700;  // int32
  reg signed [31:0] sel_1_2418;  // int32
  wire cont_bits_21_42;
  wire sel_1_2419;
  wire signed [31:0] sel_10701;  // int32
  wire signed [31:0] sel_10702;  // int32
  wire signed [31:0] sel_10703;  // int32
  wire signed [31:0] sel_10704;  // int32
  wire signed [31:0] sel_10705;  // int32
  wire signed [31:0] sel_10706;  // int32
  wire signed [31:0] sel_10707;  // int32
  wire signed [31:0] sel_10708;  // int32
  wire signed [31:0] sel_10709;  // int32
  wire signed [31:0] sel_10710;  // int32
  wire signed [31:0] sel_10711;  // int32
  wire signed [31:0] sel_10712;  // int32
  wire signed [31:0] s_738;  // int32
  wire signed [31:0] sel_1_2420;  // int32
  wire signed [31:0] sel_10713;  // int32
  wire signed [31:0] sel_1_2421;  // int32
  wire signed [31:0] sel_10714;  // int32
  wire signed [31:0] sel_10715;  // int32
  wire signed [31:0] sel_10716;  // int32
  reg signed [31:0] sel_1_2422;  // int32
  wire cont_bits_12_42;
  wire sel_1_2423;
  wire signed [31:0] sel_10717;  // int32
  wire signed [31:0] sel_10718;  // int32
  wire signed [31:0] sel_10719;  // int32
  wire signed [31:0] sel_10720;  // int32
  wire signed [31:0] sel_10721;  // int32
  wire signed [31:0] sel_10722;  // int32
  wire signed [31:0] sel_10723;  // int32
  wire signed [31:0] sel_10724;  // int32
  wire signed [31:0] sel_10725;  // int32
  wire signed [31:0] sel_10726;  // int32
  wire signed [31:0] sel_10727;  // int32
  wire signed [31:0] sel_10728;  // int32
  wire signed [31:0] s_739;  // int32
  wire signed [31:0] sel_1_2424;  // int32
  wire signed [31:0] sel_10729;  // int32
  wire signed [31:0] sel_10730;  // int32
  wire signed [31:0] sel_10731;  // int32
  reg signed [31:0] sel_1_2425;  // int32
  wire cont_bits_49;
  wire sel_1_2426;
  wire signed [31:0] sel_10732;  // int32
  wire signed [31:0] sel_10733;  // int32
  wire signed [31:0] sel_10734;  // int32
  wire signed [31:0] sel_10735;  // int32
  wire signed [31:0] sel_10736;  // int32
  wire signed [31:0] sel_10737;  // int32
  wire signed [31:0] sel_10738;  // int32
  wire signed [31:0] sel_10739;  // int32
  wire signed [31:0] sel_10740;  // int32
  wire signed [31:0] sel_10741;  // int32
  wire signed [31:0] sel_10742;  // int32
  wire signed [31:0] sel_10743;  // int32
  wire signed [31:0] sel_10744;  // int32
  wire signed [31:0] sel_10745;  // int32
  wire signed [31:0] sel_10746;  // int32
  wire signed [31:0] s_740;  // int32
  wire signed [31:0] sel_1_2427;  // int32
  wire signed [31:0] sel_10747;  // int32
  wire signed [31:0] sel_1_2428;  // int32
  wire signed [31:0] sel_10748;  // int32
  wire signed [31:0] sel_1_2429;  // int32
  wire signed [31:0] sel_10749;  // int32
  wire signed [31:0] sel_1_2430;  // int32
  wire signed [31:0] sel_10750;  // int32
  wire signed [31:0] sel_1_2431;  // int32
  wire signed [31:0] sel_10751;  // int32
  wire signed [31:0] sel_1_2432;  // int32
  wire signed [31:0] sel_10752;  // int32
  wire signed [31:0] sel_1_2433;  // int32
  wire signed [31:0] sel_10753;  // int32
  wire signed [31:0] sel_1_2434;  // int32
  wire signed [31:0] sel_1_2435;  // int32
  wire signed [31:0] sel_1_2436;  // int32
  wire signed [31:0] sel_10754;  // int32
  wire signed [31:0] sel_1_2437;  // int32
  wire signed [31:0] sel_10755;  // int32
  wire signed [31:0] sel_10756;  // int32
  reg signed [31:0] sel_1_2438;  // int32
  wire cont_bits_41_43;
  wire signed [31:0] sel_10757;  // int32
  wire signed [31:0] sel_10758;  // int32
  wire signed [31:0] sel_10759;  // int32
  wire signed [31:0] sel_10760;  // int32
  wire signed [31:0] sel_10761;  // int32
  wire signed [31:0] sel_10762;  // int32
  wire signed [31:0] sel_10763;  // int32
  wire signed [31:0] sel_10764;  // int32
  wire signed [31:0] sel_10765;  // int32
  wire signed [31:0] sel_10766;  // int32
  wire signed [31:0] sel_10767;  // int32
  wire signed [31:0] sel_10768;  // int32
  wire signed [31:0] sel_10769;  // int32
  wire signed [31:0] sel_10770;  // int32
  wire signed [31:0] sel_10771;  // int32
  wire signed [31:0] s_741;  // int32
  wire signed [31:0] sel_1_2439;  // int32
  wire signed [31:0] sel_10772;  // int32
  wire signed [31:0] sel_1_2440;  // int32
  wire signed [31:0] sel_10773;  // int32
  wire signed [31:0] sel_1_2441;  // int32
  wire signed [31:0] sel_10774;  // int32
  wire signed [31:0] sel_1_2442;  // int32
  wire signed [31:0] sel_10775;  // int32
  wire signed [31:0] sel_1_2443;  // int32
  wire signed [31:0] sel_10776;  // int32
  wire signed [31:0] sel_1_2444;  // int32
  wire signed [31:0] sel_10777;  // int32
  wire signed [31:0] sel_1_2445;  // int32
  wire signed [31:0] sel_1_2446;  // int32
  wire signed [31:0] sel_1_2447;  // int32
  wire signed [31:0] sel_10778;  // int32
  wire signed [31:0] sel_1_2448;  // int32
  wire signed [31:0] sel_10779;  // int32
  wire signed [31:0] sel_10780;  // int32
  reg signed [31:0] sel_1_2449;  // int32
  wire cont_bits_42_43;
  wire sel_1_2450;
  wire signed [31:0] sel_10781;  // int32
  wire signed [31:0] sel_10782;  // int32
  wire signed [31:0] sel_10783;  // int32
  wire signed [31:0] sel_10784;  // int32
  wire signed [31:0] sel_10785;  // int32
  wire signed [31:0] sel_10786;  // int32
  wire signed [31:0] sel_10787;  // int32
  wire signed [31:0] sel_10788;  // int32
  wire signed [31:0] sel_10789;  // int32
  wire signed [31:0] sel_10790;  // int32
  wire signed [31:0] sel_10791;  // int32
  wire signed [31:0] sel_10792;  // int32
  wire signed [31:0] sel_10793;  // int32
  wire signed [31:0] sel_10794;  // int32
  wire signed [31:0] sel_10795;  // int32
  wire signed [31:0] s_742;  // int32
  wire signed [31:0] sel_1_2451;  // int32
  wire signed [31:0] sel_10796;  // int32
  wire signed [31:0] sel_1_2452;  // int32
  wire signed [31:0] sel_10797;  // int32
  wire signed [31:0] sel_1_2453;  // int32
  wire signed [31:0] sel_10798;  // int32
  wire signed [31:0] sel_1_2454;  // int32
  wire signed [31:0] sel_10799;  // int32
  wire signed [31:0] sel_1_2455;  // int32
  wire signed [31:0] sel_10800;  // int32
  wire signed [31:0] sel_1_2456;  // int32
  wire signed [31:0] sel_1_2457;  // int32
  wire signed [31:0] sel_1_2458;  // int32
  wire signed [31:0] sel_10801;  // int32
  wire signed [31:0] sel_1_2459;  // int32
  wire signed [31:0] sel_10802;  // int32
  wire signed [31:0] sel_10803;  // int32
  reg signed [31:0] sel_1_2460;  // int32
  wire cont_bits_32_43;
  wire sel_1_2461;
  wire signed [31:0] sel_10804;  // int32
  wire signed [31:0] sel_10805;  // int32
  wire signed [31:0] sel_10806;  // int32
  wire signed [31:0] sel_10807;  // int32
  wire signed [31:0] sel_10808;  // int32
  wire signed [31:0] sel_10809;  // int32
  wire signed [31:0] sel_10810;  // int32
  wire signed [31:0] sel_10811;  // int32
  wire signed [31:0] sel_10812;  // int32
  wire signed [31:0] sel_10813;  // int32
  wire signed [31:0] sel_10814;  // int32
  wire signed [31:0] sel_10815;  // int32
  wire signed [31:0] sel_10816;  // int32
  wire signed [31:0] sel_10817;  // int32
  wire signed [31:0] sel_10818;  // int32
  wire signed [31:0] s_743;  // int32
  wire signed [31:0] sel_1_2462;  // int32
  wire signed [31:0] sel_10819;  // int32
  wire signed [31:0] sel_1_2463;  // int32
  wire signed [31:0] sel_10820;  // int32
  wire signed [31:0] sel_1_2464;  // int32
  wire signed [31:0] sel_10821;  // int32
  wire signed [31:0] sel_1_2465;  // int32
  wire signed [31:0] sel_10822;  // int32
  wire signed [31:0] sel_1_2466;  // int32
  wire signed [31:0] sel_1_2467;  // int32
  wire signed [31:0] sel_1_2468;  // int32
  wire signed [31:0] sel_10823;  // int32
  wire signed [31:0] sel_1_2469;  // int32
  wire signed [31:0] sel_10824;  // int32
  wire signed [31:0] sel_10825;  // int32
  reg signed [31:0] sel_1_2470;  // int32
  wire cont_bits_31_43;
  wire sel_1_2471;
  wire signed [31:0] sel_10826;  // int32
  wire signed [31:0] sel_10827;  // int32
  wire signed [31:0] sel_10828;  // int32
  wire signed [31:0] sel_10829;  // int32
  wire signed [31:0] sel_10830;  // int32
  wire signed [31:0] sel_10831;  // int32
  wire signed [31:0] sel_10832;  // int32
  wire signed [31:0] sel_10833;  // int32
  wire signed [31:0] sel_10834;  // int32
  wire signed [31:0] sel_10835;  // int32
  wire signed [31:0] sel_10836;  // int32
  wire signed [31:0] sel_10837;  // int32
  wire signed [31:0] sel_10838;  // int32
  wire signed [31:0] sel_10839;  // int32
  wire signed [31:0] sel_10840;  // int32
  wire signed [31:0] s_744;  // int32
  wire signed [31:0] sel_1_2472;  // int32
  wire signed [31:0] sel_10841;  // int32
  wire signed [31:0] sel_1_2473;  // int32
  wire signed [31:0] sel_10842;  // int32
  wire signed [31:0] sel_1_2474;  // int32
  wire signed [31:0] sel_10843;  // int32
  wire signed [31:0] sel_1_2475;  // int32
  wire signed [31:0] sel_1_2476;  // int32
  wire signed [31:0] sel_1_2477;  // int32
  wire signed [31:0] sel_10844;  // int32
  wire signed [31:0] sel_1_2478;  // int32
  wire signed [31:0] sel_10845;  // int32
  wire signed [31:0] sel_10846;  // int32
  reg signed [31:0] sel_1_2479;  // int32
  wire cont_bits_22_43;
  wire sel_1_2480;
  wire signed [31:0] sel_10847;  // int32
  wire signed [31:0] sel_10848;  // int32
  wire signed [31:0] sel_10849;  // int32
  wire signed [31:0] sel_10850;  // int32
  wire signed [31:0] sel_10851;  // int32
  wire signed [31:0] sel_10852;  // int32
  wire signed [31:0] sel_10853;  // int32
  wire signed [31:0] sel_10854;  // int32
  wire signed [31:0] sel_10855;  // int32
  wire signed [31:0] sel_10856;  // int32
  wire signed [31:0] sel_10857;  // int32
  wire signed [31:0] sel_10858;  // int32
  wire signed [31:0] sel_10859;  // int32
  wire signed [31:0] sel_10860;  // int32
  wire signed [31:0] sel_10861;  // int32
  wire signed [31:0] s_745;  // int32
  wire signed [31:0] sel_1_2481;  // int32
  wire signed [31:0] sel_10862;  // int32
  wire signed [31:0] sel_1_2482;  // int32
  wire signed [31:0] sel_10863;  // int32
  wire signed [31:0] sel_1_2483;  // int32
  wire signed [31:0] sel_1_2484;  // int32
  wire signed [31:0] sel_1_2485;  // int32
  wire signed [31:0] sel_10864;  // int32
  wire signed [31:0] sel_1_2486;  // int32
  wire signed [31:0] sel_10865;  // int32
  wire signed [31:0] sel_10866;  // int32
  reg signed [31:0] sel_1_2487;  // int32
  wire cont_bits_21_43;
  wire sel_1_2488;
  wire signed [31:0] sel_10867;  // int32
  wire signed [31:0] sel_10868;  // int32
  wire signed [31:0] sel_10869;  // int32
  wire signed [31:0] sel_10870;  // int32
  wire signed [31:0] sel_10871;  // int32
  wire signed [31:0] sel_10872;  // int32
  wire signed [31:0] sel_10873;  // int32
  wire signed [31:0] sel_10874;  // int32
  wire signed [31:0] sel_10875;  // int32
  wire signed [31:0] sel_10876;  // int32
  wire signed [31:0] sel_10877;  // int32
  wire signed [31:0] sel_10878;  // int32
  wire signed [31:0] sel_10879;  // int32
  wire signed [31:0] sel_10880;  // int32
  wire signed [31:0] sel_10881;  // int32
  wire signed [31:0] s_746;  // int32
  wire signed [31:0] sel_1_2489;  // int32
  wire signed [31:0] sel_10882;  // int32
  wire signed [31:0] sel_1_2490;  // int32
  wire signed [31:0] sel_1_2491;  // int32
  wire signed [31:0] sel_1_2492;  // int32
  wire signed [31:0] sel_10883;  // int32
  wire signed [31:0] sel_1_2493;  // int32
  wire signed [31:0] sel_10884;  // int32
  wire signed [31:0] sel_10885;  // int32
  reg signed [31:0] sel_1_2494;  // int32
  wire cont_bits_12_43;
  wire sel_1_2495;
  wire signed [31:0] sel_10886;  // int32
  wire signed [31:0] sel_10887;  // int32
  wire signed [31:0] sel_10888;  // int32
  wire signed [31:0] sel_10889;  // int32
  wire signed [31:0] sel_10890;  // int32
  wire signed [31:0] sel_10891;  // int32
  wire signed [31:0] sel_10892;  // int32
  wire signed [31:0] sel_10893;  // int32
  wire signed [31:0] sel_10894;  // int32
  wire signed [31:0] sel_10895;  // int32
  wire signed [31:0] sel_10896;  // int32
  wire signed [31:0] sel_10897;  // int32
  wire signed [31:0] sel_10898;  // int32
  wire signed [31:0] sel_10899;  // int32
  wire signed [31:0] sel_10900;  // int32
  wire signed [31:0] s_747;  // int32
  wire signed [31:0] sel_1_2496;  // int32
  wire signed [31:0] sel_1_2497;  // int32
  wire signed [31:0] sel_1_2498;  // int32
  wire signed [31:0] sel_10901;  // int32
  wire signed [31:0] sel_1_2499;  // int32
  wire signed [31:0] sel_10902;  // int32
  wire signed [31:0] sel_10903;  // int32
  reg signed [31:0] sel_1_2500;  // int32
  wire cont_bits_50;
  wire sel_1_2501;
  wire sel_10904;
  wire sel_10905;
  reg  sel_1_2502;
  wire sel_10906;
  wire sel_10907;
  wire sel_10908;
  wire sel_10909;
  wire sel_10910;
  wire sel_10911;
  wire sel_10912;
  wire sel_10913;
  wire sel_10914;
  wire sel_10915;
  wire sel_10916;
  wire sel_10917;
  wire s_748;
  wire sel_2_1585;
  wire s_749;
  wire sel_2_1586;
  wire s_750;
  wire sel_2_1587;
  wire s_751;
  wire sel_2_1588;
  wire s_752;
  wire sel_2_1589;
  wire s_753;
  wire sel_2_1590;
  wire s_754;
  wire sel_2_1591;
  wire s_755;
  wire sel_2_1592;
  wire sel_10918;
  wire sel_10919;
  wire sel_10920;
  wire s_756;
  wire sel_2_1593;
  wire s_757;
  wire sel_2_1594;
  wire s_758;
  wire sel_2_1595;
  wire s_759;
  wire sel_2_1596;
  wire s_760;
  wire sel_2_1597;
  wire s_761;
  wire sel_2_1598;
  wire s_762;
  wire sel_2_1599;
  wire s_763;
  wire sel_2_1600;
  wire sel_2_1601;
  wire sel_2_1602;
  wire sel_10921;
  wire sel_2_1603;
  wire sel_10922;
  wire sel_10923;
  reg  sel_2_1604;
  wire sel_10924;
  wire sel_10925;
  wire sel_10926;
  wire sel_10927;
  wire sel_10928;
  wire sel_10929;
  wire sel_10930;
  wire sel_10931;
  wire sel_10932;
  wire sel_10933;
  wire sel_10934;
  wire signed [31:0] sel_10935;  // int32
  wire signed [31:0] sel_10936;  // int32
  wire signed [31:0] sel_10937;  // int32
  wire signed [31:0] sel_10938;  // int32
  wire signed [31:0] sel_10939;  // int32
  wire signed [31:0] sel_10940;  // int32
  wire signed [31:0] sel_10941;  // int32
  wire signed [31:0] sel_10942;  // int32
  wire signed [31:0] sel_10943;  // int32
  wire signed [31:0] sel_10944;  // int32
  wire signed [31:0] sel_10945;  // int32
  wire signed [31:0] sel_10946;  // int32
  wire signed [31:0] s_764;  // int32
  wire signed [31:0] sel_1_2503;  // int32
  wire signed [31:0] sel_10947;  // int32
  wire signed [31:0] sel_1_2504;  // int32
  wire signed [31:0] sel_10948;  // int32
  wire signed [31:0] sel_1_2505;  // int32
  wire signed [31:0] sel_10949;  // int32
  wire signed [31:0] sel_1_2506;  // int32
  wire signed [31:0] sel_10950;  // int32
  wire signed [31:0] sel_1_2507;  // int32
  wire signed [31:0] sel_10951;  // int32
  wire signed [31:0] sel_1_2508;  // int32
  wire signed [31:0] sel_10952;  // int32
  wire signed [31:0] sel_1_2509;  // int32
  wire signed [31:0] sel_10953;  // int32
  wire signed [31:0] sel_1_2510;  // int32
  wire signed [31:0] sel_10954;  // int32
  wire signed [31:0] sel_10955;  // int32
  wire signed [31:0] sel_10956;  // int32
  reg signed [31:0] sel_1_2511;  // int32
  wire cont_bits_41_44;
  wire signed [31:0] sel_10957;  // int32
  wire signed [31:0] sel_10958;  // int32
  wire signed [31:0] sel_10959;  // int32
  wire signed [31:0] sel_10960;  // int32
  wire signed [31:0] sel_10961;  // int32
  wire signed [31:0] sel_10962;  // int32
  wire signed [31:0] sel_10963;  // int32
  wire signed [31:0] sel_10964;  // int32
  wire signed [31:0] sel_10965;  // int32
  wire signed [31:0] sel_10966;  // int32
  wire signed [31:0] sel_10967;  // int32
  wire signed [31:0] sel_10968;  // int32
  wire signed [31:0] s_765;  // int32
  wire signed [31:0] sel_1_2512;  // int32
  wire signed [31:0] sel_10969;  // int32
  wire signed [31:0] sel_1_2513;  // int32
  wire signed [31:0] sel_10970;  // int32
  wire signed [31:0] sel_1_2514;  // int32
  wire signed [31:0] sel_10971;  // int32
  wire signed [31:0] sel_1_2515;  // int32
  wire signed [31:0] sel_10972;  // int32
  wire signed [31:0] sel_1_2516;  // int32
  wire signed [31:0] sel_10973;  // int32
  wire signed [31:0] sel_1_2517;  // int32
  wire signed [31:0] sel_10974;  // int32
  wire signed [31:0] sel_1_2518;  // int32
  wire signed [31:0] sel_10975;  // int32
  wire signed [31:0] sel_10976;  // int32
  wire signed [31:0] sel_10977;  // int32
  reg signed [31:0] sel_1_2519;  // int32
  wire cont_bits_42_44;
  wire sel_1_2520;
  wire signed [31:0] sel_10978;  // int32
  wire signed [31:0] sel_10979;  // int32
  wire signed [31:0] sel_10980;  // int32
  wire signed [31:0] sel_10981;  // int32
  wire signed [31:0] sel_10982;  // int32
  wire signed [31:0] sel_10983;  // int32
  wire signed [31:0] sel_10984;  // int32
  wire signed [31:0] sel_10985;  // int32
  wire signed [31:0] sel_10986;  // int32
  wire signed [31:0] sel_10987;  // int32
  wire signed [31:0] sel_10988;  // int32
  wire signed [31:0] sel_10989;  // int32
  wire signed [31:0] s_766;  // int32
  wire signed [31:0] sel_1_2521;  // int32
  wire signed [31:0] sel_10990;  // int32
  wire signed [31:0] sel_1_2522;  // int32
  wire signed [31:0] sel_10991;  // int32
  wire signed [31:0] sel_1_2523;  // int32
  wire signed [31:0] sel_10992;  // int32
  wire signed [31:0] sel_1_2524;  // int32
  wire signed [31:0] sel_10993;  // int32
  wire signed [31:0] sel_1_2525;  // int32
  wire signed [31:0] sel_10994;  // int32
  wire signed [31:0] sel_1_2526;  // int32
  wire signed [31:0] sel_10995;  // int32
  wire signed [31:0] sel_10996;  // int32
  wire signed [31:0] sel_10997;  // int32
  reg signed [31:0] sel_1_2527;  // int32
  wire cont_bits_32_44;
  wire sel_1_2528;
  wire signed [31:0] sel_10998;  // int32
  wire signed [31:0] sel_10999;  // int32
  wire signed [31:0] sel_11000;  // int32
  wire signed [31:0] sel_11001;  // int32
  wire signed [31:0] sel_11002;  // int32
  wire signed [31:0] sel_11003;  // int32
  wire signed [31:0] sel_11004;  // int32
  wire signed [31:0] sel_11005;  // int32
  wire signed [31:0] sel_11006;  // int32
  wire signed [31:0] sel_11007;  // int32
  wire signed [31:0] sel_11008;  // int32
  wire signed [31:0] sel_11009;  // int32
  wire signed [31:0] s_767;  // int32
  wire signed [31:0] sel_1_2529;  // int32
  wire signed [31:0] sel_11010;  // int32
  wire signed [31:0] sel_1_2530;  // int32
  wire signed [31:0] sel_11011;  // int32
  wire signed [31:0] sel_1_2531;  // int32
  wire signed [31:0] sel_11012;  // int32
  wire signed [31:0] sel_1_2532;  // int32
  wire signed [31:0] sel_11013;  // int32
  wire signed [31:0] sel_1_2533;  // int32
  wire signed [31:0] sel_11014;  // int32
  wire signed [31:0] sel_11015;  // int32
  wire signed [31:0] sel_11016;  // int32
  reg signed [31:0] sel_1_2534;  // int32
  wire cont_bits_31_44;
  wire sel_1_2535;
  wire signed [31:0] sel_11017;  // int32
  wire signed [31:0] sel_11018;  // int32
  wire signed [31:0] sel_11019;  // int32
  wire signed [31:0] sel_11020;  // int32
  wire signed [31:0] sel_11021;  // int32
  wire signed [31:0] sel_11022;  // int32
  wire signed [31:0] sel_11023;  // int32
  wire signed [31:0] sel_11024;  // int32
  wire signed [31:0] sel_11025;  // int32
  wire signed [31:0] sel_11026;  // int32
  wire signed [31:0] sel_11027;  // int32
  wire signed [31:0] sel_11028;  // int32
  wire signed [31:0] s_768;  // int32
  wire signed [31:0] sel_1_2536;  // int32
  wire signed [31:0] sel_11029;  // int32
  wire signed [31:0] sel_1_2537;  // int32
  wire signed [31:0] sel_11030;  // int32
  wire signed [31:0] sel_1_2538;  // int32
  wire signed [31:0] sel_11031;  // int32
  wire signed [31:0] sel_1_2539;  // int32
  wire signed [31:0] sel_11032;  // int32
  wire signed [31:0] sel_11033;  // int32
  wire signed [31:0] sel_11034;  // int32
  reg signed [31:0] sel_1_2540;  // int32
  wire cont_bits_22_44;
  wire sel_1_2541;
  wire signed [31:0] sel_11035;  // int32
  wire signed [31:0] sel_11036;  // int32
  wire signed [31:0] sel_11037;  // int32
  wire signed [31:0] sel_11038;  // int32
  wire signed [31:0] sel_11039;  // int32
  wire signed [31:0] sel_11040;  // int32
  wire signed [31:0] sel_11041;  // int32
  wire signed [31:0] sel_11042;  // int32
  wire signed [31:0] sel_11043;  // int32
  wire signed [31:0] sel_11044;  // int32
  wire signed [31:0] sel_11045;  // int32
  wire signed [31:0] sel_11046;  // int32
  wire signed [31:0] s_769;  // int32
  wire signed [31:0] sel_1_2542;  // int32
  wire signed [31:0] sel_11047;  // int32
  wire signed [31:0] sel_1_2543;  // int32
  wire signed [31:0] sel_11048;  // int32
  wire signed [31:0] sel_1_2544;  // int32
  wire signed [31:0] sel_11049;  // int32
  wire signed [31:0] sel_11050;  // int32
  wire signed [31:0] sel_11051;  // int32
  reg signed [31:0] sel_1_2545;  // int32
  wire cont_bits_21_44;
  wire sel_1_2546;
  wire signed [31:0] sel_11052;  // int32
  wire signed [31:0] sel_11053;  // int32
  wire signed [31:0] sel_11054;  // int32
  wire signed [31:0] sel_11055;  // int32
  wire signed [31:0] sel_11056;  // int32
  wire signed [31:0] sel_11057;  // int32
  wire signed [31:0] sel_11058;  // int32
  wire signed [31:0] sel_11059;  // int32
  wire signed [31:0] sel_11060;  // int32
  wire signed [31:0] sel_11061;  // int32
  wire signed [31:0] sel_11062;  // int32
  wire signed [31:0] sel_11063;  // int32
  wire signed [31:0] s_770;  // int32
  wire signed [31:0] sel_1_2547;  // int32
  wire signed [31:0] sel_11064;  // int32
  wire signed [31:0] sel_1_2548;  // int32
  wire signed [31:0] sel_11065;  // int32
  wire signed [31:0] sel_11066;  // int32
  wire signed [31:0] sel_11067;  // int32
  reg signed [31:0] sel_1_2549;  // int32
  wire cont_bits_12_44;
  wire sel_1_2550;
  wire signed [31:0] sel_11068;  // int32
  wire signed [31:0] sel_11069;  // int32
  wire signed [31:0] sel_11070;  // int32
  wire signed [31:0] sel_11071;  // int32
  wire signed [31:0] sel_11072;  // int32
  wire signed [31:0] sel_11073;  // int32
  wire signed [31:0] sel_11074;  // int32
  wire signed [31:0] sel_11075;  // int32
  wire signed [31:0] sel_11076;  // int32
  wire signed [31:0] sel_11077;  // int32
  wire signed [31:0] sel_11078;  // int32
  wire signed [31:0] sel_11079;  // int32
  wire signed [31:0] s_771;  // int32
  wire signed [31:0] sel_1_2551;  // int32
  wire signed [31:0] sel_11080;  // int32
  wire signed [31:0] sel_11081;  // int32
  wire signed [31:0] sel_11082;  // int32
  reg signed [31:0] sel_1_2552;  // int32
  wire cont_bits_51;
  wire sel_1_2553;
  wire signed [31:0] sel_11083;  // int32
  wire signed [31:0] sel_11084;  // int32
  wire signed [31:0] sel_11085;  // int32
  wire signed [31:0] sel_11086;  // int32
  wire signed [31:0] sel_11087;  // int32
  wire signed [31:0] sel_11088;  // int32
  wire signed [31:0] sel_11089;  // int32
  wire signed [31:0] sel_11090;  // int32
  wire signed [31:0] sel_11091;  // int32
  wire signed [31:0] sel_11092;  // int32
  wire signed [31:0] sel_11093;  // int32
  wire signed [31:0] sel_11094;  // int32
  wire signed [31:0] sel_11095;  // int32
  wire signed [31:0] sel_11096;  // int32
  wire signed [31:0] sel_11097;  // int32
  wire signed [31:0] s_772;  // int32
  wire signed [31:0] sel_1_2554;  // int32
  wire signed [31:0] sel_11098;  // int32
  wire signed [31:0] sel_1_2555;  // int32
  wire signed [31:0] sel_11099;  // int32
  wire signed [31:0] sel_1_2556;  // int32
  wire signed [31:0] sel_11100;  // int32
  wire signed [31:0] sel_1_2557;  // int32
  wire signed [31:0] sel_11101;  // int32
  wire signed [31:0] sel_1_2558;  // int32
  wire signed [31:0] sel_11102;  // int32
  wire signed [31:0] sel_1_2559;  // int32
  wire signed [31:0] sel_11103;  // int32
  wire signed [31:0] sel_1_2560;  // int32
  wire signed [31:0] sel_11104;  // int32
  wire signed [31:0] sel_1_2561;  // int32
  wire signed [31:0] sel_1_2562;  // int32
  wire signed [31:0] sel_1_2563;  // int32
  wire signed [31:0] sel_11105;  // int32
  wire signed [31:0] sel_1_2564;  // int32
  wire signed [31:0] sel_11106;  // int32
  wire signed [31:0] sel_11107;  // int32
  reg signed [31:0] sel_1_2565;  // int32
  wire cont_bits_41_45;
  wire signed [31:0] sel_11108;  // int32
  wire signed [31:0] sel_11109;  // int32
  wire signed [31:0] sel_11110;  // int32
  wire signed [31:0] sel_11111;  // int32
  wire signed [31:0] sel_11112;  // int32
  wire signed [31:0] sel_11113;  // int32
  wire signed [31:0] sel_11114;  // int32
  wire signed [31:0] sel_11115;  // int32
  wire signed [31:0] sel_11116;  // int32
  wire signed [31:0] sel_11117;  // int32
  wire signed [31:0] sel_11118;  // int32
  wire signed [31:0] sel_11119;  // int32
  wire signed [31:0] sel_11120;  // int32
  wire signed [31:0] sel_11121;  // int32
  wire signed [31:0] sel_11122;  // int32
  wire signed [31:0] s_773;  // int32
  wire signed [31:0] sel_1_2566;  // int32
  wire signed [31:0] sel_11123;  // int32
  wire signed [31:0] sel_1_2567;  // int32
  wire signed [31:0] sel_11124;  // int32
  wire signed [31:0] sel_1_2568;  // int32
  wire signed [31:0] sel_11125;  // int32
  wire signed [31:0] sel_1_2569;  // int32
  wire signed [31:0] sel_11126;  // int32
  wire signed [31:0] sel_1_2570;  // int32
  wire signed [31:0] sel_11127;  // int32
  wire signed [31:0] sel_1_2571;  // int32
  wire signed [31:0] sel_11128;  // int32
  wire signed [31:0] sel_1_2572;  // int32
  wire signed [31:0] sel_1_2573;  // int32
  wire signed [31:0] sel_1_2574;  // int32
  wire signed [31:0] sel_11129;  // int32
  wire signed [31:0] sel_1_2575;  // int32
  wire signed [31:0] sel_11130;  // int32
  wire signed [31:0] sel_11131;  // int32
  reg signed [31:0] sel_1_2576;  // int32
  wire cont_bits_42_45;
  wire sel_1_2577;
  wire signed [31:0] sel_11132;  // int32
  wire signed [31:0] sel_11133;  // int32
  wire signed [31:0] sel_11134;  // int32
  wire signed [31:0] sel_11135;  // int32
  wire signed [31:0] sel_11136;  // int32
  wire signed [31:0] sel_11137;  // int32
  wire signed [31:0] sel_11138;  // int32
  wire signed [31:0] sel_11139;  // int32
  wire signed [31:0] sel_11140;  // int32
  wire signed [31:0] sel_11141;  // int32
  wire signed [31:0] sel_11142;  // int32
  wire signed [31:0] sel_11143;  // int32
  wire signed [31:0] sel_11144;  // int32
  wire signed [31:0] sel_11145;  // int32
  wire signed [31:0] sel_11146;  // int32
  wire signed [31:0] s_774;  // int32
  wire signed [31:0] sel_1_2578;  // int32
  wire signed [31:0] sel_11147;  // int32
  wire signed [31:0] sel_1_2579;  // int32
  wire signed [31:0] sel_11148;  // int32
  wire signed [31:0] sel_1_2580;  // int32
  wire signed [31:0] sel_11149;  // int32
  wire signed [31:0] sel_1_2581;  // int32
  wire signed [31:0] sel_11150;  // int32
  wire signed [31:0] sel_1_2582;  // int32
  wire signed [31:0] sel_11151;  // int32
  wire signed [31:0] sel_1_2583;  // int32
  wire signed [31:0] sel_1_2584;  // int32
  wire signed [31:0] sel_1_2585;  // int32
  wire signed [31:0] sel_11152;  // int32
  wire signed [31:0] sel_1_2586;  // int32
  wire signed [31:0] sel_11153;  // int32
  wire signed [31:0] sel_11154;  // int32
  reg signed [31:0] sel_1_2587;  // int32
  wire cont_bits_32_45;
  wire sel_1_2588;
  wire signed [31:0] sel_11155;  // int32
  wire signed [31:0] sel_11156;  // int32
  wire signed [31:0] sel_11157;  // int32
  wire signed [31:0] sel_11158;  // int32
  wire signed [31:0] sel_11159;  // int32
  wire signed [31:0] sel_11160;  // int32
  wire signed [31:0] sel_11161;  // int32
  wire signed [31:0] sel_11162;  // int32
  wire signed [31:0] sel_11163;  // int32
  wire signed [31:0] sel_11164;  // int32
  wire signed [31:0] sel_11165;  // int32
  wire signed [31:0] sel_11166;  // int32
  wire signed [31:0] sel_11167;  // int32
  wire signed [31:0] sel_11168;  // int32
  wire signed [31:0] sel_11169;  // int32
  wire signed [31:0] s_775;  // int32
  wire signed [31:0] sel_1_2589;  // int32
  wire signed [31:0] sel_11170;  // int32
  wire signed [31:0] sel_1_2590;  // int32
  wire signed [31:0] sel_11171;  // int32
  wire signed [31:0] sel_1_2591;  // int32
  wire signed [31:0] sel_11172;  // int32
  wire signed [31:0] sel_1_2592;  // int32
  wire signed [31:0] sel_11173;  // int32
  wire signed [31:0] sel_1_2593;  // int32
  wire signed [31:0] sel_1_2594;  // int32
  wire signed [31:0] sel_1_2595;  // int32
  wire signed [31:0] sel_11174;  // int32
  wire signed [31:0] sel_1_2596;  // int32
  wire signed [31:0] sel_11175;  // int32
  wire signed [31:0] sel_11176;  // int32
  reg signed [31:0] sel_1_2597;  // int32
  wire cont_bits_31_45;
  wire sel_1_2598;
  wire signed [31:0] sel_11177;  // int32
  wire signed [31:0] sel_11178;  // int32
  wire signed [31:0] sel_11179;  // int32
  wire signed [31:0] sel_11180;  // int32
  wire signed [31:0] sel_11181;  // int32
  wire signed [31:0] sel_11182;  // int32
  wire signed [31:0] sel_11183;  // int32
  wire signed [31:0] sel_11184;  // int32
  wire signed [31:0] sel_11185;  // int32
  wire signed [31:0] sel_11186;  // int32
  wire signed [31:0] sel_11187;  // int32
  wire signed [31:0] sel_11188;  // int32
  wire signed [31:0] sel_11189;  // int32
  wire signed [31:0] sel_11190;  // int32
  wire signed [31:0] sel_11191;  // int32
  wire signed [31:0] s_776;  // int32
  wire signed [31:0] sel_1_2599;  // int32
  wire signed [31:0] sel_11192;  // int32
  wire signed [31:0] sel_1_2600;  // int32
  wire signed [31:0] sel_11193;  // int32
  wire signed [31:0] sel_1_2601;  // int32
  wire signed [31:0] sel_11194;  // int32
  wire signed [31:0] sel_1_2602;  // int32
  wire signed [31:0] sel_1_2603;  // int32
  wire signed [31:0] sel_1_2604;  // int32
  wire signed [31:0] sel_11195;  // int32
  wire signed [31:0] sel_1_2605;  // int32
  wire signed [31:0] sel_11196;  // int32
  wire signed [31:0] sel_11197;  // int32
  reg signed [31:0] sel_1_2606;  // int32
  wire cont_bits_22_45;
  wire sel_1_2607;
  wire signed [31:0] sel_11198;  // int32
  wire signed [31:0] sel_11199;  // int32
  wire signed [31:0] sel_11200;  // int32
  wire signed [31:0] sel_11201;  // int32
  wire signed [31:0] sel_11202;  // int32
  wire signed [31:0] sel_11203;  // int32
  wire signed [31:0] sel_11204;  // int32
  wire signed [31:0] sel_11205;  // int32
  wire signed [31:0] sel_11206;  // int32
  wire signed [31:0] sel_11207;  // int32
  wire signed [31:0] sel_11208;  // int32
  wire signed [31:0] sel_11209;  // int32
  wire signed [31:0] sel_11210;  // int32
  wire signed [31:0] sel_11211;  // int32
  wire signed [31:0] sel_11212;  // int32
  wire signed [31:0] s_777;  // int32
  wire signed [31:0] sel_1_2608;  // int32
  wire signed [31:0] sel_11213;  // int32
  wire signed [31:0] sel_1_2609;  // int32
  wire signed [31:0] sel_11214;  // int32
  wire signed [31:0] sel_1_2610;  // int32
  wire signed [31:0] sel_1_2611;  // int32
  wire signed [31:0] sel_1_2612;  // int32
  wire signed [31:0] sel_11215;  // int32
  wire signed [31:0] sel_1_2613;  // int32
  wire signed [31:0] sel_11216;  // int32
  wire signed [31:0] sel_11217;  // int32
  reg signed [31:0] sel_1_2614;  // int32
  wire cont_bits_21_45;
  wire sel_1_2615;
  wire signed [31:0] sel_11218;  // int32
  wire signed [31:0] sel_11219;  // int32
  wire signed [31:0] sel_11220;  // int32
  wire signed [31:0] sel_11221;  // int32
  wire signed [31:0] sel_11222;  // int32
  wire signed [31:0] sel_11223;  // int32
  wire signed [31:0] sel_11224;  // int32
  wire signed [31:0] sel_11225;  // int32
  wire signed [31:0] sel_11226;  // int32
  wire signed [31:0] sel_11227;  // int32
  wire signed [31:0] sel_11228;  // int32
  wire signed [31:0] sel_11229;  // int32
  wire signed [31:0] sel_11230;  // int32
  wire signed [31:0] sel_11231;  // int32
  wire signed [31:0] sel_11232;  // int32
  wire signed [31:0] s_778;  // int32
  wire signed [31:0] sel_1_2616;  // int32
  wire signed [31:0] sel_11233;  // int32
  wire signed [31:0] sel_1_2617;  // int32
  wire signed [31:0] sel_1_2618;  // int32
  wire signed [31:0] sel_1_2619;  // int32
  wire signed [31:0] sel_11234;  // int32
  wire signed [31:0] sel_1_2620;  // int32
  wire signed [31:0] sel_11235;  // int32
  wire signed [31:0] sel_11236;  // int32
  reg signed [31:0] sel_1_2621;  // int32
  wire cont_bits_12_45;
  wire sel_1_2622;
  wire signed [31:0] sel_11237;  // int32
  wire signed [31:0] sel_11238;  // int32
  wire signed [31:0] sel_11239;  // int32
  wire signed [31:0] sel_11240;  // int32
  wire signed [31:0] sel_11241;  // int32
  wire signed [31:0] sel_11242;  // int32
  wire signed [31:0] sel_11243;  // int32
  wire signed [31:0] sel_11244;  // int32
  wire signed [31:0] sel_11245;  // int32
  wire signed [31:0] sel_11246;  // int32
  wire signed [31:0] sel_11247;  // int32
  wire signed [31:0] sel_11248;  // int32
  wire signed [31:0] sel_11249;  // int32
  wire signed [31:0] sel_11250;  // int32
  wire signed [31:0] sel_11251;  // int32
  wire signed [31:0] s_779;  // int32
  wire signed [31:0] sel_1_2623;  // int32
  wire signed [31:0] sel_1_2624;  // int32
  wire signed [31:0] sel_1_2625;  // int32
  wire signed [31:0] sel_11252;  // int32
  wire signed [31:0] sel_1_2626;  // int32
  wire signed [31:0] sel_11253;  // int32
  wire signed [31:0] sel_11254;  // int32
  reg signed [31:0] sel_1_2627;  // int32
  wire cont_bits_52;
  wire sel_1_2628;
  wire sel_11255;
  wire sel_11256;
  reg  sel_1_2629;
  wire sel_11257;
  wire sel_11258;
  wire sel_11259;
  wire sel_11260;
  wire sel_11261;
  wire sel_11262;
  wire sel_11263;
  wire sel_11264;
  wire sel_11265;
  wire sel_11266;
  wire sel_11267;
  wire sel_11268;
  wire s_780;
  wire sel_2_1605;
  wire s_781;
  wire sel_2_1606;
  wire s_782;
  wire sel_2_1607;
  wire s_783;
  wire sel_2_1608;
  wire s_784;
  wire sel_2_1609;
  wire s_785;
  wire sel_2_1610;
  wire s_786;
  wire sel_2_1611;
  wire s_787;
  wire sel_2_1612;
  wire sel_11269;
  wire sel_11270;
  wire sel_11271;
  wire s_788;
  wire sel_2_1613;
  wire s_789;
  wire sel_2_1614;
  wire s_790;
  wire sel_2_1615;
  wire s_791;
  wire sel_2_1616;
  wire s_792;
  wire sel_2_1617;
  wire s_793;
  wire sel_2_1618;
  wire s_794;
  wire sel_2_1619;
  wire s_795;
  wire sel_2_1620;
  wire sel_2_1621;
  wire sel_2_1622;
  wire sel_11272;
  wire sel_2_1623;
  wire sel_11273;
  wire sel_11274;
  reg  sel_2_1624;
  wire sel_11275;
  wire sel_11276;
  wire sel_11277;
  wire sel_11278;
  wire sel_11279;
  wire sel_11280;
  wire sel_11281;
  wire sel_11282;
  wire sel_11283;
  wire sel_11284;
  wire sel_11285;
  wire signed [31:0] sel_11286;  // int32
  wire signed [31:0] sel_11287;  // int32
  wire signed [31:0] sel_11288;  // int32
  wire signed [31:0] sel_11289;  // int32
  wire signed [31:0] sel_11290;  // int32
  wire signed [31:0] sel_11291;  // int32
  wire signed [31:0] sel_11292;  // int32
  wire signed [31:0] sel_11293;  // int32
  wire signed [31:0] sel_11294;  // int32
  wire signed [31:0] sel_11295;  // int32
  wire signed [31:0] sel_11296;  // int32
  wire signed [31:0] sel_11297;  // int32
  wire signed [31:0] s_796;  // int32
  wire signed [31:0] sel_1_2630;  // int32
  wire signed [31:0] sel_11298;  // int32
  wire signed [31:0] sel_1_2631;  // int32
  wire signed [31:0] sel_11299;  // int32
  wire signed [31:0] sel_1_2632;  // int32
  wire signed [31:0] sel_11300;  // int32
  wire signed [31:0] sel_1_2633;  // int32
  wire signed [31:0] sel_11301;  // int32
  wire signed [31:0] sel_1_2634;  // int32
  wire signed [31:0] sel_11302;  // int32
  wire signed [31:0] sel_1_2635;  // int32
  wire signed [31:0] sel_11303;  // int32
  wire signed [31:0] sel_1_2636;  // int32
  wire signed [31:0] sel_11304;  // int32
  wire signed [31:0] sel_1_2637;  // int32
  wire signed [31:0] sel_11305;  // int32
  wire signed [31:0] sel_11306;  // int32
  wire signed [31:0] sel_11307;  // int32
  reg signed [31:0] sel_1_2638;  // int32
  wire cont_bits_41_46;
  wire signed [31:0] sel_11308;  // int32
  wire signed [31:0] sel_11309;  // int32
  wire signed [31:0] sel_11310;  // int32
  wire signed [31:0] sel_11311;  // int32
  wire signed [31:0] sel_11312;  // int32
  wire signed [31:0] sel_11313;  // int32
  wire signed [31:0] sel_11314;  // int32
  wire signed [31:0] sel_11315;  // int32
  wire signed [31:0] sel_11316;  // int32
  wire signed [31:0] sel_11317;  // int32
  wire signed [31:0] sel_11318;  // int32
  wire signed [31:0] sel_11319;  // int32
  wire signed [31:0] s_797;  // int32
  wire signed [31:0] sel_1_2639;  // int32
  wire signed [31:0] sel_11320;  // int32
  wire signed [31:0] sel_1_2640;  // int32
  wire signed [31:0] sel_11321;  // int32
  wire signed [31:0] sel_1_2641;  // int32
  wire signed [31:0] sel_11322;  // int32
  wire signed [31:0] sel_1_2642;  // int32
  wire signed [31:0] sel_11323;  // int32
  wire signed [31:0] sel_1_2643;  // int32
  wire signed [31:0] sel_11324;  // int32
  wire signed [31:0] sel_1_2644;  // int32
  wire signed [31:0] sel_11325;  // int32
  wire signed [31:0] sel_1_2645;  // int32
  wire signed [31:0] sel_11326;  // int32
  wire signed [31:0] sel_11327;  // int32
  wire signed [31:0] sel_11328;  // int32
  reg signed [31:0] sel_1_2646;  // int32
  wire cont_bits_42_46;
  wire sel_1_2647;
  wire signed [31:0] sel_11329;  // int32
  wire signed [31:0] sel_11330;  // int32
  wire signed [31:0] sel_11331;  // int32
  wire signed [31:0] sel_11332;  // int32
  wire signed [31:0] sel_11333;  // int32
  wire signed [31:0] sel_11334;  // int32
  wire signed [31:0] sel_11335;  // int32
  wire signed [31:0] sel_11336;  // int32
  wire signed [31:0] sel_11337;  // int32
  wire signed [31:0] sel_11338;  // int32
  wire signed [31:0] sel_11339;  // int32
  wire signed [31:0] sel_11340;  // int32
  wire signed [31:0] s_798;  // int32
  wire signed [31:0] sel_1_2648;  // int32
  wire signed [31:0] sel_11341;  // int32
  wire signed [31:0] sel_1_2649;  // int32
  wire signed [31:0] sel_11342;  // int32
  wire signed [31:0] sel_1_2650;  // int32
  wire signed [31:0] sel_11343;  // int32
  wire signed [31:0] sel_1_2651;  // int32
  wire signed [31:0] sel_11344;  // int32
  wire signed [31:0] sel_1_2652;  // int32
  wire signed [31:0] sel_11345;  // int32
  wire signed [31:0] sel_1_2653;  // int32
  wire signed [31:0] sel_11346;  // int32
  wire signed [31:0] sel_11347;  // int32
  wire signed [31:0] sel_11348;  // int32
  reg signed [31:0] sel_1_2654;  // int32
  wire cont_bits_32_46;
  wire sel_1_2655;
  wire signed [31:0] sel_11349;  // int32
  wire signed [31:0] sel_11350;  // int32
  wire signed [31:0] sel_11351;  // int32
  wire signed [31:0] sel_11352;  // int32
  wire signed [31:0] sel_11353;  // int32
  wire signed [31:0] sel_11354;  // int32
  wire signed [31:0] sel_11355;  // int32
  wire signed [31:0] sel_11356;  // int32
  wire signed [31:0] sel_11357;  // int32
  wire signed [31:0] sel_11358;  // int32
  wire signed [31:0] sel_11359;  // int32
  wire signed [31:0] sel_11360;  // int32
  wire signed [31:0] s_799;  // int32
  wire signed [31:0] sel_1_2656;  // int32
  wire signed [31:0] sel_11361;  // int32
  wire signed [31:0] sel_1_2657;  // int32
  wire signed [31:0] sel_11362;  // int32
  wire signed [31:0] sel_1_2658;  // int32
  wire signed [31:0] sel_11363;  // int32
  wire signed [31:0] sel_1_2659;  // int32
  wire signed [31:0] sel_11364;  // int32
  wire signed [31:0] sel_1_2660;  // int32
  wire signed [31:0] sel_11365;  // int32
  wire signed [31:0] sel_11366;  // int32
  wire signed [31:0] sel_11367;  // int32
  reg signed [31:0] sel_1_2661;  // int32
  wire cont_bits_31_46;
  wire sel_1_2662;
  wire signed [31:0] sel_11368;  // int32
  wire signed [31:0] sel_11369;  // int32
  wire signed [31:0] sel_11370;  // int32
  wire signed [31:0] sel_11371;  // int32
  wire signed [31:0] sel_11372;  // int32
  wire signed [31:0] sel_11373;  // int32
  wire signed [31:0] sel_11374;  // int32
  wire signed [31:0] sel_11375;  // int32
  wire signed [31:0] sel_11376;  // int32
  wire signed [31:0] sel_11377;  // int32
  wire signed [31:0] sel_11378;  // int32
  wire signed [31:0] sel_11379;  // int32
  wire signed [31:0] s_800;  // int32
  wire signed [31:0] sel_1_2663;  // int32
  wire signed [31:0] sel_11380;  // int32
  wire signed [31:0] sel_1_2664;  // int32
  wire signed [31:0] sel_11381;  // int32
  wire signed [31:0] sel_1_2665;  // int32
  wire signed [31:0] sel_11382;  // int32
  wire signed [31:0] sel_1_2666;  // int32
  wire signed [31:0] sel_11383;  // int32
  wire signed [31:0] sel_11384;  // int32
  wire signed [31:0] sel_11385;  // int32
  reg signed [31:0] sel_1_2667;  // int32
  wire cont_bits_22_46;
  wire sel_1_2668;
  wire signed [31:0] sel_11386;  // int32
  wire signed [31:0] sel_11387;  // int32
  wire signed [31:0] sel_11388;  // int32
  wire signed [31:0] sel_11389;  // int32
  wire signed [31:0] sel_11390;  // int32
  wire signed [31:0] sel_11391;  // int32
  wire signed [31:0] sel_11392;  // int32
  wire signed [31:0] sel_11393;  // int32
  wire signed [31:0] sel_11394;  // int32
  wire signed [31:0] sel_11395;  // int32
  wire signed [31:0] sel_11396;  // int32
  wire signed [31:0] sel_11397;  // int32
  wire signed [31:0] s_801;  // int32
  wire signed [31:0] sel_1_2669;  // int32
  wire signed [31:0] sel_11398;  // int32
  wire signed [31:0] sel_1_2670;  // int32
  wire signed [31:0] sel_11399;  // int32
  wire signed [31:0] sel_1_2671;  // int32
  wire signed [31:0] sel_11400;  // int32
  wire signed [31:0] sel_11401;  // int32
  wire signed [31:0] sel_11402;  // int32
  reg signed [31:0] sel_1_2672;  // int32
  wire cont_bits_21_46;
  wire sel_1_2673;
  wire signed [31:0] sel_11403;  // int32
  wire signed [31:0] sel_11404;  // int32
  wire signed [31:0] sel_11405;  // int32
  wire signed [31:0] sel_11406;  // int32
  wire signed [31:0] sel_11407;  // int32
  wire signed [31:0] sel_11408;  // int32
  wire signed [31:0] sel_11409;  // int32
  wire signed [31:0] sel_11410;  // int32
  wire signed [31:0] sel_11411;  // int32
  wire signed [31:0] sel_11412;  // int32
  wire signed [31:0] sel_11413;  // int32
  wire signed [31:0] sel_11414;  // int32
  wire signed [31:0] s_802;  // int32
  wire signed [31:0] sel_1_2674;  // int32
  wire signed [31:0] sel_11415;  // int32
  wire signed [31:0] sel_1_2675;  // int32
  wire signed [31:0] sel_11416;  // int32
  wire signed [31:0] sel_11417;  // int32
  wire signed [31:0] sel_11418;  // int32
  reg signed [31:0] sel_1_2676;  // int32
  wire cont_bits_12_46;
  wire sel_1_2677;
  wire signed [31:0] sel_11419;  // int32
  wire signed [31:0] sel_11420;  // int32
  wire signed [31:0] sel_11421;  // int32
  wire signed [31:0] sel_11422;  // int32
  wire signed [31:0] sel_11423;  // int32
  wire signed [31:0] sel_11424;  // int32
  wire signed [31:0] sel_11425;  // int32
  wire signed [31:0] sel_11426;  // int32
  wire signed [31:0] sel_11427;  // int32
  wire signed [31:0] sel_11428;  // int32
  wire signed [31:0] sel_11429;  // int32
  wire signed [31:0] sel_11430;  // int32
  wire signed [31:0] s_803;  // int32
  wire signed [31:0] sel_1_2678;  // int32
  wire signed [31:0] sel_11431;  // int32
  wire signed [31:0] sel_11432;  // int32
  wire signed [31:0] sel_11433;  // int32
  reg signed [31:0] sel_1_2679;  // int32
  wire cont_bits_53;
  wire sel_1_2680;
  wire signed [31:0] sel_11434;  // int32
  wire signed [31:0] sel_11435;  // int32
  wire signed [31:0] sel_11436;  // int32
  wire signed [31:0] sel_11437;  // int32
  wire signed [31:0] sel_11438;  // int32
  wire signed [31:0] sel_11439;  // int32
  wire signed [31:0] sel_11440;  // int32
  wire signed [31:0] sel_11441;  // int32
  wire signed [31:0] sel_11442;  // int32
  wire signed [31:0] sel_11443;  // int32
  wire signed [31:0] sel_11444;  // int32
  wire signed [31:0] sel_11445;  // int32
  wire signed [31:0] sel_11446;  // int32
  wire signed [31:0] sel_11447;  // int32
  wire signed [31:0] sel_11448;  // int32
  wire signed [31:0] s_804;  // int32
  wire signed [31:0] sel_1_2681;  // int32
  wire signed [31:0] sel_11449;  // int32
  wire signed [31:0] sel_1_2682;  // int32
  wire signed [31:0] sel_11450;  // int32
  wire signed [31:0] sel_1_2683;  // int32
  wire signed [31:0] sel_11451;  // int32
  wire signed [31:0] sel_1_2684;  // int32
  wire signed [31:0] sel_11452;  // int32
  wire signed [31:0] sel_1_2685;  // int32
  wire signed [31:0] sel_11453;  // int32
  wire signed [31:0] sel_1_2686;  // int32
  wire signed [31:0] sel_11454;  // int32
  wire signed [31:0] sel_1_2687;  // int32
  wire signed [31:0] sel_11455;  // int32
  wire signed [31:0] sel_1_2688;  // int32
  wire signed [31:0] sel_1_2689;  // int32
  wire signed [31:0] sel_1_2690;  // int32
  wire signed [31:0] sel_11456;  // int32
  wire signed [31:0] sel_1_2691;  // int32
  wire signed [31:0] sel_11457;  // int32
  wire signed [31:0] sel_11458;  // int32
  reg signed [31:0] sel_1_2692;  // int32
  wire cont_bits_41_47;
  wire signed [31:0] sel_11459;  // int32
  wire signed [31:0] sel_11460;  // int32
  wire signed [31:0] sel_11461;  // int32
  wire signed [31:0] sel_11462;  // int32
  wire signed [31:0] sel_11463;  // int32
  wire signed [31:0] sel_11464;  // int32
  wire signed [31:0] sel_11465;  // int32
  wire signed [31:0] sel_11466;  // int32
  wire signed [31:0] sel_11467;  // int32
  wire signed [31:0] sel_11468;  // int32
  wire signed [31:0] sel_11469;  // int32
  wire signed [31:0] sel_11470;  // int32
  wire signed [31:0] sel_11471;  // int32
  wire signed [31:0] sel_11472;  // int32
  wire signed [31:0] sel_11473;  // int32
  wire signed [31:0] s_805;  // int32
  wire signed [31:0] sel_1_2693;  // int32
  wire signed [31:0] sel_11474;  // int32
  wire signed [31:0] sel_1_2694;  // int32
  wire signed [31:0] sel_11475;  // int32
  wire signed [31:0] sel_1_2695;  // int32
  wire signed [31:0] sel_11476;  // int32
  wire signed [31:0] sel_1_2696;  // int32
  wire signed [31:0] sel_11477;  // int32
  wire signed [31:0] sel_1_2697;  // int32
  wire signed [31:0] sel_11478;  // int32
  wire signed [31:0] sel_1_2698;  // int32
  wire signed [31:0] sel_11479;  // int32
  wire signed [31:0] sel_1_2699;  // int32
  wire signed [31:0] sel_1_2700;  // int32
  wire signed [31:0] sel_1_2701;  // int32
  wire signed [31:0] sel_11480;  // int32
  wire signed [31:0] sel_1_2702;  // int32
  wire signed [31:0] sel_11481;  // int32
  wire signed [31:0] sel_11482;  // int32
  reg signed [31:0] sel_1_2703;  // int32
  wire cont_bits_42_47;
  wire sel_1_2704;
  wire signed [31:0] sel_11483;  // int32
  wire signed [31:0] sel_11484;  // int32
  wire signed [31:0] sel_11485;  // int32
  wire signed [31:0] sel_11486;  // int32
  wire signed [31:0] sel_11487;  // int32
  wire signed [31:0] sel_11488;  // int32
  wire signed [31:0] sel_11489;  // int32
  wire signed [31:0] sel_11490;  // int32
  wire signed [31:0] sel_11491;  // int32
  wire signed [31:0] sel_11492;  // int32
  wire signed [31:0] sel_11493;  // int32
  wire signed [31:0] sel_11494;  // int32
  wire signed [31:0] sel_11495;  // int32
  wire signed [31:0] sel_11496;  // int32
  wire signed [31:0] sel_11497;  // int32
  wire signed [31:0] s_806;  // int32
  wire signed [31:0] sel_1_2705;  // int32
  wire signed [31:0] sel_11498;  // int32
  wire signed [31:0] sel_1_2706;  // int32
  wire signed [31:0] sel_11499;  // int32
  wire signed [31:0] sel_1_2707;  // int32
  wire signed [31:0] sel_11500;  // int32
  wire signed [31:0] sel_1_2708;  // int32
  wire signed [31:0] sel_11501;  // int32
  wire signed [31:0] sel_1_2709;  // int32
  wire signed [31:0] sel_11502;  // int32
  wire signed [31:0] sel_1_2710;  // int32
  wire signed [31:0] sel_1_2711;  // int32
  wire signed [31:0] sel_1_2712;  // int32
  wire signed [31:0] sel_11503;  // int32
  wire signed [31:0] sel_1_2713;  // int32
  wire signed [31:0] sel_11504;  // int32
  wire signed [31:0] sel_11505;  // int32
  reg signed [31:0] sel_1_2714;  // int32
  wire cont_bits_32_47;
  wire sel_1_2715;
  wire signed [31:0] sel_11506;  // int32
  wire signed [31:0] sel_11507;  // int32
  wire signed [31:0] sel_11508;  // int32
  wire signed [31:0] sel_11509;  // int32
  wire signed [31:0] sel_11510;  // int32
  wire signed [31:0] sel_11511;  // int32
  wire signed [31:0] sel_11512;  // int32
  wire signed [31:0] sel_11513;  // int32
  wire signed [31:0] sel_11514;  // int32
  wire signed [31:0] sel_11515;  // int32
  wire signed [31:0] sel_11516;  // int32
  wire signed [31:0] sel_11517;  // int32
  wire signed [31:0] sel_11518;  // int32
  wire signed [31:0] sel_11519;  // int32
  wire signed [31:0] sel_11520;  // int32
  wire signed [31:0] s_807;  // int32
  wire signed [31:0] sel_1_2716;  // int32
  wire signed [31:0] sel_11521;  // int32
  wire signed [31:0] sel_1_2717;  // int32
  wire signed [31:0] sel_11522;  // int32
  wire signed [31:0] sel_1_2718;  // int32
  wire signed [31:0] sel_11523;  // int32
  wire signed [31:0] sel_1_2719;  // int32
  wire signed [31:0] sel_11524;  // int32
  wire signed [31:0] sel_1_2720;  // int32
  wire signed [31:0] sel_1_2721;  // int32
  wire signed [31:0] sel_1_2722;  // int32
  wire signed [31:0] sel_11525;  // int32
  wire signed [31:0] sel_1_2723;  // int32
  wire signed [31:0] sel_11526;  // int32
  wire signed [31:0] sel_11527;  // int32
  reg signed [31:0] sel_1_2724;  // int32
  wire cont_bits_31_47;
  wire sel_1_2725;
  wire signed [31:0] sel_11528;  // int32
  wire signed [31:0] sel_11529;  // int32
  wire signed [31:0] sel_11530;  // int32
  wire signed [31:0] sel_11531;  // int32
  wire signed [31:0] sel_11532;  // int32
  wire signed [31:0] sel_11533;  // int32
  wire signed [31:0] sel_11534;  // int32
  wire signed [31:0] sel_11535;  // int32
  wire signed [31:0] sel_11536;  // int32
  wire signed [31:0] sel_11537;  // int32
  wire signed [31:0] sel_11538;  // int32
  wire signed [31:0] sel_11539;  // int32
  wire signed [31:0] sel_11540;  // int32
  wire signed [31:0] sel_11541;  // int32
  wire signed [31:0] sel_11542;  // int32
  wire signed [31:0] s_808;  // int32
  wire signed [31:0] sel_1_2726;  // int32
  wire signed [31:0] sel_11543;  // int32
  wire signed [31:0] sel_1_2727;  // int32
  wire signed [31:0] sel_11544;  // int32
  wire signed [31:0] sel_1_2728;  // int32
  wire signed [31:0] sel_11545;  // int32
  wire signed [31:0] sel_1_2729;  // int32
  wire signed [31:0] sel_1_2730;  // int32
  wire signed [31:0] sel_1_2731;  // int32
  wire signed [31:0] sel_11546;  // int32
  wire signed [31:0] sel_1_2732;  // int32
  wire signed [31:0] sel_11547;  // int32
  wire signed [31:0] sel_11548;  // int32
  reg signed [31:0] sel_1_2733;  // int32
  wire cont_bits_22_47;
  wire sel_1_2734;
  wire signed [31:0] sel_11549;  // int32
  wire signed [31:0] sel_11550;  // int32
  wire signed [31:0] sel_11551;  // int32
  wire signed [31:0] sel_11552;  // int32
  wire signed [31:0] sel_11553;  // int32
  wire signed [31:0] sel_11554;  // int32
  wire signed [31:0] sel_11555;  // int32
  wire signed [31:0] sel_11556;  // int32
  wire signed [31:0] sel_11557;  // int32
  wire signed [31:0] sel_11558;  // int32
  wire signed [31:0] sel_11559;  // int32
  wire signed [31:0] sel_11560;  // int32
  wire signed [31:0] sel_11561;  // int32
  wire signed [31:0] sel_11562;  // int32
  wire signed [31:0] sel_11563;  // int32
  wire signed [31:0] s_809;  // int32
  wire signed [31:0] sel_1_2735;  // int32
  wire signed [31:0] sel_11564;  // int32
  wire signed [31:0] sel_1_2736;  // int32
  wire signed [31:0] sel_11565;  // int32
  wire signed [31:0] sel_1_2737;  // int32
  wire signed [31:0] sel_1_2738;  // int32
  wire signed [31:0] sel_1_2739;  // int32
  wire signed [31:0] sel_11566;  // int32
  wire signed [31:0] sel_1_2740;  // int32
  wire signed [31:0] sel_11567;  // int32
  wire signed [31:0] sel_11568;  // int32
  reg signed [31:0] sel_1_2741;  // int32
  wire cont_bits_21_47;
  wire sel_1_2742;
  wire signed [31:0] sel_11569;  // int32
  wire signed [31:0] sel_11570;  // int32
  wire signed [31:0] sel_11571;  // int32
  wire signed [31:0] sel_11572;  // int32
  wire signed [31:0] sel_11573;  // int32
  wire signed [31:0] sel_11574;  // int32
  wire signed [31:0] sel_11575;  // int32
  wire signed [31:0] sel_11576;  // int32
  wire signed [31:0] sel_11577;  // int32
  wire signed [31:0] sel_11578;  // int32
  wire signed [31:0] sel_11579;  // int32
  wire signed [31:0] sel_11580;  // int32
  wire signed [31:0] sel_11581;  // int32
  wire signed [31:0] sel_11582;  // int32
  wire signed [31:0] sel_11583;  // int32
  wire signed [31:0] s_810;  // int32
  wire signed [31:0] sel_1_2743;  // int32
  wire signed [31:0] sel_11584;  // int32
  wire signed [31:0] sel_1_2744;  // int32
  wire signed [31:0] sel_1_2745;  // int32
  wire signed [31:0] sel_1_2746;  // int32
  wire signed [31:0] sel_11585;  // int32
  wire signed [31:0] sel_1_2747;  // int32
  wire signed [31:0] sel_11586;  // int32
  wire signed [31:0] sel_11587;  // int32
  reg signed [31:0] sel_1_2748;  // int32
  wire cont_bits_12_47;
  wire sel_1_2749;
  wire signed [31:0] sel_11588;  // int32
  wire signed [31:0] sel_11589;  // int32
  wire signed [31:0] sel_11590;  // int32
  wire signed [31:0] sel_11591;  // int32
  wire signed [31:0] sel_11592;  // int32
  wire signed [31:0] sel_11593;  // int32
  wire signed [31:0] sel_11594;  // int32
  wire signed [31:0] sel_11595;  // int32
  wire signed [31:0] sel_11596;  // int32
  wire signed [31:0] sel_11597;  // int32
  wire signed [31:0] sel_11598;  // int32
  wire signed [31:0] sel_11599;  // int32
  wire signed [31:0] sel_11600;  // int32
  wire signed [31:0] sel_11601;  // int32
  wire signed [31:0] sel_11602;  // int32
  wire signed [31:0] s_811;  // int32
  wire signed [31:0] sel_1_2750;  // int32
  wire signed [31:0] sel_1_2751;  // int32
  wire signed [31:0] sel_1_2752;  // int32
  wire signed [31:0] sel_11603;  // int32
  wire signed [31:0] sel_1_2753;  // int32
  wire signed [31:0] sel_11604;  // int32
  wire signed [31:0] sel_11605;  // int32
  reg signed [31:0] sel_1_2754;  // int32
  wire cont_bits_54;
  wire sel_1_2755;
  wire sel_11606;
  wire sel_11607;
  reg  sel_1_2756;
  wire sel_11608;
  wire sel_11609;
  wire sel_11610;
  wire sel_11611;
  wire sel_11612;
  wire sel_11613;
  wire sel_11614;
  wire sel_11615;
  wire sel_11616;
  wire sel_11617;
  wire sel_11618;
  wire sel_11619;
  wire s_812;
  wire sel_2_1625;
  wire s_813;
  wire sel_2_1626;
  wire s_814;
  wire sel_2_1627;
  wire s_815;
  wire sel_2_1628;
  wire s_816;
  wire sel_2_1629;
  wire s_817;
  wire sel_2_1630;
  wire s_818;
  wire sel_2_1631;
  wire s_819;
  wire sel_2_1632;
  wire sel_11620;
  wire sel_11621;
  wire sel_11622;
  wire s_820;
  wire sel_2_1633;
  wire s_821;
  wire sel_2_1634;
  wire s_822;
  wire sel_2_1635;
  wire s_823;
  wire sel_2_1636;
  wire s_824;
  wire sel_2_1637;
  wire s_825;
  wire sel_2_1638;
  wire s_826;
  wire sel_2_1639;
  wire s_827;
  wire sel_2_1640;
  wire sel_2_1641;
  wire sel_2_1642;
  wire sel_11623;
  wire sel_2_1643;
  wire sel_11624;
  wire sel_11625;
  reg  sel_2_1644;
  wire sel_11626;
  wire sel_11627;
  wire sel_11628;
  wire sel_11629;
  wire sel_11630;
  wire sel_11631;
  wire sel_11632;
  wire sel_11633;
  wire sel_11634;
  wire sel_11635;
  wire sel_11636;
  wire signed [31:0] sel_11637;  // int32
  wire signed [31:0] sel_11638;  // int32
  wire signed [31:0] sel_11639;  // int32
  wire signed [31:0] sel_11640;  // int32
  wire signed [31:0] sel_11641;  // int32
  wire signed [31:0] sel_11642;  // int32
  wire signed [31:0] sel_11643;  // int32
  wire signed [31:0] sel_11644;  // int32
  wire signed [31:0] sel_11645;  // int32
  wire signed [31:0] sel_11646;  // int32
  wire signed [31:0] sel_11647;  // int32
  wire signed [31:0] sel_11648;  // int32
  wire signed [31:0] s_828;  // int32
  wire signed [31:0] sel_1_2757;  // int32
  wire signed [31:0] sel_11649;  // int32
  wire signed [31:0] sel_1_2758;  // int32
  wire signed [31:0] sel_11650;  // int32
  wire signed [31:0] sel_1_2759;  // int32
  wire signed [31:0] sel_11651;  // int32
  wire signed [31:0] sel_1_2760;  // int32
  wire signed [31:0] sel_11652;  // int32
  wire signed [31:0] sel_1_2761;  // int32
  wire signed [31:0] sel_11653;  // int32
  wire signed [31:0] sel_1_2762;  // int32
  wire signed [31:0] sel_11654;  // int32
  wire signed [31:0] sel_1_2763;  // int32
  wire signed [31:0] sel_11655;  // int32
  wire signed [31:0] sel_1_2764;  // int32
  wire signed [31:0] sel_11656;  // int32
  wire signed [31:0] sel_11657;  // int32
  wire signed [31:0] sel_11658;  // int32
  reg signed [31:0] sel_1_2765;  // int32
  wire cont_bits_41_48;
  wire signed [31:0] sel_11659;  // int32
  wire signed [31:0] sel_11660;  // int32
  wire signed [31:0] sel_11661;  // int32
  wire signed [31:0] sel_11662;  // int32
  wire signed [31:0] sel_11663;  // int32
  wire signed [31:0] sel_11664;  // int32
  wire signed [31:0] sel_11665;  // int32
  wire signed [31:0] sel_11666;  // int32
  wire signed [31:0] sel_11667;  // int32
  wire signed [31:0] sel_11668;  // int32
  wire signed [31:0] sel_11669;  // int32
  wire signed [31:0] sel_11670;  // int32
  wire signed [31:0] s_829;  // int32
  wire signed [31:0] sel_1_2766;  // int32
  wire signed [31:0] sel_11671;  // int32
  wire signed [31:0] sel_1_2767;  // int32
  wire signed [31:0] sel_11672;  // int32
  wire signed [31:0] sel_1_2768;  // int32
  wire signed [31:0] sel_11673;  // int32
  wire signed [31:0] sel_1_2769;  // int32
  wire signed [31:0] sel_11674;  // int32
  wire signed [31:0] sel_1_2770;  // int32
  wire signed [31:0] sel_11675;  // int32
  wire signed [31:0] sel_1_2771;  // int32
  wire signed [31:0] sel_11676;  // int32
  wire signed [31:0] sel_1_2772;  // int32
  wire signed [31:0] sel_11677;  // int32
  wire signed [31:0] sel_11678;  // int32
  wire signed [31:0] sel_11679;  // int32
  reg signed [31:0] sel_1_2773;  // int32
  wire cont_bits_42_48;
  wire sel_1_2774;
  wire signed [31:0] sel_11680;  // int32
  wire signed [31:0] sel_11681;  // int32
  wire signed [31:0] sel_11682;  // int32
  wire signed [31:0] sel_11683;  // int32
  wire signed [31:0] sel_11684;  // int32
  wire signed [31:0] sel_11685;  // int32
  wire signed [31:0] sel_11686;  // int32
  wire signed [31:0] sel_11687;  // int32
  wire signed [31:0] sel_11688;  // int32
  wire signed [31:0] sel_11689;  // int32
  wire signed [31:0] sel_11690;  // int32
  wire signed [31:0] sel_11691;  // int32
  wire signed [31:0] s_830;  // int32
  wire signed [31:0] sel_1_2775;  // int32
  wire signed [31:0] sel_11692;  // int32
  wire signed [31:0] sel_1_2776;  // int32
  wire signed [31:0] sel_11693;  // int32
  wire signed [31:0] sel_1_2777;  // int32
  wire signed [31:0] sel_11694;  // int32
  wire signed [31:0] sel_1_2778;  // int32
  wire signed [31:0] sel_11695;  // int32
  wire signed [31:0] sel_1_2779;  // int32
  wire signed [31:0] sel_11696;  // int32
  wire signed [31:0] sel_1_2780;  // int32
  wire signed [31:0] sel_11697;  // int32
  wire signed [31:0] sel_11698;  // int32
  wire signed [31:0] sel_11699;  // int32
  reg signed [31:0] sel_1_2781;  // int32
  wire cont_bits_32_48;
  wire sel_1_2782;
  wire signed [31:0] sel_11700;  // int32
  wire signed [31:0] sel_11701;  // int32
  wire signed [31:0] sel_11702;  // int32
  wire signed [31:0] sel_11703;  // int32
  wire signed [31:0] sel_11704;  // int32
  wire signed [31:0] sel_11705;  // int32
  wire signed [31:0] sel_11706;  // int32
  wire signed [31:0] sel_11707;  // int32
  wire signed [31:0] sel_11708;  // int32
  wire signed [31:0] sel_11709;  // int32
  wire signed [31:0] sel_11710;  // int32
  wire signed [31:0] sel_11711;  // int32
  wire signed [31:0] s_831;  // int32
  wire signed [31:0] sel_1_2783;  // int32
  wire signed [31:0] sel_11712;  // int32
  wire signed [31:0] sel_1_2784;  // int32
  wire signed [31:0] sel_11713;  // int32
  wire signed [31:0] sel_1_2785;  // int32
  wire signed [31:0] sel_11714;  // int32
  wire signed [31:0] sel_1_2786;  // int32
  wire signed [31:0] sel_11715;  // int32
  wire signed [31:0] sel_1_2787;  // int32
  wire signed [31:0] sel_11716;  // int32
  wire signed [31:0] sel_11717;  // int32
  wire signed [31:0] sel_11718;  // int32
  reg signed [31:0] sel_1_2788;  // int32
  wire cont_bits_31_48;
  wire sel_1_2789;
  wire signed [31:0] sel_11719;  // int32
  wire signed [31:0] sel_11720;  // int32
  wire signed [31:0] sel_11721;  // int32
  wire signed [31:0] sel_11722;  // int32
  wire signed [31:0] sel_11723;  // int32
  wire signed [31:0] sel_11724;  // int32
  wire signed [31:0] sel_11725;  // int32
  wire signed [31:0] sel_11726;  // int32
  wire signed [31:0] sel_11727;  // int32
  wire signed [31:0] sel_11728;  // int32
  wire signed [31:0] sel_11729;  // int32
  wire signed [31:0] sel_11730;  // int32
  wire signed [31:0] s_832;  // int32
  wire signed [31:0] sel_1_2790;  // int32
  wire signed [31:0] sel_11731;  // int32
  wire signed [31:0] sel_1_2791;  // int32
  wire signed [31:0] sel_11732;  // int32
  wire signed [31:0] sel_1_2792;  // int32
  wire signed [31:0] sel_11733;  // int32
  wire signed [31:0] sel_1_2793;  // int32
  wire signed [31:0] sel_11734;  // int32
  wire signed [31:0] sel_11735;  // int32
  wire signed [31:0] sel_11736;  // int32
  reg signed [31:0] sel_1_2794;  // int32
  wire cont_bits_22_48;
  wire sel_1_2795;
  wire signed [31:0] sel_11737;  // int32
  wire signed [31:0] sel_11738;  // int32
  wire signed [31:0] sel_11739;  // int32
  wire signed [31:0] sel_11740;  // int32
  wire signed [31:0] sel_11741;  // int32
  wire signed [31:0] sel_11742;  // int32
  wire signed [31:0] sel_11743;  // int32
  wire signed [31:0] sel_11744;  // int32
  wire signed [31:0] sel_11745;  // int32
  wire signed [31:0] sel_11746;  // int32
  wire signed [31:0] sel_11747;  // int32
  wire signed [31:0] sel_11748;  // int32
  wire signed [31:0] s_833;  // int32
  wire signed [31:0] sel_1_2796;  // int32
  wire signed [31:0] sel_11749;  // int32
  wire signed [31:0] sel_1_2797;  // int32
  wire signed [31:0] sel_11750;  // int32
  wire signed [31:0] sel_1_2798;  // int32
  wire signed [31:0] sel_11751;  // int32
  wire signed [31:0] sel_11752;  // int32
  wire signed [31:0] sel_11753;  // int32
  reg signed [31:0] sel_1_2799;  // int32
  wire cont_bits_21_48;
  wire sel_1_2800;
  wire signed [31:0] sel_11754;  // int32
  wire signed [31:0] sel_11755;  // int32
  wire signed [31:0] sel_11756;  // int32
  wire signed [31:0] sel_11757;  // int32
  wire signed [31:0] sel_11758;  // int32
  wire signed [31:0] sel_11759;  // int32
  wire signed [31:0] sel_11760;  // int32
  wire signed [31:0] sel_11761;  // int32
  wire signed [31:0] sel_11762;  // int32
  wire signed [31:0] sel_11763;  // int32
  wire signed [31:0] sel_11764;  // int32
  wire signed [31:0] sel_11765;  // int32
  wire signed [31:0] s_834;  // int32
  wire signed [31:0] sel_1_2801;  // int32
  wire signed [31:0] sel_11766;  // int32
  wire signed [31:0] sel_1_2802;  // int32
  wire signed [31:0] sel_11767;  // int32
  wire signed [31:0] sel_11768;  // int32
  wire signed [31:0] sel_11769;  // int32
  reg signed [31:0] sel_1_2803;  // int32
  wire cont_bits_12_48;
  wire sel_1_2804;
  wire signed [31:0] sel_11770;  // int32
  wire signed [31:0] sel_11771;  // int32
  wire signed [31:0] sel_11772;  // int32
  wire signed [31:0] sel_11773;  // int32
  wire signed [31:0] sel_11774;  // int32
  wire signed [31:0] sel_11775;  // int32
  wire signed [31:0] sel_11776;  // int32
  wire signed [31:0] sel_11777;  // int32
  wire signed [31:0] sel_11778;  // int32
  wire signed [31:0] sel_11779;  // int32
  wire signed [31:0] sel_11780;  // int32
  wire signed [31:0] sel_11781;  // int32
  wire signed [31:0] s_835;  // int32
  wire signed [31:0] sel_1_2805;  // int32
  wire signed [31:0] sel_11782;  // int32
  wire signed [31:0] sel_11783;  // int32
  wire signed [31:0] sel_11784;  // int32
  reg signed [31:0] sel_1_2806;  // int32
  wire cont_bits_55;
  wire sel_1_2807;
  wire signed [31:0] sel_11785;  // int32
  wire signed [31:0] sel_11786;  // int32
  wire signed [31:0] sel_11787;  // int32
  wire signed [31:0] sel_11788;  // int32
  wire signed [31:0] sel_11789;  // int32
  wire signed [31:0] sel_11790;  // int32
  wire signed [31:0] sel_11791;  // int32
  wire signed [31:0] sel_11792;  // int32
  wire signed [31:0] sel_11793;  // int32
  wire signed [31:0] sel_11794;  // int32
  wire signed [31:0] sel_11795;  // int32
  wire signed [31:0] sel_11796;  // int32
  wire signed [31:0] sel_11797;  // int32
  wire signed [31:0] sel_11798;  // int32
  wire signed [31:0] sel_11799;  // int32
  wire signed [31:0] s_836;  // int32
  wire signed [31:0] sel_1_2808;  // int32
  wire signed [31:0] sel_11800;  // int32
  wire signed [31:0] sel_1_2809;  // int32
  wire signed [31:0] sel_11801;  // int32
  wire signed [31:0] sel_1_2810;  // int32
  wire signed [31:0] sel_11802;  // int32
  wire signed [31:0] sel_1_2811;  // int32
  wire signed [31:0] sel_11803;  // int32
  wire signed [31:0] sel_1_2812;  // int32
  wire signed [31:0] sel_11804;  // int32
  wire signed [31:0] sel_1_2813;  // int32
  wire signed [31:0] sel_11805;  // int32
  wire signed [31:0] sel_1_2814;  // int32
  wire signed [31:0] sel_11806;  // int32
  wire signed [31:0] sel_1_2815;  // int32
  wire signed [31:0] sel_1_2816;  // int32
  wire signed [31:0] sel_1_2817;  // int32
  wire signed [31:0] sel_11807;  // int32
  wire signed [31:0] sel_1_2818;  // int32
  wire signed [31:0] sel_11808;  // int32
  wire signed [31:0] sel_11809;  // int32
  reg signed [31:0] sel_1_2819;  // int32
  wire cont_bits_41_49;
  wire signed [31:0] sel_11810;  // int32
  wire signed [31:0] sel_11811;  // int32
  wire signed [31:0] sel_11812;  // int32
  wire signed [31:0] sel_11813;  // int32
  wire signed [31:0] sel_11814;  // int32
  wire signed [31:0] sel_11815;  // int32
  wire signed [31:0] sel_11816;  // int32
  wire signed [31:0] sel_11817;  // int32
  wire signed [31:0] sel_11818;  // int32
  wire signed [31:0] sel_11819;  // int32
  wire signed [31:0] sel_11820;  // int32
  wire signed [31:0] sel_11821;  // int32
  wire signed [31:0] sel_11822;  // int32
  wire signed [31:0] sel_11823;  // int32
  wire signed [31:0] sel_11824;  // int32
  wire signed [31:0] s_837;  // int32
  wire signed [31:0] sel_1_2820;  // int32
  wire signed [31:0] sel_11825;  // int32
  wire signed [31:0] sel_1_2821;  // int32
  wire signed [31:0] sel_11826;  // int32
  wire signed [31:0] sel_1_2822;  // int32
  wire signed [31:0] sel_11827;  // int32
  wire signed [31:0] sel_1_2823;  // int32
  wire signed [31:0] sel_11828;  // int32
  wire signed [31:0] sel_1_2824;  // int32
  wire signed [31:0] sel_11829;  // int32
  wire signed [31:0] sel_1_2825;  // int32
  wire signed [31:0] sel_11830;  // int32
  wire signed [31:0] sel_1_2826;  // int32
  wire signed [31:0] sel_1_2827;  // int32
  wire signed [31:0] sel_1_2828;  // int32
  wire signed [31:0] sel_11831;  // int32
  wire signed [31:0] sel_1_2829;  // int32
  wire signed [31:0] sel_11832;  // int32
  wire signed [31:0] sel_11833;  // int32
  reg signed [31:0] sel_1_2830;  // int32
  wire cont_bits_42_49;
  wire sel_1_2831;
  wire signed [31:0] sel_11834;  // int32
  wire signed [31:0] sel_11835;  // int32
  wire signed [31:0] sel_11836;  // int32
  wire signed [31:0] sel_11837;  // int32
  wire signed [31:0] sel_11838;  // int32
  wire signed [31:0] sel_11839;  // int32
  wire signed [31:0] sel_11840;  // int32
  wire signed [31:0] sel_11841;  // int32
  wire signed [31:0] sel_11842;  // int32
  wire signed [31:0] sel_11843;  // int32
  wire signed [31:0] sel_11844;  // int32
  wire signed [31:0] sel_11845;  // int32
  wire signed [31:0] sel_11846;  // int32
  wire signed [31:0] sel_11847;  // int32
  wire signed [31:0] sel_11848;  // int32
  wire signed [31:0] s_838;  // int32
  wire signed [31:0] sel_1_2832;  // int32
  wire signed [31:0] sel_11849;  // int32
  wire signed [31:0] sel_1_2833;  // int32
  wire signed [31:0] sel_11850;  // int32
  wire signed [31:0] sel_1_2834;  // int32
  wire signed [31:0] sel_11851;  // int32
  wire signed [31:0] sel_1_2835;  // int32
  wire signed [31:0] sel_11852;  // int32
  wire signed [31:0] sel_1_2836;  // int32
  wire signed [31:0] sel_11853;  // int32
  wire signed [31:0] sel_1_2837;  // int32
  wire signed [31:0] sel_1_2838;  // int32
  wire signed [31:0] sel_1_2839;  // int32
  wire signed [31:0] sel_11854;  // int32
  wire signed [31:0] sel_1_2840;  // int32
  wire signed [31:0] sel_11855;  // int32
  wire signed [31:0] sel_11856;  // int32
  reg signed [31:0] sel_1_2841;  // int32
  wire cont_bits_32_49;
  wire sel_1_2842;
  wire signed [31:0] sel_11857;  // int32
  wire signed [31:0] sel_11858;  // int32
  wire signed [31:0] sel_11859;  // int32
  wire signed [31:0] sel_11860;  // int32
  wire signed [31:0] sel_11861;  // int32
  wire signed [31:0] sel_11862;  // int32
  wire signed [31:0] sel_11863;  // int32
  wire signed [31:0] sel_11864;  // int32
  wire signed [31:0] sel_11865;  // int32
  wire signed [31:0] sel_11866;  // int32
  wire signed [31:0] sel_11867;  // int32
  wire signed [31:0] sel_11868;  // int32
  wire signed [31:0] sel_11869;  // int32
  wire signed [31:0] sel_11870;  // int32
  wire signed [31:0] sel_11871;  // int32
  wire signed [31:0] s_839;  // int32
  wire signed [31:0] sel_1_2843;  // int32
  wire signed [31:0] sel_11872;  // int32
  wire signed [31:0] sel_1_2844;  // int32
  wire signed [31:0] sel_11873;  // int32
  wire signed [31:0] sel_1_2845;  // int32
  wire signed [31:0] sel_11874;  // int32
  wire signed [31:0] sel_1_2846;  // int32
  wire signed [31:0] sel_11875;  // int32
  wire signed [31:0] sel_1_2847;  // int32
  wire signed [31:0] sel_1_2848;  // int32
  wire signed [31:0] sel_1_2849;  // int32
  wire signed [31:0] sel_11876;  // int32
  wire signed [31:0] sel_1_2850;  // int32
  wire signed [31:0] sel_11877;  // int32
  wire signed [31:0] sel_11878;  // int32
  reg signed [31:0] sel_1_2851;  // int32
  wire cont_bits_31_49;
  wire sel_1_2852;
  wire signed [31:0] sel_11879;  // int32
  wire signed [31:0] sel_11880;  // int32
  wire signed [31:0] sel_11881;  // int32
  wire signed [31:0] sel_11882;  // int32
  wire signed [31:0] sel_11883;  // int32
  wire signed [31:0] sel_11884;  // int32
  wire signed [31:0] sel_11885;  // int32
  wire signed [31:0] sel_11886;  // int32
  wire signed [31:0] sel_11887;  // int32
  wire signed [31:0] sel_11888;  // int32
  wire signed [31:0] sel_11889;  // int32
  wire signed [31:0] sel_11890;  // int32
  wire signed [31:0] sel_11891;  // int32
  wire signed [31:0] sel_11892;  // int32
  wire signed [31:0] sel_11893;  // int32
  wire signed [31:0] s_840;  // int32
  wire signed [31:0] sel_1_2853;  // int32
  wire signed [31:0] sel_11894;  // int32
  wire signed [31:0] sel_1_2854;  // int32
  wire signed [31:0] sel_11895;  // int32
  wire signed [31:0] sel_1_2855;  // int32
  wire signed [31:0] sel_11896;  // int32
  wire signed [31:0] sel_1_2856;  // int32
  wire signed [31:0] sel_1_2857;  // int32
  wire signed [31:0] sel_1_2858;  // int32
  wire signed [31:0] sel_11897;  // int32
  wire signed [31:0] sel_1_2859;  // int32
  wire signed [31:0] sel_11898;  // int32
  wire signed [31:0] sel_11899;  // int32
  reg signed [31:0] sel_1_2860;  // int32
  wire cont_bits_22_49;
  wire sel_1_2861;
  wire signed [31:0] sel_11900;  // int32
  wire signed [31:0] sel_11901;  // int32
  wire signed [31:0] sel_11902;  // int32
  wire signed [31:0] sel_11903;  // int32
  wire signed [31:0] sel_11904;  // int32
  wire signed [31:0] sel_11905;  // int32
  wire signed [31:0] sel_11906;  // int32
  wire signed [31:0] sel_11907;  // int32
  wire signed [31:0] sel_11908;  // int32
  wire signed [31:0] sel_11909;  // int32
  wire signed [31:0] sel_11910;  // int32
  wire signed [31:0] sel_11911;  // int32
  wire signed [31:0] sel_11912;  // int32
  wire signed [31:0] sel_11913;  // int32
  wire signed [31:0] sel_11914;  // int32
  wire signed [31:0] s_841;  // int32
  wire signed [31:0] sel_1_2862;  // int32
  wire signed [31:0] sel_11915;  // int32
  wire signed [31:0] sel_1_2863;  // int32
  wire signed [31:0] sel_11916;  // int32
  wire signed [31:0] sel_1_2864;  // int32
  wire signed [31:0] sel_1_2865;  // int32
  wire signed [31:0] sel_1_2866;  // int32
  wire signed [31:0] sel_11917;  // int32
  wire signed [31:0] sel_1_2867;  // int32
  wire signed [31:0] sel_11918;  // int32
  wire signed [31:0] sel_11919;  // int32
  reg signed [31:0] sel_1_2868;  // int32
  wire cont_bits_21_49;
  wire sel_1_2869;
  wire signed [31:0] sel_11920;  // int32
  wire signed [31:0] sel_11921;  // int32
  wire signed [31:0] sel_11922;  // int32
  wire signed [31:0] sel_11923;  // int32
  wire signed [31:0] sel_11924;  // int32
  wire signed [31:0] sel_11925;  // int32
  wire signed [31:0] sel_11926;  // int32
  wire signed [31:0] sel_11927;  // int32
  wire signed [31:0] sel_11928;  // int32
  wire signed [31:0] sel_11929;  // int32
  wire signed [31:0] sel_11930;  // int32
  wire signed [31:0] sel_11931;  // int32
  wire signed [31:0] sel_11932;  // int32
  wire signed [31:0] sel_11933;  // int32
  wire signed [31:0] sel_11934;  // int32
  wire signed [31:0] s_842;  // int32
  wire signed [31:0] sel_1_2870;  // int32
  wire signed [31:0] sel_11935;  // int32
  wire signed [31:0] sel_1_2871;  // int32
  wire signed [31:0] sel_1_2872;  // int32
  wire signed [31:0] sel_1_2873;  // int32
  wire signed [31:0] sel_11936;  // int32
  wire signed [31:0] sel_1_2874;  // int32
  wire signed [31:0] sel_11937;  // int32
  wire signed [31:0] sel_11938;  // int32
  reg signed [31:0] sel_1_2875;  // int32
  wire cont_bits_12_49;
  wire sel_1_2876;
  wire signed [31:0] sel_11939;  // int32
  wire signed [31:0] sel_11940;  // int32
  wire signed [31:0] sel_11941;  // int32
  wire signed [31:0] sel_11942;  // int32
  wire signed [31:0] sel_11943;  // int32
  wire signed [31:0] sel_11944;  // int32
  wire signed [31:0] sel_11945;  // int32
  wire signed [31:0] sel_11946;  // int32
  wire signed [31:0] sel_11947;  // int32
  wire signed [31:0] sel_11948;  // int32
  wire signed [31:0] sel_11949;  // int32
  wire signed [31:0] sel_11950;  // int32
  wire signed [31:0] sel_11951;  // int32
  wire signed [31:0] sel_11952;  // int32
  wire signed [31:0] sel_11953;  // int32
  wire signed [31:0] s_843;  // int32
  wire signed [31:0] sel_1_2877;  // int32
  wire signed [31:0] sel_1_2878;  // int32
  wire signed [31:0] sel_1_2879;  // int32
  wire signed [31:0] sel_11954;  // int32
  wire signed [31:0] sel_1_2880;  // int32
  wire signed [31:0] sel_11955;  // int32
  wire signed [31:0] sel_11956;  // int32
  reg signed [31:0] sel_1_2881;  // int32
  wire cont_bits_56;
  wire sel_1_2882;
  wire sel_11957;
  wire sel_11958;
  reg  sel_1_2883;
  wire sel_11959;
  wire sel_11960;
  wire sel_11961;
  wire sel_11962;
  wire sel_11963;
  wire sel_11964;
  wire sel_11965;
  wire sel_11966;
  wire sel_11967;
  wire sel_11968;
  wire sel_11969;
  wire sel_11970;
  wire s_844;
  wire sel_2_1645;
  wire s_845;
  wire sel_2_1646;
  wire s_846;
  wire sel_2_1647;
  wire s_847;
  wire sel_2_1648;
  wire s_848;
  wire sel_2_1649;
  wire s_849;
  wire sel_2_1650;
  wire s_850;
  wire sel_2_1651;
  wire s_851;
  wire sel_2_1652;
  wire sel_11971;
  wire sel_11972;
  wire sel_11973;
  wire s_852;
  wire sel_2_1653;
  wire s_853;
  wire sel_2_1654;
  wire s_854;
  wire sel_2_1655;
  wire s_855;
  wire sel_2_1656;
  wire s_856;
  wire sel_2_1657;
  wire s_857;
  wire sel_2_1658;
  wire s_858;
  wire sel_2_1659;
  wire s_859;
  wire sel_2_1660;
  wire sel_2_1661;
  wire sel_2_1662;
  wire sel_11974;
  wire sel_2_1663;
  wire sel_11975;
  wire sel_11976;
  reg  sel_2_1664;
  reg  [15:0] payload;  // boolean [16]
  reg  [15:0] payload_1;  // boolean [16]
  reg  [15:0] payload_2;  // boolean [16]
  reg  [15:0] payload_3;  // boolean [16]
  reg  [15:0] payload_4;  // boolean [16]
  reg  [15:0] payload_5;  // boolean [16]
  reg  [15:0] payload_6;  // boolean [16]
  reg  [15:0] payload_7;  // boolean [16]
  reg  [15:0] payload_8;  // boolean [16]
  reg  [15:0] payload_9;  // boolean [16]
  reg  [15:0] payload_10;  // boolean [16]
  reg  [15:0] payload_11;  // boolean [16]
  reg  [15:0] payload_12;  // boolean [16]
  reg  [15:0] payload_13;  // boolean [16]
  reg  [15:0] payload_14;  // boolean [16]
  reg  [15:0] payload_15;  // boolean [16]
  reg  [15:0] tmp_347;  // boolean [16]
  wire signed [31:0] tmp_348;  // int32
  wire signed [31:0] s_860;  // int32
  wire signed [31:0] tmp_349;  // int32
  wire signed [31:0] s_861;  // int32
  wire signed [31:0] tmp_350;  // int32
  wire signed [31:0] s_862;  // int32
  wire signed [31:0] tmp_351;  // int32
  wire signed [31:0] s_863;  // int32
  wire signed [31:0] tmp_352;  // int32
  wire signed [31:0] s_864;  // int32
  wire signed [31:0] tmp_353;  // int32
  wire signed [31:0] s_865;  // int32
  wire signed [31:0] tmp_354;  // int32
  wire signed [31:0] s_866;  // int32
  wire signed [31:0] tmp_355;  // int32
  wire signed [31:0] s_867;  // int32
  wire signed [31:0] s_868;  // int32
  wire signed [31:0] sel_11977;  // int32
  wire signed [31:0] sel_1_2884;  // int32
  wire signed [31:0] s_869;  // int32
  wire signed [31:0] sel_1_2885;  // int32
  wire signed [31:0] tmp_356;  // int32
  wire signed [31:0] s_870;  // int32
  wire signed [31:0] tmp_357;  // int32
  wire signed [31:0] tmp_358;  // int32
  wire signed [31:0] sel_11978;  // int32
  wire signed [31:0] sel_1_2886;  // int32
  wire signed [31:0] sel_1_2887;  // int32
  wire signed [31:0] sel_11979;  // int32
  wire signed [31:0] sel_11980;  // int32
  wire signed [31:0] sel_11981;  // int32
  wire signed [31:0] sel_11982;  // int32
  wire signed [31:0] s_871;  // int32
  wire signed [31:0] sel_1_2888;  // int32
  wire signed [31:0] tmp_359;  // int32
  wire signed [31:0] s_872;  // int32
  reg signed [31:0] sel_1_2889;  // int32
  wire SDI_1;
  wire tmp_360;
  wire SDI_2;
  wire SDI_3;
  wire SDI_4;
  wire SDI_5;
  reg  SDI_6;
  wire tmp_361;
  wire tmp_362;
  wire tmp_363;
  wire tmp_364;
  wire tmp_365;
  wire tmp_366;
  wire tmp_367;
  reg  tmp_368;
  wire tmp_369;
  wire tmp_370;
  wire SCK_1;
  wire SCK_2;
  wire SCK_3;
  wire SCK_4;
  wire SCK_5;
  wire SCK_6;
  wire SCK_7;
  wire SCK_8;
  wire SCK_9;
  wire tmp_371;
  wire SCK_10;
  wire tmp_372;
  wire SCK_11;
  wire SCK_12;
  wire SCK_13;
  wire tmp_373;
  wire SCK_14;
  wire SCK_15;
  wire tmp_374;
  wire tmp_375;
  wire SCK_16;
  wire SCK_17;
  wire SCK_18;
  wire tmp_376;
  wire SCK_19;
  reg  SCK_20;
  wire tmp_377;
  wire tmp_378;
  wire tmp_379;
  wire tmp_380;
  wire tmp_381;
  reg  tmp_382;
  wire tmp_383;
  wire tmp_384;
  wire nCS1_reg_ctrl_const_out;
  reg  nCS1_reg_ctrl_delay_out;
  wire nCS1_reg_Initial_Val_out;
  wire nCS1_1;
  wire nCS1_2;
  wire nCS1_3;
  wire nCS1_4;
  wire nCS1_5;
  wire nCS1_6;
  wire nCS1_7;
  wire nCS1_8;
  wire nCS1_9;
  wire nCS1_10;
  wire nCS1_11;
  wire nCS1_12;
  wire nCS1_13;
  wire nCS1_14;
  wire nCS1_15;
  wire nCS1_16;
  wire nCS1_17;
  wire nCS1_18;
  wire nCS1_19;
  wire nCS1_20;
  wire nCS1_21;
  wire tmp_385;
  wire tmp_386;
  wire tmp_387;
  wire tmp_388;
  wire tmp_389;
  wire tmp_390;
  wire tmp_391;
  wire tmp_392;
  wire tmp_393;
  wire tmp_394;
  wire tmp_395;
  wire tmp_396;
  wire tmp_397;
  wire tmp_398;
  wire tmp_399;
  wire tmp_400;
  wire tmp_401;
  wire tmp_402;
  wire tmp_403;
  wire tmp_404;
  wire tmp_405;
  wire tmp_406;
  wire tmp_407;
  reg  tmp_408;
  reg  nCS1_reg_out;
  wire nCS2_reg_ctrl_const_out;
  reg  nCS2_reg_ctrl_delay_out;
  wire nCS2_reg_Initial_Val_out;
  wire nCS2_1;
  wire nCS2_2;
  wire nCS2_3;
  wire nCS2_4;
  wire nCS2_5;
  wire nCS2_6;
  wire nCS2_7;
  wire nCS2_8;
  wire nCS2_9;
  wire nCS2_10;
  wire nCS2_11;
  wire nCS2_12;
  wire nCS2_13;
  wire nCS2_14;
  wire nCS2_15;
  wire nCS2_16;
  wire nCS2_17;
  wire nCS2_18;
  wire nCS2_19;
  wire nCS2_20;
  wire nCS2_21;
  wire tmp_409;
  wire tmp_410;
  wire tmp_411;
  wire tmp_412;
  wire tmp_413;
  wire tmp_414;
  wire tmp_415;
  wire tmp_416;
  wire tmp_417;
  wire tmp_418;
  wire tmp_419;
  wire tmp_420;
  wire tmp_421;
  wire tmp_422;
  wire tmp_423;
  wire tmp_424;
  wire tmp_425;
  wire tmp_426;
  wire tmp_427;
  wire tmp_428;
  wire tmp_429;
  wire tmp_430;
  wire tmp_431;
  reg  tmp_432;
  reg  nCS2_reg_out;
  wire nCS3_reg_ctrl_const_out;
  reg  nCS3_reg_ctrl_delay_out;
  wire nCS3_reg_Initial_Val_out;
  wire nCS3_1;
  wire nCS3_2;
  wire nCS3_3;
  wire nCS3_4;
  wire nCS3_5;
  wire nCS3_6;
  wire nCS3_7;
  wire nCS3_8;
  wire nCS3_9;
  wire nCS3_10;
  wire nCS3_11;
  wire nCS3_12;
  wire nCS3_13;
  wire nCS3_14;
  wire nCS3_15;
  wire nCS3_16;
  wire nCS3_17;
  wire nCS3_18;
  wire nCS3_19;
  wire nCS3_20;
  wire nCS3_21;
  wire tmp_433;
  wire tmp_434;
  wire tmp_435;
  wire tmp_436;
  wire tmp_437;
  wire tmp_438;
  wire tmp_439;
  wire tmp_440;
  wire tmp_441;
  wire tmp_442;
  wire tmp_443;
  wire tmp_444;
  wire tmp_445;
  wire tmp_446;
  wire tmp_447;
  wire tmp_448;
  wire tmp_449;
  wire tmp_450;
  wire tmp_451;
  wire tmp_452;
  wire tmp_453;
  wire tmp_454;
  wire tmp_455;
  reg  tmp_456;
  reg  nCS3_reg_out;
  wire nCS4_reg_ctrl_const_out;
  reg  nCS4_reg_ctrl_delay_out;
  wire nCS4_reg_Initial_Val_out;
  wire nCS4_1;
  wire nCS4_2;
  wire nCS4_3;
  wire nCS4_4;
  wire nCS4_5;
  wire nCS4_6;
  wire nCS4_7;
  wire nCS4_8;
  wire nCS4_9;
  wire nCS4_10;
  wire nCS4_11;
  wire nCS4_12;
  wire nCS4_13;
  wire nCS4_14;
  wire nCS4_15;
  wire nCS4_16;
  wire nCS4_17;
  wire nCS4_18;
  wire nCS4_19;
  wire nCS4_20;
  wire nCS4_21;
  wire tmp_457;
  wire tmp_458;
  wire tmp_459;
  wire tmp_460;
  wire tmp_461;
  wire tmp_462;
  wire tmp_463;
  wire tmp_464;
  wire tmp_465;
  wire tmp_466;
  wire tmp_467;
  wire tmp_468;
  wire tmp_469;
  wire tmp_470;
  wire tmp_471;
  wire tmp_472;
  wire tmp_473;
  wire tmp_474;
  wire tmp_475;
  wire tmp_476;
  wire tmp_477;
  wire tmp_478;
  wire tmp_479;
  reg  tmp_480;
  reg  nCS4_reg_out;
  wire sel_11983;
  wire sel_11984;
  wire sel_11985;
  wire sel_11986;
  wire sel_11987;
  wire sel_11988;
  wire sel_11989;
  wire sel_11990;
  wire signed [31:0] sel_11991;  // int32
  wire signed [31:0] sel_11992;  // int32
  wire signed [31:0] sel_11993;  // int32
  wire signed [31:0] sel_11994;  // int32
  wire signed [31:0] sel_11995;  // int32
  wire signed [31:0] sel_11996;  // int32
  wire signed [31:0] sel_11997;  // int32
  wire signed [31:0] sel_11998;  // int32
  wire signed [31:0] s_873;  // int32
  wire signed [31:0] sel_11999;  // int32
  wire signed [31:0] sel_1_2890;  // int32
  wire signed [31:0] s_874;  // int32
  wire signed [31:0] sel_1_2891;  // int32
  wire signed [31:0] sel_12000;  // int32
  wire signed [31:0] sel_12001;  // int32
  wire signed [31:0] sel_12002;  // int32
  wire signed [31:0] sel_12003;  // int32
  wire signed [31:0] sel_12004;  // int32
  wire signed [31:0] s_875;  // int32
  wire signed [31:0] sel_1_2892;  // int32
  wire signed [31:0] sel_12005;  // int32
  reg signed [31:0] sel_1_2893;  // int32
  wire tmp_481;
  wire signed [31:0] sel_12006;  // int32
  wire signed [31:0] sel_12007;  // int32
  wire signed [31:0] sel_12008;  // int32
  wire signed [31:0] sel_12009;  // int32
  wire signed [31:0] sel_12010;  // int32
  wire signed [31:0] sel_12011;  // int32
  wire signed [31:0] sel_12012;  // int32
  wire signed [31:0] sel_12013;  // int32
  wire signed [31:0] s_876;  // int32
  wire signed [31:0] sel_12014;  // int32
  wire signed [31:0] sel_1_2894;  // int32
  wire signed [31:0] s_877;  // int32
  wire signed [31:0] sel_1_2895;  // int32
  wire signed [31:0] sel_12015;  // int32
  wire signed [31:0] sel_12016;  // int32
  wire signed [31:0] sel_12017;  // int32
  wire signed [31:0] sel_12018;  // int32
  wire signed [31:0] sel_12019;  // int32
  wire signed [31:0] s_878;  // int32
  wire signed [31:0] sel_1_2896;  // int32
  wire signed [31:0] sel_12020;  // int32
  reg signed [31:0] sel_1_2897;  // int32
  wire tmp_482;
  wire sel_1_2898;
  wire sel_12021;
  wire sel_12022;
  wire sel_12023;
  wire sel_12024;
  wire signed [31:0] sel_12025;  // int32
  wire signed [31:0] sel_12026;  // int32
  wire signed [31:0] sel_12027;  // int32
  wire signed [31:0] sel_12028;  // int32
  wire signed [31:0] sel_12029;  // int32
  wire signed [31:0] sel_12030;  // int32
  wire signed [31:0] sel_12031;  // int32
  wire signed [31:0] sel_12032;  // int32
  wire signed [31:0] s_879;  // int32
  wire signed [31:0] sel_12033;  // int32
  wire signed [31:0] sel_1_2899;  // int32
  wire signed [31:0] s_880;  // int32
  wire signed [31:0] sel_1_2900;  // int32
  wire signed [31:0] sel_12034;  // int32
  wire signed [31:0] sel_12035;  // int32
  wire signed [31:0] sel_12036;  // int32
  wire signed [31:0] sel_12037;  // int32
  wire signed [31:0] sel_12038;  // int32
  wire signed [31:0] s_881;  // int32
  wire signed [31:0] sel_1_2901;  // int32
  wire signed [31:0] sel_12039;  // int32
  reg signed [31:0] sel_1_2902;  // int32
  wire tmp_483;
  wire sel_12040;
  reg  sel_1_2903;
  wire sel_12041;
  wire sel_12042;
  wire sel_12043;
  wire sel_12044;
  wire sel_12045;
  wire sel_12046;
  wire sel_12047;
  wire sel_12048;
  wire s_882;
  wire sel_12049;
  wire sel_2_1665;
  wire s_883;
  wire sel_2_1666;
  wire sel_12050;
  wire sel_12051;
  wire sel_12052;
  wire sel_12053;
  wire sel_12054;
  wire s_884;
  wire sel_2_1667;
  wire sel_12055;
  reg  sel_2_1668;
  wire sel_12056;
  wire sel_12057;
  wire sel_12058;
  wire sel_12059;
  wire sel_12060;
  wire sel_12061;
  wire sel_12062;
  wire sel_12063;
  wire signed [31:0] sel_12064;  // int32
  wire signed [31:0] sel_12065;  // int32
  wire signed [31:0] sel_12066;  // int32
  wire signed [31:0] sel_12067;  // int32
  wire signed [31:0] sel_12068;  // int32
  wire signed [31:0] sel_12069;  // int32
  wire signed [31:0] sel_12070;  // int32
  wire signed [31:0] sel_12071;  // int32
  wire signed [31:0] s_885;  // int32
  wire signed [31:0] sel_12072;  // int32
  wire signed [31:0] sel_1_2904;  // int32
  wire signed [31:0] s_886;  // int32
  wire signed [31:0] sel_1_2905;  // int32
  wire signed [31:0] sel_12073;  // int32
  wire signed [31:0] sel_12074;  // int32
  wire signed [31:0] sel_12075;  // int32
  wire signed [31:0] sel_12076;  // int32
  wire signed [31:0] sel_12077;  // int32
  wire signed [31:0] s_887;  // int32
  wire signed [31:0] sel_1_2906;  // int32
  wire signed [31:0] sel_12078;  // int32
  reg signed [31:0] sel_1_2907;  // int32
  wire tmp_484;
  wire sel_1_2908;
  wire sel_12079;
  wire sel_12080;
  wire sel_12081;
  wire sel_12082;
  wire signed [31:0] sel_12083;  // int32
  wire signed [31:0] sel_12084;  // int32
  wire signed [31:0] sel_12085;  // int32
  wire signed [31:0] sel_12086;  // int32
  wire signed [31:0] sel_12087;  // int32
  wire signed [31:0] sel_12088;  // int32
  wire signed [31:0] sel_12089;  // int32
  wire signed [31:0] sel_12090;  // int32
  wire signed [31:0] s_888;  // int32
  wire signed [31:0] sel_12091;  // int32
  wire signed [31:0] sel_1_2909;  // int32
  wire signed [31:0] s_889;  // int32
  wire signed [31:0] sel_1_2910;  // int32
  wire signed [31:0] sel_12092;  // int32
  wire signed [31:0] sel_12093;  // int32
  wire signed [31:0] sel_12094;  // int32
  wire signed [31:0] sel_12095;  // int32
  wire signed [31:0] sel_12096;  // int32
  wire signed [31:0] s_890;  // int32
  wire signed [31:0] sel_1_2911;  // int32
  wire signed [31:0] sel_12097;  // int32
  reg signed [31:0] sel_1_2912;  // int32
  wire tmp_485;
  wire sel_12098;
  reg  sel_1_2913;
  wire sel_12099;
  wire sel_12100;
  wire sel_12101;
  wire sel_12102;
  wire sel_12103;
  wire sel_12104;
  wire sel_12105;
  wire sel_12106;
  wire s_891;
  wire sel_12107;
  wire sel_2_1669;
  wire s_892;
  wire sel_2_1670;
  wire sel_12108;
  wire sel_12109;
  wire sel_12110;
  wire sel_12111;
  wire sel_12112;
  wire s_893;
  wire sel_2_1671;
  wire sel_12113;
  reg  sel_2_1672;
  wire sel_12114;
  wire sel_12115;
  wire sel_12116;
  wire sel_12117;
  wire sel_12118;
  wire sel_12119;
  wire sel_12120;
  wire sel_12121;
  wire signed [31:0] sel_12122;  // int32
  wire signed [31:0] sel_12123;  // int32
  wire signed [31:0] sel_12124;  // int32
  wire signed [31:0] sel_12125;  // int32
  wire signed [31:0] sel_12126;  // int32
  wire signed [31:0] sel_12127;  // int32
  wire signed [31:0] sel_12128;  // int32
  wire signed [31:0] sel_12129;  // int32
  wire signed [31:0] s_894;  // int32
  wire signed [31:0] sel_12130;  // int32
  wire signed [31:0] sel_1_2914;  // int32
  wire signed [31:0] s_895;  // int32
  wire signed [31:0] sel_1_2915;  // int32
  wire signed [31:0] sel_12131;  // int32
  wire signed [31:0] sel_12132;  // int32
  wire signed [31:0] sel_12133;  // int32
  wire signed [31:0] sel_12134;  // int32
  wire signed [31:0] sel_12135;  // int32
  wire signed [31:0] s_896;  // int32
  wire signed [31:0] sel_1_2916;  // int32
  wire signed [31:0] sel_12136;  // int32
  reg signed [31:0] sel_1_2917;  // int32
  wire tmp_486;
  wire signed [31:0] sel_12137;  // int32
  wire signed [31:0] sel_12138;  // int32
  wire signed [31:0] sel_12139;  // int32
  wire signed [31:0] sel_12140;  // int32
  wire signed [31:0] sel_12141;  // int32
  wire signed [31:0] sel_12142;  // int32
  wire signed [31:0] sel_12143;  // int32
  wire signed [31:0] sel_12144;  // int32
  wire signed [31:0] s_897;  // int32
  wire signed [31:0] sel_12145;  // int32
  wire signed [31:0] sel_1_2918;  // int32
  wire signed [31:0] s_898;  // int32
  wire signed [31:0] sel_1_2919;  // int32
  wire signed [31:0] sel_12146;  // int32
  wire signed [31:0] sel_12147;  // int32
  wire signed [31:0] sel_12148;  // int32
  wire signed [31:0] sel_12149;  // int32
  wire signed [31:0] sel_12150;  // int32
  wire signed [31:0] s_899;  // int32
  wire signed [31:0] sel_1_2920;  // int32
  wire signed [31:0] sel_12151;  // int32
  reg signed [31:0] sel_1_2921;  // int32
  wire tmp_487;
  wire sel_1_2922;
  wire sel_12152;
  wire sel_12153;
  wire sel_12154;
  wire sel_12155;
  wire sel_12156;
  reg  sel_1_2923;
  wire sel_12157;
  wire sel_12158;
  wire sel_12159;
  wire sel_12160;
  wire sel_12161;
  wire sel_12162;
  wire sel_12163;
  wire sel_12164;
  wire s_900;
  wire sel_12165;
  wire sel_2_1673;
  wire s_901;
  wire sel_2_1674;
  wire sel_12166;
  wire sel_12167;
  wire sel_12168;
  wire sel_12169;
  wire sel_12170;
  wire s_902;
  wire sel_2_1675;
  wire sel_12171;
  reg  sel_2_1676;
  wire sel_12172;
  wire sel_12173;
  wire sel_12174;
  wire sel_12175;
  wire sel_12176;
  wire sel_12177;
  wire sel_12178;
  wire sel_12179;
  wire signed [31:0] sel_12180;  // int32
  wire signed [31:0] sel_12181;  // int32
  wire signed [31:0] sel_12182;  // int32
  wire signed [31:0] sel_12183;  // int32
  wire signed [31:0] sel_12184;  // int32
  wire signed [31:0] sel_12185;  // int32
  wire signed [31:0] sel_12186;  // int32
  wire signed [31:0] sel_12187;  // int32
  wire signed [31:0] s_903;  // int32
  wire signed [31:0] sel_12188;  // int32
  wire signed [31:0] sel_1_2924;  // int32
  wire signed [31:0] s_904;  // int32
  wire signed [31:0] sel_1_2925;  // int32
  wire signed [31:0] sel_12189;  // int32
  wire signed [31:0] sel_12190;  // int32
  wire signed [31:0] sel_12191;  // int32
  wire signed [31:0] sel_12192;  // int32
  wire signed [31:0] sel_12193;  // int32
  wire signed [31:0] s_905;  // int32
  wire signed [31:0] sel_1_2926;  // int32
  wire signed [31:0] sel_12194;  // int32
  reg signed [31:0] sel_1_2927;  // int32
  wire tmp_488;
  wire sel_1_2928;
  wire sel_12195;
  wire sel_12196;
  wire sel_12197;
  wire sel_12198;
  wire signed [31:0] sel_12199;  // int32
  wire signed [31:0] sel_12200;  // int32
  wire signed [31:0] sel_12201;  // int32
  wire signed [31:0] sel_12202;  // int32
  wire signed [31:0] sel_12203;  // int32
  wire signed [31:0] sel_12204;  // int32
  wire signed [31:0] sel_12205;  // int32
  wire signed [31:0] sel_12206;  // int32
  wire signed [31:0] s_906;  // int32
  wire signed [31:0] sel_12207;  // int32
  wire signed [31:0] sel_1_2929;  // int32
  wire signed [31:0] s_907;  // int32
  wire signed [31:0] sel_1_2930;  // int32
  wire signed [31:0] sel_12208;  // int32
  wire signed [31:0] sel_12209;  // int32
  wire signed [31:0] sel_12210;  // int32
  wire signed [31:0] sel_12211;  // int32
  wire signed [31:0] sel_12212;  // int32
  wire signed [31:0] s_908;  // int32
  wire signed [31:0] sel_1_2931;  // int32
  wire signed [31:0] sel_12213;  // int32
  reg signed [31:0] sel_1_2932;  // int32
  wire tmp_489;
  wire sel_12214;
  reg  sel_1_2933;
  wire sel_12215;
  wire sel_12216;
  wire sel_12217;
  wire sel_12218;
  wire sel_12219;
  wire sel_12220;
  wire sel_12221;
  wire sel_12222;
  wire s_909;
  wire sel_12223;
  wire sel_2_1677;
  wire s_910;
  wire sel_2_1678;
  wire sel_12224;
  wire sel_12225;
  wire sel_12226;
  wire sel_12227;
  wire sel_12228;
  wire s_911;
  wire sel_2_1679;
  wire sel_12229;
  reg  sel_2_1680;
  wire sel_12230;
  wire sel_12231;
  wire sel_12232;
  wire sel_12233;
  wire sel_12234;
  wire sel_12235;
  wire sel_12236;
  wire sel_12237;
  wire signed [31:0] sel_12238;  // int32
  wire signed [31:0] sel_12239;  // int32
  wire signed [31:0] sel_12240;  // int32
  wire signed [31:0] sel_12241;  // int32
  wire signed [31:0] sel_12242;  // int32
  wire signed [31:0] sel_12243;  // int32
  wire signed [31:0] sel_12244;  // int32
  wire signed [31:0] sel_12245;  // int32
  wire signed [31:0] s_912;  // int32
  wire signed [31:0] sel_12246;  // int32
  wire signed [31:0] sel_1_2934;  // int32
  wire signed [31:0] s_913;  // int32
  wire signed [31:0] sel_1_2935;  // int32
  wire signed [31:0] sel_12247;  // int32
  wire signed [31:0] sel_12248;  // int32
  wire signed [31:0] sel_12249;  // int32
  wire signed [31:0] sel_12250;  // int32
  wire signed [31:0] sel_12251;  // int32
  wire signed [31:0] s_914;  // int32
  wire signed [31:0] sel_1_2936;  // int32
  wire signed [31:0] sel_12252;  // int32
  reg signed [31:0] sel_1_2937;  // int32
  wire tmp_490;
  wire sel_1_2938;
  wire sel_12253;
  wire sel_12254;
  wire sel_12255;
  wire sel_12256;
  wire signed [31:0] sel_12257;  // int32
  wire signed [31:0] sel_12258;  // int32
  wire signed [31:0] sel_12259;  // int32
  wire signed [31:0] sel_12260;  // int32
  wire signed [31:0] sel_12261;  // int32
  wire signed [31:0] sel_12262;  // int32
  wire signed [31:0] sel_12263;  // int32
  wire signed [31:0] sel_12264;  // int32
  wire signed [31:0] s_915;  // int32
  wire signed [31:0] sel_12265;  // int32
  wire signed [31:0] sel_1_2939;  // int32
  wire signed [31:0] s_916;  // int32
  wire signed [31:0] sel_1_2940;  // int32
  wire signed [31:0] sel_12266;  // int32
  wire signed [31:0] sel_12267;  // int32
  wire signed [31:0] sel_12268;  // int32
  wire signed [31:0] sel_12269;  // int32
  wire signed [31:0] sel_12270;  // int32
  wire signed [31:0] s_917;  // int32
  wire signed [31:0] sel_1_2941;  // int32
  wire signed [31:0] sel_12271;  // int32
  reg signed [31:0] sel_1_2942;  // int32
  wire tmp_491;
  wire sel_12272;
  reg  sel_1_2943;
  wire sel_12273;
  wire sel_12274;
  wire sel_12275;
  wire sel_12276;
  wire sel_12277;
  wire sel_12278;
  wire sel_12279;
  wire sel_12280;
  wire s_918;
  wire sel_12281;
  wire sel_2_1681;
  wire s_919;
  wire sel_2_1682;
  wire sel_12282;
  wire sel_12283;
  wire sel_12284;
  wire sel_12285;
  wire sel_12286;
  wire s_920;
  wire sel_2_1683;
  wire sel_12287;
  reg  sel_2_1684;
  wire sel_12288;
  wire sel_12289;
  wire sel_12290;
  wire sel_12291;
  wire sel_12292;
  wire sel_12293;
  wire sel_12294;
  wire sel_12295;
  wire sel_1_2944;
  wire sel_12296;
  wire sel_12297;
  wire sel_12298;
  wire sel_12299;
  wire sel_12300;
  reg  sel_1_2945;
  wire sel_12301;
  wire sel_12302;
  wire sel_12303;
  wire sel_12304;
  wire sel_12305;
  wire sel_12306;
  wire sel_12307;
  wire sel_12308;
  wire s_921;
  wire sel_12309;
  wire sel_2_1685;
  wire s_922;
  wire sel_2_1686;
  wire sel_12310;
  wire sel_12311;
  wire sel_12312;
  wire sel_12313;
  wire sel_12314;
  wire s_923;
  wire sel_2_1687;
  wire sel_12315;
  reg  sel_2_1688;
  wire sel_12316;
  wire sel_12317;
  wire sel_12318;
  wire sel_12319;
  wire sel_12320;
  wire sel_12321;
  wire sel_12322;
  wire sel_12323;
  wire signed [31:0] sel_12324;  // int32
  wire signed [31:0] sel_12325;  // int32
  wire signed [31:0] sel_12326;  // int32
  wire signed [31:0] sel_12327;  // int32
  wire signed [31:0] sel_12328;  // int32
  wire signed [31:0] sel_12329;  // int32
  wire signed [31:0] sel_12330;  // int32
  wire signed [31:0] sel_12331;  // int32
  wire signed [31:0] s_924;  // int32
  wire signed [31:0] sel_12332;  // int32
  wire signed [31:0] sel_1_2946;  // int32
  wire signed [31:0] s_925;  // int32
  wire signed [31:0] sel_1_2947;  // int32
  wire signed [31:0] sel_12333;  // int32
  wire signed [31:0] sel_12334;  // int32
  wire signed [31:0] sel_12335;  // int32
  wire signed [31:0] sel_12336;  // int32
  wire signed [31:0] sel_12337;  // int32
  wire signed [31:0] s_926;  // int32
  wire signed [31:0] sel_1_2948;  // int32
  wire signed [31:0] sel_12338;  // int32
  reg signed [31:0] sel_1_2949;  // int32
  wire tmp_492;
  wire sel_1_2950;
  wire sel_12339;
  wire sel_12340;
  wire sel_12341;
  wire sel_12342;
  wire sel_12343;
  reg  sel_1_2951;
  wire sel_12344;
  wire sel_12345;
  wire sel_12346;
  wire sel_12347;
  wire sel_12348;
  wire sel_12349;
  wire sel_12350;
  wire sel_12351;
  wire s_927;
  wire sel_12352;
  wire sel_2_1689;
  wire s_928;
  wire sel_2_1690;
  wire sel_12353;
  wire sel_12354;
  wire sel_12355;
  wire sel_12356;
  wire sel_12357;
  wire s_929;
  wire sel_2_1691;
  wire sel_12358;
  reg  sel_2_1692;
  wire sel_12359;
  wire sel_12360;
  wire sel_12361;
  wire sel_12362;
  wire sel_12363;
  wire sel_12364;
  wire sel_12365;
  wire sel_12366;
  wire sel_1_2952;
  wire sel_12367;
  wire sel_12368;
  wire sel_12369;
  wire sel_12370;
  wire sel_12371;
  reg  sel_1_2953;
  wire sel_12372;
  wire sel_12373;
  wire sel_12374;
  wire sel_12375;
  wire sel_12376;
  wire sel_12377;
  wire sel_12378;
  wire sel_12379;
  wire s_930;
  wire sel_12380;
  wire sel_2_1693;
  wire s_931;
  wire sel_2_1694;
  wire sel_12381;
  wire sel_12382;
  wire sel_12383;
  wire sel_12384;
  wire sel_12385;
  wire s_932;
  wire sel_2_1695;
  wire sel_12386;
  reg  sel_2_1696;
  wire sel_12387;
  wire sel_12388;
  wire sel_12389;
  wire sel_12390;
  wire sel_12391;
  wire sel_12392;
  wire sel_12393;
  wire sel_12394;
  wire sel_1_2954;
  wire sel_12395;
  wire sel_12396;
  wire sel_12397;
  wire sel_12398;
  wire sel_12399;
  reg  sel_1_2955;
  wire sel_12400;
  wire sel_12401;
  wire sel_12402;
  wire sel_12403;
  wire sel_12404;
  wire sel_12405;
  wire sel_12406;
  wire sel_12407;
  wire s_933;
  wire sel_12408;
  wire sel_2_1697;
  wire s_934;
  wire sel_2_1698;
  wire sel_12409;
  wire sel_12410;
  wire sel_12411;
  wire sel_12412;
  wire sel_12413;
  wire s_935;
  wire sel_2_1699;
  wire sel_12414;
  reg  sel_2_1700;
  wire sel_12415;
  wire sel_12416;
  wire sel_12417;
  wire sel_12418;
  wire sel_12419;
  wire sel_12420;
  wire sel_12421;
  wire sel_12422;
  wire signed [31:0] sel_12423;  // int32
  wire signed [31:0] sel_12424;  // int32
  wire signed [31:0] sel_12425;  // int32
  wire signed [31:0] sel_12426;  // int32
  wire signed [31:0] sel_12427;  // int32
  wire signed [31:0] sel_12428;  // int32
  wire signed [31:0] sel_12429;  // int32
  wire signed [31:0] sel_12430;  // int32
  wire signed [31:0] s_936;  // int32
  wire signed [31:0] sel_12431;  // int32
  wire signed [31:0] sel_1_2956;  // int32
  wire signed [31:0] s_937;  // int32
  wire signed [31:0] sel_1_2957;  // int32
  wire signed [31:0] sel_12432;  // int32
  wire signed [31:0] sel_12433;  // int32
  wire signed [31:0] sel_12434;  // int32
  wire signed [31:0] sel_12435;  // int32
  wire signed [31:0] sel_12436;  // int32
  wire signed [31:0] s_938;  // int32
  wire signed [31:0] sel_1_2958;  // int32
  wire signed [31:0] sel_12437;  // int32
  reg signed [31:0] sel_1_2959;  // int32
  wire tmp_493;
  wire signed [31:0] sel_12438;  // int32
  wire signed [31:0] sel_12439;  // int32
  wire signed [31:0] sel_12440;  // int32
  wire signed [31:0] sel_12441;  // int32
  wire signed [31:0] sel_12442;  // int32
  wire signed [31:0] sel_12443;  // int32
  wire signed [31:0] sel_12444;  // int32
  wire signed [31:0] sel_12445;  // int32
  wire signed [31:0] s_939;  // int32
  wire signed [31:0] sel_12446;  // int32
  wire signed [31:0] sel_1_2960;  // int32
  wire signed [31:0] s_940;  // int32
  wire signed [31:0] sel_1_2961;  // int32
  wire signed [31:0] sel_12447;  // int32
  wire signed [31:0] sel_12448;  // int32
  wire signed [31:0] sel_12449;  // int32
  wire signed [31:0] sel_12450;  // int32
  wire signed [31:0] sel_12451;  // int32
  wire signed [31:0] s_941;  // int32
  wire signed [31:0] sel_1_2962;  // int32
  wire signed [31:0] sel_12452;  // int32
  reg signed [31:0] sel_1_2963;  // int32
  wire tmp_494;
  wire sel_1_2964;
  wire sel_12453;
  wire sel_12454;
  wire sel_12455;
  wire sel_12456;
  wire signed [31:0] sel_12457;  // int32
  wire signed [31:0] sel_12458;  // int32
  wire signed [31:0] sel_12459;  // int32
  wire signed [31:0] sel_12460;  // int32
  wire signed [31:0] sel_12461;  // int32
  wire signed [31:0] sel_12462;  // int32
  wire signed [31:0] sel_12463;  // int32
  wire signed [31:0] sel_12464;  // int32
  wire signed [31:0] s_942;  // int32
  wire signed [31:0] sel_12465;  // int32
  wire signed [31:0] sel_1_2965;  // int32
  wire signed [31:0] s_943;  // int32
  wire signed [31:0] sel_1_2966;  // int32
  wire signed [31:0] sel_12466;  // int32
  wire signed [31:0] sel_12467;  // int32
  wire signed [31:0] sel_12468;  // int32
  wire signed [31:0] sel_12469;  // int32
  wire signed [31:0] sel_12470;  // int32
  wire signed [31:0] s_944;  // int32
  wire signed [31:0] sel_1_2967;  // int32
  wire signed [31:0] sel_12471;  // int32
  reg signed [31:0] sel_1_2968;  // int32
  wire tmp_495;
  wire sel_12472;
  reg  sel_1_2969;
  wire sel_12473;
  wire sel_12474;
  wire sel_12475;
  wire sel_12476;
  wire sel_12477;
  wire sel_12478;
  wire sel_12479;
  wire sel_12480;
  wire s_945;
  wire sel_12481;
  wire sel_2_1701;
  wire s_946;
  wire sel_2_1702;
  wire sel_12482;
  wire sel_12483;
  wire sel_12484;
  wire sel_12485;
  wire sel_12486;
  wire s_947;
  wire sel_2_1703;
  wire sel_12487;
  reg  sel_2_1704;
  wire sel_12488;
  wire sel_12489;
  wire sel_12490;
  wire sel_12491;
  wire sel_12492;
  wire sel_12493;
  wire sel_12494;
  wire sel_12495;
  wire sel_1_2970;
  wire sel_12496;
  wire sel_12497;
  wire sel_12498;
  wire sel_12499;
  wire sel_12500;
  reg  sel_1_2971;
  wire sel_12501;
  wire sel_12502;
  wire sel_12503;
  wire sel_12504;
  wire sel_12505;
  wire sel_12506;
  wire sel_12507;
  wire sel_12508;
  wire s_948;
  wire sel_12509;
  wire sel_2_1705;
  wire s_949;
  wire sel_2_1706;
  wire sel_12510;
  wire sel_12511;
  wire sel_12512;
  wire sel_12513;
  wire sel_12514;
  wire s_950;
  wire sel_2_1707;
  wire sel_12515;
  reg  sel_2_1708;
  wire sel_12516;
  wire sel_12517;
  wire sel_12518;
  wire sel_12519;
  wire sel_12520;
  wire sel_12521;
  wire sel_12522;
  wire sel_12523;
  wire sel_1_2972;
  wire sel_12524;
  wire sel_12525;
  wire sel_12526;
  wire sel_12527;
  wire sel_12528;
  reg  sel_1_2973;
  wire sel_12529;
  wire sel_12530;
  wire sel_12531;
  wire sel_12532;
  wire sel_12533;
  wire sel_12534;
  wire sel_12535;
  wire sel_12536;
  wire s_951;
  wire sel_12537;
  wire sel_2_1709;
  wire s_952;
  wire sel_2_1710;
  wire sel_12538;
  wire sel_12539;
  wire sel_12540;
  wire sel_12541;
  wire sel_12542;
  wire s_953;
  wire sel_2_1711;
  wire sel_12543;
  reg  sel_2_1712;
  wire sel_12544;
  wire sel_12545;
  wire sel_12546;
  wire sel_12547;
  wire sel_12548;
  wire sel_12549;
  wire sel_12550;
  wire sel_12551;
  wire sel_1_2974;
  wire sel_12552;
  wire sel_12553;
  wire sel_12554;
  wire sel_12555;
  wire sel_12556;
  reg  sel_1_2975;
  wire sel_12557;
  wire sel_12558;
  wire sel_12559;
  wire sel_12560;
  wire sel_12561;
  wire sel_12562;
  wire sel_12563;
  wire sel_12564;
  wire s_954;
  wire sel_12565;
  wire sel_2_1713;
  wire s_955;
  wire sel_2_1714;
  wire sel_12566;
  wire sel_12567;
  wire sel_12568;
  wire sel_12569;
  wire sel_12570;
  wire s_956;
  wire sel_2_1715;
  wire sel_12571;
  reg  sel_2_1716;
  wire sel_12572;
  wire sel_12573;
  wire sel_12574;
  wire sel_12575;
  wire sel_12576;
  wire sel_12577;
  wire sel_12578;
  wire sel_12579;
  wire sel_1_2976;
  wire sel_12580;
  wire sel_12581;
  wire sel_12582;
  wire sel_12583;
  wire sel_12584;
  reg  sel_1_2977;
  wire sel_12585;
  wire sel_12586;
  wire sel_12587;
  wire sel_12588;
  wire sel_12589;
  wire sel_12590;
  wire sel_12591;
  wire sel_12592;
  wire s_957;
  wire sel_12593;
  wire sel_2_1717;
  wire s_958;
  wire sel_2_1718;
  wire sel_12594;
  wire sel_12595;
  wire sel_12596;
  wire sel_12597;
  wire sel_12598;
  wire s_959;
  wire sel_2_1719;
  wire sel_12599;
  reg  sel_2_1720;
  wire sel_12600;
  wire sel_12601;
  wire sel_12602;
  wire sel_12603;
  wire sel_12604;
  wire sel_12605;
  wire sel_12606;
  wire sel_12607;
  wire sel_1_2978;
  wire sel_12608;
  wire sel_12609;
  wire sel_12610;
  wire sel_12611;
  wire sel_12612;
  reg  sel_1_2979;
  wire sel_12613;
  wire sel_12614;
  wire sel_12615;
  wire sel_12616;
  wire sel_12617;
  wire sel_12618;
  wire sel_12619;
  wire sel_12620;
  wire s_960;
  wire sel_12621;
  wire sel_2_1721;
  wire s_961;
  wire sel_2_1722;
  wire sel_12622;
  wire sel_12623;
  wire sel_12624;
  wire sel_12625;
  wire sel_12626;
  wire s_962;
  wire sel_2_1723;
  wire sel_12627;
  reg  sel_2_1724;
  wire sel_12628;
  wire sel_12629;
  wire sel_12630;
  wire sel_12631;
  wire sel_12632;
  wire sel_12633;
  wire sel_12634;
  wire sel_12635;
  wire sel_1_2980;
  wire sel_12636;
  wire sel_12637;
  wire sel_12638;
  wire sel_12639;
  wire sel_12640;
  reg  sel_1_2981;
  wire sel_12641;
  wire sel_12642;
  wire sel_12643;
  wire sel_12644;
  wire sel_12645;
  wire sel_12646;
  wire sel_12647;
  wire sel_12648;
  wire s_963;
  wire sel_12649;
  wire sel_2_1725;
  wire s_964;
  wire sel_2_1726;
  wire sel_12650;
  wire sel_12651;
  wire sel_12652;
  wire sel_12653;
  wire sel_12654;
  wire s_965;
  wire sel_2_1727;
  wire sel_12655;
  reg  sel_2_1728;
  reg  [15:0] tmp_496;  // boolean [16]
  reg  [15:0] payload_debug;  // boolean [16]
  reg  [15:0] payload_debug_16;  // boolean [16]
  reg  [15:0] payload_debug_17;  // boolean [16]
  reg  [15:0] payload_debug_18;  // boolean [16]
  reg  [15:0] payload_debug_19;  // boolean [16]
  reg  [15:0] payload_debug_20;  // boolean [16]
  reg  [15:0] payload_debug_21;  // boolean [16]
  reg  [15:0] payload_debug_22;  // boolean [16]
  reg  [15:0] payload_debug_23;  // boolean [16]
  reg  [15:0] payload_debug_24;  // boolean [16]
  reg  [15:0] payload_debug_25;  // boolean [16]
  reg  [15:0] payload_debug_26;  // boolean [16]
  reg  [15:0] payload_debug_27;  // boolean [16]
  reg  [15:0] payload_debug_28;  // boolean [16]
  reg  [15:0] payload_debug_29;  // boolean [16]
  reg  [15:0] payload_debug_30;  // boolean [16]
  reg [15:0] p105_tmp;  // uint16
  reg [15:0] p102_tmp;  // uint16
  reg [15:0] p87_tmp;  // uint16
  reg [3:0] p54_tmp;  // enum type state_type_is_SPI_MNGR (15 enums)
  reg  p7968_sel_1;
  reg  p7953_sel_2;
  reg  p7900_sel_2;
  reg  p7279_sel_2;
  reg  p7262_sel_2;
  reg [15:0] p75_tmp;  // uint16
  reg signed [31:0] p10645_sel_1;  // int32
  reg  p7684_sel_2;
  reg  [11:0] p7683cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p10356_sel_1;  // int32
  reg  p7495_sel_2;
  reg  [11:0] p7494cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9931_sel_1;  // int32
  reg  p7046_sel_2;
  reg  [11:0] p7045cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p10050_sel_1;  // int32
  reg  p6857_sel_2;
  reg  [11:0] p6856cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p11359_sel_1;  // int32
  reg  p6439_sel_2;
  reg  [11:0] p6438cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p11087_sel_1;  // int32
  reg  p6251_sel_2;
  reg  [11:0] p6250cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9982_sel_1;  // int32
  reg  p5833_sel_2;
  reg  [11:0] p5832cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p11291_sel_1;  // int32
  reg  p5645_sel_2;
  reg  [11:0] p5644cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9965_sel_1;  // int32
  reg  p5227_sel_2;
  reg  [11:0] p5226cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p10492_sel_1;  // int32
  reg  p5039_sel_2;
  reg  [11:0] p5038cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p10373_sel_1;  // int32
  reg  p4621_sel_2;
  reg  [11:0] p4620cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p10424_sel_1;  // int32
  reg  p4433_sel_2;
  reg  [11:0] p4432cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p2158_sel_1;  // int32
  reg [15:0] p78_tmp;  // uint16
  reg signed [31:0] p10985_sel_1;  // int32
  reg  p7616_sel_2;
  reg  [11:0] p7615cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p11002_sel_1;  // int32
  reg  p7563_sel_2;
  reg  [11:0] p7562cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p9999_sel_1;  // int32
  reg  p6978_sel_2;
  reg  [11:0] p6977cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10968_sel_1;  // int32
  reg  p6925_sel_2;
  reg  [11:0] p6924cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10849_sel_1;  // int32
  reg  p6371_sel_2;
  reg  [11:0] p6370cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10033_sel_1;  // int32
  reg  p6319_sel_2;
  reg  [11:0] p6318cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p11342_sel_1;  // int32
  reg  p5765_sel_2;
  reg  [11:0] p5764cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10322_sel_1;  // int32
  reg  p5713_sel_2;
  reg  [11:0] p5712cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10577_sel_1;  // int32
  reg  p5159_sel_2;
  reg  [11:0] p5158cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10339_sel_1;  // int32
  reg  p5107_sel_2;
  reg  [11:0] p5106cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p10407_sel_1;  // int32
  reg  p4553_sel_2;
  reg  [11:0] p4552cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p9914_sel_1;  // int32
  reg  p4501_sel_2;
  reg  [11:0] p4500cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p1342_sel_1;  // int32
  reg [15:0] p72_tmp;  // uint16
  reg signed [31:0] p10815_sel_1;  // int32
  reg  p7650_sel_2;
  reg  [11:0] p7649cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11393_sel_1;  // int32
  reg  p7529_sel_2;
  reg  [11:0] p7528cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11495_sel_1;  // int32
  reg  p7012_sel_2;
  reg  [11:0] p7011cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11308_sel_1;  // int32
  reg  p6891_sel_2;
  reg  [11:0] p6890cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11444_sel_1;  // int32
  reg  p6405_sel_2;
  reg  [11:0] p6404cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11461_sel_1;  // int32
  reg  p6285_sel_2;
  reg  [11:0] p6284cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11325_sel_1;  // int32
  reg  p5799_sel_2;
  reg  [11:0] p5798cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11427_sel_1;  // int32
  reg  p5679_sel_2;
  reg  [11:0] p5678cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p10713_sel_1;  // int32
  reg  p5193_sel_2;
  reg  [11:0] p5192cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p10798_sel_1;  // int32
  reg  p5073_sel_2;
  reg  [11:0] p5072cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p11223_sel_1;  // int32
  reg  p4587_sel_2;
  reg  [11:0] p4586cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p10169_sel_1;  // int32
  reg  p4467_sel_2;
  reg  [11:0] p4466cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p1648_sel_1;  // int32
  reg [15:0] p69_tmp;  // uint16
  reg signed [31:0] p11257_sel_1;  // int32
  reg  p7599_sel_2;
  reg  [11:0] p7598cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p11240_sel_1;  // int32
  reg  p7580_sel_2;
  reg  [11:0] p7579cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p10390_sel_1;  // int32
  reg  p6961_sel_2;
  reg  [11:0] p6960cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p11104_sel_1;  // int32
  reg  p6942_sel_2;
  reg  [11:0] p6941cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p11410_sel_1;  // int32
  reg  p6354_sel_2;
  reg  [11:0] p6353cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p10016_sel_1;  // int32
  reg  p6336_sel_2;
  reg  [11:0] p6335cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p10186_sel_1;  // int32
  reg  p5748_sel_2;
  reg  [11:0] p5747cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p9880_sel_1;  // int32
  reg  p5730_sel_2;
  reg  [11:0] p5729cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p11376_sel_1;  // int32
  reg  p5142_sel_2;
  reg  [11:0] p5141cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p11478_sel_1;  // int32
  reg  p5124_sel_2;
  reg  [11:0] p5123cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p10509_sel_1;  // int32
  reg  p4536_sel_2;
  reg  [11:0] p4535cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p9897_sel_1;  // int32
  reg  p4518_sel_2;
  reg  [11:0] p4517cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p968_sel_1;  // int32
  reg [15:0] p66_tmp;  // uint16
  reg signed [31:0] p10730_sel_1;  // int32
  reg  p7667_sel_2;
  reg  [11:0] p7666cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p11172_sel_1;  // int32
  reg  p7512_sel_2;
  reg  [11:0] p7511cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p10611_sel_1;  // int32
  reg  p7029_sel_2;
  reg  [11:0] p7028cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p10679_sel_1;  // int32
  reg  p6874_sel_2;
  reg  [11:0] p6873cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9948_sel_1;  // int32
  reg  p6422_sel_2;
  reg  [11:0] p6421cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p10696_sel_1;  // int32
  reg  p6268_sel_2;
  reg  [11:0] p6267cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p11070_sel_1;  // int32
  reg  p5816_sel_2;
  reg  [11:0] p5815cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p10560_sel_1;  // int32
  reg  p5662_sel_2;
  reg  [11:0] p5661cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p10441_sel_1;  // int32
  reg  p5210_sel_2;
  reg  [11:0] p5209cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p11121_sel_1;  // int32
  reg  p5056_sel_2;
  reg  [11:0] p5055cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p10475_sel_1;  // int32
  reg  p4604_sel_2;
  reg  [11:0] p4603cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p11274_sel_1;  // int32
  reg  p4450_sel_2;
  reg  [11:0] p4449cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p1971_sel_1;  // int32
  reg [15:0] p63_tmp;  // uint16
  reg signed [31:0] p10101_sel_1;  // int32
  reg  p7718_sel_2;
  reg  [11:0] p7717cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10883_sel_1;  // int32
  reg  p7461_sel_2;
  reg  [11:0] p7460cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10526_sel_1;  // int32
  reg  p7080_sel_2;
  reg  [11:0] p7079cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10900_sel_1;  // int32
  reg  p6823_sel_2;
  reg  [11:0] p6822cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10628_sel_1;  // int32
  reg  p6473_sel_2;
  reg  [11:0] p6472cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p11155_sel_1;  // int32
  reg  p6217_sel_2;
  reg  [11:0] p6216cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p11036_sel_1;  // int32
  reg  p5867_sel_2;
  reg  [11:0] p5866cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p11053_sel_1;  // int32
  reg  p5611_sel_2;
  reg  [11:0] p5610cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10594_sel_1;  // int32
  reg  p5261_sel_2;
  reg  [11:0] p5260cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10832_sel_1;  // int32
  reg  p5005_sel_2;
  reg  [11:0] p5004cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10781_sel_1;  // int32
  reg  p4655_sel_2;
  reg  [11:0] p4654cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p10764_sel_1;  // int32
  reg  p4399_sel_2;
  reg  [11:0] p4398cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p2515_sel_1;  // int32
  reg [15:0] p60_tmp;  // uint16
  reg signed [31:0] p10866_sel_1;  // int32
  reg  p7633_sel_2;
  reg  [11:0] p7632cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p11019_sel_1;  // int32
  reg  p7546_sel_2;
  reg  [11:0] p7545cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p11138_sel_1;  // int32
  reg  p6995_sel_2;
  reg  [11:0] p6994cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10543_sel_1;  // int32
  reg  p6908_sel_2;
  reg  [11:0] p6907cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10458_sel_1;  // int32
  reg  p6388_sel_2;
  reg  [11:0] p6387cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10662_sel_1;  // int32
  reg  p6302_sel_2;
  reg  [11:0] p6301cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10934_sel_1;  // int32
  reg  p5782_sel_2;
  reg  [11:0] p5781cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p11189_sel_1;  // int32
  reg  p5696_sel_2;
  reg  [11:0] p5695cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10951_sel_1;  // int32
  reg  p5176_sel_2;
  reg  [11:0] p5175cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10917_sel_1;  // int32
  reg  p5090_sel_2;
  reg  [11:0] p5089cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p11206_sel_1;  // int32
  reg  p4570_sel_2;
  reg  [11:0] p4569cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p10747_sel_1;  // int32
  reg  p4484_sel_2;
  reg  [11:0] p4483cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p1546_sel_1;  // int32
  reg [15:0] p57_tmp;  // uint16
  reg signed [31:0] p10220_sel_1;  // int32
  reg  p7701_sel_2;
  reg  [11:0] p7700cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10152_sel_1;  // int32
  reg  p7478_sel_2;
  reg  [11:0] p7477cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10237_sel_1;  // int32
  reg  p7063_sel_2;
  reg  [11:0] p7062cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10254_sel_1;  // int32
  reg  p6840_sel_2;
  reg  [11:0] p6839cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10118_sel_1;  // int32
  reg  p6456_sel_2;
  reg  [11:0] p6455cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10135_sel_1;  // int32
  reg  p6234_sel_2;
  reg  [11:0] p6233cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10271_sel_1;  // int32
  reg  p5850_sel_2;
  reg  [11:0] p5849cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10288_sel_1;  // int32
  reg  p5628_sel_2;
  reg  [11:0] p5627cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10305_sel_1;  // int32
  reg  p5244_sel_2;
  reg  [11:0] p5243cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10203_sel_1;  // int32
  reg  p5022_sel_2;
  reg  [11:0] p5021cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10067_sel_1;  // int32
  reg  p4638_sel_2;
  reg  [11:0] p4637cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p10084_sel_1;  // int32
  reg  p4416_sel_2;
  reg  [11:0] p4415cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p2311_sel_1;  // int32
  reg signed [31:0] p8945_sel_1;  // int32
  reg  p7786_sel_2;
  reg  [11:0] p7785cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9285_sel_1;  // int32
  reg  p7393_sel_2;
  reg  [11:0] p7392cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p8452_sel_1;  // int32
  reg  p7148_sel_2;
  reg  [11:0] p7147cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9183_sel_1;  // int32
  reg  p6755_sel_2;
  reg  [11:0] p6754cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p8418_sel_1;  // int32
  reg  p6541_sel_2;
  reg  [11:0] p6540cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9234_sel_1;  // int32
  reg  p6149_sel_2;
  reg  [11:0] p6148cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9115_sel_1;  // int32
  reg  p5935_sel_2;
  reg  [11:0] p5934cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9761_sel_1;  // int32
  reg  p5543_sel_2;
  reg  [11:0] p5542cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9217_sel_1;  // int32
  reg  p5329_sel_2;
  reg  [11:0] p5328cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p8724_sel_1;  // int32
  reg  p4937_sel_2;
  reg  [11:0] p4936cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9319_sel_1;  // int32
  reg  p4723_sel_2;
  reg  [11:0] p4722cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p9200_sel_1;  // int32
  reg  p4331_sel_2;
  reg  [11:0] p4330cont_bits_41_cont_bits_41;  // boolean [12]
  reg signed [31:0] p3382_sel_1;  // int32
  reg signed [31:0] p9370_sel_1;  // int32
  reg  p7752_sel_2;
  reg  [11:0] p7751cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8877_sel_1;  // int32
  reg  p7427_sel_2;
  reg  [11:0] p7426cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p9812_sel_1;  // int32
  reg  p7114_sel_2;
  reg  [11:0] p7113cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8809_sel_1;  // int32
  reg  p6789_sel_2;
  reg  [11:0] p6788cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8792_sel_1;  // int32
  reg  p6507_sel_2;
  reg  [11:0] p6506cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8401_sel_1;  // int32
  reg  p6183_sel_2;
  reg  [11:0] p6182cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p9030_sel_1;  // int32
  reg  p5901_sel_2;
  reg  [11:0] p5900cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8435_sel_1;  // int32
  reg  p5577_sel_2;
  reg  [11:0] p5576cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8333_sel_1;  // int32
  reg  p5295_sel_2;
  reg  [11:0] p5294cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p9795_sel_1;  // int32
  reg  p4971_sel_2;
  reg  [11:0] p4970cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p9098_sel_1;  // int32
  reg  p4689_sel_2;
  reg  [11:0] p4688cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p8316_sel_1;  // int32
  reg  p4365_sel_2;
  reg  [11:0] p4364cont_bits_42_cont_bits_42;  // boolean [12]
  reg signed [31:0] p2957_sel_1;  // int32
  reg signed [31:0] p8860_sel_1;  // int32
  reg  p7803_sel_2;
  reg  [11:0] p7802cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p9574_sel_1;  // int32
  reg  p7376_sel_2;
  reg  [11:0] p7375cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8673_sel_1;  // int32
  reg  p7165_sel_2;
  reg  [11:0] p7164cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8486_sel_1;  // int32
  reg  p6738_sel_2;
  reg  [11:0] p6737cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8775_sel_1;  // int32
  reg  p6558_sel_2;
  reg  [11:0] p6557cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8537_sel_1;  // int32
  reg  p6132_sel_2;
  reg  [11:0] p6131cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8894_sel_1;  // int32
  reg  p5952_sel_2;
  reg  [11:0] p5951cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8826_sel_1;  // int32
  reg  p5526_sel_2;
  reg  [11:0] p5525cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8741_sel_1;  // int32
  reg  p5346_sel_2;
  reg  [11:0] p5345cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p9149_sel_1;  // int32
  reg  p4920_sel_2;
  reg  [11:0] p4919cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p8248_sel_1;  // int32
  reg  p4740_sel_2;
  reg  [11:0] p4739cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p9523_sel_1;  // int32
  reg  p4314_sel_2;
  reg  [11:0] p4313cont_bits_32_cont_bits_32;  // boolean [12]
  reg signed [31:0] p3501_sel_1;  // int32
  reg signed [31:0] p8469_sel_1;  // int32
  reg  p7854_sel_2;
  reg  [11:0] p7853cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p9744_sel_1;  // int32
  reg  p7325_sel_2;
  reg  [11:0] p7324cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p9353_sel_1;  // int32
  reg  p7216_sel_2;
  reg  [11:0] p7215cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8639_sel_1;  // int32
  reg  p6687_sel_2;
  reg  [11:0] p6686cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8282_sel_1;  // int32
  reg  p6609_sel_2;
  reg  [11:0] p6608cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8265_sel_1;  // int32
  reg  p6081_sel_2;
  reg  [11:0] p6080cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p9676_sel_1;  // int32
  reg  p6003_sel_2;
  reg  [11:0] p6002cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p9268_sel_1;  // int32
  reg  p5475_sel_2;
  reg  [11:0] p5474cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8911_sel_1;  // int32
  reg  p5397_sel_2;
  reg  [11:0] p5396cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8996_sel_1;  // int32
  reg  p4869_sel_2;
  reg  [11:0] p4868cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8622_sel_1;  // int32
  reg  p4791_sel_2;
  reg  [11:0] p4790cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p8928_sel_1;  // int32
  reg  p4263_sel_2;
  reg  [11:0] p4262cont_bits_31_cont_bits_31;  // boolean [12]
  reg signed [31:0] p4113_sel_1;  // int32
  reg signed [31:0] p8503_sel_1;  // int32
  reg  p7837_sel_2;
  reg  [11:0] p7836cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p8690_sel_1;  // int32
  reg  p7342_sel_2;
  reg  [11:0] p7341cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9489_sel_1;  // int32
  reg  p7199_sel_2;
  reg  [11:0] p7198cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9659_sel_1;  // int32
  reg  p6704_sel_2;
  reg  [11:0] p6703cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9302_sel_1;  // int32
  reg  p6592_sel_2;
  reg  [11:0] p6591cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9336_sel_1;  // int32
  reg  p6098_sel_2;
  reg  [11:0] p6097cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9693_sel_1;  // int32
  reg  p5986_sel_2;
  reg  [11:0] p5985cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p8843_sel_1;  // int32
  reg  p5492_sel_2;
  reg  [11:0] p5491cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9064_sel_1;  // int32
  reg  p5380_sel_2;
  reg  [11:0] p5379cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9863_sel_1;  // int32
  reg  p4886_sel_2;
  reg  [11:0] p4885cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9727_sel_1;  // int32
  reg  p4774_sel_2;
  reg  [11:0] p4773cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p9013_sel_1;  // int32
  reg  p4280_sel_2;
  reg  [11:0] p4279cont_bits_22_cont_bits_22;  // boolean [12]
  reg signed [31:0] p3892_sel_1;  // int32
  reg signed [31:0] p9166_sel_1;  // int32
  reg  p7769_sel_2;
  reg  [11:0] p7768cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9540_sel_1;  // int32
  reg  p7410_sel_2;
  reg  [11:0] p7409cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9132_sel_1;  // int32
  reg  p7131_sel_2;
  reg  [11:0] p7130cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9421_sel_1;  // int32
  reg  p6772_sel_2;
  reg  [11:0] p6771cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9710_sel_1;  // int32
  reg  p6524_sel_2;
  reg  [11:0] p6523cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9642_sel_1;  // int32
  reg  p6166_sel_2;
  reg  [11:0] p6165cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9506_sel_1;  // int32
  reg  p5918_sel_2;
  reg  [11:0] p5917cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p8979_sel_1;  // int32
  reg  p5560_sel_2;
  reg  [11:0] p5559cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9591_sel_1;  // int32
  reg  p5312_sel_2;
  reg  [11:0] p5311cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9778_sel_1;  // int32
  reg  p4954_sel_2;
  reg  [11:0] p4953cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p8758_sel_1;  // int32
  reg  p4706_sel_2;
  reg  [11:0] p4705cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p9608_sel_1;  // int32
  reg  p4348_sel_2;
  reg  [11:0] p4347cont_bits_21_cont_bits_21;  // boolean [12]
  reg signed [31:0] p3093_sel_1;  // int32
  reg signed [31:0] p8588_sel_1;  // int32
  reg  p7820_sel_2;
  reg  [11:0] p7819cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8554_sel_1;  // int32
  reg  p7359_sel_2;
  reg  [11:0] p7358cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8367_sel_1;  // int32
  reg  p7182_sel_2;
  reg  [11:0] p7181cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8384_sel_1;  // int32
  reg  p6721_sel_2;
  reg  [11:0] p6720cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p9846_sel_1;  // int32
  reg  p6575_sel_2;
  reg  [11:0] p6574cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8571_sel_1;  // int32
  reg  p6115_sel_2;
  reg  [11:0] p6114cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8656_sel_1;  // int32
  reg  p5969_sel_2;
  reg  [11:0] p5968cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p9251_sel_1;  // int32
  reg  p5509_sel_2;
  reg  [11:0] p5508cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p9081_sel_1;  // int32
  reg  p5363_sel_2;
  reg  [11:0] p5362cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8350_sel_1;  // int32
  reg  p4903_sel_2;
  reg  [11:0] p4902cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8605_sel_1;  // int32
  reg  p4757_sel_2;
  reg  [11:0] p4756cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p8299_sel_1;  // int32
  reg  p4297_sel_2;
  reg  [11:0] p4296cont_bits_12_cont_bits_12;  // boolean [12]
  reg signed [31:0] p3807_sel_1;  // int32
  reg signed [31:0] p9625_sel_1;  // int32
  reg  p7735_sel_2;
  reg  [11:0] p7734cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9404_sel_1;  // int32
  reg  p7444_sel_2;
  reg  [11:0] p7443cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p8962_sel_1;  // int32
  reg  p7097_sel_2;
  reg  [11:0] p7096cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9455_sel_1;  // int32
  reg  p6806_sel_2;
  reg  [11:0] p6805cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p8707_sel_1;  // int32
  reg  p6490_sel_2;
  reg  [11:0] p6489cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9047_sel_1;  // int32
  reg  p6200_sel_2;
  reg  [11:0] p6199cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9557_sel_1;  // int32
  reg  p5884_sel_2;
  reg  [11:0] p5883cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9387_sel_1;  // int32
  reg  p5594_sel_2;
  reg  [11:0] p5593cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9829_sel_1;  // int32
  reg  p5278_sel_2;
  reg  [11:0] p5277cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p8520_sel_1;  // int32
  reg  p4988_sel_2;
  reg  [11:0] p4987cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9472_sel_1;  // int32
  reg  p4672_sel_2;
  reg  [11:0] p4671cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p9438_sel_1;  // int32
  reg  p4382_sel_2;
  reg  [11:0] p4381cont_bits_cont_bits;  // boolean [12]
  reg signed [31:0] p2787_sel_1;  // int32
  reg  p723_sel_1;
  reg  p708_sel_2;
  reg signed [31:0] p2175_sel_1;  // int32
  reg signed [31:0] p1325_sel_1;  // int32
  reg signed [31:0] p1597_sel_1;  // int32
  reg signed [31:0] p1087_sel_1;  // int32
  reg signed [31:0] p1903_sel_1;  // int32
  reg signed [31:0] p2532_sel_1;  // int32
  reg signed [31:0] p1563_sel_1;  // int32
  reg signed [31:0] p2294_sel_1;  // int32
  reg signed [31:0] p3399_sel_1;  // int32
  reg signed [31:0] p2889_sel_1;  // int32
  reg signed [31:0] p3484_sel_1;  // int32
  reg signed [31:0] p4096_sel_1;  // int32
  reg signed [31:0] p3875_sel_1;  // int32
  reg signed [31:0] p3076_sel_1;  // int32
  reg signed [31:0] p3773_sel_1;  // int32
  reg signed [31:0] p2753_sel_1;  // int32
  reg  p691_sel_1;
  reg  p676_sel_2;
  reg signed [31:0] p2141_sel_1;  // int32
  reg signed [31:0] p1359_sel_1;  // int32
  reg signed [31:0] p1580_sel_1;  // int32
  reg signed [31:0] p1155_sel_1;  // int32
  reg signed [31:0] p1920_sel_1;  // int32
  reg signed [31:0] p2430_sel_1;  // int32
  reg signed [31:0] p1529_sel_1;  // int32
  reg signed [31:0] p2277_sel_1;  // int32
  reg signed [31:0] p3348_sel_1;  // int32
  reg signed [31:0] p2923_sel_1;  // int32
  reg signed [31:0] p3467_sel_1;  // int32
  reg signed [31:0] p4079_sel_1;  // int32
  reg signed [31:0] p3858_sel_1;  // int32
  reg signed [31:0] p3059_sel_1;  // int32
  reg signed [31:0] p3790_sel_1;  // int32
  reg signed [31:0] p2770_sel_1;  // int32
  reg  p599_sel_1;
  reg  p584_sel_2;
  reg signed [31:0] p2124_sel_1;  // int32
  reg signed [31:0] p1308_sel_1;  // int32
  reg signed [31:0] p1614_sel_1;  // int32
  reg signed [31:0] p1138_sel_1;  // int32
  reg signed [31:0] p1937_sel_1;  // int32
  reg signed [31:0] p2447_sel_1;  // int32
  reg signed [31:0] p1512_sel_1;  // int32
  reg signed [31:0] p2243_sel_1;  // int32
  reg signed [31:0] p3365_sel_1;  // int32
  reg signed [31:0] p2906_sel_1;  // int32
  reg signed [31:0] p3450_sel_1;  // int32
  reg signed [31:0] p4062_sel_1;  // int32
  reg signed [31:0] p3841_sel_1;  // int32
  reg signed [31:0] p3042_sel_1;  // int32
  reg signed [31:0] p3722_sel_1;  // int32
  reg signed [31:0] p2719_sel_1;  // int32
  reg  p542_sel_1;
  reg  p527_sel_2;
  reg signed [31:0] p2107_sel_1;  // int32
  reg signed [31:0] p1291_sel_1;  // int32
  reg signed [31:0] p1631_sel_1;  // int32
  reg signed [31:0] p1121_sel_1;  // int32
  reg signed [31:0] p1886_sel_1;  // int32
  reg signed [31:0] p2498_sel_1;  // int32
  reg signed [31:0] p1495_sel_1;  // int32
  reg signed [31:0] p2260_sel_1;  // int32
  reg signed [31:0] p3331_sel_1;  // int32
  reg signed [31:0] p2940_sel_1;  // int32
  reg signed [31:0] p3518_sel_1;  // int32
  reg signed [31:0] p4045_sel_1;  // int32
  reg signed [31:0] p3824_sel_1;  // int32
  reg signed [31:0] p3110_sel_1;  // int32
  reg signed [31:0] p3739_sel_1;  // int32
  reg signed [31:0] p2668_sel_1;  // int32
  reg  p511_sel_1;
  reg  p496_sel_2;
  reg signed [31:0] p2090_sel_1;  // int32
  reg signed [31:0] p1274_sel_1;  // int32
  reg signed [31:0] p1767_sel_1;  // int32
  reg signed [31:0] p1104_sel_1;  // int32
  reg signed [31:0] p1954_sel_1;  // int32
  reg signed [31:0] p2481_sel_1;  // int32
  reg signed [31:0] p1461_sel_1;  // int32
  reg signed [31:0] p2226_sel_1;  // int32
  reg signed [31:0] p3314_sel_1;  // int32
  reg signed [31:0] p2974_sel_1;  // int32
  reg signed [31:0] p3416_sel_1;  // int32
  reg signed [31:0] p4028_sel_1;  // int32
  reg signed [31:0] p3909_sel_1;  // int32
  reg signed [31:0] p3195_sel_1;  // int32
  reg signed [31:0] p3756_sel_1;  // int32
  reg signed [31:0] p2685_sel_1;  // int32
  reg  p480_sel_1;
  reg  p465_sel_2;
  reg signed [31:0] p2073_sel_1;  // int32
  reg signed [31:0] p1257_sel_1;  // int32
  reg signed [31:0] p1682_sel_1;  // int32
  reg signed [31:0] p1070_sel_1;  // int32
  reg signed [31:0] p1818_sel_1;  // int32
  reg signed [31:0] p2464_sel_1;  // int32
  reg signed [31:0] p1444_sel_1;  // int32
  reg signed [31:0] p2209_sel_1;  // int32
  reg signed [31:0] p3297_sel_1;  // int32
  reg signed [31:0] p2991_sel_1;  // int32
  reg signed [31:0] p3433_sel_1;  // int32
  reg signed [31:0] p4215_sel_1;  // int32
  reg signed [31:0] p4011_sel_1;  // int32
  reg signed [31:0] p3178_sel_1;  // int32
  reg signed [31:0] p3705_sel_1;  // int32
  reg signed [31:0] p2702_sel_1;  // int32
  reg  p449_sel_1;
  reg  p434_sel_2;
  reg signed [31:0] p2056_sel_1;  // int32
  reg signed [31:0] p1223_sel_1;  // int32
  reg signed [31:0] p1665_sel_1;  // int32
  reg signed [31:0] p1019_sel_1;  // int32
  reg signed [31:0] p1869_sel_1;  // int32
  reg signed [31:0] p2396_sel_1;  // int32
  reg signed [31:0] p1478_sel_1;  // int32
  reg signed [31:0] p2192_sel_1;  // int32
  reg signed [31:0] p3280_sel_1;  // int32
  reg signed [31:0] p2872_sel_1;  // int32
  reg signed [31:0] p3603_sel_1;  // int32
  reg signed [31:0] p4198_sel_1;  // int32
  reg signed [31:0] p3994_sel_1;  // int32
  reg signed [31:0] p3161_sel_1;  // int32
  reg signed [31:0] p3688_sel_1;  // int32
  reg signed [31:0] p2736_sel_1;  // int32
  reg  p418_sel_1;
  reg  p403_sel_2;
  reg signed [31:0] p2039_sel_1;  // int32
  reg signed [31:0] p1240_sel_1;  // int32
  reg signed [31:0] p1750_sel_1;  // int32
  reg signed [31:0] p1036_sel_1;  // int32
  reg signed [31:0] p1835_sel_1;  // int32
  reg signed [31:0] p2413_sel_1;  // int32
  reg signed [31:0] p1427_sel_1;  // int32
  reg signed [31:0] p2362_sel_1;  // int32
  reg signed [31:0] p3246_sel_1;  // int32
  reg signed [31:0] p2855_sel_1;  // int32
  reg signed [31:0] p3586_sel_1;  // int32
  reg signed [31:0] p4164_sel_1;  // int32
  reg signed [31:0] p3977_sel_1;  // int32
  reg signed [31:0] p3144_sel_1;  // int32
  reg signed [31:0] p3671_sel_1;  // int32
  reg signed [31:0] p2634_sel_1;  // int32
  reg  p387_sel_1;
  reg  p372_sel_2;
  reg signed [31:0] p2005_sel_1;  // int32
  reg signed [31:0] p1189_sel_1;  // int32
  reg signed [31:0] p1733_sel_1;  // int32
  reg signed [31:0] p1053_sel_1;  // int32
  reg signed [31:0] p1852_sel_1;  // int32
  reg signed [31:0] p2549_sel_1;  // int32
  reg signed [31:0] p1376_sel_1;  // int32
  reg signed [31:0] p2379_sel_1;  // int32
  reg signed [31:0] p3263_sel_1;  // int32
  reg signed [31:0] p2838_sel_1;  // int32
  reg signed [31:0] p3569_sel_1;  // int32
  reg signed [31:0] p4181_sel_1;  // int32
  reg signed [31:0] p3960_sel_1;  // int32
  reg signed [31:0] p3127_sel_1;  // int32
  reg signed [31:0] p3654_sel_1;  // int32
  reg signed [31:0] p2617_sel_1;  // int32
  reg  p356_sel_1;
  reg  p341_sel_2;
  reg signed [31:0] p2022_sel_1;  // int32
  reg signed [31:0] p1206_sel_1;  // int32
  reg signed [31:0] p1716_sel_1;  // int32
  reg signed [31:0] p985_sel_1;  // int32
  reg signed [31:0] p1801_sel_1;  // int32
  reg signed [31:0] p2583_sel_1;  // int32
  reg signed [31:0] p1393_sel_1;  // int32
  reg signed [31:0] p2328_sel_1;  // int32
  reg signed [31:0] p3229_sel_1;  // int32
  reg signed [31:0] p2821_sel_1;  // int32
  reg signed [31:0] p3552_sel_1;  // int32
  reg signed [31:0] p4130_sel_1;  // int32
  reg signed [31:0] p3943_sel_1;  // int32
  reg signed [31:0] p3025_sel_1;  // int32
  reg signed [31:0] p3620_sel_1;  // int32
  reg signed [31:0] p2651_sel_1;  // int32
  reg  p325_sel_1;
  reg  p310_sel_2;
  reg signed [31:0] p1988_sel_1;  // int32
  reg signed [31:0] p1172_sel_1;  // int32
  reg signed [31:0] p1699_sel_1;  // int32
  reg signed [31:0] p1002_sel_1;  // int32
  reg signed [31:0] p1784_sel_1;  // int32
  reg signed [31:0] p2566_sel_1;  // int32
  reg signed [31:0] p1410_sel_1;  // int32
  reg signed [31:0] p2345_sel_1;  // int32
  reg signed [31:0] p3212_sel_1;  // int32
  reg signed [31:0] p2804_sel_1;  // int32
  reg signed [31:0] p3535_sel_1;  // int32
  reg signed [31:0] p4147_sel_1;  // int32
  reg signed [31:0] p3926_sel_1;  // int32
  reg signed [31:0] p3008_sel_1;  // int32
  reg signed [31:0] p3637_sel_1;  // int32
  reg signed [31:0] p2600_sel_1;  // int32
  reg  p294_sel_1;
  reg  p279_sel_2;
  reg  [15:0] p7952payload_payload;  // boolean [16]
  reg  [15:0] p7596payload_payload;  // boolean [16]
  reg  [15:0] p7278payload_payload;  // boolean [16]
  reg  [15:0] p6958payload_payload;  // boolean [16]
  reg  [15:0] p707payload_payload;  // boolean [16]
  reg  [15:0] p644payload_payload;  // boolean [16]
  reg  [15:0] p583payload_payload;  // boolean [16]
  reg  [15:0] p526payload_payload;  // boolean [16]
  reg  [15:0] p495payload_payload;  // boolean [16]
  reg  [15:0] p464payload_payload;  // boolean [16]
  reg  [15:0] p433payload_payload;  // boolean [16]
  reg  [15:0] p402payload_payload;  // boolean [16]
  reg  [15:0] p371payload_payload;  // boolean [16]
  reg  [15:0] p340payload_payload;  // boolean [16]
  reg  [15:0] p309payload_payload;  // boolean [16]
  reg  [15:0] p174tmp_tmp;  // boolean [16]
  reg signed [31:0] p8224_sel_1;  // int32
  reg  p81_tmp;
  reg  p84_tmp;
  reg  p90_tmp;
  reg  p93_tmp;
  reg  p96_tmp;
  reg  p99_tmp;
  reg signed [31:0] p8080_sel_1;  // int32
  reg signed [31:0] p8032_sel_1;  // int32
  reg signed [31:0] p8128_sel_1;  // int32
  reg  p7885_sel_1;
  reg  p7870_sel_2;
  reg signed [31:0] p7984_sel_1;  // int32
  reg signed [31:0] p8016_sel_1;  // int32
  reg  p7309_sel_1;
  reg  p7294_sel_2;
  reg signed [31:0] p8112_sel_1;  // int32
  reg signed [31:0] p8048_sel_1;  // int32
  reg  p7247_sel_1;
  reg  p7232_sel_2;
  reg signed [31:0] p8208_sel_1;  // int32
  reg signed [31:0] p8000_sel_1;  // int32
  reg  p6671_sel_1;
  reg  p6656_sel_2;
  reg signed [31:0] p8160_sel_1;  // int32
  reg signed [31:0] p8176_sel_1;  // int32
  reg  p6640_sel_1;
  reg  p6625_sel_2;
  reg  p6065_sel_1;
  reg  p6050_sel_2;
  reg signed [31:0] p8144_sel_1;  // int32
  reg  p6034_sel_1;
  reg  p6019_sel_2;
  reg  p5459_sel_1;
  reg  p5444_sel_2;
  reg  p5428_sel_1;
  reg  p5413_sel_2;
  reg signed [31:0] p8096_sel_1;  // int32
  reg signed [31:0] p8192_sel_1;  // int32
  reg signed [31:0] p8064_sel_1;  // int32
  reg  p4853_sel_1;
  reg  p4838_sel_2;
  reg  p4822_sel_1;
  reg  p4807_sel_2;
  reg  p4247_sel_1;
  reg  p4232_sel_2;
  reg  p952_sel_1;
  reg  p937_sel_2;
  reg  p753_sel_1;
  reg  p738_sel_2;
  reg  p661_sel_1;
  reg  p646_sel_2;
  reg  p629_sel_1;
  reg  p614_sel_2;
  reg  [15:0] p7597payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p7277payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p6959payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p6655payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p6352payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p6049payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p5746payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p5443payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p5140payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p4837payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p4534payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p4231payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p936payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p706payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p645payload_debug_payload_debug;  // boolean [16]
  reg  [15:0] p566tmp_tmp;  // boolean [16]


  assign is_SPI_MNGR_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : is_SPI_MNGR_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_reg_ctrl_delay_out <= is_SPI_MNGR_reg_ctrl_const_out;
        end
      end
    end

  assign is_SPI_MNGR_reg_Initial_Val_out = state_type_is_SPI_MNGR_IN_on;

  assign is_SPI_MNGR = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_1 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_2 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_3 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_4 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_5 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_6 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign cnt_clk_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : cnt_clk_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        cnt_clk_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          cnt_clk_reg_ctrl_delay_out <= cnt_clk_reg_ctrl_const_out;
        end
      end
    end

  assign cnt_clk_reg_Initial_Val_out = 16'b0000000000000001;

  assign cnt_clk = 16'd1;

  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_3'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_2'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v3_1'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v2_2'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v2_1'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v1_2'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // During 'toBsend_v1_1'
  // Entry 'sender_pre_SCK'
  // Transition
  assign s = 16'd1;
  assign cnt_clk_1 = 16'd1;

  // Transition
  // Entry 'sender_at_SCK'
  // Transition
  // Transition
  // During 'sender_pre_SCK'
  // Entry 'sender_at_SCK1'
  // Transition
  assign s_1 = 16'd1;
  // Transition
  // Transition
  // Transition
  // Transition
  // Entry 'sender_at_SCK'
  // Transition
  assign s_2 = 16'd1;
  assign cnt_clk_2 = 16'd1;

  assign cnt_clk_3 = 16'd1;

  // Entry 'toBsend_v4_1'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'off'
  // Transition
  assign s_3 = 16'd1;
  // Transition
  // Entry 'on'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'NOP1'
  // Entry 'sender_at_SCK1'
  // Transition
  // Entry 'NOP'
  // Transition
  assign s_4 = 16'd1;
  assign cnt_clk_4 = 16'd1;

  assign is_SPI_MNGR_7 = state_type_is_SPI_MNGR_IN_sender_at_SCK;

  assign is_SPI_MNGR_8 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_9 = state_type_is_SPI_MNGR_IN_NOP1;

  assign is_SPI_MNGR_10 = state_type_is_SPI_MNGR_IN_sender_at_SCK1;

  assign is_SPI_MNGR_11 = state_type_is_SPI_MNGR_IN_sender_at_SCK;

  assign cnt_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : cnt_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        cnt_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          cnt_reg_ctrl_delay_out <= cnt_reg_ctrl_const_out;
        end
      end
    end

  assign cnt_reg_Initial_Val_out = 16'b0000000000000001;

  // Transition
  // Transition
  // Transition
  // Transition
  // During 'sender_at_SCK1'
  // Entry 'NOP'
  // Transition
  // Entry 'sender_pre_SCK'
  assign s_5 = 16'd1;
  assign cnt = 16'd1;

  assign is_SPI_MNGR_12 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign is_SPI_MNGR_13 = state_type_is_SPI_MNGR_IN_NOP;

  assign is_SPI_MNGR_14 = state_type_is_SPI_MNGR_IN_off;

  assign selector_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : selector_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        selector_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          selector_reg_ctrl_delay_out <= selector_reg_ctrl_const_out;
        end
      end
    end

  assign selector_reg_Initial_Val_out = 16'b0000000000000001;

  assign selector = 16'd1;

  // Entry 'toBsend_v4_1'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  assign s_6 = 16'd1;
  assign is_SPI_MNGR_15 = state_type_is_SPI_MNGR_IN_toBsend_v4_1;

  assign is_SPI_MNGR_16 = state_type_is_SPI_MNGR_IN_toBsend_v3_3;

  assign is_SPI_MNGR_17 = state_type_is_SPI_MNGR_IN_toBsend_v3_2;

  assign is_SPI_MNGR_18 = state_type_is_SPI_MNGR_IN_toBsend_v3_1;

  assign is_SPI_MNGR_19 = state_type_is_SPI_MNGR_IN_toBsend_v2_2;

  assign is_SPI_MNGR_20 = state_type_is_SPI_MNGR_IN_toBsend_v2_1;

  assign is_SPI_MNGR_21 = state_type_is_SPI_MNGR_IN_toBsend_v1_2;

  assign is_SPI_MNGR_22 = state_type_is_SPI_MNGR_IN_toBsend_v1_1;

  assign is_SPI_MNGR_23 = state_type_is_SPI_MNGR_IN_on;

  assign is_SPI_MNGR_24 = state_type_is_SPI_MNGR_IN_toBsend_v4_1;

  assign is_SPI_MNGR_25 = state_type_is_SPI_MNGR_IN_toBsend_v3_3;

  assign is_SPI_MNGR_26 = state_type_is_SPI_MNGR_IN_toBsend_v3_2;

  assign is_SPI_MNGR_27 = state_type_is_SPI_MNGR_IN_toBsend_v3_1;

  assign is_SPI_MNGR_28 = state_type_is_SPI_MNGR_IN_toBsend_v2_2;

  assign is_SPI_MNGR_29 = state_type_is_SPI_MNGR_IN_toBsend_v2_1;

  assign is_SPI_MNGR_30 = state_type_is_SPI_MNGR_IN_toBsend_v1_2;

  assign is_SPI_MNGR_31 = state_type_is_SPI_MNGR_IN_toBsend_v1_1;

  assign is_SPI_MNGR_32 = state_type_is_SPI_MNGR_IN_NOP1;

  assign is_SPI_MNGR_33 = state_type_is_SPI_MNGR_IN_NOP;

  assign is_SPI_MNGR_34 = state_type_is_SPI_MNGR_IN_sender_at_SCK1;

  assign is_SPI_MNGR_35 = state_type_is_SPI_MNGR_IN_sender_pre_SCK;

  assign tmp = (s_7 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_33);

  assign tmp_1 = (s_8 == 1'b0 ? tmp :
              is_SPI_MNGR_34);

  assign tmp_3 = tmp_2 == 16'd7;

  assign tmp_4 = (tmp_3 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_24);

  assign tmp_5 = tmp_2 == 16'd8;

  assign tmp_6 = (tmp_5 == 1'b0 ? tmp_4 :
              is_SPI_MNGR_25);

  assign tmp_7 = tmp_2 == 16'd6;

  assign tmp_8 = (tmp_7 == 1'b0 ? tmp_6 :
              is_SPI_MNGR_26);

  assign tmp_9 = tmp_2 == 16'd5;

  assign tmp_10 = (tmp_9 == 1'b0 ? tmp_8 :
              is_SPI_MNGR_27);

  assign tmp_11 = tmp_2 == 16'd4;

  assign tmp_12 = (tmp_11 == 1'b0 ? tmp_10 :
              is_SPI_MNGR_28);

  assign tmp_13 = tmp_2 == 16'd3;

  assign tmp_14 = (tmp_13 == 1'b0 ? tmp_12 :
              is_SPI_MNGR_29);

  assign tmp_15 = tmp_2 == 16'd2;

  assign tmp_16 = (tmp_15 == 1'b0 ? tmp_14 :
              is_SPI_MNGR_30);

  assign tmp_17 = tmp_2 == 16'd1;

  assign tmp_18 = (tmp_17 == 1'b0 ? tmp_16 :
              is_SPI_MNGR_31);

  assign tmp_19 = (s_9 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_23);

  assign tmp_20 = (s_10 == 1'b0 ? tmp_19 :
              tmp_18);

  assign tmp_21 = (s_11 == 1'b0 ? is_SPI_MNGR_36 :
              tmp_20);

  assign tmp_22 = (s_12 == 1'b0 ? tmp_21 :
              is_SPI_MNGR_32);

  assign s_13 = selector_1 == 16'd7;

  assign tmp_23 = (s_13 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_15);

  assign s_14 = selector_1 == 16'd8;

  assign tmp_24 = (s_14 == 1'b0 ? tmp_23 :
              is_SPI_MNGR_16);

  assign s_15 = selector_1 == 16'd6;

  assign tmp_25 = (s_15 == 1'b0 ? tmp_24 :
              is_SPI_MNGR_17);

  assign s_16 = selector_1 == 16'd5;

  assign tmp_26 = (s_16 == 1'b0 ? tmp_25 :
              is_SPI_MNGR_18);

  assign s_17 = selector_1 == 16'd4;

  assign tmp_27 = (s_17 == 1'b0 ? tmp_26 :
              is_SPI_MNGR_19);

  assign s_18 = selector_1 == 16'd3;

  assign tmp_28 = (s_18 == 1'b0 ? tmp_27 :
              is_SPI_MNGR_20);

  assign s_19 = selector_1 == 16'd2;

  assign tmp_29 = (s_19 == 1'b0 ? tmp_28 :
              is_SPI_MNGR_21);

  assign adder_1 = {1'b0, selector_1};
  assign adder_2 = {1'b0, s_6};
  assign adder_add_temp = adder_1 + adder_2;
  assign tmp_2 = (adder_add_temp[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp[15:0]);

  assign s_9 = selector_1 == 16'd8;

  assign tmp_30 = (s_9 == 1'b0 ? selector_1 :
              selector);

  assign s_10 = selector_1 < 16'd8;

  assign tmp_31 = (s_10 == 1'b0 ? tmp_30 :
              tmp_2);

  assign tmp_32 = (s_11 == 1'b0 ? selector_1 :
              tmp_31);

  assign tmp_33 = (s_12 == 1'b0 ? tmp_32 :
              selector_1);

  always @(is_SPI_MNGR_36, selector_1, tmp_33) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p105_tmp = tmp_33;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p105_tmp = selector_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p105_tmp = selector_1;
        end
      default :
        begin
          p105_tmp = selector_1;
        end
    endcase
    tmp_34 = p105_tmp;
  end

  always @(posedge clk)
    begin : selector_reg_process
      if (rst == 1'b1) begin
        selector_reg_out <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          selector_reg_out <= tmp_34;
        end
      end
    end

  assign selector_1 = (selector_reg_ctrl_delay_out == 1'b0 ? selector_reg_Initial_Val_out :
              selector_reg_out);

  assign s_20 = selector_1 == 16'd1;

  assign tmp_35 = (s_20 == 1'b0 ? tmp_29 :
              is_SPI_MNGR_22);

  assign adder_4 = {1'b0, cnt_1};
  assign adder_5 = {1'b0, s_5};
  assign adder_add_temp_1 = adder_4 + adder_5;
  assign tmp_36 = (adder_add_temp_1[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_1[15:0]);

  assign tmp_37 = (s_21 == 1'b0 ? tmp_36 :
              cnt);

  assign tmp_38 = (s_22 == 1'b0 ? cnt_1 :
              tmp_37);

  always @(cnt_1, is_SPI_MNGR_36, tmp_38) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p102_tmp = tmp_38;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p102_tmp = cnt_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p102_tmp = cnt_1;
        end
      default :
        begin
          p102_tmp = cnt_1;
        end
    endcase
    tmp_39 = p102_tmp;
  end

  always @(posedge clk)
    begin : cnt_reg_process
      if (rst == 1'b1) begin
        cnt_reg_out <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cnt_reg_out <= tmp_39;
        end
      end
    end

  assign cnt_1 = (cnt_reg_ctrl_delay_out == 1'b0 ? cnt_reg_Initial_Val_out :
              cnt_reg_out);

  assign s_21 = cnt_1 >= 16'd16;

  assign tmp_40 = (s_21 == 1'b0 ? is_SPI_MNGR_12 :
              is_SPI_MNGR_13);

  assign tmp_41 = (s_23 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_11);

  assign tmp_42 = (s_22 == 1'b0 ? tmp_41 :
              tmp_40);

  assign tmp_43 = (s_24 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_9);

  assign tmp_44 = (s_25 == 1'b0 ? tmp_43 :
              is_SPI_MNGR_10);

  assign tmp_45 = (s_26 == 1'b0 ? is_SPI_MNGR_36 :
              is_SPI_MNGR_7);

  assign adder_7 = {1'b0, cnt_clk_5};
  assign adder_8 = {1'b0, s_4};
  assign adder_add_temp_2 = adder_7 + adder_8;
  assign tmp_46 = (adder_add_temp_2[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_2[15:0]);

  assign s_7 = cnt_clk_5 <= 16'd2;

  assign tmp_47 = (s_7 == 1'b0 ? cnt_clk_5 :
              tmp_46);

  assign s_8 = cnt_clk_5 > 16'd2;

  assign tmp_48 = (s_8 == 1'b0 ? tmp_47 :
              cnt_clk_4);

  assign adder_10 = {1'b0, cnt_clk_5};
  assign adder_11 = {1'b0, s_3};
  assign adder_add_temp_3 = adder_10 + adder_11;
  assign tmp_49 = (adder_add_temp_3[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_3[15:0]);

  assign s_11 = cnt_clk_5 > 16'd6;

  assign tmp_50 = (s_11 == 1'b0 ? cnt_clk_5 :
              cnt_clk_3);

  assign s_12 = cnt_clk_5 <= 16'd6;

  assign tmp_51 = (s_12 == 1'b0 ? tmp_50 :
              tmp_49);

  assign adder_13 = {1'b0, cnt_clk_5};
  assign adder_14 = {1'b0, s_2};
  assign adder_add_temp_4 = adder_13 + adder_14;
  assign tmp_52 = (adder_add_temp_4[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_4[15:0]);

  assign s_23 = cnt_clk_5 <= 16'd2;

  assign tmp_53 = (s_23 == 1'b0 ? cnt_clk_5 :
              tmp_52);

  assign s_22 = cnt_clk_5 > 16'd2;

  assign tmp_54 = (s_22 == 1'b0 ? tmp_53 :
              cnt_clk_2);

  assign adder_16 = {1'b0, cnt_clk_5};
  assign adder_17 = {1'b0, s_1};
  assign adder_add_temp_5 = adder_16 + adder_17;
  assign tmp_55 = (adder_add_temp_5[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_5[15:0]);

  assign s_24 = cnt_clk_5 > 16'd2;

  assign tmp_56 = (s_24 == 1'b0 ? cnt_clk_5 :
              cnt_clk_1);

  assign s_25 = cnt_clk_5 <= 16'd2;

  assign tmp_57 = (s_25 == 1'b0 ? tmp_56 :
              tmp_55);

  assign adder_19 = {1'b0, cnt_clk_5};
  assign adder_20 = {1'b0, s};
  assign adder_add_temp_6 = adder_19 + adder_20;
  assign tmp_58 = (adder_add_temp_6[16] != 1'b0 ? 16'b1111111111111111 :
              adder_add_temp_6[15:0]);

  assign s_26 = cnt_clk_5 > 16'd2;

  assign tmp_59 = (s_26 == 1'b0 ? cnt_clk_5 :
              cnt_clk);

  assign tmp_60 = (s_27 == 1'b0 ? tmp_59 :
              tmp_58);

  always @(cnt_clk_5, is_SPI_MNGR_36, tmp_48, tmp_51, tmp_54, tmp_57, tmp_60) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p87_tmp = tmp_48;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p87_tmp = tmp_51;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p87_tmp = tmp_54;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p87_tmp = tmp_57;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p87_tmp = tmp_60;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p87_tmp = cnt_clk_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p87_tmp = cnt_clk_5;
        end
      default :
        begin
          p87_tmp = cnt_clk_5;
        end
    endcase
    tmp_61 = p87_tmp;
  end

  always @(posedge clk)
    begin : cnt_clk_reg_process
      if (rst == 1'b1) begin
        cnt_clk_reg_out <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          cnt_clk_reg_out <= tmp_61;
        end
      end
    end

  assign cnt_clk_5 = (cnt_clk_reg_ctrl_delay_out == 1'b0 ? cnt_clk_reg_Initial_Val_out :
              cnt_clk_reg_out);

  assign s_27 = cnt_clk_5 <= 16'd2;

  assign tmp_62 = (s_27 == 1'b0 ? tmp_45 :
              is_SPI_MNGR_8);

  always @(is_SPI_MNGR, is_SPI_MNGR_1, is_SPI_MNGR_14, is_SPI_MNGR_2, is_SPI_MNGR_3,
       is_SPI_MNGR_35, is_SPI_MNGR_36, is_SPI_MNGR_4, is_SPI_MNGR_5,
       is_SPI_MNGR_6, tmp_1, tmp_22, tmp_35, tmp_42, tmp_44, tmp_62) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p54_tmp = tmp_1;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p54_tmp = tmp_22;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p54_tmp = tmp_35;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p54_tmp = is_SPI_MNGR_14;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p54_tmp = tmp_42;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p54_tmp = tmp_44;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p54_tmp = tmp_62;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p54_tmp = is_SPI_MNGR_6;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p54_tmp = is_SPI_MNGR_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p54_tmp = is_SPI_MNGR_4;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p54_tmp = is_SPI_MNGR_3;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p54_tmp = is_SPI_MNGR_2;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p54_tmp = is_SPI_MNGR_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p54_tmp = is_SPI_MNGR;
        end
      default :
        begin
          p54_tmp = is_SPI_MNGR_35;
        end
    endcase
    tmp_63 = p54_tmp;
  end

  always @(posedge clk)
    begin : is_SPI_MNGR_reg_process
      if (rst == 1'b1) begin
        is_SPI_MNGR_reg_out <= state_type_is_SPI_MNGR_IN_NOP;
      end
      else begin
        if (enb) begin
          is_SPI_MNGR_reg_out <= tmp_63;
        end
      end
    end

  assign is_SPI_MNGR_36 = (is_SPI_MNGR_reg_ctrl_delay_out == 1'b0 ? is_SPI_MNGR_reg_Initial_Val_out :
              is_SPI_MNGR_reg_out);

  assign sel = 1'b0;

  assign sel_1 = 1'b0;

  assign sel_2 = 1'b0;

  assign sel_3 = 1'b0;

  assign sel_4 = 1'b0;

  assign sel_5 = 1'b0;

  assign sel_6 = 1'b0;

  assign sel_7 = 1'b0;

  assign sel_8 = 1'b0;

  assign sel_9 = 1'b0;

  assign sel_10 = 1'b0;

  // Entry 'toBsend_v3_3'
  // Transition
  assign tmp_64 = 1'b0;
  // Entry 'toBsend_v3_2'
  // Transition
  assign tmp_65 = 1'b1;
  assign sel_1_1 = (s_14 == 1'b0 ? tmp_64 :
              tmp_65);

  // Entry 'toBsend_v3_1'
  // Transition
  assign tmp_66 = 1'b1;
  assign sel_1_2 = (s_15 == 1'b0 ? sel_1_1 :
              tmp_66);

  // Entry 'toBsend_v2_2'
  // Transition
  assign tmp_67 = 1'b0;
  assign sel_1_3 = (s_16 == 1'b0 ? sel_1_2 :
              tmp_67);

  // Entry 'toBsend_v2_1'
  // Transition
  assign tmp_68 = 1'b1;
  assign sel_1_4 = (s_17 == 1'b0 ? sel_1_3 :
              tmp_68);

  // Entry 'toBsend_v1_2'
  // Transition
  assign tmp_69 = 1'b0;
  assign sel_1_5 = (s_18 == 1'b0 ? sel_1_4 :
              tmp_69);

  // Entry 'toBsend_v1_1'
  // Transition
  assign tmp_70 = 1'b1;
  assign sel_1_6 = (s_19 == 1'b0 ? sel_1_5 :
              tmp_70);

  // Transition
  // Transition
  // During 'sender_at_SCK'
  // Entry 'off'
  // Transition
  // During 'on'
  assign tmp_71 = 1'b0;
  assign sel_1_7 = (s_20 == 1'b0 ? sel_1_6 :
              tmp_71);

  assign tmp_72 = 1'b0;

  // Entry 'toBsend_v3_2'
  // Transition
  assign tmp_73 = 1'b1;
  assign sel_1_8 = (tmp_5 == 1'b0 ? tmp_72 :
              tmp_73);

  // Entry 'toBsend_v3_1'
  // Transition
  assign tmp_74 = 1'b1;
  assign sel_1_9 = (tmp_7 == 1'b0 ? sel_1_8 :
              tmp_74);

  // Entry 'toBsend_v2_2'
  // Transition
  assign tmp_75 = 1'b0;
  assign sel_1_10 = (tmp_9 == 1'b0 ? sel_1_9 :
              tmp_75);

  // Entry 'toBsend_v2_1'
  // Transition
  assign tmp_76 = 1'b1;
  assign sel_1_11 = (tmp_11 == 1'b0 ? sel_1_10 :
              tmp_76);

  // Entry 'toBsend_v1_2'
  // Transition
  assign tmp_77 = 1'b0;
  assign sel_1_12 = (tmp_13 == 1'b0 ? sel_1_11 :
              tmp_77);

  // Entry 'toBsend_v1_1'
  // Transition
  assign tmp_78 = 1'b1;
  assign sel_1_13 = (tmp_15 == 1'b0 ? sel_1_12 :
              tmp_78);

  // Transition
  assign tmp_79 = 1'b0;
  assign sel_1_14 = (tmp_17 == 1'b0 ? sel_1_13 :
              tmp_79);

  assign sel_11 = 1'b0;

  assign sel_12 = 1'b0;

  always @(is_SPI_MNGR_36, sel, sel_1, sel_10, sel_11, sel_12, sel_1_14, sel_1_7, sel_2,
       sel_3, sel_4, sel_5, sel_6, sel_7, sel_8, sel_9) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7968_sel_1 = sel_11;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7968_sel_1 = sel_1_14;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7968_sel_1 = sel_1_7;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7968_sel_1 = sel_10;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7968_sel_1 = sel_9;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7968_sel_1 = sel_8;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7968_sel_1 = sel_7;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7968_sel_1 = sel_6;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7968_sel_1 = sel_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7968_sel_1 = sel_4;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7968_sel_1 = sel_3;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7968_sel_1 = sel_2;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7968_sel_1 = sel_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7968_sel_1 = sel;
        end
      default :
        begin
          p7968_sel_1 = sel_12;
        end
    endcase
    sel_1_15 = p7968_sel_1;
  end

  assign sel_13 = 1'b0;

  assign sel_14 = 1'b0;

  assign sel_15 = 1'b0;

  assign sel_16 = 1'b0;

  assign sel_17 = 1'b0;

  assign sel_18 = 1'b0;

  assign sel_19 = 1'b0;

  assign sel_20 = 1'b0;

  assign sel_21 = 1'b0;

  assign sel_22 = 1'b0;

  assign sel_23 = 1'b0;

  assign sel_24 = 1'b0;

  assign s_28 = 1'b1;

  assign sel_2_1 = (s_13 == 1'b0 ? sel_24 :
              s_28);

  assign s_29 = 1'b1;

  assign sel_2_2 = (s_14 == 1'b0 ? sel_2_1 :
              s_29);

  assign s_30 = 1'b1;

  assign sel_2_3 = (s_15 == 1'b0 ? sel_2_2 :
              s_30);

  assign s_31 = 1'b1;

  assign sel_2_4 = (s_16 == 1'b0 ? sel_2_3 :
              s_31);

  assign s_32 = 1'b1;

  assign sel_2_5 = (s_17 == 1'b0 ? sel_2_4 :
              s_32);

  assign s_33 = 1'b1;

  assign sel_2_6 = (s_18 == 1'b0 ? sel_2_5 :
              s_33);

  assign s_34 = 1'b1;

  assign sel_2_7 = (s_19 == 1'b0 ? sel_2_6 :
              s_34);

  assign s_35 = 1'b1;

  assign sel_2_8 = (s_20 == 1'b0 ? sel_2_7 :
              s_35);

  assign sel_25 = 1'b0;

  assign sel_26 = 1'b0;

  assign sel_27 = 1'b0;

  assign s_36 = 1'b1;

  assign sel_2_9 = (tmp_3 == 1'b0 ? sel_27 :
              s_36);

  assign s_37 = 1'b1;

  assign sel_2_10 = (tmp_5 == 1'b0 ? sel_2_9 :
              s_37);

  assign s_38 = 1'b1;

  assign sel_2_11 = (tmp_7 == 1'b0 ? sel_2_10 :
              s_38);

  assign s_39 = 1'b1;

  assign sel_2_12 = (tmp_9 == 1'b0 ? sel_2_11 :
              s_39);

  assign s_40 = 1'b1;

  assign sel_2_13 = (tmp_11 == 1'b0 ? sel_2_12 :
              s_40);

  assign s_41 = 1'b1;

  assign sel_2_14 = (tmp_13 == 1'b0 ? sel_2_13 :
              s_41);

  assign s_42 = 1'b1;

  assign sel_2_15 = (tmp_15 == 1'b0 ? sel_2_14 :
              s_42);

  assign s_43 = 1'b1;

  assign sel_2_16 = (tmp_17 == 1'b0 ? sel_2_15 :
              s_43);

  assign sel_2_17 = (s_10 == 1'b0 ? sel_26 :
              sel_2_16);

  assign sel_2_18 = (s_11 == 1'b0 ? sel_25 :
              sel_2_17);

  assign sel_28 = 1'b0;

  assign sel_2_19 = (s_12 == 1'b0 ? sel_2_18 :
              sel_28);

  assign sel_29 = 1'b0;

  assign sel_30 = 1'b0;

  always @(is_SPI_MNGR_36, sel_13, sel_14, sel_15, sel_16, sel_17, sel_18, sel_19, sel_20,
       sel_21, sel_22, sel_23, sel_29, sel_2_19, sel_2_8, sel_30) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7953_sel_2 = sel_29;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7953_sel_2 = sel_2_19;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7953_sel_2 = sel_2_8;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7953_sel_2 = sel_23;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7953_sel_2 = sel_22;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7953_sel_2 = sel_21;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7953_sel_2 = sel_20;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7953_sel_2 = sel_19;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7953_sel_2 = sel_18;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7953_sel_2 = sel_17;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7953_sel_2 = sel_16;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7953_sel_2 = sel_15;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7953_sel_2 = sel_14;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7953_sel_2 = sel_13;
        end
      default :
        begin
          p7953_sel_2 = sel_30;
        end
    endcase
    sel_2_20 = p7953_sel_2;
  end

  assign tmp_80 = 1'b1;

  assign sel_31 = 1'b0;

  assign sel_32 = 1'b0;

  assign sel_33 = 1'b0;

  assign sel_34 = 1'b0;

  assign sel_35 = 1'b0;

  assign sel_36 = 1'b0;

  assign sel_37 = 1'b0;

  assign sel_38 = 1'b0;

  assign sel_39 = 1'b0;

  assign sel_40 = 1'b0;

  assign sel_41 = 1'b0;

  assign sel_42 = 1'b0;

  assign s_44 = 1'b1;

  assign sel_2_21 = (s_13 == 1'b0 ? sel_42 :
              s_44);

  assign s_45 = 1'b1;

  assign sel_2_22 = (s_14 == 1'b0 ? sel_2_21 :
              s_45);

  assign s_46 = 1'b1;

  assign sel_2_23 = (s_15 == 1'b0 ? sel_2_22 :
              s_46);

  assign s_47 = 1'b1;

  assign sel_2_24 = (s_16 == 1'b0 ? sel_2_23 :
              s_47);

  assign s_48 = 1'b1;

  assign sel_2_25 = (s_17 == 1'b0 ? sel_2_24 :
              s_48);

  assign s_49 = 1'b1;

  assign sel_2_26 = (s_18 == 1'b0 ? sel_2_25 :
              s_49);

  assign s_50 = 1'b1;

  assign sel_2_27 = (s_19 == 1'b0 ? sel_2_26 :
              s_50);

  assign s_51 = 1'b1;

  assign sel_2_28 = (s_20 == 1'b0 ? sel_2_27 :
              s_51);

  assign sel_43 = 1'b0;

  assign sel_44 = 1'b0;

  assign sel_45 = 1'b0;

  assign s_52 = 1'b1;

  assign sel_2_29 = (tmp_3 == 1'b0 ? sel_45 :
              s_52);

  assign s_53 = 1'b1;

  assign sel_2_30 = (tmp_5 == 1'b0 ? sel_2_29 :
              s_53);

  assign s_54 = 1'b1;

  assign sel_2_31 = (tmp_7 == 1'b0 ? sel_2_30 :
              s_54);

  assign s_55 = 1'b1;

  assign sel_2_32 = (tmp_9 == 1'b0 ? sel_2_31 :
              s_55);

  assign s_56 = 1'b1;

  assign sel_2_33 = (tmp_11 == 1'b0 ? sel_2_32 :
              s_56);

  assign s_57 = 1'b1;

  assign sel_2_34 = (tmp_13 == 1'b0 ? sel_2_33 :
              s_57);

  assign s_58 = 1'b1;

  assign sel_2_35 = (tmp_15 == 1'b0 ? sel_2_34 :
              s_58);

  assign s_59 = 1'b1;

  assign sel_2_36 = (tmp_17 == 1'b0 ? sel_2_35 :
              s_59);

  assign sel_2_37 = (s_10 == 1'b0 ? sel_44 :
              sel_2_36);

  assign sel_2_38 = (s_11 == 1'b0 ? sel_43 :
              sel_2_37);

  assign sel_46 = 1'b0;

  assign sel_2_39 = (s_12 == 1'b0 ? sel_2_38 :
              sel_46);

  assign sel_47 = 1'b0;

  assign sel_48 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_28, sel_2_39, sel_31, sel_32, sel_33, sel_34, sel_35,
       sel_36, sel_37, sel_38, sel_39, sel_40, sel_41, sel_47, sel_48) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7900_sel_2 = sel_47;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7900_sel_2 = sel_2_39;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7900_sel_2 = sel_2_28;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7900_sel_2 = sel_41;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7900_sel_2 = sel_40;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7900_sel_2 = sel_39;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7900_sel_2 = sel_38;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7900_sel_2 = sel_37;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7900_sel_2 = sel_36;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7900_sel_2 = sel_35;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7900_sel_2 = sel_34;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7900_sel_2 = sel_33;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7900_sel_2 = sel_32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7900_sel_2 = sel_31;
        end
      default :
        begin
          p7900_sel_2 = sel_48;
        end
    endcase
    sel_2_40 = p7900_sel_2;
  end

  assign tmp_81 = 1'b1;

  assign sel_49 = 1'b0;

  assign sel_50 = 1'b0;

  assign sel_51 = 1'b0;

  assign sel_52 = 1'b0;

  assign sel_53 = 1'b0;

  assign sel_54 = 1'b0;

  assign sel_55 = 1'b0;

  assign sel_56 = 1'b0;

  assign sel_57 = 1'b0;

  assign sel_58 = 1'b0;

  assign sel_59 = 1'b0;

  assign sel_60 = 1'b0;

  assign s_60 = 1'b1;

  assign sel_2_41 = (s_13 == 1'b0 ? sel_60 :
              s_60);

  assign s_61 = 1'b1;

  assign sel_2_42 = (s_14 == 1'b0 ? sel_2_41 :
              s_61);

  assign s_62 = 1'b1;

  assign sel_2_43 = (s_15 == 1'b0 ? sel_2_42 :
              s_62);

  assign s_63 = 1'b1;

  assign sel_2_44 = (s_16 == 1'b0 ? sel_2_43 :
              s_63);

  assign s_64 = 1'b1;

  assign sel_2_45 = (s_17 == 1'b0 ? sel_2_44 :
              s_64);

  assign s_65 = 1'b1;

  assign sel_2_46 = (s_18 == 1'b0 ? sel_2_45 :
              s_65);

  assign s_66 = 1'b1;

  assign sel_2_47 = (s_19 == 1'b0 ? sel_2_46 :
              s_66);

  assign s_67 = 1'b1;

  assign sel_2_48 = (s_20 == 1'b0 ? sel_2_47 :
              s_67);

  assign sel_61 = 1'b0;

  assign sel_62 = 1'b0;

  assign sel_63 = 1'b0;

  assign s_68 = 1'b1;

  assign sel_2_49 = (tmp_3 == 1'b0 ? sel_63 :
              s_68);

  assign s_69 = 1'b1;

  assign sel_2_50 = (tmp_5 == 1'b0 ? sel_2_49 :
              s_69);

  assign s_70 = 1'b1;

  assign sel_2_51 = (tmp_7 == 1'b0 ? sel_2_50 :
              s_70);

  assign s_71 = 1'b1;

  assign sel_2_52 = (tmp_9 == 1'b0 ? sel_2_51 :
              s_71);

  assign s_72 = 1'b1;

  assign sel_2_53 = (tmp_11 == 1'b0 ? sel_2_52 :
              s_72);

  assign s_73 = 1'b1;

  assign sel_2_54 = (tmp_13 == 1'b0 ? sel_2_53 :
              s_73);

  assign s_74 = 1'b1;

  assign sel_2_55 = (tmp_15 == 1'b0 ? sel_2_54 :
              s_74);

  assign s_75 = 1'b1;

  assign sel_2_56 = (tmp_17 == 1'b0 ? sel_2_55 :
              s_75);

  assign sel_2_57 = (s_10 == 1'b0 ? sel_62 :
              sel_2_56);

  assign sel_2_58 = (s_11 == 1'b0 ? sel_61 :
              sel_2_57);

  assign sel_64 = 1'b0;

  assign sel_2_59 = (s_12 == 1'b0 ? sel_2_58 :
              sel_64);

  assign sel_65 = 1'b0;

  assign sel_66 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_48, sel_2_59, sel_49, sel_50, sel_51, sel_52, sel_53,
       sel_54, sel_55, sel_56, sel_57, sel_58, sel_59, sel_65, sel_66) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7279_sel_2 = sel_65;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7279_sel_2 = sel_2_59;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7279_sel_2 = sel_2_48;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7279_sel_2 = sel_59;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7279_sel_2 = sel_58;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7279_sel_2 = sel_57;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7279_sel_2 = sel_56;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7279_sel_2 = sel_55;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7279_sel_2 = sel_54;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7279_sel_2 = sel_53;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7279_sel_2 = sel_52;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7279_sel_2 = sel_51;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7279_sel_2 = sel_50;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7279_sel_2 = sel_49;
        end
      default :
        begin
          p7279_sel_2 = sel_66;
        end
    endcase
    sel_2_60 = p7279_sel_2;
  end

  // Entry 'toBsend_v3_3'
  // Transition
  assign tmp_82 = 1'b1;
  assign sel_67 = 1'b0;

  assign sel_68 = 1'b0;

  assign sel_69 = 1'b0;

  assign sel_70 = 1'b0;

  assign sel_71 = 1'b0;

  assign sel_72 = 1'b0;

  assign sel_73 = 1'b0;

  assign sel_74 = 1'b0;

  assign sel_75 = 1'b0;

  assign sel_76 = 1'b0;

  assign sel_77 = 1'b0;

  assign sel_78 = 1'b0;

  assign s_76 = 1'b1;

  assign sel_2_61 = (s_13 == 1'b0 ? sel_78 :
              s_76);

  assign s_77 = 1'b1;

  assign sel_2_62 = (s_14 == 1'b0 ? sel_2_61 :
              s_77);

  assign s_78 = 1'b1;

  assign sel_2_63 = (s_15 == 1'b0 ? sel_2_62 :
              s_78);

  assign s_79 = 1'b1;

  assign sel_2_64 = (s_16 == 1'b0 ? sel_2_63 :
              s_79);

  assign s_80 = 1'b1;

  assign sel_2_65 = (s_17 == 1'b0 ? sel_2_64 :
              s_80);

  assign s_81 = 1'b1;

  assign sel_2_66 = (s_18 == 1'b0 ? sel_2_65 :
              s_81);

  assign s_82 = 1'b1;

  assign sel_2_67 = (s_19 == 1'b0 ? sel_2_66 :
              s_82);

  assign s_83 = 1'b1;

  assign sel_2_68 = (s_20 == 1'b0 ? sel_2_67 :
              s_83);

  assign sel_79 = 1'b0;

  assign sel_80 = 1'b0;

  assign sel_81 = 1'b0;

  assign s_84 = 1'b1;

  assign sel_2_69 = (tmp_3 == 1'b0 ? sel_81 :
              s_84);

  assign s_85 = 1'b1;

  assign sel_2_70 = (tmp_5 == 1'b0 ? sel_2_69 :
              s_85);

  assign s_86 = 1'b1;

  assign sel_2_71 = (tmp_7 == 1'b0 ? sel_2_70 :
              s_86);

  assign s_87 = 1'b1;

  assign sel_2_72 = (tmp_9 == 1'b0 ? sel_2_71 :
              s_87);

  assign s_88 = 1'b1;

  assign sel_2_73 = (tmp_11 == 1'b0 ? sel_2_72 :
              s_88);

  assign s_89 = 1'b1;

  assign sel_2_74 = (tmp_13 == 1'b0 ? sel_2_73 :
              s_89);

  assign s_90 = 1'b1;

  assign sel_2_75 = (tmp_15 == 1'b0 ? sel_2_74 :
              s_90);

  assign s_91 = 1'b1;

  assign sel_2_76 = (tmp_17 == 1'b0 ? sel_2_75 :
              s_91);

  assign sel_2_77 = (s_10 == 1'b0 ? sel_80 :
              sel_2_76);

  assign sel_2_78 = (s_11 == 1'b0 ? sel_79 :
              sel_2_77);

  assign sel_82 = 1'b0;

  assign sel_2_79 = (s_12 == 1'b0 ? sel_2_78 :
              sel_82);

  assign sel_83 = 1'b0;

  assign sel_84 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_68, sel_2_79, sel_67, sel_68, sel_69, sel_70, sel_71,
       sel_72, sel_73, sel_74, sel_75, sel_76, sel_77, sel_83, sel_84) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7262_sel_2 = sel_83;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7262_sel_2 = sel_2_79;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7262_sel_2 = sel_2_68;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7262_sel_2 = sel_77;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7262_sel_2 = sel_76;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7262_sel_2 = sel_75;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7262_sel_2 = sel_74;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7262_sel_2 = sel_73;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7262_sel_2 = sel_72;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7262_sel_2 = sel_71;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7262_sel_2 = sel_70;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7262_sel_2 = sel_69;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7262_sel_2 = sel_68;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7262_sel_2 = sel_67;
        end
      default :
        begin
          p7262_sel_2 = sel_84;
        end
    endcase
    sel_2_80 = p7262_sel_2;
  end

  assign sel_85 = 1'b0;

  assign sel_86 = 1'b0;

  assign sel_87 = 1'b0;

  assign sel_88 = 1'b0;

  assign sel_89 = 1'b0;

  assign sel_90 = 1'b0;

  assign sel_91 = 1'b0;

  assign sel_92 = 1'b0;

  assign sel_93 = 1'b0;

  assign sel_94 = 1'b0;

  assign sel_95 = 1'b0;

  // Transition
  // Transition
  // During 'NOP'
  // Entry 'sender_pre_SCK'
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // Transition
  // During 'toBsend_v4_1'
  // case IN_toBsend_v4_1:
  assign cont_bits_41[0] = 1'b0;
  assign cont_bits_41[1] = 1'b0;
  assign cont_bits_41[2] = 1'b0;
  assign cont_bits_41[3] = 1'b0;
  assign cont_bits_41[4] = 1'b0;
  assign cont_bits_41[5] = 1'b0;
  assign cont_bits_41[6] = 1'b0;
  assign cont_bits_41[7] = 1'b0;
  assign cont_bits_41[8] = 1'b0;
  assign cont_bits_41[9] = 1'b0;
  assign cont_bits_41[10] = 1'b0;
  assign cont_bits_41[11] = 1'b0;
  assign tmp_83 = (s_13 == 1'b0 ? v4_1 :
              r_v41);

  assign tmp_84 = (s_14 == 1'b0 ? tmp_83 :
              r_v41);

  assign tmp_85 = (s_15 == 1'b0 ? tmp_84 :
              r_v41);

  assign tmp_86 = (s_16 == 1'b0 ? tmp_85 :
              r_v41);

  assign tmp_87 = (s_17 == 1'b0 ? tmp_86 :
              r_v41);

  assign tmp_88 = (s_18 == 1'b0 ? tmp_87 :
              r_v41);

  assign tmp_89 = (s_19 == 1'b0 ? tmp_88 :
              r_v41);

  assign tmp_90 = (s_20 == 1'b0 ? tmp_89 :
              r_v41);

  always @(is_SPI_MNGR_36, r_v41, tmp_90, v4_1) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p75_tmp = tmp_90;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p75_tmp = v4_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p75_tmp = r_v41;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p75_tmp = r_v41;
        end
      default :
        begin
          p75_tmp = r_v41;
        end
    endcase
    tmp_91 = p75_tmp;
  end

  always @(posedge clk)
    begin : r_v41_reg_process
      if (rst == 1'b1) begin
        r_v41 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v41 <= tmp_91;
        end
      end
    end

  simfcn1 u_simfcn1 (.vx(r_v41),  // uint16
                     .cont_bits2_0(functionOutput_0),  // boolean
                     .cont_bits2_1(functionOutput_1),  // boolean
                     .cont_bits2_2(functionOutput_2),  // boolean
                     .cont_bits2_3(functionOutput_3),  // boolean
                     .cont_bits2_4(functionOutput_4),  // boolean
                     .cont_bits2_5(functionOutput_5),  // boolean
                     .cont_bits2_6(functionOutput_6),  // boolean
                     .cont_bits2_7(functionOutput_7),  // boolean
                     .cont_bits2_8(functionOutput_8),  // boolean
                     .cont_bits2_9(functionOutput_9),  // boolean
                     .cont_bits2_10(functionOutput_10),  // boolean
                     .cont_bits2_11(functionOutput_11)  // boolean
                     );

  assign functionOutput[0] = functionOutput_0;
  assign functionOutput[1] = functionOutput_1;
  assign functionOutput[2] = functionOutput_2;
  assign functionOutput[3] = functionOutput_3;
  assign functionOutput[4] = functionOutput_4;
  assign functionOutput[5] = functionOutput_5;
  assign functionOutput[6] = functionOutput_6;
  assign functionOutput[7] = functionOutput_7;
  assign functionOutput[8] = functionOutput_8;
  assign functionOutput[9] = functionOutput_9;
  assign functionOutput[10] = functionOutput_10;
  assign functionOutput[11] = functionOutput_11;

  assign sel_96 = 32'sd0;

  assign sel_97 = 32'sd0;

  assign sel_98 = 32'sd0;

  assign sel_99 = 32'sd0;

  assign sel_100 = 32'sd0;

  assign sel_101 = 32'sd0;

  assign sel_102 = 32'sd0;

  assign sel_103 = 32'sd0;

  assign sel_104 = 32'sd0;

  assign sel_105 = 32'sd0;

  assign sel_106 = 32'sd0;

  assign sel_107 = 32'sd0;

  assign s_92 = 32'sd0;

  assign sel_1_16 = (s_13 == 1'b0 ? sel_107 :
              s_92);

  assign sel_108 = 32'sd0;

  assign sel_1_17 = (s_14 == 1'b0 ? sel_1_16 :
              sel_108);

  assign sel_109 = 32'sd0;

  assign sel_1_18 = (s_15 == 1'b0 ? sel_1_17 :
              sel_109);

  assign sel_110 = 32'sd0;

  assign sel_1_19 = (s_16 == 1'b0 ? sel_1_18 :
              sel_110);

  assign sel_111 = 32'sd0;

  assign sel_1_20 = (s_17 == 1'b0 ? sel_1_19 :
              sel_111);

  assign sel_112 = 32'sd0;

  assign sel_1_21 = (s_18 == 1'b0 ? sel_1_20 :
              sel_112);

  assign sel_113 = 32'sd0;

  assign sel_1_22 = (s_19 == 1'b0 ? sel_1_21 :
              sel_113);

  assign sel_114 = 32'sd0;

  assign sel_1_23 = (s_20 == 1'b0 ? sel_1_22 :
              sel_114);

  assign sel_115 = 32'sd0;

  assign sel_116 = 32'sd0;

  assign sel_117 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_100, sel_101, sel_102, sel_103, sel_104, sel_105, sel_106,
       sel_115, sel_116, sel_117, sel_1_23, sel_96, sel_97, sel_98, sel_99) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10645_sel_1 = sel_116;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10645_sel_1 = sel_115;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10645_sel_1 = sel_1_23;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10645_sel_1 = sel_106;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10645_sel_1 = sel_105;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10645_sel_1 = sel_104;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10645_sel_1 = sel_103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10645_sel_1 = sel_102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10645_sel_1 = sel_101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10645_sel_1 = sel_100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10645_sel_1 = sel_99;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10645_sel_1 = sel_98;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10645_sel_1 = sel_97;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10645_sel_1 = sel_96;
        end
      default :
        begin
          p10645_sel_1 = sel_117;
        end
    endcase
    sel_1_24 = p10645_sel_1;
  end

  assign tmp_92 = functionOutput[sel_1_24];

  assign sel_118 = 1'b0;

  assign sel_119 = 1'b0;

  assign sel_120 = 1'b0;

  assign sel_121 = 1'b0;

  assign sel_122 = 1'b0;

  assign sel_123 = 1'b0;

  assign sel_124 = 1'b0;

  assign sel_125 = 1'b0;

  assign sel_126 = 1'b0;

  assign sel_127 = 1'b0;

  assign sel_128 = 1'b0;

  assign sel_129 = 1'b0;

  assign s_93 = 1'b1;

  assign sel_2_81 = (s_13 == 1'b0 ? sel_129 :
              s_93);

  assign sel_130 = 1'b0;

  assign sel_2_82 = (s_14 == 1'b0 ? sel_2_81 :
              sel_130);

  assign sel_131 = 1'b0;

  assign sel_2_83 = (s_15 == 1'b0 ? sel_2_82 :
              sel_131);

  assign sel_132 = 1'b0;

  assign sel_2_84 = (s_16 == 1'b0 ? sel_2_83 :
              sel_132);

  assign sel_133 = 1'b0;

  assign sel_2_85 = (s_17 == 1'b0 ? sel_2_84 :
              sel_133);

  assign sel_134 = 1'b0;

  assign sel_2_86 = (s_18 == 1'b0 ? sel_2_85 :
              sel_134);

  assign sel_135 = 1'b0;

  assign sel_2_87 = (s_19 == 1'b0 ? sel_2_86 :
              sel_135);

  assign sel_136 = 1'b0;

  assign sel_2_88 = (s_20 == 1'b0 ? sel_2_87 :
              sel_136);

  assign sel_137 = 1'b0;

  assign sel_138 = 1'b0;

  assign sel_139 = 1'b0;

  always @(is_SPI_MNGR_36, sel_118, sel_119, sel_120, sel_121, sel_122, sel_123, sel_124,
       sel_125, sel_126, sel_127, sel_128, sel_137, sel_138, sel_139, sel_2_88) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7684_sel_2 = sel_138;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7684_sel_2 = sel_137;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7684_sel_2 = sel_2_88;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7684_sel_2 = sel_128;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7684_sel_2 = sel_127;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7684_sel_2 = sel_126;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7684_sel_2 = sel_125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7684_sel_2 = sel_124;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7684_sel_2 = sel_123;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7684_sel_2 = sel_122;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7684_sel_2 = sel_121;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7684_sel_2 = sel_120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7684_sel_2 = sel_119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7684_sel_2 = sel_118;
        end
      default :
        begin
          p7684_sel_2 = sel_139;
        end
    endcase
    sel_2_89 = p7684_sel_2;
  end

  always @* begin
    p7683cont_bits_41_cont_bits_41[0] = cont_bits_41[0];
    if (sel_2_89) begin
      p7683cont_bits_41_cont_bits_41[0] = tmp_92;
    end
    cont_bits_41_1[0] = p7683cont_bits_41_cont_bits_41[0];
    cont_bits_41_1[1] = cont_bits_41[1];
    cont_bits_41_1[2] = cont_bits_41[2];
    cont_bits_41_1[3] = cont_bits_41[3];
    cont_bits_41_1[4] = cont_bits_41[4];
    cont_bits_41_1[5] = cont_bits_41[5];
    cont_bits_41_1[6] = cont_bits_41[6];
    cont_bits_41_1[7] = cont_bits_41[7];
    cont_bits_41_1[8] = cont_bits_41[8];
    cont_bits_41_1[9] = cont_bits_41[9];
    cont_bits_41_1[10] = cont_bits_41[10];
    cont_bits_41_1[11] = cont_bits_41[11];
  end

  assign sel_140 = 32'sd0;

  assign sel_141 = 32'sd0;

  assign sel_142 = 32'sd0;

  assign sel_143 = 32'sd0;

  assign sel_144 = 32'sd0;

  assign sel_145 = 32'sd0;

  assign sel_146 = 32'sd0;

  assign sel_147 = 32'sd0;

  assign sel_148 = 32'sd0;

  assign sel_149 = 32'sd0;

  assign sel_150 = 32'sd0;

  assign sel_151 = 32'sd0;

  assign s_94 = 32'sd1;

  assign sel_1_25 = (s_13 == 1'b0 ? sel_151 :
              s_94);

  assign sel_152 = 32'sd0;

  assign sel_1_26 = (s_14 == 1'b0 ? sel_1_25 :
              sel_152);

  assign sel_153 = 32'sd0;

  assign sel_1_27 = (s_15 == 1'b0 ? sel_1_26 :
              sel_153);

  assign sel_154 = 32'sd0;

  assign sel_1_28 = (s_16 == 1'b0 ? sel_1_27 :
              sel_154);

  assign sel_155 = 32'sd0;

  assign sel_1_29 = (s_17 == 1'b0 ? sel_1_28 :
              sel_155);

  assign sel_156 = 32'sd0;

  assign sel_1_30 = (s_18 == 1'b0 ? sel_1_29 :
              sel_156);

  assign sel_157 = 32'sd0;

  assign sel_1_31 = (s_19 == 1'b0 ? sel_1_30 :
              sel_157);

  assign sel_158 = 32'sd0;

  assign sel_1_32 = (s_20 == 1'b0 ? sel_1_31 :
              sel_158);

  assign sel_159 = 32'sd0;

  assign sel_160 = 32'sd0;

  assign sel_161 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_140, sel_141, sel_142, sel_143, sel_144, sel_145, sel_146,
       sel_147, sel_148, sel_149, sel_150, sel_159, sel_160, sel_161, sel_1_32) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10356_sel_1 = sel_160;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10356_sel_1 = sel_159;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10356_sel_1 = sel_1_32;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10356_sel_1 = sel_150;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10356_sel_1 = sel_149;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10356_sel_1 = sel_148;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10356_sel_1 = sel_147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10356_sel_1 = sel_146;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10356_sel_1 = sel_145;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10356_sel_1 = sel_144;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10356_sel_1 = sel_143;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10356_sel_1 = sel_142;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10356_sel_1 = sel_141;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10356_sel_1 = sel_140;
        end
      default :
        begin
          p10356_sel_1 = sel_161;
        end
    endcase
    sel_1_33 = p10356_sel_1;
  end

  assign tmp_93 = functionOutput[sel_1_33];

  assign sel_162 = 1'b0;

  assign sel_163 = 1'b0;

  assign sel_164 = 1'b0;

  assign sel_165 = 1'b0;

  assign sel_166 = 1'b0;

  assign sel_167 = 1'b0;

  assign sel_168 = 1'b0;

  assign sel_169 = 1'b0;

  assign sel_170 = 1'b0;

  assign sel_171 = 1'b0;

  assign sel_172 = 1'b0;

  assign sel_173 = 1'b0;

  assign s_95 = 1'b1;

  assign sel_2_90 = (s_13 == 1'b0 ? sel_173 :
              s_95);

  assign sel_174 = 1'b0;

  assign sel_2_91 = (s_14 == 1'b0 ? sel_2_90 :
              sel_174);

  assign sel_175 = 1'b0;

  assign sel_2_92 = (s_15 == 1'b0 ? sel_2_91 :
              sel_175);

  assign sel_176 = 1'b0;

  assign sel_2_93 = (s_16 == 1'b0 ? sel_2_92 :
              sel_176);

  assign sel_177 = 1'b0;

  assign sel_2_94 = (s_17 == 1'b0 ? sel_2_93 :
              sel_177);

  assign sel_178 = 1'b0;

  assign sel_2_95 = (s_18 == 1'b0 ? sel_2_94 :
              sel_178);

  assign sel_179 = 1'b0;

  assign sel_2_96 = (s_19 == 1'b0 ? sel_2_95 :
              sel_179);

  assign sel_180 = 1'b0;

  assign sel_2_97 = (s_20 == 1'b0 ? sel_2_96 :
              sel_180);

  assign sel_181 = 1'b0;

  assign sel_182 = 1'b0;

  assign sel_183 = 1'b0;

  always @(is_SPI_MNGR_36, sel_162, sel_163, sel_164, sel_165, sel_166, sel_167, sel_168,
       sel_169, sel_170, sel_171, sel_172, sel_181, sel_182, sel_183, sel_2_97) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7495_sel_2 = sel_182;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7495_sel_2 = sel_181;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7495_sel_2 = sel_2_97;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7495_sel_2 = sel_172;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7495_sel_2 = sel_171;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7495_sel_2 = sel_170;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7495_sel_2 = sel_169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7495_sel_2 = sel_168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7495_sel_2 = sel_167;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7495_sel_2 = sel_166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7495_sel_2 = sel_165;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7495_sel_2 = sel_164;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7495_sel_2 = sel_163;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7495_sel_2 = sel_162;
        end
      default :
        begin
          p7495_sel_2 = sel_183;
        end
    endcase
    sel_2_98 = p7495_sel_2;
  end

  always @* begin
    p7494cont_bits_41_cont_bits_41[1] = cont_bits_41_1[1];
    if (sel_2_98) begin
      p7494cont_bits_41_cont_bits_41[1] = tmp_93;
    end
    cont_bits_41_2[0] = cont_bits_41_1[0];
    cont_bits_41_2[1] = p7494cont_bits_41_cont_bits_41[1];
    cont_bits_41_2[2] = cont_bits_41_1[2];
    cont_bits_41_2[3] = cont_bits_41_1[3];
    cont_bits_41_2[4] = cont_bits_41_1[4];
    cont_bits_41_2[5] = cont_bits_41_1[5];
    cont_bits_41_2[6] = cont_bits_41_1[6];
    cont_bits_41_2[7] = cont_bits_41_1[7];
    cont_bits_41_2[8] = cont_bits_41_1[8];
    cont_bits_41_2[9] = cont_bits_41_1[9];
    cont_bits_41_2[10] = cont_bits_41_1[10];
    cont_bits_41_2[11] = cont_bits_41_1[11];
  end

  assign sel_184 = 32'sd0;

  assign sel_185 = 32'sd0;

  assign sel_186 = 32'sd0;

  assign sel_187 = 32'sd0;

  assign sel_188 = 32'sd0;

  assign sel_189 = 32'sd0;

  assign sel_190 = 32'sd0;

  assign sel_191 = 32'sd0;

  assign sel_192 = 32'sd0;

  assign sel_193 = 32'sd0;

  assign sel_194 = 32'sd0;

  assign sel_195 = 32'sd0;

  assign s_96 = 32'sd2;

  assign sel_1_34 = (s_13 == 1'b0 ? sel_195 :
              s_96);

  assign sel_196 = 32'sd0;

  assign sel_1_35 = (s_14 == 1'b0 ? sel_1_34 :
              sel_196);

  assign sel_197 = 32'sd0;

  assign sel_1_36 = (s_15 == 1'b0 ? sel_1_35 :
              sel_197);

  assign sel_198 = 32'sd0;

  assign sel_1_37 = (s_16 == 1'b0 ? sel_1_36 :
              sel_198);

  assign sel_199 = 32'sd0;

  assign sel_1_38 = (s_17 == 1'b0 ? sel_1_37 :
              sel_199);

  assign sel_200 = 32'sd0;

  assign sel_1_39 = (s_18 == 1'b0 ? sel_1_38 :
              sel_200);

  assign sel_201 = 32'sd0;

  assign sel_1_40 = (s_19 == 1'b0 ? sel_1_39 :
              sel_201);

  assign sel_202 = 32'sd0;

  assign sel_1_41 = (s_20 == 1'b0 ? sel_1_40 :
              sel_202);

  assign sel_203 = 32'sd0;

  assign sel_204 = 32'sd0;

  assign sel_205 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_184, sel_185, sel_186, sel_187, sel_188, sel_189, sel_190,
       sel_191, sel_192, sel_193, sel_194, sel_1_41, sel_203, sel_204, sel_205) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9931_sel_1 = sel_204;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9931_sel_1 = sel_203;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9931_sel_1 = sel_1_41;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9931_sel_1 = sel_194;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9931_sel_1 = sel_193;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9931_sel_1 = sel_192;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9931_sel_1 = sel_191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9931_sel_1 = sel_190;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9931_sel_1 = sel_189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9931_sel_1 = sel_188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9931_sel_1 = sel_187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9931_sel_1 = sel_186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9931_sel_1 = sel_185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9931_sel_1 = sel_184;
        end
      default :
        begin
          p9931_sel_1 = sel_205;
        end
    endcase
    sel_1_42 = p9931_sel_1;
  end

  assign tmp_94 = functionOutput[sel_1_42];

  assign sel_206 = 1'b0;

  assign sel_207 = 1'b0;

  assign sel_208 = 1'b0;

  assign sel_209 = 1'b0;

  assign sel_210 = 1'b0;

  assign sel_211 = 1'b0;

  assign sel_212 = 1'b0;

  assign sel_213 = 1'b0;

  assign sel_214 = 1'b0;

  assign sel_215 = 1'b0;

  assign sel_216 = 1'b0;

  assign sel_217 = 1'b0;

  assign s_97 = 1'b1;

  assign sel_2_99 = (s_13 == 1'b0 ? sel_217 :
              s_97);

  assign sel_218 = 1'b0;

  assign sel_2_100 = (s_14 == 1'b0 ? sel_2_99 :
              sel_218);

  assign sel_219 = 1'b0;

  assign sel_2_101 = (s_15 == 1'b0 ? sel_2_100 :
              sel_219);

  assign sel_220 = 1'b0;

  assign sel_2_102 = (s_16 == 1'b0 ? sel_2_101 :
              sel_220);

  assign sel_221 = 1'b0;

  assign sel_2_103 = (s_17 == 1'b0 ? sel_2_102 :
              sel_221);

  assign sel_222 = 1'b0;

  assign sel_2_104 = (s_18 == 1'b0 ? sel_2_103 :
              sel_222);

  assign sel_223 = 1'b0;

  assign sel_2_105 = (s_19 == 1'b0 ? sel_2_104 :
              sel_223);

  assign sel_224 = 1'b0;

  assign sel_2_106 = (s_20 == 1'b0 ? sel_2_105 :
              sel_224);

  assign sel_225 = 1'b0;

  assign sel_226 = 1'b0;

  assign sel_227 = 1'b0;

  always @(is_SPI_MNGR_36, sel_206, sel_207, sel_208, sel_209, sel_210, sel_211, sel_212,
       sel_213, sel_214, sel_215, sel_216, sel_225, sel_226, sel_227,
       sel_2_106) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7046_sel_2 = sel_226;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7046_sel_2 = sel_225;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7046_sel_2 = sel_2_106;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7046_sel_2 = sel_216;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7046_sel_2 = sel_215;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7046_sel_2 = sel_214;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7046_sel_2 = sel_213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7046_sel_2 = sel_212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7046_sel_2 = sel_211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7046_sel_2 = sel_210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7046_sel_2 = sel_209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7046_sel_2 = sel_208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7046_sel_2 = sel_207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7046_sel_2 = sel_206;
        end
      default :
        begin
          p7046_sel_2 = sel_227;
        end
    endcase
    sel_2_107 = p7046_sel_2;
  end

  always @* begin
    p7045cont_bits_41_cont_bits_41[2] = cont_bits_41_2[2];
    if (sel_2_107) begin
      p7045cont_bits_41_cont_bits_41[2] = tmp_94;
    end
    cont_bits_41_3[0] = cont_bits_41_2[0];
    cont_bits_41_3[1] = cont_bits_41_2[1];
    cont_bits_41_3[2] = p7045cont_bits_41_cont_bits_41[2];
    cont_bits_41_3[3] = cont_bits_41_2[3];
    cont_bits_41_3[4] = cont_bits_41_2[4];
    cont_bits_41_3[5] = cont_bits_41_2[5];
    cont_bits_41_3[6] = cont_bits_41_2[6];
    cont_bits_41_3[7] = cont_bits_41_2[7];
    cont_bits_41_3[8] = cont_bits_41_2[8];
    cont_bits_41_3[9] = cont_bits_41_2[9];
    cont_bits_41_3[10] = cont_bits_41_2[10];
    cont_bits_41_3[11] = cont_bits_41_2[11];
  end

  assign sel_228 = 32'sd0;

  assign sel_229 = 32'sd0;

  assign sel_230 = 32'sd0;

  assign sel_231 = 32'sd0;

  assign sel_232 = 32'sd0;

  assign sel_233 = 32'sd0;

  assign sel_234 = 32'sd0;

  assign sel_235 = 32'sd0;

  assign sel_236 = 32'sd0;

  assign sel_237 = 32'sd0;

  assign sel_238 = 32'sd0;

  assign sel_239 = 32'sd0;

  assign s_98 = 32'sd3;

  assign sel_1_43 = (s_13 == 1'b0 ? sel_239 :
              s_98);

  assign sel_240 = 32'sd0;

  assign sel_1_44 = (s_14 == 1'b0 ? sel_1_43 :
              sel_240);

  assign sel_241 = 32'sd0;

  assign sel_1_45 = (s_15 == 1'b0 ? sel_1_44 :
              sel_241);

  assign sel_242 = 32'sd0;

  assign sel_1_46 = (s_16 == 1'b0 ? sel_1_45 :
              sel_242);

  assign sel_243 = 32'sd0;

  assign sel_1_47 = (s_17 == 1'b0 ? sel_1_46 :
              sel_243);

  assign sel_244 = 32'sd0;

  assign sel_1_48 = (s_18 == 1'b0 ? sel_1_47 :
              sel_244);

  assign sel_245 = 32'sd0;

  assign sel_1_49 = (s_19 == 1'b0 ? sel_1_48 :
              sel_245);

  assign sel_246 = 32'sd0;

  assign sel_1_50 = (s_20 == 1'b0 ? sel_1_49 :
              sel_246);

  assign sel_247 = 32'sd0;

  assign sel_248 = 32'sd0;

  assign sel_249 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_50, sel_228, sel_229, sel_230, sel_231, sel_232, sel_233,
       sel_234, sel_235, sel_236, sel_237, sel_238, sel_247, sel_248, sel_249) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10050_sel_1 = sel_248;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10050_sel_1 = sel_247;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10050_sel_1 = sel_1_50;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10050_sel_1 = sel_238;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10050_sel_1 = sel_237;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10050_sel_1 = sel_236;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10050_sel_1 = sel_235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10050_sel_1 = sel_234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10050_sel_1 = sel_233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10050_sel_1 = sel_232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10050_sel_1 = sel_231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10050_sel_1 = sel_230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10050_sel_1 = sel_229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10050_sel_1 = sel_228;
        end
      default :
        begin
          p10050_sel_1 = sel_249;
        end
    endcase
    sel_1_51 = p10050_sel_1;
  end

  assign tmp_95 = functionOutput[sel_1_51];

  assign sel_250 = 1'b0;

  assign sel_251 = 1'b0;

  assign sel_252 = 1'b0;

  assign sel_253 = 1'b0;

  assign sel_254 = 1'b0;

  assign sel_255 = 1'b0;

  assign sel_256 = 1'b0;

  assign sel_257 = 1'b0;

  assign sel_258 = 1'b0;

  assign sel_259 = 1'b0;

  assign sel_260 = 1'b0;

  assign sel_261 = 1'b0;

  assign s_99 = 1'b1;

  assign sel_2_108 = (s_13 == 1'b0 ? sel_261 :
              s_99);

  assign sel_262 = 1'b0;

  assign sel_2_109 = (s_14 == 1'b0 ? sel_2_108 :
              sel_262);

  assign sel_263 = 1'b0;

  assign sel_2_110 = (s_15 == 1'b0 ? sel_2_109 :
              sel_263);

  assign sel_264 = 1'b0;

  assign sel_2_111 = (s_16 == 1'b0 ? sel_2_110 :
              sel_264);

  assign sel_265 = 1'b0;

  assign sel_2_112 = (s_17 == 1'b0 ? sel_2_111 :
              sel_265);

  assign sel_266 = 1'b0;

  assign sel_2_113 = (s_18 == 1'b0 ? sel_2_112 :
              sel_266);

  assign sel_267 = 1'b0;

  assign sel_2_114 = (s_19 == 1'b0 ? sel_2_113 :
              sel_267);

  assign sel_268 = 1'b0;

  assign sel_2_115 = (s_20 == 1'b0 ? sel_2_114 :
              sel_268);

  assign sel_269 = 1'b0;

  assign sel_270 = 1'b0;

  assign sel_271 = 1'b0;

  always @(is_SPI_MNGR_36, sel_250, sel_251, sel_252, sel_253, sel_254, sel_255, sel_256,
       sel_257, sel_258, sel_259, sel_260, sel_269, sel_270, sel_271,
       sel_2_115) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6857_sel_2 = sel_270;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6857_sel_2 = sel_269;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6857_sel_2 = sel_2_115;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6857_sel_2 = sel_260;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6857_sel_2 = sel_259;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6857_sel_2 = sel_258;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6857_sel_2 = sel_257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6857_sel_2 = sel_256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6857_sel_2 = sel_255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6857_sel_2 = sel_254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6857_sel_2 = sel_253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6857_sel_2 = sel_252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6857_sel_2 = sel_251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6857_sel_2 = sel_250;
        end
      default :
        begin
          p6857_sel_2 = sel_271;
        end
    endcase
    sel_2_116 = p6857_sel_2;
  end

  always @* begin
    p6856cont_bits_41_cont_bits_41[3] = cont_bits_41_3[3];
    if (sel_2_116) begin
      p6856cont_bits_41_cont_bits_41[3] = tmp_95;
    end
    cont_bits_41_4[0] = cont_bits_41_3[0];
    cont_bits_41_4[1] = cont_bits_41_3[1];
    cont_bits_41_4[2] = cont_bits_41_3[2];
    cont_bits_41_4[3] = p6856cont_bits_41_cont_bits_41[3];
    cont_bits_41_4[4] = cont_bits_41_3[4];
    cont_bits_41_4[5] = cont_bits_41_3[5];
    cont_bits_41_4[6] = cont_bits_41_3[6];
    cont_bits_41_4[7] = cont_bits_41_3[7];
    cont_bits_41_4[8] = cont_bits_41_3[8];
    cont_bits_41_4[9] = cont_bits_41_3[9];
    cont_bits_41_4[10] = cont_bits_41_3[10];
    cont_bits_41_4[11] = cont_bits_41_3[11];
  end

  assign sel_272 = 32'sd0;

  assign sel_273 = 32'sd0;

  assign sel_274 = 32'sd0;

  assign sel_275 = 32'sd0;

  assign sel_276 = 32'sd0;

  assign sel_277 = 32'sd0;

  assign sel_278 = 32'sd0;

  assign sel_279 = 32'sd0;

  assign sel_280 = 32'sd0;

  assign sel_281 = 32'sd0;

  assign sel_282 = 32'sd0;

  assign sel_283 = 32'sd0;

  assign s_100 = 32'sd4;

  assign sel_1_52 = (s_13 == 1'b0 ? sel_283 :
              s_100);

  assign sel_284 = 32'sd0;

  assign sel_1_53 = (s_14 == 1'b0 ? sel_1_52 :
              sel_284);

  assign sel_285 = 32'sd0;

  assign sel_1_54 = (s_15 == 1'b0 ? sel_1_53 :
              sel_285);

  assign sel_286 = 32'sd0;

  assign sel_1_55 = (s_16 == 1'b0 ? sel_1_54 :
              sel_286);

  assign sel_287 = 32'sd0;

  assign sel_1_56 = (s_17 == 1'b0 ? sel_1_55 :
              sel_287);

  assign sel_288 = 32'sd0;

  assign sel_1_57 = (s_18 == 1'b0 ? sel_1_56 :
              sel_288);

  assign sel_289 = 32'sd0;

  assign sel_1_58 = (s_19 == 1'b0 ? sel_1_57 :
              sel_289);

  assign sel_290 = 32'sd0;

  assign sel_1_59 = (s_20 == 1'b0 ? sel_1_58 :
              sel_290);

  assign sel_291 = 32'sd0;

  assign sel_292 = 32'sd0;

  assign sel_293 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_59, sel_272, sel_273, sel_274, sel_275, sel_276, sel_277,
       sel_278, sel_279, sel_280, sel_281, sel_282, sel_291, sel_292, sel_293) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11359_sel_1 = sel_292;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11359_sel_1 = sel_291;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11359_sel_1 = sel_1_59;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11359_sel_1 = sel_282;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11359_sel_1 = sel_281;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11359_sel_1 = sel_280;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11359_sel_1 = sel_279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11359_sel_1 = sel_278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11359_sel_1 = sel_277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11359_sel_1 = sel_276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11359_sel_1 = sel_275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11359_sel_1 = sel_274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11359_sel_1 = sel_273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11359_sel_1 = sel_272;
        end
      default :
        begin
          p11359_sel_1 = sel_293;
        end
    endcase
    sel_1_60 = p11359_sel_1;
  end

  assign tmp_96 = functionOutput[sel_1_60];

  assign sel_294 = 1'b0;

  assign sel_295 = 1'b0;

  assign sel_296 = 1'b0;

  assign sel_297 = 1'b0;

  assign sel_298 = 1'b0;

  assign sel_299 = 1'b0;

  assign sel_300 = 1'b0;

  assign sel_301 = 1'b0;

  assign sel_302 = 1'b0;

  assign sel_303 = 1'b0;

  assign sel_304 = 1'b0;

  assign sel_305 = 1'b0;

  assign s_101 = 1'b1;

  assign sel_2_117 = (s_13 == 1'b0 ? sel_305 :
              s_101);

  assign sel_306 = 1'b0;

  assign sel_2_118 = (s_14 == 1'b0 ? sel_2_117 :
              sel_306);

  assign sel_307 = 1'b0;

  assign sel_2_119 = (s_15 == 1'b0 ? sel_2_118 :
              sel_307);

  assign sel_308 = 1'b0;

  assign sel_2_120 = (s_16 == 1'b0 ? sel_2_119 :
              sel_308);

  assign sel_309 = 1'b0;

  assign sel_2_121 = (s_17 == 1'b0 ? sel_2_120 :
              sel_309);

  assign sel_310 = 1'b0;

  assign sel_2_122 = (s_18 == 1'b0 ? sel_2_121 :
              sel_310);

  assign sel_311 = 1'b0;

  assign sel_2_123 = (s_19 == 1'b0 ? sel_2_122 :
              sel_311);

  assign sel_312 = 1'b0;

  assign sel_2_124 = (s_20 == 1'b0 ? sel_2_123 :
              sel_312);

  assign sel_313 = 1'b0;

  assign sel_314 = 1'b0;

  assign sel_315 = 1'b0;

  always @(is_SPI_MNGR_36, sel_294, sel_295, sel_296, sel_297, sel_298, sel_299,
       sel_2_124, sel_300, sel_301, sel_302, sel_303, sel_304, sel_313, sel_314,
       sel_315) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6439_sel_2 = sel_314;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6439_sel_2 = sel_313;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6439_sel_2 = sel_2_124;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6439_sel_2 = sel_304;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6439_sel_2 = sel_303;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6439_sel_2 = sel_302;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6439_sel_2 = sel_301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6439_sel_2 = sel_300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6439_sel_2 = sel_299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6439_sel_2 = sel_298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6439_sel_2 = sel_297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6439_sel_2 = sel_296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6439_sel_2 = sel_295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6439_sel_2 = sel_294;
        end
      default :
        begin
          p6439_sel_2 = sel_315;
        end
    endcase
    sel_2_125 = p6439_sel_2;
  end

  always @* begin
    p6438cont_bits_41_cont_bits_41[4] = cont_bits_41_4[4];
    if (sel_2_125) begin
      p6438cont_bits_41_cont_bits_41[4] = tmp_96;
    end
    cont_bits_41_5[0] = cont_bits_41_4[0];
    cont_bits_41_5[1] = cont_bits_41_4[1];
    cont_bits_41_5[2] = cont_bits_41_4[2];
    cont_bits_41_5[3] = cont_bits_41_4[3];
    cont_bits_41_5[4] = p6438cont_bits_41_cont_bits_41[4];
    cont_bits_41_5[5] = cont_bits_41_4[5];
    cont_bits_41_5[6] = cont_bits_41_4[6];
    cont_bits_41_5[7] = cont_bits_41_4[7];
    cont_bits_41_5[8] = cont_bits_41_4[8];
    cont_bits_41_5[9] = cont_bits_41_4[9];
    cont_bits_41_5[10] = cont_bits_41_4[10];
    cont_bits_41_5[11] = cont_bits_41_4[11];
  end

  assign sel_316 = 32'sd0;

  assign sel_317 = 32'sd0;

  assign sel_318 = 32'sd0;

  assign sel_319 = 32'sd0;

  assign sel_320 = 32'sd0;

  assign sel_321 = 32'sd0;

  assign sel_322 = 32'sd0;

  assign sel_323 = 32'sd0;

  assign sel_324 = 32'sd0;

  assign sel_325 = 32'sd0;

  assign sel_326 = 32'sd0;

  assign sel_327 = 32'sd0;

  assign s_102 = 32'sd5;

  assign sel_1_61 = (s_13 == 1'b0 ? sel_327 :
              s_102);

  assign sel_328 = 32'sd0;

  assign sel_1_62 = (s_14 == 1'b0 ? sel_1_61 :
              sel_328);

  assign sel_329 = 32'sd0;

  assign sel_1_63 = (s_15 == 1'b0 ? sel_1_62 :
              sel_329);

  assign sel_330 = 32'sd0;

  assign sel_1_64 = (s_16 == 1'b0 ? sel_1_63 :
              sel_330);

  assign sel_331 = 32'sd0;

  assign sel_1_65 = (s_17 == 1'b0 ? sel_1_64 :
              sel_331);

  assign sel_332 = 32'sd0;

  assign sel_1_66 = (s_18 == 1'b0 ? sel_1_65 :
              sel_332);

  assign sel_333 = 32'sd0;

  assign sel_1_67 = (s_19 == 1'b0 ? sel_1_66 :
              sel_333);

  assign sel_334 = 32'sd0;

  assign sel_1_68 = (s_20 == 1'b0 ? sel_1_67 :
              sel_334);

  assign sel_335 = 32'sd0;

  assign sel_336 = 32'sd0;

  assign sel_337 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_68, sel_316, sel_317, sel_318, sel_319, sel_320, sel_321,
       sel_322, sel_323, sel_324, sel_325, sel_326, sel_335, sel_336, sel_337) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11087_sel_1 = sel_336;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11087_sel_1 = sel_335;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11087_sel_1 = sel_1_68;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11087_sel_1 = sel_326;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11087_sel_1 = sel_325;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11087_sel_1 = sel_324;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11087_sel_1 = sel_323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11087_sel_1 = sel_322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11087_sel_1 = sel_321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11087_sel_1 = sel_320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11087_sel_1 = sel_319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11087_sel_1 = sel_318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11087_sel_1 = sel_317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11087_sel_1 = sel_316;
        end
      default :
        begin
          p11087_sel_1 = sel_337;
        end
    endcase
    sel_1_69 = p11087_sel_1;
  end

  assign tmp_97 = functionOutput[sel_1_69];

  assign sel_338 = 1'b0;

  assign sel_339 = 1'b0;

  assign sel_340 = 1'b0;

  assign sel_341 = 1'b0;

  assign sel_342 = 1'b0;

  assign sel_343 = 1'b0;

  assign sel_344 = 1'b0;

  assign sel_345 = 1'b0;

  assign sel_346 = 1'b0;

  assign sel_347 = 1'b0;

  assign sel_348 = 1'b0;

  assign sel_349 = 1'b0;

  assign s_103 = 1'b1;

  assign sel_2_126 = (s_13 == 1'b0 ? sel_349 :
              s_103);

  assign sel_350 = 1'b0;

  assign sel_2_127 = (s_14 == 1'b0 ? sel_2_126 :
              sel_350);

  assign sel_351 = 1'b0;

  assign sel_2_128 = (s_15 == 1'b0 ? sel_2_127 :
              sel_351);

  assign sel_352 = 1'b0;

  assign sel_2_129 = (s_16 == 1'b0 ? sel_2_128 :
              sel_352);

  assign sel_353 = 1'b0;

  assign sel_2_130 = (s_17 == 1'b0 ? sel_2_129 :
              sel_353);

  assign sel_354 = 1'b0;

  assign sel_2_131 = (s_18 == 1'b0 ? sel_2_130 :
              sel_354);

  assign sel_355 = 1'b0;

  assign sel_2_132 = (s_19 == 1'b0 ? sel_2_131 :
              sel_355);

  assign sel_356 = 1'b0;

  assign sel_2_133 = (s_20 == 1'b0 ? sel_2_132 :
              sel_356);

  assign sel_357 = 1'b0;

  assign sel_358 = 1'b0;

  assign sel_359 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_133, sel_338, sel_339, sel_340, sel_341, sel_342,
       sel_343, sel_344, sel_345, sel_346, sel_347, sel_348, sel_357, sel_358,
       sel_359) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6251_sel_2 = sel_358;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6251_sel_2 = sel_357;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6251_sel_2 = sel_2_133;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6251_sel_2 = sel_348;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6251_sel_2 = sel_347;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6251_sel_2 = sel_346;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6251_sel_2 = sel_345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6251_sel_2 = sel_344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6251_sel_2 = sel_343;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6251_sel_2 = sel_342;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6251_sel_2 = sel_341;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6251_sel_2 = sel_340;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6251_sel_2 = sel_339;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6251_sel_2 = sel_338;
        end
      default :
        begin
          p6251_sel_2 = sel_359;
        end
    endcase
    sel_2_134 = p6251_sel_2;
  end

  always @* begin
    p6250cont_bits_41_cont_bits_41[5] = cont_bits_41_5[5];
    if (sel_2_134) begin
      p6250cont_bits_41_cont_bits_41[5] = tmp_97;
    end
    cont_bits_41_6[0] = cont_bits_41_5[0];
    cont_bits_41_6[1] = cont_bits_41_5[1];
    cont_bits_41_6[2] = cont_bits_41_5[2];
    cont_bits_41_6[3] = cont_bits_41_5[3];
    cont_bits_41_6[4] = cont_bits_41_5[4];
    cont_bits_41_6[5] = p6250cont_bits_41_cont_bits_41[5];
    cont_bits_41_6[6] = cont_bits_41_5[6];
    cont_bits_41_6[7] = cont_bits_41_5[7];
    cont_bits_41_6[8] = cont_bits_41_5[8];
    cont_bits_41_6[9] = cont_bits_41_5[9];
    cont_bits_41_6[10] = cont_bits_41_5[10];
    cont_bits_41_6[11] = cont_bits_41_5[11];
  end

  assign sel_360 = 32'sd0;

  assign sel_361 = 32'sd0;

  assign sel_362 = 32'sd0;

  assign sel_363 = 32'sd0;

  assign sel_364 = 32'sd0;

  assign sel_365 = 32'sd0;

  assign sel_366 = 32'sd0;

  assign sel_367 = 32'sd0;

  assign sel_368 = 32'sd0;

  assign sel_369 = 32'sd0;

  assign sel_370 = 32'sd0;

  assign sel_371 = 32'sd0;

  assign s_104 = 32'sd6;

  assign sel_1_70 = (s_13 == 1'b0 ? sel_371 :
              s_104);

  assign sel_372 = 32'sd0;

  assign sel_1_71 = (s_14 == 1'b0 ? sel_1_70 :
              sel_372);

  assign sel_373 = 32'sd0;

  assign sel_1_72 = (s_15 == 1'b0 ? sel_1_71 :
              sel_373);

  assign sel_374 = 32'sd0;

  assign sel_1_73 = (s_16 == 1'b0 ? sel_1_72 :
              sel_374);

  assign sel_375 = 32'sd0;

  assign sel_1_74 = (s_17 == 1'b0 ? sel_1_73 :
              sel_375);

  assign sel_376 = 32'sd0;

  assign sel_1_75 = (s_18 == 1'b0 ? sel_1_74 :
              sel_376);

  assign sel_377 = 32'sd0;

  assign sel_1_76 = (s_19 == 1'b0 ? sel_1_75 :
              sel_377);

  assign sel_378 = 32'sd0;

  assign sel_1_77 = (s_20 == 1'b0 ? sel_1_76 :
              sel_378);

  assign sel_379 = 32'sd0;

  assign sel_380 = 32'sd0;

  assign sel_381 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_77, sel_360, sel_361, sel_362, sel_363, sel_364, sel_365,
       sel_366, sel_367, sel_368, sel_369, sel_370, sel_379, sel_380, sel_381) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9982_sel_1 = sel_380;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9982_sel_1 = sel_379;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9982_sel_1 = sel_1_77;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9982_sel_1 = sel_370;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9982_sel_1 = sel_369;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9982_sel_1 = sel_368;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9982_sel_1 = sel_367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9982_sel_1 = sel_366;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9982_sel_1 = sel_365;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9982_sel_1 = sel_364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9982_sel_1 = sel_363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9982_sel_1 = sel_362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9982_sel_1 = sel_361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9982_sel_1 = sel_360;
        end
      default :
        begin
          p9982_sel_1 = sel_381;
        end
    endcase
    sel_1_78 = p9982_sel_1;
  end

  assign tmp_98 = functionOutput[sel_1_78];

  assign sel_382 = 1'b0;

  assign sel_383 = 1'b0;

  assign sel_384 = 1'b0;

  assign sel_385 = 1'b0;

  assign sel_386 = 1'b0;

  assign sel_387 = 1'b0;

  assign sel_388 = 1'b0;

  assign sel_389 = 1'b0;

  assign sel_390 = 1'b0;

  assign sel_391 = 1'b0;

  assign sel_392 = 1'b0;

  assign sel_393 = 1'b0;

  assign s_105 = 1'b1;

  assign sel_2_135 = (s_13 == 1'b0 ? sel_393 :
              s_105);

  assign sel_394 = 1'b0;

  assign sel_2_136 = (s_14 == 1'b0 ? sel_2_135 :
              sel_394);

  assign sel_395 = 1'b0;

  assign sel_2_137 = (s_15 == 1'b0 ? sel_2_136 :
              sel_395);

  assign sel_396 = 1'b0;

  assign sel_2_138 = (s_16 == 1'b0 ? sel_2_137 :
              sel_396);

  assign sel_397 = 1'b0;

  assign sel_2_139 = (s_17 == 1'b0 ? sel_2_138 :
              sel_397);

  assign sel_398 = 1'b0;

  assign sel_2_140 = (s_18 == 1'b0 ? sel_2_139 :
              sel_398);

  assign sel_399 = 1'b0;

  assign sel_2_141 = (s_19 == 1'b0 ? sel_2_140 :
              sel_399);

  assign sel_400 = 1'b0;

  assign sel_2_142 = (s_20 == 1'b0 ? sel_2_141 :
              sel_400);

  assign sel_401 = 1'b0;

  assign sel_402 = 1'b0;

  assign sel_403 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_142, sel_382, sel_383, sel_384, sel_385, sel_386,
       sel_387, sel_388, sel_389, sel_390, sel_391, sel_392, sel_401, sel_402,
       sel_403) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5833_sel_2 = sel_402;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5833_sel_2 = sel_401;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5833_sel_2 = sel_2_142;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5833_sel_2 = sel_392;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5833_sel_2 = sel_391;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5833_sel_2 = sel_390;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5833_sel_2 = sel_389;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5833_sel_2 = sel_388;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5833_sel_2 = sel_387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5833_sel_2 = sel_386;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5833_sel_2 = sel_385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5833_sel_2 = sel_384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5833_sel_2 = sel_383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5833_sel_2 = sel_382;
        end
      default :
        begin
          p5833_sel_2 = sel_403;
        end
    endcase
    sel_2_143 = p5833_sel_2;
  end

  always @* begin
    p5832cont_bits_41_cont_bits_41[6] = cont_bits_41_6[6];
    if (sel_2_143) begin
      p5832cont_bits_41_cont_bits_41[6] = tmp_98;
    end
    cont_bits_41_7[0] = cont_bits_41_6[0];
    cont_bits_41_7[1] = cont_bits_41_6[1];
    cont_bits_41_7[2] = cont_bits_41_6[2];
    cont_bits_41_7[3] = cont_bits_41_6[3];
    cont_bits_41_7[4] = cont_bits_41_6[4];
    cont_bits_41_7[5] = cont_bits_41_6[5];
    cont_bits_41_7[6] = p5832cont_bits_41_cont_bits_41[6];
    cont_bits_41_7[7] = cont_bits_41_6[7];
    cont_bits_41_7[8] = cont_bits_41_6[8];
    cont_bits_41_7[9] = cont_bits_41_6[9];
    cont_bits_41_7[10] = cont_bits_41_6[10];
    cont_bits_41_7[11] = cont_bits_41_6[11];
  end

  assign sel_404 = 32'sd0;

  assign sel_405 = 32'sd0;

  assign sel_406 = 32'sd0;

  assign sel_407 = 32'sd0;

  assign sel_408 = 32'sd0;

  assign sel_409 = 32'sd0;

  assign sel_410 = 32'sd0;

  assign sel_411 = 32'sd0;

  assign sel_412 = 32'sd0;

  assign sel_413 = 32'sd0;

  assign sel_414 = 32'sd0;

  assign sel_415 = 32'sd0;

  assign s_106 = 32'sd7;

  assign sel_1_79 = (s_13 == 1'b0 ? sel_415 :
              s_106);

  assign sel_416 = 32'sd0;

  assign sel_1_80 = (s_14 == 1'b0 ? sel_1_79 :
              sel_416);

  assign sel_417 = 32'sd0;

  assign sel_1_81 = (s_15 == 1'b0 ? sel_1_80 :
              sel_417);

  assign sel_418 = 32'sd0;

  assign sel_1_82 = (s_16 == 1'b0 ? sel_1_81 :
              sel_418);

  assign sel_419 = 32'sd0;

  assign sel_1_83 = (s_17 == 1'b0 ? sel_1_82 :
              sel_419);

  assign sel_420 = 32'sd0;

  assign sel_1_84 = (s_18 == 1'b0 ? sel_1_83 :
              sel_420);

  assign sel_421 = 32'sd0;

  assign sel_1_85 = (s_19 == 1'b0 ? sel_1_84 :
              sel_421);

  assign sel_422 = 32'sd0;

  assign sel_1_86 = (s_20 == 1'b0 ? sel_1_85 :
              sel_422);

  assign sel_423 = 32'sd0;

  assign sel_424 = 32'sd0;

  assign sel_425 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_86, sel_404, sel_405, sel_406, sel_407, sel_408, sel_409,
       sel_410, sel_411, sel_412, sel_413, sel_414, sel_423, sel_424, sel_425) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11291_sel_1 = sel_424;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11291_sel_1 = sel_423;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11291_sel_1 = sel_1_86;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11291_sel_1 = sel_414;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11291_sel_1 = sel_413;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11291_sel_1 = sel_412;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11291_sel_1 = sel_411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11291_sel_1 = sel_410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11291_sel_1 = sel_409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11291_sel_1 = sel_408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11291_sel_1 = sel_407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11291_sel_1 = sel_406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11291_sel_1 = sel_405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11291_sel_1 = sel_404;
        end
      default :
        begin
          p11291_sel_1 = sel_425;
        end
    endcase
    sel_1_87 = p11291_sel_1;
  end

  assign tmp_99 = functionOutput[sel_1_87];

  assign sel_426 = 1'b0;

  assign sel_427 = 1'b0;

  assign sel_428 = 1'b0;

  assign sel_429 = 1'b0;

  assign sel_430 = 1'b0;

  assign sel_431 = 1'b0;

  assign sel_432 = 1'b0;

  assign sel_433 = 1'b0;

  assign sel_434 = 1'b0;

  assign sel_435 = 1'b0;

  assign sel_436 = 1'b0;

  assign sel_437 = 1'b0;

  assign s_107 = 1'b1;

  assign sel_2_144 = (s_13 == 1'b0 ? sel_437 :
              s_107);

  assign sel_438 = 1'b0;

  assign sel_2_145 = (s_14 == 1'b0 ? sel_2_144 :
              sel_438);

  assign sel_439 = 1'b0;

  assign sel_2_146 = (s_15 == 1'b0 ? sel_2_145 :
              sel_439);

  assign sel_440 = 1'b0;

  assign sel_2_147 = (s_16 == 1'b0 ? sel_2_146 :
              sel_440);

  assign sel_441 = 1'b0;

  assign sel_2_148 = (s_17 == 1'b0 ? sel_2_147 :
              sel_441);

  assign sel_442 = 1'b0;

  assign sel_2_149 = (s_18 == 1'b0 ? sel_2_148 :
              sel_442);

  assign sel_443 = 1'b0;

  assign sel_2_150 = (s_19 == 1'b0 ? sel_2_149 :
              sel_443);

  assign sel_444 = 1'b0;

  assign sel_2_151 = (s_20 == 1'b0 ? sel_2_150 :
              sel_444);

  assign sel_445 = 1'b0;

  assign sel_446 = 1'b0;

  assign sel_447 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_151, sel_426, sel_427, sel_428, sel_429, sel_430,
       sel_431, sel_432, sel_433, sel_434, sel_435, sel_436, sel_445, sel_446,
       sel_447) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5645_sel_2 = sel_446;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5645_sel_2 = sel_445;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5645_sel_2 = sel_2_151;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5645_sel_2 = sel_436;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5645_sel_2 = sel_435;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5645_sel_2 = sel_434;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5645_sel_2 = sel_433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5645_sel_2 = sel_432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5645_sel_2 = sel_431;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5645_sel_2 = sel_430;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5645_sel_2 = sel_429;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5645_sel_2 = sel_428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5645_sel_2 = sel_427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5645_sel_2 = sel_426;
        end
      default :
        begin
          p5645_sel_2 = sel_447;
        end
    endcase
    sel_2_152 = p5645_sel_2;
  end

  always @* begin
    p5644cont_bits_41_cont_bits_41[7] = cont_bits_41_7[7];
    if (sel_2_152) begin
      p5644cont_bits_41_cont_bits_41[7] = tmp_99;
    end
    cont_bits_41_8[0] = cont_bits_41_7[0];
    cont_bits_41_8[1] = cont_bits_41_7[1];
    cont_bits_41_8[2] = cont_bits_41_7[2];
    cont_bits_41_8[3] = cont_bits_41_7[3];
    cont_bits_41_8[4] = cont_bits_41_7[4];
    cont_bits_41_8[5] = cont_bits_41_7[5];
    cont_bits_41_8[6] = cont_bits_41_7[6];
    cont_bits_41_8[7] = p5644cont_bits_41_cont_bits_41[7];
    cont_bits_41_8[8] = cont_bits_41_7[8];
    cont_bits_41_8[9] = cont_bits_41_7[9];
    cont_bits_41_8[10] = cont_bits_41_7[10];
    cont_bits_41_8[11] = cont_bits_41_7[11];
  end

  assign sel_448 = 32'sd0;

  assign sel_449 = 32'sd0;

  assign sel_450 = 32'sd0;

  assign sel_451 = 32'sd0;

  assign sel_452 = 32'sd0;

  assign sel_453 = 32'sd0;

  assign sel_454 = 32'sd0;

  assign sel_455 = 32'sd0;

  assign sel_456 = 32'sd0;

  assign sel_457 = 32'sd0;

  assign sel_458 = 32'sd0;

  assign sel_459 = 32'sd0;

  assign s_108 = 32'sd8;

  assign sel_1_88 = (s_13 == 1'b0 ? sel_459 :
              s_108);

  assign sel_460 = 32'sd0;

  assign sel_1_89 = (s_14 == 1'b0 ? sel_1_88 :
              sel_460);

  assign sel_461 = 32'sd0;

  assign sel_1_90 = (s_15 == 1'b0 ? sel_1_89 :
              sel_461);

  assign sel_462 = 32'sd0;

  assign sel_1_91 = (s_16 == 1'b0 ? sel_1_90 :
              sel_462);

  assign sel_463 = 32'sd0;

  assign sel_1_92 = (s_17 == 1'b0 ? sel_1_91 :
              sel_463);

  assign sel_464 = 32'sd0;

  assign sel_1_93 = (s_18 == 1'b0 ? sel_1_92 :
              sel_464);

  assign sel_465 = 32'sd0;

  assign sel_1_94 = (s_19 == 1'b0 ? sel_1_93 :
              sel_465);

  assign sel_466 = 32'sd0;

  assign sel_1_95 = (s_20 == 1'b0 ? sel_1_94 :
              sel_466);

  assign sel_467 = 32'sd0;

  assign sel_468 = 32'sd0;

  assign sel_469 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_95, sel_448, sel_449, sel_450, sel_451, sel_452, sel_453,
       sel_454, sel_455, sel_456, sel_457, sel_458, sel_467, sel_468, sel_469) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9965_sel_1 = sel_468;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9965_sel_1 = sel_467;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9965_sel_1 = sel_1_95;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9965_sel_1 = sel_458;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9965_sel_1 = sel_457;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9965_sel_1 = sel_456;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9965_sel_1 = sel_455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9965_sel_1 = sel_454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9965_sel_1 = sel_453;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9965_sel_1 = sel_452;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9965_sel_1 = sel_451;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9965_sel_1 = sel_450;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9965_sel_1 = sel_449;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9965_sel_1 = sel_448;
        end
      default :
        begin
          p9965_sel_1 = sel_469;
        end
    endcase
    sel_1_96 = p9965_sel_1;
  end

  assign tmp_100 = functionOutput[sel_1_96];

  assign sel_470 = 1'b0;

  assign sel_471 = 1'b0;

  assign sel_472 = 1'b0;

  assign sel_473 = 1'b0;

  assign sel_474 = 1'b0;

  assign sel_475 = 1'b0;

  assign sel_476 = 1'b0;

  assign sel_477 = 1'b0;

  assign sel_478 = 1'b0;

  assign sel_479 = 1'b0;

  assign sel_480 = 1'b0;

  assign sel_481 = 1'b0;

  assign s_109 = 1'b1;

  assign sel_2_153 = (s_13 == 1'b0 ? sel_481 :
              s_109);

  assign sel_482 = 1'b0;

  assign sel_2_154 = (s_14 == 1'b0 ? sel_2_153 :
              sel_482);

  assign sel_483 = 1'b0;

  assign sel_2_155 = (s_15 == 1'b0 ? sel_2_154 :
              sel_483);

  assign sel_484 = 1'b0;

  assign sel_2_156 = (s_16 == 1'b0 ? sel_2_155 :
              sel_484);

  assign sel_485 = 1'b0;

  assign sel_2_157 = (s_17 == 1'b0 ? sel_2_156 :
              sel_485);

  assign sel_486 = 1'b0;

  assign sel_2_158 = (s_18 == 1'b0 ? sel_2_157 :
              sel_486);

  assign sel_487 = 1'b0;

  assign sel_2_159 = (s_19 == 1'b0 ? sel_2_158 :
              sel_487);

  assign sel_488 = 1'b0;

  assign sel_2_160 = (s_20 == 1'b0 ? sel_2_159 :
              sel_488);

  assign sel_489 = 1'b0;

  assign sel_490 = 1'b0;

  assign sel_491 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_160, sel_470, sel_471, sel_472, sel_473, sel_474,
       sel_475, sel_476, sel_477, sel_478, sel_479, sel_480, sel_489, sel_490,
       sel_491) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5227_sel_2 = sel_490;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5227_sel_2 = sel_489;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5227_sel_2 = sel_2_160;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5227_sel_2 = sel_480;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5227_sel_2 = sel_479;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5227_sel_2 = sel_478;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5227_sel_2 = sel_477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5227_sel_2 = sel_476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5227_sel_2 = sel_475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5227_sel_2 = sel_474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5227_sel_2 = sel_473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5227_sel_2 = sel_472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5227_sel_2 = sel_471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5227_sel_2 = sel_470;
        end
      default :
        begin
          p5227_sel_2 = sel_491;
        end
    endcase
    sel_2_161 = p5227_sel_2;
  end

  always @* begin
    p5226cont_bits_41_cont_bits_41[8] = cont_bits_41_8[8];
    if (sel_2_161) begin
      p5226cont_bits_41_cont_bits_41[8] = tmp_100;
    end
    cont_bits_41_9[0] = cont_bits_41_8[0];
    cont_bits_41_9[1] = cont_bits_41_8[1];
    cont_bits_41_9[2] = cont_bits_41_8[2];
    cont_bits_41_9[3] = cont_bits_41_8[3];
    cont_bits_41_9[4] = cont_bits_41_8[4];
    cont_bits_41_9[5] = cont_bits_41_8[5];
    cont_bits_41_9[6] = cont_bits_41_8[6];
    cont_bits_41_9[7] = cont_bits_41_8[7];
    cont_bits_41_9[8] = p5226cont_bits_41_cont_bits_41[8];
    cont_bits_41_9[9] = cont_bits_41_8[9];
    cont_bits_41_9[10] = cont_bits_41_8[10];
    cont_bits_41_9[11] = cont_bits_41_8[11];
  end

  assign sel_492 = 32'sd0;

  assign sel_493 = 32'sd0;

  assign sel_494 = 32'sd0;

  assign sel_495 = 32'sd0;

  assign sel_496 = 32'sd0;

  assign sel_497 = 32'sd0;

  assign sel_498 = 32'sd0;

  assign sel_499 = 32'sd0;

  assign sel_500 = 32'sd0;

  assign sel_501 = 32'sd0;

  assign sel_502 = 32'sd0;

  assign sel_503 = 32'sd0;

  assign s_110 = 32'sd9;

  assign sel_1_97 = (s_13 == 1'b0 ? sel_503 :
              s_110);

  assign sel_504 = 32'sd0;

  assign sel_1_98 = (s_14 == 1'b0 ? sel_1_97 :
              sel_504);

  assign sel_505 = 32'sd0;

  assign sel_1_99 = (s_15 == 1'b0 ? sel_1_98 :
              sel_505);

  assign sel_506 = 32'sd0;

  assign sel_1_100 = (s_16 == 1'b0 ? sel_1_99 :
              sel_506);

  assign sel_507 = 32'sd0;

  assign sel_1_101 = (s_17 == 1'b0 ? sel_1_100 :
              sel_507);

  assign sel_508 = 32'sd0;

  assign sel_1_102 = (s_18 == 1'b0 ? sel_1_101 :
              sel_508);

  assign sel_509 = 32'sd0;

  assign sel_1_103 = (s_19 == 1'b0 ? sel_1_102 :
              sel_509);

  assign sel_510 = 32'sd0;

  assign sel_1_104 = (s_20 == 1'b0 ? sel_1_103 :
              sel_510);

  assign sel_511 = 32'sd0;

  assign sel_512 = 32'sd0;

  assign sel_513 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_104, sel_492, sel_493, sel_494, sel_495, sel_496,
       sel_497, sel_498, sel_499, sel_500, sel_501, sel_502, sel_511, sel_512,
       sel_513) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10492_sel_1 = sel_512;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10492_sel_1 = sel_511;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10492_sel_1 = sel_1_104;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10492_sel_1 = sel_502;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10492_sel_1 = sel_501;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10492_sel_1 = sel_500;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10492_sel_1 = sel_499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10492_sel_1 = sel_498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10492_sel_1 = sel_497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10492_sel_1 = sel_496;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10492_sel_1 = sel_495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10492_sel_1 = sel_494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10492_sel_1 = sel_493;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10492_sel_1 = sel_492;
        end
      default :
        begin
          p10492_sel_1 = sel_513;
        end
    endcase
    sel_1_105 = p10492_sel_1;
  end

  assign tmp_101 = functionOutput[sel_1_105];

  assign sel_514 = 1'b0;

  assign sel_515 = 1'b0;

  assign sel_516 = 1'b0;

  assign sel_517 = 1'b0;

  assign sel_518 = 1'b0;

  assign sel_519 = 1'b0;

  assign sel_520 = 1'b0;

  assign sel_521 = 1'b0;

  assign sel_522 = 1'b0;

  assign sel_523 = 1'b0;

  assign sel_524 = 1'b0;

  assign sel_525 = 1'b0;

  assign s_111 = 1'b1;

  assign sel_2_162 = (s_13 == 1'b0 ? sel_525 :
              s_111);

  assign sel_526 = 1'b0;

  assign sel_2_163 = (s_14 == 1'b0 ? sel_2_162 :
              sel_526);

  assign sel_527 = 1'b0;

  assign sel_2_164 = (s_15 == 1'b0 ? sel_2_163 :
              sel_527);

  assign sel_528 = 1'b0;

  assign sel_2_165 = (s_16 == 1'b0 ? sel_2_164 :
              sel_528);

  assign sel_529 = 1'b0;

  assign sel_2_166 = (s_17 == 1'b0 ? sel_2_165 :
              sel_529);

  assign sel_530 = 1'b0;

  assign sel_2_167 = (s_18 == 1'b0 ? sel_2_166 :
              sel_530);

  assign sel_531 = 1'b0;

  assign sel_2_168 = (s_19 == 1'b0 ? sel_2_167 :
              sel_531);

  assign sel_532 = 1'b0;

  assign sel_2_169 = (s_20 == 1'b0 ? sel_2_168 :
              sel_532);

  assign sel_533 = 1'b0;

  assign sel_534 = 1'b0;

  assign sel_535 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_169, sel_514, sel_515, sel_516, sel_517, sel_518,
       sel_519, sel_520, sel_521, sel_522, sel_523, sel_524, sel_533, sel_534,
       sel_535) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5039_sel_2 = sel_534;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5039_sel_2 = sel_533;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5039_sel_2 = sel_2_169;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5039_sel_2 = sel_524;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5039_sel_2 = sel_523;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5039_sel_2 = sel_522;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5039_sel_2 = sel_521;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5039_sel_2 = sel_520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5039_sel_2 = sel_519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5039_sel_2 = sel_518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5039_sel_2 = sel_517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5039_sel_2 = sel_516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5039_sel_2 = sel_515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5039_sel_2 = sel_514;
        end
      default :
        begin
          p5039_sel_2 = sel_535;
        end
    endcase
    sel_2_170 = p5039_sel_2;
  end

  always @* begin
    p5038cont_bits_41_cont_bits_41[9] = cont_bits_41_9[9];
    if (sel_2_170) begin
      p5038cont_bits_41_cont_bits_41[9] = tmp_101;
    end
    cont_bits_41_10[0] = cont_bits_41_9[0];
    cont_bits_41_10[1] = cont_bits_41_9[1];
    cont_bits_41_10[2] = cont_bits_41_9[2];
    cont_bits_41_10[3] = cont_bits_41_9[3];
    cont_bits_41_10[4] = cont_bits_41_9[4];
    cont_bits_41_10[5] = cont_bits_41_9[5];
    cont_bits_41_10[6] = cont_bits_41_9[6];
    cont_bits_41_10[7] = cont_bits_41_9[7];
    cont_bits_41_10[8] = cont_bits_41_9[8];
    cont_bits_41_10[9] = p5038cont_bits_41_cont_bits_41[9];
    cont_bits_41_10[10] = cont_bits_41_9[10];
    cont_bits_41_10[11] = cont_bits_41_9[11];
  end

  assign sel_536 = 32'sd0;

  assign sel_537 = 32'sd0;

  assign sel_538 = 32'sd0;

  assign sel_539 = 32'sd0;

  assign sel_540 = 32'sd0;

  assign sel_541 = 32'sd0;

  assign sel_542 = 32'sd0;

  assign sel_543 = 32'sd0;

  assign sel_544 = 32'sd0;

  assign sel_545 = 32'sd0;

  assign sel_546 = 32'sd0;

  assign sel_547 = 32'sd0;

  assign s_112 = 32'sd10;

  assign sel_1_106 = (s_13 == 1'b0 ? sel_547 :
              s_112);

  assign sel_548 = 32'sd0;

  assign sel_1_107 = (s_14 == 1'b0 ? sel_1_106 :
              sel_548);

  assign sel_549 = 32'sd0;

  assign sel_1_108 = (s_15 == 1'b0 ? sel_1_107 :
              sel_549);

  assign sel_550 = 32'sd0;

  assign sel_1_109 = (s_16 == 1'b0 ? sel_1_108 :
              sel_550);

  assign sel_551 = 32'sd0;

  assign sel_1_110 = (s_17 == 1'b0 ? sel_1_109 :
              sel_551);

  assign sel_552 = 32'sd0;

  assign sel_1_111 = (s_18 == 1'b0 ? sel_1_110 :
              sel_552);

  assign sel_553 = 32'sd0;

  assign sel_1_112 = (s_19 == 1'b0 ? sel_1_111 :
              sel_553);

  assign sel_554 = 32'sd0;

  assign sel_1_113 = (s_20 == 1'b0 ? sel_1_112 :
              sel_554);

  assign sel_555 = 32'sd0;

  assign sel_556 = 32'sd0;

  assign sel_557 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_113, sel_536, sel_537, sel_538, sel_539, sel_540,
       sel_541, sel_542, sel_543, sel_544, sel_545, sel_546, sel_555, sel_556,
       sel_557) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10373_sel_1 = sel_556;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10373_sel_1 = sel_555;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10373_sel_1 = sel_1_113;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10373_sel_1 = sel_546;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10373_sel_1 = sel_545;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10373_sel_1 = sel_544;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10373_sel_1 = sel_543;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10373_sel_1 = sel_542;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10373_sel_1 = sel_541;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10373_sel_1 = sel_540;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10373_sel_1 = sel_539;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10373_sel_1 = sel_538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10373_sel_1 = sel_537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10373_sel_1 = sel_536;
        end
      default :
        begin
          p10373_sel_1 = sel_557;
        end
    endcase
    sel_1_114 = p10373_sel_1;
  end

  assign tmp_102 = functionOutput[sel_1_114];

  assign sel_558 = 1'b0;

  assign sel_559 = 1'b0;

  assign sel_560 = 1'b0;

  assign sel_561 = 1'b0;

  assign sel_562 = 1'b0;

  assign sel_563 = 1'b0;

  assign sel_564 = 1'b0;

  assign sel_565 = 1'b0;

  assign sel_566 = 1'b0;

  assign sel_567 = 1'b0;

  assign sel_568 = 1'b0;

  assign sel_569 = 1'b0;

  assign s_113 = 1'b1;

  assign sel_2_171 = (s_13 == 1'b0 ? sel_569 :
              s_113);

  assign sel_570 = 1'b0;

  assign sel_2_172 = (s_14 == 1'b0 ? sel_2_171 :
              sel_570);

  assign sel_571 = 1'b0;

  assign sel_2_173 = (s_15 == 1'b0 ? sel_2_172 :
              sel_571);

  assign sel_572 = 1'b0;

  assign sel_2_174 = (s_16 == 1'b0 ? sel_2_173 :
              sel_572);

  assign sel_573 = 1'b0;

  assign sel_2_175 = (s_17 == 1'b0 ? sel_2_174 :
              sel_573);

  assign sel_574 = 1'b0;

  assign sel_2_176 = (s_18 == 1'b0 ? sel_2_175 :
              sel_574);

  assign sel_575 = 1'b0;

  assign sel_2_177 = (s_19 == 1'b0 ? sel_2_176 :
              sel_575);

  assign sel_576 = 1'b0;

  assign sel_2_178 = (s_20 == 1'b0 ? sel_2_177 :
              sel_576);

  assign sel_577 = 1'b0;

  assign sel_578 = 1'b0;

  assign sel_579 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_178, sel_558, sel_559, sel_560, sel_561, sel_562,
       sel_563, sel_564, sel_565, sel_566, sel_567, sel_568, sel_577, sel_578,
       sel_579) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4621_sel_2 = sel_578;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4621_sel_2 = sel_577;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4621_sel_2 = sel_2_178;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4621_sel_2 = sel_568;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4621_sel_2 = sel_567;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4621_sel_2 = sel_566;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4621_sel_2 = sel_565;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4621_sel_2 = sel_564;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4621_sel_2 = sel_563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4621_sel_2 = sel_562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4621_sel_2 = sel_561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4621_sel_2 = sel_560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4621_sel_2 = sel_559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4621_sel_2 = sel_558;
        end
      default :
        begin
          p4621_sel_2 = sel_579;
        end
    endcase
    sel_2_179 = p4621_sel_2;
  end

  always @* begin
    p4620cont_bits_41_cont_bits_41[10] = cont_bits_41_10[10];
    if (sel_2_179) begin
      p4620cont_bits_41_cont_bits_41[10] = tmp_102;
    end
    cont_bits_41_11[0] = cont_bits_41_10[0];
    cont_bits_41_11[1] = cont_bits_41_10[1];
    cont_bits_41_11[2] = cont_bits_41_10[2];
    cont_bits_41_11[3] = cont_bits_41_10[3];
    cont_bits_41_11[4] = cont_bits_41_10[4];
    cont_bits_41_11[5] = cont_bits_41_10[5];
    cont_bits_41_11[6] = cont_bits_41_10[6];
    cont_bits_41_11[7] = cont_bits_41_10[7];
    cont_bits_41_11[8] = cont_bits_41_10[8];
    cont_bits_41_11[9] = cont_bits_41_10[9];
    cont_bits_41_11[10] = p4620cont_bits_41_cont_bits_41[10];
    cont_bits_41_11[11] = cont_bits_41_10[11];
  end

  assign sel_580 = 32'sd0;

  assign sel_581 = 32'sd0;

  assign sel_582 = 32'sd0;

  assign sel_583 = 32'sd0;

  assign sel_584 = 32'sd0;

  assign sel_585 = 32'sd0;

  assign sel_586 = 32'sd0;

  assign sel_587 = 32'sd0;

  assign sel_588 = 32'sd0;

  assign sel_589 = 32'sd0;

  assign sel_590 = 32'sd0;

  assign sel_591 = 32'sd0;

  assign s_114 = 32'sd11;

  assign sel_1_115 = (s_13 == 1'b0 ? sel_591 :
              s_114);

  assign sel_592 = 32'sd0;

  assign sel_1_116 = (s_14 == 1'b0 ? sel_1_115 :
              sel_592);

  assign sel_593 = 32'sd0;

  assign sel_1_117 = (s_15 == 1'b0 ? sel_1_116 :
              sel_593);

  assign sel_594 = 32'sd0;

  assign sel_1_118 = (s_16 == 1'b0 ? sel_1_117 :
              sel_594);

  assign sel_595 = 32'sd0;

  assign sel_1_119 = (s_17 == 1'b0 ? sel_1_118 :
              sel_595);

  assign sel_596 = 32'sd0;

  assign sel_1_120 = (s_18 == 1'b0 ? sel_1_119 :
              sel_596);

  assign sel_597 = 32'sd0;

  assign sel_1_121 = (s_19 == 1'b0 ? sel_1_120 :
              sel_597);

  assign sel_598 = 32'sd0;

  assign sel_1_122 = (s_20 == 1'b0 ? sel_1_121 :
              sel_598);

  assign sel_599 = 32'sd0;

  assign sel_600 = 32'sd0;

  assign sel_601 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_122, sel_580, sel_581, sel_582, sel_583, sel_584,
       sel_585, sel_586, sel_587, sel_588, sel_589, sel_590, sel_599, sel_600,
       sel_601) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10424_sel_1 = sel_600;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10424_sel_1 = sel_599;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10424_sel_1 = sel_1_122;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10424_sel_1 = sel_590;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10424_sel_1 = sel_589;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10424_sel_1 = sel_588;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10424_sel_1 = sel_587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10424_sel_1 = sel_586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10424_sel_1 = sel_585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10424_sel_1 = sel_584;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10424_sel_1 = sel_583;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10424_sel_1 = sel_582;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10424_sel_1 = sel_581;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10424_sel_1 = sel_580;
        end
      default :
        begin
          p10424_sel_1 = sel_601;
        end
    endcase
    sel_1_123 = p10424_sel_1;
  end

  assign tmp_103 = functionOutput[sel_1_123];

  assign sel_602 = 1'b0;

  assign sel_603 = 1'b0;

  assign sel_604 = 1'b0;

  assign sel_605 = 1'b0;

  assign sel_606 = 1'b0;

  assign sel_607 = 1'b0;

  assign sel_608 = 1'b0;

  assign sel_609 = 1'b0;

  assign sel_610 = 1'b0;

  assign sel_611 = 1'b0;

  assign sel_612 = 1'b0;

  assign sel_613 = 1'b0;

  assign s_115 = 1'b1;

  assign sel_2_180 = (s_13 == 1'b0 ? sel_613 :
              s_115);

  assign sel_614 = 1'b0;

  assign sel_2_181 = (s_14 == 1'b0 ? sel_2_180 :
              sel_614);

  assign sel_615 = 1'b0;

  assign sel_2_182 = (s_15 == 1'b0 ? sel_2_181 :
              sel_615);

  assign sel_616 = 1'b0;

  assign sel_2_183 = (s_16 == 1'b0 ? sel_2_182 :
              sel_616);

  assign sel_617 = 1'b0;

  assign sel_2_184 = (s_17 == 1'b0 ? sel_2_183 :
              sel_617);

  assign sel_618 = 1'b0;

  assign sel_2_185 = (s_18 == 1'b0 ? sel_2_184 :
              sel_618);

  assign sel_619 = 1'b0;

  assign sel_2_186 = (s_19 == 1'b0 ? sel_2_185 :
              sel_619);

  assign sel_620 = 1'b0;

  assign sel_2_187 = (s_20 == 1'b0 ? sel_2_186 :
              sel_620);

  assign sel_621 = 1'b0;

  assign sel_622 = 1'b0;

  assign sel_623 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_187, sel_602, sel_603, sel_604, sel_605, sel_606,
       sel_607, sel_608, sel_609, sel_610, sel_611, sel_612, sel_621, sel_622,
       sel_623) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4433_sel_2 = sel_622;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4433_sel_2 = sel_621;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4433_sel_2 = sel_2_187;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4433_sel_2 = sel_612;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4433_sel_2 = sel_611;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4433_sel_2 = sel_610;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4433_sel_2 = sel_609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4433_sel_2 = sel_608;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4433_sel_2 = sel_607;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4433_sel_2 = sel_606;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4433_sel_2 = sel_605;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4433_sel_2 = sel_604;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4433_sel_2 = sel_603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4433_sel_2 = sel_602;
        end
      default :
        begin
          p4433_sel_2 = sel_623;
        end
    endcase
    sel_2_188 = p4433_sel_2;
  end

  always @* begin
    p4432cont_bits_41_cont_bits_41[11] = cont_bits_41_11[11];
    if (sel_2_188) begin
      p4432cont_bits_41_cont_bits_41[11] = tmp_103;
    end
    cont_bits_41_12[0] = cont_bits_41_11[0];
    cont_bits_41_12[1] = cont_bits_41_11[1];
    cont_bits_41_12[2] = cont_bits_41_11[2];
    cont_bits_41_12[3] = cont_bits_41_11[3];
    cont_bits_41_12[4] = cont_bits_41_11[4];
    cont_bits_41_12[5] = cont_bits_41_11[5];
    cont_bits_41_12[6] = cont_bits_41_11[6];
    cont_bits_41_12[7] = cont_bits_41_11[7];
    cont_bits_41_12[8] = cont_bits_41_11[8];
    cont_bits_41_12[9] = cont_bits_41_11[9];
    cont_bits_41_12[10] = cont_bits_41_11[10];
    cont_bits_41_12[11] = p4432cont_bits_41_cont_bits_41[11];
  end

  assign sel_624 = 32'sd0;

  assign sel_625 = 32'sd0;

  assign sel_626 = 32'sd0;

  assign sel_627 = 32'sd0;

  assign sel_628 = 32'sd0;

  assign sel_629 = 32'sd0;

  assign sel_630 = 32'sd0;

  assign sel_631 = 32'sd0;

  assign sel_632 = 32'sd0;

  assign sel_633 = 32'sd0;

  assign sel_634 = 32'sd0;

  assign sel_635 = 32'sd0;

  assign s_116 = 32'sd0;

  assign sel_1_124 = (s_13 == 1'b0 ? sel_635 :
              s_116);

  assign sel_636 = 32'sd0;

  assign sel_1_125 = (s_14 == 1'b0 ? sel_1_124 :
              sel_636);

  assign sel_637 = 32'sd0;

  assign sel_1_126 = (s_15 == 1'b0 ? sel_1_125 :
              sel_637);

  assign sel_638 = 32'sd0;

  assign sel_1_127 = (s_16 == 1'b0 ? sel_1_126 :
              sel_638);

  assign sel_639 = 32'sd0;

  assign sel_1_128 = (s_17 == 1'b0 ? sel_1_127 :
              sel_639);

  assign sel_640 = 32'sd0;

  assign sel_1_129 = (s_18 == 1'b0 ? sel_1_128 :
              sel_640);

  assign sel_641 = 32'sd0;

  assign sel_1_130 = (s_19 == 1'b0 ? sel_1_129 :
              sel_641);

  assign sel_642 = 32'sd0;

  assign sel_1_131 = (s_20 == 1'b0 ? sel_1_130 :
              sel_642);

  assign sel_643 = 32'sd0;

  assign sel_644 = 32'sd0;

  assign sel_645 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_131, sel_624, sel_625, sel_626, sel_627, sel_628,
       sel_629, sel_630, sel_631, sel_632, sel_633, sel_634, sel_643, sel_644,
       sel_645) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2158_sel_1 = sel_644;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2158_sel_1 = sel_643;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2158_sel_1 = sel_1_131;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2158_sel_1 = sel_634;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2158_sel_1 = sel_633;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2158_sel_1 = sel_632;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2158_sel_1 = sel_631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2158_sel_1 = sel_630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2158_sel_1 = sel_629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2158_sel_1 = sel_628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2158_sel_1 = sel_627;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2158_sel_1 = sel_626;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2158_sel_1 = sel_625;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2158_sel_1 = sel_624;
        end
      default :
        begin
          p2158_sel_1 = sel_645;
        end
    endcase
    sel_1_132 = p2158_sel_1;
  end

  assign cont_bits_41_13 = cont_bits_41_12[sel_1_132];

  assign cont_bits_42[0] = 1'b0;
  assign cont_bits_42[1] = 1'b0;
  assign cont_bits_42[2] = 1'b0;
  assign cont_bits_42[3] = 1'b0;
  assign cont_bits_42[4] = 1'b0;
  assign cont_bits_42[5] = 1'b0;
  assign cont_bits_42[6] = 1'b0;
  assign cont_bits_42[7] = 1'b0;
  assign cont_bits_42[8] = 1'b0;
  assign cont_bits_42[9] = 1'b0;
  assign cont_bits_42[10] = 1'b0;
  assign cont_bits_42[11] = 1'b0;

  assign tmp_104 = (s_13 == 1'b0 ? v4_2 :
              r_v42);

  assign tmp_105 = (s_14 == 1'b0 ? tmp_104 :
              r_v42);

  assign tmp_106 = (s_15 == 1'b0 ? tmp_105 :
              r_v42);

  assign tmp_107 = (s_16 == 1'b0 ? tmp_106 :
              r_v42);

  assign tmp_108 = (s_17 == 1'b0 ? tmp_107 :
              r_v42);

  assign tmp_109 = (s_18 == 1'b0 ? tmp_108 :
              r_v42);

  assign tmp_110 = (s_19 == 1'b0 ? tmp_109 :
              r_v42);

  assign tmp_111 = (s_20 == 1'b0 ? tmp_110 :
              r_v42);

  always @(is_SPI_MNGR_36, r_v42, tmp_111, v4_2) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p78_tmp = tmp_111;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p78_tmp = v4_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p78_tmp = r_v42;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p78_tmp = r_v42;
        end
      default :
        begin
          p78_tmp = r_v42;
        end
    endcase
    tmp_112 = p78_tmp;
  end

  always @(posedge clk)
    begin : r_v42_reg_process
      if (rst == 1'b1) begin
        r_v42 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v42 <= tmp_112;
        end
      end
    end

  simfcn1 u_simfcn1_1 (.vx(r_v42),  // uint16
                       .cont_bits2_0(functionOutput_0_1),  // boolean
                       .cont_bits2_1(functionOutput_1_1),  // boolean
                       .cont_bits2_2(functionOutput_2_1),  // boolean
                       .cont_bits2_3(functionOutput_3_1),  // boolean
                       .cont_bits2_4(functionOutput_4_1),  // boolean
                       .cont_bits2_5(functionOutput_5_1),  // boolean
                       .cont_bits2_6(functionOutput_6_1),  // boolean
                       .cont_bits2_7(functionOutput_7_1),  // boolean
                       .cont_bits2_8(functionOutput_8_1),  // boolean
                       .cont_bits2_9(functionOutput_9_1),  // boolean
                       .cont_bits2_10(functionOutput_10_1),  // boolean
                       .cont_bits2_11(functionOutput_11_1)  // boolean
                       );

  assign functionOutput_12[0] = functionOutput_0_1;
  assign functionOutput_12[1] = functionOutput_1_1;
  assign functionOutput_12[2] = functionOutput_2_1;
  assign functionOutput_12[3] = functionOutput_3_1;
  assign functionOutput_12[4] = functionOutput_4_1;
  assign functionOutput_12[5] = functionOutput_5_1;
  assign functionOutput_12[6] = functionOutput_6_1;
  assign functionOutput_12[7] = functionOutput_7_1;
  assign functionOutput_12[8] = functionOutput_8_1;
  assign functionOutput_12[9] = functionOutput_9_1;
  assign functionOutput_12[10] = functionOutput_10_1;
  assign functionOutput_12[11] = functionOutput_11_1;

  assign sel_646 = 32'sd0;

  assign sel_647 = 32'sd0;

  assign sel_648 = 32'sd0;

  assign sel_649 = 32'sd0;

  assign sel_650 = 32'sd0;

  assign sel_651 = 32'sd0;

  assign sel_652 = 32'sd0;

  assign sel_653 = 32'sd0;

  assign sel_654 = 32'sd0;

  assign sel_655 = 32'sd0;

  assign sel_656 = 32'sd0;

  assign sel_657 = 32'sd0;

  assign s_117 = 32'sd0;

  assign sel_1_133 = (s_14 == 1'b0 ? sel_657 :
              s_117);

  assign sel_658 = 32'sd0;

  assign sel_1_134 = (s_15 == 1'b0 ? sel_1_133 :
              sel_658);

  assign sel_659 = 32'sd0;

  assign sel_1_135 = (s_16 == 1'b0 ? sel_1_134 :
              sel_659);

  assign sel_660 = 32'sd0;

  assign sel_1_136 = (s_17 == 1'b0 ? sel_1_135 :
              sel_660);

  assign sel_661 = 32'sd0;

  assign sel_1_137 = (s_18 == 1'b0 ? sel_1_136 :
              sel_661);

  assign sel_662 = 32'sd0;

  assign sel_1_138 = (s_19 == 1'b0 ? sel_1_137 :
              sel_662);

  assign sel_663 = 32'sd0;

  assign sel_1_139 = (s_20 == 1'b0 ? sel_1_138 :
              sel_663);

  assign sel_664 = 32'sd0;

  assign sel_665 = 32'sd0;

  assign sel_666 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_139, sel_646, sel_647, sel_648, sel_649, sel_650,
       sel_651, sel_652, sel_653, sel_654, sel_655, sel_656, sel_664, sel_665,
       sel_666) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10985_sel_1 = sel_665;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10985_sel_1 = sel_664;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10985_sel_1 = sel_1_139;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10985_sel_1 = sel_656;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10985_sel_1 = sel_655;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10985_sel_1 = sel_654;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10985_sel_1 = sel_653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10985_sel_1 = sel_652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10985_sel_1 = sel_651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10985_sel_1 = sel_650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10985_sel_1 = sel_649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10985_sel_1 = sel_648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10985_sel_1 = sel_647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10985_sel_1 = sel_646;
        end
      default :
        begin
          p10985_sel_1 = sel_666;
        end
    endcase
    sel_1_140 = p10985_sel_1;
  end

  assign tmp_113 = functionOutput_12[sel_1_140];

  assign sel_667 = 1'b0;

  assign sel_668 = 1'b0;

  assign sel_669 = 1'b0;

  assign sel_670 = 1'b0;

  assign sel_671 = 1'b0;

  assign sel_672 = 1'b0;

  assign sel_673 = 1'b0;

  assign sel_674 = 1'b0;

  assign sel_675 = 1'b0;

  assign sel_676 = 1'b0;

  assign sel_677 = 1'b0;

  assign sel_678 = 1'b0;

  assign s_118 = 1'b1;

  assign sel_2_189 = (s_14 == 1'b0 ? sel_678 :
              s_118);

  assign sel_679 = 1'b0;

  assign sel_2_190 = (s_15 == 1'b0 ? sel_2_189 :
              sel_679);

  assign sel_680 = 1'b0;

  assign sel_2_191 = (s_16 == 1'b0 ? sel_2_190 :
              sel_680);

  assign sel_681 = 1'b0;

  assign sel_2_192 = (s_17 == 1'b0 ? sel_2_191 :
              sel_681);

  assign sel_682 = 1'b0;

  assign sel_2_193 = (s_18 == 1'b0 ? sel_2_192 :
              sel_682);

  assign sel_683 = 1'b0;

  assign sel_2_194 = (s_19 == 1'b0 ? sel_2_193 :
              sel_683);

  assign sel_684 = 1'b0;

  assign sel_2_195 = (s_20 == 1'b0 ? sel_2_194 :
              sel_684);

  assign sel_685 = 1'b0;

  assign sel_686 = 1'b0;

  assign sel_687 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_195, sel_667, sel_668, sel_669, sel_670, sel_671,
       sel_672, sel_673, sel_674, sel_675, sel_676, sel_677, sel_685, sel_686,
       sel_687) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7616_sel_2 = sel_686;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7616_sel_2 = sel_685;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7616_sel_2 = sel_2_195;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7616_sel_2 = sel_677;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7616_sel_2 = sel_676;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7616_sel_2 = sel_675;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7616_sel_2 = sel_674;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7616_sel_2 = sel_673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7616_sel_2 = sel_672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7616_sel_2 = sel_671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7616_sel_2 = sel_670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7616_sel_2 = sel_669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7616_sel_2 = sel_668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7616_sel_2 = sel_667;
        end
      default :
        begin
          p7616_sel_2 = sel_687;
        end
    endcase
    sel_2_196 = p7616_sel_2;
  end

  always @* begin
    p7615cont_bits_42_cont_bits_42[0] = cont_bits_42[0];
    if (sel_2_196) begin
      p7615cont_bits_42_cont_bits_42[0] = tmp_113;
    end
    cont_bits_42_1[0] = p7615cont_bits_42_cont_bits_42[0];
    cont_bits_42_1[1] = cont_bits_42[1];
    cont_bits_42_1[2] = cont_bits_42[2];
    cont_bits_42_1[3] = cont_bits_42[3];
    cont_bits_42_1[4] = cont_bits_42[4];
    cont_bits_42_1[5] = cont_bits_42[5];
    cont_bits_42_1[6] = cont_bits_42[6];
    cont_bits_42_1[7] = cont_bits_42[7];
    cont_bits_42_1[8] = cont_bits_42[8];
    cont_bits_42_1[9] = cont_bits_42[9];
    cont_bits_42_1[10] = cont_bits_42[10];
    cont_bits_42_1[11] = cont_bits_42[11];
  end

  assign sel_688 = 32'sd0;

  assign sel_689 = 32'sd0;

  assign sel_690 = 32'sd0;

  assign sel_691 = 32'sd0;

  assign sel_692 = 32'sd0;

  assign sel_693 = 32'sd0;

  assign sel_694 = 32'sd0;

  assign sel_695 = 32'sd0;

  assign sel_696 = 32'sd0;

  assign sel_697 = 32'sd0;

  assign sel_698 = 32'sd0;

  assign sel_699 = 32'sd0;

  assign s_119 = 32'sd1;

  assign sel_1_141 = (s_14 == 1'b0 ? sel_699 :
              s_119);

  assign sel_700 = 32'sd0;

  assign sel_1_142 = (s_15 == 1'b0 ? sel_1_141 :
              sel_700);

  assign sel_701 = 32'sd0;

  assign sel_1_143 = (s_16 == 1'b0 ? sel_1_142 :
              sel_701);

  assign sel_702 = 32'sd0;

  assign sel_1_144 = (s_17 == 1'b0 ? sel_1_143 :
              sel_702);

  assign sel_703 = 32'sd0;

  assign sel_1_145 = (s_18 == 1'b0 ? sel_1_144 :
              sel_703);

  assign sel_704 = 32'sd0;

  assign sel_1_146 = (s_19 == 1'b0 ? sel_1_145 :
              sel_704);

  assign sel_705 = 32'sd0;

  assign sel_1_147 = (s_20 == 1'b0 ? sel_1_146 :
              sel_705);

  assign sel_706 = 32'sd0;

  assign sel_707 = 32'sd0;

  assign sel_708 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_147, sel_688, sel_689, sel_690, sel_691, sel_692,
       sel_693, sel_694, sel_695, sel_696, sel_697, sel_698, sel_706, sel_707,
       sel_708) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11002_sel_1 = sel_707;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11002_sel_1 = sel_706;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11002_sel_1 = sel_1_147;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11002_sel_1 = sel_698;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11002_sel_1 = sel_697;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11002_sel_1 = sel_696;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11002_sel_1 = sel_695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11002_sel_1 = sel_694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11002_sel_1 = sel_693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11002_sel_1 = sel_692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11002_sel_1 = sel_691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11002_sel_1 = sel_690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11002_sel_1 = sel_689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11002_sel_1 = sel_688;
        end
      default :
        begin
          p11002_sel_1 = sel_708;
        end
    endcase
    sel_1_148 = p11002_sel_1;
  end

  assign tmp_114 = functionOutput_12[sel_1_148];

  assign sel_709 = 1'b0;

  assign sel_710 = 1'b0;

  assign sel_711 = 1'b0;

  assign sel_712 = 1'b0;

  assign sel_713 = 1'b0;

  assign sel_714 = 1'b0;

  assign sel_715 = 1'b0;

  assign sel_716 = 1'b0;

  assign sel_717 = 1'b0;

  assign sel_718 = 1'b0;

  assign sel_719 = 1'b0;

  assign sel_720 = 1'b0;

  assign s_120 = 1'b1;

  assign sel_2_197 = (s_14 == 1'b0 ? sel_720 :
              s_120);

  assign sel_721 = 1'b0;

  assign sel_2_198 = (s_15 == 1'b0 ? sel_2_197 :
              sel_721);

  assign sel_722 = 1'b0;

  assign sel_2_199 = (s_16 == 1'b0 ? sel_2_198 :
              sel_722);

  assign sel_723 = 1'b0;

  assign sel_2_200 = (s_17 == 1'b0 ? sel_2_199 :
              sel_723);

  assign sel_724 = 1'b0;

  assign sel_2_201 = (s_18 == 1'b0 ? sel_2_200 :
              sel_724);

  assign sel_725 = 1'b0;

  assign sel_2_202 = (s_19 == 1'b0 ? sel_2_201 :
              sel_725);

  assign sel_726 = 1'b0;

  assign sel_2_203 = (s_20 == 1'b0 ? sel_2_202 :
              sel_726);

  assign sel_727 = 1'b0;

  assign sel_728 = 1'b0;

  assign sel_729 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_203, sel_709, sel_710, sel_711, sel_712, sel_713,
       sel_714, sel_715, sel_716, sel_717, sel_718, sel_719, sel_727, sel_728,
       sel_729) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7563_sel_2 = sel_728;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7563_sel_2 = sel_727;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7563_sel_2 = sel_2_203;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7563_sel_2 = sel_719;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7563_sel_2 = sel_718;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7563_sel_2 = sel_717;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7563_sel_2 = sel_716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7563_sel_2 = sel_715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7563_sel_2 = sel_714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7563_sel_2 = sel_713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7563_sel_2 = sel_712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7563_sel_2 = sel_711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7563_sel_2 = sel_710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7563_sel_2 = sel_709;
        end
      default :
        begin
          p7563_sel_2 = sel_729;
        end
    endcase
    sel_2_204 = p7563_sel_2;
  end

  always @* begin
    p7562cont_bits_42_cont_bits_42[1] = cont_bits_42_1[1];
    if (sel_2_204) begin
      p7562cont_bits_42_cont_bits_42[1] = tmp_114;
    end
    cont_bits_42_2[0] = cont_bits_42_1[0];
    cont_bits_42_2[1] = p7562cont_bits_42_cont_bits_42[1];
    cont_bits_42_2[2] = cont_bits_42_1[2];
    cont_bits_42_2[3] = cont_bits_42_1[3];
    cont_bits_42_2[4] = cont_bits_42_1[4];
    cont_bits_42_2[5] = cont_bits_42_1[5];
    cont_bits_42_2[6] = cont_bits_42_1[6];
    cont_bits_42_2[7] = cont_bits_42_1[7];
    cont_bits_42_2[8] = cont_bits_42_1[8];
    cont_bits_42_2[9] = cont_bits_42_1[9];
    cont_bits_42_2[10] = cont_bits_42_1[10];
    cont_bits_42_2[11] = cont_bits_42_1[11];
  end

  assign sel_730 = 32'sd0;

  assign sel_731 = 32'sd0;

  assign sel_732 = 32'sd0;

  assign sel_733 = 32'sd0;

  assign sel_734 = 32'sd0;

  assign sel_735 = 32'sd0;

  assign sel_736 = 32'sd0;

  assign sel_737 = 32'sd0;

  assign sel_738 = 32'sd0;

  assign sel_739 = 32'sd0;

  assign sel_740 = 32'sd0;

  assign sel_741 = 32'sd0;

  assign s_121 = 32'sd2;

  assign sel_1_149 = (s_14 == 1'b0 ? sel_741 :
              s_121);

  assign sel_742 = 32'sd0;

  assign sel_1_150 = (s_15 == 1'b0 ? sel_1_149 :
              sel_742);

  assign sel_743 = 32'sd0;

  assign sel_1_151 = (s_16 == 1'b0 ? sel_1_150 :
              sel_743);

  assign sel_744 = 32'sd0;

  assign sel_1_152 = (s_17 == 1'b0 ? sel_1_151 :
              sel_744);

  assign sel_745 = 32'sd0;

  assign sel_1_153 = (s_18 == 1'b0 ? sel_1_152 :
              sel_745);

  assign sel_746 = 32'sd0;

  assign sel_1_154 = (s_19 == 1'b0 ? sel_1_153 :
              sel_746);

  assign sel_747 = 32'sd0;

  assign sel_1_155 = (s_20 == 1'b0 ? sel_1_154 :
              sel_747);

  assign sel_748 = 32'sd0;

  assign sel_749 = 32'sd0;

  assign sel_750 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_155, sel_730, sel_731, sel_732, sel_733, sel_734,
       sel_735, sel_736, sel_737, sel_738, sel_739, sel_740, sel_748, sel_749,
       sel_750) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9999_sel_1 = sel_749;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9999_sel_1 = sel_748;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9999_sel_1 = sel_1_155;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9999_sel_1 = sel_740;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9999_sel_1 = sel_739;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9999_sel_1 = sel_738;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9999_sel_1 = sel_737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9999_sel_1 = sel_736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9999_sel_1 = sel_735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9999_sel_1 = sel_734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9999_sel_1 = sel_733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9999_sel_1 = sel_732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9999_sel_1 = sel_731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9999_sel_1 = sel_730;
        end
      default :
        begin
          p9999_sel_1 = sel_750;
        end
    endcase
    sel_1_156 = p9999_sel_1;
  end

  assign tmp_115 = functionOutput_12[sel_1_156];

  assign sel_751 = 1'b0;

  assign sel_752 = 1'b0;

  assign sel_753 = 1'b0;

  assign sel_754 = 1'b0;

  assign sel_755 = 1'b0;

  assign sel_756 = 1'b0;

  assign sel_757 = 1'b0;

  assign sel_758 = 1'b0;

  assign sel_759 = 1'b0;

  assign sel_760 = 1'b0;

  assign sel_761 = 1'b0;

  assign sel_762 = 1'b0;

  assign s_122 = 1'b1;

  assign sel_2_205 = (s_14 == 1'b0 ? sel_762 :
              s_122);

  assign sel_763 = 1'b0;

  assign sel_2_206 = (s_15 == 1'b0 ? sel_2_205 :
              sel_763);

  assign sel_764 = 1'b0;

  assign sel_2_207 = (s_16 == 1'b0 ? sel_2_206 :
              sel_764);

  assign sel_765 = 1'b0;

  assign sel_2_208 = (s_17 == 1'b0 ? sel_2_207 :
              sel_765);

  assign sel_766 = 1'b0;

  assign sel_2_209 = (s_18 == 1'b0 ? sel_2_208 :
              sel_766);

  assign sel_767 = 1'b0;

  assign sel_2_210 = (s_19 == 1'b0 ? sel_2_209 :
              sel_767);

  assign sel_768 = 1'b0;

  assign sel_2_211 = (s_20 == 1'b0 ? sel_2_210 :
              sel_768);

  assign sel_769 = 1'b0;

  assign sel_770 = 1'b0;

  assign sel_771 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_211, sel_751, sel_752, sel_753, sel_754, sel_755,
       sel_756, sel_757, sel_758, sel_759, sel_760, sel_761, sel_769, sel_770,
       sel_771) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6978_sel_2 = sel_770;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6978_sel_2 = sel_769;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6978_sel_2 = sel_2_211;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6978_sel_2 = sel_761;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6978_sel_2 = sel_760;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6978_sel_2 = sel_759;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6978_sel_2 = sel_758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6978_sel_2 = sel_757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6978_sel_2 = sel_756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6978_sel_2 = sel_755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6978_sel_2 = sel_754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6978_sel_2 = sel_753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6978_sel_2 = sel_752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6978_sel_2 = sel_751;
        end
      default :
        begin
          p6978_sel_2 = sel_771;
        end
    endcase
    sel_2_212 = p6978_sel_2;
  end

  always @* begin
    p6977cont_bits_42_cont_bits_42[2] = cont_bits_42_2[2];
    if (sel_2_212) begin
      p6977cont_bits_42_cont_bits_42[2] = tmp_115;
    end
    cont_bits_42_3[0] = cont_bits_42_2[0];
    cont_bits_42_3[1] = cont_bits_42_2[1];
    cont_bits_42_3[2] = p6977cont_bits_42_cont_bits_42[2];
    cont_bits_42_3[3] = cont_bits_42_2[3];
    cont_bits_42_3[4] = cont_bits_42_2[4];
    cont_bits_42_3[5] = cont_bits_42_2[5];
    cont_bits_42_3[6] = cont_bits_42_2[6];
    cont_bits_42_3[7] = cont_bits_42_2[7];
    cont_bits_42_3[8] = cont_bits_42_2[8];
    cont_bits_42_3[9] = cont_bits_42_2[9];
    cont_bits_42_3[10] = cont_bits_42_2[10];
    cont_bits_42_3[11] = cont_bits_42_2[11];
  end

  assign sel_772 = 32'sd0;

  assign sel_773 = 32'sd0;

  assign sel_774 = 32'sd0;

  assign sel_775 = 32'sd0;

  assign sel_776 = 32'sd0;

  assign sel_777 = 32'sd0;

  assign sel_778 = 32'sd0;

  assign sel_779 = 32'sd0;

  assign sel_780 = 32'sd0;

  assign sel_781 = 32'sd0;

  assign sel_782 = 32'sd0;

  assign sel_783 = 32'sd0;

  assign s_123 = 32'sd3;

  assign sel_1_157 = (s_14 == 1'b0 ? sel_783 :
              s_123);

  assign sel_784 = 32'sd0;

  assign sel_1_158 = (s_15 == 1'b0 ? sel_1_157 :
              sel_784);

  assign sel_785 = 32'sd0;

  assign sel_1_159 = (s_16 == 1'b0 ? sel_1_158 :
              sel_785);

  assign sel_786 = 32'sd0;

  assign sel_1_160 = (s_17 == 1'b0 ? sel_1_159 :
              sel_786);

  assign sel_787 = 32'sd0;

  assign sel_1_161 = (s_18 == 1'b0 ? sel_1_160 :
              sel_787);

  assign sel_788 = 32'sd0;

  assign sel_1_162 = (s_19 == 1'b0 ? sel_1_161 :
              sel_788);

  assign sel_789 = 32'sd0;

  assign sel_1_163 = (s_20 == 1'b0 ? sel_1_162 :
              sel_789);

  assign sel_790 = 32'sd0;

  assign sel_791 = 32'sd0;

  assign sel_792 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_163, sel_772, sel_773, sel_774, sel_775, sel_776,
       sel_777, sel_778, sel_779, sel_780, sel_781, sel_782, sel_790, sel_791,
       sel_792) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10968_sel_1 = sel_791;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10968_sel_1 = sel_790;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10968_sel_1 = sel_1_163;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10968_sel_1 = sel_782;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10968_sel_1 = sel_781;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10968_sel_1 = sel_780;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10968_sel_1 = sel_779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10968_sel_1 = sel_778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10968_sel_1 = sel_777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10968_sel_1 = sel_776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10968_sel_1 = sel_775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10968_sel_1 = sel_774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10968_sel_1 = sel_773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10968_sel_1 = sel_772;
        end
      default :
        begin
          p10968_sel_1 = sel_792;
        end
    endcase
    sel_1_164 = p10968_sel_1;
  end

  assign tmp_116 = functionOutput_12[sel_1_164];

  assign sel_793 = 1'b0;

  assign sel_794 = 1'b0;

  assign sel_795 = 1'b0;

  assign sel_796 = 1'b0;

  assign sel_797 = 1'b0;

  assign sel_798 = 1'b0;

  assign sel_799 = 1'b0;

  assign sel_800 = 1'b0;

  assign sel_801 = 1'b0;

  assign sel_802 = 1'b0;

  assign sel_803 = 1'b0;

  assign sel_804 = 1'b0;

  assign s_124 = 1'b1;

  assign sel_2_213 = (s_14 == 1'b0 ? sel_804 :
              s_124);

  assign sel_805 = 1'b0;

  assign sel_2_214 = (s_15 == 1'b0 ? sel_2_213 :
              sel_805);

  assign sel_806 = 1'b0;

  assign sel_2_215 = (s_16 == 1'b0 ? sel_2_214 :
              sel_806);

  assign sel_807 = 1'b0;

  assign sel_2_216 = (s_17 == 1'b0 ? sel_2_215 :
              sel_807);

  assign sel_808 = 1'b0;

  assign sel_2_217 = (s_18 == 1'b0 ? sel_2_216 :
              sel_808);

  assign sel_809 = 1'b0;

  assign sel_2_218 = (s_19 == 1'b0 ? sel_2_217 :
              sel_809);

  assign sel_810 = 1'b0;

  assign sel_2_219 = (s_20 == 1'b0 ? sel_2_218 :
              sel_810);

  assign sel_811 = 1'b0;

  assign sel_812 = 1'b0;

  assign sel_813 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_219, sel_793, sel_794, sel_795, sel_796, sel_797,
       sel_798, sel_799, sel_800, sel_801, sel_802, sel_803, sel_811, sel_812,
       sel_813) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6925_sel_2 = sel_812;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6925_sel_2 = sel_811;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6925_sel_2 = sel_2_219;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6925_sel_2 = sel_803;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6925_sel_2 = sel_802;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6925_sel_2 = sel_801;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6925_sel_2 = sel_800;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6925_sel_2 = sel_799;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6925_sel_2 = sel_798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6925_sel_2 = sel_797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6925_sel_2 = sel_796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6925_sel_2 = sel_795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6925_sel_2 = sel_794;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6925_sel_2 = sel_793;
        end
      default :
        begin
          p6925_sel_2 = sel_813;
        end
    endcase
    sel_2_220 = p6925_sel_2;
  end

  always @* begin
    p6924cont_bits_42_cont_bits_42[3] = cont_bits_42_3[3];
    if (sel_2_220) begin
      p6924cont_bits_42_cont_bits_42[3] = tmp_116;
    end
    cont_bits_42_4[0] = cont_bits_42_3[0];
    cont_bits_42_4[1] = cont_bits_42_3[1];
    cont_bits_42_4[2] = cont_bits_42_3[2];
    cont_bits_42_4[3] = p6924cont_bits_42_cont_bits_42[3];
    cont_bits_42_4[4] = cont_bits_42_3[4];
    cont_bits_42_4[5] = cont_bits_42_3[5];
    cont_bits_42_4[6] = cont_bits_42_3[6];
    cont_bits_42_4[7] = cont_bits_42_3[7];
    cont_bits_42_4[8] = cont_bits_42_3[8];
    cont_bits_42_4[9] = cont_bits_42_3[9];
    cont_bits_42_4[10] = cont_bits_42_3[10];
    cont_bits_42_4[11] = cont_bits_42_3[11];
  end

  assign sel_814 = 32'sd0;

  assign sel_815 = 32'sd0;

  assign sel_816 = 32'sd0;

  assign sel_817 = 32'sd0;

  assign sel_818 = 32'sd0;

  assign sel_819 = 32'sd0;

  assign sel_820 = 32'sd0;

  assign sel_821 = 32'sd0;

  assign sel_822 = 32'sd0;

  assign sel_823 = 32'sd0;

  assign sel_824 = 32'sd0;

  assign sel_825 = 32'sd0;

  assign s_125 = 32'sd4;

  assign sel_1_165 = (s_14 == 1'b0 ? sel_825 :
              s_125);

  assign sel_826 = 32'sd0;

  assign sel_1_166 = (s_15 == 1'b0 ? sel_1_165 :
              sel_826);

  assign sel_827 = 32'sd0;

  assign sel_1_167 = (s_16 == 1'b0 ? sel_1_166 :
              sel_827);

  assign sel_828 = 32'sd0;

  assign sel_1_168 = (s_17 == 1'b0 ? sel_1_167 :
              sel_828);

  assign sel_829 = 32'sd0;

  assign sel_1_169 = (s_18 == 1'b0 ? sel_1_168 :
              sel_829);

  assign sel_830 = 32'sd0;

  assign sel_1_170 = (s_19 == 1'b0 ? sel_1_169 :
              sel_830);

  assign sel_831 = 32'sd0;

  assign sel_1_171 = (s_20 == 1'b0 ? sel_1_170 :
              sel_831);

  assign sel_832 = 32'sd0;

  assign sel_833 = 32'sd0;

  assign sel_834 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_171, sel_814, sel_815, sel_816, sel_817, sel_818,
       sel_819, sel_820, sel_821, sel_822, sel_823, sel_824, sel_832, sel_833,
       sel_834) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10849_sel_1 = sel_833;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10849_sel_1 = sel_832;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10849_sel_1 = sel_1_171;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10849_sel_1 = sel_824;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10849_sel_1 = sel_823;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10849_sel_1 = sel_822;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10849_sel_1 = sel_821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10849_sel_1 = sel_820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10849_sel_1 = sel_819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10849_sel_1 = sel_818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10849_sel_1 = sel_817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10849_sel_1 = sel_816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10849_sel_1 = sel_815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10849_sel_1 = sel_814;
        end
      default :
        begin
          p10849_sel_1 = sel_834;
        end
    endcase
    sel_1_172 = p10849_sel_1;
  end

  assign tmp_117 = functionOutput_12[sel_1_172];

  assign sel_835 = 1'b0;

  assign sel_836 = 1'b0;

  assign sel_837 = 1'b0;

  assign sel_838 = 1'b0;

  assign sel_839 = 1'b0;

  assign sel_840 = 1'b0;

  assign sel_841 = 1'b0;

  assign sel_842 = 1'b0;

  assign sel_843 = 1'b0;

  assign sel_844 = 1'b0;

  assign sel_845 = 1'b0;

  assign sel_846 = 1'b0;

  assign s_126 = 1'b1;

  assign sel_2_221 = (s_14 == 1'b0 ? sel_846 :
              s_126);

  assign sel_847 = 1'b0;

  assign sel_2_222 = (s_15 == 1'b0 ? sel_2_221 :
              sel_847);

  assign sel_848 = 1'b0;

  assign sel_2_223 = (s_16 == 1'b0 ? sel_2_222 :
              sel_848);

  assign sel_849 = 1'b0;

  assign sel_2_224 = (s_17 == 1'b0 ? sel_2_223 :
              sel_849);

  assign sel_850 = 1'b0;

  assign sel_2_225 = (s_18 == 1'b0 ? sel_2_224 :
              sel_850);

  assign sel_851 = 1'b0;

  assign sel_2_226 = (s_19 == 1'b0 ? sel_2_225 :
              sel_851);

  assign sel_852 = 1'b0;

  assign sel_2_227 = (s_20 == 1'b0 ? sel_2_226 :
              sel_852);

  assign sel_853 = 1'b0;

  assign sel_854 = 1'b0;

  assign sel_855 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_227, sel_835, sel_836, sel_837, sel_838, sel_839,
       sel_840, sel_841, sel_842, sel_843, sel_844, sel_845, sel_853, sel_854,
       sel_855) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6371_sel_2 = sel_854;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6371_sel_2 = sel_853;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6371_sel_2 = sel_2_227;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6371_sel_2 = sel_845;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6371_sel_2 = sel_844;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6371_sel_2 = sel_843;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6371_sel_2 = sel_842;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6371_sel_2 = sel_841;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6371_sel_2 = sel_840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6371_sel_2 = sel_839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6371_sel_2 = sel_838;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6371_sel_2 = sel_837;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6371_sel_2 = sel_836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6371_sel_2 = sel_835;
        end
      default :
        begin
          p6371_sel_2 = sel_855;
        end
    endcase
    sel_2_228 = p6371_sel_2;
  end

  always @* begin
    p6370cont_bits_42_cont_bits_42[4] = cont_bits_42_4[4];
    if (sel_2_228) begin
      p6370cont_bits_42_cont_bits_42[4] = tmp_117;
    end
    cont_bits_42_5[0] = cont_bits_42_4[0];
    cont_bits_42_5[1] = cont_bits_42_4[1];
    cont_bits_42_5[2] = cont_bits_42_4[2];
    cont_bits_42_5[3] = cont_bits_42_4[3];
    cont_bits_42_5[4] = p6370cont_bits_42_cont_bits_42[4];
    cont_bits_42_5[5] = cont_bits_42_4[5];
    cont_bits_42_5[6] = cont_bits_42_4[6];
    cont_bits_42_5[7] = cont_bits_42_4[7];
    cont_bits_42_5[8] = cont_bits_42_4[8];
    cont_bits_42_5[9] = cont_bits_42_4[9];
    cont_bits_42_5[10] = cont_bits_42_4[10];
    cont_bits_42_5[11] = cont_bits_42_4[11];
  end

  assign sel_856 = 32'sd0;

  assign sel_857 = 32'sd0;

  assign sel_858 = 32'sd0;

  assign sel_859 = 32'sd0;

  assign sel_860 = 32'sd0;

  assign sel_861 = 32'sd0;

  assign sel_862 = 32'sd0;

  assign sel_863 = 32'sd0;

  assign sel_864 = 32'sd0;

  assign sel_865 = 32'sd0;

  assign sel_866 = 32'sd0;

  assign sel_867 = 32'sd0;

  assign s_127 = 32'sd5;

  assign sel_1_173 = (s_14 == 1'b0 ? sel_867 :
              s_127);

  assign sel_868 = 32'sd0;

  assign sel_1_174 = (s_15 == 1'b0 ? sel_1_173 :
              sel_868);

  assign sel_869 = 32'sd0;

  assign sel_1_175 = (s_16 == 1'b0 ? sel_1_174 :
              sel_869);

  assign sel_870 = 32'sd0;

  assign sel_1_176 = (s_17 == 1'b0 ? sel_1_175 :
              sel_870);

  assign sel_871 = 32'sd0;

  assign sel_1_177 = (s_18 == 1'b0 ? sel_1_176 :
              sel_871);

  assign sel_872 = 32'sd0;

  assign sel_1_178 = (s_19 == 1'b0 ? sel_1_177 :
              sel_872);

  assign sel_873 = 32'sd0;

  assign sel_1_179 = (s_20 == 1'b0 ? sel_1_178 :
              sel_873);

  assign sel_874 = 32'sd0;

  assign sel_875 = 32'sd0;

  assign sel_876 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_179, sel_856, sel_857, sel_858, sel_859, sel_860,
       sel_861, sel_862, sel_863, sel_864, sel_865, sel_866, sel_874, sel_875,
       sel_876) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10033_sel_1 = sel_875;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10033_sel_1 = sel_874;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10033_sel_1 = sel_1_179;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10033_sel_1 = sel_866;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10033_sel_1 = sel_865;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10033_sel_1 = sel_864;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10033_sel_1 = sel_863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10033_sel_1 = sel_862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10033_sel_1 = sel_861;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10033_sel_1 = sel_860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10033_sel_1 = sel_859;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10033_sel_1 = sel_858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10033_sel_1 = sel_857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10033_sel_1 = sel_856;
        end
      default :
        begin
          p10033_sel_1 = sel_876;
        end
    endcase
    sel_1_180 = p10033_sel_1;
  end

  assign tmp_118 = functionOutput_12[sel_1_180];

  assign sel_877 = 1'b0;

  assign sel_878 = 1'b0;

  assign sel_879 = 1'b0;

  assign sel_880 = 1'b0;

  assign sel_881 = 1'b0;

  assign sel_882 = 1'b0;

  assign sel_883 = 1'b0;

  assign sel_884 = 1'b0;

  assign sel_885 = 1'b0;

  assign sel_886 = 1'b0;

  assign sel_887 = 1'b0;

  assign sel_888 = 1'b0;

  assign s_128 = 1'b1;

  assign sel_2_229 = (s_14 == 1'b0 ? sel_888 :
              s_128);

  assign sel_889 = 1'b0;

  assign sel_2_230 = (s_15 == 1'b0 ? sel_2_229 :
              sel_889);

  assign sel_890 = 1'b0;

  assign sel_2_231 = (s_16 == 1'b0 ? sel_2_230 :
              sel_890);

  assign sel_891 = 1'b0;

  assign sel_2_232 = (s_17 == 1'b0 ? sel_2_231 :
              sel_891);

  assign sel_892 = 1'b0;

  assign sel_2_233 = (s_18 == 1'b0 ? sel_2_232 :
              sel_892);

  assign sel_893 = 1'b0;

  assign sel_2_234 = (s_19 == 1'b0 ? sel_2_233 :
              sel_893);

  assign sel_894 = 1'b0;

  assign sel_2_235 = (s_20 == 1'b0 ? sel_2_234 :
              sel_894);

  assign sel_895 = 1'b0;

  assign sel_896 = 1'b0;

  assign sel_897 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_235, sel_877, sel_878, sel_879, sel_880, sel_881,
       sel_882, sel_883, sel_884, sel_885, sel_886, sel_887, sel_895, sel_896,
       sel_897) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6319_sel_2 = sel_896;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6319_sel_2 = sel_895;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6319_sel_2 = sel_2_235;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6319_sel_2 = sel_887;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6319_sel_2 = sel_886;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6319_sel_2 = sel_885;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6319_sel_2 = sel_884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6319_sel_2 = sel_883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6319_sel_2 = sel_882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6319_sel_2 = sel_881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6319_sel_2 = sel_880;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6319_sel_2 = sel_879;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6319_sel_2 = sel_878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6319_sel_2 = sel_877;
        end
      default :
        begin
          p6319_sel_2 = sel_897;
        end
    endcase
    sel_2_236 = p6319_sel_2;
  end

  always @* begin
    p6318cont_bits_42_cont_bits_42[5] = cont_bits_42_5[5];
    if (sel_2_236) begin
      p6318cont_bits_42_cont_bits_42[5] = tmp_118;
    end
    cont_bits_42_6[0] = cont_bits_42_5[0];
    cont_bits_42_6[1] = cont_bits_42_5[1];
    cont_bits_42_6[2] = cont_bits_42_5[2];
    cont_bits_42_6[3] = cont_bits_42_5[3];
    cont_bits_42_6[4] = cont_bits_42_5[4];
    cont_bits_42_6[5] = p6318cont_bits_42_cont_bits_42[5];
    cont_bits_42_6[6] = cont_bits_42_5[6];
    cont_bits_42_6[7] = cont_bits_42_5[7];
    cont_bits_42_6[8] = cont_bits_42_5[8];
    cont_bits_42_6[9] = cont_bits_42_5[9];
    cont_bits_42_6[10] = cont_bits_42_5[10];
    cont_bits_42_6[11] = cont_bits_42_5[11];
  end

  assign sel_898 = 32'sd0;

  assign sel_899 = 32'sd0;

  assign sel_900 = 32'sd0;

  assign sel_901 = 32'sd0;

  assign sel_902 = 32'sd0;

  assign sel_903 = 32'sd0;

  assign sel_904 = 32'sd0;

  assign sel_905 = 32'sd0;

  assign sel_906 = 32'sd0;

  assign sel_907 = 32'sd0;

  assign sel_908 = 32'sd0;

  assign sel_909 = 32'sd0;

  assign s_129 = 32'sd6;

  assign sel_1_181 = (s_14 == 1'b0 ? sel_909 :
              s_129);

  assign sel_910 = 32'sd0;

  assign sel_1_182 = (s_15 == 1'b0 ? sel_1_181 :
              sel_910);

  assign sel_911 = 32'sd0;

  assign sel_1_183 = (s_16 == 1'b0 ? sel_1_182 :
              sel_911);

  assign sel_912 = 32'sd0;

  assign sel_1_184 = (s_17 == 1'b0 ? sel_1_183 :
              sel_912);

  assign sel_913 = 32'sd0;

  assign sel_1_185 = (s_18 == 1'b0 ? sel_1_184 :
              sel_913);

  assign sel_914 = 32'sd0;

  assign sel_1_186 = (s_19 == 1'b0 ? sel_1_185 :
              sel_914);

  assign sel_915 = 32'sd0;

  assign sel_1_187 = (s_20 == 1'b0 ? sel_1_186 :
              sel_915);

  assign sel_916 = 32'sd0;

  assign sel_917 = 32'sd0;

  assign sel_918 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_187, sel_898, sel_899, sel_900, sel_901, sel_902,
       sel_903, sel_904, sel_905, sel_906, sel_907, sel_908, sel_916, sel_917,
       sel_918) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11342_sel_1 = sel_917;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11342_sel_1 = sel_916;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11342_sel_1 = sel_1_187;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11342_sel_1 = sel_908;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11342_sel_1 = sel_907;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11342_sel_1 = sel_906;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11342_sel_1 = sel_905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11342_sel_1 = sel_904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11342_sel_1 = sel_903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11342_sel_1 = sel_902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11342_sel_1 = sel_901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11342_sel_1 = sel_900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11342_sel_1 = sel_899;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11342_sel_1 = sel_898;
        end
      default :
        begin
          p11342_sel_1 = sel_918;
        end
    endcase
    sel_1_188 = p11342_sel_1;
  end

  assign tmp_119 = functionOutput_12[sel_1_188];

  assign sel_919 = 1'b0;

  assign sel_920 = 1'b0;

  assign sel_921 = 1'b0;

  assign sel_922 = 1'b0;

  assign sel_923 = 1'b0;

  assign sel_924 = 1'b0;

  assign sel_925 = 1'b0;

  assign sel_926 = 1'b0;

  assign sel_927 = 1'b0;

  assign sel_928 = 1'b0;

  assign sel_929 = 1'b0;

  assign sel_930 = 1'b0;

  assign s_130 = 1'b1;

  assign sel_2_237 = (s_14 == 1'b0 ? sel_930 :
              s_130);

  assign sel_931 = 1'b0;

  assign sel_2_238 = (s_15 == 1'b0 ? sel_2_237 :
              sel_931);

  assign sel_932 = 1'b0;

  assign sel_2_239 = (s_16 == 1'b0 ? sel_2_238 :
              sel_932);

  assign sel_933 = 1'b0;

  assign sel_2_240 = (s_17 == 1'b0 ? sel_2_239 :
              sel_933);

  assign sel_934 = 1'b0;

  assign sel_2_241 = (s_18 == 1'b0 ? sel_2_240 :
              sel_934);

  assign sel_935 = 1'b0;

  assign sel_2_242 = (s_19 == 1'b0 ? sel_2_241 :
              sel_935);

  assign sel_936 = 1'b0;

  assign sel_2_243 = (s_20 == 1'b0 ? sel_2_242 :
              sel_936);

  assign sel_937 = 1'b0;

  assign sel_938 = 1'b0;

  assign sel_939 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_243, sel_919, sel_920, sel_921, sel_922, sel_923,
       sel_924, sel_925, sel_926, sel_927, sel_928, sel_929, sel_937, sel_938,
       sel_939) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5765_sel_2 = sel_938;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5765_sel_2 = sel_937;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5765_sel_2 = sel_2_243;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5765_sel_2 = sel_929;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5765_sel_2 = sel_928;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5765_sel_2 = sel_927;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5765_sel_2 = sel_926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5765_sel_2 = sel_925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5765_sel_2 = sel_924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5765_sel_2 = sel_923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5765_sel_2 = sel_922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5765_sel_2 = sel_921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5765_sel_2 = sel_920;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5765_sel_2 = sel_919;
        end
      default :
        begin
          p5765_sel_2 = sel_939;
        end
    endcase
    sel_2_244 = p5765_sel_2;
  end

  always @* begin
    p5764cont_bits_42_cont_bits_42[6] = cont_bits_42_6[6];
    if (sel_2_244) begin
      p5764cont_bits_42_cont_bits_42[6] = tmp_119;
    end
    cont_bits_42_7[0] = cont_bits_42_6[0];
    cont_bits_42_7[1] = cont_bits_42_6[1];
    cont_bits_42_7[2] = cont_bits_42_6[2];
    cont_bits_42_7[3] = cont_bits_42_6[3];
    cont_bits_42_7[4] = cont_bits_42_6[4];
    cont_bits_42_7[5] = cont_bits_42_6[5];
    cont_bits_42_7[6] = p5764cont_bits_42_cont_bits_42[6];
    cont_bits_42_7[7] = cont_bits_42_6[7];
    cont_bits_42_7[8] = cont_bits_42_6[8];
    cont_bits_42_7[9] = cont_bits_42_6[9];
    cont_bits_42_7[10] = cont_bits_42_6[10];
    cont_bits_42_7[11] = cont_bits_42_6[11];
  end

  assign sel_940 = 32'sd0;

  assign sel_941 = 32'sd0;

  assign sel_942 = 32'sd0;

  assign sel_943 = 32'sd0;

  assign sel_944 = 32'sd0;

  assign sel_945 = 32'sd0;

  assign sel_946 = 32'sd0;

  assign sel_947 = 32'sd0;

  assign sel_948 = 32'sd0;

  assign sel_949 = 32'sd0;

  assign sel_950 = 32'sd0;

  assign sel_951 = 32'sd0;

  assign s_131 = 32'sd7;

  assign sel_1_189 = (s_14 == 1'b0 ? sel_951 :
              s_131);

  assign sel_952 = 32'sd0;

  assign sel_1_190 = (s_15 == 1'b0 ? sel_1_189 :
              sel_952);

  assign sel_953 = 32'sd0;

  assign sel_1_191 = (s_16 == 1'b0 ? sel_1_190 :
              sel_953);

  assign sel_954 = 32'sd0;

  assign sel_1_192 = (s_17 == 1'b0 ? sel_1_191 :
              sel_954);

  assign sel_955 = 32'sd0;

  assign sel_1_193 = (s_18 == 1'b0 ? sel_1_192 :
              sel_955);

  assign sel_956 = 32'sd0;

  assign sel_1_194 = (s_19 == 1'b0 ? sel_1_193 :
              sel_956);

  assign sel_957 = 32'sd0;

  assign sel_1_195 = (s_20 == 1'b0 ? sel_1_194 :
              sel_957);

  assign sel_958 = 32'sd0;

  assign sel_959 = 32'sd0;

  assign sel_960 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_195, sel_940, sel_941, sel_942, sel_943, sel_944,
       sel_945, sel_946, sel_947, sel_948, sel_949, sel_950, sel_958, sel_959,
       sel_960) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10322_sel_1 = sel_959;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10322_sel_1 = sel_958;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10322_sel_1 = sel_1_195;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10322_sel_1 = sel_950;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10322_sel_1 = sel_949;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10322_sel_1 = sel_948;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10322_sel_1 = sel_947;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10322_sel_1 = sel_946;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10322_sel_1 = sel_945;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10322_sel_1 = sel_944;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10322_sel_1 = sel_943;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10322_sel_1 = sel_942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10322_sel_1 = sel_941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10322_sel_1 = sel_940;
        end
      default :
        begin
          p10322_sel_1 = sel_960;
        end
    endcase
    sel_1_196 = p10322_sel_1;
  end

  assign tmp_120 = functionOutput_12[sel_1_196];

  assign sel_961 = 1'b0;

  assign sel_962 = 1'b0;

  assign sel_963 = 1'b0;

  assign sel_964 = 1'b0;

  assign sel_965 = 1'b0;

  assign sel_966 = 1'b0;

  assign sel_967 = 1'b0;

  assign sel_968 = 1'b0;

  assign sel_969 = 1'b0;

  assign sel_970 = 1'b0;

  assign sel_971 = 1'b0;

  assign sel_972 = 1'b0;

  assign s_132 = 1'b1;

  assign sel_2_245 = (s_14 == 1'b0 ? sel_972 :
              s_132);

  assign sel_973 = 1'b0;

  assign sel_2_246 = (s_15 == 1'b0 ? sel_2_245 :
              sel_973);

  assign sel_974 = 1'b0;

  assign sel_2_247 = (s_16 == 1'b0 ? sel_2_246 :
              sel_974);

  assign sel_975 = 1'b0;

  assign sel_2_248 = (s_17 == 1'b0 ? sel_2_247 :
              sel_975);

  assign sel_976 = 1'b0;

  assign sel_2_249 = (s_18 == 1'b0 ? sel_2_248 :
              sel_976);

  assign sel_977 = 1'b0;

  assign sel_2_250 = (s_19 == 1'b0 ? sel_2_249 :
              sel_977);

  assign sel_978 = 1'b0;

  assign sel_2_251 = (s_20 == 1'b0 ? sel_2_250 :
              sel_978);

  assign sel_979 = 1'b0;

  assign sel_980 = 1'b0;

  assign sel_981 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_251, sel_961, sel_962, sel_963, sel_964, sel_965,
       sel_966, sel_967, sel_968, sel_969, sel_970, sel_971, sel_979, sel_980,
       sel_981) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5713_sel_2 = sel_980;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5713_sel_2 = sel_979;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5713_sel_2 = sel_2_251;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5713_sel_2 = sel_971;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5713_sel_2 = sel_970;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5713_sel_2 = sel_969;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5713_sel_2 = sel_968;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5713_sel_2 = sel_967;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5713_sel_2 = sel_966;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5713_sel_2 = sel_965;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5713_sel_2 = sel_964;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5713_sel_2 = sel_963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5713_sel_2 = sel_962;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5713_sel_2 = sel_961;
        end
      default :
        begin
          p5713_sel_2 = sel_981;
        end
    endcase
    sel_2_252 = p5713_sel_2;
  end

  always @* begin
    p5712cont_bits_42_cont_bits_42[7] = cont_bits_42_7[7];
    if (sel_2_252) begin
      p5712cont_bits_42_cont_bits_42[7] = tmp_120;
    end
    cont_bits_42_8[0] = cont_bits_42_7[0];
    cont_bits_42_8[1] = cont_bits_42_7[1];
    cont_bits_42_8[2] = cont_bits_42_7[2];
    cont_bits_42_8[3] = cont_bits_42_7[3];
    cont_bits_42_8[4] = cont_bits_42_7[4];
    cont_bits_42_8[5] = cont_bits_42_7[5];
    cont_bits_42_8[6] = cont_bits_42_7[6];
    cont_bits_42_8[7] = p5712cont_bits_42_cont_bits_42[7];
    cont_bits_42_8[8] = cont_bits_42_7[8];
    cont_bits_42_8[9] = cont_bits_42_7[9];
    cont_bits_42_8[10] = cont_bits_42_7[10];
    cont_bits_42_8[11] = cont_bits_42_7[11];
  end

  assign sel_982 = 32'sd0;

  assign sel_983 = 32'sd0;

  assign sel_984 = 32'sd0;

  assign sel_985 = 32'sd0;

  assign sel_986 = 32'sd0;

  assign sel_987 = 32'sd0;

  assign sel_988 = 32'sd0;

  assign sel_989 = 32'sd0;

  assign sel_990 = 32'sd0;

  assign sel_991 = 32'sd0;

  assign sel_992 = 32'sd0;

  assign sel_993 = 32'sd0;

  assign s_133 = 32'sd8;

  assign sel_1_197 = (s_14 == 1'b0 ? sel_993 :
              s_133);

  assign sel_994 = 32'sd0;

  assign sel_1_198 = (s_15 == 1'b0 ? sel_1_197 :
              sel_994);

  assign sel_995 = 32'sd0;

  assign sel_1_199 = (s_16 == 1'b0 ? sel_1_198 :
              sel_995);

  assign sel_996 = 32'sd0;

  assign sel_1_200 = (s_17 == 1'b0 ? sel_1_199 :
              sel_996);

  assign sel_997 = 32'sd0;

  assign sel_1_201 = (s_18 == 1'b0 ? sel_1_200 :
              sel_997);

  assign sel_998 = 32'sd0;

  assign sel_1_202 = (s_19 == 1'b0 ? sel_1_201 :
              sel_998);

  assign sel_999 = 32'sd0;

  assign sel_1_203 = (s_20 == 1'b0 ? sel_1_202 :
              sel_999);

  assign sel_1000 = 32'sd0;

  assign sel_1001 = 32'sd0;

  assign sel_1002 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1000, sel_1001, sel_1002, sel_1_203, sel_982, sel_983,
       sel_984, sel_985, sel_986, sel_987, sel_988, sel_989, sel_990, sel_991,
       sel_992) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10577_sel_1 = sel_1001;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10577_sel_1 = sel_1000;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10577_sel_1 = sel_1_203;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10577_sel_1 = sel_992;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10577_sel_1 = sel_991;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10577_sel_1 = sel_990;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10577_sel_1 = sel_989;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10577_sel_1 = sel_988;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10577_sel_1 = sel_987;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10577_sel_1 = sel_986;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10577_sel_1 = sel_985;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10577_sel_1 = sel_984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10577_sel_1 = sel_983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10577_sel_1 = sel_982;
        end
      default :
        begin
          p10577_sel_1 = sel_1002;
        end
    endcase
    sel_1_204 = p10577_sel_1;
  end

  assign tmp_121 = functionOutput_12[sel_1_204];

  assign sel_1003 = 1'b0;

  assign sel_1004 = 1'b0;

  assign sel_1005 = 1'b0;

  assign sel_1006 = 1'b0;

  assign sel_1007 = 1'b0;

  assign sel_1008 = 1'b0;

  assign sel_1009 = 1'b0;

  assign sel_1010 = 1'b0;

  assign sel_1011 = 1'b0;

  assign sel_1012 = 1'b0;

  assign sel_1013 = 1'b0;

  assign sel_1014 = 1'b0;

  assign s_134 = 1'b1;

  assign sel_2_253 = (s_14 == 1'b0 ? sel_1014 :
              s_134);

  assign sel_1015 = 1'b0;

  assign sel_2_254 = (s_15 == 1'b0 ? sel_2_253 :
              sel_1015);

  assign sel_1016 = 1'b0;

  assign sel_2_255 = (s_16 == 1'b0 ? sel_2_254 :
              sel_1016);

  assign sel_1017 = 1'b0;

  assign sel_2_256 = (s_17 == 1'b0 ? sel_2_255 :
              sel_1017);

  assign sel_1018 = 1'b0;

  assign sel_2_257 = (s_18 == 1'b0 ? sel_2_256 :
              sel_1018);

  assign sel_1019 = 1'b0;

  assign sel_2_258 = (s_19 == 1'b0 ? sel_2_257 :
              sel_1019);

  assign sel_1020 = 1'b0;

  assign sel_2_259 = (s_20 == 1'b0 ? sel_2_258 :
              sel_1020);

  assign sel_1021 = 1'b0;

  assign sel_1022 = 1'b0;

  assign sel_1023 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1003, sel_1004, sel_1005, sel_1006, sel_1007, sel_1008,
       sel_1009, sel_1010, sel_1011, sel_1012, sel_1013, sel_1021, sel_1022,
       sel_1023, sel_2_259) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5159_sel_2 = sel_1022;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5159_sel_2 = sel_1021;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5159_sel_2 = sel_2_259;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5159_sel_2 = sel_1013;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5159_sel_2 = sel_1012;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5159_sel_2 = sel_1011;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5159_sel_2 = sel_1010;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5159_sel_2 = sel_1009;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5159_sel_2 = sel_1008;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5159_sel_2 = sel_1007;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5159_sel_2 = sel_1006;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5159_sel_2 = sel_1005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5159_sel_2 = sel_1004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5159_sel_2 = sel_1003;
        end
      default :
        begin
          p5159_sel_2 = sel_1023;
        end
    endcase
    sel_2_260 = p5159_sel_2;
  end

  always @* begin
    p5158cont_bits_42_cont_bits_42[8] = cont_bits_42_8[8];
    if (sel_2_260) begin
      p5158cont_bits_42_cont_bits_42[8] = tmp_121;
    end
    cont_bits_42_9[0] = cont_bits_42_8[0];
    cont_bits_42_9[1] = cont_bits_42_8[1];
    cont_bits_42_9[2] = cont_bits_42_8[2];
    cont_bits_42_9[3] = cont_bits_42_8[3];
    cont_bits_42_9[4] = cont_bits_42_8[4];
    cont_bits_42_9[5] = cont_bits_42_8[5];
    cont_bits_42_9[6] = cont_bits_42_8[6];
    cont_bits_42_9[7] = cont_bits_42_8[7];
    cont_bits_42_9[8] = p5158cont_bits_42_cont_bits_42[8];
    cont_bits_42_9[9] = cont_bits_42_8[9];
    cont_bits_42_9[10] = cont_bits_42_8[10];
    cont_bits_42_9[11] = cont_bits_42_8[11];
  end

  assign sel_1024 = 32'sd0;

  assign sel_1025 = 32'sd0;

  assign sel_1026 = 32'sd0;

  assign sel_1027 = 32'sd0;

  assign sel_1028 = 32'sd0;

  assign sel_1029 = 32'sd0;

  assign sel_1030 = 32'sd0;

  assign sel_1031 = 32'sd0;

  assign sel_1032 = 32'sd0;

  assign sel_1033 = 32'sd0;

  assign sel_1034 = 32'sd0;

  assign sel_1035 = 32'sd0;

  assign s_135 = 32'sd9;

  assign sel_1_205 = (s_14 == 1'b0 ? sel_1035 :
              s_135);

  assign sel_1036 = 32'sd0;

  assign sel_1_206 = (s_15 == 1'b0 ? sel_1_205 :
              sel_1036);

  assign sel_1037 = 32'sd0;

  assign sel_1_207 = (s_16 == 1'b0 ? sel_1_206 :
              sel_1037);

  assign sel_1038 = 32'sd0;

  assign sel_1_208 = (s_17 == 1'b0 ? sel_1_207 :
              sel_1038);

  assign sel_1039 = 32'sd0;

  assign sel_1_209 = (s_18 == 1'b0 ? sel_1_208 :
              sel_1039);

  assign sel_1040 = 32'sd0;

  assign sel_1_210 = (s_19 == 1'b0 ? sel_1_209 :
              sel_1040);

  assign sel_1041 = 32'sd0;

  assign sel_1_211 = (s_20 == 1'b0 ? sel_1_210 :
              sel_1041);

  assign sel_1042 = 32'sd0;

  assign sel_1043 = 32'sd0;

  assign sel_1044 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1024, sel_1025, sel_1026, sel_1027, sel_1028, sel_1029,
       sel_1030, sel_1031, sel_1032, sel_1033, sel_1034, sel_1042, sel_1043,
       sel_1044, sel_1_211) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10339_sel_1 = sel_1043;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10339_sel_1 = sel_1042;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10339_sel_1 = sel_1_211;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10339_sel_1 = sel_1034;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10339_sel_1 = sel_1033;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10339_sel_1 = sel_1032;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10339_sel_1 = sel_1031;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10339_sel_1 = sel_1030;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10339_sel_1 = sel_1029;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10339_sel_1 = sel_1028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10339_sel_1 = sel_1027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10339_sel_1 = sel_1026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10339_sel_1 = sel_1025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10339_sel_1 = sel_1024;
        end
      default :
        begin
          p10339_sel_1 = sel_1044;
        end
    endcase
    sel_1_212 = p10339_sel_1;
  end

  assign tmp_122 = functionOutput_12[sel_1_212];

  assign sel_1045 = 1'b0;

  assign sel_1046 = 1'b0;

  assign sel_1047 = 1'b0;

  assign sel_1048 = 1'b0;

  assign sel_1049 = 1'b0;

  assign sel_1050 = 1'b0;

  assign sel_1051 = 1'b0;

  assign sel_1052 = 1'b0;

  assign sel_1053 = 1'b0;

  assign sel_1054 = 1'b0;

  assign sel_1055 = 1'b0;

  assign sel_1056 = 1'b0;

  assign s_136 = 1'b1;

  assign sel_2_261 = (s_14 == 1'b0 ? sel_1056 :
              s_136);

  assign sel_1057 = 1'b0;

  assign sel_2_262 = (s_15 == 1'b0 ? sel_2_261 :
              sel_1057);

  assign sel_1058 = 1'b0;

  assign sel_2_263 = (s_16 == 1'b0 ? sel_2_262 :
              sel_1058);

  assign sel_1059 = 1'b0;

  assign sel_2_264 = (s_17 == 1'b0 ? sel_2_263 :
              sel_1059);

  assign sel_1060 = 1'b0;

  assign sel_2_265 = (s_18 == 1'b0 ? sel_2_264 :
              sel_1060);

  assign sel_1061 = 1'b0;

  assign sel_2_266 = (s_19 == 1'b0 ? sel_2_265 :
              sel_1061);

  assign sel_1062 = 1'b0;

  assign sel_2_267 = (s_20 == 1'b0 ? sel_2_266 :
              sel_1062);

  assign sel_1063 = 1'b0;

  assign sel_1064 = 1'b0;

  assign sel_1065 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1045, sel_1046, sel_1047, sel_1048, sel_1049, sel_1050,
       sel_1051, sel_1052, sel_1053, sel_1054, sel_1055, sel_1063, sel_1064,
       sel_1065, sel_2_267) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5107_sel_2 = sel_1064;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5107_sel_2 = sel_1063;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5107_sel_2 = sel_2_267;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5107_sel_2 = sel_1055;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5107_sel_2 = sel_1054;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5107_sel_2 = sel_1053;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5107_sel_2 = sel_1052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5107_sel_2 = sel_1051;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5107_sel_2 = sel_1050;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5107_sel_2 = sel_1049;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5107_sel_2 = sel_1048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5107_sel_2 = sel_1047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5107_sel_2 = sel_1046;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5107_sel_2 = sel_1045;
        end
      default :
        begin
          p5107_sel_2 = sel_1065;
        end
    endcase
    sel_2_268 = p5107_sel_2;
  end

  always @* begin
    p5106cont_bits_42_cont_bits_42[9] = cont_bits_42_9[9];
    if (sel_2_268) begin
      p5106cont_bits_42_cont_bits_42[9] = tmp_122;
    end
    cont_bits_42_10[0] = cont_bits_42_9[0];
    cont_bits_42_10[1] = cont_bits_42_9[1];
    cont_bits_42_10[2] = cont_bits_42_9[2];
    cont_bits_42_10[3] = cont_bits_42_9[3];
    cont_bits_42_10[4] = cont_bits_42_9[4];
    cont_bits_42_10[5] = cont_bits_42_9[5];
    cont_bits_42_10[6] = cont_bits_42_9[6];
    cont_bits_42_10[7] = cont_bits_42_9[7];
    cont_bits_42_10[8] = cont_bits_42_9[8];
    cont_bits_42_10[9] = p5106cont_bits_42_cont_bits_42[9];
    cont_bits_42_10[10] = cont_bits_42_9[10];
    cont_bits_42_10[11] = cont_bits_42_9[11];
  end

  assign sel_1066 = 32'sd0;

  assign sel_1067 = 32'sd0;

  assign sel_1068 = 32'sd0;

  assign sel_1069 = 32'sd0;

  assign sel_1070 = 32'sd0;

  assign sel_1071 = 32'sd0;

  assign sel_1072 = 32'sd0;

  assign sel_1073 = 32'sd0;

  assign sel_1074 = 32'sd0;

  assign sel_1075 = 32'sd0;

  assign sel_1076 = 32'sd0;

  assign sel_1077 = 32'sd0;

  assign s_137 = 32'sd10;

  assign sel_1_213 = (s_14 == 1'b0 ? sel_1077 :
              s_137);

  assign sel_1078 = 32'sd0;

  assign sel_1_214 = (s_15 == 1'b0 ? sel_1_213 :
              sel_1078);

  assign sel_1079 = 32'sd0;

  assign sel_1_215 = (s_16 == 1'b0 ? sel_1_214 :
              sel_1079);

  assign sel_1080 = 32'sd0;

  assign sel_1_216 = (s_17 == 1'b0 ? sel_1_215 :
              sel_1080);

  assign sel_1081 = 32'sd0;

  assign sel_1_217 = (s_18 == 1'b0 ? sel_1_216 :
              sel_1081);

  assign sel_1082 = 32'sd0;

  assign sel_1_218 = (s_19 == 1'b0 ? sel_1_217 :
              sel_1082);

  assign sel_1083 = 32'sd0;

  assign sel_1_219 = (s_20 == 1'b0 ? sel_1_218 :
              sel_1083);

  assign sel_1084 = 32'sd0;

  assign sel_1085 = 32'sd0;

  assign sel_1086 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1066, sel_1067, sel_1068, sel_1069, sel_1070, sel_1071,
       sel_1072, sel_1073, sel_1074, sel_1075, sel_1076, sel_1084, sel_1085,
       sel_1086, sel_1_219) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10407_sel_1 = sel_1085;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10407_sel_1 = sel_1084;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10407_sel_1 = sel_1_219;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10407_sel_1 = sel_1076;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10407_sel_1 = sel_1075;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10407_sel_1 = sel_1074;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10407_sel_1 = sel_1073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10407_sel_1 = sel_1072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10407_sel_1 = sel_1071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10407_sel_1 = sel_1070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10407_sel_1 = sel_1069;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10407_sel_1 = sel_1068;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10407_sel_1 = sel_1067;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10407_sel_1 = sel_1066;
        end
      default :
        begin
          p10407_sel_1 = sel_1086;
        end
    endcase
    sel_1_220 = p10407_sel_1;
  end

  assign tmp_123 = functionOutput_12[sel_1_220];

  assign sel_1087 = 1'b0;

  assign sel_1088 = 1'b0;

  assign sel_1089 = 1'b0;

  assign sel_1090 = 1'b0;

  assign sel_1091 = 1'b0;

  assign sel_1092 = 1'b0;

  assign sel_1093 = 1'b0;

  assign sel_1094 = 1'b0;

  assign sel_1095 = 1'b0;

  assign sel_1096 = 1'b0;

  assign sel_1097 = 1'b0;

  assign sel_1098 = 1'b0;

  assign s_138 = 1'b1;

  assign sel_2_269 = (s_14 == 1'b0 ? sel_1098 :
              s_138);

  assign sel_1099 = 1'b0;

  assign sel_2_270 = (s_15 == 1'b0 ? sel_2_269 :
              sel_1099);

  assign sel_1100 = 1'b0;

  assign sel_2_271 = (s_16 == 1'b0 ? sel_2_270 :
              sel_1100);

  assign sel_1101 = 1'b0;

  assign sel_2_272 = (s_17 == 1'b0 ? sel_2_271 :
              sel_1101);

  assign sel_1102 = 1'b0;

  assign sel_2_273 = (s_18 == 1'b0 ? sel_2_272 :
              sel_1102);

  assign sel_1103 = 1'b0;

  assign sel_2_274 = (s_19 == 1'b0 ? sel_2_273 :
              sel_1103);

  assign sel_1104 = 1'b0;

  assign sel_2_275 = (s_20 == 1'b0 ? sel_2_274 :
              sel_1104);

  assign sel_1105 = 1'b0;

  assign sel_1106 = 1'b0;

  assign sel_1107 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1087, sel_1088, sel_1089, sel_1090, sel_1091, sel_1092,
       sel_1093, sel_1094, sel_1095, sel_1096, sel_1097, sel_1105, sel_1106,
       sel_1107, sel_2_275) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4553_sel_2 = sel_1106;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4553_sel_2 = sel_1105;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4553_sel_2 = sel_2_275;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4553_sel_2 = sel_1097;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4553_sel_2 = sel_1096;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4553_sel_2 = sel_1095;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4553_sel_2 = sel_1094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4553_sel_2 = sel_1093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4553_sel_2 = sel_1092;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4553_sel_2 = sel_1091;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4553_sel_2 = sel_1090;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4553_sel_2 = sel_1089;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4553_sel_2 = sel_1088;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4553_sel_2 = sel_1087;
        end
      default :
        begin
          p4553_sel_2 = sel_1107;
        end
    endcase
    sel_2_276 = p4553_sel_2;
  end

  always @* begin
    p4552cont_bits_42_cont_bits_42[10] = cont_bits_42_10[10];
    if (sel_2_276) begin
      p4552cont_bits_42_cont_bits_42[10] = tmp_123;
    end
    cont_bits_42_11[0] = cont_bits_42_10[0];
    cont_bits_42_11[1] = cont_bits_42_10[1];
    cont_bits_42_11[2] = cont_bits_42_10[2];
    cont_bits_42_11[3] = cont_bits_42_10[3];
    cont_bits_42_11[4] = cont_bits_42_10[4];
    cont_bits_42_11[5] = cont_bits_42_10[5];
    cont_bits_42_11[6] = cont_bits_42_10[6];
    cont_bits_42_11[7] = cont_bits_42_10[7];
    cont_bits_42_11[8] = cont_bits_42_10[8];
    cont_bits_42_11[9] = cont_bits_42_10[9];
    cont_bits_42_11[10] = p4552cont_bits_42_cont_bits_42[10];
    cont_bits_42_11[11] = cont_bits_42_10[11];
  end

  assign sel_1108 = 32'sd0;

  assign sel_1109 = 32'sd0;

  assign sel_1110 = 32'sd0;

  assign sel_1111 = 32'sd0;

  assign sel_1112 = 32'sd0;

  assign sel_1113 = 32'sd0;

  assign sel_1114 = 32'sd0;

  assign sel_1115 = 32'sd0;

  assign sel_1116 = 32'sd0;

  assign sel_1117 = 32'sd0;

  assign sel_1118 = 32'sd0;

  assign sel_1119 = 32'sd0;

  assign s_139 = 32'sd11;

  assign sel_1_221 = (s_14 == 1'b0 ? sel_1119 :
              s_139);

  assign sel_1120 = 32'sd0;

  assign sel_1_222 = (s_15 == 1'b0 ? sel_1_221 :
              sel_1120);

  assign sel_1121 = 32'sd0;

  assign sel_1_223 = (s_16 == 1'b0 ? sel_1_222 :
              sel_1121);

  assign sel_1122 = 32'sd0;

  assign sel_1_224 = (s_17 == 1'b0 ? sel_1_223 :
              sel_1122);

  assign sel_1123 = 32'sd0;

  assign sel_1_225 = (s_18 == 1'b0 ? sel_1_224 :
              sel_1123);

  assign sel_1124 = 32'sd0;

  assign sel_1_226 = (s_19 == 1'b0 ? sel_1_225 :
              sel_1124);

  assign sel_1125 = 32'sd0;

  assign sel_1_227 = (s_20 == 1'b0 ? sel_1_226 :
              sel_1125);

  assign sel_1126 = 32'sd0;

  assign sel_1127 = 32'sd0;

  assign sel_1128 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1108, sel_1109, sel_1110, sel_1111, sel_1112, sel_1113,
       sel_1114, sel_1115, sel_1116, sel_1117, sel_1118, sel_1126, sel_1127,
       sel_1128, sel_1_227) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9914_sel_1 = sel_1127;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9914_sel_1 = sel_1126;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9914_sel_1 = sel_1_227;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9914_sel_1 = sel_1118;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9914_sel_1 = sel_1117;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9914_sel_1 = sel_1116;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9914_sel_1 = sel_1115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9914_sel_1 = sel_1114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9914_sel_1 = sel_1113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9914_sel_1 = sel_1112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9914_sel_1 = sel_1111;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9914_sel_1 = sel_1110;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9914_sel_1 = sel_1109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9914_sel_1 = sel_1108;
        end
      default :
        begin
          p9914_sel_1 = sel_1128;
        end
    endcase
    sel_1_228 = p9914_sel_1;
  end

  assign tmp_124 = functionOutput_12[sel_1_228];

  assign sel_1129 = 1'b0;

  assign sel_1130 = 1'b0;

  assign sel_1131 = 1'b0;

  assign sel_1132 = 1'b0;

  assign sel_1133 = 1'b0;

  assign sel_1134 = 1'b0;

  assign sel_1135 = 1'b0;

  assign sel_1136 = 1'b0;

  assign sel_1137 = 1'b0;

  assign sel_1138 = 1'b0;

  assign sel_1139 = 1'b0;

  assign sel_1140 = 1'b0;

  assign s_140 = 1'b1;

  assign sel_2_277 = (s_14 == 1'b0 ? sel_1140 :
              s_140);

  assign sel_1141 = 1'b0;

  assign sel_2_278 = (s_15 == 1'b0 ? sel_2_277 :
              sel_1141);

  assign sel_1142 = 1'b0;

  assign sel_2_279 = (s_16 == 1'b0 ? sel_2_278 :
              sel_1142);

  assign sel_1143 = 1'b0;

  assign sel_2_280 = (s_17 == 1'b0 ? sel_2_279 :
              sel_1143);

  assign sel_1144 = 1'b0;

  assign sel_2_281 = (s_18 == 1'b0 ? sel_2_280 :
              sel_1144);

  assign sel_1145 = 1'b0;

  assign sel_2_282 = (s_19 == 1'b0 ? sel_2_281 :
              sel_1145);

  assign sel_1146 = 1'b0;

  assign sel_2_283 = (s_20 == 1'b0 ? sel_2_282 :
              sel_1146);

  assign sel_1147 = 1'b0;

  assign sel_1148 = 1'b0;

  assign sel_1149 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1129, sel_1130, sel_1131, sel_1132, sel_1133, sel_1134,
       sel_1135, sel_1136, sel_1137, sel_1138, sel_1139, sel_1147, sel_1148,
       sel_1149, sel_2_283) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4501_sel_2 = sel_1148;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4501_sel_2 = sel_1147;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4501_sel_2 = sel_2_283;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4501_sel_2 = sel_1139;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4501_sel_2 = sel_1138;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4501_sel_2 = sel_1137;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4501_sel_2 = sel_1136;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4501_sel_2 = sel_1135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4501_sel_2 = sel_1134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4501_sel_2 = sel_1133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4501_sel_2 = sel_1132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4501_sel_2 = sel_1131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4501_sel_2 = sel_1130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4501_sel_2 = sel_1129;
        end
      default :
        begin
          p4501_sel_2 = sel_1149;
        end
    endcase
    sel_2_284 = p4501_sel_2;
  end

  always @* begin
    p4500cont_bits_42_cont_bits_42[11] = cont_bits_42_11[11];
    if (sel_2_284) begin
      p4500cont_bits_42_cont_bits_42[11] = tmp_124;
    end
    cont_bits_42_12[0] = cont_bits_42_11[0];
    cont_bits_42_12[1] = cont_bits_42_11[1];
    cont_bits_42_12[2] = cont_bits_42_11[2];
    cont_bits_42_12[3] = cont_bits_42_11[3];
    cont_bits_42_12[4] = cont_bits_42_11[4];
    cont_bits_42_12[5] = cont_bits_42_11[5];
    cont_bits_42_12[6] = cont_bits_42_11[6];
    cont_bits_42_12[7] = cont_bits_42_11[7];
    cont_bits_42_12[8] = cont_bits_42_11[8];
    cont_bits_42_12[9] = cont_bits_42_11[9];
    cont_bits_42_12[10] = cont_bits_42_11[10];
    cont_bits_42_12[11] = p4500cont_bits_42_cont_bits_42[11];
  end

  assign sel_1150 = 32'sd0;

  assign sel_1151 = 32'sd0;

  assign sel_1152 = 32'sd0;

  assign sel_1153 = 32'sd0;

  assign sel_1154 = 32'sd0;

  assign sel_1155 = 32'sd0;

  assign sel_1156 = 32'sd0;

  assign sel_1157 = 32'sd0;

  assign sel_1158 = 32'sd0;

  assign sel_1159 = 32'sd0;

  assign sel_1160 = 32'sd0;

  assign sel_1161 = 32'sd0;

  assign s_141 = 32'sd0;

  assign sel_1_229 = (s_14 == 1'b0 ? sel_1161 :
              s_141);

  assign sel_1162 = 32'sd0;

  assign sel_1_230 = (s_15 == 1'b0 ? sel_1_229 :
              sel_1162);

  assign sel_1163 = 32'sd0;

  assign sel_1_231 = (s_16 == 1'b0 ? sel_1_230 :
              sel_1163);

  assign sel_1164 = 32'sd0;

  assign sel_1_232 = (s_17 == 1'b0 ? sel_1_231 :
              sel_1164);

  assign sel_1165 = 32'sd0;

  assign sel_1_233 = (s_18 == 1'b0 ? sel_1_232 :
              sel_1165);

  assign sel_1166 = 32'sd0;

  assign sel_1_234 = (s_19 == 1'b0 ? sel_1_233 :
              sel_1166);

  assign sel_1167 = 32'sd0;

  assign sel_1_235 = (s_20 == 1'b0 ? sel_1_234 :
              sel_1167);

  assign sel_1168 = 32'sd0;

  assign sel_1169 = 32'sd0;

  assign sel_1170 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1150, sel_1151, sel_1152, sel_1153, sel_1154, sel_1155,
       sel_1156, sel_1157, sel_1158, sel_1159, sel_1160, sel_1168, sel_1169,
       sel_1170, sel_1_235) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1342_sel_1 = sel_1169;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1342_sel_1 = sel_1168;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1342_sel_1 = sel_1_235;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1342_sel_1 = sel_1160;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1342_sel_1 = sel_1159;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1342_sel_1 = sel_1158;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1342_sel_1 = sel_1157;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1342_sel_1 = sel_1156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1342_sel_1 = sel_1155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1342_sel_1 = sel_1154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1342_sel_1 = sel_1153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1342_sel_1 = sel_1152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1342_sel_1 = sel_1151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1342_sel_1 = sel_1150;
        end
      default :
        begin
          p1342_sel_1 = sel_1170;
        end
    endcase
    sel_1_236 = p1342_sel_1;
  end

  assign cont_bits_42_13 = cont_bits_42_12[sel_1_236];

  assign sel_1_237 = (s_14 == 1'b0 ? cont_bits_41_13 :
              cont_bits_42_13);

  assign cont_bits_32[0] = 1'b0;
  assign cont_bits_32[1] = 1'b0;
  assign cont_bits_32[2] = 1'b0;
  assign cont_bits_32[3] = 1'b0;
  assign cont_bits_32[4] = 1'b0;
  assign cont_bits_32[5] = 1'b0;
  assign cont_bits_32[6] = 1'b0;
  assign cont_bits_32[7] = 1'b0;
  assign cont_bits_32[8] = 1'b0;
  assign cont_bits_32[9] = 1'b0;
  assign cont_bits_32[10] = 1'b0;
  assign cont_bits_32[11] = 1'b0;

  assign tmp_125 = (s_13 == 1'b0 ? v3_2 :
              r_v32);

  assign tmp_126 = (s_14 == 1'b0 ? tmp_125 :
              r_v32);

  assign tmp_127 = (s_15 == 1'b0 ? tmp_126 :
              r_v32);

  assign tmp_128 = (s_16 == 1'b0 ? tmp_127 :
              r_v32);

  assign tmp_129 = (s_17 == 1'b0 ? tmp_128 :
              r_v32);

  assign tmp_130 = (s_18 == 1'b0 ? tmp_129 :
              r_v32);

  assign tmp_131 = (s_19 == 1'b0 ? tmp_130 :
              r_v32);

  assign tmp_132 = (s_20 == 1'b0 ? tmp_131 :
              r_v32);

  always @(is_SPI_MNGR_36, r_v32, tmp_132, v3_2) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p72_tmp = tmp_132;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p72_tmp = v3_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p72_tmp = r_v32;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p72_tmp = r_v32;
        end
      default :
        begin
          p72_tmp = r_v32;
        end
    endcase
    tmp_133 = p72_tmp;
  end

  always @(posedge clk)
    begin : r_v32_reg_process
      if (rst == 1'b1) begin
        r_v32 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v32 <= tmp_133;
        end
      end
    end

  simfcn1 u_simfcn1_2 (.vx(r_v32),  // uint16
                       .cont_bits2_0(functionOutput_0_2),  // boolean
                       .cont_bits2_1(functionOutput_1_2),  // boolean
                       .cont_bits2_2(functionOutput_2_2),  // boolean
                       .cont_bits2_3(functionOutput_3_2),  // boolean
                       .cont_bits2_4(functionOutput_4_2),  // boolean
                       .cont_bits2_5(functionOutput_5_2),  // boolean
                       .cont_bits2_6(functionOutput_6_2),  // boolean
                       .cont_bits2_7(functionOutput_7_2),  // boolean
                       .cont_bits2_8(functionOutput_8_2),  // boolean
                       .cont_bits2_9(functionOutput_9_2),  // boolean
                       .cont_bits2_10(functionOutput_10_2),  // boolean
                       .cont_bits2_11(functionOutput_11_2)  // boolean
                       );

  assign functionOutput_13[0] = functionOutput_0_2;
  assign functionOutput_13[1] = functionOutput_1_2;
  assign functionOutput_13[2] = functionOutput_2_2;
  assign functionOutput_13[3] = functionOutput_3_2;
  assign functionOutput_13[4] = functionOutput_4_2;
  assign functionOutput_13[5] = functionOutput_5_2;
  assign functionOutput_13[6] = functionOutput_6_2;
  assign functionOutput_13[7] = functionOutput_7_2;
  assign functionOutput_13[8] = functionOutput_8_2;
  assign functionOutput_13[9] = functionOutput_9_2;
  assign functionOutput_13[10] = functionOutput_10_2;
  assign functionOutput_13[11] = functionOutput_11_2;

  assign sel_1171 = 32'sd0;

  assign sel_1172 = 32'sd0;

  assign sel_1173 = 32'sd0;

  assign sel_1174 = 32'sd0;

  assign sel_1175 = 32'sd0;

  assign sel_1176 = 32'sd0;

  assign sel_1177 = 32'sd0;

  assign sel_1178 = 32'sd0;

  assign sel_1179 = 32'sd0;

  assign sel_1180 = 32'sd0;

  assign sel_1181 = 32'sd0;

  assign sel_1182 = 32'sd0;

  assign s_142 = 32'sd0;

  assign sel_1_238 = (s_15 == 1'b0 ? sel_1182 :
              s_142);

  assign sel_1183 = 32'sd0;

  assign sel_1_239 = (s_16 == 1'b0 ? sel_1_238 :
              sel_1183);

  assign sel_1184 = 32'sd0;

  assign sel_1_240 = (s_17 == 1'b0 ? sel_1_239 :
              sel_1184);

  assign sel_1185 = 32'sd0;

  assign sel_1_241 = (s_18 == 1'b0 ? sel_1_240 :
              sel_1185);

  assign sel_1186 = 32'sd0;

  assign sel_1_242 = (s_19 == 1'b0 ? sel_1_241 :
              sel_1186);

  assign sel_1187 = 32'sd0;

  assign sel_1_243 = (s_20 == 1'b0 ? sel_1_242 :
              sel_1187);

  assign sel_1188 = 32'sd0;

  assign sel_1189 = 32'sd0;

  assign sel_1190 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1171, sel_1172, sel_1173, sel_1174, sel_1175, sel_1176,
       sel_1177, sel_1178, sel_1179, sel_1180, sel_1181, sel_1188, sel_1189,
       sel_1190, sel_1_243) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10815_sel_1 = sel_1189;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10815_sel_1 = sel_1188;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10815_sel_1 = sel_1_243;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10815_sel_1 = sel_1181;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10815_sel_1 = sel_1180;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10815_sel_1 = sel_1179;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10815_sel_1 = sel_1178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10815_sel_1 = sel_1177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10815_sel_1 = sel_1176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10815_sel_1 = sel_1175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10815_sel_1 = sel_1174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10815_sel_1 = sel_1173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10815_sel_1 = sel_1172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10815_sel_1 = sel_1171;
        end
      default :
        begin
          p10815_sel_1 = sel_1190;
        end
    endcase
    sel_1_244 = p10815_sel_1;
  end

  assign tmp_134 = functionOutput_13[sel_1_244];

  assign sel_1191 = 1'b0;

  assign sel_1192 = 1'b0;

  assign sel_1193 = 1'b0;

  assign sel_1194 = 1'b0;

  assign sel_1195 = 1'b0;

  assign sel_1196 = 1'b0;

  assign sel_1197 = 1'b0;

  assign sel_1198 = 1'b0;

  assign sel_1199 = 1'b0;

  assign sel_1200 = 1'b0;

  assign sel_1201 = 1'b0;

  assign sel_1202 = 1'b0;

  assign s_143 = 1'b1;

  assign sel_2_285 = (s_15 == 1'b0 ? sel_1202 :
              s_143);

  assign sel_1203 = 1'b0;

  assign sel_2_286 = (s_16 == 1'b0 ? sel_2_285 :
              sel_1203);

  assign sel_1204 = 1'b0;

  assign sel_2_287 = (s_17 == 1'b0 ? sel_2_286 :
              sel_1204);

  assign sel_1205 = 1'b0;

  assign sel_2_288 = (s_18 == 1'b0 ? sel_2_287 :
              sel_1205);

  assign sel_1206 = 1'b0;

  assign sel_2_289 = (s_19 == 1'b0 ? sel_2_288 :
              sel_1206);

  assign sel_1207 = 1'b0;

  assign sel_2_290 = (s_20 == 1'b0 ? sel_2_289 :
              sel_1207);

  assign sel_1208 = 1'b0;

  assign sel_1209 = 1'b0;

  assign sel_1210 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1191, sel_1192, sel_1193, sel_1194, sel_1195, sel_1196,
       sel_1197, sel_1198, sel_1199, sel_1200, sel_1201, sel_1208, sel_1209,
       sel_1210, sel_2_290) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7650_sel_2 = sel_1209;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7650_sel_2 = sel_1208;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7650_sel_2 = sel_2_290;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7650_sel_2 = sel_1201;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7650_sel_2 = sel_1200;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7650_sel_2 = sel_1199;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7650_sel_2 = sel_1198;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7650_sel_2 = sel_1197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7650_sel_2 = sel_1196;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7650_sel_2 = sel_1195;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7650_sel_2 = sel_1194;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7650_sel_2 = sel_1193;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7650_sel_2 = sel_1192;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7650_sel_2 = sel_1191;
        end
      default :
        begin
          p7650_sel_2 = sel_1210;
        end
    endcase
    sel_2_291 = p7650_sel_2;
  end

  always @* begin
    p7649cont_bits_32_cont_bits_32[0] = cont_bits_32[0];
    if (sel_2_291) begin
      p7649cont_bits_32_cont_bits_32[0] = tmp_134;
    end
    cont_bits_32_1[0] = p7649cont_bits_32_cont_bits_32[0];
    cont_bits_32_1[1] = cont_bits_32[1];
    cont_bits_32_1[2] = cont_bits_32[2];
    cont_bits_32_1[3] = cont_bits_32[3];
    cont_bits_32_1[4] = cont_bits_32[4];
    cont_bits_32_1[5] = cont_bits_32[5];
    cont_bits_32_1[6] = cont_bits_32[6];
    cont_bits_32_1[7] = cont_bits_32[7];
    cont_bits_32_1[8] = cont_bits_32[8];
    cont_bits_32_1[9] = cont_bits_32[9];
    cont_bits_32_1[10] = cont_bits_32[10];
    cont_bits_32_1[11] = cont_bits_32[11];
  end

  assign sel_1211 = 32'sd0;

  assign sel_1212 = 32'sd0;

  assign sel_1213 = 32'sd0;

  assign sel_1214 = 32'sd0;

  assign sel_1215 = 32'sd0;

  assign sel_1216 = 32'sd0;

  assign sel_1217 = 32'sd0;

  assign sel_1218 = 32'sd0;

  assign sel_1219 = 32'sd0;

  assign sel_1220 = 32'sd0;

  assign sel_1221 = 32'sd0;

  assign sel_1222 = 32'sd0;

  assign s_144 = 32'sd1;

  assign sel_1_245 = (s_15 == 1'b0 ? sel_1222 :
              s_144);

  assign sel_1223 = 32'sd0;

  assign sel_1_246 = (s_16 == 1'b0 ? sel_1_245 :
              sel_1223);

  assign sel_1224 = 32'sd0;

  assign sel_1_247 = (s_17 == 1'b0 ? sel_1_246 :
              sel_1224);

  assign sel_1225 = 32'sd0;

  assign sel_1_248 = (s_18 == 1'b0 ? sel_1_247 :
              sel_1225);

  assign sel_1226 = 32'sd0;

  assign sel_1_249 = (s_19 == 1'b0 ? sel_1_248 :
              sel_1226);

  assign sel_1227 = 32'sd0;

  assign sel_1_250 = (s_20 == 1'b0 ? sel_1_249 :
              sel_1227);

  assign sel_1228 = 32'sd0;

  assign sel_1229 = 32'sd0;

  assign sel_1230 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1211, sel_1212, sel_1213, sel_1214, sel_1215, sel_1216,
       sel_1217, sel_1218, sel_1219, sel_1220, sel_1221, sel_1228, sel_1229,
       sel_1230, sel_1_250) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11393_sel_1 = sel_1229;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11393_sel_1 = sel_1228;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11393_sel_1 = sel_1_250;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11393_sel_1 = sel_1221;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11393_sel_1 = sel_1220;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11393_sel_1 = sel_1219;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11393_sel_1 = sel_1218;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11393_sel_1 = sel_1217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11393_sel_1 = sel_1216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11393_sel_1 = sel_1215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11393_sel_1 = sel_1214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11393_sel_1 = sel_1213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11393_sel_1 = sel_1212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11393_sel_1 = sel_1211;
        end
      default :
        begin
          p11393_sel_1 = sel_1230;
        end
    endcase
    sel_1_251 = p11393_sel_1;
  end

  assign tmp_135 = functionOutput_13[sel_1_251];

  assign sel_1231 = 1'b0;

  assign sel_1232 = 1'b0;

  assign sel_1233 = 1'b0;

  assign sel_1234 = 1'b0;

  assign sel_1235 = 1'b0;

  assign sel_1236 = 1'b0;

  assign sel_1237 = 1'b0;

  assign sel_1238 = 1'b0;

  assign sel_1239 = 1'b0;

  assign sel_1240 = 1'b0;

  assign sel_1241 = 1'b0;

  assign sel_1242 = 1'b0;

  assign s_145 = 1'b1;

  assign sel_2_292 = (s_15 == 1'b0 ? sel_1242 :
              s_145);

  assign sel_1243 = 1'b0;

  assign sel_2_293 = (s_16 == 1'b0 ? sel_2_292 :
              sel_1243);

  assign sel_1244 = 1'b0;

  assign sel_2_294 = (s_17 == 1'b0 ? sel_2_293 :
              sel_1244);

  assign sel_1245 = 1'b0;

  assign sel_2_295 = (s_18 == 1'b0 ? sel_2_294 :
              sel_1245);

  assign sel_1246 = 1'b0;

  assign sel_2_296 = (s_19 == 1'b0 ? sel_2_295 :
              sel_1246);

  assign sel_1247 = 1'b0;

  assign sel_2_297 = (s_20 == 1'b0 ? sel_2_296 :
              sel_1247);

  assign sel_1248 = 1'b0;

  assign sel_1249 = 1'b0;

  assign sel_1250 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1231, sel_1232, sel_1233, sel_1234, sel_1235, sel_1236,
       sel_1237, sel_1238, sel_1239, sel_1240, sel_1241, sel_1248, sel_1249,
       sel_1250, sel_2_297) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7529_sel_2 = sel_1249;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7529_sel_2 = sel_1248;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7529_sel_2 = sel_2_297;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7529_sel_2 = sel_1241;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7529_sel_2 = sel_1240;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7529_sel_2 = sel_1239;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7529_sel_2 = sel_1238;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7529_sel_2 = sel_1237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7529_sel_2 = sel_1236;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7529_sel_2 = sel_1235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7529_sel_2 = sel_1234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7529_sel_2 = sel_1233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7529_sel_2 = sel_1232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7529_sel_2 = sel_1231;
        end
      default :
        begin
          p7529_sel_2 = sel_1250;
        end
    endcase
    sel_2_298 = p7529_sel_2;
  end

  always @* begin
    p7528cont_bits_32_cont_bits_32[1] = cont_bits_32_1[1];
    if (sel_2_298) begin
      p7528cont_bits_32_cont_bits_32[1] = tmp_135;
    end
    cont_bits_32_2[0] = cont_bits_32_1[0];
    cont_bits_32_2[1] = p7528cont_bits_32_cont_bits_32[1];
    cont_bits_32_2[2] = cont_bits_32_1[2];
    cont_bits_32_2[3] = cont_bits_32_1[3];
    cont_bits_32_2[4] = cont_bits_32_1[4];
    cont_bits_32_2[5] = cont_bits_32_1[5];
    cont_bits_32_2[6] = cont_bits_32_1[6];
    cont_bits_32_2[7] = cont_bits_32_1[7];
    cont_bits_32_2[8] = cont_bits_32_1[8];
    cont_bits_32_2[9] = cont_bits_32_1[9];
    cont_bits_32_2[10] = cont_bits_32_1[10];
    cont_bits_32_2[11] = cont_bits_32_1[11];
  end

  assign sel_1251 = 32'sd0;

  assign sel_1252 = 32'sd0;

  assign sel_1253 = 32'sd0;

  assign sel_1254 = 32'sd0;

  assign sel_1255 = 32'sd0;

  assign sel_1256 = 32'sd0;

  assign sel_1257 = 32'sd0;

  assign sel_1258 = 32'sd0;

  assign sel_1259 = 32'sd0;

  assign sel_1260 = 32'sd0;

  assign sel_1261 = 32'sd0;

  assign sel_1262 = 32'sd0;

  assign s_146 = 32'sd2;

  assign sel_1_252 = (s_15 == 1'b0 ? sel_1262 :
              s_146);

  assign sel_1263 = 32'sd0;

  assign sel_1_253 = (s_16 == 1'b0 ? sel_1_252 :
              sel_1263);

  assign sel_1264 = 32'sd0;

  assign sel_1_254 = (s_17 == 1'b0 ? sel_1_253 :
              sel_1264);

  assign sel_1265 = 32'sd0;

  assign sel_1_255 = (s_18 == 1'b0 ? sel_1_254 :
              sel_1265);

  assign sel_1266 = 32'sd0;

  assign sel_1_256 = (s_19 == 1'b0 ? sel_1_255 :
              sel_1266);

  assign sel_1267 = 32'sd0;

  assign sel_1_257 = (s_20 == 1'b0 ? sel_1_256 :
              sel_1267);

  assign sel_1268 = 32'sd0;

  assign sel_1269 = 32'sd0;

  assign sel_1270 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1251, sel_1252, sel_1253, sel_1254, sel_1255, sel_1256,
       sel_1257, sel_1258, sel_1259, sel_1260, sel_1261, sel_1268, sel_1269,
       sel_1270, sel_1_257) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11495_sel_1 = sel_1269;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11495_sel_1 = sel_1268;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11495_sel_1 = sel_1_257;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11495_sel_1 = sel_1261;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11495_sel_1 = sel_1260;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11495_sel_1 = sel_1259;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11495_sel_1 = sel_1258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11495_sel_1 = sel_1257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11495_sel_1 = sel_1256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11495_sel_1 = sel_1255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11495_sel_1 = sel_1254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11495_sel_1 = sel_1253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11495_sel_1 = sel_1252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11495_sel_1 = sel_1251;
        end
      default :
        begin
          p11495_sel_1 = sel_1270;
        end
    endcase
    sel_1_258 = p11495_sel_1;
  end

  assign tmp_136 = functionOutput_13[sel_1_258];

  assign sel_1271 = 1'b0;

  assign sel_1272 = 1'b0;

  assign sel_1273 = 1'b0;

  assign sel_1274 = 1'b0;

  assign sel_1275 = 1'b0;

  assign sel_1276 = 1'b0;

  assign sel_1277 = 1'b0;

  assign sel_1278 = 1'b0;

  assign sel_1279 = 1'b0;

  assign sel_1280 = 1'b0;

  assign sel_1281 = 1'b0;

  assign sel_1282 = 1'b0;

  assign s_147 = 1'b1;

  assign sel_2_299 = (s_15 == 1'b0 ? sel_1282 :
              s_147);

  assign sel_1283 = 1'b0;

  assign sel_2_300 = (s_16 == 1'b0 ? sel_2_299 :
              sel_1283);

  assign sel_1284 = 1'b0;

  assign sel_2_301 = (s_17 == 1'b0 ? sel_2_300 :
              sel_1284);

  assign sel_1285 = 1'b0;

  assign sel_2_302 = (s_18 == 1'b0 ? sel_2_301 :
              sel_1285);

  assign sel_1286 = 1'b0;

  assign sel_2_303 = (s_19 == 1'b0 ? sel_2_302 :
              sel_1286);

  assign sel_1287 = 1'b0;

  assign sel_2_304 = (s_20 == 1'b0 ? sel_2_303 :
              sel_1287);

  assign sel_1288 = 1'b0;

  assign sel_1289 = 1'b0;

  assign sel_1290 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1271, sel_1272, sel_1273, sel_1274, sel_1275, sel_1276,
       sel_1277, sel_1278, sel_1279, sel_1280, sel_1281, sel_1288, sel_1289,
       sel_1290, sel_2_304) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7012_sel_2 = sel_1289;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7012_sel_2 = sel_1288;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7012_sel_2 = sel_2_304;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7012_sel_2 = sel_1281;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7012_sel_2 = sel_1280;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7012_sel_2 = sel_1279;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7012_sel_2 = sel_1278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7012_sel_2 = sel_1277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7012_sel_2 = sel_1276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7012_sel_2 = sel_1275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7012_sel_2 = sel_1274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7012_sel_2 = sel_1273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7012_sel_2 = sel_1272;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7012_sel_2 = sel_1271;
        end
      default :
        begin
          p7012_sel_2 = sel_1290;
        end
    endcase
    sel_2_305 = p7012_sel_2;
  end

  always @* begin
    p7011cont_bits_32_cont_bits_32[2] = cont_bits_32_2[2];
    if (sel_2_305) begin
      p7011cont_bits_32_cont_bits_32[2] = tmp_136;
    end
    cont_bits_32_3[0] = cont_bits_32_2[0];
    cont_bits_32_3[1] = cont_bits_32_2[1];
    cont_bits_32_3[2] = p7011cont_bits_32_cont_bits_32[2];
    cont_bits_32_3[3] = cont_bits_32_2[3];
    cont_bits_32_3[4] = cont_bits_32_2[4];
    cont_bits_32_3[5] = cont_bits_32_2[5];
    cont_bits_32_3[6] = cont_bits_32_2[6];
    cont_bits_32_3[7] = cont_bits_32_2[7];
    cont_bits_32_3[8] = cont_bits_32_2[8];
    cont_bits_32_3[9] = cont_bits_32_2[9];
    cont_bits_32_3[10] = cont_bits_32_2[10];
    cont_bits_32_3[11] = cont_bits_32_2[11];
  end

  assign sel_1291 = 32'sd0;

  assign sel_1292 = 32'sd0;

  assign sel_1293 = 32'sd0;

  assign sel_1294 = 32'sd0;

  assign sel_1295 = 32'sd0;

  assign sel_1296 = 32'sd0;

  assign sel_1297 = 32'sd0;

  assign sel_1298 = 32'sd0;

  assign sel_1299 = 32'sd0;

  assign sel_1300 = 32'sd0;

  assign sel_1301 = 32'sd0;

  assign sel_1302 = 32'sd0;

  assign s_148 = 32'sd3;

  assign sel_1_259 = (s_15 == 1'b0 ? sel_1302 :
              s_148);

  assign sel_1303 = 32'sd0;

  assign sel_1_260 = (s_16 == 1'b0 ? sel_1_259 :
              sel_1303);

  assign sel_1304 = 32'sd0;

  assign sel_1_261 = (s_17 == 1'b0 ? sel_1_260 :
              sel_1304);

  assign sel_1305 = 32'sd0;

  assign sel_1_262 = (s_18 == 1'b0 ? sel_1_261 :
              sel_1305);

  assign sel_1306 = 32'sd0;

  assign sel_1_263 = (s_19 == 1'b0 ? sel_1_262 :
              sel_1306);

  assign sel_1307 = 32'sd0;

  assign sel_1_264 = (s_20 == 1'b0 ? sel_1_263 :
              sel_1307);

  assign sel_1308 = 32'sd0;

  assign sel_1309 = 32'sd0;

  assign sel_1310 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1291, sel_1292, sel_1293, sel_1294, sel_1295, sel_1296,
       sel_1297, sel_1298, sel_1299, sel_1300, sel_1301, sel_1308, sel_1309,
       sel_1310, sel_1_264) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11308_sel_1 = sel_1309;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11308_sel_1 = sel_1308;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11308_sel_1 = sel_1_264;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11308_sel_1 = sel_1301;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11308_sel_1 = sel_1300;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11308_sel_1 = sel_1299;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11308_sel_1 = sel_1298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11308_sel_1 = sel_1297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11308_sel_1 = sel_1296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11308_sel_1 = sel_1295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11308_sel_1 = sel_1294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11308_sel_1 = sel_1293;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11308_sel_1 = sel_1292;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11308_sel_1 = sel_1291;
        end
      default :
        begin
          p11308_sel_1 = sel_1310;
        end
    endcase
    sel_1_265 = p11308_sel_1;
  end

  assign tmp_137 = functionOutput_13[sel_1_265];

  assign sel_1311 = 1'b0;

  assign sel_1312 = 1'b0;

  assign sel_1313 = 1'b0;

  assign sel_1314 = 1'b0;

  assign sel_1315 = 1'b0;

  assign sel_1316 = 1'b0;

  assign sel_1317 = 1'b0;

  assign sel_1318 = 1'b0;

  assign sel_1319 = 1'b0;

  assign sel_1320 = 1'b0;

  assign sel_1321 = 1'b0;

  assign sel_1322 = 1'b0;

  assign s_149 = 1'b1;

  assign sel_2_306 = (s_15 == 1'b0 ? sel_1322 :
              s_149);

  assign sel_1323 = 1'b0;

  assign sel_2_307 = (s_16 == 1'b0 ? sel_2_306 :
              sel_1323);

  assign sel_1324 = 1'b0;

  assign sel_2_308 = (s_17 == 1'b0 ? sel_2_307 :
              sel_1324);

  assign sel_1325 = 1'b0;

  assign sel_2_309 = (s_18 == 1'b0 ? sel_2_308 :
              sel_1325);

  assign sel_1326 = 1'b0;

  assign sel_2_310 = (s_19 == 1'b0 ? sel_2_309 :
              sel_1326);

  assign sel_1327 = 1'b0;

  assign sel_2_311 = (s_20 == 1'b0 ? sel_2_310 :
              sel_1327);

  assign sel_1328 = 1'b0;

  assign sel_1329 = 1'b0;

  assign sel_1330 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1311, sel_1312, sel_1313, sel_1314, sel_1315, sel_1316,
       sel_1317, sel_1318, sel_1319, sel_1320, sel_1321, sel_1328, sel_1329,
       sel_1330, sel_2_311) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6891_sel_2 = sel_1329;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6891_sel_2 = sel_1328;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6891_sel_2 = sel_2_311;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6891_sel_2 = sel_1321;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6891_sel_2 = sel_1320;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6891_sel_2 = sel_1319;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6891_sel_2 = sel_1318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6891_sel_2 = sel_1317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6891_sel_2 = sel_1316;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6891_sel_2 = sel_1315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6891_sel_2 = sel_1314;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6891_sel_2 = sel_1313;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6891_sel_2 = sel_1312;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6891_sel_2 = sel_1311;
        end
      default :
        begin
          p6891_sel_2 = sel_1330;
        end
    endcase
    sel_2_312 = p6891_sel_2;
  end

  always @* begin
    p6890cont_bits_32_cont_bits_32[3] = cont_bits_32_3[3];
    if (sel_2_312) begin
      p6890cont_bits_32_cont_bits_32[3] = tmp_137;
    end
    cont_bits_32_4[0] = cont_bits_32_3[0];
    cont_bits_32_4[1] = cont_bits_32_3[1];
    cont_bits_32_4[2] = cont_bits_32_3[2];
    cont_bits_32_4[3] = p6890cont_bits_32_cont_bits_32[3];
    cont_bits_32_4[4] = cont_bits_32_3[4];
    cont_bits_32_4[5] = cont_bits_32_3[5];
    cont_bits_32_4[6] = cont_bits_32_3[6];
    cont_bits_32_4[7] = cont_bits_32_3[7];
    cont_bits_32_4[8] = cont_bits_32_3[8];
    cont_bits_32_4[9] = cont_bits_32_3[9];
    cont_bits_32_4[10] = cont_bits_32_3[10];
    cont_bits_32_4[11] = cont_bits_32_3[11];
  end

  assign sel_1331 = 32'sd0;

  assign sel_1332 = 32'sd0;

  assign sel_1333 = 32'sd0;

  assign sel_1334 = 32'sd0;

  assign sel_1335 = 32'sd0;

  assign sel_1336 = 32'sd0;

  assign sel_1337 = 32'sd0;

  assign sel_1338 = 32'sd0;

  assign sel_1339 = 32'sd0;

  assign sel_1340 = 32'sd0;

  assign sel_1341 = 32'sd0;

  assign sel_1342 = 32'sd0;

  assign s_150 = 32'sd4;

  assign sel_1_266 = (s_15 == 1'b0 ? sel_1342 :
              s_150);

  assign sel_1343 = 32'sd0;

  assign sel_1_267 = (s_16 == 1'b0 ? sel_1_266 :
              sel_1343);

  assign sel_1344 = 32'sd0;

  assign sel_1_268 = (s_17 == 1'b0 ? sel_1_267 :
              sel_1344);

  assign sel_1345 = 32'sd0;

  assign sel_1_269 = (s_18 == 1'b0 ? sel_1_268 :
              sel_1345);

  assign sel_1346 = 32'sd0;

  assign sel_1_270 = (s_19 == 1'b0 ? sel_1_269 :
              sel_1346);

  assign sel_1347 = 32'sd0;

  assign sel_1_271 = (s_20 == 1'b0 ? sel_1_270 :
              sel_1347);

  assign sel_1348 = 32'sd0;

  assign sel_1349 = 32'sd0;

  assign sel_1350 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1331, sel_1332, sel_1333, sel_1334, sel_1335, sel_1336,
       sel_1337, sel_1338, sel_1339, sel_1340, sel_1341, sel_1348, sel_1349,
       sel_1350, sel_1_271) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11444_sel_1 = sel_1349;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11444_sel_1 = sel_1348;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11444_sel_1 = sel_1_271;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11444_sel_1 = sel_1341;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11444_sel_1 = sel_1340;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11444_sel_1 = sel_1339;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11444_sel_1 = sel_1338;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11444_sel_1 = sel_1337;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11444_sel_1 = sel_1336;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11444_sel_1 = sel_1335;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11444_sel_1 = sel_1334;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11444_sel_1 = sel_1333;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11444_sel_1 = sel_1332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11444_sel_1 = sel_1331;
        end
      default :
        begin
          p11444_sel_1 = sel_1350;
        end
    endcase
    sel_1_272 = p11444_sel_1;
  end

  assign tmp_138 = functionOutput_13[sel_1_272];

  assign sel_1351 = 1'b0;

  assign sel_1352 = 1'b0;

  assign sel_1353 = 1'b0;

  assign sel_1354 = 1'b0;

  assign sel_1355 = 1'b0;

  assign sel_1356 = 1'b0;

  assign sel_1357 = 1'b0;

  assign sel_1358 = 1'b0;

  assign sel_1359 = 1'b0;

  assign sel_1360 = 1'b0;

  assign sel_1361 = 1'b0;

  assign sel_1362 = 1'b0;

  assign s_151 = 1'b1;

  assign sel_2_313 = (s_15 == 1'b0 ? sel_1362 :
              s_151);

  assign sel_1363 = 1'b0;

  assign sel_2_314 = (s_16 == 1'b0 ? sel_2_313 :
              sel_1363);

  assign sel_1364 = 1'b0;

  assign sel_2_315 = (s_17 == 1'b0 ? sel_2_314 :
              sel_1364);

  assign sel_1365 = 1'b0;

  assign sel_2_316 = (s_18 == 1'b0 ? sel_2_315 :
              sel_1365);

  assign sel_1366 = 1'b0;

  assign sel_2_317 = (s_19 == 1'b0 ? sel_2_316 :
              sel_1366);

  assign sel_1367 = 1'b0;

  assign sel_2_318 = (s_20 == 1'b0 ? sel_2_317 :
              sel_1367);

  assign sel_1368 = 1'b0;

  assign sel_1369 = 1'b0;

  assign sel_1370 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1351, sel_1352, sel_1353, sel_1354, sel_1355, sel_1356,
       sel_1357, sel_1358, sel_1359, sel_1360, sel_1361, sel_1368, sel_1369,
       sel_1370, sel_2_318) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6405_sel_2 = sel_1369;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6405_sel_2 = sel_1368;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6405_sel_2 = sel_2_318;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6405_sel_2 = sel_1361;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6405_sel_2 = sel_1360;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6405_sel_2 = sel_1359;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6405_sel_2 = sel_1358;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6405_sel_2 = sel_1357;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6405_sel_2 = sel_1356;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6405_sel_2 = sel_1355;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6405_sel_2 = sel_1354;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6405_sel_2 = sel_1353;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6405_sel_2 = sel_1352;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6405_sel_2 = sel_1351;
        end
      default :
        begin
          p6405_sel_2 = sel_1370;
        end
    endcase
    sel_2_319 = p6405_sel_2;
  end

  always @* begin
    p6404cont_bits_32_cont_bits_32[4] = cont_bits_32_4[4];
    if (sel_2_319) begin
      p6404cont_bits_32_cont_bits_32[4] = tmp_138;
    end
    cont_bits_32_5[0] = cont_bits_32_4[0];
    cont_bits_32_5[1] = cont_bits_32_4[1];
    cont_bits_32_5[2] = cont_bits_32_4[2];
    cont_bits_32_5[3] = cont_bits_32_4[3];
    cont_bits_32_5[4] = p6404cont_bits_32_cont_bits_32[4];
    cont_bits_32_5[5] = cont_bits_32_4[5];
    cont_bits_32_5[6] = cont_bits_32_4[6];
    cont_bits_32_5[7] = cont_bits_32_4[7];
    cont_bits_32_5[8] = cont_bits_32_4[8];
    cont_bits_32_5[9] = cont_bits_32_4[9];
    cont_bits_32_5[10] = cont_bits_32_4[10];
    cont_bits_32_5[11] = cont_bits_32_4[11];
  end

  assign sel_1371 = 32'sd0;

  assign sel_1372 = 32'sd0;

  assign sel_1373 = 32'sd0;

  assign sel_1374 = 32'sd0;

  assign sel_1375 = 32'sd0;

  assign sel_1376 = 32'sd0;

  assign sel_1377 = 32'sd0;

  assign sel_1378 = 32'sd0;

  assign sel_1379 = 32'sd0;

  assign sel_1380 = 32'sd0;

  assign sel_1381 = 32'sd0;

  assign sel_1382 = 32'sd0;

  assign s_152 = 32'sd5;

  assign sel_1_273 = (s_15 == 1'b0 ? sel_1382 :
              s_152);

  assign sel_1383 = 32'sd0;

  assign sel_1_274 = (s_16 == 1'b0 ? sel_1_273 :
              sel_1383);

  assign sel_1384 = 32'sd0;

  assign sel_1_275 = (s_17 == 1'b0 ? sel_1_274 :
              sel_1384);

  assign sel_1385 = 32'sd0;

  assign sel_1_276 = (s_18 == 1'b0 ? sel_1_275 :
              sel_1385);

  assign sel_1386 = 32'sd0;

  assign sel_1_277 = (s_19 == 1'b0 ? sel_1_276 :
              sel_1386);

  assign sel_1387 = 32'sd0;

  assign sel_1_278 = (s_20 == 1'b0 ? sel_1_277 :
              sel_1387);

  assign sel_1388 = 32'sd0;

  assign sel_1389 = 32'sd0;

  assign sel_1390 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1371, sel_1372, sel_1373, sel_1374, sel_1375, sel_1376,
       sel_1377, sel_1378, sel_1379, sel_1380, sel_1381, sel_1388, sel_1389,
       sel_1390, sel_1_278) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11461_sel_1 = sel_1389;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11461_sel_1 = sel_1388;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11461_sel_1 = sel_1_278;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11461_sel_1 = sel_1381;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11461_sel_1 = sel_1380;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11461_sel_1 = sel_1379;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11461_sel_1 = sel_1378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11461_sel_1 = sel_1377;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11461_sel_1 = sel_1376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11461_sel_1 = sel_1375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11461_sel_1 = sel_1374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11461_sel_1 = sel_1373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11461_sel_1 = sel_1372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11461_sel_1 = sel_1371;
        end
      default :
        begin
          p11461_sel_1 = sel_1390;
        end
    endcase
    sel_1_279 = p11461_sel_1;
  end

  assign tmp_139 = functionOutput_13[sel_1_279];

  assign sel_1391 = 1'b0;

  assign sel_1392 = 1'b0;

  assign sel_1393 = 1'b0;

  assign sel_1394 = 1'b0;

  assign sel_1395 = 1'b0;

  assign sel_1396 = 1'b0;

  assign sel_1397 = 1'b0;

  assign sel_1398 = 1'b0;

  assign sel_1399 = 1'b0;

  assign sel_1400 = 1'b0;

  assign sel_1401 = 1'b0;

  assign sel_1402 = 1'b0;

  assign s_153 = 1'b1;

  assign sel_2_320 = (s_15 == 1'b0 ? sel_1402 :
              s_153);

  assign sel_1403 = 1'b0;

  assign sel_2_321 = (s_16 == 1'b0 ? sel_2_320 :
              sel_1403);

  assign sel_1404 = 1'b0;

  assign sel_2_322 = (s_17 == 1'b0 ? sel_2_321 :
              sel_1404);

  assign sel_1405 = 1'b0;

  assign sel_2_323 = (s_18 == 1'b0 ? sel_2_322 :
              sel_1405);

  assign sel_1406 = 1'b0;

  assign sel_2_324 = (s_19 == 1'b0 ? sel_2_323 :
              sel_1406);

  assign sel_1407 = 1'b0;

  assign sel_2_325 = (s_20 == 1'b0 ? sel_2_324 :
              sel_1407);

  assign sel_1408 = 1'b0;

  assign sel_1409 = 1'b0;

  assign sel_1410 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1391, sel_1392, sel_1393, sel_1394, sel_1395, sel_1396,
       sel_1397, sel_1398, sel_1399, sel_1400, sel_1401, sel_1408, sel_1409,
       sel_1410, sel_2_325) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6285_sel_2 = sel_1409;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6285_sel_2 = sel_1408;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6285_sel_2 = sel_2_325;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6285_sel_2 = sel_1401;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6285_sel_2 = sel_1400;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6285_sel_2 = sel_1399;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6285_sel_2 = sel_1398;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6285_sel_2 = sel_1397;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6285_sel_2 = sel_1396;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6285_sel_2 = sel_1395;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6285_sel_2 = sel_1394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6285_sel_2 = sel_1393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6285_sel_2 = sel_1392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6285_sel_2 = sel_1391;
        end
      default :
        begin
          p6285_sel_2 = sel_1410;
        end
    endcase
    sel_2_326 = p6285_sel_2;
  end

  always @* begin
    p6284cont_bits_32_cont_bits_32[5] = cont_bits_32_5[5];
    if (sel_2_326) begin
      p6284cont_bits_32_cont_bits_32[5] = tmp_139;
    end
    cont_bits_32_6[0] = cont_bits_32_5[0];
    cont_bits_32_6[1] = cont_bits_32_5[1];
    cont_bits_32_6[2] = cont_bits_32_5[2];
    cont_bits_32_6[3] = cont_bits_32_5[3];
    cont_bits_32_6[4] = cont_bits_32_5[4];
    cont_bits_32_6[5] = p6284cont_bits_32_cont_bits_32[5];
    cont_bits_32_6[6] = cont_bits_32_5[6];
    cont_bits_32_6[7] = cont_bits_32_5[7];
    cont_bits_32_6[8] = cont_bits_32_5[8];
    cont_bits_32_6[9] = cont_bits_32_5[9];
    cont_bits_32_6[10] = cont_bits_32_5[10];
    cont_bits_32_6[11] = cont_bits_32_5[11];
  end

  assign sel_1411 = 32'sd0;

  assign sel_1412 = 32'sd0;

  assign sel_1413 = 32'sd0;

  assign sel_1414 = 32'sd0;

  assign sel_1415 = 32'sd0;

  assign sel_1416 = 32'sd0;

  assign sel_1417 = 32'sd0;

  assign sel_1418 = 32'sd0;

  assign sel_1419 = 32'sd0;

  assign sel_1420 = 32'sd0;

  assign sel_1421 = 32'sd0;

  assign sel_1422 = 32'sd0;

  assign s_154 = 32'sd6;

  assign sel_1_280 = (s_15 == 1'b0 ? sel_1422 :
              s_154);

  assign sel_1423 = 32'sd0;

  assign sel_1_281 = (s_16 == 1'b0 ? sel_1_280 :
              sel_1423);

  assign sel_1424 = 32'sd0;

  assign sel_1_282 = (s_17 == 1'b0 ? sel_1_281 :
              sel_1424);

  assign sel_1425 = 32'sd0;

  assign sel_1_283 = (s_18 == 1'b0 ? sel_1_282 :
              sel_1425);

  assign sel_1426 = 32'sd0;

  assign sel_1_284 = (s_19 == 1'b0 ? sel_1_283 :
              sel_1426);

  assign sel_1427 = 32'sd0;

  assign sel_1_285 = (s_20 == 1'b0 ? sel_1_284 :
              sel_1427);

  assign sel_1428 = 32'sd0;

  assign sel_1429 = 32'sd0;

  assign sel_1430 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1411, sel_1412, sel_1413, sel_1414, sel_1415, sel_1416,
       sel_1417, sel_1418, sel_1419, sel_1420, sel_1421, sel_1428, sel_1429,
       sel_1430, sel_1_285) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11325_sel_1 = sel_1429;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11325_sel_1 = sel_1428;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11325_sel_1 = sel_1_285;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11325_sel_1 = sel_1421;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11325_sel_1 = sel_1420;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11325_sel_1 = sel_1419;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11325_sel_1 = sel_1418;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11325_sel_1 = sel_1417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11325_sel_1 = sel_1416;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11325_sel_1 = sel_1415;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11325_sel_1 = sel_1414;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11325_sel_1 = sel_1413;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11325_sel_1 = sel_1412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11325_sel_1 = sel_1411;
        end
      default :
        begin
          p11325_sel_1 = sel_1430;
        end
    endcase
    sel_1_286 = p11325_sel_1;
  end

  assign tmp_140 = functionOutput_13[sel_1_286];

  assign sel_1431 = 1'b0;

  assign sel_1432 = 1'b0;

  assign sel_1433 = 1'b0;

  assign sel_1434 = 1'b0;

  assign sel_1435 = 1'b0;

  assign sel_1436 = 1'b0;

  assign sel_1437 = 1'b0;

  assign sel_1438 = 1'b0;

  assign sel_1439 = 1'b0;

  assign sel_1440 = 1'b0;

  assign sel_1441 = 1'b0;

  assign sel_1442 = 1'b0;

  assign s_155 = 1'b1;

  assign sel_2_327 = (s_15 == 1'b0 ? sel_1442 :
              s_155);

  assign sel_1443 = 1'b0;

  assign sel_2_328 = (s_16 == 1'b0 ? sel_2_327 :
              sel_1443);

  assign sel_1444 = 1'b0;

  assign sel_2_329 = (s_17 == 1'b0 ? sel_2_328 :
              sel_1444);

  assign sel_1445 = 1'b0;

  assign sel_2_330 = (s_18 == 1'b0 ? sel_2_329 :
              sel_1445);

  assign sel_1446 = 1'b0;

  assign sel_2_331 = (s_19 == 1'b0 ? sel_2_330 :
              sel_1446);

  assign sel_1447 = 1'b0;

  assign sel_2_332 = (s_20 == 1'b0 ? sel_2_331 :
              sel_1447);

  assign sel_1448 = 1'b0;

  assign sel_1449 = 1'b0;

  assign sel_1450 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1431, sel_1432, sel_1433, sel_1434, sel_1435, sel_1436,
       sel_1437, sel_1438, sel_1439, sel_1440, sel_1441, sel_1448, sel_1449,
       sel_1450, sel_2_332) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5799_sel_2 = sel_1449;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5799_sel_2 = sel_1448;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5799_sel_2 = sel_2_332;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5799_sel_2 = sel_1441;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5799_sel_2 = sel_1440;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5799_sel_2 = sel_1439;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5799_sel_2 = sel_1438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5799_sel_2 = sel_1437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5799_sel_2 = sel_1436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5799_sel_2 = sel_1435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5799_sel_2 = sel_1434;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5799_sel_2 = sel_1433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5799_sel_2 = sel_1432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5799_sel_2 = sel_1431;
        end
      default :
        begin
          p5799_sel_2 = sel_1450;
        end
    endcase
    sel_2_333 = p5799_sel_2;
  end

  always @* begin
    p5798cont_bits_32_cont_bits_32[6] = cont_bits_32_6[6];
    if (sel_2_333) begin
      p5798cont_bits_32_cont_bits_32[6] = tmp_140;
    end
    cont_bits_32_7[0] = cont_bits_32_6[0];
    cont_bits_32_7[1] = cont_bits_32_6[1];
    cont_bits_32_7[2] = cont_bits_32_6[2];
    cont_bits_32_7[3] = cont_bits_32_6[3];
    cont_bits_32_7[4] = cont_bits_32_6[4];
    cont_bits_32_7[5] = cont_bits_32_6[5];
    cont_bits_32_7[6] = p5798cont_bits_32_cont_bits_32[6];
    cont_bits_32_7[7] = cont_bits_32_6[7];
    cont_bits_32_7[8] = cont_bits_32_6[8];
    cont_bits_32_7[9] = cont_bits_32_6[9];
    cont_bits_32_7[10] = cont_bits_32_6[10];
    cont_bits_32_7[11] = cont_bits_32_6[11];
  end

  assign sel_1451 = 32'sd0;

  assign sel_1452 = 32'sd0;

  assign sel_1453 = 32'sd0;

  assign sel_1454 = 32'sd0;

  assign sel_1455 = 32'sd0;

  assign sel_1456 = 32'sd0;

  assign sel_1457 = 32'sd0;

  assign sel_1458 = 32'sd0;

  assign sel_1459 = 32'sd0;

  assign sel_1460 = 32'sd0;

  assign sel_1461 = 32'sd0;

  assign sel_1462 = 32'sd0;

  assign s_156 = 32'sd7;

  assign sel_1_287 = (s_15 == 1'b0 ? sel_1462 :
              s_156);

  assign sel_1463 = 32'sd0;

  assign sel_1_288 = (s_16 == 1'b0 ? sel_1_287 :
              sel_1463);

  assign sel_1464 = 32'sd0;

  assign sel_1_289 = (s_17 == 1'b0 ? sel_1_288 :
              sel_1464);

  assign sel_1465 = 32'sd0;

  assign sel_1_290 = (s_18 == 1'b0 ? sel_1_289 :
              sel_1465);

  assign sel_1466 = 32'sd0;

  assign sel_1_291 = (s_19 == 1'b0 ? sel_1_290 :
              sel_1466);

  assign sel_1467 = 32'sd0;

  assign sel_1_292 = (s_20 == 1'b0 ? sel_1_291 :
              sel_1467);

  assign sel_1468 = 32'sd0;

  assign sel_1469 = 32'sd0;

  assign sel_1470 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1451, sel_1452, sel_1453, sel_1454, sel_1455, sel_1456,
       sel_1457, sel_1458, sel_1459, sel_1460, sel_1461, sel_1468, sel_1469,
       sel_1470, sel_1_292) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11427_sel_1 = sel_1469;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11427_sel_1 = sel_1468;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11427_sel_1 = sel_1_292;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11427_sel_1 = sel_1461;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11427_sel_1 = sel_1460;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11427_sel_1 = sel_1459;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11427_sel_1 = sel_1458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11427_sel_1 = sel_1457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11427_sel_1 = sel_1456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11427_sel_1 = sel_1455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11427_sel_1 = sel_1454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11427_sel_1 = sel_1453;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11427_sel_1 = sel_1452;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11427_sel_1 = sel_1451;
        end
      default :
        begin
          p11427_sel_1 = sel_1470;
        end
    endcase
    sel_1_293 = p11427_sel_1;
  end

  assign tmp_141 = functionOutput_13[sel_1_293];

  assign sel_1471 = 1'b0;

  assign sel_1472 = 1'b0;

  assign sel_1473 = 1'b0;

  assign sel_1474 = 1'b0;

  assign sel_1475 = 1'b0;

  assign sel_1476 = 1'b0;

  assign sel_1477 = 1'b0;

  assign sel_1478 = 1'b0;

  assign sel_1479 = 1'b0;

  assign sel_1480 = 1'b0;

  assign sel_1481 = 1'b0;

  assign sel_1482 = 1'b0;

  assign s_157 = 1'b1;

  assign sel_2_334 = (s_15 == 1'b0 ? sel_1482 :
              s_157);

  assign sel_1483 = 1'b0;

  assign sel_2_335 = (s_16 == 1'b0 ? sel_2_334 :
              sel_1483);

  assign sel_1484 = 1'b0;

  assign sel_2_336 = (s_17 == 1'b0 ? sel_2_335 :
              sel_1484);

  assign sel_1485 = 1'b0;

  assign sel_2_337 = (s_18 == 1'b0 ? sel_2_336 :
              sel_1485);

  assign sel_1486 = 1'b0;

  assign sel_2_338 = (s_19 == 1'b0 ? sel_2_337 :
              sel_1486);

  assign sel_1487 = 1'b0;

  assign sel_2_339 = (s_20 == 1'b0 ? sel_2_338 :
              sel_1487);

  assign sel_1488 = 1'b0;

  assign sel_1489 = 1'b0;

  assign sel_1490 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1471, sel_1472, sel_1473, sel_1474, sel_1475, sel_1476,
       sel_1477, sel_1478, sel_1479, sel_1480, sel_1481, sel_1488, sel_1489,
       sel_1490, sel_2_339) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5679_sel_2 = sel_1489;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5679_sel_2 = sel_1488;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5679_sel_2 = sel_2_339;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5679_sel_2 = sel_1481;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5679_sel_2 = sel_1480;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5679_sel_2 = sel_1479;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5679_sel_2 = sel_1478;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5679_sel_2 = sel_1477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5679_sel_2 = sel_1476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5679_sel_2 = sel_1475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5679_sel_2 = sel_1474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5679_sel_2 = sel_1473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5679_sel_2 = sel_1472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5679_sel_2 = sel_1471;
        end
      default :
        begin
          p5679_sel_2 = sel_1490;
        end
    endcase
    sel_2_340 = p5679_sel_2;
  end

  always @* begin
    p5678cont_bits_32_cont_bits_32[7] = cont_bits_32_7[7];
    if (sel_2_340) begin
      p5678cont_bits_32_cont_bits_32[7] = tmp_141;
    end
    cont_bits_32_8[0] = cont_bits_32_7[0];
    cont_bits_32_8[1] = cont_bits_32_7[1];
    cont_bits_32_8[2] = cont_bits_32_7[2];
    cont_bits_32_8[3] = cont_bits_32_7[3];
    cont_bits_32_8[4] = cont_bits_32_7[4];
    cont_bits_32_8[5] = cont_bits_32_7[5];
    cont_bits_32_8[6] = cont_bits_32_7[6];
    cont_bits_32_8[7] = p5678cont_bits_32_cont_bits_32[7];
    cont_bits_32_8[8] = cont_bits_32_7[8];
    cont_bits_32_8[9] = cont_bits_32_7[9];
    cont_bits_32_8[10] = cont_bits_32_7[10];
    cont_bits_32_8[11] = cont_bits_32_7[11];
  end

  assign sel_1491 = 32'sd0;

  assign sel_1492 = 32'sd0;

  assign sel_1493 = 32'sd0;

  assign sel_1494 = 32'sd0;

  assign sel_1495 = 32'sd0;

  assign sel_1496 = 32'sd0;

  assign sel_1497 = 32'sd0;

  assign sel_1498 = 32'sd0;

  assign sel_1499 = 32'sd0;

  assign sel_1500 = 32'sd0;

  assign sel_1501 = 32'sd0;

  assign sel_1502 = 32'sd0;

  assign s_158 = 32'sd8;

  assign sel_1_294 = (s_15 == 1'b0 ? sel_1502 :
              s_158);

  assign sel_1503 = 32'sd0;

  assign sel_1_295 = (s_16 == 1'b0 ? sel_1_294 :
              sel_1503);

  assign sel_1504 = 32'sd0;

  assign sel_1_296 = (s_17 == 1'b0 ? sel_1_295 :
              sel_1504);

  assign sel_1505 = 32'sd0;

  assign sel_1_297 = (s_18 == 1'b0 ? sel_1_296 :
              sel_1505);

  assign sel_1506 = 32'sd0;

  assign sel_1_298 = (s_19 == 1'b0 ? sel_1_297 :
              sel_1506);

  assign sel_1507 = 32'sd0;

  assign sel_1_299 = (s_20 == 1'b0 ? sel_1_298 :
              sel_1507);

  assign sel_1508 = 32'sd0;

  assign sel_1509 = 32'sd0;

  assign sel_1510 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1491, sel_1492, sel_1493, sel_1494, sel_1495, sel_1496,
       sel_1497, sel_1498, sel_1499, sel_1500, sel_1501, sel_1508, sel_1509,
       sel_1510, sel_1_299) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10713_sel_1 = sel_1509;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10713_sel_1 = sel_1508;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10713_sel_1 = sel_1_299;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10713_sel_1 = sel_1501;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10713_sel_1 = sel_1500;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10713_sel_1 = sel_1499;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10713_sel_1 = sel_1498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10713_sel_1 = sel_1497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10713_sel_1 = sel_1496;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10713_sel_1 = sel_1495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10713_sel_1 = sel_1494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10713_sel_1 = sel_1493;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10713_sel_1 = sel_1492;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10713_sel_1 = sel_1491;
        end
      default :
        begin
          p10713_sel_1 = sel_1510;
        end
    endcase
    sel_1_300 = p10713_sel_1;
  end

  assign tmp_142 = functionOutput_13[sel_1_300];

  assign sel_1511 = 1'b0;

  assign sel_1512 = 1'b0;

  assign sel_1513 = 1'b0;

  assign sel_1514 = 1'b0;

  assign sel_1515 = 1'b0;

  assign sel_1516 = 1'b0;

  assign sel_1517 = 1'b0;

  assign sel_1518 = 1'b0;

  assign sel_1519 = 1'b0;

  assign sel_1520 = 1'b0;

  assign sel_1521 = 1'b0;

  assign sel_1522 = 1'b0;

  assign s_159 = 1'b1;

  assign sel_2_341 = (s_15 == 1'b0 ? sel_1522 :
              s_159);

  assign sel_1523 = 1'b0;

  assign sel_2_342 = (s_16 == 1'b0 ? sel_2_341 :
              sel_1523);

  assign sel_1524 = 1'b0;

  assign sel_2_343 = (s_17 == 1'b0 ? sel_2_342 :
              sel_1524);

  assign sel_1525 = 1'b0;

  assign sel_2_344 = (s_18 == 1'b0 ? sel_2_343 :
              sel_1525);

  assign sel_1526 = 1'b0;

  assign sel_2_345 = (s_19 == 1'b0 ? sel_2_344 :
              sel_1526);

  assign sel_1527 = 1'b0;

  assign sel_2_346 = (s_20 == 1'b0 ? sel_2_345 :
              sel_1527);

  assign sel_1528 = 1'b0;

  assign sel_1529 = 1'b0;

  assign sel_1530 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1511, sel_1512, sel_1513, sel_1514, sel_1515, sel_1516,
       sel_1517, sel_1518, sel_1519, sel_1520, sel_1521, sel_1528, sel_1529,
       sel_1530, sel_2_346) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5193_sel_2 = sel_1529;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5193_sel_2 = sel_1528;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5193_sel_2 = sel_2_346;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5193_sel_2 = sel_1521;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5193_sel_2 = sel_1520;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5193_sel_2 = sel_1519;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5193_sel_2 = sel_1518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5193_sel_2 = sel_1517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5193_sel_2 = sel_1516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5193_sel_2 = sel_1515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5193_sel_2 = sel_1514;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5193_sel_2 = sel_1513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5193_sel_2 = sel_1512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5193_sel_2 = sel_1511;
        end
      default :
        begin
          p5193_sel_2 = sel_1530;
        end
    endcase
    sel_2_347 = p5193_sel_2;
  end

  always @* begin
    p5192cont_bits_32_cont_bits_32[8] = cont_bits_32_8[8];
    if (sel_2_347) begin
      p5192cont_bits_32_cont_bits_32[8] = tmp_142;
    end
    cont_bits_32_9[0] = cont_bits_32_8[0];
    cont_bits_32_9[1] = cont_bits_32_8[1];
    cont_bits_32_9[2] = cont_bits_32_8[2];
    cont_bits_32_9[3] = cont_bits_32_8[3];
    cont_bits_32_9[4] = cont_bits_32_8[4];
    cont_bits_32_9[5] = cont_bits_32_8[5];
    cont_bits_32_9[6] = cont_bits_32_8[6];
    cont_bits_32_9[7] = cont_bits_32_8[7];
    cont_bits_32_9[8] = p5192cont_bits_32_cont_bits_32[8];
    cont_bits_32_9[9] = cont_bits_32_8[9];
    cont_bits_32_9[10] = cont_bits_32_8[10];
    cont_bits_32_9[11] = cont_bits_32_8[11];
  end

  assign sel_1531 = 32'sd0;

  assign sel_1532 = 32'sd0;

  assign sel_1533 = 32'sd0;

  assign sel_1534 = 32'sd0;

  assign sel_1535 = 32'sd0;

  assign sel_1536 = 32'sd0;

  assign sel_1537 = 32'sd0;

  assign sel_1538 = 32'sd0;

  assign sel_1539 = 32'sd0;

  assign sel_1540 = 32'sd0;

  assign sel_1541 = 32'sd0;

  assign sel_1542 = 32'sd0;

  assign s_160 = 32'sd9;

  assign sel_1_301 = (s_15 == 1'b0 ? sel_1542 :
              s_160);

  assign sel_1543 = 32'sd0;

  assign sel_1_302 = (s_16 == 1'b0 ? sel_1_301 :
              sel_1543);

  assign sel_1544 = 32'sd0;

  assign sel_1_303 = (s_17 == 1'b0 ? sel_1_302 :
              sel_1544);

  assign sel_1545 = 32'sd0;

  assign sel_1_304 = (s_18 == 1'b0 ? sel_1_303 :
              sel_1545);

  assign sel_1546 = 32'sd0;

  assign sel_1_305 = (s_19 == 1'b0 ? sel_1_304 :
              sel_1546);

  assign sel_1547 = 32'sd0;

  assign sel_1_306 = (s_20 == 1'b0 ? sel_1_305 :
              sel_1547);

  assign sel_1548 = 32'sd0;

  assign sel_1549 = 32'sd0;

  assign sel_1550 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1531, sel_1532, sel_1533, sel_1534, sel_1535, sel_1536,
       sel_1537, sel_1538, sel_1539, sel_1540, sel_1541, sel_1548, sel_1549,
       sel_1550, sel_1_306) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10798_sel_1 = sel_1549;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10798_sel_1 = sel_1548;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10798_sel_1 = sel_1_306;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10798_sel_1 = sel_1541;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10798_sel_1 = sel_1540;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10798_sel_1 = sel_1539;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10798_sel_1 = sel_1538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10798_sel_1 = sel_1537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10798_sel_1 = sel_1536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10798_sel_1 = sel_1535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10798_sel_1 = sel_1534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10798_sel_1 = sel_1533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10798_sel_1 = sel_1532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10798_sel_1 = sel_1531;
        end
      default :
        begin
          p10798_sel_1 = sel_1550;
        end
    endcase
    sel_1_307 = p10798_sel_1;
  end

  assign tmp_143 = functionOutput_13[sel_1_307];

  assign sel_1551 = 1'b0;

  assign sel_1552 = 1'b0;

  assign sel_1553 = 1'b0;

  assign sel_1554 = 1'b0;

  assign sel_1555 = 1'b0;

  assign sel_1556 = 1'b0;

  assign sel_1557 = 1'b0;

  assign sel_1558 = 1'b0;

  assign sel_1559 = 1'b0;

  assign sel_1560 = 1'b0;

  assign sel_1561 = 1'b0;

  assign sel_1562 = 1'b0;

  assign s_161 = 1'b1;

  assign sel_2_348 = (s_15 == 1'b0 ? sel_1562 :
              s_161);

  assign sel_1563 = 1'b0;

  assign sel_2_349 = (s_16 == 1'b0 ? sel_2_348 :
              sel_1563);

  assign sel_1564 = 1'b0;

  assign sel_2_350 = (s_17 == 1'b0 ? sel_2_349 :
              sel_1564);

  assign sel_1565 = 1'b0;

  assign sel_2_351 = (s_18 == 1'b0 ? sel_2_350 :
              sel_1565);

  assign sel_1566 = 1'b0;

  assign sel_2_352 = (s_19 == 1'b0 ? sel_2_351 :
              sel_1566);

  assign sel_1567 = 1'b0;

  assign sel_2_353 = (s_20 == 1'b0 ? sel_2_352 :
              sel_1567);

  assign sel_1568 = 1'b0;

  assign sel_1569 = 1'b0;

  assign sel_1570 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1551, sel_1552, sel_1553, sel_1554, sel_1555, sel_1556,
       sel_1557, sel_1558, sel_1559, sel_1560, sel_1561, sel_1568, sel_1569,
       sel_1570, sel_2_353) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5073_sel_2 = sel_1569;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5073_sel_2 = sel_1568;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5073_sel_2 = sel_2_353;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5073_sel_2 = sel_1561;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5073_sel_2 = sel_1560;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5073_sel_2 = sel_1559;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5073_sel_2 = sel_1558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5073_sel_2 = sel_1557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5073_sel_2 = sel_1556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5073_sel_2 = sel_1555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5073_sel_2 = sel_1554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5073_sel_2 = sel_1553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5073_sel_2 = sel_1552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5073_sel_2 = sel_1551;
        end
      default :
        begin
          p5073_sel_2 = sel_1570;
        end
    endcase
    sel_2_354 = p5073_sel_2;
  end

  always @* begin
    p5072cont_bits_32_cont_bits_32[9] = cont_bits_32_9[9];
    if (sel_2_354) begin
      p5072cont_bits_32_cont_bits_32[9] = tmp_143;
    end
    cont_bits_32_10[0] = cont_bits_32_9[0];
    cont_bits_32_10[1] = cont_bits_32_9[1];
    cont_bits_32_10[2] = cont_bits_32_9[2];
    cont_bits_32_10[3] = cont_bits_32_9[3];
    cont_bits_32_10[4] = cont_bits_32_9[4];
    cont_bits_32_10[5] = cont_bits_32_9[5];
    cont_bits_32_10[6] = cont_bits_32_9[6];
    cont_bits_32_10[7] = cont_bits_32_9[7];
    cont_bits_32_10[8] = cont_bits_32_9[8];
    cont_bits_32_10[9] = p5072cont_bits_32_cont_bits_32[9];
    cont_bits_32_10[10] = cont_bits_32_9[10];
    cont_bits_32_10[11] = cont_bits_32_9[11];
  end

  assign sel_1571 = 32'sd0;

  assign sel_1572 = 32'sd0;

  assign sel_1573 = 32'sd0;

  assign sel_1574 = 32'sd0;

  assign sel_1575 = 32'sd0;

  assign sel_1576 = 32'sd0;

  assign sel_1577 = 32'sd0;

  assign sel_1578 = 32'sd0;

  assign sel_1579 = 32'sd0;

  assign sel_1580 = 32'sd0;

  assign sel_1581 = 32'sd0;

  assign sel_1582 = 32'sd0;

  assign s_162 = 32'sd10;

  assign sel_1_308 = (s_15 == 1'b0 ? sel_1582 :
              s_162);

  assign sel_1583 = 32'sd0;

  assign sel_1_309 = (s_16 == 1'b0 ? sel_1_308 :
              sel_1583);

  assign sel_1584 = 32'sd0;

  assign sel_1_310 = (s_17 == 1'b0 ? sel_1_309 :
              sel_1584);

  assign sel_1585 = 32'sd0;

  assign sel_1_311 = (s_18 == 1'b0 ? sel_1_310 :
              sel_1585);

  assign sel_1586 = 32'sd0;

  assign sel_1_312 = (s_19 == 1'b0 ? sel_1_311 :
              sel_1586);

  assign sel_1587 = 32'sd0;

  assign sel_1_313 = (s_20 == 1'b0 ? sel_1_312 :
              sel_1587);

  assign sel_1588 = 32'sd0;

  assign sel_1589 = 32'sd0;

  assign sel_1590 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1571, sel_1572, sel_1573, sel_1574, sel_1575, sel_1576,
       sel_1577, sel_1578, sel_1579, sel_1580, sel_1581, sel_1588, sel_1589,
       sel_1590, sel_1_313) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11223_sel_1 = sel_1589;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11223_sel_1 = sel_1588;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11223_sel_1 = sel_1_313;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11223_sel_1 = sel_1581;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11223_sel_1 = sel_1580;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11223_sel_1 = sel_1579;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11223_sel_1 = sel_1578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11223_sel_1 = sel_1577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11223_sel_1 = sel_1576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11223_sel_1 = sel_1575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11223_sel_1 = sel_1574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11223_sel_1 = sel_1573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11223_sel_1 = sel_1572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11223_sel_1 = sel_1571;
        end
      default :
        begin
          p11223_sel_1 = sel_1590;
        end
    endcase
    sel_1_314 = p11223_sel_1;
  end

  assign tmp_144 = functionOutput_13[sel_1_314];

  assign sel_1591 = 1'b0;

  assign sel_1592 = 1'b0;

  assign sel_1593 = 1'b0;

  assign sel_1594 = 1'b0;

  assign sel_1595 = 1'b0;

  assign sel_1596 = 1'b0;

  assign sel_1597 = 1'b0;

  assign sel_1598 = 1'b0;

  assign sel_1599 = 1'b0;

  assign sel_1600 = 1'b0;

  assign sel_1601 = 1'b0;

  assign sel_1602 = 1'b0;

  assign s_163 = 1'b1;

  assign sel_2_355 = (s_15 == 1'b0 ? sel_1602 :
              s_163);

  assign sel_1603 = 1'b0;

  assign sel_2_356 = (s_16 == 1'b0 ? sel_2_355 :
              sel_1603);

  assign sel_1604 = 1'b0;

  assign sel_2_357 = (s_17 == 1'b0 ? sel_2_356 :
              sel_1604);

  assign sel_1605 = 1'b0;

  assign sel_2_358 = (s_18 == 1'b0 ? sel_2_357 :
              sel_1605);

  assign sel_1606 = 1'b0;

  assign sel_2_359 = (s_19 == 1'b0 ? sel_2_358 :
              sel_1606);

  assign sel_1607 = 1'b0;

  assign sel_2_360 = (s_20 == 1'b0 ? sel_2_359 :
              sel_1607);

  assign sel_1608 = 1'b0;

  assign sel_1609 = 1'b0;

  assign sel_1610 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1591, sel_1592, sel_1593, sel_1594, sel_1595, sel_1596,
       sel_1597, sel_1598, sel_1599, sel_1600, sel_1601, sel_1608, sel_1609,
       sel_1610, sel_2_360) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4587_sel_2 = sel_1609;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4587_sel_2 = sel_1608;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4587_sel_2 = sel_2_360;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4587_sel_2 = sel_1601;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4587_sel_2 = sel_1600;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4587_sel_2 = sel_1599;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4587_sel_2 = sel_1598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4587_sel_2 = sel_1597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4587_sel_2 = sel_1596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4587_sel_2 = sel_1595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4587_sel_2 = sel_1594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4587_sel_2 = sel_1593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4587_sel_2 = sel_1592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4587_sel_2 = sel_1591;
        end
      default :
        begin
          p4587_sel_2 = sel_1610;
        end
    endcase
    sel_2_361 = p4587_sel_2;
  end

  always @* begin
    p4586cont_bits_32_cont_bits_32[10] = cont_bits_32_10[10];
    if (sel_2_361) begin
      p4586cont_bits_32_cont_bits_32[10] = tmp_144;
    end
    cont_bits_32_11[0] = cont_bits_32_10[0];
    cont_bits_32_11[1] = cont_bits_32_10[1];
    cont_bits_32_11[2] = cont_bits_32_10[2];
    cont_bits_32_11[3] = cont_bits_32_10[3];
    cont_bits_32_11[4] = cont_bits_32_10[4];
    cont_bits_32_11[5] = cont_bits_32_10[5];
    cont_bits_32_11[6] = cont_bits_32_10[6];
    cont_bits_32_11[7] = cont_bits_32_10[7];
    cont_bits_32_11[8] = cont_bits_32_10[8];
    cont_bits_32_11[9] = cont_bits_32_10[9];
    cont_bits_32_11[10] = p4586cont_bits_32_cont_bits_32[10];
    cont_bits_32_11[11] = cont_bits_32_10[11];
  end

  assign sel_1611 = 32'sd0;

  assign sel_1612 = 32'sd0;

  assign sel_1613 = 32'sd0;

  assign sel_1614 = 32'sd0;

  assign sel_1615 = 32'sd0;

  assign sel_1616 = 32'sd0;

  assign sel_1617 = 32'sd0;

  assign sel_1618 = 32'sd0;

  assign sel_1619 = 32'sd0;

  assign sel_1620 = 32'sd0;

  assign sel_1621 = 32'sd0;

  assign sel_1622 = 32'sd0;

  assign s_164 = 32'sd11;

  assign sel_1_315 = (s_15 == 1'b0 ? sel_1622 :
              s_164);

  assign sel_1623 = 32'sd0;

  assign sel_1_316 = (s_16 == 1'b0 ? sel_1_315 :
              sel_1623);

  assign sel_1624 = 32'sd0;

  assign sel_1_317 = (s_17 == 1'b0 ? sel_1_316 :
              sel_1624);

  assign sel_1625 = 32'sd0;

  assign sel_1_318 = (s_18 == 1'b0 ? sel_1_317 :
              sel_1625);

  assign sel_1626 = 32'sd0;

  assign sel_1_319 = (s_19 == 1'b0 ? sel_1_318 :
              sel_1626);

  assign sel_1627 = 32'sd0;

  assign sel_1_320 = (s_20 == 1'b0 ? sel_1_319 :
              sel_1627);

  assign sel_1628 = 32'sd0;

  assign sel_1629 = 32'sd0;

  assign sel_1630 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1611, sel_1612, sel_1613, sel_1614, sel_1615, sel_1616,
       sel_1617, sel_1618, sel_1619, sel_1620, sel_1621, sel_1628, sel_1629,
       sel_1630, sel_1_320) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10169_sel_1 = sel_1629;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10169_sel_1 = sel_1628;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10169_sel_1 = sel_1_320;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10169_sel_1 = sel_1621;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10169_sel_1 = sel_1620;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10169_sel_1 = sel_1619;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10169_sel_1 = sel_1618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10169_sel_1 = sel_1617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10169_sel_1 = sel_1616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10169_sel_1 = sel_1615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10169_sel_1 = sel_1614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10169_sel_1 = sel_1613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10169_sel_1 = sel_1612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10169_sel_1 = sel_1611;
        end
      default :
        begin
          p10169_sel_1 = sel_1630;
        end
    endcase
    sel_1_321 = p10169_sel_1;
  end

  assign tmp_145 = functionOutput_13[sel_1_321];

  assign sel_1631 = 1'b0;

  assign sel_1632 = 1'b0;

  assign sel_1633 = 1'b0;

  assign sel_1634 = 1'b0;

  assign sel_1635 = 1'b0;

  assign sel_1636 = 1'b0;

  assign sel_1637 = 1'b0;

  assign sel_1638 = 1'b0;

  assign sel_1639 = 1'b0;

  assign sel_1640 = 1'b0;

  assign sel_1641 = 1'b0;

  assign sel_1642 = 1'b0;

  assign s_165 = 1'b1;

  assign sel_2_362 = (s_15 == 1'b0 ? sel_1642 :
              s_165);

  assign sel_1643 = 1'b0;

  assign sel_2_363 = (s_16 == 1'b0 ? sel_2_362 :
              sel_1643);

  assign sel_1644 = 1'b0;

  assign sel_2_364 = (s_17 == 1'b0 ? sel_2_363 :
              sel_1644);

  assign sel_1645 = 1'b0;

  assign sel_2_365 = (s_18 == 1'b0 ? sel_2_364 :
              sel_1645);

  assign sel_1646 = 1'b0;

  assign sel_2_366 = (s_19 == 1'b0 ? sel_2_365 :
              sel_1646);

  assign sel_1647 = 1'b0;

  assign sel_2_367 = (s_20 == 1'b0 ? sel_2_366 :
              sel_1647);

  assign sel_1648 = 1'b0;

  assign sel_1649 = 1'b0;

  assign sel_1650 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1631, sel_1632, sel_1633, sel_1634, sel_1635, sel_1636,
       sel_1637, sel_1638, sel_1639, sel_1640, sel_1641, sel_1648, sel_1649,
       sel_1650, sel_2_367) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4467_sel_2 = sel_1649;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4467_sel_2 = sel_1648;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4467_sel_2 = sel_2_367;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4467_sel_2 = sel_1641;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4467_sel_2 = sel_1640;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4467_sel_2 = sel_1639;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4467_sel_2 = sel_1638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4467_sel_2 = sel_1637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4467_sel_2 = sel_1636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4467_sel_2 = sel_1635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4467_sel_2 = sel_1634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4467_sel_2 = sel_1633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4467_sel_2 = sel_1632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4467_sel_2 = sel_1631;
        end
      default :
        begin
          p4467_sel_2 = sel_1650;
        end
    endcase
    sel_2_368 = p4467_sel_2;
  end

  always @* begin
    p4466cont_bits_32_cont_bits_32[11] = cont_bits_32_11[11];
    if (sel_2_368) begin
      p4466cont_bits_32_cont_bits_32[11] = tmp_145;
    end
    cont_bits_32_12[0] = cont_bits_32_11[0];
    cont_bits_32_12[1] = cont_bits_32_11[1];
    cont_bits_32_12[2] = cont_bits_32_11[2];
    cont_bits_32_12[3] = cont_bits_32_11[3];
    cont_bits_32_12[4] = cont_bits_32_11[4];
    cont_bits_32_12[5] = cont_bits_32_11[5];
    cont_bits_32_12[6] = cont_bits_32_11[6];
    cont_bits_32_12[7] = cont_bits_32_11[7];
    cont_bits_32_12[8] = cont_bits_32_11[8];
    cont_bits_32_12[9] = cont_bits_32_11[9];
    cont_bits_32_12[10] = cont_bits_32_11[10];
    cont_bits_32_12[11] = p4466cont_bits_32_cont_bits_32[11];
  end

  assign sel_1651 = 32'sd0;

  assign sel_1652 = 32'sd0;

  assign sel_1653 = 32'sd0;

  assign sel_1654 = 32'sd0;

  assign sel_1655 = 32'sd0;

  assign sel_1656 = 32'sd0;

  assign sel_1657 = 32'sd0;

  assign sel_1658 = 32'sd0;

  assign sel_1659 = 32'sd0;

  assign sel_1660 = 32'sd0;

  assign sel_1661 = 32'sd0;

  assign sel_1662 = 32'sd0;

  assign s_166 = 32'sd0;

  assign sel_1_322 = (s_15 == 1'b0 ? sel_1662 :
              s_166);

  assign sel_1663 = 32'sd0;

  assign sel_1_323 = (s_16 == 1'b0 ? sel_1_322 :
              sel_1663);

  assign sel_1664 = 32'sd0;

  assign sel_1_324 = (s_17 == 1'b0 ? sel_1_323 :
              sel_1664);

  assign sel_1665 = 32'sd0;

  assign sel_1_325 = (s_18 == 1'b0 ? sel_1_324 :
              sel_1665);

  assign sel_1666 = 32'sd0;

  assign sel_1_326 = (s_19 == 1'b0 ? sel_1_325 :
              sel_1666);

  assign sel_1667 = 32'sd0;

  assign sel_1_327 = (s_20 == 1'b0 ? sel_1_326 :
              sel_1667);

  assign sel_1668 = 32'sd0;

  assign sel_1669 = 32'sd0;

  assign sel_1670 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1651, sel_1652, sel_1653, sel_1654, sel_1655, sel_1656,
       sel_1657, sel_1658, sel_1659, sel_1660, sel_1661, sel_1668, sel_1669,
       sel_1670, sel_1_327) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1648_sel_1 = sel_1669;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1648_sel_1 = sel_1668;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1648_sel_1 = sel_1_327;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1648_sel_1 = sel_1661;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1648_sel_1 = sel_1660;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1648_sel_1 = sel_1659;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1648_sel_1 = sel_1658;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1648_sel_1 = sel_1657;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1648_sel_1 = sel_1656;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1648_sel_1 = sel_1655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1648_sel_1 = sel_1654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1648_sel_1 = sel_1653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1648_sel_1 = sel_1652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1648_sel_1 = sel_1651;
        end
      default :
        begin
          p1648_sel_1 = sel_1670;
        end
    endcase
    sel_1_328 = p1648_sel_1;
  end

  assign cont_bits_32_13 = cont_bits_32_12[sel_1_328];

  assign sel_1_329 = (s_15 == 1'b0 ? sel_1_237 :
              cont_bits_32_13);

  assign cont_bits_31[0] = 1'b0;
  assign cont_bits_31[1] = 1'b0;
  assign cont_bits_31[2] = 1'b0;
  assign cont_bits_31[3] = 1'b0;
  assign cont_bits_31[4] = 1'b0;
  assign cont_bits_31[5] = 1'b0;
  assign cont_bits_31[6] = 1'b0;
  assign cont_bits_31[7] = 1'b0;
  assign cont_bits_31[8] = 1'b0;
  assign cont_bits_31[9] = 1'b0;
  assign cont_bits_31[10] = 1'b0;
  assign cont_bits_31[11] = 1'b0;

  assign tmp_146 = (s_13 == 1'b0 ? v3_1 :
              r_v31);

  assign tmp_147 = (s_14 == 1'b0 ? tmp_146 :
              r_v31);

  assign tmp_148 = (s_15 == 1'b0 ? tmp_147 :
              r_v31);

  assign tmp_149 = (s_16 == 1'b0 ? tmp_148 :
              r_v31);

  assign tmp_150 = (s_17 == 1'b0 ? tmp_149 :
              r_v31);

  assign tmp_151 = (s_18 == 1'b0 ? tmp_150 :
              r_v31);

  assign tmp_152 = (s_19 == 1'b0 ? tmp_151 :
              r_v31);

  assign tmp_153 = (s_20 == 1'b0 ? tmp_152 :
              r_v31);

  always @(is_SPI_MNGR_36, r_v31, tmp_153, v3_1) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p69_tmp = tmp_153;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p69_tmp = v3_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p69_tmp = r_v31;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p69_tmp = r_v31;
        end
      default :
        begin
          p69_tmp = r_v31;
        end
    endcase
    tmp_154 = p69_tmp;
  end

  always @(posedge clk)
    begin : r_v31_reg_process
      if (rst == 1'b1) begin
        r_v31 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v31 <= tmp_154;
        end
      end
    end

  simfcn1 u_simfcn1_3 (.vx(r_v31),  // uint16
                       .cont_bits2_0(functionOutput_0_3),  // boolean
                       .cont_bits2_1(functionOutput_1_3),  // boolean
                       .cont_bits2_2(functionOutput_2_3),  // boolean
                       .cont_bits2_3(functionOutput_3_3),  // boolean
                       .cont_bits2_4(functionOutput_4_3),  // boolean
                       .cont_bits2_5(functionOutput_5_3),  // boolean
                       .cont_bits2_6(functionOutput_6_3),  // boolean
                       .cont_bits2_7(functionOutput_7_3),  // boolean
                       .cont_bits2_8(functionOutput_8_3),  // boolean
                       .cont_bits2_9(functionOutput_9_3),  // boolean
                       .cont_bits2_10(functionOutput_10_3),  // boolean
                       .cont_bits2_11(functionOutput_11_3)  // boolean
                       );

  assign functionOutput_14[0] = functionOutput_0_3;
  assign functionOutput_14[1] = functionOutput_1_3;
  assign functionOutput_14[2] = functionOutput_2_3;
  assign functionOutput_14[3] = functionOutput_3_3;
  assign functionOutput_14[4] = functionOutput_4_3;
  assign functionOutput_14[5] = functionOutput_5_3;
  assign functionOutput_14[6] = functionOutput_6_3;
  assign functionOutput_14[7] = functionOutput_7_3;
  assign functionOutput_14[8] = functionOutput_8_3;
  assign functionOutput_14[9] = functionOutput_9_3;
  assign functionOutput_14[10] = functionOutput_10_3;
  assign functionOutput_14[11] = functionOutput_11_3;

  assign sel_1671 = 32'sd0;

  assign sel_1672 = 32'sd0;

  assign sel_1673 = 32'sd0;

  assign sel_1674 = 32'sd0;

  assign sel_1675 = 32'sd0;

  assign sel_1676 = 32'sd0;

  assign sel_1677 = 32'sd0;

  assign sel_1678 = 32'sd0;

  assign sel_1679 = 32'sd0;

  assign sel_1680 = 32'sd0;

  assign sel_1681 = 32'sd0;

  assign sel_1682 = 32'sd0;

  assign s_167 = 32'sd0;

  assign sel_1_330 = (s_16 == 1'b0 ? sel_1682 :
              s_167);

  assign sel_1683 = 32'sd0;

  assign sel_1_331 = (s_17 == 1'b0 ? sel_1_330 :
              sel_1683);

  assign sel_1684 = 32'sd0;

  assign sel_1_332 = (s_18 == 1'b0 ? sel_1_331 :
              sel_1684);

  assign sel_1685 = 32'sd0;

  assign sel_1_333 = (s_19 == 1'b0 ? sel_1_332 :
              sel_1685);

  assign sel_1686 = 32'sd0;

  assign sel_1_334 = (s_20 == 1'b0 ? sel_1_333 :
              sel_1686);

  assign sel_1687 = 32'sd0;

  assign sel_1688 = 32'sd0;

  assign sel_1689 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1671, sel_1672, sel_1673, sel_1674, sel_1675, sel_1676,
       sel_1677, sel_1678, sel_1679, sel_1680, sel_1681, sel_1687, sel_1688,
       sel_1689, sel_1_334) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11257_sel_1 = sel_1688;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11257_sel_1 = sel_1687;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11257_sel_1 = sel_1_334;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11257_sel_1 = sel_1681;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11257_sel_1 = sel_1680;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11257_sel_1 = sel_1679;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11257_sel_1 = sel_1678;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11257_sel_1 = sel_1677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11257_sel_1 = sel_1676;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11257_sel_1 = sel_1675;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11257_sel_1 = sel_1674;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11257_sel_1 = sel_1673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11257_sel_1 = sel_1672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11257_sel_1 = sel_1671;
        end
      default :
        begin
          p11257_sel_1 = sel_1689;
        end
    endcase
    sel_1_335 = p11257_sel_1;
  end

  assign tmp_155 = functionOutput_14[sel_1_335];

  assign sel_1690 = 1'b0;

  assign sel_1691 = 1'b0;

  assign sel_1692 = 1'b0;

  assign sel_1693 = 1'b0;

  assign sel_1694 = 1'b0;

  assign sel_1695 = 1'b0;

  assign sel_1696 = 1'b0;

  assign sel_1697 = 1'b0;

  assign sel_1698 = 1'b0;

  assign sel_1699 = 1'b0;

  assign sel_1700 = 1'b0;

  assign sel_1701 = 1'b0;

  assign s_168 = 1'b1;

  assign sel_2_369 = (s_16 == 1'b0 ? sel_1701 :
              s_168);

  assign sel_1702 = 1'b0;

  assign sel_2_370 = (s_17 == 1'b0 ? sel_2_369 :
              sel_1702);

  assign sel_1703 = 1'b0;

  assign sel_2_371 = (s_18 == 1'b0 ? sel_2_370 :
              sel_1703);

  assign sel_1704 = 1'b0;

  assign sel_2_372 = (s_19 == 1'b0 ? sel_2_371 :
              sel_1704);

  assign sel_1705 = 1'b0;

  assign sel_2_373 = (s_20 == 1'b0 ? sel_2_372 :
              sel_1705);

  assign sel_1706 = 1'b0;

  assign sel_1707 = 1'b0;

  assign sel_1708 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1690, sel_1691, sel_1692, sel_1693, sel_1694, sel_1695,
       sel_1696, sel_1697, sel_1698, sel_1699, sel_1700, sel_1706, sel_1707,
       sel_1708, sel_2_373) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7599_sel_2 = sel_1707;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7599_sel_2 = sel_1706;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7599_sel_2 = sel_2_373;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7599_sel_2 = sel_1700;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7599_sel_2 = sel_1699;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7599_sel_2 = sel_1698;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7599_sel_2 = sel_1697;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7599_sel_2 = sel_1696;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7599_sel_2 = sel_1695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7599_sel_2 = sel_1694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7599_sel_2 = sel_1693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7599_sel_2 = sel_1692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7599_sel_2 = sel_1691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7599_sel_2 = sel_1690;
        end
      default :
        begin
          p7599_sel_2 = sel_1708;
        end
    endcase
    sel_2_374 = p7599_sel_2;
  end

  always @* begin
    p7598cont_bits_31_cont_bits_31[0] = cont_bits_31[0];
    if (sel_2_374) begin
      p7598cont_bits_31_cont_bits_31[0] = tmp_155;
    end
    cont_bits_31_1[0] = p7598cont_bits_31_cont_bits_31[0];
    cont_bits_31_1[1] = cont_bits_31[1];
    cont_bits_31_1[2] = cont_bits_31[2];
    cont_bits_31_1[3] = cont_bits_31[3];
    cont_bits_31_1[4] = cont_bits_31[4];
    cont_bits_31_1[5] = cont_bits_31[5];
    cont_bits_31_1[6] = cont_bits_31[6];
    cont_bits_31_1[7] = cont_bits_31[7];
    cont_bits_31_1[8] = cont_bits_31[8];
    cont_bits_31_1[9] = cont_bits_31[9];
    cont_bits_31_1[10] = cont_bits_31[10];
    cont_bits_31_1[11] = cont_bits_31[11];
  end

  assign sel_1709 = 32'sd0;

  assign sel_1710 = 32'sd0;

  assign sel_1711 = 32'sd0;

  assign sel_1712 = 32'sd0;

  assign sel_1713 = 32'sd0;

  assign sel_1714 = 32'sd0;

  assign sel_1715 = 32'sd0;

  assign sel_1716 = 32'sd0;

  assign sel_1717 = 32'sd0;

  assign sel_1718 = 32'sd0;

  assign sel_1719 = 32'sd0;

  assign sel_1720 = 32'sd0;

  assign s_169 = 32'sd1;

  assign sel_1_336 = (s_16 == 1'b0 ? sel_1720 :
              s_169);

  assign sel_1721 = 32'sd0;

  assign sel_1_337 = (s_17 == 1'b0 ? sel_1_336 :
              sel_1721);

  assign sel_1722 = 32'sd0;

  assign sel_1_338 = (s_18 == 1'b0 ? sel_1_337 :
              sel_1722);

  assign sel_1723 = 32'sd0;

  assign sel_1_339 = (s_19 == 1'b0 ? sel_1_338 :
              sel_1723);

  assign sel_1724 = 32'sd0;

  assign sel_1_340 = (s_20 == 1'b0 ? sel_1_339 :
              sel_1724);

  assign sel_1725 = 32'sd0;

  assign sel_1726 = 32'sd0;

  assign sel_1727 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1709, sel_1710, sel_1711, sel_1712, sel_1713, sel_1714,
       sel_1715, sel_1716, sel_1717, sel_1718, sel_1719, sel_1725, sel_1726,
       sel_1727, sel_1_340) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11240_sel_1 = sel_1726;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11240_sel_1 = sel_1725;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11240_sel_1 = sel_1_340;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11240_sel_1 = sel_1719;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11240_sel_1 = sel_1718;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11240_sel_1 = sel_1717;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11240_sel_1 = sel_1716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11240_sel_1 = sel_1715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11240_sel_1 = sel_1714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11240_sel_1 = sel_1713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11240_sel_1 = sel_1712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11240_sel_1 = sel_1711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11240_sel_1 = sel_1710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11240_sel_1 = sel_1709;
        end
      default :
        begin
          p11240_sel_1 = sel_1727;
        end
    endcase
    sel_1_341 = p11240_sel_1;
  end

  assign tmp_156 = functionOutput_14[sel_1_341];

  assign sel_1728 = 1'b0;

  assign sel_1729 = 1'b0;

  assign sel_1730 = 1'b0;

  assign sel_1731 = 1'b0;

  assign sel_1732 = 1'b0;

  assign sel_1733 = 1'b0;

  assign sel_1734 = 1'b0;

  assign sel_1735 = 1'b0;

  assign sel_1736 = 1'b0;

  assign sel_1737 = 1'b0;

  assign sel_1738 = 1'b0;

  assign sel_1739 = 1'b0;

  assign s_170 = 1'b1;

  assign sel_2_375 = (s_16 == 1'b0 ? sel_1739 :
              s_170);

  assign sel_1740 = 1'b0;

  assign sel_2_376 = (s_17 == 1'b0 ? sel_2_375 :
              sel_1740);

  assign sel_1741 = 1'b0;

  assign sel_2_377 = (s_18 == 1'b0 ? sel_2_376 :
              sel_1741);

  assign sel_1742 = 1'b0;

  assign sel_2_378 = (s_19 == 1'b0 ? sel_2_377 :
              sel_1742);

  assign sel_1743 = 1'b0;

  assign sel_2_379 = (s_20 == 1'b0 ? sel_2_378 :
              sel_1743);

  assign sel_1744 = 1'b0;

  assign sel_1745 = 1'b0;

  assign sel_1746 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1728, sel_1729, sel_1730, sel_1731, sel_1732, sel_1733,
       sel_1734, sel_1735, sel_1736, sel_1737, sel_1738, sel_1744, sel_1745,
       sel_1746, sel_2_379) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7580_sel_2 = sel_1745;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7580_sel_2 = sel_1744;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7580_sel_2 = sel_2_379;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7580_sel_2 = sel_1738;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7580_sel_2 = sel_1737;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7580_sel_2 = sel_1736;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7580_sel_2 = sel_1735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7580_sel_2 = sel_1734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7580_sel_2 = sel_1733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7580_sel_2 = sel_1732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7580_sel_2 = sel_1731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7580_sel_2 = sel_1730;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7580_sel_2 = sel_1729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7580_sel_2 = sel_1728;
        end
      default :
        begin
          p7580_sel_2 = sel_1746;
        end
    endcase
    sel_2_380 = p7580_sel_2;
  end

  always @* begin
    p7579cont_bits_31_cont_bits_31[1] = cont_bits_31_1[1];
    if (sel_2_380) begin
      p7579cont_bits_31_cont_bits_31[1] = tmp_156;
    end
    cont_bits_31_2[0] = cont_bits_31_1[0];
    cont_bits_31_2[1] = p7579cont_bits_31_cont_bits_31[1];
    cont_bits_31_2[2] = cont_bits_31_1[2];
    cont_bits_31_2[3] = cont_bits_31_1[3];
    cont_bits_31_2[4] = cont_bits_31_1[4];
    cont_bits_31_2[5] = cont_bits_31_1[5];
    cont_bits_31_2[6] = cont_bits_31_1[6];
    cont_bits_31_2[7] = cont_bits_31_1[7];
    cont_bits_31_2[8] = cont_bits_31_1[8];
    cont_bits_31_2[9] = cont_bits_31_1[9];
    cont_bits_31_2[10] = cont_bits_31_1[10];
    cont_bits_31_2[11] = cont_bits_31_1[11];
  end

  assign sel_1747 = 32'sd0;

  assign sel_1748 = 32'sd0;

  assign sel_1749 = 32'sd0;

  assign sel_1750 = 32'sd0;

  assign sel_1751 = 32'sd0;

  assign sel_1752 = 32'sd0;

  assign sel_1753 = 32'sd0;

  assign sel_1754 = 32'sd0;

  assign sel_1755 = 32'sd0;

  assign sel_1756 = 32'sd0;

  assign sel_1757 = 32'sd0;

  assign sel_1758 = 32'sd0;

  assign s_171 = 32'sd2;

  assign sel_1_342 = (s_16 == 1'b0 ? sel_1758 :
              s_171);

  assign sel_1759 = 32'sd0;

  assign sel_1_343 = (s_17 == 1'b0 ? sel_1_342 :
              sel_1759);

  assign sel_1760 = 32'sd0;

  assign sel_1_344 = (s_18 == 1'b0 ? sel_1_343 :
              sel_1760);

  assign sel_1761 = 32'sd0;

  assign sel_1_345 = (s_19 == 1'b0 ? sel_1_344 :
              sel_1761);

  assign sel_1762 = 32'sd0;

  assign sel_1_346 = (s_20 == 1'b0 ? sel_1_345 :
              sel_1762);

  assign sel_1763 = 32'sd0;

  assign sel_1764 = 32'sd0;

  assign sel_1765 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1747, sel_1748, sel_1749, sel_1750, sel_1751, sel_1752,
       sel_1753, sel_1754, sel_1755, sel_1756, sel_1757, sel_1763, sel_1764,
       sel_1765, sel_1_346) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10390_sel_1 = sel_1764;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10390_sel_1 = sel_1763;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10390_sel_1 = sel_1_346;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10390_sel_1 = sel_1757;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10390_sel_1 = sel_1756;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10390_sel_1 = sel_1755;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10390_sel_1 = sel_1754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10390_sel_1 = sel_1753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10390_sel_1 = sel_1752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10390_sel_1 = sel_1751;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10390_sel_1 = sel_1750;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10390_sel_1 = sel_1749;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10390_sel_1 = sel_1748;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10390_sel_1 = sel_1747;
        end
      default :
        begin
          p10390_sel_1 = sel_1765;
        end
    endcase
    sel_1_347 = p10390_sel_1;
  end

  assign tmp_157 = functionOutput_14[sel_1_347];

  assign sel_1766 = 1'b0;

  assign sel_1767 = 1'b0;

  assign sel_1768 = 1'b0;

  assign sel_1769 = 1'b0;

  assign sel_1770 = 1'b0;

  assign sel_1771 = 1'b0;

  assign sel_1772 = 1'b0;

  assign sel_1773 = 1'b0;

  assign sel_1774 = 1'b0;

  assign sel_1775 = 1'b0;

  assign sel_1776 = 1'b0;

  assign sel_1777 = 1'b0;

  assign s_172 = 1'b1;

  assign sel_2_381 = (s_16 == 1'b0 ? sel_1777 :
              s_172);

  assign sel_1778 = 1'b0;

  assign sel_2_382 = (s_17 == 1'b0 ? sel_2_381 :
              sel_1778);

  assign sel_1779 = 1'b0;

  assign sel_2_383 = (s_18 == 1'b0 ? sel_2_382 :
              sel_1779);

  assign sel_1780 = 1'b0;

  assign sel_2_384 = (s_19 == 1'b0 ? sel_2_383 :
              sel_1780);

  assign sel_1781 = 1'b0;

  assign sel_2_385 = (s_20 == 1'b0 ? sel_2_384 :
              sel_1781);

  assign sel_1782 = 1'b0;

  assign sel_1783 = 1'b0;

  assign sel_1784 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1766, sel_1767, sel_1768, sel_1769, sel_1770, sel_1771,
       sel_1772, sel_1773, sel_1774, sel_1775, sel_1776, sel_1782, sel_1783,
       sel_1784, sel_2_385) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6961_sel_2 = sel_1783;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6961_sel_2 = sel_1782;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6961_sel_2 = sel_2_385;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6961_sel_2 = sel_1776;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6961_sel_2 = sel_1775;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6961_sel_2 = sel_1774;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6961_sel_2 = sel_1773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6961_sel_2 = sel_1772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6961_sel_2 = sel_1771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6961_sel_2 = sel_1770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6961_sel_2 = sel_1769;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6961_sel_2 = sel_1768;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6961_sel_2 = sel_1767;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6961_sel_2 = sel_1766;
        end
      default :
        begin
          p6961_sel_2 = sel_1784;
        end
    endcase
    sel_2_386 = p6961_sel_2;
  end

  always @* begin
    p6960cont_bits_31_cont_bits_31[2] = cont_bits_31_2[2];
    if (sel_2_386) begin
      p6960cont_bits_31_cont_bits_31[2] = tmp_157;
    end
    cont_bits_31_3[0] = cont_bits_31_2[0];
    cont_bits_31_3[1] = cont_bits_31_2[1];
    cont_bits_31_3[2] = p6960cont_bits_31_cont_bits_31[2];
    cont_bits_31_3[3] = cont_bits_31_2[3];
    cont_bits_31_3[4] = cont_bits_31_2[4];
    cont_bits_31_3[5] = cont_bits_31_2[5];
    cont_bits_31_3[6] = cont_bits_31_2[6];
    cont_bits_31_3[7] = cont_bits_31_2[7];
    cont_bits_31_3[8] = cont_bits_31_2[8];
    cont_bits_31_3[9] = cont_bits_31_2[9];
    cont_bits_31_3[10] = cont_bits_31_2[10];
    cont_bits_31_3[11] = cont_bits_31_2[11];
  end

  assign sel_1785 = 32'sd0;

  assign sel_1786 = 32'sd0;

  assign sel_1787 = 32'sd0;

  assign sel_1788 = 32'sd0;

  assign sel_1789 = 32'sd0;

  assign sel_1790 = 32'sd0;

  assign sel_1791 = 32'sd0;

  assign sel_1792 = 32'sd0;

  assign sel_1793 = 32'sd0;

  assign sel_1794 = 32'sd0;

  assign sel_1795 = 32'sd0;

  assign sel_1796 = 32'sd0;

  assign s_173 = 32'sd3;

  assign sel_1_348 = (s_16 == 1'b0 ? sel_1796 :
              s_173);

  assign sel_1797 = 32'sd0;

  assign sel_1_349 = (s_17 == 1'b0 ? sel_1_348 :
              sel_1797);

  assign sel_1798 = 32'sd0;

  assign sel_1_350 = (s_18 == 1'b0 ? sel_1_349 :
              sel_1798);

  assign sel_1799 = 32'sd0;

  assign sel_1_351 = (s_19 == 1'b0 ? sel_1_350 :
              sel_1799);

  assign sel_1800 = 32'sd0;

  assign sel_1_352 = (s_20 == 1'b0 ? sel_1_351 :
              sel_1800);

  assign sel_1801 = 32'sd0;

  assign sel_1802 = 32'sd0;

  assign sel_1803 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1785, sel_1786, sel_1787, sel_1788, sel_1789, sel_1790,
       sel_1791, sel_1792, sel_1793, sel_1794, sel_1795, sel_1801, sel_1802,
       sel_1803, sel_1_352) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11104_sel_1 = sel_1802;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11104_sel_1 = sel_1801;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11104_sel_1 = sel_1_352;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11104_sel_1 = sel_1795;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11104_sel_1 = sel_1794;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11104_sel_1 = sel_1793;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11104_sel_1 = sel_1792;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11104_sel_1 = sel_1791;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11104_sel_1 = sel_1790;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11104_sel_1 = sel_1789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11104_sel_1 = sel_1788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11104_sel_1 = sel_1787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11104_sel_1 = sel_1786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11104_sel_1 = sel_1785;
        end
      default :
        begin
          p11104_sel_1 = sel_1803;
        end
    endcase
    sel_1_353 = p11104_sel_1;
  end

  assign tmp_158 = functionOutput_14[sel_1_353];

  assign sel_1804 = 1'b0;

  assign sel_1805 = 1'b0;

  assign sel_1806 = 1'b0;

  assign sel_1807 = 1'b0;

  assign sel_1808 = 1'b0;

  assign sel_1809 = 1'b0;

  assign sel_1810 = 1'b0;

  assign sel_1811 = 1'b0;

  assign sel_1812 = 1'b0;

  assign sel_1813 = 1'b0;

  assign sel_1814 = 1'b0;

  assign sel_1815 = 1'b0;

  assign s_174 = 1'b1;

  assign sel_2_387 = (s_16 == 1'b0 ? sel_1815 :
              s_174);

  assign sel_1816 = 1'b0;

  assign sel_2_388 = (s_17 == 1'b0 ? sel_2_387 :
              sel_1816);

  assign sel_1817 = 1'b0;

  assign sel_2_389 = (s_18 == 1'b0 ? sel_2_388 :
              sel_1817);

  assign sel_1818 = 1'b0;

  assign sel_2_390 = (s_19 == 1'b0 ? sel_2_389 :
              sel_1818);

  assign sel_1819 = 1'b0;

  assign sel_2_391 = (s_20 == 1'b0 ? sel_2_390 :
              sel_1819);

  assign sel_1820 = 1'b0;

  assign sel_1821 = 1'b0;

  assign sel_1822 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1804, sel_1805, sel_1806, sel_1807, sel_1808, sel_1809,
       sel_1810, sel_1811, sel_1812, sel_1813, sel_1814, sel_1820, sel_1821,
       sel_1822, sel_2_391) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6942_sel_2 = sel_1821;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6942_sel_2 = sel_1820;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6942_sel_2 = sel_2_391;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6942_sel_2 = sel_1814;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6942_sel_2 = sel_1813;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6942_sel_2 = sel_1812;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6942_sel_2 = sel_1811;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6942_sel_2 = sel_1810;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6942_sel_2 = sel_1809;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6942_sel_2 = sel_1808;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6942_sel_2 = sel_1807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6942_sel_2 = sel_1806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6942_sel_2 = sel_1805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6942_sel_2 = sel_1804;
        end
      default :
        begin
          p6942_sel_2 = sel_1822;
        end
    endcase
    sel_2_392 = p6942_sel_2;
  end

  always @* begin
    p6941cont_bits_31_cont_bits_31[3] = cont_bits_31_3[3];
    if (sel_2_392) begin
      p6941cont_bits_31_cont_bits_31[3] = tmp_158;
    end
    cont_bits_31_4[0] = cont_bits_31_3[0];
    cont_bits_31_4[1] = cont_bits_31_3[1];
    cont_bits_31_4[2] = cont_bits_31_3[2];
    cont_bits_31_4[3] = p6941cont_bits_31_cont_bits_31[3];
    cont_bits_31_4[4] = cont_bits_31_3[4];
    cont_bits_31_4[5] = cont_bits_31_3[5];
    cont_bits_31_4[6] = cont_bits_31_3[6];
    cont_bits_31_4[7] = cont_bits_31_3[7];
    cont_bits_31_4[8] = cont_bits_31_3[8];
    cont_bits_31_4[9] = cont_bits_31_3[9];
    cont_bits_31_4[10] = cont_bits_31_3[10];
    cont_bits_31_4[11] = cont_bits_31_3[11];
  end

  assign sel_1823 = 32'sd0;

  assign sel_1824 = 32'sd0;

  assign sel_1825 = 32'sd0;

  assign sel_1826 = 32'sd0;

  assign sel_1827 = 32'sd0;

  assign sel_1828 = 32'sd0;

  assign sel_1829 = 32'sd0;

  assign sel_1830 = 32'sd0;

  assign sel_1831 = 32'sd0;

  assign sel_1832 = 32'sd0;

  assign sel_1833 = 32'sd0;

  assign sel_1834 = 32'sd0;

  assign s_175 = 32'sd4;

  assign sel_1_354 = (s_16 == 1'b0 ? sel_1834 :
              s_175);

  assign sel_1835 = 32'sd0;

  assign sel_1_355 = (s_17 == 1'b0 ? sel_1_354 :
              sel_1835);

  assign sel_1836 = 32'sd0;

  assign sel_1_356 = (s_18 == 1'b0 ? sel_1_355 :
              sel_1836);

  assign sel_1837 = 32'sd0;

  assign sel_1_357 = (s_19 == 1'b0 ? sel_1_356 :
              sel_1837);

  assign sel_1838 = 32'sd0;

  assign sel_1_358 = (s_20 == 1'b0 ? sel_1_357 :
              sel_1838);

  assign sel_1839 = 32'sd0;

  assign sel_1840 = 32'sd0;

  assign sel_1841 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1823, sel_1824, sel_1825, sel_1826, sel_1827, sel_1828,
       sel_1829, sel_1830, sel_1831, sel_1832, sel_1833, sel_1839, sel_1840,
       sel_1841, sel_1_358) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11410_sel_1 = sel_1840;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11410_sel_1 = sel_1839;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11410_sel_1 = sel_1_358;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11410_sel_1 = sel_1833;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11410_sel_1 = sel_1832;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11410_sel_1 = sel_1831;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11410_sel_1 = sel_1830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11410_sel_1 = sel_1829;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11410_sel_1 = sel_1828;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11410_sel_1 = sel_1827;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11410_sel_1 = sel_1826;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11410_sel_1 = sel_1825;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11410_sel_1 = sel_1824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11410_sel_1 = sel_1823;
        end
      default :
        begin
          p11410_sel_1 = sel_1841;
        end
    endcase
    sel_1_359 = p11410_sel_1;
  end

  assign tmp_159 = functionOutput_14[sel_1_359];

  assign sel_1842 = 1'b0;

  assign sel_1843 = 1'b0;

  assign sel_1844 = 1'b0;

  assign sel_1845 = 1'b0;

  assign sel_1846 = 1'b0;

  assign sel_1847 = 1'b0;

  assign sel_1848 = 1'b0;

  assign sel_1849 = 1'b0;

  assign sel_1850 = 1'b0;

  assign sel_1851 = 1'b0;

  assign sel_1852 = 1'b0;

  assign sel_1853 = 1'b0;

  assign s_176 = 1'b1;

  assign sel_2_393 = (s_16 == 1'b0 ? sel_1853 :
              s_176);

  assign sel_1854 = 1'b0;

  assign sel_2_394 = (s_17 == 1'b0 ? sel_2_393 :
              sel_1854);

  assign sel_1855 = 1'b0;

  assign sel_2_395 = (s_18 == 1'b0 ? sel_2_394 :
              sel_1855);

  assign sel_1856 = 1'b0;

  assign sel_2_396 = (s_19 == 1'b0 ? sel_2_395 :
              sel_1856);

  assign sel_1857 = 1'b0;

  assign sel_2_397 = (s_20 == 1'b0 ? sel_2_396 :
              sel_1857);

  assign sel_1858 = 1'b0;

  assign sel_1859 = 1'b0;

  assign sel_1860 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1842, sel_1843, sel_1844, sel_1845, sel_1846, sel_1847,
       sel_1848, sel_1849, sel_1850, sel_1851, sel_1852, sel_1858, sel_1859,
       sel_1860, sel_2_397) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6354_sel_2 = sel_1859;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6354_sel_2 = sel_1858;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6354_sel_2 = sel_2_397;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6354_sel_2 = sel_1852;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6354_sel_2 = sel_1851;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6354_sel_2 = sel_1850;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6354_sel_2 = sel_1849;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6354_sel_2 = sel_1848;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6354_sel_2 = sel_1847;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6354_sel_2 = sel_1846;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6354_sel_2 = sel_1845;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6354_sel_2 = sel_1844;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6354_sel_2 = sel_1843;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6354_sel_2 = sel_1842;
        end
      default :
        begin
          p6354_sel_2 = sel_1860;
        end
    endcase
    sel_2_398 = p6354_sel_2;
  end

  always @* begin
    p6353cont_bits_31_cont_bits_31[4] = cont_bits_31_4[4];
    if (sel_2_398) begin
      p6353cont_bits_31_cont_bits_31[4] = tmp_159;
    end
    cont_bits_31_5[0] = cont_bits_31_4[0];
    cont_bits_31_5[1] = cont_bits_31_4[1];
    cont_bits_31_5[2] = cont_bits_31_4[2];
    cont_bits_31_5[3] = cont_bits_31_4[3];
    cont_bits_31_5[4] = p6353cont_bits_31_cont_bits_31[4];
    cont_bits_31_5[5] = cont_bits_31_4[5];
    cont_bits_31_5[6] = cont_bits_31_4[6];
    cont_bits_31_5[7] = cont_bits_31_4[7];
    cont_bits_31_5[8] = cont_bits_31_4[8];
    cont_bits_31_5[9] = cont_bits_31_4[9];
    cont_bits_31_5[10] = cont_bits_31_4[10];
    cont_bits_31_5[11] = cont_bits_31_4[11];
  end

  assign sel_1861 = 32'sd0;

  assign sel_1862 = 32'sd0;

  assign sel_1863 = 32'sd0;

  assign sel_1864 = 32'sd0;

  assign sel_1865 = 32'sd0;

  assign sel_1866 = 32'sd0;

  assign sel_1867 = 32'sd0;

  assign sel_1868 = 32'sd0;

  assign sel_1869 = 32'sd0;

  assign sel_1870 = 32'sd0;

  assign sel_1871 = 32'sd0;

  assign sel_1872 = 32'sd0;

  assign s_177 = 32'sd5;

  assign sel_1_360 = (s_16 == 1'b0 ? sel_1872 :
              s_177);

  assign sel_1873 = 32'sd0;

  assign sel_1_361 = (s_17 == 1'b0 ? sel_1_360 :
              sel_1873);

  assign sel_1874 = 32'sd0;

  assign sel_1_362 = (s_18 == 1'b0 ? sel_1_361 :
              sel_1874);

  assign sel_1875 = 32'sd0;

  assign sel_1_363 = (s_19 == 1'b0 ? sel_1_362 :
              sel_1875);

  assign sel_1876 = 32'sd0;

  assign sel_1_364 = (s_20 == 1'b0 ? sel_1_363 :
              sel_1876);

  assign sel_1877 = 32'sd0;

  assign sel_1878 = 32'sd0;

  assign sel_1879 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1861, sel_1862, sel_1863, sel_1864, sel_1865, sel_1866,
       sel_1867, sel_1868, sel_1869, sel_1870, sel_1871, sel_1877, sel_1878,
       sel_1879, sel_1_364) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10016_sel_1 = sel_1878;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10016_sel_1 = sel_1877;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10016_sel_1 = sel_1_364;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10016_sel_1 = sel_1871;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10016_sel_1 = sel_1870;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10016_sel_1 = sel_1869;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10016_sel_1 = sel_1868;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10016_sel_1 = sel_1867;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10016_sel_1 = sel_1866;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10016_sel_1 = sel_1865;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10016_sel_1 = sel_1864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10016_sel_1 = sel_1863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10016_sel_1 = sel_1862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10016_sel_1 = sel_1861;
        end
      default :
        begin
          p10016_sel_1 = sel_1879;
        end
    endcase
    sel_1_365 = p10016_sel_1;
  end

  assign tmp_160 = functionOutput_14[sel_1_365];

  assign sel_1880 = 1'b0;

  assign sel_1881 = 1'b0;

  assign sel_1882 = 1'b0;

  assign sel_1883 = 1'b0;

  assign sel_1884 = 1'b0;

  assign sel_1885 = 1'b0;

  assign sel_1886 = 1'b0;

  assign sel_1887 = 1'b0;

  assign sel_1888 = 1'b0;

  assign sel_1889 = 1'b0;

  assign sel_1890 = 1'b0;

  assign sel_1891 = 1'b0;

  assign s_178 = 1'b1;

  assign sel_2_399 = (s_16 == 1'b0 ? sel_1891 :
              s_178);

  assign sel_1892 = 1'b0;

  assign sel_2_400 = (s_17 == 1'b0 ? sel_2_399 :
              sel_1892);

  assign sel_1893 = 1'b0;

  assign sel_2_401 = (s_18 == 1'b0 ? sel_2_400 :
              sel_1893);

  assign sel_1894 = 1'b0;

  assign sel_2_402 = (s_19 == 1'b0 ? sel_2_401 :
              sel_1894);

  assign sel_1895 = 1'b0;

  assign sel_2_403 = (s_20 == 1'b0 ? sel_2_402 :
              sel_1895);

  assign sel_1896 = 1'b0;

  assign sel_1897 = 1'b0;

  assign sel_1898 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1880, sel_1881, sel_1882, sel_1883, sel_1884, sel_1885,
       sel_1886, sel_1887, sel_1888, sel_1889, sel_1890, sel_1896, sel_1897,
       sel_1898, sel_2_403) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6336_sel_2 = sel_1897;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6336_sel_2 = sel_1896;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6336_sel_2 = sel_2_403;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6336_sel_2 = sel_1890;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6336_sel_2 = sel_1889;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6336_sel_2 = sel_1888;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6336_sel_2 = sel_1887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6336_sel_2 = sel_1886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6336_sel_2 = sel_1885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6336_sel_2 = sel_1884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6336_sel_2 = sel_1883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6336_sel_2 = sel_1882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6336_sel_2 = sel_1881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6336_sel_2 = sel_1880;
        end
      default :
        begin
          p6336_sel_2 = sel_1898;
        end
    endcase
    sel_2_404 = p6336_sel_2;
  end

  always @* begin
    p6335cont_bits_31_cont_bits_31[5] = cont_bits_31_5[5];
    if (sel_2_404) begin
      p6335cont_bits_31_cont_bits_31[5] = tmp_160;
    end
    cont_bits_31_6[0] = cont_bits_31_5[0];
    cont_bits_31_6[1] = cont_bits_31_5[1];
    cont_bits_31_6[2] = cont_bits_31_5[2];
    cont_bits_31_6[3] = cont_bits_31_5[3];
    cont_bits_31_6[4] = cont_bits_31_5[4];
    cont_bits_31_6[5] = p6335cont_bits_31_cont_bits_31[5];
    cont_bits_31_6[6] = cont_bits_31_5[6];
    cont_bits_31_6[7] = cont_bits_31_5[7];
    cont_bits_31_6[8] = cont_bits_31_5[8];
    cont_bits_31_6[9] = cont_bits_31_5[9];
    cont_bits_31_6[10] = cont_bits_31_5[10];
    cont_bits_31_6[11] = cont_bits_31_5[11];
  end

  assign sel_1899 = 32'sd0;

  assign sel_1900 = 32'sd0;

  assign sel_1901 = 32'sd0;

  assign sel_1902 = 32'sd0;

  assign sel_1903 = 32'sd0;

  assign sel_1904 = 32'sd0;

  assign sel_1905 = 32'sd0;

  assign sel_1906 = 32'sd0;

  assign sel_1907 = 32'sd0;

  assign sel_1908 = 32'sd0;

  assign sel_1909 = 32'sd0;

  assign sel_1910 = 32'sd0;

  assign s_179 = 32'sd6;

  assign sel_1_366 = (s_16 == 1'b0 ? sel_1910 :
              s_179);

  assign sel_1911 = 32'sd0;

  assign sel_1_367 = (s_17 == 1'b0 ? sel_1_366 :
              sel_1911);

  assign sel_1912 = 32'sd0;

  assign sel_1_368 = (s_18 == 1'b0 ? sel_1_367 :
              sel_1912);

  assign sel_1913 = 32'sd0;

  assign sel_1_369 = (s_19 == 1'b0 ? sel_1_368 :
              sel_1913);

  assign sel_1914 = 32'sd0;

  assign sel_1_370 = (s_20 == 1'b0 ? sel_1_369 :
              sel_1914);

  assign sel_1915 = 32'sd0;

  assign sel_1916 = 32'sd0;

  assign sel_1917 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1899, sel_1900, sel_1901, sel_1902, sel_1903, sel_1904,
       sel_1905, sel_1906, sel_1907, sel_1908, sel_1909, sel_1915, sel_1916,
       sel_1917, sel_1_370) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10186_sel_1 = sel_1916;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10186_sel_1 = sel_1915;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10186_sel_1 = sel_1_370;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10186_sel_1 = sel_1909;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10186_sel_1 = sel_1908;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10186_sel_1 = sel_1907;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10186_sel_1 = sel_1906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10186_sel_1 = sel_1905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10186_sel_1 = sel_1904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10186_sel_1 = sel_1903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10186_sel_1 = sel_1902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10186_sel_1 = sel_1901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10186_sel_1 = sel_1900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10186_sel_1 = sel_1899;
        end
      default :
        begin
          p10186_sel_1 = sel_1917;
        end
    endcase
    sel_1_371 = p10186_sel_1;
  end

  assign tmp_161 = functionOutput_14[sel_1_371];

  assign sel_1918 = 1'b0;

  assign sel_1919 = 1'b0;

  assign sel_1920 = 1'b0;

  assign sel_1921 = 1'b0;

  assign sel_1922 = 1'b0;

  assign sel_1923 = 1'b0;

  assign sel_1924 = 1'b0;

  assign sel_1925 = 1'b0;

  assign sel_1926 = 1'b0;

  assign sel_1927 = 1'b0;

  assign sel_1928 = 1'b0;

  assign sel_1929 = 1'b0;

  assign s_180 = 1'b1;

  assign sel_2_405 = (s_16 == 1'b0 ? sel_1929 :
              s_180);

  assign sel_1930 = 1'b0;

  assign sel_2_406 = (s_17 == 1'b0 ? sel_2_405 :
              sel_1930);

  assign sel_1931 = 1'b0;

  assign sel_2_407 = (s_18 == 1'b0 ? sel_2_406 :
              sel_1931);

  assign sel_1932 = 1'b0;

  assign sel_2_408 = (s_19 == 1'b0 ? sel_2_407 :
              sel_1932);

  assign sel_1933 = 1'b0;

  assign sel_2_409 = (s_20 == 1'b0 ? sel_2_408 :
              sel_1933);

  assign sel_1934 = 1'b0;

  assign sel_1935 = 1'b0;

  assign sel_1936 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1918, sel_1919, sel_1920, sel_1921, sel_1922, sel_1923,
       sel_1924, sel_1925, sel_1926, sel_1927, sel_1928, sel_1934, sel_1935,
       sel_1936, sel_2_409) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5748_sel_2 = sel_1935;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5748_sel_2 = sel_1934;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5748_sel_2 = sel_2_409;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5748_sel_2 = sel_1928;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5748_sel_2 = sel_1927;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5748_sel_2 = sel_1926;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5748_sel_2 = sel_1925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5748_sel_2 = sel_1924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5748_sel_2 = sel_1923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5748_sel_2 = sel_1922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5748_sel_2 = sel_1921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5748_sel_2 = sel_1920;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5748_sel_2 = sel_1919;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5748_sel_2 = sel_1918;
        end
      default :
        begin
          p5748_sel_2 = sel_1936;
        end
    endcase
    sel_2_410 = p5748_sel_2;
  end

  always @* begin
    p5747cont_bits_31_cont_bits_31[6] = cont_bits_31_6[6];
    if (sel_2_410) begin
      p5747cont_bits_31_cont_bits_31[6] = tmp_161;
    end
    cont_bits_31_7[0] = cont_bits_31_6[0];
    cont_bits_31_7[1] = cont_bits_31_6[1];
    cont_bits_31_7[2] = cont_bits_31_6[2];
    cont_bits_31_7[3] = cont_bits_31_6[3];
    cont_bits_31_7[4] = cont_bits_31_6[4];
    cont_bits_31_7[5] = cont_bits_31_6[5];
    cont_bits_31_7[6] = p5747cont_bits_31_cont_bits_31[6];
    cont_bits_31_7[7] = cont_bits_31_6[7];
    cont_bits_31_7[8] = cont_bits_31_6[8];
    cont_bits_31_7[9] = cont_bits_31_6[9];
    cont_bits_31_7[10] = cont_bits_31_6[10];
    cont_bits_31_7[11] = cont_bits_31_6[11];
  end

  assign sel_1937 = 32'sd0;

  assign sel_1938 = 32'sd0;

  assign sel_1939 = 32'sd0;

  assign sel_1940 = 32'sd0;

  assign sel_1941 = 32'sd0;

  assign sel_1942 = 32'sd0;

  assign sel_1943 = 32'sd0;

  assign sel_1944 = 32'sd0;

  assign sel_1945 = 32'sd0;

  assign sel_1946 = 32'sd0;

  assign sel_1947 = 32'sd0;

  assign sel_1948 = 32'sd0;

  assign s_181 = 32'sd7;

  assign sel_1_372 = (s_16 == 1'b0 ? sel_1948 :
              s_181);

  assign sel_1949 = 32'sd0;

  assign sel_1_373 = (s_17 == 1'b0 ? sel_1_372 :
              sel_1949);

  assign sel_1950 = 32'sd0;

  assign sel_1_374 = (s_18 == 1'b0 ? sel_1_373 :
              sel_1950);

  assign sel_1951 = 32'sd0;

  assign sel_1_375 = (s_19 == 1'b0 ? sel_1_374 :
              sel_1951);

  assign sel_1952 = 32'sd0;

  assign sel_1_376 = (s_20 == 1'b0 ? sel_1_375 :
              sel_1952);

  assign sel_1953 = 32'sd0;

  assign sel_1954 = 32'sd0;

  assign sel_1955 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1937, sel_1938, sel_1939, sel_1940, sel_1941, sel_1942,
       sel_1943, sel_1944, sel_1945, sel_1946, sel_1947, sel_1953, sel_1954,
       sel_1955, sel_1_376) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9880_sel_1 = sel_1954;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9880_sel_1 = sel_1953;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9880_sel_1 = sel_1_376;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9880_sel_1 = sel_1947;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9880_sel_1 = sel_1946;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9880_sel_1 = sel_1945;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9880_sel_1 = sel_1944;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9880_sel_1 = sel_1943;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9880_sel_1 = sel_1942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9880_sel_1 = sel_1941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9880_sel_1 = sel_1940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9880_sel_1 = sel_1939;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9880_sel_1 = sel_1938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9880_sel_1 = sel_1937;
        end
      default :
        begin
          p9880_sel_1 = sel_1955;
        end
    endcase
    sel_1_377 = p9880_sel_1;
  end

  assign tmp_162 = functionOutput_14[sel_1_377];

  assign sel_1956 = 1'b0;

  assign sel_1957 = 1'b0;

  assign sel_1958 = 1'b0;

  assign sel_1959 = 1'b0;

  assign sel_1960 = 1'b0;

  assign sel_1961 = 1'b0;

  assign sel_1962 = 1'b0;

  assign sel_1963 = 1'b0;

  assign sel_1964 = 1'b0;

  assign sel_1965 = 1'b0;

  assign sel_1966 = 1'b0;

  assign sel_1967 = 1'b0;

  assign s_182 = 1'b1;

  assign sel_2_411 = (s_16 == 1'b0 ? sel_1967 :
              s_182);

  assign sel_1968 = 1'b0;

  assign sel_2_412 = (s_17 == 1'b0 ? sel_2_411 :
              sel_1968);

  assign sel_1969 = 1'b0;

  assign sel_2_413 = (s_18 == 1'b0 ? sel_2_412 :
              sel_1969);

  assign sel_1970 = 1'b0;

  assign sel_2_414 = (s_19 == 1'b0 ? sel_2_413 :
              sel_1970);

  assign sel_1971 = 1'b0;

  assign sel_2_415 = (s_20 == 1'b0 ? sel_2_414 :
              sel_1971);

  assign sel_1972 = 1'b0;

  assign sel_1973 = 1'b0;

  assign sel_1974 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1956, sel_1957, sel_1958, sel_1959, sel_1960, sel_1961,
       sel_1962, sel_1963, sel_1964, sel_1965, sel_1966, sel_1972, sel_1973,
       sel_1974, sel_2_415) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5730_sel_2 = sel_1973;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5730_sel_2 = sel_1972;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5730_sel_2 = sel_2_415;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5730_sel_2 = sel_1966;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5730_sel_2 = sel_1965;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5730_sel_2 = sel_1964;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5730_sel_2 = sel_1963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5730_sel_2 = sel_1962;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5730_sel_2 = sel_1961;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5730_sel_2 = sel_1960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5730_sel_2 = sel_1959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5730_sel_2 = sel_1958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5730_sel_2 = sel_1957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5730_sel_2 = sel_1956;
        end
      default :
        begin
          p5730_sel_2 = sel_1974;
        end
    endcase
    sel_2_416 = p5730_sel_2;
  end

  always @* begin
    p5729cont_bits_31_cont_bits_31[7] = cont_bits_31_7[7];
    if (sel_2_416) begin
      p5729cont_bits_31_cont_bits_31[7] = tmp_162;
    end
    cont_bits_31_8[0] = cont_bits_31_7[0];
    cont_bits_31_8[1] = cont_bits_31_7[1];
    cont_bits_31_8[2] = cont_bits_31_7[2];
    cont_bits_31_8[3] = cont_bits_31_7[3];
    cont_bits_31_8[4] = cont_bits_31_7[4];
    cont_bits_31_8[5] = cont_bits_31_7[5];
    cont_bits_31_8[6] = cont_bits_31_7[6];
    cont_bits_31_8[7] = p5729cont_bits_31_cont_bits_31[7];
    cont_bits_31_8[8] = cont_bits_31_7[8];
    cont_bits_31_8[9] = cont_bits_31_7[9];
    cont_bits_31_8[10] = cont_bits_31_7[10];
    cont_bits_31_8[11] = cont_bits_31_7[11];
  end

  assign sel_1975 = 32'sd0;

  assign sel_1976 = 32'sd0;

  assign sel_1977 = 32'sd0;

  assign sel_1978 = 32'sd0;

  assign sel_1979 = 32'sd0;

  assign sel_1980 = 32'sd0;

  assign sel_1981 = 32'sd0;

  assign sel_1982 = 32'sd0;

  assign sel_1983 = 32'sd0;

  assign sel_1984 = 32'sd0;

  assign sel_1985 = 32'sd0;

  assign sel_1986 = 32'sd0;

  assign s_183 = 32'sd8;

  assign sel_1_378 = (s_16 == 1'b0 ? sel_1986 :
              s_183);

  assign sel_1987 = 32'sd0;

  assign sel_1_379 = (s_17 == 1'b0 ? sel_1_378 :
              sel_1987);

  assign sel_1988 = 32'sd0;

  assign sel_1_380 = (s_18 == 1'b0 ? sel_1_379 :
              sel_1988);

  assign sel_1989 = 32'sd0;

  assign sel_1_381 = (s_19 == 1'b0 ? sel_1_380 :
              sel_1989);

  assign sel_1990 = 32'sd0;

  assign sel_1_382 = (s_20 == 1'b0 ? sel_1_381 :
              sel_1990);

  assign sel_1991 = 32'sd0;

  assign sel_1992 = 32'sd0;

  assign sel_1993 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1975, sel_1976, sel_1977, sel_1978, sel_1979, sel_1980,
       sel_1981, sel_1982, sel_1983, sel_1984, sel_1985, sel_1991, sel_1992,
       sel_1993, sel_1_382) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11376_sel_1 = sel_1992;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11376_sel_1 = sel_1991;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11376_sel_1 = sel_1_382;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11376_sel_1 = sel_1985;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11376_sel_1 = sel_1984;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11376_sel_1 = sel_1983;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11376_sel_1 = sel_1982;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11376_sel_1 = sel_1981;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11376_sel_1 = sel_1980;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11376_sel_1 = sel_1979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11376_sel_1 = sel_1978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11376_sel_1 = sel_1977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11376_sel_1 = sel_1976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11376_sel_1 = sel_1975;
        end
      default :
        begin
          p11376_sel_1 = sel_1993;
        end
    endcase
    sel_1_383 = p11376_sel_1;
  end

  assign tmp_163 = functionOutput_14[sel_1_383];

  assign sel_1994 = 1'b0;

  assign sel_1995 = 1'b0;

  assign sel_1996 = 1'b0;

  assign sel_1997 = 1'b0;

  assign sel_1998 = 1'b0;

  assign sel_1999 = 1'b0;

  assign sel_2000 = 1'b0;

  assign sel_2001 = 1'b0;

  assign sel_2002 = 1'b0;

  assign sel_2003 = 1'b0;

  assign sel_2004 = 1'b0;

  assign sel_2005 = 1'b0;

  assign s_184 = 1'b1;

  assign sel_2_417 = (s_16 == 1'b0 ? sel_2005 :
              s_184);

  assign sel_2006 = 1'b0;

  assign sel_2_418 = (s_17 == 1'b0 ? sel_2_417 :
              sel_2006);

  assign sel_2007 = 1'b0;

  assign sel_2_419 = (s_18 == 1'b0 ? sel_2_418 :
              sel_2007);

  assign sel_2008 = 1'b0;

  assign sel_2_420 = (s_19 == 1'b0 ? sel_2_419 :
              sel_2008);

  assign sel_2009 = 1'b0;

  assign sel_2_421 = (s_20 == 1'b0 ? sel_2_420 :
              sel_2009);

  assign sel_2010 = 1'b0;

  assign sel_2011 = 1'b0;

  assign sel_2012 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1994, sel_1995, sel_1996, sel_1997, sel_1998, sel_1999,
       sel_2000, sel_2001, sel_2002, sel_2003, sel_2004, sel_2010, sel_2011,
       sel_2012, sel_2_421) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5142_sel_2 = sel_2011;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5142_sel_2 = sel_2010;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5142_sel_2 = sel_2_421;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5142_sel_2 = sel_2004;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5142_sel_2 = sel_2003;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5142_sel_2 = sel_2002;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5142_sel_2 = sel_2001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5142_sel_2 = sel_2000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5142_sel_2 = sel_1999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5142_sel_2 = sel_1998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5142_sel_2 = sel_1997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5142_sel_2 = sel_1996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5142_sel_2 = sel_1995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5142_sel_2 = sel_1994;
        end
      default :
        begin
          p5142_sel_2 = sel_2012;
        end
    endcase
    sel_2_422 = p5142_sel_2;
  end

  always @* begin
    p5141cont_bits_31_cont_bits_31[8] = cont_bits_31_8[8];
    if (sel_2_422) begin
      p5141cont_bits_31_cont_bits_31[8] = tmp_163;
    end
    cont_bits_31_9[0] = cont_bits_31_8[0];
    cont_bits_31_9[1] = cont_bits_31_8[1];
    cont_bits_31_9[2] = cont_bits_31_8[2];
    cont_bits_31_9[3] = cont_bits_31_8[3];
    cont_bits_31_9[4] = cont_bits_31_8[4];
    cont_bits_31_9[5] = cont_bits_31_8[5];
    cont_bits_31_9[6] = cont_bits_31_8[6];
    cont_bits_31_9[7] = cont_bits_31_8[7];
    cont_bits_31_9[8] = p5141cont_bits_31_cont_bits_31[8];
    cont_bits_31_9[9] = cont_bits_31_8[9];
    cont_bits_31_9[10] = cont_bits_31_8[10];
    cont_bits_31_9[11] = cont_bits_31_8[11];
  end

  assign sel_2013 = 32'sd0;

  assign sel_2014 = 32'sd0;

  assign sel_2015 = 32'sd0;

  assign sel_2016 = 32'sd0;

  assign sel_2017 = 32'sd0;

  assign sel_2018 = 32'sd0;

  assign sel_2019 = 32'sd0;

  assign sel_2020 = 32'sd0;

  assign sel_2021 = 32'sd0;

  assign sel_2022 = 32'sd0;

  assign sel_2023 = 32'sd0;

  assign sel_2024 = 32'sd0;

  assign s_185 = 32'sd9;

  assign sel_1_384 = (s_16 == 1'b0 ? sel_2024 :
              s_185);

  assign sel_2025 = 32'sd0;

  assign sel_1_385 = (s_17 == 1'b0 ? sel_1_384 :
              sel_2025);

  assign sel_2026 = 32'sd0;

  assign sel_1_386 = (s_18 == 1'b0 ? sel_1_385 :
              sel_2026);

  assign sel_2027 = 32'sd0;

  assign sel_1_387 = (s_19 == 1'b0 ? sel_1_386 :
              sel_2027);

  assign sel_2028 = 32'sd0;

  assign sel_1_388 = (s_20 == 1'b0 ? sel_1_387 :
              sel_2028);

  assign sel_2029 = 32'sd0;

  assign sel_2030 = 32'sd0;

  assign sel_2031 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_388, sel_2013, sel_2014, sel_2015, sel_2016, sel_2017,
       sel_2018, sel_2019, sel_2020, sel_2021, sel_2022, sel_2023, sel_2029,
       sel_2030, sel_2031) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11478_sel_1 = sel_2030;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11478_sel_1 = sel_2029;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11478_sel_1 = sel_1_388;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11478_sel_1 = sel_2023;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11478_sel_1 = sel_2022;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11478_sel_1 = sel_2021;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11478_sel_1 = sel_2020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11478_sel_1 = sel_2019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11478_sel_1 = sel_2018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11478_sel_1 = sel_2017;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11478_sel_1 = sel_2016;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11478_sel_1 = sel_2015;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11478_sel_1 = sel_2014;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11478_sel_1 = sel_2013;
        end
      default :
        begin
          p11478_sel_1 = sel_2031;
        end
    endcase
    sel_1_389 = p11478_sel_1;
  end

  assign tmp_164 = functionOutput_14[sel_1_389];

  assign sel_2032 = 1'b0;

  assign sel_2033 = 1'b0;

  assign sel_2034 = 1'b0;

  assign sel_2035 = 1'b0;

  assign sel_2036 = 1'b0;

  assign sel_2037 = 1'b0;

  assign sel_2038 = 1'b0;

  assign sel_2039 = 1'b0;

  assign sel_2040 = 1'b0;

  assign sel_2041 = 1'b0;

  assign sel_2042 = 1'b0;

  assign sel_2043 = 1'b0;

  assign s_186 = 1'b1;

  assign sel_2_423 = (s_16 == 1'b0 ? sel_2043 :
              s_186);

  assign sel_2044 = 1'b0;

  assign sel_2_424 = (s_17 == 1'b0 ? sel_2_423 :
              sel_2044);

  assign sel_2045 = 1'b0;

  assign sel_2_425 = (s_18 == 1'b0 ? sel_2_424 :
              sel_2045);

  assign sel_2046 = 1'b0;

  assign sel_2_426 = (s_19 == 1'b0 ? sel_2_425 :
              sel_2046);

  assign sel_2047 = 1'b0;

  assign sel_2_427 = (s_20 == 1'b0 ? sel_2_426 :
              sel_2047);

  assign sel_2048 = 1'b0;

  assign sel_2049 = 1'b0;

  assign sel_2050 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2032, sel_2033, sel_2034, sel_2035, sel_2036, sel_2037,
       sel_2038, sel_2039, sel_2040, sel_2041, sel_2042, sel_2048, sel_2049,
       sel_2050, sel_2_427) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5124_sel_2 = sel_2049;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5124_sel_2 = sel_2048;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5124_sel_2 = sel_2_427;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5124_sel_2 = sel_2042;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5124_sel_2 = sel_2041;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5124_sel_2 = sel_2040;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5124_sel_2 = sel_2039;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5124_sel_2 = sel_2038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5124_sel_2 = sel_2037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5124_sel_2 = sel_2036;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5124_sel_2 = sel_2035;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5124_sel_2 = sel_2034;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5124_sel_2 = sel_2033;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5124_sel_2 = sel_2032;
        end
      default :
        begin
          p5124_sel_2 = sel_2050;
        end
    endcase
    sel_2_428 = p5124_sel_2;
  end

  always @* begin
    p5123cont_bits_31_cont_bits_31[9] = cont_bits_31_9[9];
    if (sel_2_428) begin
      p5123cont_bits_31_cont_bits_31[9] = tmp_164;
    end
    cont_bits_31_10[0] = cont_bits_31_9[0];
    cont_bits_31_10[1] = cont_bits_31_9[1];
    cont_bits_31_10[2] = cont_bits_31_9[2];
    cont_bits_31_10[3] = cont_bits_31_9[3];
    cont_bits_31_10[4] = cont_bits_31_9[4];
    cont_bits_31_10[5] = cont_bits_31_9[5];
    cont_bits_31_10[6] = cont_bits_31_9[6];
    cont_bits_31_10[7] = cont_bits_31_9[7];
    cont_bits_31_10[8] = cont_bits_31_9[8];
    cont_bits_31_10[9] = p5123cont_bits_31_cont_bits_31[9];
    cont_bits_31_10[10] = cont_bits_31_9[10];
    cont_bits_31_10[11] = cont_bits_31_9[11];
  end

  assign sel_2051 = 32'sd0;

  assign sel_2052 = 32'sd0;

  assign sel_2053 = 32'sd0;

  assign sel_2054 = 32'sd0;

  assign sel_2055 = 32'sd0;

  assign sel_2056 = 32'sd0;

  assign sel_2057 = 32'sd0;

  assign sel_2058 = 32'sd0;

  assign sel_2059 = 32'sd0;

  assign sel_2060 = 32'sd0;

  assign sel_2061 = 32'sd0;

  assign sel_2062 = 32'sd0;

  assign s_187 = 32'sd10;

  assign sel_1_390 = (s_16 == 1'b0 ? sel_2062 :
              s_187);

  assign sel_2063 = 32'sd0;

  assign sel_1_391 = (s_17 == 1'b0 ? sel_1_390 :
              sel_2063);

  assign sel_2064 = 32'sd0;

  assign sel_1_392 = (s_18 == 1'b0 ? sel_1_391 :
              sel_2064);

  assign sel_2065 = 32'sd0;

  assign sel_1_393 = (s_19 == 1'b0 ? sel_1_392 :
              sel_2065);

  assign sel_2066 = 32'sd0;

  assign sel_1_394 = (s_20 == 1'b0 ? sel_1_393 :
              sel_2066);

  assign sel_2067 = 32'sd0;

  assign sel_2068 = 32'sd0;

  assign sel_2069 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_394, sel_2051, sel_2052, sel_2053, sel_2054, sel_2055,
       sel_2056, sel_2057, sel_2058, sel_2059, sel_2060, sel_2061, sel_2067,
       sel_2068, sel_2069) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10509_sel_1 = sel_2068;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10509_sel_1 = sel_2067;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10509_sel_1 = sel_1_394;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10509_sel_1 = sel_2061;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10509_sel_1 = sel_2060;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10509_sel_1 = sel_2059;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10509_sel_1 = sel_2058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10509_sel_1 = sel_2057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10509_sel_1 = sel_2056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10509_sel_1 = sel_2055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10509_sel_1 = sel_2054;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10509_sel_1 = sel_2053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10509_sel_1 = sel_2052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10509_sel_1 = sel_2051;
        end
      default :
        begin
          p10509_sel_1 = sel_2069;
        end
    endcase
    sel_1_395 = p10509_sel_1;
  end

  assign tmp_165 = functionOutput_14[sel_1_395];

  assign sel_2070 = 1'b0;

  assign sel_2071 = 1'b0;

  assign sel_2072 = 1'b0;

  assign sel_2073 = 1'b0;

  assign sel_2074 = 1'b0;

  assign sel_2075 = 1'b0;

  assign sel_2076 = 1'b0;

  assign sel_2077 = 1'b0;

  assign sel_2078 = 1'b0;

  assign sel_2079 = 1'b0;

  assign sel_2080 = 1'b0;

  assign sel_2081 = 1'b0;

  assign s_188 = 1'b1;

  assign sel_2_429 = (s_16 == 1'b0 ? sel_2081 :
              s_188);

  assign sel_2082 = 1'b0;

  assign sel_2_430 = (s_17 == 1'b0 ? sel_2_429 :
              sel_2082);

  assign sel_2083 = 1'b0;

  assign sel_2_431 = (s_18 == 1'b0 ? sel_2_430 :
              sel_2083);

  assign sel_2084 = 1'b0;

  assign sel_2_432 = (s_19 == 1'b0 ? sel_2_431 :
              sel_2084);

  assign sel_2085 = 1'b0;

  assign sel_2_433 = (s_20 == 1'b0 ? sel_2_432 :
              sel_2085);

  assign sel_2086 = 1'b0;

  assign sel_2087 = 1'b0;

  assign sel_2088 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2070, sel_2071, sel_2072, sel_2073, sel_2074, sel_2075,
       sel_2076, sel_2077, sel_2078, sel_2079, sel_2080, sel_2086, sel_2087,
       sel_2088, sel_2_433) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4536_sel_2 = sel_2087;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4536_sel_2 = sel_2086;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4536_sel_2 = sel_2_433;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4536_sel_2 = sel_2080;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4536_sel_2 = sel_2079;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4536_sel_2 = sel_2078;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4536_sel_2 = sel_2077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4536_sel_2 = sel_2076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4536_sel_2 = sel_2075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4536_sel_2 = sel_2074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4536_sel_2 = sel_2073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4536_sel_2 = sel_2072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4536_sel_2 = sel_2071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4536_sel_2 = sel_2070;
        end
      default :
        begin
          p4536_sel_2 = sel_2088;
        end
    endcase
    sel_2_434 = p4536_sel_2;
  end

  always @* begin
    p4535cont_bits_31_cont_bits_31[10] = cont_bits_31_10[10];
    if (sel_2_434) begin
      p4535cont_bits_31_cont_bits_31[10] = tmp_165;
    end
    cont_bits_31_11[0] = cont_bits_31_10[0];
    cont_bits_31_11[1] = cont_bits_31_10[1];
    cont_bits_31_11[2] = cont_bits_31_10[2];
    cont_bits_31_11[3] = cont_bits_31_10[3];
    cont_bits_31_11[4] = cont_bits_31_10[4];
    cont_bits_31_11[5] = cont_bits_31_10[5];
    cont_bits_31_11[6] = cont_bits_31_10[6];
    cont_bits_31_11[7] = cont_bits_31_10[7];
    cont_bits_31_11[8] = cont_bits_31_10[8];
    cont_bits_31_11[9] = cont_bits_31_10[9];
    cont_bits_31_11[10] = p4535cont_bits_31_cont_bits_31[10];
    cont_bits_31_11[11] = cont_bits_31_10[11];
  end

  assign sel_2089 = 32'sd0;

  assign sel_2090 = 32'sd0;

  assign sel_2091 = 32'sd0;

  assign sel_2092 = 32'sd0;

  assign sel_2093 = 32'sd0;

  assign sel_2094 = 32'sd0;

  assign sel_2095 = 32'sd0;

  assign sel_2096 = 32'sd0;

  assign sel_2097 = 32'sd0;

  assign sel_2098 = 32'sd0;

  assign sel_2099 = 32'sd0;

  assign sel_2100 = 32'sd0;

  assign s_189 = 32'sd11;

  assign sel_1_396 = (s_16 == 1'b0 ? sel_2100 :
              s_189);

  assign sel_2101 = 32'sd0;

  assign sel_1_397 = (s_17 == 1'b0 ? sel_1_396 :
              sel_2101);

  assign sel_2102 = 32'sd0;

  assign sel_1_398 = (s_18 == 1'b0 ? sel_1_397 :
              sel_2102);

  assign sel_2103 = 32'sd0;

  assign sel_1_399 = (s_19 == 1'b0 ? sel_1_398 :
              sel_2103);

  assign sel_2104 = 32'sd0;

  assign sel_1_400 = (s_20 == 1'b0 ? sel_1_399 :
              sel_2104);

  assign sel_2105 = 32'sd0;

  assign sel_2106 = 32'sd0;

  assign sel_2107 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_400, sel_2089, sel_2090, sel_2091, sel_2092, sel_2093,
       sel_2094, sel_2095, sel_2096, sel_2097, sel_2098, sel_2099, sel_2105,
       sel_2106, sel_2107) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9897_sel_1 = sel_2106;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9897_sel_1 = sel_2105;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9897_sel_1 = sel_1_400;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9897_sel_1 = sel_2099;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9897_sel_1 = sel_2098;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9897_sel_1 = sel_2097;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9897_sel_1 = sel_2096;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9897_sel_1 = sel_2095;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9897_sel_1 = sel_2094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9897_sel_1 = sel_2093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9897_sel_1 = sel_2092;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9897_sel_1 = sel_2091;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9897_sel_1 = sel_2090;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9897_sel_1 = sel_2089;
        end
      default :
        begin
          p9897_sel_1 = sel_2107;
        end
    endcase
    sel_1_401 = p9897_sel_1;
  end

  assign tmp_166 = functionOutput_14[sel_1_401];

  assign sel_2108 = 1'b0;

  assign sel_2109 = 1'b0;

  assign sel_2110 = 1'b0;

  assign sel_2111 = 1'b0;

  assign sel_2112 = 1'b0;

  assign sel_2113 = 1'b0;

  assign sel_2114 = 1'b0;

  assign sel_2115 = 1'b0;

  assign sel_2116 = 1'b0;

  assign sel_2117 = 1'b0;

  assign sel_2118 = 1'b0;

  assign sel_2119 = 1'b0;

  assign s_190 = 1'b1;

  assign sel_2_435 = (s_16 == 1'b0 ? sel_2119 :
              s_190);

  assign sel_2120 = 1'b0;

  assign sel_2_436 = (s_17 == 1'b0 ? sel_2_435 :
              sel_2120);

  assign sel_2121 = 1'b0;

  assign sel_2_437 = (s_18 == 1'b0 ? sel_2_436 :
              sel_2121);

  assign sel_2122 = 1'b0;

  assign sel_2_438 = (s_19 == 1'b0 ? sel_2_437 :
              sel_2122);

  assign sel_2123 = 1'b0;

  assign sel_2_439 = (s_20 == 1'b0 ? sel_2_438 :
              sel_2123);

  assign sel_2124 = 1'b0;

  assign sel_2125 = 1'b0;

  assign sel_2126 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2108, sel_2109, sel_2110, sel_2111, sel_2112, sel_2113,
       sel_2114, sel_2115, sel_2116, sel_2117, sel_2118, sel_2124, sel_2125,
       sel_2126, sel_2_439) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4518_sel_2 = sel_2125;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4518_sel_2 = sel_2124;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4518_sel_2 = sel_2_439;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4518_sel_2 = sel_2118;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4518_sel_2 = sel_2117;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4518_sel_2 = sel_2116;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4518_sel_2 = sel_2115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4518_sel_2 = sel_2114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4518_sel_2 = sel_2113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4518_sel_2 = sel_2112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4518_sel_2 = sel_2111;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4518_sel_2 = sel_2110;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4518_sel_2 = sel_2109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4518_sel_2 = sel_2108;
        end
      default :
        begin
          p4518_sel_2 = sel_2126;
        end
    endcase
    sel_2_440 = p4518_sel_2;
  end

  always @* begin
    p4517cont_bits_31_cont_bits_31[11] = cont_bits_31_11[11];
    if (sel_2_440) begin
      p4517cont_bits_31_cont_bits_31[11] = tmp_166;
    end
    cont_bits_31_12[0] = cont_bits_31_11[0];
    cont_bits_31_12[1] = cont_bits_31_11[1];
    cont_bits_31_12[2] = cont_bits_31_11[2];
    cont_bits_31_12[3] = cont_bits_31_11[3];
    cont_bits_31_12[4] = cont_bits_31_11[4];
    cont_bits_31_12[5] = cont_bits_31_11[5];
    cont_bits_31_12[6] = cont_bits_31_11[6];
    cont_bits_31_12[7] = cont_bits_31_11[7];
    cont_bits_31_12[8] = cont_bits_31_11[8];
    cont_bits_31_12[9] = cont_bits_31_11[9];
    cont_bits_31_12[10] = cont_bits_31_11[10];
    cont_bits_31_12[11] = p4517cont_bits_31_cont_bits_31[11];
  end

  assign sel_2127 = 32'sd0;

  assign sel_2128 = 32'sd0;

  assign sel_2129 = 32'sd0;

  assign sel_2130 = 32'sd0;

  assign sel_2131 = 32'sd0;

  assign sel_2132 = 32'sd0;

  assign sel_2133 = 32'sd0;

  assign sel_2134 = 32'sd0;

  assign sel_2135 = 32'sd0;

  assign sel_2136 = 32'sd0;

  assign sel_2137 = 32'sd0;

  assign sel_2138 = 32'sd0;

  assign s_191 = 32'sd0;

  assign sel_1_402 = (s_16 == 1'b0 ? sel_2138 :
              s_191);

  assign sel_2139 = 32'sd0;

  assign sel_1_403 = (s_17 == 1'b0 ? sel_1_402 :
              sel_2139);

  assign sel_2140 = 32'sd0;

  assign sel_1_404 = (s_18 == 1'b0 ? sel_1_403 :
              sel_2140);

  assign sel_2141 = 32'sd0;

  assign sel_1_405 = (s_19 == 1'b0 ? sel_1_404 :
              sel_2141);

  assign sel_2142 = 32'sd0;

  assign sel_1_406 = (s_20 == 1'b0 ? sel_1_405 :
              sel_2142);

  assign sel_2143 = 32'sd0;

  assign sel_2144 = 32'sd0;

  assign sel_2145 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_406, sel_2127, sel_2128, sel_2129, sel_2130, sel_2131,
       sel_2132, sel_2133, sel_2134, sel_2135, sel_2136, sel_2137, sel_2143,
       sel_2144, sel_2145) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p968_sel_1 = sel_2144;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p968_sel_1 = sel_2143;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p968_sel_1 = sel_1_406;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p968_sel_1 = sel_2137;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p968_sel_1 = sel_2136;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p968_sel_1 = sel_2135;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p968_sel_1 = sel_2134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p968_sel_1 = sel_2133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p968_sel_1 = sel_2132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p968_sel_1 = sel_2131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p968_sel_1 = sel_2130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p968_sel_1 = sel_2129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p968_sel_1 = sel_2128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p968_sel_1 = sel_2127;
        end
      default :
        begin
          p968_sel_1 = sel_2145;
        end
    endcase
    sel_1_407 = p968_sel_1;
  end

  assign cont_bits_31_13 = cont_bits_31_12[sel_1_407];

  assign sel_1_408 = (s_16 == 1'b0 ? sel_1_329 :
              cont_bits_31_13);

  assign cont_bits_22[0] = 1'b0;
  assign cont_bits_22[1] = 1'b0;
  assign cont_bits_22[2] = 1'b0;
  assign cont_bits_22[3] = 1'b0;
  assign cont_bits_22[4] = 1'b0;
  assign cont_bits_22[5] = 1'b0;
  assign cont_bits_22[6] = 1'b0;
  assign cont_bits_22[7] = 1'b0;
  assign cont_bits_22[8] = 1'b0;
  assign cont_bits_22[9] = 1'b0;
  assign cont_bits_22[10] = 1'b0;
  assign cont_bits_22[11] = 1'b0;

  assign tmp_167 = (s_13 == 1'b0 ? v2_2 :
              r_v22);

  assign tmp_168 = (s_14 == 1'b0 ? tmp_167 :
              r_v22);

  assign tmp_169 = (s_15 == 1'b0 ? tmp_168 :
              r_v22);

  assign tmp_170 = (s_16 == 1'b0 ? tmp_169 :
              r_v22);

  assign tmp_171 = (s_17 == 1'b0 ? tmp_170 :
              r_v22);

  assign tmp_172 = (s_18 == 1'b0 ? tmp_171 :
              r_v22);

  assign tmp_173 = (s_19 == 1'b0 ? tmp_172 :
              r_v22);

  assign tmp_174 = (s_20 == 1'b0 ? tmp_173 :
              r_v22);

  always @(is_SPI_MNGR_36, r_v22, tmp_174, v2_2) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p66_tmp = tmp_174;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p66_tmp = v2_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p66_tmp = r_v22;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p66_tmp = r_v22;
        end
      default :
        begin
          p66_tmp = r_v22;
        end
    endcase
    tmp_175 = p66_tmp;
  end

  always @(posedge clk)
    begin : r_v22_reg_process
      if (rst == 1'b1) begin
        r_v22 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v22 <= tmp_175;
        end
      end
    end

  simfcn1 u_simfcn1_4 (.vx(r_v22),  // uint16
                       .cont_bits2_0(functionOutput_0_4),  // boolean
                       .cont_bits2_1(functionOutput_1_4),  // boolean
                       .cont_bits2_2(functionOutput_2_4),  // boolean
                       .cont_bits2_3(functionOutput_3_4),  // boolean
                       .cont_bits2_4(functionOutput_4_4),  // boolean
                       .cont_bits2_5(functionOutput_5_4),  // boolean
                       .cont_bits2_6(functionOutput_6_4),  // boolean
                       .cont_bits2_7(functionOutput_7_4),  // boolean
                       .cont_bits2_8(functionOutput_8_4),  // boolean
                       .cont_bits2_9(functionOutput_9_4),  // boolean
                       .cont_bits2_10(functionOutput_10_4),  // boolean
                       .cont_bits2_11(functionOutput_11_4)  // boolean
                       );

  assign functionOutput_15[0] = functionOutput_0_4;
  assign functionOutput_15[1] = functionOutput_1_4;
  assign functionOutput_15[2] = functionOutput_2_4;
  assign functionOutput_15[3] = functionOutput_3_4;
  assign functionOutput_15[4] = functionOutput_4_4;
  assign functionOutput_15[5] = functionOutput_5_4;
  assign functionOutput_15[6] = functionOutput_6_4;
  assign functionOutput_15[7] = functionOutput_7_4;
  assign functionOutput_15[8] = functionOutput_8_4;
  assign functionOutput_15[9] = functionOutput_9_4;
  assign functionOutput_15[10] = functionOutput_10_4;
  assign functionOutput_15[11] = functionOutput_11_4;

  assign sel_2146 = 32'sd0;

  assign sel_2147 = 32'sd0;

  assign sel_2148 = 32'sd0;

  assign sel_2149 = 32'sd0;

  assign sel_2150 = 32'sd0;

  assign sel_2151 = 32'sd0;

  assign sel_2152 = 32'sd0;

  assign sel_2153 = 32'sd0;

  assign sel_2154 = 32'sd0;

  assign sel_2155 = 32'sd0;

  assign sel_2156 = 32'sd0;

  assign sel_2157 = 32'sd0;

  assign s_192 = 32'sd0;

  assign sel_1_409 = (s_17 == 1'b0 ? sel_2157 :
              s_192);

  assign sel_2158 = 32'sd0;

  assign sel_1_410 = (s_18 == 1'b0 ? sel_1_409 :
              sel_2158);

  assign sel_2159 = 32'sd0;

  assign sel_1_411 = (s_19 == 1'b0 ? sel_1_410 :
              sel_2159);

  assign sel_2160 = 32'sd0;

  assign sel_1_412 = (s_20 == 1'b0 ? sel_1_411 :
              sel_2160);

  assign sel_2161 = 32'sd0;

  assign sel_2162 = 32'sd0;

  assign sel_2163 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_412, sel_2146, sel_2147, sel_2148, sel_2149, sel_2150,
       sel_2151, sel_2152, sel_2153, sel_2154, sel_2155, sel_2156, sel_2161,
       sel_2162, sel_2163) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10730_sel_1 = sel_2162;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10730_sel_1 = sel_2161;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10730_sel_1 = sel_1_412;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10730_sel_1 = sel_2156;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10730_sel_1 = sel_2155;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10730_sel_1 = sel_2154;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10730_sel_1 = sel_2153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10730_sel_1 = sel_2152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10730_sel_1 = sel_2151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10730_sel_1 = sel_2150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10730_sel_1 = sel_2149;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10730_sel_1 = sel_2148;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10730_sel_1 = sel_2147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10730_sel_1 = sel_2146;
        end
      default :
        begin
          p10730_sel_1 = sel_2163;
        end
    endcase
    sel_1_413 = p10730_sel_1;
  end

  assign tmp_176 = functionOutput_15[sel_1_413];

  assign sel_2164 = 1'b0;

  assign sel_2165 = 1'b0;

  assign sel_2166 = 1'b0;

  assign sel_2167 = 1'b0;

  assign sel_2168 = 1'b0;

  assign sel_2169 = 1'b0;

  assign sel_2170 = 1'b0;

  assign sel_2171 = 1'b0;

  assign sel_2172 = 1'b0;

  assign sel_2173 = 1'b0;

  assign sel_2174 = 1'b0;

  assign sel_2175 = 1'b0;

  assign s_193 = 1'b1;

  assign sel_2_441 = (s_17 == 1'b0 ? sel_2175 :
              s_193);

  assign sel_2176 = 1'b0;

  assign sel_2_442 = (s_18 == 1'b0 ? sel_2_441 :
              sel_2176);

  assign sel_2177 = 1'b0;

  assign sel_2_443 = (s_19 == 1'b0 ? sel_2_442 :
              sel_2177);

  assign sel_2178 = 1'b0;

  assign sel_2_444 = (s_20 == 1'b0 ? sel_2_443 :
              sel_2178);

  assign sel_2179 = 1'b0;

  assign sel_2180 = 1'b0;

  assign sel_2181 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2164, sel_2165, sel_2166, sel_2167, sel_2168, sel_2169,
       sel_2170, sel_2171, sel_2172, sel_2173, sel_2174, sel_2179, sel_2180,
       sel_2181, sel_2_444) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7667_sel_2 = sel_2180;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7667_sel_2 = sel_2179;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7667_sel_2 = sel_2_444;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7667_sel_2 = sel_2174;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7667_sel_2 = sel_2173;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7667_sel_2 = sel_2172;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7667_sel_2 = sel_2171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7667_sel_2 = sel_2170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7667_sel_2 = sel_2169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7667_sel_2 = sel_2168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7667_sel_2 = sel_2167;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7667_sel_2 = sel_2166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7667_sel_2 = sel_2165;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7667_sel_2 = sel_2164;
        end
      default :
        begin
          p7667_sel_2 = sel_2181;
        end
    endcase
    sel_2_445 = p7667_sel_2;
  end

  always @* begin
    p7666cont_bits_22_cont_bits_22[0] = cont_bits_22[0];
    if (sel_2_445) begin
      p7666cont_bits_22_cont_bits_22[0] = tmp_176;
    end
    cont_bits_22_1[0] = p7666cont_bits_22_cont_bits_22[0];
    cont_bits_22_1[1] = cont_bits_22[1];
    cont_bits_22_1[2] = cont_bits_22[2];
    cont_bits_22_1[3] = cont_bits_22[3];
    cont_bits_22_1[4] = cont_bits_22[4];
    cont_bits_22_1[5] = cont_bits_22[5];
    cont_bits_22_1[6] = cont_bits_22[6];
    cont_bits_22_1[7] = cont_bits_22[7];
    cont_bits_22_1[8] = cont_bits_22[8];
    cont_bits_22_1[9] = cont_bits_22[9];
    cont_bits_22_1[10] = cont_bits_22[10];
    cont_bits_22_1[11] = cont_bits_22[11];
  end

  assign sel_2182 = 32'sd0;

  assign sel_2183 = 32'sd0;

  assign sel_2184 = 32'sd0;

  assign sel_2185 = 32'sd0;

  assign sel_2186 = 32'sd0;

  assign sel_2187 = 32'sd0;

  assign sel_2188 = 32'sd0;

  assign sel_2189 = 32'sd0;

  assign sel_2190 = 32'sd0;

  assign sel_2191 = 32'sd0;

  assign sel_2192 = 32'sd0;

  assign sel_2193 = 32'sd0;

  assign s_194 = 32'sd1;

  assign sel_1_414 = (s_17 == 1'b0 ? sel_2193 :
              s_194);

  assign sel_2194 = 32'sd0;

  assign sel_1_415 = (s_18 == 1'b0 ? sel_1_414 :
              sel_2194);

  assign sel_2195 = 32'sd0;

  assign sel_1_416 = (s_19 == 1'b0 ? sel_1_415 :
              sel_2195);

  assign sel_2196 = 32'sd0;

  assign sel_1_417 = (s_20 == 1'b0 ? sel_1_416 :
              sel_2196);

  assign sel_2197 = 32'sd0;

  assign sel_2198 = 32'sd0;

  assign sel_2199 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_417, sel_2182, sel_2183, sel_2184, sel_2185, sel_2186,
       sel_2187, sel_2188, sel_2189, sel_2190, sel_2191, sel_2192, sel_2197,
       sel_2198, sel_2199) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11172_sel_1 = sel_2198;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11172_sel_1 = sel_2197;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11172_sel_1 = sel_1_417;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11172_sel_1 = sel_2192;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11172_sel_1 = sel_2191;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11172_sel_1 = sel_2190;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11172_sel_1 = sel_2189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11172_sel_1 = sel_2188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11172_sel_1 = sel_2187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11172_sel_1 = sel_2186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11172_sel_1 = sel_2185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11172_sel_1 = sel_2184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11172_sel_1 = sel_2183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11172_sel_1 = sel_2182;
        end
      default :
        begin
          p11172_sel_1 = sel_2199;
        end
    endcase
    sel_1_418 = p11172_sel_1;
  end

  assign tmp_177 = functionOutput_15[sel_1_418];

  assign sel_2200 = 1'b0;

  assign sel_2201 = 1'b0;

  assign sel_2202 = 1'b0;

  assign sel_2203 = 1'b0;

  assign sel_2204 = 1'b0;

  assign sel_2205 = 1'b0;

  assign sel_2206 = 1'b0;

  assign sel_2207 = 1'b0;

  assign sel_2208 = 1'b0;

  assign sel_2209 = 1'b0;

  assign sel_2210 = 1'b0;

  assign sel_2211 = 1'b0;

  assign s_195 = 1'b1;

  assign sel_2_446 = (s_17 == 1'b0 ? sel_2211 :
              s_195);

  assign sel_2212 = 1'b0;

  assign sel_2_447 = (s_18 == 1'b0 ? sel_2_446 :
              sel_2212);

  assign sel_2213 = 1'b0;

  assign sel_2_448 = (s_19 == 1'b0 ? sel_2_447 :
              sel_2213);

  assign sel_2214 = 1'b0;

  assign sel_2_449 = (s_20 == 1'b0 ? sel_2_448 :
              sel_2214);

  assign sel_2215 = 1'b0;

  assign sel_2216 = 1'b0;

  assign sel_2217 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2200, sel_2201, sel_2202, sel_2203, sel_2204, sel_2205,
       sel_2206, sel_2207, sel_2208, sel_2209, sel_2210, sel_2215, sel_2216,
       sel_2217, sel_2_449) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7512_sel_2 = sel_2216;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7512_sel_2 = sel_2215;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7512_sel_2 = sel_2_449;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7512_sel_2 = sel_2210;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7512_sel_2 = sel_2209;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7512_sel_2 = sel_2208;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7512_sel_2 = sel_2207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7512_sel_2 = sel_2206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7512_sel_2 = sel_2205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7512_sel_2 = sel_2204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7512_sel_2 = sel_2203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7512_sel_2 = sel_2202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7512_sel_2 = sel_2201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7512_sel_2 = sel_2200;
        end
      default :
        begin
          p7512_sel_2 = sel_2217;
        end
    endcase
    sel_2_450 = p7512_sel_2;
  end

  always @* begin
    p7511cont_bits_22_cont_bits_22[1] = cont_bits_22_1[1];
    if (sel_2_450) begin
      p7511cont_bits_22_cont_bits_22[1] = tmp_177;
    end
    cont_bits_22_2[0] = cont_bits_22_1[0];
    cont_bits_22_2[1] = p7511cont_bits_22_cont_bits_22[1];
    cont_bits_22_2[2] = cont_bits_22_1[2];
    cont_bits_22_2[3] = cont_bits_22_1[3];
    cont_bits_22_2[4] = cont_bits_22_1[4];
    cont_bits_22_2[5] = cont_bits_22_1[5];
    cont_bits_22_2[6] = cont_bits_22_1[6];
    cont_bits_22_2[7] = cont_bits_22_1[7];
    cont_bits_22_2[8] = cont_bits_22_1[8];
    cont_bits_22_2[9] = cont_bits_22_1[9];
    cont_bits_22_2[10] = cont_bits_22_1[10];
    cont_bits_22_2[11] = cont_bits_22_1[11];
  end

  assign sel_2218 = 32'sd0;

  assign sel_2219 = 32'sd0;

  assign sel_2220 = 32'sd0;

  assign sel_2221 = 32'sd0;

  assign sel_2222 = 32'sd0;

  assign sel_2223 = 32'sd0;

  assign sel_2224 = 32'sd0;

  assign sel_2225 = 32'sd0;

  assign sel_2226 = 32'sd0;

  assign sel_2227 = 32'sd0;

  assign sel_2228 = 32'sd0;

  assign sel_2229 = 32'sd0;

  assign s_196 = 32'sd2;

  assign sel_1_419 = (s_17 == 1'b0 ? sel_2229 :
              s_196);

  assign sel_2230 = 32'sd0;

  assign sel_1_420 = (s_18 == 1'b0 ? sel_1_419 :
              sel_2230);

  assign sel_2231 = 32'sd0;

  assign sel_1_421 = (s_19 == 1'b0 ? sel_1_420 :
              sel_2231);

  assign sel_2232 = 32'sd0;

  assign sel_1_422 = (s_20 == 1'b0 ? sel_1_421 :
              sel_2232);

  assign sel_2233 = 32'sd0;

  assign sel_2234 = 32'sd0;

  assign sel_2235 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_422, sel_2218, sel_2219, sel_2220, sel_2221, sel_2222,
       sel_2223, sel_2224, sel_2225, sel_2226, sel_2227, sel_2228, sel_2233,
       sel_2234, sel_2235) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10611_sel_1 = sel_2234;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10611_sel_1 = sel_2233;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10611_sel_1 = sel_1_422;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10611_sel_1 = sel_2228;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10611_sel_1 = sel_2227;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10611_sel_1 = sel_2226;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10611_sel_1 = sel_2225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10611_sel_1 = sel_2224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10611_sel_1 = sel_2223;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10611_sel_1 = sel_2222;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10611_sel_1 = sel_2221;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10611_sel_1 = sel_2220;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10611_sel_1 = sel_2219;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10611_sel_1 = sel_2218;
        end
      default :
        begin
          p10611_sel_1 = sel_2235;
        end
    endcase
    sel_1_423 = p10611_sel_1;
  end

  assign tmp_178 = functionOutput_15[sel_1_423];

  assign sel_2236 = 1'b0;

  assign sel_2237 = 1'b0;

  assign sel_2238 = 1'b0;

  assign sel_2239 = 1'b0;

  assign sel_2240 = 1'b0;

  assign sel_2241 = 1'b0;

  assign sel_2242 = 1'b0;

  assign sel_2243 = 1'b0;

  assign sel_2244 = 1'b0;

  assign sel_2245 = 1'b0;

  assign sel_2246 = 1'b0;

  assign sel_2247 = 1'b0;

  assign s_197 = 1'b1;

  assign sel_2_451 = (s_17 == 1'b0 ? sel_2247 :
              s_197);

  assign sel_2248 = 1'b0;

  assign sel_2_452 = (s_18 == 1'b0 ? sel_2_451 :
              sel_2248);

  assign sel_2249 = 1'b0;

  assign sel_2_453 = (s_19 == 1'b0 ? sel_2_452 :
              sel_2249);

  assign sel_2250 = 1'b0;

  assign sel_2_454 = (s_20 == 1'b0 ? sel_2_453 :
              sel_2250);

  assign sel_2251 = 1'b0;

  assign sel_2252 = 1'b0;

  assign sel_2253 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2236, sel_2237, sel_2238, sel_2239, sel_2240, sel_2241,
       sel_2242, sel_2243, sel_2244, sel_2245, sel_2246, sel_2251, sel_2252,
       sel_2253, sel_2_454) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7029_sel_2 = sel_2252;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7029_sel_2 = sel_2251;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7029_sel_2 = sel_2_454;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7029_sel_2 = sel_2246;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7029_sel_2 = sel_2245;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7029_sel_2 = sel_2244;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7029_sel_2 = sel_2243;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7029_sel_2 = sel_2242;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7029_sel_2 = sel_2241;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7029_sel_2 = sel_2240;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7029_sel_2 = sel_2239;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7029_sel_2 = sel_2238;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7029_sel_2 = sel_2237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7029_sel_2 = sel_2236;
        end
      default :
        begin
          p7029_sel_2 = sel_2253;
        end
    endcase
    sel_2_455 = p7029_sel_2;
  end

  always @* begin
    p7028cont_bits_22_cont_bits_22[2] = cont_bits_22_2[2];
    if (sel_2_455) begin
      p7028cont_bits_22_cont_bits_22[2] = tmp_178;
    end
    cont_bits_22_3[0] = cont_bits_22_2[0];
    cont_bits_22_3[1] = cont_bits_22_2[1];
    cont_bits_22_3[2] = p7028cont_bits_22_cont_bits_22[2];
    cont_bits_22_3[3] = cont_bits_22_2[3];
    cont_bits_22_3[4] = cont_bits_22_2[4];
    cont_bits_22_3[5] = cont_bits_22_2[5];
    cont_bits_22_3[6] = cont_bits_22_2[6];
    cont_bits_22_3[7] = cont_bits_22_2[7];
    cont_bits_22_3[8] = cont_bits_22_2[8];
    cont_bits_22_3[9] = cont_bits_22_2[9];
    cont_bits_22_3[10] = cont_bits_22_2[10];
    cont_bits_22_3[11] = cont_bits_22_2[11];
  end

  assign sel_2254 = 32'sd0;

  assign sel_2255 = 32'sd0;

  assign sel_2256 = 32'sd0;

  assign sel_2257 = 32'sd0;

  assign sel_2258 = 32'sd0;

  assign sel_2259 = 32'sd0;

  assign sel_2260 = 32'sd0;

  assign sel_2261 = 32'sd0;

  assign sel_2262 = 32'sd0;

  assign sel_2263 = 32'sd0;

  assign sel_2264 = 32'sd0;

  assign sel_2265 = 32'sd0;

  assign s_198 = 32'sd3;

  assign sel_1_424 = (s_17 == 1'b0 ? sel_2265 :
              s_198);

  assign sel_2266 = 32'sd0;

  assign sel_1_425 = (s_18 == 1'b0 ? sel_1_424 :
              sel_2266);

  assign sel_2267 = 32'sd0;

  assign sel_1_426 = (s_19 == 1'b0 ? sel_1_425 :
              sel_2267);

  assign sel_2268 = 32'sd0;

  assign sel_1_427 = (s_20 == 1'b0 ? sel_1_426 :
              sel_2268);

  assign sel_2269 = 32'sd0;

  assign sel_2270 = 32'sd0;

  assign sel_2271 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_427, sel_2254, sel_2255, sel_2256, sel_2257, sel_2258,
       sel_2259, sel_2260, sel_2261, sel_2262, sel_2263, sel_2264, sel_2269,
       sel_2270, sel_2271) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10679_sel_1 = sel_2270;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10679_sel_1 = sel_2269;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10679_sel_1 = sel_1_427;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10679_sel_1 = sel_2264;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10679_sel_1 = sel_2263;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10679_sel_1 = sel_2262;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10679_sel_1 = sel_2261;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10679_sel_1 = sel_2260;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10679_sel_1 = sel_2259;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10679_sel_1 = sel_2258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10679_sel_1 = sel_2257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10679_sel_1 = sel_2256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10679_sel_1 = sel_2255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10679_sel_1 = sel_2254;
        end
      default :
        begin
          p10679_sel_1 = sel_2271;
        end
    endcase
    sel_1_428 = p10679_sel_1;
  end

  assign tmp_179 = functionOutput_15[sel_1_428];

  assign sel_2272 = 1'b0;

  assign sel_2273 = 1'b0;

  assign sel_2274 = 1'b0;

  assign sel_2275 = 1'b0;

  assign sel_2276 = 1'b0;

  assign sel_2277 = 1'b0;

  assign sel_2278 = 1'b0;

  assign sel_2279 = 1'b0;

  assign sel_2280 = 1'b0;

  assign sel_2281 = 1'b0;

  assign sel_2282 = 1'b0;

  assign sel_2283 = 1'b0;

  assign s_199 = 1'b1;

  assign sel_2_456 = (s_17 == 1'b0 ? sel_2283 :
              s_199);

  assign sel_2284 = 1'b0;

  assign sel_2_457 = (s_18 == 1'b0 ? sel_2_456 :
              sel_2284);

  assign sel_2285 = 1'b0;

  assign sel_2_458 = (s_19 == 1'b0 ? sel_2_457 :
              sel_2285);

  assign sel_2286 = 1'b0;

  assign sel_2_459 = (s_20 == 1'b0 ? sel_2_458 :
              sel_2286);

  assign sel_2287 = 1'b0;

  assign sel_2288 = 1'b0;

  assign sel_2289 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2272, sel_2273, sel_2274, sel_2275, sel_2276, sel_2277,
       sel_2278, sel_2279, sel_2280, sel_2281, sel_2282, sel_2287, sel_2288,
       sel_2289, sel_2_459) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6874_sel_2 = sel_2288;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6874_sel_2 = sel_2287;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6874_sel_2 = sel_2_459;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6874_sel_2 = sel_2282;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6874_sel_2 = sel_2281;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6874_sel_2 = sel_2280;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6874_sel_2 = sel_2279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6874_sel_2 = sel_2278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6874_sel_2 = sel_2277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6874_sel_2 = sel_2276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6874_sel_2 = sel_2275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6874_sel_2 = sel_2274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6874_sel_2 = sel_2273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6874_sel_2 = sel_2272;
        end
      default :
        begin
          p6874_sel_2 = sel_2289;
        end
    endcase
    sel_2_460 = p6874_sel_2;
  end

  always @* begin
    p6873cont_bits_22_cont_bits_22[3] = cont_bits_22_3[3];
    if (sel_2_460) begin
      p6873cont_bits_22_cont_bits_22[3] = tmp_179;
    end
    cont_bits_22_4[0] = cont_bits_22_3[0];
    cont_bits_22_4[1] = cont_bits_22_3[1];
    cont_bits_22_4[2] = cont_bits_22_3[2];
    cont_bits_22_4[3] = p6873cont_bits_22_cont_bits_22[3];
    cont_bits_22_4[4] = cont_bits_22_3[4];
    cont_bits_22_4[5] = cont_bits_22_3[5];
    cont_bits_22_4[6] = cont_bits_22_3[6];
    cont_bits_22_4[7] = cont_bits_22_3[7];
    cont_bits_22_4[8] = cont_bits_22_3[8];
    cont_bits_22_4[9] = cont_bits_22_3[9];
    cont_bits_22_4[10] = cont_bits_22_3[10];
    cont_bits_22_4[11] = cont_bits_22_3[11];
  end

  assign sel_2290 = 32'sd0;

  assign sel_2291 = 32'sd0;

  assign sel_2292 = 32'sd0;

  assign sel_2293 = 32'sd0;

  assign sel_2294 = 32'sd0;

  assign sel_2295 = 32'sd0;

  assign sel_2296 = 32'sd0;

  assign sel_2297 = 32'sd0;

  assign sel_2298 = 32'sd0;

  assign sel_2299 = 32'sd0;

  assign sel_2300 = 32'sd0;

  assign sel_2301 = 32'sd0;

  assign s_200 = 32'sd4;

  assign sel_1_429 = (s_17 == 1'b0 ? sel_2301 :
              s_200);

  assign sel_2302 = 32'sd0;

  assign sel_1_430 = (s_18 == 1'b0 ? sel_1_429 :
              sel_2302);

  assign sel_2303 = 32'sd0;

  assign sel_1_431 = (s_19 == 1'b0 ? sel_1_430 :
              sel_2303);

  assign sel_2304 = 32'sd0;

  assign sel_1_432 = (s_20 == 1'b0 ? sel_1_431 :
              sel_2304);

  assign sel_2305 = 32'sd0;

  assign sel_2306 = 32'sd0;

  assign sel_2307 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_432, sel_2290, sel_2291, sel_2292, sel_2293, sel_2294,
       sel_2295, sel_2296, sel_2297, sel_2298, sel_2299, sel_2300, sel_2305,
       sel_2306, sel_2307) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9948_sel_1 = sel_2306;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9948_sel_1 = sel_2305;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9948_sel_1 = sel_1_432;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9948_sel_1 = sel_2300;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9948_sel_1 = sel_2299;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9948_sel_1 = sel_2298;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9948_sel_1 = sel_2297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9948_sel_1 = sel_2296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9948_sel_1 = sel_2295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9948_sel_1 = sel_2294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9948_sel_1 = sel_2293;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9948_sel_1 = sel_2292;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9948_sel_1 = sel_2291;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9948_sel_1 = sel_2290;
        end
      default :
        begin
          p9948_sel_1 = sel_2307;
        end
    endcase
    sel_1_433 = p9948_sel_1;
  end

  assign tmp_180 = functionOutput_15[sel_1_433];

  assign sel_2308 = 1'b0;

  assign sel_2309 = 1'b0;

  assign sel_2310 = 1'b0;

  assign sel_2311 = 1'b0;

  assign sel_2312 = 1'b0;

  assign sel_2313 = 1'b0;

  assign sel_2314 = 1'b0;

  assign sel_2315 = 1'b0;

  assign sel_2316 = 1'b0;

  assign sel_2317 = 1'b0;

  assign sel_2318 = 1'b0;

  assign sel_2319 = 1'b0;

  assign s_201 = 1'b1;

  assign sel_2_461 = (s_17 == 1'b0 ? sel_2319 :
              s_201);

  assign sel_2320 = 1'b0;

  assign sel_2_462 = (s_18 == 1'b0 ? sel_2_461 :
              sel_2320);

  assign sel_2321 = 1'b0;

  assign sel_2_463 = (s_19 == 1'b0 ? sel_2_462 :
              sel_2321);

  assign sel_2322 = 1'b0;

  assign sel_2_464 = (s_20 == 1'b0 ? sel_2_463 :
              sel_2322);

  assign sel_2323 = 1'b0;

  assign sel_2324 = 1'b0;

  assign sel_2325 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2308, sel_2309, sel_2310, sel_2311, sel_2312, sel_2313,
       sel_2314, sel_2315, sel_2316, sel_2317, sel_2318, sel_2323, sel_2324,
       sel_2325, sel_2_464) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6422_sel_2 = sel_2324;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6422_sel_2 = sel_2323;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6422_sel_2 = sel_2_464;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6422_sel_2 = sel_2318;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6422_sel_2 = sel_2317;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6422_sel_2 = sel_2316;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6422_sel_2 = sel_2315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6422_sel_2 = sel_2314;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6422_sel_2 = sel_2313;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6422_sel_2 = sel_2312;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6422_sel_2 = sel_2311;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6422_sel_2 = sel_2310;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6422_sel_2 = sel_2309;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6422_sel_2 = sel_2308;
        end
      default :
        begin
          p6422_sel_2 = sel_2325;
        end
    endcase
    sel_2_465 = p6422_sel_2;
  end

  always @* begin
    p6421cont_bits_22_cont_bits_22[4] = cont_bits_22_4[4];
    if (sel_2_465) begin
      p6421cont_bits_22_cont_bits_22[4] = tmp_180;
    end
    cont_bits_22_5[0] = cont_bits_22_4[0];
    cont_bits_22_5[1] = cont_bits_22_4[1];
    cont_bits_22_5[2] = cont_bits_22_4[2];
    cont_bits_22_5[3] = cont_bits_22_4[3];
    cont_bits_22_5[4] = p6421cont_bits_22_cont_bits_22[4];
    cont_bits_22_5[5] = cont_bits_22_4[5];
    cont_bits_22_5[6] = cont_bits_22_4[6];
    cont_bits_22_5[7] = cont_bits_22_4[7];
    cont_bits_22_5[8] = cont_bits_22_4[8];
    cont_bits_22_5[9] = cont_bits_22_4[9];
    cont_bits_22_5[10] = cont_bits_22_4[10];
    cont_bits_22_5[11] = cont_bits_22_4[11];
  end

  assign sel_2326 = 32'sd0;

  assign sel_2327 = 32'sd0;

  assign sel_2328 = 32'sd0;

  assign sel_2329 = 32'sd0;

  assign sel_2330 = 32'sd0;

  assign sel_2331 = 32'sd0;

  assign sel_2332 = 32'sd0;

  assign sel_2333 = 32'sd0;

  assign sel_2334 = 32'sd0;

  assign sel_2335 = 32'sd0;

  assign sel_2336 = 32'sd0;

  assign sel_2337 = 32'sd0;

  assign s_202 = 32'sd5;

  assign sel_1_434 = (s_17 == 1'b0 ? sel_2337 :
              s_202);

  assign sel_2338 = 32'sd0;

  assign sel_1_435 = (s_18 == 1'b0 ? sel_1_434 :
              sel_2338);

  assign sel_2339 = 32'sd0;

  assign sel_1_436 = (s_19 == 1'b0 ? sel_1_435 :
              sel_2339);

  assign sel_2340 = 32'sd0;

  assign sel_1_437 = (s_20 == 1'b0 ? sel_1_436 :
              sel_2340);

  assign sel_2341 = 32'sd0;

  assign sel_2342 = 32'sd0;

  assign sel_2343 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_437, sel_2326, sel_2327, sel_2328, sel_2329, sel_2330,
       sel_2331, sel_2332, sel_2333, sel_2334, sel_2335, sel_2336, sel_2341,
       sel_2342, sel_2343) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10696_sel_1 = sel_2342;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10696_sel_1 = sel_2341;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10696_sel_1 = sel_1_437;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10696_sel_1 = sel_2336;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10696_sel_1 = sel_2335;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10696_sel_1 = sel_2334;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10696_sel_1 = sel_2333;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10696_sel_1 = sel_2332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10696_sel_1 = sel_2331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10696_sel_1 = sel_2330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10696_sel_1 = sel_2329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10696_sel_1 = sel_2328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10696_sel_1 = sel_2327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10696_sel_1 = sel_2326;
        end
      default :
        begin
          p10696_sel_1 = sel_2343;
        end
    endcase
    sel_1_438 = p10696_sel_1;
  end

  assign tmp_181 = functionOutput_15[sel_1_438];

  assign sel_2344 = 1'b0;

  assign sel_2345 = 1'b0;

  assign sel_2346 = 1'b0;

  assign sel_2347 = 1'b0;

  assign sel_2348 = 1'b0;

  assign sel_2349 = 1'b0;

  assign sel_2350 = 1'b0;

  assign sel_2351 = 1'b0;

  assign sel_2352 = 1'b0;

  assign sel_2353 = 1'b0;

  assign sel_2354 = 1'b0;

  assign sel_2355 = 1'b0;

  assign s_203 = 1'b1;

  assign sel_2_466 = (s_17 == 1'b0 ? sel_2355 :
              s_203);

  assign sel_2356 = 1'b0;

  assign sel_2_467 = (s_18 == 1'b0 ? sel_2_466 :
              sel_2356);

  assign sel_2357 = 1'b0;

  assign sel_2_468 = (s_19 == 1'b0 ? sel_2_467 :
              sel_2357);

  assign sel_2358 = 1'b0;

  assign sel_2_469 = (s_20 == 1'b0 ? sel_2_468 :
              sel_2358);

  assign sel_2359 = 1'b0;

  assign sel_2360 = 1'b0;

  assign sel_2361 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2344, sel_2345, sel_2346, sel_2347, sel_2348, sel_2349,
       sel_2350, sel_2351, sel_2352, sel_2353, sel_2354, sel_2359, sel_2360,
       sel_2361, sel_2_469) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6268_sel_2 = sel_2360;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6268_sel_2 = sel_2359;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6268_sel_2 = sel_2_469;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6268_sel_2 = sel_2354;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6268_sel_2 = sel_2353;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6268_sel_2 = sel_2352;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6268_sel_2 = sel_2351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6268_sel_2 = sel_2350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6268_sel_2 = sel_2349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6268_sel_2 = sel_2348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6268_sel_2 = sel_2347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6268_sel_2 = sel_2346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6268_sel_2 = sel_2345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6268_sel_2 = sel_2344;
        end
      default :
        begin
          p6268_sel_2 = sel_2361;
        end
    endcase
    sel_2_470 = p6268_sel_2;
  end

  always @* begin
    p6267cont_bits_22_cont_bits_22[5] = cont_bits_22_5[5];
    if (sel_2_470) begin
      p6267cont_bits_22_cont_bits_22[5] = tmp_181;
    end
    cont_bits_22_6[0] = cont_bits_22_5[0];
    cont_bits_22_6[1] = cont_bits_22_5[1];
    cont_bits_22_6[2] = cont_bits_22_5[2];
    cont_bits_22_6[3] = cont_bits_22_5[3];
    cont_bits_22_6[4] = cont_bits_22_5[4];
    cont_bits_22_6[5] = p6267cont_bits_22_cont_bits_22[5];
    cont_bits_22_6[6] = cont_bits_22_5[6];
    cont_bits_22_6[7] = cont_bits_22_5[7];
    cont_bits_22_6[8] = cont_bits_22_5[8];
    cont_bits_22_6[9] = cont_bits_22_5[9];
    cont_bits_22_6[10] = cont_bits_22_5[10];
    cont_bits_22_6[11] = cont_bits_22_5[11];
  end

  assign sel_2362 = 32'sd0;

  assign sel_2363 = 32'sd0;

  assign sel_2364 = 32'sd0;

  assign sel_2365 = 32'sd0;

  assign sel_2366 = 32'sd0;

  assign sel_2367 = 32'sd0;

  assign sel_2368 = 32'sd0;

  assign sel_2369 = 32'sd0;

  assign sel_2370 = 32'sd0;

  assign sel_2371 = 32'sd0;

  assign sel_2372 = 32'sd0;

  assign sel_2373 = 32'sd0;

  assign s_204 = 32'sd6;

  assign sel_1_439 = (s_17 == 1'b0 ? sel_2373 :
              s_204);

  assign sel_2374 = 32'sd0;

  assign sel_1_440 = (s_18 == 1'b0 ? sel_1_439 :
              sel_2374);

  assign sel_2375 = 32'sd0;

  assign sel_1_441 = (s_19 == 1'b0 ? sel_1_440 :
              sel_2375);

  assign sel_2376 = 32'sd0;

  assign sel_1_442 = (s_20 == 1'b0 ? sel_1_441 :
              sel_2376);

  assign sel_2377 = 32'sd0;

  assign sel_2378 = 32'sd0;

  assign sel_2379 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_442, sel_2362, sel_2363, sel_2364, sel_2365, sel_2366,
       sel_2367, sel_2368, sel_2369, sel_2370, sel_2371, sel_2372, sel_2377,
       sel_2378, sel_2379) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11070_sel_1 = sel_2378;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11070_sel_1 = sel_2377;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11070_sel_1 = sel_1_442;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11070_sel_1 = sel_2372;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11070_sel_1 = sel_2371;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11070_sel_1 = sel_2370;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11070_sel_1 = sel_2369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11070_sel_1 = sel_2368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11070_sel_1 = sel_2367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11070_sel_1 = sel_2366;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11070_sel_1 = sel_2365;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11070_sel_1 = sel_2364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11070_sel_1 = sel_2363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11070_sel_1 = sel_2362;
        end
      default :
        begin
          p11070_sel_1 = sel_2379;
        end
    endcase
    sel_1_443 = p11070_sel_1;
  end

  assign tmp_182 = functionOutput_15[sel_1_443];

  assign sel_2380 = 1'b0;

  assign sel_2381 = 1'b0;

  assign sel_2382 = 1'b0;

  assign sel_2383 = 1'b0;

  assign sel_2384 = 1'b0;

  assign sel_2385 = 1'b0;

  assign sel_2386 = 1'b0;

  assign sel_2387 = 1'b0;

  assign sel_2388 = 1'b0;

  assign sel_2389 = 1'b0;

  assign sel_2390 = 1'b0;

  assign sel_2391 = 1'b0;

  assign s_205 = 1'b1;

  assign sel_2_471 = (s_17 == 1'b0 ? sel_2391 :
              s_205);

  assign sel_2392 = 1'b0;

  assign sel_2_472 = (s_18 == 1'b0 ? sel_2_471 :
              sel_2392);

  assign sel_2393 = 1'b0;

  assign sel_2_473 = (s_19 == 1'b0 ? sel_2_472 :
              sel_2393);

  assign sel_2394 = 1'b0;

  assign sel_2_474 = (s_20 == 1'b0 ? sel_2_473 :
              sel_2394);

  assign sel_2395 = 1'b0;

  assign sel_2396 = 1'b0;

  assign sel_2397 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2380, sel_2381, sel_2382, sel_2383, sel_2384, sel_2385,
       sel_2386, sel_2387, sel_2388, sel_2389, sel_2390, sel_2395, sel_2396,
       sel_2397, sel_2_474) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5816_sel_2 = sel_2396;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5816_sel_2 = sel_2395;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5816_sel_2 = sel_2_474;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5816_sel_2 = sel_2390;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5816_sel_2 = sel_2389;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5816_sel_2 = sel_2388;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5816_sel_2 = sel_2387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5816_sel_2 = sel_2386;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5816_sel_2 = sel_2385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5816_sel_2 = sel_2384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5816_sel_2 = sel_2383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5816_sel_2 = sel_2382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5816_sel_2 = sel_2381;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5816_sel_2 = sel_2380;
        end
      default :
        begin
          p5816_sel_2 = sel_2397;
        end
    endcase
    sel_2_475 = p5816_sel_2;
  end

  always @* begin
    p5815cont_bits_22_cont_bits_22[6] = cont_bits_22_6[6];
    if (sel_2_475) begin
      p5815cont_bits_22_cont_bits_22[6] = tmp_182;
    end
    cont_bits_22_7[0] = cont_bits_22_6[0];
    cont_bits_22_7[1] = cont_bits_22_6[1];
    cont_bits_22_7[2] = cont_bits_22_6[2];
    cont_bits_22_7[3] = cont_bits_22_6[3];
    cont_bits_22_7[4] = cont_bits_22_6[4];
    cont_bits_22_7[5] = cont_bits_22_6[5];
    cont_bits_22_7[6] = p5815cont_bits_22_cont_bits_22[6];
    cont_bits_22_7[7] = cont_bits_22_6[7];
    cont_bits_22_7[8] = cont_bits_22_6[8];
    cont_bits_22_7[9] = cont_bits_22_6[9];
    cont_bits_22_7[10] = cont_bits_22_6[10];
    cont_bits_22_7[11] = cont_bits_22_6[11];
  end

  assign sel_2398 = 32'sd0;

  assign sel_2399 = 32'sd0;

  assign sel_2400 = 32'sd0;

  assign sel_2401 = 32'sd0;

  assign sel_2402 = 32'sd0;

  assign sel_2403 = 32'sd0;

  assign sel_2404 = 32'sd0;

  assign sel_2405 = 32'sd0;

  assign sel_2406 = 32'sd0;

  assign sel_2407 = 32'sd0;

  assign sel_2408 = 32'sd0;

  assign sel_2409 = 32'sd0;

  assign s_206 = 32'sd7;

  assign sel_1_444 = (s_17 == 1'b0 ? sel_2409 :
              s_206);

  assign sel_2410 = 32'sd0;

  assign sel_1_445 = (s_18 == 1'b0 ? sel_1_444 :
              sel_2410);

  assign sel_2411 = 32'sd0;

  assign sel_1_446 = (s_19 == 1'b0 ? sel_1_445 :
              sel_2411);

  assign sel_2412 = 32'sd0;

  assign sel_1_447 = (s_20 == 1'b0 ? sel_1_446 :
              sel_2412);

  assign sel_2413 = 32'sd0;

  assign sel_2414 = 32'sd0;

  assign sel_2415 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_447, sel_2398, sel_2399, sel_2400, sel_2401, sel_2402,
       sel_2403, sel_2404, sel_2405, sel_2406, sel_2407, sel_2408, sel_2413,
       sel_2414, sel_2415) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10560_sel_1 = sel_2414;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10560_sel_1 = sel_2413;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10560_sel_1 = sel_1_447;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10560_sel_1 = sel_2408;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10560_sel_1 = sel_2407;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10560_sel_1 = sel_2406;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10560_sel_1 = sel_2405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10560_sel_1 = sel_2404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10560_sel_1 = sel_2403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10560_sel_1 = sel_2402;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10560_sel_1 = sel_2401;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10560_sel_1 = sel_2400;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10560_sel_1 = sel_2399;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10560_sel_1 = sel_2398;
        end
      default :
        begin
          p10560_sel_1 = sel_2415;
        end
    endcase
    sel_1_448 = p10560_sel_1;
  end

  assign tmp_183 = functionOutput_15[sel_1_448];

  assign sel_2416 = 1'b0;

  assign sel_2417 = 1'b0;

  assign sel_2418 = 1'b0;

  assign sel_2419 = 1'b0;

  assign sel_2420 = 1'b0;

  assign sel_2421 = 1'b0;

  assign sel_2422 = 1'b0;

  assign sel_2423 = 1'b0;

  assign sel_2424 = 1'b0;

  assign sel_2425 = 1'b0;

  assign sel_2426 = 1'b0;

  assign sel_2427 = 1'b0;

  assign s_207 = 1'b1;

  assign sel_2_476 = (s_17 == 1'b0 ? sel_2427 :
              s_207);

  assign sel_2428 = 1'b0;

  assign sel_2_477 = (s_18 == 1'b0 ? sel_2_476 :
              sel_2428);

  assign sel_2429 = 1'b0;

  assign sel_2_478 = (s_19 == 1'b0 ? sel_2_477 :
              sel_2429);

  assign sel_2430 = 1'b0;

  assign sel_2_479 = (s_20 == 1'b0 ? sel_2_478 :
              sel_2430);

  assign sel_2431 = 1'b0;

  assign sel_2432 = 1'b0;

  assign sel_2433 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2416, sel_2417, sel_2418, sel_2419, sel_2420, sel_2421,
       sel_2422, sel_2423, sel_2424, sel_2425, sel_2426, sel_2431, sel_2432,
       sel_2433, sel_2_479) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5662_sel_2 = sel_2432;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5662_sel_2 = sel_2431;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5662_sel_2 = sel_2_479;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5662_sel_2 = sel_2426;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5662_sel_2 = sel_2425;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5662_sel_2 = sel_2424;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5662_sel_2 = sel_2423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5662_sel_2 = sel_2422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5662_sel_2 = sel_2421;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5662_sel_2 = sel_2420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5662_sel_2 = sel_2419;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5662_sel_2 = sel_2418;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5662_sel_2 = sel_2417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5662_sel_2 = sel_2416;
        end
      default :
        begin
          p5662_sel_2 = sel_2433;
        end
    endcase
    sel_2_480 = p5662_sel_2;
  end

  always @* begin
    p5661cont_bits_22_cont_bits_22[7] = cont_bits_22_7[7];
    if (sel_2_480) begin
      p5661cont_bits_22_cont_bits_22[7] = tmp_183;
    end
    cont_bits_22_8[0] = cont_bits_22_7[0];
    cont_bits_22_8[1] = cont_bits_22_7[1];
    cont_bits_22_8[2] = cont_bits_22_7[2];
    cont_bits_22_8[3] = cont_bits_22_7[3];
    cont_bits_22_8[4] = cont_bits_22_7[4];
    cont_bits_22_8[5] = cont_bits_22_7[5];
    cont_bits_22_8[6] = cont_bits_22_7[6];
    cont_bits_22_8[7] = p5661cont_bits_22_cont_bits_22[7];
    cont_bits_22_8[8] = cont_bits_22_7[8];
    cont_bits_22_8[9] = cont_bits_22_7[9];
    cont_bits_22_8[10] = cont_bits_22_7[10];
    cont_bits_22_8[11] = cont_bits_22_7[11];
  end

  assign sel_2434 = 32'sd0;

  assign sel_2435 = 32'sd0;

  assign sel_2436 = 32'sd0;

  assign sel_2437 = 32'sd0;

  assign sel_2438 = 32'sd0;

  assign sel_2439 = 32'sd0;

  assign sel_2440 = 32'sd0;

  assign sel_2441 = 32'sd0;

  assign sel_2442 = 32'sd0;

  assign sel_2443 = 32'sd0;

  assign sel_2444 = 32'sd0;

  assign sel_2445 = 32'sd0;

  assign s_208 = 32'sd8;

  assign sel_1_449 = (s_17 == 1'b0 ? sel_2445 :
              s_208);

  assign sel_2446 = 32'sd0;

  assign sel_1_450 = (s_18 == 1'b0 ? sel_1_449 :
              sel_2446);

  assign sel_2447 = 32'sd0;

  assign sel_1_451 = (s_19 == 1'b0 ? sel_1_450 :
              sel_2447);

  assign sel_2448 = 32'sd0;

  assign sel_1_452 = (s_20 == 1'b0 ? sel_1_451 :
              sel_2448);

  assign sel_2449 = 32'sd0;

  assign sel_2450 = 32'sd0;

  assign sel_2451 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_452, sel_2434, sel_2435, sel_2436, sel_2437, sel_2438,
       sel_2439, sel_2440, sel_2441, sel_2442, sel_2443, sel_2444, sel_2449,
       sel_2450, sel_2451) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10441_sel_1 = sel_2450;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10441_sel_1 = sel_2449;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10441_sel_1 = sel_1_452;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10441_sel_1 = sel_2444;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10441_sel_1 = sel_2443;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10441_sel_1 = sel_2442;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10441_sel_1 = sel_2441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10441_sel_1 = sel_2440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10441_sel_1 = sel_2439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10441_sel_1 = sel_2438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10441_sel_1 = sel_2437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10441_sel_1 = sel_2436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10441_sel_1 = sel_2435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10441_sel_1 = sel_2434;
        end
      default :
        begin
          p10441_sel_1 = sel_2451;
        end
    endcase
    sel_1_453 = p10441_sel_1;
  end

  assign tmp_184 = functionOutput_15[sel_1_453];

  assign sel_2452 = 1'b0;

  assign sel_2453 = 1'b0;

  assign sel_2454 = 1'b0;

  assign sel_2455 = 1'b0;

  assign sel_2456 = 1'b0;

  assign sel_2457 = 1'b0;

  assign sel_2458 = 1'b0;

  assign sel_2459 = 1'b0;

  assign sel_2460 = 1'b0;

  assign sel_2461 = 1'b0;

  assign sel_2462 = 1'b0;

  assign sel_2463 = 1'b0;

  assign s_209 = 1'b1;

  assign sel_2_481 = (s_17 == 1'b0 ? sel_2463 :
              s_209);

  assign sel_2464 = 1'b0;

  assign sel_2_482 = (s_18 == 1'b0 ? sel_2_481 :
              sel_2464);

  assign sel_2465 = 1'b0;

  assign sel_2_483 = (s_19 == 1'b0 ? sel_2_482 :
              sel_2465);

  assign sel_2466 = 1'b0;

  assign sel_2_484 = (s_20 == 1'b0 ? sel_2_483 :
              sel_2466);

  assign sel_2467 = 1'b0;

  assign sel_2468 = 1'b0;

  assign sel_2469 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2452, sel_2453, sel_2454, sel_2455, sel_2456, sel_2457,
       sel_2458, sel_2459, sel_2460, sel_2461, sel_2462, sel_2467, sel_2468,
       sel_2469, sel_2_484) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5210_sel_2 = sel_2468;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5210_sel_2 = sel_2467;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5210_sel_2 = sel_2_484;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5210_sel_2 = sel_2462;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5210_sel_2 = sel_2461;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5210_sel_2 = sel_2460;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5210_sel_2 = sel_2459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5210_sel_2 = sel_2458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5210_sel_2 = sel_2457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5210_sel_2 = sel_2456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5210_sel_2 = sel_2455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5210_sel_2 = sel_2454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5210_sel_2 = sel_2453;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5210_sel_2 = sel_2452;
        end
      default :
        begin
          p5210_sel_2 = sel_2469;
        end
    endcase
    sel_2_485 = p5210_sel_2;
  end

  always @* begin
    p5209cont_bits_22_cont_bits_22[8] = cont_bits_22_8[8];
    if (sel_2_485) begin
      p5209cont_bits_22_cont_bits_22[8] = tmp_184;
    end
    cont_bits_22_9[0] = cont_bits_22_8[0];
    cont_bits_22_9[1] = cont_bits_22_8[1];
    cont_bits_22_9[2] = cont_bits_22_8[2];
    cont_bits_22_9[3] = cont_bits_22_8[3];
    cont_bits_22_9[4] = cont_bits_22_8[4];
    cont_bits_22_9[5] = cont_bits_22_8[5];
    cont_bits_22_9[6] = cont_bits_22_8[6];
    cont_bits_22_9[7] = cont_bits_22_8[7];
    cont_bits_22_9[8] = p5209cont_bits_22_cont_bits_22[8];
    cont_bits_22_9[9] = cont_bits_22_8[9];
    cont_bits_22_9[10] = cont_bits_22_8[10];
    cont_bits_22_9[11] = cont_bits_22_8[11];
  end

  assign sel_2470 = 32'sd0;

  assign sel_2471 = 32'sd0;

  assign sel_2472 = 32'sd0;

  assign sel_2473 = 32'sd0;

  assign sel_2474 = 32'sd0;

  assign sel_2475 = 32'sd0;

  assign sel_2476 = 32'sd0;

  assign sel_2477 = 32'sd0;

  assign sel_2478 = 32'sd0;

  assign sel_2479 = 32'sd0;

  assign sel_2480 = 32'sd0;

  assign sel_2481 = 32'sd0;

  assign s_210 = 32'sd9;

  assign sel_1_454 = (s_17 == 1'b0 ? sel_2481 :
              s_210);

  assign sel_2482 = 32'sd0;

  assign sel_1_455 = (s_18 == 1'b0 ? sel_1_454 :
              sel_2482);

  assign sel_2483 = 32'sd0;

  assign sel_1_456 = (s_19 == 1'b0 ? sel_1_455 :
              sel_2483);

  assign sel_2484 = 32'sd0;

  assign sel_1_457 = (s_20 == 1'b0 ? sel_1_456 :
              sel_2484);

  assign sel_2485 = 32'sd0;

  assign sel_2486 = 32'sd0;

  assign sel_2487 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_457, sel_2470, sel_2471, sel_2472, sel_2473, sel_2474,
       sel_2475, sel_2476, sel_2477, sel_2478, sel_2479, sel_2480, sel_2485,
       sel_2486, sel_2487) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11121_sel_1 = sel_2486;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11121_sel_1 = sel_2485;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11121_sel_1 = sel_1_457;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11121_sel_1 = sel_2480;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11121_sel_1 = sel_2479;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11121_sel_1 = sel_2478;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11121_sel_1 = sel_2477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11121_sel_1 = sel_2476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11121_sel_1 = sel_2475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11121_sel_1 = sel_2474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11121_sel_1 = sel_2473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11121_sel_1 = sel_2472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11121_sel_1 = sel_2471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11121_sel_1 = sel_2470;
        end
      default :
        begin
          p11121_sel_1 = sel_2487;
        end
    endcase
    sel_1_458 = p11121_sel_1;
  end

  assign tmp_185 = functionOutput_15[sel_1_458];

  assign sel_2488 = 1'b0;

  assign sel_2489 = 1'b0;

  assign sel_2490 = 1'b0;

  assign sel_2491 = 1'b0;

  assign sel_2492 = 1'b0;

  assign sel_2493 = 1'b0;

  assign sel_2494 = 1'b0;

  assign sel_2495 = 1'b0;

  assign sel_2496 = 1'b0;

  assign sel_2497 = 1'b0;

  assign sel_2498 = 1'b0;

  assign sel_2499 = 1'b0;

  assign s_211 = 1'b1;

  assign sel_2_486 = (s_17 == 1'b0 ? sel_2499 :
              s_211);

  assign sel_2500 = 1'b0;

  assign sel_2_487 = (s_18 == 1'b0 ? sel_2_486 :
              sel_2500);

  assign sel_2501 = 1'b0;

  assign sel_2_488 = (s_19 == 1'b0 ? sel_2_487 :
              sel_2501);

  assign sel_2502 = 1'b0;

  assign sel_2_489 = (s_20 == 1'b0 ? sel_2_488 :
              sel_2502);

  assign sel_2503 = 1'b0;

  assign sel_2504 = 1'b0;

  assign sel_2505 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2488, sel_2489, sel_2490, sel_2491, sel_2492, sel_2493,
       sel_2494, sel_2495, sel_2496, sel_2497, sel_2498, sel_2503, sel_2504,
       sel_2505, sel_2_489) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5056_sel_2 = sel_2504;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5056_sel_2 = sel_2503;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5056_sel_2 = sel_2_489;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5056_sel_2 = sel_2498;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5056_sel_2 = sel_2497;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5056_sel_2 = sel_2496;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5056_sel_2 = sel_2495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5056_sel_2 = sel_2494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5056_sel_2 = sel_2493;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5056_sel_2 = sel_2492;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5056_sel_2 = sel_2491;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5056_sel_2 = sel_2490;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5056_sel_2 = sel_2489;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5056_sel_2 = sel_2488;
        end
      default :
        begin
          p5056_sel_2 = sel_2505;
        end
    endcase
    sel_2_490 = p5056_sel_2;
  end

  always @* begin
    p5055cont_bits_22_cont_bits_22[9] = cont_bits_22_9[9];
    if (sel_2_490) begin
      p5055cont_bits_22_cont_bits_22[9] = tmp_185;
    end
    cont_bits_22_10[0] = cont_bits_22_9[0];
    cont_bits_22_10[1] = cont_bits_22_9[1];
    cont_bits_22_10[2] = cont_bits_22_9[2];
    cont_bits_22_10[3] = cont_bits_22_9[3];
    cont_bits_22_10[4] = cont_bits_22_9[4];
    cont_bits_22_10[5] = cont_bits_22_9[5];
    cont_bits_22_10[6] = cont_bits_22_9[6];
    cont_bits_22_10[7] = cont_bits_22_9[7];
    cont_bits_22_10[8] = cont_bits_22_9[8];
    cont_bits_22_10[9] = p5055cont_bits_22_cont_bits_22[9];
    cont_bits_22_10[10] = cont_bits_22_9[10];
    cont_bits_22_10[11] = cont_bits_22_9[11];
  end

  assign sel_2506 = 32'sd0;

  assign sel_2507 = 32'sd0;

  assign sel_2508 = 32'sd0;

  assign sel_2509 = 32'sd0;

  assign sel_2510 = 32'sd0;

  assign sel_2511 = 32'sd0;

  assign sel_2512 = 32'sd0;

  assign sel_2513 = 32'sd0;

  assign sel_2514 = 32'sd0;

  assign sel_2515 = 32'sd0;

  assign sel_2516 = 32'sd0;

  assign sel_2517 = 32'sd0;

  assign s_212 = 32'sd10;

  assign sel_1_459 = (s_17 == 1'b0 ? sel_2517 :
              s_212);

  assign sel_2518 = 32'sd0;

  assign sel_1_460 = (s_18 == 1'b0 ? sel_1_459 :
              sel_2518);

  assign sel_2519 = 32'sd0;

  assign sel_1_461 = (s_19 == 1'b0 ? sel_1_460 :
              sel_2519);

  assign sel_2520 = 32'sd0;

  assign sel_1_462 = (s_20 == 1'b0 ? sel_1_461 :
              sel_2520);

  assign sel_2521 = 32'sd0;

  assign sel_2522 = 32'sd0;

  assign sel_2523 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_462, sel_2506, sel_2507, sel_2508, sel_2509, sel_2510,
       sel_2511, sel_2512, sel_2513, sel_2514, sel_2515, sel_2516, sel_2521,
       sel_2522, sel_2523) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10475_sel_1 = sel_2522;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10475_sel_1 = sel_2521;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10475_sel_1 = sel_1_462;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10475_sel_1 = sel_2516;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10475_sel_1 = sel_2515;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10475_sel_1 = sel_2514;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10475_sel_1 = sel_2513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10475_sel_1 = sel_2512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10475_sel_1 = sel_2511;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10475_sel_1 = sel_2510;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10475_sel_1 = sel_2509;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10475_sel_1 = sel_2508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10475_sel_1 = sel_2507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10475_sel_1 = sel_2506;
        end
      default :
        begin
          p10475_sel_1 = sel_2523;
        end
    endcase
    sel_1_463 = p10475_sel_1;
  end

  assign tmp_186 = functionOutput_15[sel_1_463];

  assign sel_2524 = 1'b0;

  assign sel_2525 = 1'b0;

  assign sel_2526 = 1'b0;

  assign sel_2527 = 1'b0;

  assign sel_2528 = 1'b0;

  assign sel_2529 = 1'b0;

  assign sel_2530 = 1'b0;

  assign sel_2531 = 1'b0;

  assign sel_2532 = 1'b0;

  assign sel_2533 = 1'b0;

  assign sel_2534 = 1'b0;

  assign sel_2535 = 1'b0;

  assign s_213 = 1'b1;

  assign sel_2_491 = (s_17 == 1'b0 ? sel_2535 :
              s_213);

  assign sel_2536 = 1'b0;

  assign sel_2_492 = (s_18 == 1'b0 ? sel_2_491 :
              sel_2536);

  assign sel_2537 = 1'b0;

  assign sel_2_493 = (s_19 == 1'b0 ? sel_2_492 :
              sel_2537);

  assign sel_2538 = 1'b0;

  assign sel_2_494 = (s_20 == 1'b0 ? sel_2_493 :
              sel_2538);

  assign sel_2539 = 1'b0;

  assign sel_2540 = 1'b0;

  assign sel_2541 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2524, sel_2525, sel_2526, sel_2527, sel_2528, sel_2529,
       sel_2530, sel_2531, sel_2532, sel_2533, sel_2534, sel_2539, sel_2540,
       sel_2541, sel_2_494) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4604_sel_2 = sel_2540;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4604_sel_2 = sel_2539;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4604_sel_2 = sel_2_494;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4604_sel_2 = sel_2534;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4604_sel_2 = sel_2533;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4604_sel_2 = sel_2532;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4604_sel_2 = sel_2531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4604_sel_2 = sel_2530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4604_sel_2 = sel_2529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4604_sel_2 = sel_2528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4604_sel_2 = sel_2527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4604_sel_2 = sel_2526;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4604_sel_2 = sel_2525;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4604_sel_2 = sel_2524;
        end
      default :
        begin
          p4604_sel_2 = sel_2541;
        end
    endcase
    sel_2_495 = p4604_sel_2;
  end

  always @* begin
    p4603cont_bits_22_cont_bits_22[10] = cont_bits_22_10[10];
    if (sel_2_495) begin
      p4603cont_bits_22_cont_bits_22[10] = tmp_186;
    end
    cont_bits_22_11[0] = cont_bits_22_10[0];
    cont_bits_22_11[1] = cont_bits_22_10[1];
    cont_bits_22_11[2] = cont_bits_22_10[2];
    cont_bits_22_11[3] = cont_bits_22_10[3];
    cont_bits_22_11[4] = cont_bits_22_10[4];
    cont_bits_22_11[5] = cont_bits_22_10[5];
    cont_bits_22_11[6] = cont_bits_22_10[6];
    cont_bits_22_11[7] = cont_bits_22_10[7];
    cont_bits_22_11[8] = cont_bits_22_10[8];
    cont_bits_22_11[9] = cont_bits_22_10[9];
    cont_bits_22_11[10] = p4603cont_bits_22_cont_bits_22[10];
    cont_bits_22_11[11] = cont_bits_22_10[11];
  end

  assign sel_2542 = 32'sd0;

  assign sel_2543 = 32'sd0;

  assign sel_2544 = 32'sd0;

  assign sel_2545 = 32'sd0;

  assign sel_2546 = 32'sd0;

  assign sel_2547 = 32'sd0;

  assign sel_2548 = 32'sd0;

  assign sel_2549 = 32'sd0;

  assign sel_2550 = 32'sd0;

  assign sel_2551 = 32'sd0;

  assign sel_2552 = 32'sd0;

  assign sel_2553 = 32'sd0;

  assign s_214 = 32'sd11;

  assign sel_1_464 = (s_17 == 1'b0 ? sel_2553 :
              s_214);

  assign sel_2554 = 32'sd0;

  assign sel_1_465 = (s_18 == 1'b0 ? sel_1_464 :
              sel_2554);

  assign sel_2555 = 32'sd0;

  assign sel_1_466 = (s_19 == 1'b0 ? sel_1_465 :
              sel_2555);

  assign sel_2556 = 32'sd0;

  assign sel_1_467 = (s_20 == 1'b0 ? sel_1_466 :
              sel_2556);

  assign sel_2557 = 32'sd0;

  assign sel_2558 = 32'sd0;

  assign sel_2559 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_467, sel_2542, sel_2543, sel_2544, sel_2545, sel_2546,
       sel_2547, sel_2548, sel_2549, sel_2550, sel_2551, sel_2552, sel_2557,
       sel_2558, sel_2559) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11274_sel_1 = sel_2558;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11274_sel_1 = sel_2557;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11274_sel_1 = sel_1_467;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11274_sel_1 = sel_2552;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11274_sel_1 = sel_2551;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11274_sel_1 = sel_2550;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11274_sel_1 = sel_2549;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11274_sel_1 = sel_2548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11274_sel_1 = sel_2547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11274_sel_1 = sel_2546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11274_sel_1 = sel_2545;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11274_sel_1 = sel_2544;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11274_sel_1 = sel_2543;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11274_sel_1 = sel_2542;
        end
      default :
        begin
          p11274_sel_1 = sel_2559;
        end
    endcase
    sel_1_468 = p11274_sel_1;
  end

  assign tmp_187 = functionOutput_15[sel_1_468];

  assign sel_2560 = 1'b0;

  assign sel_2561 = 1'b0;

  assign sel_2562 = 1'b0;

  assign sel_2563 = 1'b0;

  assign sel_2564 = 1'b0;

  assign sel_2565 = 1'b0;

  assign sel_2566 = 1'b0;

  assign sel_2567 = 1'b0;

  assign sel_2568 = 1'b0;

  assign sel_2569 = 1'b0;

  assign sel_2570 = 1'b0;

  assign sel_2571 = 1'b0;

  assign s_215 = 1'b1;

  assign sel_2_496 = (s_17 == 1'b0 ? sel_2571 :
              s_215);

  assign sel_2572 = 1'b0;

  assign sel_2_497 = (s_18 == 1'b0 ? sel_2_496 :
              sel_2572);

  assign sel_2573 = 1'b0;

  assign sel_2_498 = (s_19 == 1'b0 ? sel_2_497 :
              sel_2573);

  assign sel_2574 = 1'b0;

  assign sel_2_499 = (s_20 == 1'b0 ? sel_2_498 :
              sel_2574);

  assign sel_2575 = 1'b0;

  assign sel_2576 = 1'b0;

  assign sel_2577 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2560, sel_2561, sel_2562, sel_2563, sel_2564, sel_2565,
       sel_2566, sel_2567, sel_2568, sel_2569, sel_2570, sel_2575, sel_2576,
       sel_2577, sel_2_499) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4450_sel_2 = sel_2576;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4450_sel_2 = sel_2575;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4450_sel_2 = sel_2_499;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4450_sel_2 = sel_2570;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4450_sel_2 = sel_2569;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4450_sel_2 = sel_2568;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4450_sel_2 = sel_2567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4450_sel_2 = sel_2566;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4450_sel_2 = sel_2565;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4450_sel_2 = sel_2564;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4450_sel_2 = sel_2563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4450_sel_2 = sel_2562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4450_sel_2 = sel_2561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4450_sel_2 = sel_2560;
        end
      default :
        begin
          p4450_sel_2 = sel_2577;
        end
    endcase
    sel_2_500 = p4450_sel_2;
  end

  always @* begin
    p4449cont_bits_22_cont_bits_22[11] = cont_bits_22_11[11];
    if (sel_2_500) begin
      p4449cont_bits_22_cont_bits_22[11] = tmp_187;
    end
    cont_bits_22_12[0] = cont_bits_22_11[0];
    cont_bits_22_12[1] = cont_bits_22_11[1];
    cont_bits_22_12[2] = cont_bits_22_11[2];
    cont_bits_22_12[3] = cont_bits_22_11[3];
    cont_bits_22_12[4] = cont_bits_22_11[4];
    cont_bits_22_12[5] = cont_bits_22_11[5];
    cont_bits_22_12[6] = cont_bits_22_11[6];
    cont_bits_22_12[7] = cont_bits_22_11[7];
    cont_bits_22_12[8] = cont_bits_22_11[8];
    cont_bits_22_12[9] = cont_bits_22_11[9];
    cont_bits_22_12[10] = cont_bits_22_11[10];
    cont_bits_22_12[11] = p4449cont_bits_22_cont_bits_22[11];
  end

  assign sel_2578 = 32'sd0;

  assign sel_2579 = 32'sd0;

  assign sel_2580 = 32'sd0;

  assign sel_2581 = 32'sd0;

  assign sel_2582 = 32'sd0;

  assign sel_2583 = 32'sd0;

  assign sel_2584 = 32'sd0;

  assign sel_2585 = 32'sd0;

  assign sel_2586 = 32'sd0;

  assign sel_2587 = 32'sd0;

  assign sel_2588 = 32'sd0;

  assign sel_2589 = 32'sd0;

  assign s_216 = 32'sd0;

  assign sel_1_469 = (s_17 == 1'b0 ? sel_2589 :
              s_216);

  assign sel_2590 = 32'sd0;

  assign sel_1_470 = (s_18 == 1'b0 ? sel_1_469 :
              sel_2590);

  assign sel_2591 = 32'sd0;

  assign sel_1_471 = (s_19 == 1'b0 ? sel_1_470 :
              sel_2591);

  assign sel_2592 = 32'sd0;

  assign sel_1_472 = (s_20 == 1'b0 ? sel_1_471 :
              sel_2592);

  assign sel_2593 = 32'sd0;

  assign sel_2594 = 32'sd0;

  assign sel_2595 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_472, sel_2578, sel_2579, sel_2580, sel_2581, sel_2582,
       sel_2583, sel_2584, sel_2585, sel_2586, sel_2587, sel_2588, sel_2593,
       sel_2594, sel_2595) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1971_sel_1 = sel_2594;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1971_sel_1 = sel_2593;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1971_sel_1 = sel_1_472;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1971_sel_1 = sel_2588;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1971_sel_1 = sel_2587;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1971_sel_1 = sel_2586;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1971_sel_1 = sel_2585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1971_sel_1 = sel_2584;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1971_sel_1 = sel_2583;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1971_sel_1 = sel_2582;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1971_sel_1 = sel_2581;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1971_sel_1 = sel_2580;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1971_sel_1 = sel_2579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1971_sel_1 = sel_2578;
        end
      default :
        begin
          p1971_sel_1 = sel_2595;
        end
    endcase
    sel_1_473 = p1971_sel_1;
  end

  assign cont_bits_22_13 = cont_bits_22_12[sel_1_473];

  assign sel_1_474 = (s_17 == 1'b0 ? sel_1_408 :
              cont_bits_22_13);

  assign cont_bits_21[0] = 1'b0;
  assign cont_bits_21[1] = 1'b0;
  assign cont_bits_21[2] = 1'b0;
  assign cont_bits_21[3] = 1'b0;
  assign cont_bits_21[4] = 1'b0;
  assign cont_bits_21[5] = 1'b0;
  assign cont_bits_21[6] = 1'b0;
  assign cont_bits_21[7] = 1'b0;
  assign cont_bits_21[8] = 1'b0;
  assign cont_bits_21[9] = 1'b0;
  assign cont_bits_21[10] = 1'b0;
  assign cont_bits_21[11] = 1'b0;

  assign tmp_188 = (s_13 == 1'b0 ? v2_1 :
              r_v21);

  assign tmp_189 = (s_14 == 1'b0 ? tmp_188 :
              r_v21);

  assign tmp_190 = (s_15 == 1'b0 ? tmp_189 :
              r_v21);

  assign tmp_191 = (s_16 == 1'b0 ? tmp_190 :
              r_v21);

  assign tmp_192 = (s_17 == 1'b0 ? tmp_191 :
              r_v21);

  assign tmp_193 = (s_18 == 1'b0 ? tmp_192 :
              r_v21);

  assign tmp_194 = (s_19 == 1'b0 ? tmp_193 :
              r_v21);

  assign tmp_195 = (s_20 == 1'b0 ? tmp_194 :
              r_v21);

  always @(is_SPI_MNGR_36, r_v21, tmp_195, v2_1) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p63_tmp = tmp_195;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p63_tmp = v2_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p63_tmp = r_v21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p63_tmp = r_v21;
        end
      default :
        begin
          p63_tmp = r_v21;
        end
    endcase
    tmp_196 = p63_tmp;
  end

  always @(posedge clk)
    begin : r_v21_reg_process
      if (rst == 1'b1) begin
        r_v21 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v21 <= tmp_196;
        end
      end
    end

  simfcn1 u_simfcn1_5 (.vx(r_v21),  // uint16
                       .cont_bits2_0(functionOutput_0_5),  // boolean
                       .cont_bits2_1(functionOutput_1_5),  // boolean
                       .cont_bits2_2(functionOutput_2_5),  // boolean
                       .cont_bits2_3(functionOutput_3_5),  // boolean
                       .cont_bits2_4(functionOutput_4_5),  // boolean
                       .cont_bits2_5(functionOutput_5_5),  // boolean
                       .cont_bits2_6(functionOutput_6_5),  // boolean
                       .cont_bits2_7(functionOutput_7_5),  // boolean
                       .cont_bits2_8(functionOutput_8_5),  // boolean
                       .cont_bits2_9(functionOutput_9_5),  // boolean
                       .cont_bits2_10(functionOutput_10_5),  // boolean
                       .cont_bits2_11(functionOutput_11_5)  // boolean
                       );

  assign functionOutput_16[0] = functionOutput_0_5;
  assign functionOutput_16[1] = functionOutput_1_5;
  assign functionOutput_16[2] = functionOutput_2_5;
  assign functionOutput_16[3] = functionOutput_3_5;
  assign functionOutput_16[4] = functionOutput_4_5;
  assign functionOutput_16[5] = functionOutput_5_5;
  assign functionOutput_16[6] = functionOutput_6_5;
  assign functionOutput_16[7] = functionOutput_7_5;
  assign functionOutput_16[8] = functionOutput_8_5;
  assign functionOutput_16[9] = functionOutput_9_5;
  assign functionOutput_16[10] = functionOutput_10_5;
  assign functionOutput_16[11] = functionOutput_11_5;

  assign sel_2596 = 32'sd0;

  assign sel_2597 = 32'sd0;

  assign sel_2598 = 32'sd0;

  assign sel_2599 = 32'sd0;

  assign sel_2600 = 32'sd0;

  assign sel_2601 = 32'sd0;

  assign sel_2602 = 32'sd0;

  assign sel_2603 = 32'sd0;

  assign sel_2604 = 32'sd0;

  assign sel_2605 = 32'sd0;

  assign sel_2606 = 32'sd0;

  assign sel_2607 = 32'sd0;

  assign s_217 = 32'sd0;

  assign sel_1_475 = (s_18 == 1'b0 ? sel_2607 :
              s_217);

  assign sel_2608 = 32'sd0;

  assign sel_1_476 = (s_19 == 1'b0 ? sel_1_475 :
              sel_2608);

  assign sel_2609 = 32'sd0;

  assign sel_1_477 = (s_20 == 1'b0 ? sel_1_476 :
              sel_2609);

  assign sel_2610 = 32'sd0;

  assign sel_2611 = 32'sd0;

  assign sel_2612 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_477, sel_2596, sel_2597, sel_2598, sel_2599, sel_2600,
       sel_2601, sel_2602, sel_2603, sel_2604, sel_2605, sel_2606, sel_2610,
       sel_2611, sel_2612) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10101_sel_1 = sel_2611;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10101_sel_1 = sel_2610;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10101_sel_1 = sel_1_477;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10101_sel_1 = sel_2606;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10101_sel_1 = sel_2605;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10101_sel_1 = sel_2604;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10101_sel_1 = sel_2603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10101_sel_1 = sel_2602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10101_sel_1 = sel_2601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10101_sel_1 = sel_2600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10101_sel_1 = sel_2599;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10101_sel_1 = sel_2598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10101_sel_1 = sel_2597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10101_sel_1 = sel_2596;
        end
      default :
        begin
          p10101_sel_1 = sel_2612;
        end
    endcase
    sel_1_478 = p10101_sel_1;
  end

  assign tmp_197 = functionOutput_16[sel_1_478];

  assign sel_2613 = 1'b0;

  assign sel_2614 = 1'b0;

  assign sel_2615 = 1'b0;

  assign sel_2616 = 1'b0;

  assign sel_2617 = 1'b0;

  assign sel_2618 = 1'b0;

  assign sel_2619 = 1'b0;

  assign sel_2620 = 1'b0;

  assign sel_2621 = 1'b0;

  assign sel_2622 = 1'b0;

  assign sel_2623 = 1'b0;

  assign sel_2624 = 1'b0;

  assign s_218 = 1'b1;

  assign sel_2_501 = (s_18 == 1'b0 ? sel_2624 :
              s_218);

  assign sel_2625 = 1'b0;

  assign sel_2_502 = (s_19 == 1'b0 ? sel_2_501 :
              sel_2625);

  assign sel_2626 = 1'b0;

  assign sel_2_503 = (s_20 == 1'b0 ? sel_2_502 :
              sel_2626);

  assign sel_2627 = 1'b0;

  assign sel_2628 = 1'b0;

  assign sel_2629 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2613, sel_2614, sel_2615, sel_2616, sel_2617, sel_2618,
       sel_2619, sel_2620, sel_2621, sel_2622, sel_2623, sel_2627, sel_2628,
       sel_2629, sel_2_503) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7718_sel_2 = sel_2628;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7718_sel_2 = sel_2627;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7718_sel_2 = sel_2_503;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7718_sel_2 = sel_2623;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7718_sel_2 = sel_2622;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7718_sel_2 = sel_2621;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7718_sel_2 = sel_2620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7718_sel_2 = sel_2619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7718_sel_2 = sel_2618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7718_sel_2 = sel_2617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7718_sel_2 = sel_2616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7718_sel_2 = sel_2615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7718_sel_2 = sel_2614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7718_sel_2 = sel_2613;
        end
      default :
        begin
          p7718_sel_2 = sel_2629;
        end
    endcase
    sel_2_504 = p7718_sel_2;
  end

  always @* begin
    p7717cont_bits_21_cont_bits_21[0] = cont_bits_21[0];
    if (sel_2_504) begin
      p7717cont_bits_21_cont_bits_21[0] = tmp_197;
    end
    cont_bits_21_1[0] = p7717cont_bits_21_cont_bits_21[0];
    cont_bits_21_1[1] = cont_bits_21[1];
    cont_bits_21_1[2] = cont_bits_21[2];
    cont_bits_21_1[3] = cont_bits_21[3];
    cont_bits_21_1[4] = cont_bits_21[4];
    cont_bits_21_1[5] = cont_bits_21[5];
    cont_bits_21_1[6] = cont_bits_21[6];
    cont_bits_21_1[7] = cont_bits_21[7];
    cont_bits_21_1[8] = cont_bits_21[8];
    cont_bits_21_1[9] = cont_bits_21[9];
    cont_bits_21_1[10] = cont_bits_21[10];
    cont_bits_21_1[11] = cont_bits_21[11];
  end

  assign sel_2630 = 32'sd0;

  assign sel_2631 = 32'sd0;

  assign sel_2632 = 32'sd0;

  assign sel_2633 = 32'sd0;

  assign sel_2634 = 32'sd0;

  assign sel_2635 = 32'sd0;

  assign sel_2636 = 32'sd0;

  assign sel_2637 = 32'sd0;

  assign sel_2638 = 32'sd0;

  assign sel_2639 = 32'sd0;

  assign sel_2640 = 32'sd0;

  assign sel_2641 = 32'sd0;

  assign s_219 = 32'sd1;

  assign sel_1_479 = (s_18 == 1'b0 ? sel_2641 :
              s_219);

  assign sel_2642 = 32'sd0;

  assign sel_1_480 = (s_19 == 1'b0 ? sel_1_479 :
              sel_2642);

  assign sel_2643 = 32'sd0;

  assign sel_1_481 = (s_20 == 1'b0 ? sel_1_480 :
              sel_2643);

  assign sel_2644 = 32'sd0;

  assign sel_2645 = 32'sd0;

  assign sel_2646 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_481, sel_2630, sel_2631, sel_2632, sel_2633, sel_2634,
       sel_2635, sel_2636, sel_2637, sel_2638, sel_2639, sel_2640, sel_2644,
       sel_2645, sel_2646) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10883_sel_1 = sel_2645;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10883_sel_1 = sel_2644;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10883_sel_1 = sel_1_481;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10883_sel_1 = sel_2640;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10883_sel_1 = sel_2639;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10883_sel_1 = sel_2638;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10883_sel_1 = sel_2637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10883_sel_1 = sel_2636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10883_sel_1 = sel_2635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10883_sel_1 = sel_2634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10883_sel_1 = sel_2633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10883_sel_1 = sel_2632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10883_sel_1 = sel_2631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10883_sel_1 = sel_2630;
        end
      default :
        begin
          p10883_sel_1 = sel_2646;
        end
    endcase
    sel_1_482 = p10883_sel_1;
  end

  assign tmp_198 = functionOutput_16[sel_1_482];

  assign sel_2647 = 1'b0;

  assign sel_2648 = 1'b0;

  assign sel_2649 = 1'b0;

  assign sel_2650 = 1'b0;

  assign sel_2651 = 1'b0;

  assign sel_2652 = 1'b0;

  assign sel_2653 = 1'b0;

  assign sel_2654 = 1'b0;

  assign sel_2655 = 1'b0;

  assign sel_2656 = 1'b0;

  assign sel_2657 = 1'b0;

  assign sel_2658 = 1'b0;

  assign s_220 = 1'b1;

  assign sel_2_505 = (s_18 == 1'b0 ? sel_2658 :
              s_220);

  assign sel_2659 = 1'b0;

  assign sel_2_506 = (s_19 == 1'b0 ? sel_2_505 :
              sel_2659);

  assign sel_2660 = 1'b0;

  assign sel_2_507 = (s_20 == 1'b0 ? sel_2_506 :
              sel_2660);

  assign sel_2661 = 1'b0;

  assign sel_2662 = 1'b0;

  assign sel_2663 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2647, sel_2648, sel_2649, sel_2650, sel_2651, sel_2652,
       sel_2653, sel_2654, sel_2655, sel_2656, sel_2657, sel_2661, sel_2662,
       sel_2663, sel_2_507) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7461_sel_2 = sel_2662;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7461_sel_2 = sel_2661;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7461_sel_2 = sel_2_507;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7461_sel_2 = sel_2657;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7461_sel_2 = sel_2656;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7461_sel_2 = sel_2655;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7461_sel_2 = sel_2654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7461_sel_2 = sel_2653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7461_sel_2 = sel_2652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7461_sel_2 = sel_2651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7461_sel_2 = sel_2650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7461_sel_2 = sel_2649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7461_sel_2 = sel_2648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7461_sel_2 = sel_2647;
        end
      default :
        begin
          p7461_sel_2 = sel_2663;
        end
    endcase
    sel_2_508 = p7461_sel_2;
  end

  always @* begin
    p7460cont_bits_21_cont_bits_21[1] = cont_bits_21_1[1];
    if (sel_2_508) begin
      p7460cont_bits_21_cont_bits_21[1] = tmp_198;
    end
    cont_bits_21_2[0] = cont_bits_21_1[0];
    cont_bits_21_2[1] = p7460cont_bits_21_cont_bits_21[1];
    cont_bits_21_2[2] = cont_bits_21_1[2];
    cont_bits_21_2[3] = cont_bits_21_1[3];
    cont_bits_21_2[4] = cont_bits_21_1[4];
    cont_bits_21_2[5] = cont_bits_21_1[5];
    cont_bits_21_2[6] = cont_bits_21_1[6];
    cont_bits_21_2[7] = cont_bits_21_1[7];
    cont_bits_21_2[8] = cont_bits_21_1[8];
    cont_bits_21_2[9] = cont_bits_21_1[9];
    cont_bits_21_2[10] = cont_bits_21_1[10];
    cont_bits_21_2[11] = cont_bits_21_1[11];
  end

  assign sel_2664 = 32'sd0;

  assign sel_2665 = 32'sd0;

  assign sel_2666 = 32'sd0;

  assign sel_2667 = 32'sd0;

  assign sel_2668 = 32'sd0;

  assign sel_2669 = 32'sd0;

  assign sel_2670 = 32'sd0;

  assign sel_2671 = 32'sd0;

  assign sel_2672 = 32'sd0;

  assign sel_2673 = 32'sd0;

  assign sel_2674 = 32'sd0;

  assign sel_2675 = 32'sd0;

  assign s_221 = 32'sd2;

  assign sel_1_483 = (s_18 == 1'b0 ? sel_2675 :
              s_221);

  assign sel_2676 = 32'sd0;

  assign sel_1_484 = (s_19 == 1'b0 ? sel_1_483 :
              sel_2676);

  assign sel_2677 = 32'sd0;

  assign sel_1_485 = (s_20 == 1'b0 ? sel_1_484 :
              sel_2677);

  assign sel_2678 = 32'sd0;

  assign sel_2679 = 32'sd0;

  assign sel_2680 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_485, sel_2664, sel_2665, sel_2666, sel_2667, sel_2668,
       sel_2669, sel_2670, sel_2671, sel_2672, sel_2673, sel_2674, sel_2678,
       sel_2679, sel_2680) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10526_sel_1 = sel_2679;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10526_sel_1 = sel_2678;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10526_sel_1 = sel_1_485;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10526_sel_1 = sel_2674;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10526_sel_1 = sel_2673;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10526_sel_1 = sel_2672;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10526_sel_1 = sel_2671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10526_sel_1 = sel_2670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10526_sel_1 = sel_2669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10526_sel_1 = sel_2668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10526_sel_1 = sel_2667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10526_sel_1 = sel_2666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10526_sel_1 = sel_2665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10526_sel_1 = sel_2664;
        end
      default :
        begin
          p10526_sel_1 = sel_2680;
        end
    endcase
    sel_1_486 = p10526_sel_1;
  end

  assign tmp_199 = functionOutput_16[sel_1_486];

  assign sel_2681 = 1'b0;

  assign sel_2682 = 1'b0;

  assign sel_2683 = 1'b0;

  assign sel_2684 = 1'b0;

  assign sel_2685 = 1'b0;

  assign sel_2686 = 1'b0;

  assign sel_2687 = 1'b0;

  assign sel_2688 = 1'b0;

  assign sel_2689 = 1'b0;

  assign sel_2690 = 1'b0;

  assign sel_2691 = 1'b0;

  assign sel_2692 = 1'b0;

  assign s_222 = 1'b1;

  assign sel_2_509 = (s_18 == 1'b0 ? sel_2692 :
              s_222);

  assign sel_2693 = 1'b0;

  assign sel_2_510 = (s_19 == 1'b0 ? sel_2_509 :
              sel_2693);

  assign sel_2694 = 1'b0;

  assign sel_2_511 = (s_20 == 1'b0 ? sel_2_510 :
              sel_2694);

  assign sel_2695 = 1'b0;

  assign sel_2696 = 1'b0;

  assign sel_2697 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2681, sel_2682, sel_2683, sel_2684, sel_2685, sel_2686,
       sel_2687, sel_2688, sel_2689, sel_2690, sel_2691, sel_2695, sel_2696,
       sel_2697, sel_2_511) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7080_sel_2 = sel_2696;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7080_sel_2 = sel_2695;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7080_sel_2 = sel_2_511;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7080_sel_2 = sel_2691;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7080_sel_2 = sel_2690;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7080_sel_2 = sel_2689;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7080_sel_2 = sel_2688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7080_sel_2 = sel_2687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7080_sel_2 = sel_2686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7080_sel_2 = sel_2685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7080_sel_2 = sel_2684;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7080_sel_2 = sel_2683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7080_sel_2 = sel_2682;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7080_sel_2 = sel_2681;
        end
      default :
        begin
          p7080_sel_2 = sel_2697;
        end
    endcase
    sel_2_512 = p7080_sel_2;
  end

  always @* begin
    p7079cont_bits_21_cont_bits_21[2] = cont_bits_21_2[2];
    if (sel_2_512) begin
      p7079cont_bits_21_cont_bits_21[2] = tmp_199;
    end
    cont_bits_21_3[0] = cont_bits_21_2[0];
    cont_bits_21_3[1] = cont_bits_21_2[1];
    cont_bits_21_3[2] = p7079cont_bits_21_cont_bits_21[2];
    cont_bits_21_3[3] = cont_bits_21_2[3];
    cont_bits_21_3[4] = cont_bits_21_2[4];
    cont_bits_21_3[5] = cont_bits_21_2[5];
    cont_bits_21_3[6] = cont_bits_21_2[6];
    cont_bits_21_3[7] = cont_bits_21_2[7];
    cont_bits_21_3[8] = cont_bits_21_2[8];
    cont_bits_21_3[9] = cont_bits_21_2[9];
    cont_bits_21_3[10] = cont_bits_21_2[10];
    cont_bits_21_3[11] = cont_bits_21_2[11];
  end

  assign sel_2698 = 32'sd0;

  assign sel_2699 = 32'sd0;

  assign sel_2700 = 32'sd0;

  assign sel_2701 = 32'sd0;

  assign sel_2702 = 32'sd0;

  assign sel_2703 = 32'sd0;

  assign sel_2704 = 32'sd0;

  assign sel_2705 = 32'sd0;

  assign sel_2706 = 32'sd0;

  assign sel_2707 = 32'sd0;

  assign sel_2708 = 32'sd0;

  assign sel_2709 = 32'sd0;

  assign s_223 = 32'sd3;

  assign sel_1_487 = (s_18 == 1'b0 ? sel_2709 :
              s_223);

  assign sel_2710 = 32'sd0;

  assign sel_1_488 = (s_19 == 1'b0 ? sel_1_487 :
              sel_2710);

  assign sel_2711 = 32'sd0;

  assign sel_1_489 = (s_20 == 1'b0 ? sel_1_488 :
              sel_2711);

  assign sel_2712 = 32'sd0;

  assign sel_2713 = 32'sd0;

  assign sel_2714 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_489, sel_2698, sel_2699, sel_2700, sel_2701, sel_2702,
       sel_2703, sel_2704, sel_2705, sel_2706, sel_2707, sel_2708, sel_2712,
       sel_2713, sel_2714) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10900_sel_1 = sel_2713;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10900_sel_1 = sel_2712;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10900_sel_1 = sel_1_489;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10900_sel_1 = sel_2708;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10900_sel_1 = sel_2707;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10900_sel_1 = sel_2706;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10900_sel_1 = sel_2705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10900_sel_1 = sel_2704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10900_sel_1 = sel_2703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10900_sel_1 = sel_2702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10900_sel_1 = sel_2701;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10900_sel_1 = sel_2700;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10900_sel_1 = sel_2699;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10900_sel_1 = sel_2698;
        end
      default :
        begin
          p10900_sel_1 = sel_2714;
        end
    endcase
    sel_1_490 = p10900_sel_1;
  end

  assign tmp_200 = functionOutput_16[sel_1_490];

  assign sel_2715 = 1'b0;

  assign sel_2716 = 1'b0;

  assign sel_2717 = 1'b0;

  assign sel_2718 = 1'b0;

  assign sel_2719 = 1'b0;

  assign sel_2720 = 1'b0;

  assign sel_2721 = 1'b0;

  assign sel_2722 = 1'b0;

  assign sel_2723 = 1'b0;

  assign sel_2724 = 1'b0;

  assign sel_2725 = 1'b0;

  assign sel_2726 = 1'b0;

  assign s_224 = 1'b1;

  assign sel_2_513 = (s_18 == 1'b0 ? sel_2726 :
              s_224);

  assign sel_2727 = 1'b0;

  assign sel_2_514 = (s_19 == 1'b0 ? sel_2_513 :
              sel_2727);

  assign sel_2728 = 1'b0;

  assign sel_2_515 = (s_20 == 1'b0 ? sel_2_514 :
              sel_2728);

  assign sel_2729 = 1'b0;

  assign sel_2730 = 1'b0;

  assign sel_2731 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2715, sel_2716, sel_2717, sel_2718, sel_2719, sel_2720,
       sel_2721, sel_2722, sel_2723, sel_2724, sel_2725, sel_2729, sel_2730,
       sel_2731, sel_2_515) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6823_sel_2 = sel_2730;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6823_sel_2 = sel_2729;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6823_sel_2 = sel_2_515;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6823_sel_2 = sel_2725;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6823_sel_2 = sel_2724;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6823_sel_2 = sel_2723;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6823_sel_2 = sel_2722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6823_sel_2 = sel_2721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6823_sel_2 = sel_2720;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6823_sel_2 = sel_2719;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6823_sel_2 = sel_2718;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6823_sel_2 = sel_2717;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6823_sel_2 = sel_2716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6823_sel_2 = sel_2715;
        end
      default :
        begin
          p6823_sel_2 = sel_2731;
        end
    endcase
    sel_2_516 = p6823_sel_2;
  end

  always @* begin
    p6822cont_bits_21_cont_bits_21[3] = cont_bits_21_3[3];
    if (sel_2_516) begin
      p6822cont_bits_21_cont_bits_21[3] = tmp_200;
    end
    cont_bits_21_4[0] = cont_bits_21_3[0];
    cont_bits_21_4[1] = cont_bits_21_3[1];
    cont_bits_21_4[2] = cont_bits_21_3[2];
    cont_bits_21_4[3] = p6822cont_bits_21_cont_bits_21[3];
    cont_bits_21_4[4] = cont_bits_21_3[4];
    cont_bits_21_4[5] = cont_bits_21_3[5];
    cont_bits_21_4[6] = cont_bits_21_3[6];
    cont_bits_21_4[7] = cont_bits_21_3[7];
    cont_bits_21_4[8] = cont_bits_21_3[8];
    cont_bits_21_4[9] = cont_bits_21_3[9];
    cont_bits_21_4[10] = cont_bits_21_3[10];
    cont_bits_21_4[11] = cont_bits_21_3[11];
  end

  assign sel_2732 = 32'sd0;

  assign sel_2733 = 32'sd0;

  assign sel_2734 = 32'sd0;

  assign sel_2735 = 32'sd0;

  assign sel_2736 = 32'sd0;

  assign sel_2737 = 32'sd0;

  assign sel_2738 = 32'sd0;

  assign sel_2739 = 32'sd0;

  assign sel_2740 = 32'sd0;

  assign sel_2741 = 32'sd0;

  assign sel_2742 = 32'sd0;

  assign sel_2743 = 32'sd0;

  assign s_225 = 32'sd4;

  assign sel_1_491 = (s_18 == 1'b0 ? sel_2743 :
              s_225);

  assign sel_2744 = 32'sd0;

  assign sel_1_492 = (s_19 == 1'b0 ? sel_1_491 :
              sel_2744);

  assign sel_2745 = 32'sd0;

  assign sel_1_493 = (s_20 == 1'b0 ? sel_1_492 :
              sel_2745);

  assign sel_2746 = 32'sd0;

  assign sel_2747 = 32'sd0;

  assign sel_2748 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_493, sel_2732, sel_2733, sel_2734, sel_2735, sel_2736,
       sel_2737, sel_2738, sel_2739, sel_2740, sel_2741, sel_2742, sel_2746,
       sel_2747, sel_2748) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10628_sel_1 = sel_2747;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10628_sel_1 = sel_2746;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10628_sel_1 = sel_1_493;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10628_sel_1 = sel_2742;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10628_sel_1 = sel_2741;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10628_sel_1 = sel_2740;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10628_sel_1 = sel_2739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10628_sel_1 = sel_2738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10628_sel_1 = sel_2737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10628_sel_1 = sel_2736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10628_sel_1 = sel_2735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10628_sel_1 = sel_2734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10628_sel_1 = sel_2733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10628_sel_1 = sel_2732;
        end
      default :
        begin
          p10628_sel_1 = sel_2748;
        end
    endcase
    sel_1_494 = p10628_sel_1;
  end

  assign tmp_201 = functionOutput_16[sel_1_494];

  assign sel_2749 = 1'b0;

  assign sel_2750 = 1'b0;

  assign sel_2751 = 1'b0;

  assign sel_2752 = 1'b0;

  assign sel_2753 = 1'b0;

  assign sel_2754 = 1'b0;

  assign sel_2755 = 1'b0;

  assign sel_2756 = 1'b0;

  assign sel_2757 = 1'b0;

  assign sel_2758 = 1'b0;

  assign sel_2759 = 1'b0;

  assign sel_2760 = 1'b0;

  assign s_226 = 1'b1;

  assign sel_2_517 = (s_18 == 1'b0 ? sel_2760 :
              s_226);

  assign sel_2761 = 1'b0;

  assign sel_2_518 = (s_19 == 1'b0 ? sel_2_517 :
              sel_2761);

  assign sel_2762 = 1'b0;

  assign sel_2_519 = (s_20 == 1'b0 ? sel_2_518 :
              sel_2762);

  assign sel_2763 = 1'b0;

  assign sel_2764 = 1'b0;

  assign sel_2765 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2749, sel_2750, sel_2751, sel_2752, sel_2753, sel_2754,
       sel_2755, sel_2756, sel_2757, sel_2758, sel_2759, sel_2763, sel_2764,
       sel_2765, sel_2_519) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6473_sel_2 = sel_2764;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6473_sel_2 = sel_2763;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6473_sel_2 = sel_2_519;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6473_sel_2 = sel_2759;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6473_sel_2 = sel_2758;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6473_sel_2 = sel_2757;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6473_sel_2 = sel_2756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6473_sel_2 = sel_2755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6473_sel_2 = sel_2754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6473_sel_2 = sel_2753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6473_sel_2 = sel_2752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6473_sel_2 = sel_2751;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6473_sel_2 = sel_2750;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6473_sel_2 = sel_2749;
        end
      default :
        begin
          p6473_sel_2 = sel_2765;
        end
    endcase
    sel_2_520 = p6473_sel_2;
  end

  always @* begin
    p6472cont_bits_21_cont_bits_21[4] = cont_bits_21_4[4];
    if (sel_2_520) begin
      p6472cont_bits_21_cont_bits_21[4] = tmp_201;
    end
    cont_bits_21_5[0] = cont_bits_21_4[0];
    cont_bits_21_5[1] = cont_bits_21_4[1];
    cont_bits_21_5[2] = cont_bits_21_4[2];
    cont_bits_21_5[3] = cont_bits_21_4[3];
    cont_bits_21_5[4] = p6472cont_bits_21_cont_bits_21[4];
    cont_bits_21_5[5] = cont_bits_21_4[5];
    cont_bits_21_5[6] = cont_bits_21_4[6];
    cont_bits_21_5[7] = cont_bits_21_4[7];
    cont_bits_21_5[8] = cont_bits_21_4[8];
    cont_bits_21_5[9] = cont_bits_21_4[9];
    cont_bits_21_5[10] = cont_bits_21_4[10];
    cont_bits_21_5[11] = cont_bits_21_4[11];
  end

  assign sel_2766 = 32'sd0;

  assign sel_2767 = 32'sd0;

  assign sel_2768 = 32'sd0;

  assign sel_2769 = 32'sd0;

  assign sel_2770 = 32'sd0;

  assign sel_2771 = 32'sd0;

  assign sel_2772 = 32'sd0;

  assign sel_2773 = 32'sd0;

  assign sel_2774 = 32'sd0;

  assign sel_2775 = 32'sd0;

  assign sel_2776 = 32'sd0;

  assign sel_2777 = 32'sd0;

  assign s_227 = 32'sd5;

  assign sel_1_495 = (s_18 == 1'b0 ? sel_2777 :
              s_227);

  assign sel_2778 = 32'sd0;

  assign sel_1_496 = (s_19 == 1'b0 ? sel_1_495 :
              sel_2778);

  assign sel_2779 = 32'sd0;

  assign sel_1_497 = (s_20 == 1'b0 ? sel_1_496 :
              sel_2779);

  assign sel_2780 = 32'sd0;

  assign sel_2781 = 32'sd0;

  assign sel_2782 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_497, sel_2766, sel_2767, sel_2768, sel_2769, sel_2770,
       sel_2771, sel_2772, sel_2773, sel_2774, sel_2775, sel_2776, sel_2780,
       sel_2781, sel_2782) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11155_sel_1 = sel_2781;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11155_sel_1 = sel_2780;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11155_sel_1 = sel_1_497;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11155_sel_1 = sel_2776;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11155_sel_1 = sel_2775;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11155_sel_1 = sel_2774;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11155_sel_1 = sel_2773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11155_sel_1 = sel_2772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11155_sel_1 = sel_2771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11155_sel_1 = sel_2770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11155_sel_1 = sel_2769;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11155_sel_1 = sel_2768;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11155_sel_1 = sel_2767;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11155_sel_1 = sel_2766;
        end
      default :
        begin
          p11155_sel_1 = sel_2782;
        end
    endcase
    sel_1_498 = p11155_sel_1;
  end

  assign tmp_202 = functionOutput_16[sel_1_498];

  assign sel_2783 = 1'b0;

  assign sel_2784 = 1'b0;

  assign sel_2785 = 1'b0;

  assign sel_2786 = 1'b0;

  assign sel_2787 = 1'b0;

  assign sel_2788 = 1'b0;

  assign sel_2789 = 1'b0;

  assign sel_2790 = 1'b0;

  assign sel_2791 = 1'b0;

  assign sel_2792 = 1'b0;

  assign sel_2793 = 1'b0;

  assign sel_2794 = 1'b0;

  assign s_228 = 1'b1;

  assign sel_2_521 = (s_18 == 1'b0 ? sel_2794 :
              s_228);

  assign sel_2795 = 1'b0;

  assign sel_2_522 = (s_19 == 1'b0 ? sel_2_521 :
              sel_2795);

  assign sel_2796 = 1'b0;

  assign sel_2_523 = (s_20 == 1'b0 ? sel_2_522 :
              sel_2796);

  assign sel_2797 = 1'b0;

  assign sel_2798 = 1'b0;

  assign sel_2799 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2783, sel_2784, sel_2785, sel_2786, sel_2787, sel_2788,
       sel_2789, sel_2790, sel_2791, sel_2792, sel_2793, sel_2797, sel_2798,
       sel_2799, sel_2_523) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6217_sel_2 = sel_2798;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6217_sel_2 = sel_2797;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6217_sel_2 = sel_2_523;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6217_sel_2 = sel_2793;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6217_sel_2 = sel_2792;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6217_sel_2 = sel_2791;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6217_sel_2 = sel_2790;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6217_sel_2 = sel_2789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6217_sel_2 = sel_2788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6217_sel_2 = sel_2787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6217_sel_2 = sel_2786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6217_sel_2 = sel_2785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6217_sel_2 = sel_2784;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6217_sel_2 = sel_2783;
        end
      default :
        begin
          p6217_sel_2 = sel_2799;
        end
    endcase
    sel_2_524 = p6217_sel_2;
  end

  always @* begin
    p6216cont_bits_21_cont_bits_21[5] = cont_bits_21_5[5];
    if (sel_2_524) begin
      p6216cont_bits_21_cont_bits_21[5] = tmp_202;
    end
    cont_bits_21_6[0] = cont_bits_21_5[0];
    cont_bits_21_6[1] = cont_bits_21_5[1];
    cont_bits_21_6[2] = cont_bits_21_5[2];
    cont_bits_21_6[3] = cont_bits_21_5[3];
    cont_bits_21_6[4] = cont_bits_21_5[4];
    cont_bits_21_6[5] = p6216cont_bits_21_cont_bits_21[5];
    cont_bits_21_6[6] = cont_bits_21_5[6];
    cont_bits_21_6[7] = cont_bits_21_5[7];
    cont_bits_21_6[8] = cont_bits_21_5[8];
    cont_bits_21_6[9] = cont_bits_21_5[9];
    cont_bits_21_6[10] = cont_bits_21_5[10];
    cont_bits_21_6[11] = cont_bits_21_5[11];
  end

  assign sel_2800 = 32'sd0;

  assign sel_2801 = 32'sd0;

  assign sel_2802 = 32'sd0;

  assign sel_2803 = 32'sd0;

  assign sel_2804 = 32'sd0;

  assign sel_2805 = 32'sd0;

  assign sel_2806 = 32'sd0;

  assign sel_2807 = 32'sd0;

  assign sel_2808 = 32'sd0;

  assign sel_2809 = 32'sd0;

  assign sel_2810 = 32'sd0;

  assign sel_2811 = 32'sd0;

  assign s_229 = 32'sd6;

  assign sel_1_499 = (s_18 == 1'b0 ? sel_2811 :
              s_229);

  assign sel_2812 = 32'sd0;

  assign sel_1_500 = (s_19 == 1'b0 ? sel_1_499 :
              sel_2812);

  assign sel_2813 = 32'sd0;

  assign sel_1_501 = (s_20 == 1'b0 ? sel_1_500 :
              sel_2813);

  assign sel_2814 = 32'sd0;

  assign sel_2815 = 32'sd0;

  assign sel_2816 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_501, sel_2800, sel_2801, sel_2802, sel_2803, sel_2804,
       sel_2805, sel_2806, sel_2807, sel_2808, sel_2809, sel_2810, sel_2814,
       sel_2815, sel_2816) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11036_sel_1 = sel_2815;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11036_sel_1 = sel_2814;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11036_sel_1 = sel_1_501;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11036_sel_1 = sel_2810;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11036_sel_1 = sel_2809;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11036_sel_1 = sel_2808;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11036_sel_1 = sel_2807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11036_sel_1 = sel_2806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11036_sel_1 = sel_2805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11036_sel_1 = sel_2804;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11036_sel_1 = sel_2803;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11036_sel_1 = sel_2802;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11036_sel_1 = sel_2801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11036_sel_1 = sel_2800;
        end
      default :
        begin
          p11036_sel_1 = sel_2816;
        end
    endcase
    sel_1_502 = p11036_sel_1;
  end

  assign tmp_203 = functionOutput_16[sel_1_502];

  assign sel_2817 = 1'b0;

  assign sel_2818 = 1'b0;

  assign sel_2819 = 1'b0;

  assign sel_2820 = 1'b0;

  assign sel_2821 = 1'b0;

  assign sel_2822 = 1'b0;

  assign sel_2823 = 1'b0;

  assign sel_2824 = 1'b0;

  assign sel_2825 = 1'b0;

  assign sel_2826 = 1'b0;

  assign sel_2827 = 1'b0;

  assign sel_2828 = 1'b0;

  assign s_230 = 1'b1;

  assign sel_2_525 = (s_18 == 1'b0 ? sel_2828 :
              s_230);

  assign sel_2829 = 1'b0;

  assign sel_2_526 = (s_19 == 1'b0 ? sel_2_525 :
              sel_2829);

  assign sel_2830 = 1'b0;

  assign sel_2_527 = (s_20 == 1'b0 ? sel_2_526 :
              sel_2830);

  assign sel_2831 = 1'b0;

  assign sel_2832 = 1'b0;

  assign sel_2833 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2817, sel_2818, sel_2819, sel_2820, sel_2821, sel_2822,
       sel_2823, sel_2824, sel_2825, sel_2826, sel_2827, sel_2831, sel_2832,
       sel_2833, sel_2_527) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5867_sel_2 = sel_2832;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5867_sel_2 = sel_2831;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5867_sel_2 = sel_2_527;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5867_sel_2 = sel_2827;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5867_sel_2 = sel_2826;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5867_sel_2 = sel_2825;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5867_sel_2 = sel_2824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5867_sel_2 = sel_2823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5867_sel_2 = sel_2822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5867_sel_2 = sel_2821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5867_sel_2 = sel_2820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5867_sel_2 = sel_2819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5867_sel_2 = sel_2818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5867_sel_2 = sel_2817;
        end
      default :
        begin
          p5867_sel_2 = sel_2833;
        end
    endcase
    sel_2_528 = p5867_sel_2;
  end

  always @* begin
    p5866cont_bits_21_cont_bits_21[6] = cont_bits_21_6[6];
    if (sel_2_528) begin
      p5866cont_bits_21_cont_bits_21[6] = tmp_203;
    end
    cont_bits_21_7[0] = cont_bits_21_6[0];
    cont_bits_21_7[1] = cont_bits_21_6[1];
    cont_bits_21_7[2] = cont_bits_21_6[2];
    cont_bits_21_7[3] = cont_bits_21_6[3];
    cont_bits_21_7[4] = cont_bits_21_6[4];
    cont_bits_21_7[5] = cont_bits_21_6[5];
    cont_bits_21_7[6] = p5866cont_bits_21_cont_bits_21[6];
    cont_bits_21_7[7] = cont_bits_21_6[7];
    cont_bits_21_7[8] = cont_bits_21_6[8];
    cont_bits_21_7[9] = cont_bits_21_6[9];
    cont_bits_21_7[10] = cont_bits_21_6[10];
    cont_bits_21_7[11] = cont_bits_21_6[11];
  end

  assign sel_2834 = 32'sd0;

  assign sel_2835 = 32'sd0;

  assign sel_2836 = 32'sd0;

  assign sel_2837 = 32'sd0;

  assign sel_2838 = 32'sd0;

  assign sel_2839 = 32'sd0;

  assign sel_2840 = 32'sd0;

  assign sel_2841 = 32'sd0;

  assign sel_2842 = 32'sd0;

  assign sel_2843 = 32'sd0;

  assign sel_2844 = 32'sd0;

  assign sel_2845 = 32'sd0;

  assign s_231 = 32'sd7;

  assign sel_1_503 = (s_18 == 1'b0 ? sel_2845 :
              s_231);

  assign sel_2846 = 32'sd0;

  assign sel_1_504 = (s_19 == 1'b0 ? sel_1_503 :
              sel_2846);

  assign sel_2847 = 32'sd0;

  assign sel_1_505 = (s_20 == 1'b0 ? sel_1_504 :
              sel_2847);

  assign sel_2848 = 32'sd0;

  assign sel_2849 = 32'sd0;

  assign sel_2850 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_505, sel_2834, sel_2835, sel_2836, sel_2837, sel_2838,
       sel_2839, sel_2840, sel_2841, sel_2842, sel_2843, sel_2844, sel_2848,
       sel_2849, sel_2850) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11053_sel_1 = sel_2849;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11053_sel_1 = sel_2848;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11053_sel_1 = sel_1_505;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11053_sel_1 = sel_2844;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11053_sel_1 = sel_2843;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11053_sel_1 = sel_2842;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11053_sel_1 = sel_2841;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11053_sel_1 = sel_2840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11053_sel_1 = sel_2839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11053_sel_1 = sel_2838;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11053_sel_1 = sel_2837;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11053_sel_1 = sel_2836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11053_sel_1 = sel_2835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11053_sel_1 = sel_2834;
        end
      default :
        begin
          p11053_sel_1 = sel_2850;
        end
    endcase
    sel_1_506 = p11053_sel_1;
  end

  assign tmp_204 = functionOutput_16[sel_1_506];

  assign sel_2851 = 1'b0;

  assign sel_2852 = 1'b0;

  assign sel_2853 = 1'b0;

  assign sel_2854 = 1'b0;

  assign sel_2855 = 1'b0;

  assign sel_2856 = 1'b0;

  assign sel_2857 = 1'b0;

  assign sel_2858 = 1'b0;

  assign sel_2859 = 1'b0;

  assign sel_2860 = 1'b0;

  assign sel_2861 = 1'b0;

  assign sel_2862 = 1'b0;

  assign s_232 = 1'b1;

  assign sel_2_529 = (s_18 == 1'b0 ? sel_2862 :
              s_232);

  assign sel_2863 = 1'b0;

  assign sel_2_530 = (s_19 == 1'b0 ? sel_2_529 :
              sel_2863);

  assign sel_2864 = 1'b0;

  assign sel_2_531 = (s_20 == 1'b0 ? sel_2_530 :
              sel_2864);

  assign sel_2865 = 1'b0;

  assign sel_2866 = 1'b0;

  assign sel_2867 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2851, sel_2852, sel_2853, sel_2854, sel_2855, sel_2856,
       sel_2857, sel_2858, sel_2859, sel_2860, sel_2861, sel_2865, sel_2866,
       sel_2867, sel_2_531) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5611_sel_2 = sel_2866;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5611_sel_2 = sel_2865;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5611_sel_2 = sel_2_531;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5611_sel_2 = sel_2861;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5611_sel_2 = sel_2860;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5611_sel_2 = sel_2859;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5611_sel_2 = sel_2858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5611_sel_2 = sel_2857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5611_sel_2 = sel_2856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5611_sel_2 = sel_2855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5611_sel_2 = sel_2854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5611_sel_2 = sel_2853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5611_sel_2 = sel_2852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5611_sel_2 = sel_2851;
        end
      default :
        begin
          p5611_sel_2 = sel_2867;
        end
    endcase
    sel_2_532 = p5611_sel_2;
  end

  always @* begin
    p5610cont_bits_21_cont_bits_21[7] = cont_bits_21_7[7];
    if (sel_2_532) begin
      p5610cont_bits_21_cont_bits_21[7] = tmp_204;
    end
    cont_bits_21_8[0] = cont_bits_21_7[0];
    cont_bits_21_8[1] = cont_bits_21_7[1];
    cont_bits_21_8[2] = cont_bits_21_7[2];
    cont_bits_21_8[3] = cont_bits_21_7[3];
    cont_bits_21_8[4] = cont_bits_21_7[4];
    cont_bits_21_8[5] = cont_bits_21_7[5];
    cont_bits_21_8[6] = cont_bits_21_7[6];
    cont_bits_21_8[7] = p5610cont_bits_21_cont_bits_21[7];
    cont_bits_21_8[8] = cont_bits_21_7[8];
    cont_bits_21_8[9] = cont_bits_21_7[9];
    cont_bits_21_8[10] = cont_bits_21_7[10];
    cont_bits_21_8[11] = cont_bits_21_7[11];
  end

  assign sel_2868 = 32'sd0;

  assign sel_2869 = 32'sd0;

  assign sel_2870 = 32'sd0;

  assign sel_2871 = 32'sd0;

  assign sel_2872 = 32'sd0;

  assign sel_2873 = 32'sd0;

  assign sel_2874 = 32'sd0;

  assign sel_2875 = 32'sd0;

  assign sel_2876 = 32'sd0;

  assign sel_2877 = 32'sd0;

  assign sel_2878 = 32'sd0;

  assign sel_2879 = 32'sd0;

  assign s_233 = 32'sd8;

  assign sel_1_507 = (s_18 == 1'b0 ? sel_2879 :
              s_233);

  assign sel_2880 = 32'sd0;

  assign sel_1_508 = (s_19 == 1'b0 ? sel_1_507 :
              sel_2880);

  assign sel_2881 = 32'sd0;

  assign sel_1_509 = (s_20 == 1'b0 ? sel_1_508 :
              sel_2881);

  assign sel_2882 = 32'sd0;

  assign sel_2883 = 32'sd0;

  assign sel_2884 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_509, sel_2868, sel_2869, sel_2870, sel_2871, sel_2872,
       sel_2873, sel_2874, sel_2875, sel_2876, sel_2877, sel_2878, sel_2882,
       sel_2883, sel_2884) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10594_sel_1 = sel_2883;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10594_sel_1 = sel_2882;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10594_sel_1 = sel_1_509;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10594_sel_1 = sel_2878;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10594_sel_1 = sel_2877;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10594_sel_1 = sel_2876;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10594_sel_1 = sel_2875;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10594_sel_1 = sel_2874;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10594_sel_1 = sel_2873;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10594_sel_1 = sel_2872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10594_sel_1 = sel_2871;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10594_sel_1 = sel_2870;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10594_sel_1 = sel_2869;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10594_sel_1 = sel_2868;
        end
      default :
        begin
          p10594_sel_1 = sel_2884;
        end
    endcase
    sel_1_510 = p10594_sel_1;
  end

  assign tmp_205 = functionOutput_16[sel_1_510];

  assign sel_2885 = 1'b0;

  assign sel_2886 = 1'b0;

  assign sel_2887 = 1'b0;

  assign sel_2888 = 1'b0;

  assign sel_2889 = 1'b0;

  assign sel_2890 = 1'b0;

  assign sel_2891 = 1'b0;

  assign sel_2892 = 1'b0;

  assign sel_2893 = 1'b0;

  assign sel_2894 = 1'b0;

  assign sel_2895 = 1'b0;

  assign sel_2896 = 1'b0;

  assign s_234 = 1'b1;

  assign sel_2_533 = (s_18 == 1'b0 ? sel_2896 :
              s_234);

  assign sel_2897 = 1'b0;

  assign sel_2_534 = (s_19 == 1'b0 ? sel_2_533 :
              sel_2897);

  assign sel_2898 = 1'b0;

  assign sel_2_535 = (s_20 == 1'b0 ? sel_2_534 :
              sel_2898);

  assign sel_2899 = 1'b0;

  assign sel_2900 = 1'b0;

  assign sel_2901 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2885, sel_2886, sel_2887, sel_2888, sel_2889, sel_2890,
       sel_2891, sel_2892, sel_2893, sel_2894, sel_2895, sel_2899, sel_2900,
       sel_2901, sel_2_535) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5261_sel_2 = sel_2900;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5261_sel_2 = sel_2899;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5261_sel_2 = sel_2_535;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5261_sel_2 = sel_2895;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5261_sel_2 = sel_2894;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5261_sel_2 = sel_2893;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5261_sel_2 = sel_2892;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5261_sel_2 = sel_2891;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5261_sel_2 = sel_2890;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5261_sel_2 = sel_2889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5261_sel_2 = sel_2888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5261_sel_2 = sel_2887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5261_sel_2 = sel_2886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5261_sel_2 = sel_2885;
        end
      default :
        begin
          p5261_sel_2 = sel_2901;
        end
    endcase
    sel_2_536 = p5261_sel_2;
  end

  always @* begin
    p5260cont_bits_21_cont_bits_21[8] = cont_bits_21_8[8];
    if (sel_2_536) begin
      p5260cont_bits_21_cont_bits_21[8] = tmp_205;
    end
    cont_bits_21_9[0] = cont_bits_21_8[0];
    cont_bits_21_9[1] = cont_bits_21_8[1];
    cont_bits_21_9[2] = cont_bits_21_8[2];
    cont_bits_21_9[3] = cont_bits_21_8[3];
    cont_bits_21_9[4] = cont_bits_21_8[4];
    cont_bits_21_9[5] = cont_bits_21_8[5];
    cont_bits_21_9[6] = cont_bits_21_8[6];
    cont_bits_21_9[7] = cont_bits_21_8[7];
    cont_bits_21_9[8] = p5260cont_bits_21_cont_bits_21[8];
    cont_bits_21_9[9] = cont_bits_21_8[9];
    cont_bits_21_9[10] = cont_bits_21_8[10];
    cont_bits_21_9[11] = cont_bits_21_8[11];
  end

  assign sel_2902 = 32'sd0;

  assign sel_2903 = 32'sd0;

  assign sel_2904 = 32'sd0;

  assign sel_2905 = 32'sd0;

  assign sel_2906 = 32'sd0;

  assign sel_2907 = 32'sd0;

  assign sel_2908 = 32'sd0;

  assign sel_2909 = 32'sd0;

  assign sel_2910 = 32'sd0;

  assign sel_2911 = 32'sd0;

  assign sel_2912 = 32'sd0;

  assign sel_2913 = 32'sd0;

  assign s_235 = 32'sd9;

  assign sel_1_511 = (s_18 == 1'b0 ? sel_2913 :
              s_235);

  assign sel_2914 = 32'sd0;

  assign sel_1_512 = (s_19 == 1'b0 ? sel_1_511 :
              sel_2914);

  assign sel_2915 = 32'sd0;

  assign sel_1_513 = (s_20 == 1'b0 ? sel_1_512 :
              sel_2915);

  assign sel_2916 = 32'sd0;

  assign sel_2917 = 32'sd0;

  assign sel_2918 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_513, sel_2902, sel_2903, sel_2904, sel_2905, sel_2906,
       sel_2907, sel_2908, sel_2909, sel_2910, sel_2911, sel_2912, sel_2916,
       sel_2917, sel_2918) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10832_sel_1 = sel_2917;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10832_sel_1 = sel_2916;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10832_sel_1 = sel_1_513;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10832_sel_1 = sel_2912;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10832_sel_1 = sel_2911;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10832_sel_1 = sel_2910;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10832_sel_1 = sel_2909;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10832_sel_1 = sel_2908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10832_sel_1 = sel_2907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10832_sel_1 = sel_2906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10832_sel_1 = sel_2905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10832_sel_1 = sel_2904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10832_sel_1 = sel_2903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10832_sel_1 = sel_2902;
        end
      default :
        begin
          p10832_sel_1 = sel_2918;
        end
    endcase
    sel_1_514 = p10832_sel_1;
  end

  assign tmp_206 = functionOutput_16[sel_1_514];

  assign sel_2919 = 1'b0;

  assign sel_2920 = 1'b0;

  assign sel_2921 = 1'b0;

  assign sel_2922 = 1'b0;

  assign sel_2923 = 1'b0;

  assign sel_2924 = 1'b0;

  assign sel_2925 = 1'b0;

  assign sel_2926 = 1'b0;

  assign sel_2927 = 1'b0;

  assign sel_2928 = 1'b0;

  assign sel_2929 = 1'b0;

  assign sel_2930 = 1'b0;

  assign s_236 = 1'b1;

  assign sel_2_537 = (s_18 == 1'b0 ? sel_2930 :
              s_236);

  assign sel_2931 = 1'b0;

  assign sel_2_538 = (s_19 == 1'b0 ? sel_2_537 :
              sel_2931);

  assign sel_2932 = 1'b0;

  assign sel_2_539 = (s_20 == 1'b0 ? sel_2_538 :
              sel_2932);

  assign sel_2933 = 1'b0;

  assign sel_2934 = 1'b0;

  assign sel_2935 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2919, sel_2920, sel_2921, sel_2922, sel_2923, sel_2924,
       sel_2925, sel_2926, sel_2927, sel_2928, sel_2929, sel_2933, sel_2934,
       sel_2935, sel_2_539) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5005_sel_2 = sel_2934;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5005_sel_2 = sel_2933;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5005_sel_2 = sel_2_539;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5005_sel_2 = sel_2929;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5005_sel_2 = sel_2928;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5005_sel_2 = sel_2927;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5005_sel_2 = sel_2926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5005_sel_2 = sel_2925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5005_sel_2 = sel_2924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5005_sel_2 = sel_2923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5005_sel_2 = sel_2922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5005_sel_2 = sel_2921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5005_sel_2 = sel_2920;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5005_sel_2 = sel_2919;
        end
      default :
        begin
          p5005_sel_2 = sel_2935;
        end
    endcase
    sel_2_540 = p5005_sel_2;
  end

  always @* begin
    p5004cont_bits_21_cont_bits_21[9] = cont_bits_21_9[9];
    if (sel_2_540) begin
      p5004cont_bits_21_cont_bits_21[9] = tmp_206;
    end
    cont_bits_21_10[0] = cont_bits_21_9[0];
    cont_bits_21_10[1] = cont_bits_21_9[1];
    cont_bits_21_10[2] = cont_bits_21_9[2];
    cont_bits_21_10[3] = cont_bits_21_9[3];
    cont_bits_21_10[4] = cont_bits_21_9[4];
    cont_bits_21_10[5] = cont_bits_21_9[5];
    cont_bits_21_10[6] = cont_bits_21_9[6];
    cont_bits_21_10[7] = cont_bits_21_9[7];
    cont_bits_21_10[8] = cont_bits_21_9[8];
    cont_bits_21_10[9] = p5004cont_bits_21_cont_bits_21[9];
    cont_bits_21_10[10] = cont_bits_21_9[10];
    cont_bits_21_10[11] = cont_bits_21_9[11];
  end

  assign sel_2936 = 32'sd0;

  assign sel_2937 = 32'sd0;

  assign sel_2938 = 32'sd0;

  assign sel_2939 = 32'sd0;

  assign sel_2940 = 32'sd0;

  assign sel_2941 = 32'sd0;

  assign sel_2942 = 32'sd0;

  assign sel_2943 = 32'sd0;

  assign sel_2944 = 32'sd0;

  assign sel_2945 = 32'sd0;

  assign sel_2946 = 32'sd0;

  assign sel_2947 = 32'sd0;

  assign s_237 = 32'sd10;

  assign sel_1_515 = (s_18 == 1'b0 ? sel_2947 :
              s_237);

  assign sel_2948 = 32'sd0;

  assign sel_1_516 = (s_19 == 1'b0 ? sel_1_515 :
              sel_2948);

  assign sel_2949 = 32'sd0;

  assign sel_1_517 = (s_20 == 1'b0 ? sel_1_516 :
              sel_2949);

  assign sel_2950 = 32'sd0;

  assign sel_2951 = 32'sd0;

  assign sel_2952 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_517, sel_2936, sel_2937, sel_2938, sel_2939, sel_2940,
       sel_2941, sel_2942, sel_2943, sel_2944, sel_2945, sel_2946, sel_2950,
       sel_2951, sel_2952) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10781_sel_1 = sel_2951;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10781_sel_1 = sel_2950;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10781_sel_1 = sel_1_517;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10781_sel_1 = sel_2946;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10781_sel_1 = sel_2945;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10781_sel_1 = sel_2944;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10781_sel_1 = sel_2943;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10781_sel_1 = sel_2942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10781_sel_1 = sel_2941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10781_sel_1 = sel_2940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10781_sel_1 = sel_2939;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10781_sel_1 = sel_2938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10781_sel_1 = sel_2937;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10781_sel_1 = sel_2936;
        end
      default :
        begin
          p10781_sel_1 = sel_2952;
        end
    endcase
    sel_1_518 = p10781_sel_1;
  end

  assign tmp_207 = functionOutput_16[sel_1_518];

  assign sel_2953 = 1'b0;

  assign sel_2954 = 1'b0;

  assign sel_2955 = 1'b0;

  assign sel_2956 = 1'b0;

  assign sel_2957 = 1'b0;

  assign sel_2958 = 1'b0;

  assign sel_2959 = 1'b0;

  assign sel_2960 = 1'b0;

  assign sel_2961 = 1'b0;

  assign sel_2962 = 1'b0;

  assign sel_2963 = 1'b0;

  assign sel_2964 = 1'b0;

  assign s_238 = 1'b1;

  assign sel_2_541 = (s_18 == 1'b0 ? sel_2964 :
              s_238);

  assign sel_2965 = 1'b0;

  assign sel_2_542 = (s_19 == 1'b0 ? sel_2_541 :
              sel_2965);

  assign sel_2966 = 1'b0;

  assign sel_2_543 = (s_20 == 1'b0 ? sel_2_542 :
              sel_2966);

  assign sel_2967 = 1'b0;

  assign sel_2968 = 1'b0;

  assign sel_2969 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2953, sel_2954, sel_2955, sel_2956, sel_2957, sel_2958,
       sel_2959, sel_2960, sel_2961, sel_2962, sel_2963, sel_2967, sel_2968,
       sel_2969, sel_2_543) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4655_sel_2 = sel_2968;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4655_sel_2 = sel_2967;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4655_sel_2 = sel_2_543;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4655_sel_2 = sel_2963;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4655_sel_2 = sel_2962;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4655_sel_2 = sel_2961;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4655_sel_2 = sel_2960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4655_sel_2 = sel_2959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4655_sel_2 = sel_2958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4655_sel_2 = sel_2957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4655_sel_2 = sel_2956;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4655_sel_2 = sel_2955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4655_sel_2 = sel_2954;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4655_sel_2 = sel_2953;
        end
      default :
        begin
          p4655_sel_2 = sel_2969;
        end
    endcase
    sel_2_544 = p4655_sel_2;
  end

  always @* begin
    p4654cont_bits_21_cont_bits_21[10] = cont_bits_21_10[10];
    if (sel_2_544) begin
      p4654cont_bits_21_cont_bits_21[10] = tmp_207;
    end
    cont_bits_21_11[0] = cont_bits_21_10[0];
    cont_bits_21_11[1] = cont_bits_21_10[1];
    cont_bits_21_11[2] = cont_bits_21_10[2];
    cont_bits_21_11[3] = cont_bits_21_10[3];
    cont_bits_21_11[4] = cont_bits_21_10[4];
    cont_bits_21_11[5] = cont_bits_21_10[5];
    cont_bits_21_11[6] = cont_bits_21_10[6];
    cont_bits_21_11[7] = cont_bits_21_10[7];
    cont_bits_21_11[8] = cont_bits_21_10[8];
    cont_bits_21_11[9] = cont_bits_21_10[9];
    cont_bits_21_11[10] = p4654cont_bits_21_cont_bits_21[10];
    cont_bits_21_11[11] = cont_bits_21_10[11];
  end

  assign sel_2970 = 32'sd0;

  assign sel_2971 = 32'sd0;

  assign sel_2972 = 32'sd0;

  assign sel_2973 = 32'sd0;

  assign sel_2974 = 32'sd0;

  assign sel_2975 = 32'sd0;

  assign sel_2976 = 32'sd0;

  assign sel_2977 = 32'sd0;

  assign sel_2978 = 32'sd0;

  assign sel_2979 = 32'sd0;

  assign sel_2980 = 32'sd0;

  assign sel_2981 = 32'sd0;

  assign s_239 = 32'sd11;

  assign sel_1_519 = (s_18 == 1'b0 ? sel_2981 :
              s_239);

  assign sel_2982 = 32'sd0;

  assign sel_1_520 = (s_19 == 1'b0 ? sel_1_519 :
              sel_2982);

  assign sel_2983 = 32'sd0;

  assign sel_1_521 = (s_20 == 1'b0 ? sel_1_520 :
              sel_2983);

  assign sel_2984 = 32'sd0;

  assign sel_2985 = 32'sd0;

  assign sel_2986 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_521, sel_2970, sel_2971, sel_2972, sel_2973, sel_2974,
       sel_2975, sel_2976, sel_2977, sel_2978, sel_2979, sel_2980, sel_2984,
       sel_2985, sel_2986) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10764_sel_1 = sel_2985;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10764_sel_1 = sel_2984;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10764_sel_1 = sel_1_521;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10764_sel_1 = sel_2980;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10764_sel_1 = sel_2979;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10764_sel_1 = sel_2978;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10764_sel_1 = sel_2977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10764_sel_1 = sel_2976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10764_sel_1 = sel_2975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10764_sel_1 = sel_2974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10764_sel_1 = sel_2973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10764_sel_1 = sel_2972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10764_sel_1 = sel_2971;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10764_sel_1 = sel_2970;
        end
      default :
        begin
          p10764_sel_1 = sel_2986;
        end
    endcase
    sel_1_522 = p10764_sel_1;
  end

  assign tmp_208 = functionOutput_16[sel_1_522];

  assign sel_2987 = 1'b0;

  assign sel_2988 = 1'b0;

  assign sel_2989 = 1'b0;

  assign sel_2990 = 1'b0;

  assign sel_2991 = 1'b0;

  assign sel_2992 = 1'b0;

  assign sel_2993 = 1'b0;

  assign sel_2994 = 1'b0;

  assign sel_2995 = 1'b0;

  assign sel_2996 = 1'b0;

  assign sel_2997 = 1'b0;

  assign sel_2998 = 1'b0;

  assign s_240 = 1'b1;

  assign sel_2_545 = (s_18 == 1'b0 ? sel_2998 :
              s_240);

  assign sel_2999 = 1'b0;

  assign sel_2_546 = (s_19 == 1'b0 ? sel_2_545 :
              sel_2999);

  assign sel_3000 = 1'b0;

  assign sel_2_547 = (s_20 == 1'b0 ? sel_2_546 :
              sel_3000);

  assign sel_3001 = 1'b0;

  assign sel_3002 = 1'b0;

  assign sel_3003 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2987, sel_2988, sel_2989, sel_2990, sel_2991, sel_2992,
       sel_2993, sel_2994, sel_2995, sel_2996, sel_2997, sel_2_547, sel_3001,
       sel_3002, sel_3003) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4399_sel_2 = sel_3002;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4399_sel_2 = sel_3001;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4399_sel_2 = sel_2_547;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4399_sel_2 = sel_2997;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4399_sel_2 = sel_2996;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4399_sel_2 = sel_2995;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4399_sel_2 = sel_2994;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4399_sel_2 = sel_2993;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4399_sel_2 = sel_2992;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4399_sel_2 = sel_2991;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4399_sel_2 = sel_2990;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4399_sel_2 = sel_2989;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4399_sel_2 = sel_2988;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4399_sel_2 = sel_2987;
        end
      default :
        begin
          p4399_sel_2 = sel_3003;
        end
    endcase
    sel_2_548 = p4399_sel_2;
  end

  always @* begin
    p4398cont_bits_21_cont_bits_21[11] = cont_bits_21_11[11];
    if (sel_2_548) begin
      p4398cont_bits_21_cont_bits_21[11] = tmp_208;
    end
    cont_bits_21_12[0] = cont_bits_21_11[0];
    cont_bits_21_12[1] = cont_bits_21_11[1];
    cont_bits_21_12[2] = cont_bits_21_11[2];
    cont_bits_21_12[3] = cont_bits_21_11[3];
    cont_bits_21_12[4] = cont_bits_21_11[4];
    cont_bits_21_12[5] = cont_bits_21_11[5];
    cont_bits_21_12[6] = cont_bits_21_11[6];
    cont_bits_21_12[7] = cont_bits_21_11[7];
    cont_bits_21_12[8] = cont_bits_21_11[8];
    cont_bits_21_12[9] = cont_bits_21_11[9];
    cont_bits_21_12[10] = cont_bits_21_11[10];
    cont_bits_21_12[11] = p4398cont_bits_21_cont_bits_21[11];
  end

  assign sel_3004 = 32'sd0;

  assign sel_3005 = 32'sd0;

  assign sel_3006 = 32'sd0;

  assign sel_3007 = 32'sd0;

  assign sel_3008 = 32'sd0;

  assign sel_3009 = 32'sd0;

  assign sel_3010 = 32'sd0;

  assign sel_3011 = 32'sd0;

  assign sel_3012 = 32'sd0;

  assign sel_3013 = 32'sd0;

  assign sel_3014 = 32'sd0;

  assign sel_3015 = 32'sd0;

  assign s_241 = 32'sd0;

  assign sel_1_523 = (s_18 == 1'b0 ? sel_3015 :
              s_241);

  assign sel_3016 = 32'sd0;

  assign sel_1_524 = (s_19 == 1'b0 ? sel_1_523 :
              sel_3016);

  assign sel_3017 = 32'sd0;

  assign sel_1_525 = (s_20 == 1'b0 ? sel_1_524 :
              sel_3017);

  assign sel_3018 = 32'sd0;

  assign sel_3019 = 32'sd0;

  assign sel_3020 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_525, sel_3004, sel_3005, sel_3006, sel_3007, sel_3008,
       sel_3009, sel_3010, sel_3011, sel_3012, sel_3013, sel_3014, sel_3018,
       sel_3019, sel_3020) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2515_sel_1 = sel_3019;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2515_sel_1 = sel_3018;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2515_sel_1 = sel_1_525;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2515_sel_1 = sel_3014;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2515_sel_1 = sel_3013;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2515_sel_1 = sel_3012;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2515_sel_1 = sel_3011;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2515_sel_1 = sel_3010;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2515_sel_1 = sel_3009;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2515_sel_1 = sel_3008;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2515_sel_1 = sel_3007;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2515_sel_1 = sel_3006;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2515_sel_1 = sel_3005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2515_sel_1 = sel_3004;
        end
      default :
        begin
          p2515_sel_1 = sel_3020;
        end
    endcase
    sel_1_526 = p2515_sel_1;
  end

  assign cont_bits_21_13 = cont_bits_21_12[sel_1_526];

  assign sel_1_527 = (s_18 == 1'b0 ? sel_1_474 :
              cont_bits_21_13);

  assign cont_bits_12[0] = 1'b0;
  assign cont_bits_12[1] = 1'b0;
  assign cont_bits_12[2] = 1'b0;
  assign cont_bits_12[3] = 1'b0;
  assign cont_bits_12[4] = 1'b0;
  assign cont_bits_12[5] = 1'b0;
  assign cont_bits_12[6] = 1'b0;
  assign cont_bits_12[7] = 1'b0;
  assign cont_bits_12[8] = 1'b0;
  assign cont_bits_12[9] = 1'b0;
  assign cont_bits_12[10] = 1'b0;
  assign cont_bits_12[11] = 1'b0;

  assign tmp_209 = (s_13 == 1'b0 ? v1_2 :
              r_v12);

  assign tmp_210 = (s_14 == 1'b0 ? tmp_209 :
              r_v12);

  assign tmp_211 = (s_15 == 1'b0 ? tmp_210 :
              r_v12);

  assign tmp_212 = (s_16 == 1'b0 ? tmp_211 :
              r_v12);

  assign tmp_213 = (s_17 == 1'b0 ? tmp_212 :
              r_v12);

  assign tmp_214 = (s_18 == 1'b0 ? tmp_213 :
              r_v12);

  assign tmp_215 = (s_19 == 1'b0 ? tmp_214 :
              r_v12);

  assign tmp_216 = (s_20 == 1'b0 ? tmp_215 :
              r_v12);

  always @(is_SPI_MNGR_36, r_v12, tmp_216, v1_2) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p60_tmp = tmp_216;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p60_tmp = v1_2;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p60_tmp = r_v12;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p60_tmp = r_v12;
        end
      default :
        begin
          p60_tmp = r_v12;
        end
    endcase
    tmp_217 = p60_tmp;
  end

  always @(posedge clk)
    begin : r_v12_reg_process
      if (rst == 1'b1) begin
        r_v12 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v12 <= tmp_217;
        end
      end
    end

  simfcn1 u_simfcn1_6 (.vx(r_v12),  // uint16
                       .cont_bits2_0(functionOutput_0_6),  // boolean
                       .cont_bits2_1(functionOutput_1_6),  // boolean
                       .cont_bits2_2(functionOutput_2_6),  // boolean
                       .cont_bits2_3(functionOutput_3_6),  // boolean
                       .cont_bits2_4(functionOutput_4_6),  // boolean
                       .cont_bits2_5(functionOutput_5_6),  // boolean
                       .cont_bits2_6(functionOutput_6_6),  // boolean
                       .cont_bits2_7(functionOutput_7_6),  // boolean
                       .cont_bits2_8(functionOutput_8_6),  // boolean
                       .cont_bits2_9(functionOutput_9_6),  // boolean
                       .cont_bits2_10(functionOutput_10_6),  // boolean
                       .cont_bits2_11(functionOutput_11_6)  // boolean
                       );

  assign functionOutput_17[0] = functionOutput_0_6;
  assign functionOutput_17[1] = functionOutput_1_6;
  assign functionOutput_17[2] = functionOutput_2_6;
  assign functionOutput_17[3] = functionOutput_3_6;
  assign functionOutput_17[4] = functionOutput_4_6;
  assign functionOutput_17[5] = functionOutput_5_6;
  assign functionOutput_17[6] = functionOutput_6_6;
  assign functionOutput_17[7] = functionOutput_7_6;
  assign functionOutput_17[8] = functionOutput_8_6;
  assign functionOutput_17[9] = functionOutput_9_6;
  assign functionOutput_17[10] = functionOutput_10_6;
  assign functionOutput_17[11] = functionOutput_11_6;

  assign sel_3021 = 32'sd0;

  assign sel_3022 = 32'sd0;

  assign sel_3023 = 32'sd0;

  assign sel_3024 = 32'sd0;

  assign sel_3025 = 32'sd0;

  assign sel_3026 = 32'sd0;

  assign sel_3027 = 32'sd0;

  assign sel_3028 = 32'sd0;

  assign sel_3029 = 32'sd0;

  assign sel_3030 = 32'sd0;

  assign sel_3031 = 32'sd0;

  assign sel_3032 = 32'sd0;

  assign s_242 = 32'sd0;

  assign sel_1_528 = (s_19 == 1'b0 ? sel_3032 :
              s_242);

  assign sel_3033 = 32'sd0;

  assign sel_1_529 = (s_20 == 1'b0 ? sel_1_528 :
              sel_3033);

  assign sel_3034 = 32'sd0;

  assign sel_3035 = 32'sd0;

  assign sel_3036 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_529, sel_3021, sel_3022, sel_3023, sel_3024, sel_3025,
       sel_3026, sel_3027, sel_3028, sel_3029, sel_3030, sel_3031, sel_3034,
       sel_3035, sel_3036) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10866_sel_1 = sel_3035;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10866_sel_1 = sel_3034;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10866_sel_1 = sel_1_529;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10866_sel_1 = sel_3031;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10866_sel_1 = sel_3030;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10866_sel_1 = sel_3029;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10866_sel_1 = sel_3028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10866_sel_1 = sel_3027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10866_sel_1 = sel_3026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10866_sel_1 = sel_3025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10866_sel_1 = sel_3024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10866_sel_1 = sel_3023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10866_sel_1 = sel_3022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10866_sel_1 = sel_3021;
        end
      default :
        begin
          p10866_sel_1 = sel_3036;
        end
    endcase
    sel_1_530 = p10866_sel_1;
  end

  assign tmp_218 = functionOutput_17[sel_1_530];

  assign sel_3037 = 1'b0;

  assign sel_3038 = 1'b0;

  assign sel_3039 = 1'b0;

  assign sel_3040 = 1'b0;

  assign sel_3041 = 1'b0;

  assign sel_3042 = 1'b0;

  assign sel_3043 = 1'b0;

  assign sel_3044 = 1'b0;

  assign sel_3045 = 1'b0;

  assign sel_3046 = 1'b0;

  assign sel_3047 = 1'b0;

  assign sel_3048 = 1'b0;

  assign s_243 = 1'b1;

  assign sel_2_549 = (s_19 == 1'b0 ? sel_3048 :
              s_243);

  assign sel_3049 = 1'b0;

  assign sel_2_550 = (s_20 == 1'b0 ? sel_2_549 :
              sel_3049);

  assign sel_3050 = 1'b0;

  assign sel_3051 = 1'b0;

  assign sel_3052 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_550, sel_3037, sel_3038, sel_3039, sel_3040, sel_3041,
       sel_3042, sel_3043, sel_3044, sel_3045, sel_3046, sel_3047, sel_3050,
       sel_3051, sel_3052) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7633_sel_2 = sel_3051;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7633_sel_2 = sel_3050;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7633_sel_2 = sel_2_550;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7633_sel_2 = sel_3047;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7633_sel_2 = sel_3046;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7633_sel_2 = sel_3045;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7633_sel_2 = sel_3044;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7633_sel_2 = sel_3043;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7633_sel_2 = sel_3042;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7633_sel_2 = sel_3041;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7633_sel_2 = sel_3040;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7633_sel_2 = sel_3039;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7633_sel_2 = sel_3038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7633_sel_2 = sel_3037;
        end
      default :
        begin
          p7633_sel_2 = sel_3052;
        end
    endcase
    sel_2_551 = p7633_sel_2;
  end

  always @* begin
    p7632cont_bits_12_cont_bits_12[0] = cont_bits_12[0];
    if (sel_2_551) begin
      p7632cont_bits_12_cont_bits_12[0] = tmp_218;
    end
    cont_bits_12_1[0] = p7632cont_bits_12_cont_bits_12[0];
    cont_bits_12_1[1] = cont_bits_12[1];
    cont_bits_12_1[2] = cont_bits_12[2];
    cont_bits_12_1[3] = cont_bits_12[3];
    cont_bits_12_1[4] = cont_bits_12[4];
    cont_bits_12_1[5] = cont_bits_12[5];
    cont_bits_12_1[6] = cont_bits_12[6];
    cont_bits_12_1[7] = cont_bits_12[7];
    cont_bits_12_1[8] = cont_bits_12[8];
    cont_bits_12_1[9] = cont_bits_12[9];
    cont_bits_12_1[10] = cont_bits_12[10];
    cont_bits_12_1[11] = cont_bits_12[11];
  end

  assign sel_3053 = 32'sd0;

  assign sel_3054 = 32'sd0;

  assign sel_3055 = 32'sd0;

  assign sel_3056 = 32'sd0;

  assign sel_3057 = 32'sd0;

  assign sel_3058 = 32'sd0;

  assign sel_3059 = 32'sd0;

  assign sel_3060 = 32'sd0;

  assign sel_3061 = 32'sd0;

  assign sel_3062 = 32'sd0;

  assign sel_3063 = 32'sd0;

  assign sel_3064 = 32'sd0;

  assign s_244 = 32'sd1;

  assign sel_1_531 = (s_19 == 1'b0 ? sel_3064 :
              s_244);

  assign sel_3065 = 32'sd0;

  assign sel_1_532 = (s_20 == 1'b0 ? sel_1_531 :
              sel_3065);

  assign sel_3066 = 32'sd0;

  assign sel_3067 = 32'sd0;

  assign sel_3068 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_532, sel_3053, sel_3054, sel_3055, sel_3056, sel_3057,
       sel_3058, sel_3059, sel_3060, sel_3061, sel_3062, sel_3063, sel_3066,
       sel_3067, sel_3068) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11019_sel_1 = sel_3067;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11019_sel_1 = sel_3066;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11019_sel_1 = sel_1_532;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11019_sel_1 = sel_3063;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11019_sel_1 = sel_3062;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11019_sel_1 = sel_3061;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11019_sel_1 = sel_3060;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11019_sel_1 = sel_3059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11019_sel_1 = sel_3058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11019_sel_1 = sel_3057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11019_sel_1 = sel_3056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11019_sel_1 = sel_3055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11019_sel_1 = sel_3054;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11019_sel_1 = sel_3053;
        end
      default :
        begin
          p11019_sel_1 = sel_3068;
        end
    endcase
    sel_1_533 = p11019_sel_1;
  end

  assign tmp_219 = functionOutput_17[sel_1_533];

  assign sel_3069 = 1'b0;

  assign sel_3070 = 1'b0;

  assign sel_3071 = 1'b0;

  assign sel_3072 = 1'b0;

  assign sel_3073 = 1'b0;

  assign sel_3074 = 1'b0;

  assign sel_3075 = 1'b0;

  assign sel_3076 = 1'b0;

  assign sel_3077 = 1'b0;

  assign sel_3078 = 1'b0;

  assign sel_3079 = 1'b0;

  assign sel_3080 = 1'b0;

  assign s_245 = 1'b1;

  assign sel_2_552 = (s_19 == 1'b0 ? sel_3080 :
              s_245);

  assign sel_3081 = 1'b0;

  assign sel_2_553 = (s_20 == 1'b0 ? sel_2_552 :
              sel_3081);

  assign sel_3082 = 1'b0;

  assign sel_3083 = 1'b0;

  assign sel_3084 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_553, sel_3069, sel_3070, sel_3071, sel_3072, sel_3073,
       sel_3074, sel_3075, sel_3076, sel_3077, sel_3078, sel_3079, sel_3082,
       sel_3083, sel_3084) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7546_sel_2 = sel_3083;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7546_sel_2 = sel_3082;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7546_sel_2 = sel_2_553;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7546_sel_2 = sel_3079;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7546_sel_2 = sel_3078;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7546_sel_2 = sel_3077;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7546_sel_2 = sel_3076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7546_sel_2 = sel_3075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7546_sel_2 = sel_3074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7546_sel_2 = sel_3073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7546_sel_2 = sel_3072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7546_sel_2 = sel_3071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7546_sel_2 = sel_3070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7546_sel_2 = sel_3069;
        end
      default :
        begin
          p7546_sel_2 = sel_3084;
        end
    endcase
    sel_2_554 = p7546_sel_2;
  end

  always @* begin
    p7545cont_bits_12_cont_bits_12[1] = cont_bits_12_1[1];
    if (sel_2_554) begin
      p7545cont_bits_12_cont_bits_12[1] = tmp_219;
    end
    cont_bits_12_2[0] = cont_bits_12_1[0];
    cont_bits_12_2[1] = p7545cont_bits_12_cont_bits_12[1];
    cont_bits_12_2[2] = cont_bits_12_1[2];
    cont_bits_12_2[3] = cont_bits_12_1[3];
    cont_bits_12_2[4] = cont_bits_12_1[4];
    cont_bits_12_2[5] = cont_bits_12_1[5];
    cont_bits_12_2[6] = cont_bits_12_1[6];
    cont_bits_12_2[7] = cont_bits_12_1[7];
    cont_bits_12_2[8] = cont_bits_12_1[8];
    cont_bits_12_2[9] = cont_bits_12_1[9];
    cont_bits_12_2[10] = cont_bits_12_1[10];
    cont_bits_12_2[11] = cont_bits_12_1[11];
  end

  assign sel_3085 = 32'sd0;

  assign sel_3086 = 32'sd0;

  assign sel_3087 = 32'sd0;

  assign sel_3088 = 32'sd0;

  assign sel_3089 = 32'sd0;

  assign sel_3090 = 32'sd0;

  assign sel_3091 = 32'sd0;

  assign sel_3092 = 32'sd0;

  assign sel_3093 = 32'sd0;

  assign sel_3094 = 32'sd0;

  assign sel_3095 = 32'sd0;

  assign sel_3096 = 32'sd0;

  assign s_246 = 32'sd2;

  assign sel_1_534 = (s_19 == 1'b0 ? sel_3096 :
              s_246);

  assign sel_3097 = 32'sd0;

  assign sel_1_535 = (s_20 == 1'b0 ? sel_1_534 :
              sel_3097);

  assign sel_3098 = 32'sd0;

  assign sel_3099 = 32'sd0;

  assign sel_3100 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_535, sel_3085, sel_3086, sel_3087, sel_3088, sel_3089,
       sel_3090, sel_3091, sel_3092, sel_3093, sel_3094, sel_3095, sel_3098,
       sel_3099, sel_3100) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11138_sel_1 = sel_3099;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11138_sel_1 = sel_3098;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11138_sel_1 = sel_1_535;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11138_sel_1 = sel_3095;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11138_sel_1 = sel_3094;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11138_sel_1 = sel_3093;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11138_sel_1 = sel_3092;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11138_sel_1 = sel_3091;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11138_sel_1 = sel_3090;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11138_sel_1 = sel_3089;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11138_sel_1 = sel_3088;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11138_sel_1 = sel_3087;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11138_sel_1 = sel_3086;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11138_sel_1 = sel_3085;
        end
      default :
        begin
          p11138_sel_1 = sel_3100;
        end
    endcase
    sel_1_536 = p11138_sel_1;
  end

  assign tmp_220 = functionOutput_17[sel_1_536];

  assign sel_3101 = 1'b0;

  assign sel_3102 = 1'b0;

  assign sel_3103 = 1'b0;

  assign sel_3104 = 1'b0;

  assign sel_3105 = 1'b0;

  assign sel_3106 = 1'b0;

  assign sel_3107 = 1'b0;

  assign sel_3108 = 1'b0;

  assign sel_3109 = 1'b0;

  assign sel_3110 = 1'b0;

  assign sel_3111 = 1'b0;

  assign sel_3112 = 1'b0;

  assign s_247 = 1'b1;

  assign sel_2_555 = (s_19 == 1'b0 ? sel_3112 :
              s_247);

  assign sel_3113 = 1'b0;

  assign sel_2_556 = (s_20 == 1'b0 ? sel_2_555 :
              sel_3113);

  assign sel_3114 = 1'b0;

  assign sel_3115 = 1'b0;

  assign sel_3116 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_556, sel_3101, sel_3102, sel_3103, sel_3104, sel_3105,
       sel_3106, sel_3107, sel_3108, sel_3109, sel_3110, sel_3111, sel_3114,
       sel_3115, sel_3116) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6995_sel_2 = sel_3115;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6995_sel_2 = sel_3114;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6995_sel_2 = sel_2_556;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6995_sel_2 = sel_3111;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6995_sel_2 = sel_3110;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6995_sel_2 = sel_3109;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6995_sel_2 = sel_3108;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6995_sel_2 = sel_3107;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6995_sel_2 = sel_3106;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6995_sel_2 = sel_3105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6995_sel_2 = sel_3104;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6995_sel_2 = sel_3103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6995_sel_2 = sel_3102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6995_sel_2 = sel_3101;
        end
      default :
        begin
          p6995_sel_2 = sel_3116;
        end
    endcase
    sel_2_557 = p6995_sel_2;
  end

  always @* begin
    p6994cont_bits_12_cont_bits_12[2] = cont_bits_12_2[2];
    if (sel_2_557) begin
      p6994cont_bits_12_cont_bits_12[2] = tmp_220;
    end
    cont_bits_12_3[0] = cont_bits_12_2[0];
    cont_bits_12_3[1] = cont_bits_12_2[1];
    cont_bits_12_3[2] = p6994cont_bits_12_cont_bits_12[2];
    cont_bits_12_3[3] = cont_bits_12_2[3];
    cont_bits_12_3[4] = cont_bits_12_2[4];
    cont_bits_12_3[5] = cont_bits_12_2[5];
    cont_bits_12_3[6] = cont_bits_12_2[6];
    cont_bits_12_3[7] = cont_bits_12_2[7];
    cont_bits_12_3[8] = cont_bits_12_2[8];
    cont_bits_12_3[9] = cont_bits_12_2[9];
    cont_bits_12_3[10] = cont_bits_12_2[10];
    cont_bits_12_3[11] = cont_bits_12_2[11];
  end

  assign sel_3117 = 32'sd0;

  assign sel_3118 = 32'sd0;

  assign sel_3119 = 32'sd0;

  assign sel_3120 = 32'sd0;

  assign sel_3121 = 32'sd0;

  assign sel_3122 = 32'sd0;

  assign sel_3123 = 32'sd0;

  assign sel_3124 = 32'sd0;

  assign sel_3125 = 32'sd0;

  assign sel_3126 = 32'sd0;

  assign sel_3127 = 32'sd0;

  assign sel_3128 = 32'sd0;

  assign s_248 = 32'sd3;

  assign sel_1_537 = (s_19 == 1'b0 ? sel_3128 :
              s_248);

  assign sel_3129 = 32'sd0;

  assign sel_1_538 = (s_20 == 1'b0 ? sel_1_537 :
              sel_3129);

  assign sel_3130 = 32'sd0;

  assign sel_3131 = 32'sd0;

  assign sel_3132 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_538, sel_3117, sel_3118, sel_3119, sel_3120, sel_3121,
       sel_3122, sel_3123, sel_3124, sel_3125, sel_3126, sel_3127, sel_3130,
       sel_3131, sel_3132) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10543_sel_1 = sel_3131;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10543_sel_1 = sel_3130;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10543_sel_1 = sel_1_538;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10543_sel_1 = sel_3127;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10543_sel_1 = sel_3126;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10543_sel_1 = sel_3125;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10543_sel_1 = sel_3124;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10543_sel_1 = sel_3123;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10543_sel_1 = sel_3122;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10543_sel_1 = sel_3121;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10543_sel_1 = sel_3120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10543_sel_1 = sel_3119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10543_sel_1 = sel_3118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10543_sel_1 = sel_3117;
        end
      default :
        begin
          p10543_sel_1 = sel_3132;
        end
    endcase
    sel_1_539 = p10543_sel_1;
  end

  assign tmp_221 = functionOutput_17[sel_1_539];

  assign sel_3133 = 1'b0;

  assign sel_3134 = 1'b0;

  assign sel_3135 = 1'b0;

  assign sel_3136 = 1'b0;

  assign sel_3137 = 1'b0;

  assign sel_3138 = 1'b0;

  assign sel_3139 = 1'b0;

  assign sel_3140 = 1'b0;

  assign sel_3141 = 1'b0;

  assign sel_3142 = 1'b0;

  assign sel_3143 = 1'b0;

  assign sel_3144 = 1'b0;

  assign s_249 = 1'b1;

  assign sel_2_558 = (s_19 == 1'b0 ? sel_3144 :
              s_249);

  assign sel_3145 = 1'b0;

  assign sel_2_559 = (s_20 == 1'b0 ? sel_2_558 :
              sel_3145);

  assign sel_3146 = 1'b0;

  assign sel_3147 = 1'b0;

  assign sel_3148 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_559, sel_3133, sel_3134, sel_3135, sel_3136, sel_3137,
       sel_3138, sel_3139, sel_3140, sel_3141, sel_3142, sel_3143, sel_3146,
       sel_3147, sel_3148) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6908_sel_2 = sel_3147;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6908_sel_2 = sel_3146;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6908_sel_2 = sel_2_559;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6908_sel_2 = sel_3143;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6908_sel_2 = sel_3142;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6908_sel_2 = sel_3141;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6908_sel_2 = sel_3140;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6908_sel_2 = sel_3139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6908_sel_2 = sel_3138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6908_sel_2 = sel_3137;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6908_sel_2 = sel_3136;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6908_sel_2 = sel_3135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6908_sel_2 = sel_3134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6908_sel_2 = sel_3133;
        end
      default :
        begin
          p6908_sel_2 = sel_3148;
        end
    endcase
    sel_2_560 = p6908_sel_2;
  end

  always @* begin
    p6907cont_bits_12_cont_bits_12[3] = cont_bits_12_3[3];
    if (sel_2_560) begin
      p6907cont_bits_12_cont_bits_12[3] = tmp_221;
    end
    cont_bits_12_4[0] = cont_bits_12_3[0];
    cont_bits_12_4[1] = cont_bits_12_3[1];
    cont_bits_12_4[2] = cont_bits_12_3[2];
    cont_bits_12_4[3] = p6907cont_bits_12_cont_bits_12[3];
    cont_bits_12_4[4] = cont_bits_12_3[4];
    cont_bits_12_4[5] = cont_bits_12_3[5];
    cont_bits_12_4[6] = cont_bits_12_3[6];
    cont_bits_12_4[7] = cont_bits_12_3[7];
    cont_bits_12_4[8] = cont_bits_12_3[8];
    cont_bits_12_4[9] = cont_bits_12_3[9];
    cont_bits_12_4[10] = cont_bits_12_3[10];
    cont_bits_12_4[11] = cont_bits_12_3[11];
  end

  assign sel_3149 = 32'sd0;

  assign sel_3150 = 32'sd0;

  assign sel_3151 = 32'sd0;

  assign sel_3152 = 32'sd0;

  assign sel_3153 = 32'sd0;

  assign sel_3154 = 32'sd0;

  assign sel_3155 = 32'sd0;

  assign sel_3156 = 32'sd0;

  assign sel_3157 = 32'sd0;

  assign sel_3158 = 32'sd0;

  assign sel_3159 = 32'sd0;

  assign sel_3160 = 32'sd0;

  assign s_250 = 32'sd4;

  assign sel_1_540 = (s_19 == 1'b0 ? sel_3160 :
              s_250);

  assign sel_3161 = 32'sd0;

  assign sel_1_541 = (s_20 == 1'b0 ? sel_1_540 :
              sel_3161);

  assign sel_3162 = 32'sd0;

  assign sel_3163 = 32'sd0;

  assign sel_3164 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_541, sel_3149, sel_3150, sel_3151, sel_3152, sel_3153,
       sel_3154, sel_3155, sel_3156, sel_3157, sel_3158, sel_3159, sel_3162,
       sel_3163, sel_3164) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10458_sel_1 = sel_3163;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10458_sel_1 = sel_3162;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10458_sel_1 = sel_1_541;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10458_sel_1 = sel_3159;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10458_sel_1 = sel_3158;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10458_sel_1 = sel_3157;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10458_sel_1 = sel_3156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10458_sel_1 = sel_3155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10458_sel_1 = sel_3154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10458_sel_1 = sel_3153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10458_sel_1 = sel_3152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10458_sel_1 = sel_3151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10458_sel_1 = sel_3150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10458_sel_1 = sel_3149;
        end
      default :
        begin
          p10458_sel_1 = sel_3164;
        end
    endcase
    sel_1_542 = p10458_sel_1;
  end

  assign tmp_222 = functionOutput_17[sel_1_542];

  assign sel_3165 = 1'b0;

  assign sel_3166 = 1'b0;

  assign sel_3167 = 1'b0;

  assign sel_3168 = 1'b0;

  assign sel_3169 = 1'b0;

  assign sel_3170 = 1'b0;

  assign sel_3171 = 1'b0;

  assign sel_3172 = 1'b0;

  assign sel_3173 = 1'b0;

  assign sel_3174 = 1'b0;

  assign sel_3175 = 1'b0;

  assign sel_3176 = 1'b0;

  assign s_251 = 1'b1;

  assign sel_2_561 = (s_19 == 1'b0 ? sel_3176 :
              s_251);

  assign sel_3177 = 1'b0;

  assign sel_2_562 = (s_20 == 1'b0 ? sel_2_561 :
              sel_3177);

  assign sel_3178 = 1'b0;

  assign sel_3179 = 1'b0;

  assign sel_3180 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_562, sel_3165, sel_3166, sel_3167, sel_3168, sel_3169,
       sel_3170, sel_3171, sel_3172, sel_3173, sel_3174, sel_3175, sel_3178,
       sel_3179, sel_3180) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6388_sel_2 = sel_3179;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6388_sel_2 = sel_3178;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6388_sel_2 = sel_2_562;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6388_sel_2 = sel_3175;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6388_sel_2 = sel_3174;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6388_sel_2 = sel_3173;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6388_sel_2 = sel_3172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6388_sel_2 = sel_3171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6388_sel_2 = sel_3170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6388_sel_2 = sel_3169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6388_sel_2 = sel_3168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6388_sel_2 = sel_3167;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6388_sel_2 = sel_3166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6388_sel_2 = sel_3165;
        end
      default :
        begin
          p6388_sel_2 = sel_3180;
        end
    endcase
    sel_2_563 = p6388_sel_2;
  end

  always @* begin
    p6387cont_bits_12_cont_bits_12[4] = cont_bits_12_4[4];
    if (sel_2_563) begin
      p6387cont_bits_12_cont_bits_12[4] = tmp_222;
    end
    cont_bits_12_5[0] = cont_bits_12_4[0];
    cont_bits_12_5[1] = cont_bits_12_4[1];
    cont_bits_12_5[2] = cont_bits_12_4[2];
    cont_bits_12_5[3] = cont_bits_12_4[3];
    cont_bits_12_5[4] = p6387cont_bits_12_cont_bits_12[4];
    cont_bits_12_5[5] = cont_bits_12_4[5];
    cont_bits_12_5[6] = cont_bits_12_4[6];
    cont_bits_12_5[7] = cont_bits_12_4[7];
    cont_bits_12_5[8] = cont_bits_12_4[8];
    cont_bits_12_5[9] = cont_bits_12_4[9];
    cont_bits_12_5[10] = cont_bits_12_4[10];
    cont_bits_12_5[11] = cont_bits_12_4[11];
  end

  assign sel_3181 = 32'sd0;

  assign sel_3182 = 32'sd0;

  assign sel_3183 = 32'sd0;

  assign sel_3184 = 32'sd0;

  assign sel_3185 = 32'sd0;

  assign sel_3186 = 32'sd0;

  assign sel_3187 = 32'sd0;

  assign sel_3188 = 32'sd0;

  assign sel_3189 = 32'sd0;

  assign sel_3190 = 32'sd0;

  assign sel_3191 = 32'sd0;

  assign sel_3192 = 32'sd0;

  assign s_252 = 32'sd5;

  assign sel_1_543 = (s_19 == 1'b0 ? sel_3192 :
              s_252);

  assign sel_3193 = 32'sd0;

  assign sel_1_544 = (s_20 == 1'b0 ? sel_1_543 :
              sel_3193);

  assign sel_3194 = 32'sd0;

  assign sel_3195 = 32'sd0;

  assign sel_3196 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_544, sel_3181, sel_3182, sel_3183, sel_3184, sel_3185,
       sel_3186, sel_3187, sel_3188, sel_3189, sel_3190, sel_3191, sel_3194,
       sel_3195, sel_3196) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10662_sel_1 = sel_3195;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10662_sel_1 = sel_3194;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10662_sel_1 = sel_1_544;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10662_sel_1 = sel_3191;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10662_sel_1 = sel_3190;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10662_sel_1 = sel_3189;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10662_sel_1 = sel_3188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10662_sel_1 = sel_3187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10662_sel_1 = sel_3186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10662_sel_1 = sel_3185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10662_sel_1 = sel_3184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10662_sel_1 = sel_3183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10662_sel_1 = sel_3182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10662_sel_1 = sel_3181;
        end
      default :
        begin
          p10662_sel_1 = sel_3196;
        end
    endcase
    sel_1_545 = p10662_sel_1;
  end

  assign tmp_223 = functionOutput_17[sel_1_545];

  assign sel_3197 = 1'b0;

  assign sel_3198 = 1'b0;

  assign sel_3199 = 1'b0;

  assign sel_3200 = 1'b0;

  assign sel_3201 = 1'b0;

  assign sel_3202 = 1'b0;

  assign sel_3203 = 1'b0;

  assign sel_3204 = 1'b0;

  assign sel_3205 = 1'b0;

  assign sel_3206 = 1'b0;

  assign sel_3207 = 1'b0;

  assign sel_3208 = 1'b0;

  assign s_253 = 1'b1;

  assign sel_2_564 = (s_19 == 1'b0 ? sel_3208 :
              s_253);

  assign sel_3209 = 1'b0;

  assign sel_2_565 = (s_20 == 1'b0 ? sel_2_564 :
              sel_3209);

  assign sel_3210 = 1'b0;

  assign sel_3211 = 1'b0;

  assign sel_3212 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_565, sel_3197, sel_3198, sel_3199, sel_3200, sel_3201,
       sel_3202, sel_3203, sel_3204, sel_3205, sel_3206, sel_3207, sel_3210,
       sel_3211, sel_3212) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6302_sel_2 = sel_3211;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6302_sel_2 = sel_3210;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6302_sel_2 = sel_2_565;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6302_sel_2 = sel_3207;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6302_sel_2 = sel_3206;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6302_sel_2 = sel_3205;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6302_sel_2 = sel_3204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6302_sel_2 = sel_3203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6302_sel_2 = sel_3202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6302_sel_2 = sel_3201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6302_sel_2 = sel_3200;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6302_sel_2 = sel_3199;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6302_sel_2 = sel_3198;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6302_sel_2 = sel_3197;
        end
      default :
        begin
          p6302_sel_2 = sel_3212;
        end
    endcase
    sel_2_566 = p6302_sel_2;
  end

  always @* begin
    p6301cont_bits_12_cont_bits_12[5] = cont_bits_12_5[5];
    if (sel_2_566) begin
      p6301cont_bits_12_cont_bits_12[5] = tmp_223;
    end
    cont_bits_12_6[0] = cont_bits_12_5[0];
    cont_bits_12_6[1] = cont_bits_12_5[1];
    cont_bits_12_6[2] = cont_bits_12_5[2];
    cont_bits_12_6[3] = cont_bits_12_5[3];
    cont_bits_12_6[4] = cont_bits_12_5[4];
    cont_bits_12_6[5] = p6301cont_bits_12_cont_bits_12[5];
    cont_bits_12_6[6] = cont_bits_12_5[6];
    cont_bits_12_6[7] = cont_bits_12_5[7];
    cont_bits_12_6[8] = cont_bits_12_5[8];
    cont_bits_12_6[9] = cont_bits_12_5[9];
    cont_bits_12_6[10] = cont_bits_12_5[10];
    cont_bits_12_6[11] = cont_bits_12_5[11];
  end

  assign sel_3213 = 32'sd0;

  assign sel_3214 = 32'sd0;

  assign sel_3215 = 32'sd0;

  assign sel_3216 = 32'sd0;

  assign sel_3217 = 32'sd0;

  assign sel_3218 = 32'sd0;

  assign sel_3219 = 32'sd0;

  assign sel_3220 = 32'sd0;

  assign sel_3221 = 32'sd0;

  assign sel_3222 = 32'sd0;

  assign sel_3223 = 32'sd0;

  assign sel_3224 = 32'sd0;

  assign s_254 = 32'sd6;

  assign sel_1_546 = (s_19 == 1'b0 ? sel_3224 :
              s_254);

  assign sel_3225 = 32'sd0;

  assign sel_1_547 = (s_20 == 1'b0 ? sel_1_546 :
              sel_3225);

  assign sel_3226 = 32'sd0;

  assign sel_3227 = 32'sd0;

  assign sel_3228 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_547, sel_3213, sel_3214, sel_3215, sel_3216, sel_3217,
       sel_3218, sel_3219, sel_3220, sel_3221, sel_3222, sel_3223, sel_3226,
       sel_3227, sel_3228) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10934_sel_1 = sel_3227;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10934_sel_1 = sel_3226;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10934_sel_1 = sel_1_547;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10934_sel_1 = sel_3223;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10934_sel_1 = sel_3222;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10934_sel_1 = sel_3221;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10934_sel_1 = sel_3220;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10934_sel_1 = sel_3219;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10934_sel_1 = sel_3218;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10934_sel_1 = sel_3217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10934_sel_1 = sel_3216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10934_sel_1 = sel_3215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10934_sel_1 = sel_3214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10934_sel_1 = sel_3213;
        end
      default :
        begin
          p10934_sel_1 = sel_3228;
        end
    endcase
    sel_1_548 = p10934_sel_1;
  end

  assign tmp_224 = functionOutput_17[sel_1_548];

  assign sel_3229 = 1'b0;

  assign sel_3230 = 1'b0;

  assign sel_3231 = 1'b0;

  assign sel_3232 = 1'b0;

  assign sel_3233 = 1'b0;

  assign sel_3234 = 1'b0;

  assign sel_3235 = 1'b0;

  assign sel_3236 = 1'b0;

  assign sel_3237 = 1'b0;

  assign sel_3238 = 1'b0;

  assign sel_3239 = 1'b0;

  assign sel_3240 = 1'b0;

  assign s_255 = 1'b1;

  assign sel_2_567 = (s_19 == 1'b0 ? sel_3240 :
              s_255);

  assign sel_3241 = 1'b0;

  assign sel_2_568 = (s_20 == 1'b0 ? sel_2_567 :
              sel_3241);

  assign sel_3242 = 1'b0;

  assign sel_3243 = 1'b0;

  assign sel_3244 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_568, sel_3229, sel_3230, sel_3231, sel_3232, sel_3233,
       sel_3234, sel_3235, sel_3236, sel_3237, sel_3238, sel_3239, sel_3242,
       sel_3243, sel_3244) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5782_sel_2 = sel_3243;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5782_sel_2 = sel_3242;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5782_sel_2 = sel_2_568;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5782_sel_2 = sel_3239;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5782_sel_2 = sel_3238;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5782_sel_2 = sel_3237;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5782_sel_2 = sel_3236;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5782_sel_2 = sel_3235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5782_sel_2 = sel_3234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5782_sel_2 = sel_3233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5782_sel_2 = sel_3232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5782_sel_2 = sel_3231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5782_sel_2 = sel_3230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5782_sel_2 = sel_3229;
        end
      default :
        begin
          p5782_sel_2 = sel_3244;
        end
    endcase
    sel_2_569 = p5782_sel_2;
  end

  always @* begin
    p5781cont_bits_12_cont_bits_12[6] = cont_bits_12_6[6];
    if (sel_2_569) begin
      p5781cont_bits_12_cont_bits_12[6] = tmp_224;
    end
    cont_bits_12_7[0] = cont_bits_12_6[0];
    cont_bits_12_7[1] = cont_bits_12_6[1];
    cont_bits_12_7[2] = cont_bits_12_6[2];
    cont_bits_12_7[3] = cont_bits_12_6[3];
    cont_bits_12_7[4] = cont_bits_12_6[4];
    cont_bits_12_7[5] = cont_bits_12_6[5];
    cont_bits_12_7[6] = p5781cont_bits_12_cont_bits_12[6];
    cont_bits_12_7[7] = cont_bits_12_6[7];
    cont_bits_12_7[8] = cont_bits_12_6[8];
    cont_bits_12_7[9] = cont_bits_12_6[9];
    cont_bits_12_7[10] = cont_bits_12_6[10];
    cont_bits_12_7[11] = cont_bits_12_6[11];
  end

  assign sel_3245 = 32'sd0;

  assign sel_3246 = 32'sd0;

  assign sel_3247 = 32'sd0;

  assign sel_3248 = 32'sd0;

  assign sel_3249 = 32'sd0;

  assign sel_3250 = 32'sd0;

  assign sel_3251 = 32'sd0;

  assign sel_3252 = 32'sd0;

  assign sel_3253 = 32'sd0;

  assign sel_3254 = 32'sd0;

  assign sel_3255 = 32'sd0;

  assign sel_3256 = 32'sd0;

  assign s_256 = 32'sd7;

  assign sel_1_549 = (s_19 == 1'b0 ? sel_3256 :
              s_256);

  assign sel_3257 = 32'sd0;

  assign sel_1_550 = (s_20 == 1'b0 ? sel_1_549 :
              sel_3257);

  assign sel_3258 = 32'sd0;

  assign sel_3259 = 32'sd0;

  assign sel_3260 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_550, sel_3245, sel_3246, sel_3247, sel_3248, sel_3249,
       sel_3250, sel_3251, sel_3252, sel_3253, sel_3254, sel_3255, sel_3258,
       sel_3259, sel_3260) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11189_sel_1 = sel_3259;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11189_sel_1 = sel_3258;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11189_sel_1 = sel_1_550;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11189_sel_1 = sel_3255;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11189_sel_1 = sel_3254;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11189_sel_1 = sel_3253;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11189_sel_1 = sel_3252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11189_sel_1 = sel_3251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11189_sel_1 = sel_3250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11189_sel_1 = sel_3249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11189_sel_1 = sel_3248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11189_sel_1 = sel_3247;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11189_sel_1 = sel_3246;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11189_sel_1 = sel_3245;
        end
      default :
        begin
          p11189_sel_1 = sel_3260;
        end
    endcase
    sel_1_551 = p11189_sel_1;
  end

  assign tmp_225 = functionOutput_17[sel_1_551];

  assign sel_3261 = 1'b0;

  assign sel_3262 = 1'b0;

  assign sel_3263 = 1'b0;

  assign sel_3264 = 1'b0;

  assign sel_3265 = 1'b0;

  assign sel_3266 = 1'b0;

  assign sel_3267 = 1'b0;

  assign sel_3268 = 1'b0;

  assign sel_3269 = 1'b0;

  assign sel_3270 = 1'b0;

  assign sel_3271 = 1'b0;

  assign sel_3272 = 1'b0;

  assign s_257 = 1'b1;

  assign sel_2_570 = (s_19 == 1'b0 ? sel_3272 :
              s_257);

  assign sel_3273 = 1'b0;

  assign sel_2_571 = (s_20 == 1'b0 ? sel_2_570 :
              sel_3273);

  assign sel_3274 = 1'b0;

  assign sel_3275 = 1'b0;

  assign sel_3276 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_571, sel_3261, sel_3262, sel_3263, sel_3264, sel_3265,
       sel_3266, sel_3267, sel_3268, sel_3269, sel_3270, sel_3271, sel_3274,
       sel_3275, sel_3276) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5696_sel_2 = sel_3275;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5696_sel_2 = sel_3274;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5696_sel_2 = sel_2_571;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5696_sel_2 = sel_3271;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5696_sel_2 = sel_3270;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5696_sel_2 = sel_3269;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5696_sel_2 = sel_3268;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5696_sel_2 = sel_3267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5696_sel_2 = sel_3266;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5696_sel_2 = sel_3265;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5696_sel_2 = sel_3264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5696_sel_2 = sel_3263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5696_sel_2 = sel_3262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5696_sel_2 = sel_3261;
        end
      default :
        begin
          p5696_sel_2 = sel_3276;
        end
    endcase
    sel_2_572 = p5696_sel_2;
  end

  always @* begin
    p5695cont_bits_12_cont_bits_12[7] = cont_bits_12_7[7];
    if (sel_2_572) begin
      p5695cont_bits_12_cont_bits_12[7] = tmp_225;
    end
    cont_bits_12_8[0] = cont_bits_12_7[0];
    cont_bits_12_8[1] = cont_bits_12_7[1];
    cont_bits_12_8[2] = cont_bits_12_7[2];
    cont_bits_12_8[3] = cont_bits_12_7[3];
    cont_bits_12_8[4] = cont_bits_12_7[4];
    cont_bits_12_8[5] = cont_bits_12_7[5];
    cont_bits_12_8[6] = cont_bits_12_7[6];
    cont_bits_12_8[7] = p5695cont_bits_12_cont_bits_12[7];
    cont_bits_12_8[8] = cont_bits_12_7[8];
    cont_bits_12_8[9] = cont_bits_12_7[9];
    cont_bits_12_8[10] = cont_bits_12_7[10];
    cont_bits_12_8[11] = cont_bits_12_7[11];
  end

  assign sel_3277 = 32'sd0;

  assign sel_3278 = 32'sd0;

  assign sel_3279 = 32'sd0;

  assign sel_3280 = 32'sd0;

  assign sel_3281 = 32'sd0;

  assign sel_3282 = 32'sd0;

  assign sel_3283 = 32'sd0;

  assign sel_3284 = 32'sd0;

  assign sel_3285 = 32'sd0;

  assign sel_3286 = 32'sd0;

  assign sel_3287 = 32'sd0;

  assign sel_3288 = 32'sd0;

  assign s_258 = 32'sd8;

  assign sel_1_552 = (s_19 == 1'b0 ? sel_3288 :
              s_258);

  assign sel_3289 = 32'sd0;

  assign sel_1_553 = (s_20 == 1'b0 ? sel_1_552 :
              sel_3289);

  assign sel_3290 = 32'sd0;

  assign sel_3291 = 32'sd0;

  assign sel_3292 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_553, sel_3277, sel_3278, sel_3279, sel_3280, sel_3281,
       sel_3282, sel_3283, sel_3284, sel_3285, sel_3286, sel_3287, sel_3290,
       sel_3291, sel_3292) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10951_sel_1 = sel_3291;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10951_sel_1 = sel_3290;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10951_sel_1 = sel_1_553;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10951_sel_1 = sel_3287;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10951_sel_1 = sel_3286;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10951_sel_1 = sel_3285;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10951_sel_1 = sel_3284;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10951_sel_1 = sel_3283;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10951_sel_1 = sel_3282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10951_sel_1 = sel_3281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10951_sel_1 = sel_3280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10951_sel_1 = sel_3279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10951_sel_1 = sel_3278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10951_sel_1 = sel_3277;
        end
      default :
        begin
          p10951_sel_1 = sel_3292;
        end
    endcase
    sel_1_554 = p10951_sel_1;
  end

  assign tmp_226 = functionOutput_17[sel_1_554];

  assign sel_3293 = 1'b0;

  assign sel_3294 = 1'b0;

  assign sel_3295 = 1'b0;

  assign sel_3296 = 1'b0;

  assign sel_3297 = 1'b0;

  assign sel_3298 = 1'b0;

  assign sel_3299 = 1'b0;

  assign sel_3300 = 1'b0;

  assign sel_3301 = 1'b0;

  assign sel_3302 = 1'b0;

  assign sel_3303 = 1'b0;

  assign sel_3304 = 1'b0;

  assign s_259 = 1'b1;

  assign sel_2_573 = (s_19 == 1'b0 ? sel_3304 :
              s_259);

  assign sel_3305 = 1'b0;

  assign sel_2_574 = (s_20 == 1'b0 ? sel_2_573 :
              sel_3305);

  assign sel_3306 = 1'b0;

  assign sel_3307 = 1'b0;

  assign sel_3308 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_574, sel_3293, sel_3294, sel_3295, sel_3296, sel_3297,
       sel_3298, sel_3299, sel_3300, sel_3301, sel_3302, sel_3303, sel_3306,
       sel_3307, sel_3308) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5176_sel_2 = sel_3307;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5176_sel_2 = sel_3306;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5176_sel_2 = sel_2_574;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5176_sel_2 = sel_3303;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5176_sel_2 = sel_3302;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5176_sel_2 = sel_3301;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5176_sel_2 = sel_3300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5176_sel_2 = sel_3299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5176_sel_2 = sel_3298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5176_sel_2 = sel_3297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5176_sel_2 = sel_3296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5176_sel_2 = sel_3295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5176_sel_2 = sel_3294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5176_sel_2 = sel_3293;
        end
      default :
        begin
          p5176_sel_2 = sel_3308;
        end
    endcase
    sel_2_575 = p5176_sel_2;
  end

  always @* begin
    p5175cont_bits_12_cont_bits_12[8] = cont_bits_12_8[8];
    if (sel_2_575) begin
      p5175cont_bits_12_cont_bits_12[8] = tmp_226;
    end
    cont_bits_12_9[0] = cont_bits_12_8[0];
    cont_bits_12_9[1] = cont_bits_12_8[1];
    cont_bits_12_9[2] = cont_bits_12_8[2];
    cont_bits_12_9[3] = cont_bits_12_8[3];
    cont_bits_12_9[4] = cont_bits_12_8[4];
    cont_bits_12_9[5] = cont_bits_12_8[5];
    cont_bits_12_9[6] = cont_bits_12_8[6];
    cont_bits_12_9[7] = cont_bits_12_8[7];
    cont_bits_12_9[8] = p5175cont_bits_12_cont_bits_12[8];
    cont_bits_12_9[9] = cont_bits_12_8[9];
    cont_bits_12_9[10] = cont_bits_12_8[10];
    cont_bits_12_9[11] = cont_bits_12_8[11];
  end

  assign sel_3309 = 32'sd0;

  assign sel_3310 = 32'sd0;

  assign sel_3311 = 32'sd0;

  assign sel_3312 = 32'sd0;

  assign sel_3313 = 32'sd0;

  assign sel_3314 = 32'sd0;

  assign sel_3315 = 32'sd0;

  assign sel_3316 = 32'sd0;

  assign sel_3317 = 32'sd0;

  assign sel_3318 = 32'sd0;

  assign sel_3319 = 32'sd0;

  assign sel_3320 = 32'sd0;

  assign s_260 = 32'sd9;

  assign sel_1_555 = (s_19 == 1'b0 ? sel_3320 :
              s_260);

  assign sel_3321 = 32'sd0;

  assign sel_1_556 = (s_20 == 1'b0 ? sel_1_555 :
              sel_3321);

  assign sel_3322 = 32'sd0;

  assign sel_3323 = 32'sd0;

  assign sel_3324 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_556, sel_3309, sel_3310, sel_3311, sel_3312, sel_3313,
       sel_3314, sel_3315, sel_3316, sel_3317, sel_3318, sel_3319, sel_3322,
       sel_3323, sel_3324) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10917_sel_1 = sel_3323;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10917_sel_1 = sel_3322;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10917_sel_1 = sel_1_556;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10917_sel_1 = sel_3319;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10917_sel_1 = sel_3318;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10917_sel_1 = sel_3317;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10917_sel_1 = sel_3316;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10917_sel_1 = sel_3315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10917_sel_1 = sel_3314;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10917_sel_1 = sel_3313;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10917_sel_1 = sel_3312;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10917_sel_1 = sel_3311;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10917_sel_1 = sel_3310;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10917_sel_1 = sel_3309;
        end
      default :
        begin
          p10917_sel_1 = sel_3324;
        end
    endcase
    sel_1_557 = p10917_sel_1;
  end

  assign tmp_227 = functionOutput_17[sel_1_557];

  assign sel_3325 = 1'b0;

  assign sel_3326 = 1'b0;

  assign sel_3327 = 1'b0;

  assign sel_3328 = 1'b0;

  assign sel_3329 = 1'b0;

  assign sel_3330 = 1'b0;

  assign sel_3331 = 1'b0;

  assign sel_3332 = 1'b0;

  assign sel_3333 = 1'b0;

  assign sel_3334 = 1'b0;

  assign sel_3335 = 1'b0;

  assign sel_3336 = 1'b0;

  assign s_261 = 1'b1;

  assign sel_2_576 = (s_19 == 1'b0 ? sel_3336 :
              s_261);

  assign sel_3337 = 1'b0;

  assign sel_2_577 = (s_20 == 1'b0 ? sel_2_576 :
              sel_3337);

  assign sel_3338 = 1'b0;

  assign sel_3339 = 1'b0;

  assign sel_3340 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_577, sel_3325, sel_3326, sel_3327, sel_3328, sel_3329,
       sel_3330, sel_3331, sel_3332, sel_3333, sel_3334, sel_3335, sel_3338,
       sel_3339, sel_3340) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5090_sel_2 = sel_3339;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5090_sel_2 = sel_3338;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5090_sel_2 = sel_2_577;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5090_sel_2 = sel_3335;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5090_sel_2 = sel_3334;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5090_sel_2 = sel_3333;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5090_sel_2 = sel_3332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5090_sel_2 = sel_3331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5090_sel_2 = sel_3330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5090_sel_2 = sel_3329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5090_sel_2 = sel_3328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5090_sel_2 = sel_3327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5090_sel_2 = sel_3326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5090_sel_2 = sel_3325;
        end
      default :
        begin
          p5090_sel_2 = sel_3340;
        end
    endcase
    sel_2_578 = p5090_sel_2;
  end

  always @* begin
    p5089cont_bits_12_cont_bits_12[9] = cont_bits_12_9[9];
    if (sel_2_578) begin
      p5089cont_bits_12_cont_bits_12[9] = tmp_227;
    end
    cont_bits_12_10[0] = cont_bits_12_9[0];
    cont_bits_12_10[1] = cont_bits_12_9[1];
    cont_bits_12_10[2] = cont_bits_12_9[2];
    cont_bits_12_10[3] = cont_bits_12_9[3];
    cont_bits_12_10[4] = cont_bits_12_9[4];
    cont_bits_12_10[5] = cont_bits_12_9[5];
    cont_bits_12_10[6] = cont_bits_12_9[6];
    cont_bits_12_10[7] = cont_bits_12_9[7];
    cont_bits_12_10[8] = cont_bits_12_9[8];
    cont_bits_12_10[9] = p5089cont_bits_12_cont_bits_12[9];
    cont_bits_12_10[10] = cont_bits_12_9[10];
    cont_bits_12_10[11] = cont_bits_12_9[11];
  end

  assign sel_3341 = 32'sd0;

  assign sel_3342 = 32'sd0;

  assign sel_3343 = 32'sd0;

  assign sel_3344 = 32'sd0;

  assign sel_3345 = 32'sd0;

  assign sel_3346 = 32'sd0;

  assign sel_3347 = 32'sd0;

  assign sel_3348 = 32'sd0;

  assign sel_3349 = 32'sd0;

  assign sel_3350 = 32'sd0;

  assign sel_3351 = 32'sd0;

  assign sel_3352 = 32'sd0;

  assign s_262 = 32'sd10;

  assign sel_1_558 = (s_19 == 1'b0 ? sel_3352 :
              s_262);

  assign sel_3353 = 32'sd0;

  assign sel_1_559 = (s_20 == 1'b0 ? sel_1_558 :
              sel_3353);

  assign sel_3354 = 32'sd0;

  assign sel_3355 = 32'sd0;

  assign sel_3356 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_559, sel_3341, sel_3342, sel_3343, sel_3344, sel_3345,
       sel_3346, sel_3347, sel_3348, sel_3349, sel_3350, sel_3351, sel_3354,
       sel_3355, sel_3356) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p11206_sel_1 = sel_3355;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p11206_sel_1 = sel_3354;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p11206_sel_1 = sel_1_559;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p11206_sel_1 = sel_3351;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p11206_sel_1 = sel_3350;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p11206_sel_1 = sel_3349;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p11206_sel_1 = sel_3348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p11206_sel_1 = sel_3347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p11206_sel_1 = sel_3346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p11206_sel_1 = sel_3345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p11206_sel_1 = sel_3344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p11206_sel_1 = sel_3343;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p11206_sel_1 = sel_3342;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p11206_sel_1 = sel_3341;
        end
      default :
        begin
          p11206_sel_1 = sel_3356;
        end
    endcase
    sel_1_560 = p11206_sel_1;
  end

  assign tmp_228 = functionOutput_17[sel_1_560];

  assign sel_3357 = 1'b0;

  assign sel_3358 = 1'b0;

  assign sel_3359 = 1'b0;

  assign sel_3360 = 1'b0;

  assign sel_3361 = 1'b0;

  assign sel_3362 = 1'b0;

  assign sel_3363 = 1'b0;

  assign sel_3364 = 1'b0;

  assign sel_3365 = 1'b0;

  assign sel_3366 = 1'b0;

  assign sel_3367 = 1'b0;

  assign sel_3368 = 1'b0;

  assign s_263 = 1'b1;

  assign sel_2_579 = (s_19 == 1'b0 ? sel_3368 :
              s_263);

  assign sel_3369 = 1'b0;

  assign sel_2_580 = (s_20 == 1'b0 ? sel_2_579 :
              sel_3369);

  assign sel_3370 = 1'b0;

  assign sel_3371 = 1'b0;

  assign sel_3372 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_580, sel_3357, sel_3358, sel_3359, sel_3360, sel_3361,
       sel_3362, sel_3363, sel_3364, sel_3365, sel_3366, sel_3367, sel_3370,
       sel_3371, sel_3372) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4570_sel_2 = sel_3371;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4570_sel_2 = sel_3370;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4570_sel_2 = sel_2_580;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4570_sel_2 = sel_3367;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4570_sel_2 = sel_3366;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4570_sel_2 = sel_3365;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4570_sel_2 = sel_3364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4570_sel_2 = sel_3363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4570_sel_2 = sel_3362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4570_sel_2 = sel_3361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4570_sel_2 = sel_3360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4570_sel_2 = sel_3359;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4570_sel_2 = sel_3358;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4570_sel_2 = sel_3357;
        end
      default :
        begin
          p4570_sel_2 = sel_3372;
        end
    endcase
    sel_2_581 = p4570_sel_2;
  end

  always @* begin
    p4569cont_bits_12_cont_bits_12[10] = cont_bits_12_10[10];
    if (sel_2_581) begin
      p4569cont_bits_12_cont_bits_12[10] = tmp_228;
    end
    cont_bits_12_11[0] = cont_bits_12_10[0];
    cont_bits_12_11[1] = cont_bits_12_10[1];
    cont_bits_12_11[2] = cont_bits_12_10[2];
    cont_bits_12_11[3] = cont_bits_12_10[3];
    cont_bits_12_11[4] = cont_bits_12_10[4];
    cont_bits_12_11[5] = cont_bits_12_10[5];
    cont_bits_12_11[6] = cont_bits_12_10[6];
    cont_bits_12_11[7] = cont_bits_12_10[7];
    cont_bits_12_11[8] = cont_bits_12_10[8];
    cont_bits_12_11[9] = cont_bits_12_10[9];
    cont_bits_12_11[10] = p4569cont_bits_12_cont_bits_12[10];
    cont_bits_12_11[11] = cont_bits_12_10[11];
  end

  assign sel_3373 = 32'sd0;

  assign sel_3374 = 32'sd0;

  assign sel_3375 = 32'sd0;

  assign sel_3376 = 32'sd0;

  assign sel_3377 = 32'sd0;

  assign sel_3378 = 32'sd0;

  assign sel_3379 = 32'sd0;

  assign sel_3380 = 32'sd0;

  assign sel_3381 = 32'sd0;

  assign sel_3382 = 32'sd0;

  assign sel_3383 = 32'sd0;

  assign sel_3384 = 32'sd0;

  assign s_264 = 32'sd11;

  assign sel_1_561 = (s_19 == 1'b0 ? sel_3384 :
              s_264);

  assign sel_3385 = 32'sd0;

  assign sel_1_562 = (s_20 == 1'b0 ? sel_1_561 :
              sel_3385);

  assign sel_3386 = 32'sd0;

  assign sel_3387 = 32'sd0;

  assign sel_3388 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_562, sel_3373, sel_3374, sel_3375, sel_3376, sel_3377,
       sel_3378, sel_3379, sel_3380, sel_3381, sel_3382, sel_3383, sel_3386,
       sel_3387, sel_3388) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10747_sel_1 = sel_3387;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10747_sel_1 = sel_3386;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10747_sel_1 = sel_1_562;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10747_sel_1 = sel_3383;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10747_sel_1 = sel_3382;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10747_sel_1 = sel_3381;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10747_sel_1 = sel_3380;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10747_sel_1 = sel_3379;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10747_sel_1 = sel_3378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10747_sel_1 = sel_3377;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10747_sel_1 = sel_3376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10747_sel_1 = sel_3375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10747_sel_1 = sel_3374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10747_sel_1 = sel_3373;
        end
      default :
        begin
          p10747_sel_1 = sel_3388;
        end
    endcase
    sel_1_563 = p10747_sel_1;
  end

  assign tmp_229 = functionOutput_17[sel_1_563];

  assign sel_3389 = 1'b0;

  assign sel_3390 = 1'b0;

  assign sel_3391 = 1'b0;

  assign sel_3392 = 1'b0;

  assign sel_3393 = 1'b0;

  assign sel_3394 = 1'b0;

  assign sel_3395 = 1'b0;

  assign sel_3396 = 1'b0;

  assign sel_3397 = 1'b0;

  assign sel_3398 = 1'b0;

  assign sel_3399 = 1'b0;

  assign sel_3400 = 1'b0;

  assign s_265 = 1'b1;

  assign sel_2_582 = (s_19 == 1'b0 ? sel_3400 :
              s_265);

  assign sel_3401 = 1'b0;

  assign sel_2_583 = (s_20 == 1'b0 ? sel_2_582 :
              sel_3401);

  assign sel_3402 = 1'b0;

  assign sel_3403 = 1'b0;

  assign sel_3404 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_583, sel_3389, sel_3390, sel_3391, sel_3392, sel_3393,
       sel_3394, sel_3395, sel_3396, sel_3397, sel_3398, sel_3399, sel_3402,
       sel_3403, sel_3404) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4484_sel_2 = sel_3403;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4484_sel_2 = sel_3402;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4484_sel_2 = sel_2_583;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4484_sel_2 = sel_3399;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4484_sel_2 = sel_3398;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4484_sel_2 = sel_3397;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4484_sel_2 = sel_3396;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4484_sel_2 = sel_3395;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4484_sel_2 = sel_3394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4484_sel_2 = sel_3393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4484_sel_2 = sel_3392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4484_sel_2 = sel_3391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4484_sel_2 = sel_3390;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4484_sel_2 = sel_3389;
        end
      default :
        begin
          p4484_sel_2 = sel_3404;
        end
    endcase
    sel_2_584 = p4484_sel_2;
  end

  always @* begin
    p4483cont_bits_12_cont_bits_12[11] = cont_bits_12_11[11];
    if (sel_2_584) begin
      p4483cont_bits_12_cont_bits_12[11] = tmp_229;
    end
    cont_bits_12_12[0] = cont_bits_12_11[0];
    cont_bits_12_12[1] = cont_bits_12_11[1];
    cont_bits_12_12[2] = cont_bits_12_11[2];
    cont_bits_12_12[3] = cont_bits_12_11[3];
    cont_bits_12_12[4] = cont_bits_12_11[4];
    cont_bits_12_12[5] = cont_bits_12_11[5];
    cont_bits_12_12[6] = cont_bits_12_11[6];
    cont_bits_12_12[7] = cont_bits_12_11[7];
    cont_bits_12_12[8] = cont_bits_12_11[8];
    cont_bits_12_12[9] = cont_bits_12_11[9];
    cont_bits_12_12[10] = cont_bits_12_11[10];
    cont_bits_12_12[11] = p4483cont_bits_12_cont_bits_12[11];
  end

  assign sel_3405 = 32'sd0;

  assign sel_3406 = 32'sd0;

  assign sel_3407 = 32'sd0;

  assign sel_3408 = 32'sd0;

  assign sel_3409 = 32'sd0;

  assign sel_3410 = 32'sd0;

  assign sel_3411 = 32'sd0;

  assign sel_3412 = 32'sd0;

  assign sel_3413 = 32'sd0;

  assign sel_3414 = 32'sd0;

  assign sel_3415 = 32'sd0;

  assign sel_3416 = 32'sd0;

  assign s_266 = 32'sd0;

  assign sel_1_564 = (s_19 == 1'b0 ? sel_3416 :
              s_266);

  assign sel_3417 = 32'sd0;

  assign sel_1_565 = (s_20 == 1'b0 ? sel_1_564 :
              sel_3417);

  assign sel_3418 = 32'sd0;

  assign sel_3419 = 32'sd0;

  assign sel_3420 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_565, sel_3405, sel_3406, sel_3407, sel_3408, sel_3409,
       sel_3410, sel_3411, sel_3412, sel_3413, sel_3414, sel_3415, sel_3418,
       sel_3419, sel_3420) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1546_sel_1 = sel_3419;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1546_sel_1 = sel_3418;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1546_sel_1 = sel_1_565;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1546_sel_1 = sel_3415;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1546_sel_1 = sel_3414;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1546_sel_1 = sel_3413;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1546_sel_1 = sel_3412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1546_sel_1 = sel_3411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1546_sel_1 = sel_3410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1546_sel_1 = sel_3409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1546_sel_1 = sel_3408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1546_sel_1 = sel_3407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1546_sel_1 = sel_3406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1546_sel_1 = sel_3405;
        end
      default :
        begin
          p1546_sel_1 = sel_3420;
        end
    endcase
    sel_1_566 = p1546_sel_1;
  end

  assign cont_bits_12_13 = cont_bits_12_12[sel_1_566];

  assign sel_1_567 = (s_19 == 1'b0 ? sel_1_527 :
              cont_bits_12_13);

  assign cont_bits[0] = 1'b0;
  assign cont_bits[1] = 1'b0;
  assign cont_bits[2] = 1'b0;
  assign cont_bits[3] = 1'b0;
  assign cont_bits[4] = 1'b0;
  assign cont_bits[5] = 1'b0;
  assign cont_bits[6] = 1'b0;
  assign cont_bits[7] = 1'b0;
  assign cont_bits[8] = 1'b0;
  assign cont_bits[9] = 1'b0;
  assign cont_bits[10] = 1'b0;
  assign cont_bits[11] = 1'b0;

  assign tmp_230 = (s_13 == 1'b0 ? v1_1 :
              r_v11);

  assign tmp_231 = (s_14 == 1'b0 ? tmp_230 :
              r_v11);

  assign tmp_232 = (s_15 == 1'b0 ? tmp_231 :
              r_v11);

  assign tmp_233 = (s_16 == 1'b0 ? tmp_232 :
              r_v11);

  assign tmp_234 = (s_17 == 1'b0 ? tmp_233 :
              r_v11);

  assign tmp_235 = (s_18 == 1'b0 ? tmp_234 :
              r_v11);

  assign tmp_236 = (s_19 == 1'b0 ? tmp_235 :
              r_v11);

  assign tmp_237 = (s_20 == 1'b0 ? tmp_236 :
              r_v11);

  always @(is_SPI_MNGR_36, r_v11, tmp_237, v1_1) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p57_tmp = tmp_237;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p57_tmp = v1_1;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p57_tmp = r_v11;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p57_tmp = r_v11;
        end
      default :
        begin
          p57_tmp = r_v11;
        end
    endcase
    tmp_238 = p57_tmp;
  end

  always @(posedge clk)
    begin : r_v11_reg_process
      if (rst == 1'b1) begin
        r_v11 <= 16'b0000000000000000;
      end
      else begin
        if (enb) begin
          r_v11 <= tmp_238;
        end
      end
    end

  simfcn1 u_simfcn1_7 (.vx(r_v11),  // uint16
                       .cont_bits2_0(functionOutput_0_7),  // boolean
                       .cont_bits2_1(functionOutput_1_7),  // boolean
                       .cont_bits2_2(functionOutput_2_7),  // boolean
                       .cont_bits2_3(functionOutput_3_7),  // boolean
                       .cont_bits2_4(functionOutput_4_7),  // boolean
                       .cont_bits2_5(functionOutput_5_7),  // boolean
                       .cont_bits2_6(functionOutput_6_7),  // boolean
                       .cont_bits2_7(functionOutput_7_7),  // boolean
                       .cont_bits2_8(functionOutput_8_7),  // boolean
                       .cont_bits2_9(functionOutput_9_7),  // boolean
                       .cont_bits2_10(functionOutput_10_7),  // boolean
                       .cont_bits2_11(functionOutput_11_7)  // boolean
                       );

  assign functionOutput_18[0] = functionOutput_0_7;
  assign functionOutput_18[1] = functionOutput_1_7;
  assign functionOutput_18[2] = functionOutput_2_7;
  assign functionOutput_18[3] = functionOutput_3_7;
  assign functionOutput_18[4] = functionOutput_4_7;
  assign functionOutput_18[5] = functionOutput_5_7;
  assign functionOutput_18[6] = functionOutput_6_7;
  assign functionOutput_18[7] = functionOutput_7_7;
  assign functionOutput_18[8] = functionOutput_8_7;
  assign functionOutput_18[9] = functionOutput_9_7;
  assign functionOutput_18[10] = functionOutput_10_7;
  assign functionOutput_18[11] = functionOutput_11_7;

  assign sel_3421 = 32'sd0;

  assign sel_3422 = 32'sd0;

  assign sel_3423 = 32'sd0;

  assign sel_3424 = 32'sd0;

  assign sel_3425 = 32'sd0;

  assign sel_3426 = 32'sd0;

  assign sel_3427 = 32'sd0;

  assign sel_3428 = 32'sd0;

  assign sel_3429 = 32'sd0;

  assign sel_3430 = 32'sd0;

  assign sel_3431 = 32'sd0;

  assign sel_3432 = 32'sd0;

  assign s_267 = 32'sd0;

  assign sel_1_568 = (s_20 == 1'b0 ? sel_3432 :
              s_267);

  assign sel_3433 = 32'sd0;

  assign sel_3434 = 32'sd0;

  assign sel_3435 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_568, sel_3421, sel_3422, sel_3423, sel_3424, sel_3425,
       sel_3426, sel_3427, sel_3428, sel_3429, sel_3430, sel_3431, sel_3433,
       sel_3434, sel_3435) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10220_sel_1 = sel_3434;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10220_sel_1 = sel_3433;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10220_sel_1 = sel_1_568;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10220_sel_1 = sel_3431;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10220_sel_1 = sel_3430;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10220_sel_1 = sel_3429;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10220_sel_1 = sel_3428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10220_sel_1 = sel_3427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10220_sel_1 = sel_3426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10220_sel_1 = sel_3425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10220_sel_1 = sel_3424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10220_sel_1 = sel_3423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10220_sel_1 = sel_3422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10220_sel_1 = sel_3421;
        end
      default :
        begin
          p10220_sel_1 = sel_3435;
        end
    endcase
    sel_1_569 = p10220_sel_1;
  end

  assign tmp_239 = functionOutput_18[sel_1_569];

  assign sel_3436 = 1'b0;

  assign sel_3437 = 1'b0;

  assign sel_3438 = 1'b0;

  assign sel_3439 = 1'b0;

  assign sel_3440 = 1'b0;

  assign sel_3441 = 1'b0;

  assign sel_3442 = 1'b0;

  assign sel_3443 = 1'b0;

  assign sel_3444 = 1'b0;

  assign sel_3445 = 1'b0;

  assign sel_3446 = 1'b0;

  assign sel_3447 = 1'b0;

  assign s_268 = 1'b1;

  assign sel_2_585 = (s_20 == 1'b0 ? sel_3447 :
              s_268);

  assign sel_3448 = 1'b0;

  assign sel_3449 = 1'b0;

  assign sel_3450 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_585, sel_3436, sel_3437, sel_3438, sel_3439, sel_3440,
       sel_3441, sel_3442, sel_3443, sel_3444, sel_3445, sel_3446, sel_3448,
       sel_3449, sel_3450) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7701_sel_2 = sel_3449;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7701_sel_2 = sel_3448;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7701_sel_2 = sel_2_585;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7701_sel_2 = sel_3446;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7701_sel_2 = sel_3445;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7701_sel_2 = sel_3444;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7701_sel_2 = sel_3443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7701_sel_2 = sel_3442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7701_sel_2 = sel_3441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7701_sel_2 = sel_3440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7701_sel_2 = sel_3439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7701_sel_2 = sel_3438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7701_sel_2 = sel_3437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7701_sel_2 = sel_3436;
        end
      default :
        begin
          p7701_sel_2 = sel_3450;
        end
    endcase
    sel_2_586 = p7701_sel_2;
  end

  always @* begin
    p7700cont_bits_cont_bits[0] = cont_bits[0];
    if (sel_2_586) begin
      p7700cont_bits_cont_bits[0] = tmp_239;
    end
    cont_bits_1[0] = p7700cont_bits_cont_bits[0];
    cont_bits_1[1] = cont_bits[1];
    cont_bits_1[2] = cont_bits[2];
    cont_bits_1[3] = cont_bits[3];
    cont_bits_1[4] = cont_bits[4];
    cont_bits_1[5] = cont_bits[5];
    cont_bits_1[6] = cont_bits[6];
    cont_bits_1[7] = cont_bits[7];
    cont_bits_1[8] = cont_bits[8];
    cont_bits_1[9] = cont_bits[9];
    cont_bits_1[10] = cont_bits[10];
    cont_bits_1[11] = cont_bits[11];
  end

  assign sel_3451 = 32'sd0;

  assign sel_3452 = 32'sd0;

  assign sel_3453 = 32'sd0;

  assign sel_3454 = 32'sd0;

  assign sel_3455 = 32'sd0;

  assign sel_3456 = 32'sd0;

  assign sel_3457 = 32'sd0;

  assign sel_3458 = 32'sd0;

  assign sel_3459 = 32'sd0;

  assign sel_3460 = 32'sd0;

  assign sel_3461 = 32'sd0;

  assign sel_3462 = 32'sd0;

  assign s_269 = 32'sd1;

  assign sel_1_570 = (s_20 == 1'b0 ? sel_3462 :
              s_269);

  assign sel_3463 = 32'sd0;

  assign sel_3464 = 32'sd0;

  assign sel_3465 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_570, sel_3451, sel_3452, sel_3453, sel_3454, sel_3455,
       sel_3456, sel_3457, sel_3458, sel_3459, sel_3460, sel_3461, sel_3463,
       sel_3464, sel_3465) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10152_sel_1 = sel_3464;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10152_sel_1 = sel_3463;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10152_sel_1 = sel_1_570;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10152_sel_1 = sel_3461;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10152_sel_1 = sel_3460;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10152_sel_1 = sel_3459;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10152_sel_1 = sel_3458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10152_sel_1 = sel_3457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10152_sel_1 = sel_3456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10152_sel_1 = sel_3455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10152_sel_1 = sel_3454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10152_sel_1 = sel_3453;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10152_sel_1 = sel_3452;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10152_sel_1 = sel_3451;
        end
      default :
        begin
          p10152_sel_1 = sel_3465;
        end
    endcase
    sel_1_571 = p10152_sel_1;
  end

  assign tmp_240 = functionOutput_18[sel_1_571];

  assign sel_3466 = 1'b0;

  assign sel_3467 = 1'b0;

  assign sel_3468 = 1'b0;

  assign sel_3469 = 1'b0;

  assign sel_3470 = 1'b0;

  assign sel_3471 = 1'b0;

  assign sel_3472 = 1'b0;

  assign sel_3473 = 1'b0;

  assign sel_3474 = 1'b0;

  assign sel_3475 = 1'b0;

  assign sel_3476 = 1'b0;

  assign sel_3477 = 1'b0;

  assign s_270 = 1'b1;

  assign sel_2_587 = (s_20 == 1'b0 ? sel_3477 :
              s_270);

  assign sel_3478 = 1'b0;

  assign sel_3479 = 1'b0;

  assign sel_3480 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_587, sel_3466, sel_3467, sel_3468, sel_3469, sel_3470,
       sel_3471, sel_3472, sel_3473, sel_3474, sel_3475, sel_3476, sel_3478,
       sel_3479, sel_3480) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7478_sel_2 = sel_3479;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7478_sel_2 = sel_3478;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7478_sel_2 = sel_2_587;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7478_sel_2 = sel_3476;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7478_sel_2 = sel_3475;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7478_sel_2 = sel_3474;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7478_sel_2 = sel_3473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7478_sel_2 = sel_3472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7478_sel_2 = sel_3471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7478_sel_2 = sel_3470;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7478_sel_2 = sel_3469;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7478_sel_2 = sel_3468;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7478_sel_2 = sel_3467;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7478_sel_2 = sel_3466;
        end
      default :
        begin
          p7478_sel_2 = sel_3480;
        end
    endcase
    sel_2_588 = p7478_sel_2;
  end

  always @* begin
    p7477cont_bits_cont_bits[1] = cont_bits_1[1];
    if (sel_2_588) begin
      p7477cont_bits_cont_bits[1] = tmp_240;
    end
    cont_bits_2[0] = cont_bits_1[0];
    cont_bits_2[1] = p7477cont_bits_cont_bits[1];
    cont_bits_2[2] = cont_bits_1[2];
    cont_bits_2[3] = cont_bits_1[3];
    cont_bits_2[4] = cont_bits_1[4];
    cont_bits_2[5] = cont_bits_1[5];
    cont_bits_2[6] = cont_bits_1[6];
    cont_bits_2[7] = cont_bits_1[7];
    cont_bits_2[8] = cont_bits_1[8];
    cont_bits_2[9] = cont_bits_1[9];
    cont_bits_2[10] = cont_bits_1[10];
    cont_bits_2[11] = cont_bits_1[11];
  end

  assign sel_3481 = 32'sd0;

  assign sel_3482 = 32'sd0;

  assign sel_3483 = 32'sd0;

  assign sel_3484 = 32'sd0;

  assign sel_3485 = 32'sd0;

  assign sel_3486 = 32'sd0;

  assign sel_3487 = 32'sd0;

  assign sel_3488 = 32'sd0;

  assign sel_3489 = 32'sd0;

  assign sel_3490 = 32'sd0;

  assign sel_3491 = 32'sd0;

  assign sel_3492 = 32'sd0;

  assign s_271 = 32'sd2;

  assign sel_1_572 = (s_20 == 1'b0 ? sel_3492 :
              s_271);

  assign sel_3493 = 32'sd0;

  assign sel_3494 = 32'sd0;

  assign sel_3495 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_572, sel_3481, sel_3482, sel_3483, sel_3484, sel_3485,
       sel_3486, sel_3487, sel_3488, sel_3489, sel_3490, sel_3491, sel_3493,
       sel_3494, sel_3495) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10237_sel_1 = sel_3494;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10237_sel_1 = sel_3493;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10237_sel_1 = sel_1_572;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10237_sel_1 = sel_3491;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10237_sel_1 = sel_3490;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10237_sel_1 = sel_3489;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10237_sel_1 = sel_3488;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10237_sel_1 = sel_3487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10237_sel_1 = sel_3486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10237_sel_1 = sel_3485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10237_sel_1 = sel_3484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10237_sel_1 = sel_3483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10237_sel_1 = sel_3482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10237_sel_1 = sel_3481;
        end
      default :
        begin
          p10237_sel_1 = sel_3495;
        end
    endcase
    sel_1_573 = p10237_sel_1;
  end

  assign tmp_241 = functionOutput_18[sel_1_573];

  assign sel_3496 = 1'b0;

  assign sel_3497 = 1'b0;

  assign sel_3498 = 1'b0;

  assign sel_3499 = 1'b0;

  assign sel_3500 = 1'b0;

  assign sel_3501 = 1'b0;

  assign sel_3502 = 1'b0;

  assign sel_3503 = 1'b0;

  assign sel_3504 = 1'b0;

  assign sel_3505 = 1'b0;

  assign sel_3506 = 1'b0;

  assign sel_3507 = 1'b0;

  assign s_272 = 1'b1;

  assign sel_2_589 = (s_20 == 1'b0 ? sel_3507 :
              s_272);

  assign sel_3508 = 1'b0;

  assign sel_3509 = 1'b0;

  assign sel_3510 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_589, sel_3496, sel_3497, sel_3498, sel_3499, sel_3500,
       sel_3501, sel_3502, sel_3503, sel_3504, sel_3505, sel_3506, sel_3508,
       sel_3509, sel_3510) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7063_sel_2 = sel_3509;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7063_sel_2 = sel_3508;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7063_sel_2 = sel_2_589;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7063_sel_2 = sel_3506;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7063_sel_2 = sel_3505;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7063_sel_2 = sel_3504;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7063_sel_2 = sel_3503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7063_sel_2 = sel_3502;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7063_sel_2 = sel_3501;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7063_sel_2 = sel_3500;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7063_sel_2 = sel_3499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7063_sel_2 = sel_3498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7063_sel_2 = sel_3497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7063_sel_2 = sel_3496;
        end
      default :
        begin
          p7063_sel_2 = sel_3510;
        end
    endcase
    sel_2_590 = p7063_sel_2;
  end

  always @* begin
    p7062cont_bits_cont_bits[2] = cont_bits_2[2];
    if (sel_2_590) begin
      p7062cont_bits_cont_bits[2] = tmp_241;
    end
    cont_bits_3[0] = cont_bits_2[0];
    cont_bits_3[1] = cont_bits_2[1];
    cont_bits_3[2] = p7062cont_bits_cont_bits[2];
    cont_bits_3[3] = cont_bits_2[3];
    cont_bits_3[4] = cont_bits_2[4];
    cont_bits_3[5] = cont_bits_2[5];
    cont_bits_3[6] = cont_bits_2[6];
    cont_bits_3[7] = cont_bits_2[7];
    cont_bits_3[8] = cont_bits_2[8];
    cont_bits_3[9] = cont_bits_2[9];
    cont_bits_3[10] = cont_bits_2[10];
    cont_bits_3[11] = cont_bits_2[11];
  end

  assign sel_3511 = 32'sd0;

  assign sel_3512 = 32'sd0;

  assign sel_3513 = 32'sd0;

  assign sel_3514 = 32'sd0;

  assign sel_3515 = 32'sd0;

  assign sel_3516 = 32'sd0;

  assign sel_3517 = 32'sd0;

  assign sel_3518 = 32'sd0;

  assign sel_3519 = 32'sd0;

  assign sel_3520 = 32'sd0;

  assign sel_3521 = 32'sd0;

  assign sel_3522 = 32'sd0;

  assign s_273 = 32'sd3;

  assign sel_1_574 = (s_20 == 1'b0 ? sel_3522 :
              s_273);

  assign sel_3523 = 32'sd0;

  assign sel_3524 = 32'sd0;

  assign sel_3525 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_574, sel_3511, sel_3512, sel_3513, sel_3514, sel_3515,
       sel_3516, sel_3517, sel_3518, sel_3519, sel_3520, sel_3521, sel_3523,
       sel_3524, sel_3525) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10254_sel_1 = sel_3524;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10254_sel_1 = sel_3523;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10254_sel_1 = sel_1_574;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10254_sel_1 = sel_3521;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10254_sel_1 = sel_3520;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10254_sel_1 = sel_3519;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10254_sel_1 = sel_3518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10254_sel_1 = sel_3517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10254_sel_1 = sel_3516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10254_sel_1 = sel_3515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10254_sel_1 = sel_3514;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10254_sel_1 = sel_3513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10254_sel_1 = sel_3512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10254_sel_1 = sel_3511;
        end
      default :
        begin
          p10254_sel_1 = sel_3525;
        end
    endcase
    sel_1_575 = p10254_sel_1;
  end

  assign tmp_242 = functionOutput_18[sel_1_575];

  assign sel_3526 = 1'b0;

  assign sel_3527 = 1'b0;

  assign sel_3528 = 1'b0;

  assign sel_3529 = 1'b0;

  assign sel_3530 = 1'b0;

  assign sel_3531 = 1'b0;

  assign sel_3532 = 1'b0;

  assign sel_3533 = 1'b0;

  assign sel_3534 = 1'b0;

  assign sel_3535 = 1'b0;

  assign sel_3536 = 1'b0;

  assign sel_3537 = 1'b0;

  assign s_274 = 1'b1;

  assign sel_2_591 = (s_20 == 1'b0 ? sel_3537 :
              s_274);

  assign sel_3538 = 1'b0;

  assign sel_3539 = 1'b0;

  assign sel_3540 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_591, sel_3526, sel_3527, sel_3528, sel_3529, sel_3530,
       sel_3531, sel_3532, sel_3533, sel_3534, sel_3535, sel_3536, sel_3538,
       sel_3539, sel_3540) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6840_sel_2 = sel_3539;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6840_sel_2 = sel_3538;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6840_sel_2 = sel_2_591;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6840_sel_2 = sel_3536;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6840_sel_2 = sel_3535;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6840_sel_2 = sel_3534;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6840_sel_2 = sel_3533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6840_sel_2 = sel_3532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6840_sel_2 = sel_3531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6840_sel_2 = sel_3530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6840_sel_2 = sel_3529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6840_sel_2 = sel_3528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6840_sel_2 = sel_3527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6840_sel_2 = sel_3526;
        end
      default :
        begin
          p6840_sel_2 = sel_3540;
        end
    endcase
    sel_2_592 = p6840_sel_2;
  end

  always @* begin
    p6839cont_bits_cont_bits[3] = cont_bits_3[3];
    if (sel_2_592) begin
      p6839cont_bits_cont_bits[3] = tmp_242;
    end
    cont_bits_4[0] = cont_bits_3[0];
    cont_bits_4[1] = cont_bits_3[1];
    cont_bits_4[2] = cont_bits_3[2];
    cont_bits_4[3] = p6839cont_bits_cont_bits[3];
    cont_bits_4[4] = cont_bits_3[4];
    cont_bits_4[5] = cont_bits_3[5];
    cont_bits_4[6] = cont_bits_3[6];
    cont_bits_4[7] = cont_bits_3[7];
    cont_bits_4[8] = cont_bits_3[8];
    cont_bits_4[9] = cont_bits_3[9];
    cont_bits_4[10] = cont_bits_3[10];
    cont_bits_4[11] = cont_bits_3[11];
  end

  assign sel_3541 = 32'sd0;

  assign sel_3542 = 32'sd0;

  assign sel_3543 = 32'sd0;

  assign sel_3544 = 32'sd0;

  assign sel_3545 = 32'sd0;

  assign sel_3546 = 32'sd0;

  assign sel_3547 = 32'sd0;

  assign sel_3548 = 32'sd0;

  assign sel_3549 = 32'sd0;

  assign sel_3550 = 32'sd0;

  assign sel_3551 = 32'sd0;

  assign sel_3552 = 32'sd0;

  assign s_275 = 32'sd4;

  assign sel_1_576 = (s_20 == 1'b0 ? sel_3552 :
              s_275);

  assign sel_3553 = 32'sd0;

  assign sel_3554 = 32'sd0;

  assign sel_3555 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_576, sel_3541, sel_3542, sel_3543, sel_3544, sel_3545,
       sel_3546, sel_3547, sel_3548, sel_3549, sel_3550, sel_3551, sel_3553,
       sel_3554, sel_3555) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10118_sel_1 = sel_3554;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10118_sel_1 = sel_3553;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10118_sel_1 = sel_1_576;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10118_sel_1 = sel_3551;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10118_sel_1 = sel_3550;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10118_sel_1 = sel_3549;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10118_sel_1 = sel_3548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10118_sel_1 = sel_3547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10118_sel_1 = sel_3546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10118_sel_1 = sel_3545;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10118_sel_1 = sel_3544;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10118_sel_1 = sel_3543;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10118_sel_1 = sel_3542;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10118_sel_1 = sel_3541;
        end
      default :
        begin
          p10118_sel_1 = sel_3555;
        end
    endcase
    sel_1_577 = p10118_sel_1;
  end

  assign tmp_243 = functionOutput_18[sel_1_577];

  assign sel_3556 = 1'b0;

  assign sel_3557 = 1'b0;

  assign sel_3558 = 1'b0;

  assign sel_3559 = 1'b0;

  assign sel_3560 = 1'b0;

  assign sel_3561 = 1'b0;

  assign sel_3562 = 1'b0;

  assign sel_3563 = 1'b0;

  assign sel_3564 = 1'b0;

  assign sel_3565 = 1'b0;

  assign sel_3566 = 1'b0;

  assign sel_3567 = 1'b0;

  assign s_276 = 1'b1;

  assign sel_2_593 = (s_20 == 1'b0 ? sel_3567 :
              s_276);

  assign sel_3568 = 1'b0;

  assign sel_3569 = 1'b0;

  assign sel_3570 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_593, sel_3556, sel_3557, sel_3558, sel_3559, sel_3560,
       sel_3561, sel_3562, sel_3563, sel_3564, sel_3565, sel_3566, sel_3568,
       sel_3569, sel_3570) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6456_sel_2 = sel_3569;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6456_sel_2 = sel_3568;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6456_sel_2 = sel_2_593;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6456_sel_2 = sel_3566;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6456_sel_2 = sel_3565;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6456_sel_2 = sel_3564;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6456_sel_2 = sel_3563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6456_sel_2 = sel_3562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6456_sel_2 = sel_3561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6456_sel_2 = sel_3560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6456_sel_2 = sel_3559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6456_sel_2 = sel_3558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6456_sel_2 = sel_3557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6456_sel_2 = sel_3556;
        end
      default :
        begin
          p6456_sel_2 = sel_3570;
        end
    endcase
    sel_2_594 = p6456_sel_2;
  end

  always @* begin
    p6455cont_bits_cont_bits[4] = cont_bits_4[4];
    if (sel_2_594) begin
      p6455cont_bits_cont_bits[4] = tmp_243;
    end
    cont_bits_5[0] = cont_bits_4[0];
    cont_bits_5[1] = cont_bits_4[1];
    cont_bits_5[2] = cont_bits_4[2];
    cont_bits_5[3] = cont_bits_4[3];
    cont_bits_5[4] = p6455cont_bits_cont_bits[4];
    cont_bits_5[5] = cont_bits_4[5];
    cont_bits_5[6] = cont_bits_4[6];
    cont_bits_5[7] = cont_bits_4[7];
    cont_bits_5[8] = cont_bits_4[8];
    cont_bits_5[9] = cont_bits_4[9];
    cont_bits_5[10] = cont_bits_4[10];
    cont_bits_5[11] = cont_bits_4[11];
  end

  assign sel_3571 = 32'sd0;

  assign sel_3572 = 32'sd0;

  assign sel_3573 = 32'sd0;

  assign sel_3574 = 32'sd0;

  assign sel_3575 = 32'sd0;

  assign sel_3576 = 32'sd0;

  assign sel_3577 = 32'sd0;

  assign sel_3578 = 32'sd0;

  assign sel_3579 = 32'sd0;

  assign sel_3580 = 32'sd0;

  assign sel_3581 = 32'sd0;

  assign sel_3582 = 32'sd0;

  assign s_277 = 32'sd5;

  assign sel_1_578 = (s_20 == 1'b0 ? sel_3582 :
              s_277);

  assign sel_3583 = 32'sd0;

  assign sel_3584 = 32'sd0;

  assign sel_3585 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_578, sel_3571, sel_3572, sel_3573, sel_3574, sel_3575,
       sel_3576, sel_3577, sel_3578, sel_3579, sel_3580, sel_3581, sel_3583,
       sel_3584, sel_3585) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10135_sel_1 = sel_3584;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10135_sel_1 = sel_3583;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10135_sel_1 = sel_1_578;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10135_sel_1 = sel_3581;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10135_sel_1 = sel_3580;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10135_sel_1 = sel_3579;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10135_sel_1 = sel_3578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10135_sel_1 = sel_3577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10135_sel_1 = sel_3576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10135_sel_1 = sel_3575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10135_sel_1 = sel_3574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10135_sel_1 = sel_3573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10135_sel_1 = sel_3572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10135_sel_1 = sel_3571;
        end
      default :
        begin
          p10135_sel_1 = sel_3585;
        end
    endcase
    sel_1_579 = p10135_sel_1;
  end

  assign tmp_244 = functionOutput_18[sel_1_579];

  assign sel_3586 = 1'b0;

  assign sel_3587 = 1'b0;

  assign sel_3588 = 1'b0;

  assign sel_3589 = 1'b0;

  assign sel_3590 = 1'b0;

  assign sel_3591 = 1'b0;

  assign sel_3592 = 1'b0;

  assign sel_3593 = 1'b0;

  assign sel_3594 = 1'b0;

  assign sel_3595 = 1'b0;

  assign sel_3596 = 1'b0;

  assign sel_3597 = 1'b0;

  assign s_278 = 1'b1;

  assign sel_2_595 = (s_20 == 1'b0 ? sel_3597 :
              s_278);

  assign sel_3598 = 1'b0;

  assign sel_3599 = 1'b0;

  assign sel_3600 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_595, sel_3586, sel_3587, sel_3588, sel_3589, sel_3590,
       sel_3591, sel_3592, sel_3593, sel_3594, sel_3595, sel_3596, sel_3598,
       sel_3599, sel_3600) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6234_sel_2 = sel_3599;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6234_sel_2 = sel_3598;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6234_sel_2 = sel_2_595;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6234_sel_2 = sel_3596;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6234_sel_2 = sel_3595;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6234_sel_2 = sel_3594;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6234_sel_2 = sel_3593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6234_sel_2 = sel_3592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6234_sel_2 = sel_3591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6234_sel_2 = sel_3590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6234_sel_2 = sel_3589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6234_sel_2 = sel_3588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6234_sel_2 = sel_3587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6234_sel_2 = sel_3586;
        end
      default :
        begin
          p6234_sel_2 = sel_3600;
        end
    endcase
    sel_2_596 = p6234_sel_2;
  end

  always @* begin
    p6233cont_bits_cont_bits[5] = cont_bits_5[5];
    if (sel_2_596) begin
      p6233cont_bits_cont_bits[5] = tmp_244;
    end
    cont_bits_6[0] = cont_bits_5[0];
    cont_bits_6[1] = cont_bits_5[1];
    cont_bits_6[2] = cont_bits_5[2];
    cont_bits_6[3] = cont_bits_5[3];
    cont_bits_6[4] = cont_bits_5[4];
    cont_bits_6[5] = p6233cont_bits_cont_bits[5];
    cont_bits_6[6] = cont_bits_5[6];
    cont_bits_6[7] = cont_bits_5[7];
    cont_bits_6[8] = cont_bits_5[8];
    cont_bits_6[9] = cont_bits_5[9];
    cont_bits_6[10] = cont_bits_5[10];
    cont_bits_6[11] = cont_bits_5[11];
  end

  assign sel_3601 = 32'sd0;

  assign sel_3602 = 32'sd0;

  assign sel_3603 = 32'sd0;

  assign sel_3604 = 32'sd0;

  assign sel_3605 = 32'sd0;

  assign sel_3606 = 32'sd0;

  assign sel_3607 = 32'sd0;

  assign sel_3608 = 32'sd0;

  assign sel_3609 = 32'sd0;

  assign sel_3610 = 32'sd0;

  assign sel_3611 = 32'sd0;

  assign sel_3612 = 32'sd0;

  assign s_279 = 32'sd6;

  assign sel_1_580 = (s_20 == 1'b0 ? sel_3612 :
              s_279);

  assign sel_3613 = 32'sd0;

  assign sel_3614 = 32'sd0;

  assign sel_3615 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_580, sel_3601, sel_3602, sel_3603, sel_3604, sel_3605,
       sel_3606, sel_3607, sel_3608, sel_3609, sel_3610, sel_3611, sel_3613,
       sel_3614, sel_3615) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10271_sel_1 = sel_3614;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10271_sel_1 = sel_3613;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10271_sel_1 = sel_1_580;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10271_sel_1 = sel_3611;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10271_sel_1 = sel_3610;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10271_sel_1 = sel_3609;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10271_sel_1 = sel_3608;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10271_sel_1 = sel_3607;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10271_sel_1 = sel_3606;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10271_sel_1 = sel_3605;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10271_sel_1 = sel_3604;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10271_sel_1 = sel_3603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10271_sel_1 = sel_3602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10271_sel_1 = sel_3601;
        end
      default :
        begin
          p10271_sel_1 = sel_3615;
        end
    endcase
    sel_1_581 = p10271_sel_1;
  end

  assign tmp_245 = functionOutput_18[sel_1_581];

  assign sel_3616 = 1'b0;

  assign sel_3617 = 1'b0;

  assign sel_3618 = 1'b0;

  assign sel_3619 = 1'b0;

  assign sel_3620 = 1'b0;

  assign sel_3621 = 1'b0;

  assign sel_3622 = 1'b0;

  assign sel_3623 = 1'b0;

  assign sel_3624 = 1'b0;

  assign sel_3625 = 1'b0;

  assign sel_3626 = 1'b0;

  assign sel_3627 = 1'b0;

  assign s_280 = 1'b1;

  assign sel_2_597 = (s_20 == 1'b0 ? sel_3627 :
              s_280);

  assign sel_3628 = 1'b0;

  assign sel_3629 = 1'b0;

  assign sel_3630 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_597, sel_3616, sel_3617, sel_3618, sel_3619, sel_3620,
       sel_3621, sel_3622, sel_3623, sel_3624, sel_3625, sel_3626, sel_3628,
       sel_3629, sel_3630) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5850_sel_2 = sel_3629;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5850_sel_2 = sel_3628;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5850_sel_2 = sel_2_597;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5850_sel_2 = sel_3626;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5850_sel_2 = sel_3625;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5850_sel_2 = sel_3624;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5850_sel_2 = sel_3623;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5850_sel_2 = sel_3622;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5850_sel_2 = sel_3621;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5850_sel_2 = sel_3620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5850_sel_2 = sel_3619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5850_sel_2 = sel_3618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5850_sel_2 = sel_3617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5850_sel_2 = sel_3616;
        end
      default :
        begin
          p5850_sel_2 = sel_3630;
        end
    endcase
    sel_2_598 = p5850_sel_2;
  end

  always @* begin
    p5849cont_bits_cont_bits[6] = cont_bits_6[6];
    if (sel_2_598) begin
      p5849cont_bits_cont_bits[6] = tmp_245;
    end
    cont_bits_7[0] = cont_bits_6[0];
    cont_bits_7[1] = cont_bits_6[1];
    cont_bits_7[2] = cont_bits_6[2];
    cont_bits_7[3] = cont_bits_6[3];
    cont_bits_7[4] = cont_bits_6[4];
    cont_bits_7[5] = cont_bits_6[5];
    cont_bits_7[6] = p5849cont_bits_cont_bits[6];
    cont_bits_7[7] = cont_bits_6[7];
    cont_bits_7[8] = cont_bits_6[8];
    cont_bits_7[9] = cont_bits_6[9];
    cont_bits_7[10] = cont_bits_6[10];
    cont_bits_7[11] = cont_bits_6[11];
  end

  assign sel_3631 = 32'sd0;

  assign sel_3632 = 32'sd0;

  assign sel_3633 = 32'sd0;

  assign sel_3634 = 32'sd0;

  assign sel_3635 = 32'sd0;

  assign sel_3636 = 32'sd0;

  assign sel_3637 = 32'sd0;

  assign sel_3638 = 32'sd0;

  assign sel_3639 = 32'sd0;

  assign sel_3640 = 32'sd0;

  assign sel_3641 = 32'sd0;

  assign sel_3642 = 32'sd0;

  assign s_281 = 32'sd7;

  assign sel_1_582 = (s_20 == 1'b0 ? sel_3642 :
              s_281);

  assign sel_3643 = 32'sd0;

  assign sel_3644 = 32'sd0;

  assign sel_3645 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_582, sel_3631, sel_3632, sel_3633, sel_3634, sel_3635,
       sel_3636, sel_3637, sel_3638, sel_3639, sel_3640, sel_3641, sel_3643,
       sel_3644, sel_3645) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10288_sel_1 = sel_3644;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10288_sel_1 = sel_3643;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10288_sel_1 = sel_1_582;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10288_sel_1 = sel_3641;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10288_sel_1 = sel_3640;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10288_sel_1 = sel_3639;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10288_sel_1 = sel_3638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10288_sel_1 = sel_3637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10288_sel_1 = sel_3636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10288_sel_1 = sel_3635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10288_sel_1 = sel_3634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10288_sel_1 = sel_3633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10288_sel_1 = sel_3632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10288_sel_1 = sel_3631;
        end
      default :
        begin
          p10288_sel_1 = sel_3645;
        end
    endcase
    sel_1_583 = p10288_sel_1;
  end

  assign tmp_246 = functionOutput_18[sel_1_583];

  assign sel_3646 = 1'b0;

  assign sel_3647 = 1'b0;

  assign sel_3648 = 1'b0;

  assign sel_3649 = 1'b0;

  assign sel_3650 = 1'b0;

  assign sel_3651 = 1'b0;

  assign sel_3652 = 1'b0;

  assign sel_3653 = 1'b0;

  assign sel_3654 = 1'b0;

  assign sel_3655 = 1'b0;

  assign sel_3656 = 1'b0;

  assign sel_3657 = 1'b0;

  assign s_282 = 1'b1;

  assign sel_2_599 = (s_20 == 1'b0 ? sel_3657 :
              s_282);

  assign sel_3658 = 1'b0;

  assign sel_3659 = 1'b0;

  assign sel_3660 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_599, sel_3646, sel_3647, sel_3648, sel_3649, sel_3650,
       sel_3651, sel_3652, sel_3653, sel_3654, sel_3655, sel_3656, sel_3658,
       sel_3659, sel_3660) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5628_sel_2 = sel_3659;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5628_sel_2 = sel_3658;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5628_sel_2 = sel_2_599;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5628_sel_2 = sel_3656;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5628_sel_2 = sel_3655;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5628_sel_2 = sel_3654;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5628_sel_2 = sel_3653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5628_sel_2 = sel_3652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5628_sel_2 = sel_3651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5628_sel_2 = sel_3650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5628_sel_2 = sel_3649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5628_sel_2 = sel_3648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5628_sel_2 = sel_3647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5628_sel_2 = sel_3646;
        end
      default :
        begin
          p5628_sel_2 = sel_3660;
        end
    endcase
    sel_2_600 = p5628_sel_2;
  end

  always @* begin
    p5627cont_bits_cont_bits[7] = cont_bits_7[7];
    if (sel_2_600) begin
      p5627cont_bits_cont_bits[7] = tmp_246;
    end
    cont_bits_8[0] = cont_bits_7[0];
    cont_bits_8[1] = cont_bits_7[1];
    cont_bits_8[2] = cont_bits_7[2];
    cont_bits_8[3] = cont_bits_7[3];
    cont_bits_8[4] = cont_bits_7[4];
    cont_bits_8[5] = cont_bits_7[5];
    cont_bits_8[6] = cont_bits_7[6];
    cont_bits_8[7] = p5627cont_bits_cont_bits[7];
    cont_bits_8[8] = cont_bits_7[8];
    cont_bits_8[9] = cont_bits_7[9];
    cont_bits_8[10] = cont_bits_7[10];
    cont_bits_8[11] = cont_bits_7[11];
  end

  assign sel_3661 = 32'sd0;

  assign sel_3662 = 32'sd0;

  assign sel_3663 = 32'sd0;

  assign sel_3664 = 32'sd0;

  assign sel_3665 = 32'sd0;

  assign sel_3666 = 32'sd0;

  assign sel_3667 = 32'sd0;

  assign sel_3668 = 32'sd0;

  assign sel_3669 = 32'sd0;

  assign sel_3670 = 32'sd0;

  assign sel_3671 = 32'sd0;

  assign sel_3672 = 32'sd0;

  assign s_283 = 32'sd8;

  assign sel_1_584 = (s_20 == 1'b0 ? sel_3672 :
              s_283);

  assign sel_3673 = 32'sd0;

  assign sel_3674 = 32'sd0;

  assign sel_3675 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_584, sel_3661, sel_3662, sel_3663, sel_3664, sel_3665,
       sel_3666, sel_3667, sel_3668, sel_3669, sel_3670, sel_3671, sel_3673,
       sel_3674, sel_3675) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10305_sel_1 = sel_3674;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10305_sel_1 = sel_3673;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10305_sel_1 = sel_1_584;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10305_sel_1 = sel_3671;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10305_sel_1 = sel_3670;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10305_sel_1 = sel_3669;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10305_sel_1 = sel_3668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10305_sel_1 = sel_3667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10305_sel_1 = sel_3666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10305_sel_1 = sel_3665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10305_sel_1 = sel_3664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10305_sel_1 = sel_3663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10305_sel_1 = sel_3662;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10305_sel_1 = sel_3661;
        end
      default :
        begin
          p10305_sel_1 = sel_3675;
        end
    endcase
    sel_1_585 = p10305_sel_1;
  end

  assign tmp_247 = functionOutput_18[sel_1_585];

  assign sel_3676 = 1'b0;

  assign sel_3677 = 1'b0;

  assign sel_3678 = 1'b0;

  assign sel_3679 = 1'b0;

  assign sel_3680 = 1'b0;

  assign sel_3681 = 1'b0;

  assign sel_3682 = 1'b0;

  assign sel_3683 = 1'b0;

  assign sel_3684 = 1'b0;

  assign sel_3685 = 1'b0;

  assign sel_3686 = 1'b0;

  assign sel_3687 = 1'b0;

  assign s_284 = 1'b1;

  assign sel_2_601 = (s_20 == 1'b0 ? sel_3687 :
              s_284);

  assign sel_3688 = 1'b0;

  assign sel_3689 = 1'b0;

  assign sel_3690 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_601, sel_3676, sel_3677, sel_3678, sel_3679, sel_3680,
       sel_3681, sel_3682, sel_3683, sel_3684, sel_3685, sel_3686, sel_3688,
       sel_3689, sel_3690) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5244_sel_2 = sel_3689;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5244_sel_2 = sel_3688;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5244_sel_2 = sel_2_601;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5244_sel_2 = sel_3686;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5244_sel_2 = sel_3685;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5244_sel_2 = sel_3684;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5244_sel_2 = sel_3683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5244_sel_2 = sel_3682;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5244_sel_2 = sel_3681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5244_sel_2 = sel_3680;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5244_sel_2 = sel_3679;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5244_sel_2 = sel_3678;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5244_sel_2 = sel_3677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5244_sel_2 = sel_3676;
        end
      default :
        begin
          p5244_sel_2 = sel_3690;
        end
    endcase
    sel_2_602 = p5244_sel_2;
  end

  always @* begin
    p5243cont_bits_cont_bits[8] = cont_bits_8[8];
    if (sel_2_602) begin
      p5243cont_bits_cont_bits[8] = tmp_247;
    end
    cont_bits_9[0] = cont_bits_8[0];
    cont_bits_9[1] = cont_bits_8[1];
    cont_bits_9[2] = cont_bits_8[2];
    cont_bits_9[3] = cont_bits_8[3];
    cont_bits_9[4] = cont_bits_8[4];
    cont_bits_9[5] = cont_bits_8[5];
    cont_bits_9[6] = cont_bits_8[6];
    cont_bits_9[7] = cont_bits_8[7];
    cont_bits_9[8] = p5243cont_bits_cont_bits[8];
    cont_bits_9[9] = cont_bits_8[9];
    cont_bits_9[10] = cont_bits_8[10];
    cont_bits_9[11] = cont_bits_8[11];
  end

  assign sel_3691 = 32'sd0;

  assign sel_3692 = 32'sd0;

  assign sel_3693 = 32'sd0;

  assign sel_3694 = 32'sd0;

  assign sel_3695 = 32'sd0;

  assign sel_3696 = 32'sd0;

  assign sel_3697 = 32'sd0;

  assign sel_3698 = 32'sd0;

  assign sel_3699 = 32'sd0;

  assign sel_3700 = 32'sd0;

  assign sel_3701 = 32'sd0;

  assign sel_3702 = 32'sd0;

  assign s_285 = 32'sd9;

  assign sel_1_586 = (s_20 == 1'b0 ? sel_3702 :
              s_285);

  assign sel_3703 = 32'sd0;

  assign sel_3704 = 32'sd0;

  assign sel_3705 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_586, sel_3691, sel_3692, sel_3693, sel_3694, sel_3695,
       sel_3696, sel_3697, sel_3698, sel_3699, sel_3700, sel_3701, sel_3703,
       sel_3704, sel_3705) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10203_sel_1 = sel_3704;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10203_sel_1 = sel_3703;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10203_sel_1 = sel_1_586;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10203_sel_1 = sel_3701;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10203_sel_1 = sel_3700;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10203_sel_1 = sel_3699;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10203_sel_1 = sel_3698;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10203_sel_1 = sel_3697;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10203_sel_1 = sel_3696;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10203_sel_1 = sel_3695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10203_sel_1 = sel_3694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10203_sel_1 = sel_3693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10203_sel_1 = sel_3692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10203_sel_1 = sel_3691;
        end
      default :
        begin
          p10203_sel_1 = sel_3705;
        end
    endcase
    sel_1_587 = p10203_sel_1;
  end

  assign tmp_248 = functionOutput_18[sel_1_587];

  assign sel_3706 = 1'b0;

  assign sel_3707 = 1'b0;

  assign sel_3708 = 1'b0;

  assign sel_3709 = 1'b0;

  assign sel_3710 = 1'b0;

  assign sel_3711 = 1'b0;

  assign sel_3712 = 1'b0;

  assign sel_3713 = 1'b0;

  assign sel_3714 = 1'b0;

  assign sel_3715 = 1'b0;

  assign sel_3716 = 1'b0;

  assign sel_3717 = 1'b0;

  assign s_286 = 1'b1;

  assign sel_2_603 = (s_20 == 1'b0 ? sel_3717 :
              s_286);

  assign sel_3718 = 1'b0;

  assign sel_3719 = 1'b0;

  assign sel_3720 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_603, sel_3706, sel_3707, sel_3708, sel_3709, sel_3710,
       sel_3711, sel_3712, sel_3713, sel_3714, sel_3715, sel_3716, sel_3718,
       sel_3719, sel_3720) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5022_sel_2 = sel_3719;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5022_sel_2 = sel_3718;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5022_sel_2 = sel_2_603;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5022_sel_2 = sel_3716;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5022_sel_2 = sel_3715;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5022_sel_2 = sel_3714;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5022_sel_2 = sel_3713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5022_sel_2 = sel_3712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5022_sel_2 = sel_3711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5022_sel_2 = sel_3710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5022_sel_2 = sel_3709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5022_sel_2 = sel_3708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5022_sel_2 = sel_3707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5022_sel_2 = sel_3706;
        end
      default :
        begin
          p5022_sel_2 = sel_3720;
        end
    endcase
    sel_2_604 = p5022_sel_2;
  end

  always @* begin
    p5021cont_bits_cont_bits[9] = cont_bits_9[9];
    if (sel_2_604) begin
      p5021cont_bits_cont_bits[9] = tmp_248;
    end
    cont_bits_10[0] = cont_bits_9[0];
    cont_bits_10[1] = cont_bits_9[1];
    cont_bits_10[2] = cont_bits_9[2];
    cont_bits_10[3] = cont_bits_9[3];
    cont_bits_10[4] = cont_bits_9[4];
    cont_bits_10[5] = cont_bits_9[5];
    cont_bits_10[6] = cont_bits_9[6];
    cont_bits_10[7] = cont_bits_9[7];
    cont_bits_10[8] = cont_bits_9[8];
    cont_bits_10[9] = p5021cont_bits_cont_bits[9];
    cont_bits_10[10] = cont_bits_9[10];
    cont_bits_10[11] = cont_bits_9[11];
  end

  assign sel_3721 = 32'sd0;

  assign sel_3722 = 32'sd0;

  assign sel_3723 = 32'sd0;

  assign sel_3724 = 32'sd0;

  assign sel_3725 = 32'sd0;

  assign sel_3726 = 32'sd0;

  assign sel_3727 = 32'sd0;

  assign sel_3728 = 32'sd0;

  assign sel_3729 = 32'sd0;

  assign sel_3730 = 32'sd0;

  assign sel_3731 = 32'sd0;

  assign sel_3732 = 32'sd0;

  assign s_287 = 32'sd10;

  assign sel_1_588 = (s_20 == 1'b0 ? sel_3732 :
              s_287);

  assign sel_3733 = 32'sd0;

  assign sel_3734 = 32'sd0;

  assign sel_3735 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_588, sel_3721, sel_3722, sel_3723, sel_3724, sel_3725,
       sel_3726, sel_3727, sel_3728, sel_3729, sel_3730, sel_3731, sel_3733,
       sel_3734, sel_3735) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10067_sel_1 = sel_3734;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10067_sel_1 = sel_3733;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10067_sel_1 = sel_1_588;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10067_sel_1 = sel_3731;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10067_sel_1 = sel_3730;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10067_sel_1 = sel_3729;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10067_sel_1 = sel_3728;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10067_sel_1 = sel_3727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10067_sel_1 = sel_3726;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10067_sel_1 = sel_3725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10067_sel_1 = sel_3724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10067_sel_1 = sel_3723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10067_sel_1 = sel_3722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10067_sel_1 = sel_3721;
        end
      default :
        begin
          p10067_sel_1 = sel_3735;
        end
    endcase
    sel_1_589 = p10067_sel_1;
  end

  assign tmp_249 = functionOutput_18[sel_1_589];

  assign sel_3736 = 1'b0;

  assign sel_3737 = 1'b0;

  assign sel_3738 = 1'b0;

  assign sel_3739 = 1'b0;

  assign sel_3740 = 1'b0;

  assign sel_3741 = 1'b0;

  assign sel_3742 = 1'b0;

  assign sel_3743 = 1'b0;

  assign sel_3744 = 1'b0;

  assign sel_3745 = 1'b0;

  assign sel_3746 = 1'b0;

  assign sel_3747 = 1'b0;

  assign s_288 = 1'b1;

  assign sel_2_605 = (s_20 == 1'b0 ? sel_3747 :
              s_288);

  assign sel_3748 = 1'b0;

  assign sel_3749 = 1'b0;

  assign sel_3750 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_605, sel_3736, sel_3737, sel_3738, sel_3739, sel_3740,
       sel_3741, sel_3742, sel_3743, sel_3744, sel_3745, sel_3746, sel_3748,
       sel_3749, sel_3750) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4638_sel_2 = sel_3749;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4638_sel_2 = sel_3748;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4638_sel_2 = sel_2_605;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4638_sel_2 = sel_3746;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4638_sel_2 = sel_3745;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4638_sel_2 = sel_3744;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4638_sel_2 = sel_3743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4638_sel_2 = sel_3742;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4638_sel_2 = sel_3741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4638_sel_2 = sel_3740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4638_sel_2 = sel_3739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4638_sel_2 = sel_3738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4638_sel_2 = sel_3737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4638_sel_2 = sel_3736;
        end
      default :
        begin
          p4638_sel_2 = sel_3750;
        end
    endcase
    sel_2_606 = p4638_sel_2;
  end

  always @* begin
    p4637cont_bits_cont_bits[10] = cont_bits_10[10];
    if (sel_2_606) begin
      p4637cont_bits_cont_bits[10] = tmp_249;
    end
    cont_bits_11[0] = cont_bits_10[0];
    cont_bits_11[1] = cont_bits_10[1];
    cont_bits_11[2] = cont_bits_10[2];
    cont_bits_11[3] = cont_bits_10[3];
    cont_bits_11[4] = cont_bits_10[4];
    cont_bits_11[5] = cont_bits_10[5];
    cont_bits_11[6] = cont_bits_10[6];
    cont_bits_11[7] = cont_bits_10[7];
    cont_bits_11[8] = cont_bits_10[8];
    cont_bits_11[9] = cont_bits_10[9];
    cont_bits_11[10] = p4637cont_bits_cont_bits[10];
    cont_bits_11[11] = cont_bits_10[11];
  end

  assign sel_3751 = 32'sd0;

  assign sel_3752 = 32'sd0;

  assign sel_3753 = 32'sd0;

  assign sel_3754 = 32'sd0;

  assign sel_3755 = 32'sd0;

  assign sel_3756 = 32'sd0;

  assign sel_3757 = 32'sd0;

  assign sel_3758 = 32'sd0;

  assign sel_3759 = 32'sd0;

  assign sel_3760 = 32'sd0;

  assign sel_3761 = 32'sd0;

  assign sel_3762 = 32'sd0;

  assign s_289 = 32'sd11;

  assign sel_1_590 = (s_20 == 1'b0 ? sel_3762 :
              s_289);

  assign sel_3763 = 32'sd0;

  assign sel_3764 = 32'sd0;

  assign sel_3765 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_590, sel_3751, sel_3752, sel_3753, sel_3754, sel_3755,
       sel_3756, sel_3757, sel_3758, sel_3759, sel_3760, sel_3761, sel_3763,
       sel_3764, sel_3765) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p10084_sel_1 = sel_3764;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p10084_sel_1 = sel_3763;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p10084_sel_1 = sel_1_590;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p10084_sel_1 = sel_3761;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p10084_sel_1 = sel_3760;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p10084_sel_1 = sel_3759;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p10084_sel_1 = sel_3758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p10084_sel_1 = sel_3757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p10084_sel_1 = sel_3756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p10084_sel_1 = sel_3755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p10084_sel_1 = sel_3754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p10084_sel_1 = sel_3753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p10084_sel_1 = sel_3752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p10084_sel_1 = sel_3751;
        end
      default :
        begin
          p10084_sel_1 = sel_3765;
        end
    endcase
    sel_1_591 = p10084_sel_1;
  end

  assign tmp_250 = functionOutput_18[sel_1_591];

  assign sel_3766 = 1'b0;

  assign sel_3767 = 1'b0;

  assign sel_3768 = 1'b0;

  assign sel_3769 = 1'b0;

  assign sel_3770 = 1'b0;

  assign sel_3771 = 1'b0;

  assign sel_3772 = 1'b0;

  assign sel_3773 = 1'b0;

  assign sel_3774 = 1'b0;

  assign sel_3775 = 1'b0;

  assign sel_3776 = 1'b0;

  assign sel_3777 = 1'b0;

  assign s_290 = 1'b1;

  assign sel_2_607 = (s_20 == 1'b0 ? sel_3777 :
              s_290);

  assign sel_3778 = 1'b0;

  assign sel_3779 = 1'b0;

  assign sel_3780 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_607, sel_3766, sel_3767, sel_3768, sel_3769, sel_3770,
       sel_3771, sel_3772, sel_3773, sel_3774, sel_3775, sel_3776, sel_3778,
       sel_3779, sel_3780) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4416_sel_2 = sel_3779;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4416_sel_2 = sel_3778;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4416_sel_2 = sel_2_607;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4416_sel_2 = sel_3776;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4416_sel_2 = sel_3775;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4416_sel_2 = sel_3774;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4416_sel_2 = sel_3773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4416_sel_2 = sel_3772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4416_sel_2 = sel_3771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4416_sel_2 = sel_3770;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4416_sel_2 = sel_3769;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4416_sel_2 = sel_3768;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4416_sel_2 = sel_3767;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4416_sel_2 = sel_3766;
        end
      default :
        begin
          p4416_sel_2 = sel_3780;
        end
    endcase
    sel_2_608 = p4416_sel_2;
  end

  always @* begin
    p4415cont_bits_cont_bits[11] = cont_bits_11[11];
    if (sel_2_608) begin
      p4415cont_bits_cont_bits[11] = tmp_250;
    end
    cont_bits_13[0] = cont_bits_11[0];
    cont_bits_13[1] = cont_bits_11[1];
    cont_bits_13[2] = cont_bits_11[2];
    cont_bits_13[3] = cont_bits_11[3];
    cont_bits_13[4] = cont_bits_11[4];
    cont_bits_13[5] = cont_bits_11[5];
    cont_bits_13[6] = cont_bits_11[6];
    cont_bits_13[7] = cont_bits_11[7];
    cont_bits_13[8] = cont_bits_11[8];
    cont_bits_13[9] = cont_bits_11[9];
    cont_bits_13[10] = cont_bits_11[10];
    cont_bits_13[11] = p4415cont_bits_cont_bits[11];
  end

  assign sel_3781 = 32'sd0;

  assign sel_3782 = 32'sd0;

  assign sel_3783 = 32'sd0;

  assign sel_3784 = 32'sd0;

  assign sel_3785 = 32'sd0;

  assign sel_3786 = 32'sd0;

  assign sel_3787 = 32'sd0;

  assign sel_3788 = 32'sd0;

  assign sel_3789 = 32'sd0;

  assign sel_3790 = 32'sd0;

  assign sel_3791 = 32'sd0;

  assign sel_3792 = 32'sd0;

  assign s_291 = 32'sd0;

  assign sel_1_592 = (s_20 == 1'b0 ? sel_3792 :
              s_291);

  assign sel_3793 = 32'sd0;

  assign sel_3794 = 32'sd0;

  assign sel_3795 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_592, sel_3781, sel_3782, sel_3783, sel_3784, sel_3785,
       sel_3786, sel_3787, sel_3788, sel_3789, sel_3790, sel_3791, sel_3793,
       sel_3794, sel_3795) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2311_sel_1 = sel_3794;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2311_sel_1 = sel_3793;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2311_sel_1 = sel_1_592;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2311_sel_1 = sel_3791;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2311_sel_1 = sel_3790;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2311_sel_1 = sel_3789;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2311_sel_1 = sel_3788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2311_sel_1 = sel_3787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2311_sel_1 = sel_3786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2311_sel_1 = sel_3785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2311_sel_1 = sel_3784;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2311_sel_1 = sel_3783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2311_sel_1 = sel_3782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2311_sel_1 = sel_3781;
        end
      default :
        begin
          p2311_sel_1 = sel_3795;
        end
    endcase
    sel_1_593 = p2311_sel_1;
  end

  assign cont_bits_14 = cont_bits_13[sel_1_593];

  assign sel_1_594 = (s_20 == 1'b0 ? sel_1_567 :
              cont_bits_14);

  assign cont_bits_41_14[0] = 1'b0;
  assign cont_bits_41_14[1] = 1'b0;
  assign cont_bits_41_14[2] = 1'b0;
  assign cont_bits_41_14[3] = 1'b0;
  assign cont_bits_41_14[4] = 1'b0;
  assign cont_bits_41_14[5] = 1'b0;
  assign cont_bits_41_14[6] = 1'b0;
  assign cont_bits_41_14[7] = 1'b0;
  assign cont_bits_41_14[8] = 1'b0;
  assign cont_bits_41_14[9] = 1'b0;
  assign cont_bits_41_14[10] = 1'b0;
  assign cont_bits_41_14[11] = 1'b0;

  simfcn1 u_simfcn1_8 (.vx(r_v41),  // uint16
                       .cont_bits2_0(functionOutput_0_8),  // boolean
                       .cont_bits2_1(functionOutput_1_8),  // boolean
                       .cont_bits2_2(functionOutput_2_8),  // boolean
                       .cont_bits2_3(functionOutput_3_8),  // boolean
                       .cont_bits2_4(functionOutput_4_8),  // boolean
                       .cont_bits2_5(functionOutput_5_8),  // boolean
                       .cont_bits2_6(functionOutput_6_8),  // boolean
                       .cont_bits2_7(functionOutput_7_8),  // boolean
                       .cont_bits2_8(functionOutput_8_8),  // boolean
                       .cont_bits2_9(functionOutput_9_8),  // boolean
                       .cont_bits2_10(functionOutput_10_8),  // boolean
                       .cont_bits2_11(functionOutput_11_8)  // boolean
                       );

  assign functionOutput_19[0] = functionOutput_0_8;
  assign functionOutput_19[1] = functionOutput_1_8;
  assign functionOutput_19[2] = functionOutput_2_8;
  assign functionOutput_19[3] = functionOutput_3_8;
  assign functionOutput_19[4] = functionOutput_4_8;
  assign functionOutput_19[5] = functionOutput_5_8;
  assign functionOutput_19[6] = functionOutput_6_8;
  assign functionOutput_19[7] = functionOutput_7_8;
  assign functionOutput_19[8] = functionOutput_8_8;
  assign functionOutput_19[9] = functionOutput_9_8;
  assign functionOutput_19[10] = functionOutput_10_8;
  assign functionOutput_19[11] = functionOutput_11_8;

  assign sel_3796 = 32'sd0;

  assign sel_3797 = 32'sd0;

  assign sel_3798 = 32'sd0;

  assign sel_3799 = 32'sd0;

  assign sel_3800 = 32'sd0;

  assign sel_3801 = 32'sd0;

  assign sel_3802 = 32'sd0;

  assign sel_3803 = 32'sd0;

  assign sel_3804 = 32'sd0;

  assign sel_3805 = 32'sd0;

  assign sel_3806 = 32'sd0;

  assign sel_3807 = 32'sd0;

  assign sel_3808 = 32'sd0;

  assign sel_3809 = 32'sd0;

  assign sel_3810 = 32'sd0;

  assign s_292 = 32'sd0;

  assign sel_1_595 = (tmp_3 == 1'b0 ? sel_3810 :
              s_292);

  assign sel_3811 = 32'sd0;

  assign sel_1_596 = (tmp_5 == 1'b0 ? sel_1_595 :
              sel_3811);

  assign sel_3812 = 32'sd0;

  assign sel_1_597 = (tmp_7 == 1'b0 ? sel_1_596 :
              sel_3812);

  assign sel_3813 = 32'sd0;

  assign sel_1_598 = (tmp_9 == 1'b0 ? sel_1_597 :
              sel_3813);

  assign sel_3814 = 32'sd0;

  assign sel_1_599 = (tmp_11 == 1'b0 ? sel_1_598 :
              sel_3814);

  assign sel_3815 = 32'sd0;

  assign sel_1_600 = (tmp_13 == 1'b0 ? sel_1_599 :
              sel_3815);

  assign sel_3816 = 32'sd0;

  assign sel_1_601 = (tmp_15 == 1'b0 ? sel_1_600 :
              sel_3816);

  assign sel_3817 = 32'sd0;

  assign sel_1_602 = (tmp_17 == 1'b0 ? sel_1_601 :
              sel_3817);

  assign sel_1_603 = (s_10 == 1'b0 ? sel_3809 :
              sel_1_602);

  assign sel_1_604 = (s_11 == 1'b0 ? sel_3808 :
              sel_1_603);

  assign sel_3818 = 32'sd0;

  assign sel_1_605 = (s_12 == 1'b0 ? sel_1_604 :
              sel_3818);

  assign sel_3819 = 32'sd0;

  assign sel_3820 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_605, sel_3796, sel_3797, sel_3798, sel_3799, sel_3800,
       sel_3801, sel_3802, sel_3803, sel_3804, sel_3805, sel_3806, sel_3807,
       sel_3819, sel_3820) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8945_sel_1 = sel_3819;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8945_sel_1 = sel_1_605;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8945_sel_1 = sel_3807;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8945_sel_1 = sel_3806;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8945_sel_1 = sel_3805;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8945_sel_1 = sel_3804;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8945_sel_1 = sel_3803;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8945_sel_1 = sel_3802;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8945_sel_1 = sel_3801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8945_sel_1 = sel_3800;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8945_sel_1 = sel_3799;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8945_sel_1 = sel_3798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8945_sel_1 = sel_3797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8945_sel_1 = sel_3796;
        end
      default :
        begin
          p8945_sel_1 = sel_3820;
        end
    endcase
    sel_1_606 = p8945_sel_1;
  end

  assign tmp_251 = functionOutput_19[sel_1_606];

  assign sel_3821 = 1'b0;

  assign sel_3822 = 1'b0;

  assign sel_3823 = 1'b0;

  assign sel_3824 = 1'b0;

  assign sel_3825 = 1'b0;

  assign sel_3826 = 1'b0;

  assign sel_3827 = 1'b0;

  assign sel_3828 = 1'b0;

  assign sel_3829 = 1'b0;

  assign sel_3830 = 1'b0;

  assign sel_3831 = 1'b0;

  assign sel_3832 = 1'b0;

  assign sel_3833 = 1'b0;

  assign sel_3834 = 1'b0;

  assign sel_3835 = 1'b0;

  assign s_293 = 1'b1;

  assign sel_2_609 = (tmp_3 == 1'b0 ? sel_3835 :
              s_293);

  assign sel_3836 = 1'b0;

  assign sel_2_610 = (tmp_5 == 1'b0 ? sel_2_609 :
              sel_3836);

  assign sel_3837 = 1'b0;

  assign sel_2_611 = (tmp_7 == 1'b0 ? sel_2_610 :
              sel_3837);

  assign sel_3838 = 1'b0;

  assign sel_2_612 = (tmp_9 == 1'b0 ? sel_2_611 :
              sel_3838);

  assign sel_3839 = 1'b0;

  assign sel_2_613 = (tmp_11 == 1'b0 ? sel_2_612 :
              sel_3839);

  assign sel_3840 = 1'b0;

  assign sel_2_614 = (tmp_13 == 1'b0 ? sel_2_613 :
              sel_3840);

  assign sel_3841 = 1'b0;

  assign sel_2_615 = (tmp_15 == 1'b0 ? sel_2_614 :
              sel_3841);

  assign sel_3842 = 1'b0;

  assign sel_2_616 = (tmp_17 == 1'b0 ? sel_2_615 :
              sel_3842);

  assign sel_2_617 = (s_10 == 1'b0 ? sel_3834 :
              sel_2_616);

  assign sel_2_618 = (s_11 == 1'b0 ? sel_3833 :
              sel_2_617);

  assign sel_3843 = 1'b0;

  assign sel_2_619 = (s_12 == 1'b0 ? sel_2_618 :
              sel_3843);

  assign sel_3844 = 1'b0;

  assign sel_3845 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_619, sel_3821, sel_3822, sel_3823, sel_3824, sel_3825,
       sel_3826, sel_3827, sel_3828, sel_3829, sel_3830, sel_3831, sel_3832,
       sel_3844, sel_3845) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7786_sel_2 = sel_3844;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7786_sel_2 = sel_2_619;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7786_sel_2 = sel_3832;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7786_sel_2 = sel_3831;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7786_sel_2 = sel_3830;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7786_sel_2 = sel_3829;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7786_sel_2 = sel_3828;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7786_sel_2 = sel_3827;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7786_sel_2 = sel_3826;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7786_sel_2 = sel_3825;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7786_sel_2 = sel_3824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7786_sel_2 = sel_3823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7786_sel_2 = sel_3822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7786_sel_2 = sel_3821;
        end
      default :
        begin
          p7786_sel_2 = sel_3845;
        end
    endcase
    sel_2_620 = p7786_sel_2;
  end

  always @* begin
    p7785cont_bits_41_cont_bits_41[0] = cont_bits_41_14[0];
    if (sel_2_620) begin
      p7785cont_bits_41_cont_bits_41[0] = tmp_251;
    end
    cont_bits_41_15[0] = p7785cont_bits_41_cont_bits_41[0];
    cont_bits_41_15[1] = cont_bits_41_14[1];
    cont_bits_41_15[2] = cont_bits_41_14[2];
    cont_bits_41_15[3] = cont_bits_41_14[3];
    cont_bits_41_15[4] = cont_bits_41_14[4];
    cont_bits_41_15[5] = cont_bits_41_14[5];
    cont_bits_41_15[6] = cont_bits_41_14[6];
    cont_bits_41_15[7] = cont_bits_41_14[7];
    cont_bits_41_15[8] = cont_bits_41_14[8];
    cont_bits_41_15[9] = cont_bits_41_14[9];
    cont_bits_41_15[10] = cont_bits_41_14[10];
    cont_bits_41_15[11] = cont_bits_41_14[11];
  end

  assign sel_3846 = 32'sd0;

  assign sel_3847 = 32'sd0;

  assign sel_3848 = 32'sd0;

  assign sel_3849 = 32'sd0;

  assign sel_3850 = 32'sd0;

  assign sel_3851 = 32'sd0;

  assign sel_3852 = 32'sd0;

  assign sel_3853 = 32'sd0;

  assign sel_3854 = 32'sd0;

  assign sel_3855 = 32'sd0;

  assign sel_3856 = 32'sd0;

  assign sel_3857 = 32'sd0;

  assign sel_3858 = 32'sd0;

  assign sel_3859 = 32'sd0;

  assign sel_3860 = 32'sd0;

  assign s_294 = 32'sd1;

  assign sel_1_607 = (tmp_3 == 1'b0 ? sel_3860 :
              s_294);

  assign sel_3861 = 32'sd0;

  assign sel_1_608 = (tmp_5 == 1'b0 ? sel_1_607 :
              sel_3861);

  assign sel_3862 = 32'sd0;

  assign sel_1_609 = (tmp_7 == 1'b0 ? sel_1_608 :
              sel_3862);

  assign sel_3863 = 32'sd0;

  assign sel_1_610 = (tmp_9 == 1'b0 ? sel_1_609 :
              sel_3863);

  assign sel_3864 = 32'sd0;

  assign sel_1_611 = (tmp_11 == 1'b0 ? sel_1_610 :
              sel_3864);

  assign sel_3865 = 32'sd0;

  assign sel_1_612 = (tmp_13 == 1'b0 ? sel_1_611 :
              sel_3865);

  assign sel_3866 = 32'sd0;

  assign sel_1_613 = (tmp_15 == 1'b0 ? sel_1_612 :
              sel_3866);

  assign sel_3867 = 32'sd0;

  assign sel_1_614 = (tmp_17 == 1'b0 ? sel_1_613 :
              sel_3867);

  assign sel_1_615 = (s_10 == 1'b0 ? sel_3859 :
              sel_1_614);

  assign sel_1_616 = (s_11 == 1'b0 ? sel_3858 :
              sel_1_615);

  assign sel_3868 = 32'sd0;

  assign sel_1_617 = (s_12 == 1'b0 ? sel_1_616 :
              sel_3868);

  assign sel_3869 = 32'sd0;

  assign sel_3870 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_617, sel_3846, sel_3847, sel_3848, sel_3849, sel_3850,
       sel_3851, sel_3852, sel_3853, sel_3854, sel_3855, sel_3856, sel_3857,
       sel_3869, sel_3870) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9285_sel_1 = sel_3869;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9285_sel_1 = sel_1_617;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9285_sel_1 = sel_3857;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9285_sel_1 = sel_3856;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9285_sel_1 = sel_3855;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9285_sel_1 = sel_3854;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9285_sel_1 = sel_3853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9285_sel_1 = sel_3852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9285_sel_1 = sel_3851;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9285_sel_1 = sel_3850;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9285_sel_1 = sel_3849;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9285_sel_1 = sel_3848;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9285_sel_1 = sel_3847;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9285_sel_1 = sel_3846;
        end
      default :
        begin
          p9285_sel_1 = sel_3870;
        end
    endcase
    sel_1_618 = p9285_sel_1;
  end

  assign tmp_252 = functionOutput_19[sel_1_618];

  assign sel_3871 = 1'b0;

  assign sel_3872 = 1'b0;

  assign sel_3873 = 1'b0;

  assign sel_3874 = 1'b0;

  assign sel_3875 = 1'b0;

  assign sel_3876 = 1'b0;

  assign sel_3877 = 1'b0;

  assign sel_3878 = 1'b0;

  assign sel_3879 = 1'b0;

  assign sel_3880 = 1'b0;

  assign sel_3881 = 1'b0;

  assign sel_3882 = 1'b0;

  assign sel_3883 = 1'b0;

  assign sel_3884 = 1'b0;

  assign sel_3885 = 1'b0;

  assign s_295 = 1'b1;

  assign sel_2_621 = (tmp_3 == 1'b0 ? sel_3885 :
              s_295);

  assign sel_3886 = 1'b0;

  assign sel_2_622 = (tmp_5 == 1'b0 ? sel_2_621 :
              sel_3886);

  assign sel_3887 = 1'b0;

  assign sel_2_623 = (tmp_7 == 1'b0 ? sel_2_622 :
              sel_3887);

  assign sel_3888 = 1'b0;

  assign sel_2_624 = (tmp_9 == 1'b0 ? sel_2_623 :
              sel_3888);

  assign sel_3889 = 1'b0;

  assign sel_2_625 = (tmp_11 == 1'b0 ? sel_2_624 :
              sel_3889);

  assign sel_3890 = 1'b0;

  assign sel_2_626 = (tmp_13 == 1'b0 ? sel_2_625 :
              sel_3890);

  assign sel_3891 = 1'b0;

  assign sel_2_627 = (tmp_15 == 1'b0 ? sel_2_626 :
              sel_3891);

  assign sel_3892 = 1'b0;

  assign sel_2_628 = (tmp_17 == 1'b0 ? sel_2_627 :
              sel_3892);

  assign sel_2_629 = (s_10 == 1'b0 ? sel_3884 :
              sel_2_628);

  assign sel_2_630 = (s_11 == 1'b0 ? sel_3883 :
              sel_2_629);

  assign sel_3893 = 1'b0;

  assign sel_2_631 = (s_12 == 1'b0 ? sel_2_630 :
              sel_3893);

  assign sel_3894 = 1'b0;

  assign sel_3895 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_631, sel_3871, sel_3872, sel_3873, sel_3874, sel_3875,
       sel_3876, sel_3877, sel_3878, sel_3879, sel_3880, sel_3881, sel_3882,
       sel_3894, sel_3895) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7393_sel_2 = sel_3894;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7393_sel_2 = sel_2_631;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7393_sel_2 = sel_3882;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7393_sel_2 = sel_3881;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7393_sel_2 = sel_3880;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7393_sel_2 = sel_3879;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7393_sel_2 = sel_3878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7393_sel_2 = sel_3877;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7393_sel_2 = sel_3876;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7393_sel_2 = sel_3875;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7393_sel_2 = sel_3874;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7393_sel_2 = sel_3873;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7393_sel_2 = sel_3872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7393_sel_2 = sel_3871;
        end
      default :
        begin
          p7393_sel_2 = sel_3895;
        end
    endcase
    sel_2_632 = p7393_sel_2;
  end

  always @* begin
    p7392cont_bits_41_cont_bits_41[1] = cont_bits_41_15[1];
    if (sel_2_632) begin
      p7392cont_bits_41_cont_bits_41[1] = tmp_252;
    end
    cont_bits_41_16[0] = cont_bits_41_15[0];
    cont_bits_41_16[1] = p7392cont_bits_41_cont_bits_41[1];
    cont_bits_41_16[2] = cont_bits_41_15[2];
    cont_bits_41_16[3] = cont_bits_41_15[3];
    cont_bits_41_16[4] = cont_bits_41_15[4];
    cont_bits_41_16[5] = cont_bits_41_15[5];
    cont_bits_41_16[6] = cont_bits_41_15[6];
    cont_bits_41_16[7] = cont_bits_41_15[7];
    cont_bits_41_16[8] = cont_bits_41_15[8];
    cont_bits_41_16[9] = cont_bits_41_15[9];
    cont_bits_41_16[10] = cont_bits_41_15[10];
    cont_bits_41_16[11] = cont_bits_41_15[11];
  end

  assign sel_3896 = 32'sd0;

  assign sel_3897 = 32'sd0;

  assign sel_3898 = 32'sd0;

  assign sel_3899 = 32'sd0;

  assign sel_3900 = 32'sd0;

  assign sel_3901 = 32'sd0;

  assign sel_3902 = 32'sd0;

  assign sel_3903 = 32'sd0;

  assign sel_3904 = 32'sd0;

  assign sel_3905 = 32'sd0;

  assign sel_3906 = 32'sd0;

  assign sel_3907 = 32'sd0;

  assign sel_3908 = 32'sd0;

  assign sel_3909 = 32'sd0;

  assign sel_3910 = 32'sd0;

  assign s_296 = 32'sd2;

  assign sel_1_619 = (tmp_3 == 1'b0 ? sel_3910 :
              s_296);

  assign sel_3911 = 32'sd0;

  assign sel_1_620 = (tmp_5 == 1'b0 ? sel_1_619 :
              sel_3911);

  assign sel_3912 = 32'sd0;

  assign sel_1_621 = (tmp_7 == 1'b0 ? sel_1_620 :
              sel_3912);

  assign sel_3913 = 32'sd0;

  assign sel_1_622 = (tmp_9 == 1'b0 ? sel_1_621 :
              sel_3913);

  assign sel_3914 = 32'sd0;

  assign sel_1_623 = (tmp_11 == 1'b0 ? sel_1_622 :
              sel_3914);

  assign sel_3915 = 32'sd0;

  assign sel_1_624 = (tmp_13 == 1'b0 ? sel_1_623 :
              sel_3915);

  assign sel_3916 = 32'sd0;

  assign sel_1_625 = (tmp_15 == 1'b0 ? sel_1_624 :
              sel_3916);

  assign sel_3917 = 32'sd0;

  assign sel_1_626 = (tmp_17 == 1'b0 ? sel_1_625 :
              sel_3917);

  assign sel_1_627 = (s_10 == 1'b0 ? sel_3909 :
              sel_1_626);

  assign sel_1_628 = (s_11 == 1'b0 ? sel_3908 :
              sel_1_627);

  assign sel_3918 = 32'sd0;

  assign sel_1_629 = (s_12 == 1'b0 ? sel_1_628 :
              sel_3918);

  assign sel_3919 = 32'sd0;

  assign sel_3920 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_629, sel_3896, sel_3897, sel_3898, sel_3899, sel_3900,
       sel_3901, sel_3902, sel_3903, sel_3904, sel_3905, sel_3906, sel_3907,
       sel_3919, sel_3920) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8452_sel_1 = sel_3919;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8452_sel_1 = sel_1_629;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8452_sel_1 = sel_3907;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8452_sel_1 = sel_3906;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8452_sel_1 = sel_3905;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8452_sel_1 = sel_3904;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8452_sel_1 = sel_3903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8452_sel_1 = sel_3902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8452_sel_1 = sel_3901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8452_sel_1 = sel_3900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8452_sel_1 = sel_3899;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8452_sel_1 = sel_3898;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8452_sel_1 = sel_3897;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8452_sel_1 = sel_3896;
        end
      default :
        begin
          p8452_sel_1 = sel_3920;
        end
    endcase
    sel_1_630 = p8452_sel_1;
  end

  assign tmp_253 = functionOutput_19[sel_1_630];

  assign sel_3921 = 1'b0;

  assign sel_3922 = 1'b0;

  assign sel_3923 = 1'b0;

  assign sel_3924 = 1'b0;

  assign sel_3925 = 1'b0;

  assign sel_3926 = 1'b0;

  assign sel_3927 = 1'b0;

  assign sel_3928 = 1'b0;

  assign sel_3929 = 1'b0;

  assign sel_3930 = 1'b0;

  assign sel_3931 = 1'b0;

  assign sel_3932 = 1'b0;

  assign sel_3933 = 1'b0;

  assign sel_3934 = 1'b0;

  assign sel_3935 = 1'b0;

  assign s_297 = 1'b1;

  assign sel_2_633 = (tmp_3 == 1'b0 ? sel_3935 :
              s_297);

  assign sel_3936 = 1'b0;

  assign sel_2_634 = (tmp_5 == 1'b0 ? sel_2_633 :
              sel_3936);

  assign sel_3937 = 1'b0;

  assign sel_2_635 = (tmp_7 == 1'b0 ? sel_2_634 :
              sel_3937);

  assign sel_3938 = 1'b0;

  assign sel_2_636 = (tmp_9 == 1'b0 ? sel_2_635 :
              sel_3938);

  assign sel_3939 = 1'b0;

  assign sel_2_637 = (tmp_11 == 1'b0 ? sel_2_636 :
              sel_3939);

  assign sel_3940 = 1'b0;

  assign sel_2_638 = (tmp_13 == 1'b0 ? sel_2_637 :
              sel_3940);

  assign sel_3941 = 1'b0;

  assign sel_2_639 = (tmp_15 == 1'b0 ? sel_2_638 :
              sel_3941);

  assign sel_3942 = 1'b0;

  assign sel_2_640 = (tmp_17 == 1'b0 ? sel_2_639 :
              sel_3942);

  assign sel_2_641 = (s_10 == 1'b0 ? sel_3934 :
              sel_2_640);

  assign sel_2_642 = (s_11 == 1'b0 ? sel_3933 :
              sel_2_641);

  assign sel_3943 = 1'b0;

  assign sel_2_643 = (s_12 == 1'b0 ? sel_2_642 :
              sel_3943);

  assign sel_3944 = 1'b0;

  assign sel_3945 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_643, sel_3921, sel_3922, sel_3923, sel_3924, sel_3925,
       sel_3926, sel_3927, sel_3928, sel_3929, sel_3930, sel_3931, sel_3932,
       sel_3944, sel_3945) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7148_sel_2 = sel_3944;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7148_sel_2 = sel_2_643;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7148_sel_2 = sel_3932;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7148_sel_2 = sel_3931;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7148_sel_2 = sel_3930;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7148_sel_2 = sel_3929;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7148_sel_2 = sel_3928;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7148_sel_2 = sel_3927;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7148_sel_2 = sel_3926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7148_sel_2 = sel_3925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7148_sel_2 = sel_3924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7148_sel_2 = sel_3923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7148_sel_2 = sel_3922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7148_sel_2 = sel_3921;
        end
      default :
        begin
          p7148_sel_2 = sel_3945;
        end
    endcase
    sel_2_644 = p7148_sel_2;
  end

  always @* begin
    p7147cont_bits_41_cont_bits_41[2] = cont_bits_41_16[2];
    if (sel_2_644) begin
      p7147cont_bits_41_cont_bits_41[2] = tmp_253;
    end
    cont_bits_41_17[0] = cont_bits_41_16[0];
    cont_bits_41_17[1] = cont_bits_41_16[1];
    cont_bits_41_17[2] = p7147cont_bits_41_cont_bits_41[2];
    cont_bits_41_17[3] = cont_bits_41_16[3];
    cont_bits_41_17[4] = cont_bits_41_16[4];
    cont_bits_41_17[5] = cont_bits_41_16[5];
    cont_bits_41_17[6] = cont_bits_41_16[6];
    cont_bits_41_17[7] = cont_bits_41_16[7];
    cont_bits_41_17[8] = cont_bits_41_16[8];
    cont_bits_41_17[9] = cont_bits_41_16[9];
    cont_bits_41_17[10] = cont_bits_41_16[10];
    cont_bits_41_17[11] = cont_bits_41_16[11];
  end

  assign sel_3946 = 32'sd0;

  assign sel_3947 = 32'sd0;

  assign sel_3948 = 32'sd0;

  assign sel_3949 = 32'sd0;

  assign sel_3950 = 32'sd0;

  assign sel_3951 = 32'sd0;

  assign sel_3952 = 32'sd0;

  assign sel_3953 = 32'sd0;

  assign sel_3954 = 32'sd0;

  assign sel_3955 = 32'sd0;

  assign sel_3956 = 32'sd0;

  assign sel_3957 = 32'sd0;

  assign sel_3958 = 32'sd0;

  assign sel_3959 = 32'sd0;

  assign sel_3960 = 32'sd0;

  assign s_298 = 32'sd3;

  assign sel_1_631 = (tmp_3 == 1'b0 ? sel_3960 :
              s_298);

  assign sel_3961 = 32'sd0;

  assign sel_1_632 = (tmp_5 == 1'b0 ? sel_1_631 :
              sel_3961);

  assign sel_3962 = 32'sd0;

  assign sel_1_633 = (tmp_7 == 1'b0 ? sel_1_632 :
              sel_3962);

  assign sel_3963 = 32'sd0;

  assign sel_1_634 = (tmp_9 == 1'b0 ? sel_1_633 :
              sel_3963);

  assign sel_3964 = 32'sd0;

  assign sel_1_635 = (tmp_11 == 1'b0 ? sel_1_634 :
              sel_3964);

  assign sel_3965 = 32'sd0;

  assign sel_1_636 = (tmp_13 == 1'b0 ? sel_1_635 :
              sel_3965);

  assign sel_3966 = 32'sd0;

  assign sel_1_637 = (tmp_15 == 1'b0 ? sel_1_636 :
              sel_3966);

  assign sel_3967 = 32'sd0;

  assign sel_1_638 = (tmp_17 == 1'b0 ? sel_1_637 :
              sel_3967);

  assign sel_1_639 = (s_10 == 1'b0 ? sel_3959 :
              sel_1_638);

  assign sel_1_640 = (s_11 == 1'b0 ? sel_3958 :
              sel_1_639);

  assign sel_3968 = 32'sd0;

  assign sel_1_641 = (s_12 == 1'b0 ? sel_1_640 :
              sel_3968);

  assign sel_3969 = 32'sd0;

  assign sel_3970 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_641, sel_3946, sel_3947, sel_3948, sel_3949, sel_3950,
       sel_3951, sel_3952, sel_3953, sel_3954, sel_3955, sel_3956, sel_3957,
       sel_3969, sel_3970) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9183_sel_1 = sel_3969;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9183_sel_1 = sel_1_641;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9183_sel_1 = sel_3957;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9183_sel_1 = sel_3956;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9183_sel_1 = sel_3955;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9183_sel_1 = sel_3954;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9183_sel_1 = sel_3953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9183_sel_1 = sel_3952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9183_sel_1 = sel_3951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9183_sel_1 = sel_3950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9183_sel_1 = sel_3949;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9183_sel_1 = sel_3948;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9183_sel_1 = sel_3947;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9183_sel_1 = sel_3946;
        end
      default :
        begin
          p9183_sel_1 = sel_3970;
        end
    endcase
    sel_1_642 = p9183_sel_1;
  end

  assign tmp_254 = functionOutput_19[sel_1_642];

  assign sel_3971 = 1'b0;

  assign sel_3972 = 1'b0;

  assign sel_3973 = 1'b0;

  assign sel_3974 = 1'b0;

  assign sel_3975 = 1'b0;

  assign sel_3976 = 1'b0;

  assign sel_3977 = 1'b0;

  assign sel_3978 = 1'b0;

  assign sel_3979 = 1'b0;

  assign sel_3980 = 1'b0;

  assign sel_3981 = 1'b0;

  assign sel_3982 = 1'b0;

  assign sel_3983 = 1'b0;

  assign sel_3984 = 1'b0;

  assign sel_3985 = 1'b0;

  assign s_299 = 1'b1;

  assign sel_2_645 = (tmp_3 == 1'b0 ? sel_3985 :
              s_299);

  assign sel_3986 = 1'b0;

  assign sel_2_646 = (tmp_5 == 1'b0 ? sel_2_645 :
              sel_3986);

  assign sel_3987 = 1'b0;

  assign sel_2_647 = (tmp_7 == 1'b0 ? sel_2_646 :
              sel_3987);

  assign sel_3988 = 1'b0;

  assign sel_2_648 = (tmp_9 == 1'b0 ? sel_2_647 :
              sel_3988);

  assign sel_3989 = 1'b0;

  assign sel_2_649 = (tmp_11 == 1'b0 ? sel_2_648 :
              sel_3989);

  assign sel_3990 = 1'b0;

  assign sel_2_650 = (tmp_13 == 1'b0 ? sel_2_649 :
              sel_3990);

  assign sel_3991 = 1'b0;

  assign sel_2_651 = (tmp_15 == 1'b0 ? sel_2_650 :
              sel_3991);

  assign sel_3992 = 1'b0;

  assign sel_2_652 = (tmp_17 == 1'b0 ? sel_2_651 :
              sel_3992);

  assign sel_2_653 = (s_10 == 1'b0 ? sel_3984 :
              sel_2_652);

  assign sel_2_654 = (s_11 == 1'b0 ? sel_3983 :
              sel_2_653);

  assign sel_3993 = 1'b0;

  assign sel_2_655 = (s_12 == 1'b0 ? sel_2_654 :
              sel_3993);

  assign sel_3994 = 1'b0;

  assign sel_3995 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_655, sel_3971, sel_3972, sel_3973, sel_3974, sel_3975,
       sel_3976, sel_3977, sel_3978, sel_3979, sel_3980, sel_3981, sel_3982,
       sel_3994, sel_3995) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6755_sel_2 = sel_3994;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6755_sel_2 = sel_2_655;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6755_sel_2 = sel_3982;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6755_sel_2 = sel_3981;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6755_sel_2 = sel_3980;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6755_sel_2 = sel_3979;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6755_sel_2 = sel_3978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6755_sel_2 = sel_3977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6755_sel_2 = sel_3976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6755_sel_2 = sel_3975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6755_sel_2 = sel_3974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6755_sel_2 = sel_3973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6755_sel_2 = sel_3972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6755_sel_2 = sel_3971;
        end
      default :
        begin
          p6755_sel_2 = sel_3995;
        end
    endcase
    sel_2_656 = p6755_sel_2;
  end

  always @* begin
    p6754cont_bits_41_cont_bits_41[3] = cont_bits_41_17[3];
    if (sel_2_656) begin
      p6754cont_bits_41_cont_bits_41[3] = tmp_254;
    end
    cont_bits_41_18[0] = cont_bits_41_17[0];
    cont_bits_41_18[1] = cont_bits_41_17[1];
    cont_bits_41_18[2] = cont_bits_41_17[2];
    cont_bits_41_18[3] = p6754cont_bits_41_cont_bits_41[3];
    cont_bits_41_18[4] = cont_bits_41_17[4];
    cont_bits_41_18[5] = cont_bits_41_17[5];
    cont_bits_41_18[6] = cont_bits_41_17[6];
    cont_bits_41_18[7] = cont_bits_41_17[7];
    cont_bits_41_18[8] = cont_bits_41_17[8];
    cont_bits_41_18[9] = cont_bits_41_17[9];
    cont_bits_41_18[10] = cont_bits_41_17[10];
    cont_bits_41_18[11] = cont_bits_41_17[11];
  end

  assign sel_3996 = 32'sd0;

  assign sel_3997 = 32'sd0;

  assign sel_3998 = 32'sd0;

  assign sel_3999 = 32'sd0;

  assign sel_4000 = 32'sd0;

  assign sel_4001 = 32'sd0;

  assign sel_4002 = 32'sd0;

  assign sel_4003 = 32'sd0;

  assign sel_4004 = 32'sd0;

  assign sel_4005 = 32'sd0;

  assign sel_4006 = 32'sd0;

  assign sel_4007 = 32'sd0;

  assign sel_4008 = 32'sd0;

  assign sel_4009 = 32'sd0;

  assign sel_4010 = 32'sd0;

  assign s_300 = 32'sd4;

  assign sel_1_643 = (tmp_3 == 1'b0 ? sel_4010 :
              s_300);

  assign sel_4011 = 32'sd0;

  assign sel_1_644 = (tmp_5 == 1'b0 ? sel_1_643 :
              sel_4011);

  assign sel_4012 = 32'sd0;

  assign sel_1_645 = (tmp_7 == 1'b0 ? sel_1_644 :
              sel_4012);

  assign sel_4013 = 32'sd0;

  assign sel_1_646 = (tmp_9 == 1'b0 ? sel_1_645 :
              sel_4013);

  assign sel_4014 = 32'sd0;

  assign sel_1_647 = (tmp_11 == 1'b0 ? sel_1_646 :
              sel_4014);

  assign sel_4015 = 32'sd0;

  assign sel_1_648 = (tmp_13 == 1'b0 ? sel_1_647 :
              sel_4015);

  assign sel_4016 = 32'sd0;

  assign sel_1_649 = (tmp_15 == 1'b0 ? sel_1_648 :
              sel_4016);

  assign sel_4017 = 32'sd0;

  assign sel_1_650 = (tmp_17 == 1'b0 ? sel_1_649 :
              sel_4017);

  assign sel_1_651 = (s_10 == 1'b0 ? sel_4009 :
              sel_1_650);

  assign sel_1_652 = (s_11 == 1'b0 ? sel_4008 :
              sel_1_651);

  assign sel_4018 = 32'sd0;

  assign sel_1_653 = (s_12 == 1'b0 ? sel_1_652 :
              sel_4018);

  assign sel_4019 = 32'sd0;

  assign sel_4020 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_653, sel_3996, sel_3997, sel_3998, sel_3999, sel_4000,
       sel_4001, sel_4002, sel_4003, sel_4004, sel_4005, sel_4006, sel_4007,
       sel_4019, sel_4020) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8418_sel_1 = sel_4019;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8418_sel_1 = sel_1_653;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8418_sel_1 = sel_4007;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8418_sel_1 = sel_4006;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8418_sel_1 = sel_4005;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8418_sel_1 = sel_4004;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8418_sel_1 = sel_4003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8418_sel_1 = sel_4002;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8418_sel_1 = sel_4001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8418_sel_1 = sel_4000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8418_sel_1 = sel_3999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8418_sel_1 = sel_3998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8418_sel_1 = sel_3997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8418_sel_1 = sel_3996;
        end
      default :
        begin
          p8418_sel_1 = sel_4020;
        end
    endcase
    sel_1_654 = p8418_sel_1;
  end

  assign tmp_255 = functionOutput_19[sel_1_654];

  assign sel_4021 = 1'b0;

  assign sel_4022 = 1'b0;

  assign sel_4023 = 1'b0;

  assign sel_4024 = 1'b0;

  assign sel_4025 = 1'b0;

  assign sel_4026 = 1'b0;

  assign sel_4027 = 1'b0;

  assign sel_4028 = 1'b0;

  assign sel_4029 = 1'b0;

  assign sel_4030 = 1'b0;

  assign sel_4031 = 1'b0;

  assign sel_4032 = 1'b0;

  assign sel_4033 = 1'b0;

  assign sel_4034 = 1'b0;

  assign sel_4035 = 1'b0;

  assign s_301 = 1'b1;

  assign sel_2_657 = (tmp_3 == 1'b0 ? sel_4035 :
              s_301);

  assign sel_4036 = 1'b0;

  assign sel_2_658 = (tmp_5 == 1'b0 ? sel_2_657 :
              sel_4036);

  assign sel_4037 = 1'b0;

  assign sel_2_659 = (tmp_7 == 1'b0 ? sel_2_658 :
              sel_4037);

  assign sel_4038 = 1'b0;

  assign sel_2_660 = (tmp_9 == 1'b0 ? sel_2_659 :
              sel_4038);

  assign sel_4039 = 1'b0;

  assign sel_2_661 = (tmp_11 == 1'b0 ? sel_2_660 :
              sel_4039);

  assign sel_4040 = 1'b0;

  assign sel_2_662 = (tmp_13 == 1'b0 ? sel_2_661 :
              sel_4040);

  assign sel_4041 = 1'b0;

  assign sel_2_663 = (tmp_15 == 1'b0 ? sel_2_662 :
              sel_4041);

  assign sel_4042 = 1'b0;

  assign sel_2_664 = (tmp_17 == 1'b0 ? sel_2_663 :
              sel_4042);

  assign sel_2_665 = (s_10 == 1'b0 ? sel_4034 :
              sel_2_664);

  assign sel_2_666 = (s_11 == 1'b0 ? sel_4033 :
              sel_2_665);

  assign sel_4043 = 1'b0;

  assign sel_2_667 = (s_12 == 1'b0 ? sel_2_666 :
              sel_4043);

  assign sel_4044 = 1'b0;

  assign sel_4045 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_667, sel_4021, sel_4022, sel_4023, sel_4024, sel_4025,
       sel_4026, sel_4027, sel_4028, sel_4029, sel_4030, sel_4031, sel_4032,
       sel_4044, sel_4045) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6541_sel_2 = sel_4044;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6541_sel_2 = sel_2_667;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6541_sel_2 = sel_4032;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6541_sel_2 = sel_4031;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6541_sel_2 = sel_4030;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6541_sel_2 = sel_4029;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6541_sel_2 = sel_4028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6541_sel_2 = sel_4027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6541_sel_2 = sel_4026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6541_sel_2 = sel_4025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6541_sel_2 = sel_4024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6541_sel_2 = sel_4023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6541_sel_2 = sel_4022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6541_sel_2 = sel_4021;
        end
      default :
        begin
          p6541_sel_2 = sel_4045;
        end
    endcase
    sel_2_668 = p6541_sel_2;
  end

  always @* begin
    p6540cont_bits_41_cont_bits_41[4] = cont_bits_41_18[4];
    if (sel_2_668) begin
      p6540cont_bits_41_cont_bits_41[4] = tmp_255;
    end
    cont_bits_41_19[0] = cont_bits_41_18[0];
    cont_bits_41_19[1] = cont_bits_41_18[1];
    cont_bits_41_19[2] = cont_bits_41_18[2];
    cont_bits_41_19[3] = cont_bits_41_18[3];
    cont_bits_41_19[4] = p6540cont_bits_41_cont_bits_41[4];
    cont_bits_41_19[5] = cont_bits_41_18[5];
    cont_bits_41_19[6] = cont_bits_41_18[6];
    cont_bits_41_19[7] = cont_bits_41_18[7];
    cont_bits_41_19[8] = cont_bits_41_18[8];
    cont_bits_41_19[9] = cont_bits_41_18[9];
    cont_bits_41_19[10] = cont_bits_41_18[10];
    cont_bits_41_19[11] = cont_bits_41_18[11];
  end

  assign sel_4046 = 32'sd0;

  assign sel_4047 = 32'sd0;

  assign sel_4048 = 32'sd0;

  assign sel_4049 = 32'sd0;

  assign sel_4050 = 32'sd0;

  assign sel_4051 = 32'sd0;

  assign sel_4052 = 32'sd0;

  assign sel_4053 = 32'sd0;

  assign sel_4054 = 32'sd0;

  assign sel_4055 = 32'sd0;

  assign sel_4056 = 32'sd0;

  assign sel_4057 = 32'sd0;

  assign sel_4058 = 32'sd0;

  assign sel_4059 = 32'sd0;

  assign sel_4060 = 32'sd0;

  assign s_302 = 32'sd5;

  assign sel_1_655 = (tmp_3 == 1'b0 ? sel_4060 :
              s_302);

  assign sel_4061 = 32'sd0;

  assign sel_1_656 = (tmp_5 == 1'b0 ? sel_1_655 :
              sel_4061);

  assign sel_4062 = 32'sd0;

  assign sel_1_657 = (tmp_7 == 1'b0 ? sel_1_656 :
              sel_4062);

  assign sel_4063 = 32'sd0;

  assign sel_1_658 = (tmp_9 == 1'b0 ? sel_1_657 :
              sel_4063);

  assign sel_4064 = 32'sd0;

  assign sel_1_659 = (tmp_11 == 1'b0 ? sel_1_658 :
              sel_4064);

  assign sel_4065 = 32'sd0;

  assign sel_1_660 = (tmp_13 == 1'b0 ? sel_1_659 :
              sel_4065);

  assign sel_4066 = 32'sd0;

  assign sel_1_661 = (tmp_15 == 1'b0 ? sel_1_660 :
              sel_4066);

  assign sel_4067 = 32'sd0;

  assign sel_1_662 = (tmp_17 == 1'b0 ? sel_1_661 :
              sel_4067);

  assign sel_1_663 = (s_10 == 1'b0 ? sel_4059 :
              sel_1_662);

  assign sel_1_664 = (s_11 == 1'b0 ? sel_4058 :
              sel_1_663);

  assign sel_4068 = 32'sd0;

  assign sel_1_665 = (s_12 == 1'b0 ? sel_1_664 :
              sel_4068);

  assign sel_4069 = 32'sd0;

  assign sel_4070 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_665, sel_4046, sel_4047, sel_4048, sel_4049, sel_4050,
       sel_4051, sel_4052, sel_4053, sel_4054, sel_4055, sel_4056, sel_4057,
       sel_4069, sel_4070) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9234_sel_1 = sel_4069;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9234_sel_1 = sel_1_665;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9234_sel_1 = sel_4057;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9234_sel_1 = sel_4056;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9234_sel_1 = sel_4055;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9234_sel_1 = sel_4054;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9234_sel_1 = sel_4053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9234_sel_1 = sel_4052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9234_sel_1 = sel_4051;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9234_sel_1 = sel_4050;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9234_sel_1 = sel_4049;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9234_sel_1 = sel_4048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9234_sel_1 = sel_4047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9234_sel_1 = sel_4046;
        end
      default :
        begin
          p9234_sel_1 = sel_4070;
        end
    endcase
    sel_1_666 = p9234_sel_1;
  end

  assign tmp_256 = functionOutput_19[sel_1_666];

  assign sel_4071 = 1'b0;

  assign sel_4072 = 1'b0;

  assign sel_4073 = 1'b0;

  assign sel_4074 = 1'b0;

  assign sel_4075 = 1'b0;

  assign sel_4076 = 1'b0;

  assign sel_4077 = 1'b0;

  assign sel_4078 = 1'b0;

  assign sel_4079 = 1'b0;

  assign sel_4080 = 1'b0;

  assign sel_4081 = 1'b0;

  assign sel_4082 = 1'b0;

  assign sel_4083 = 1'b0;

  assign sel_4084 = 1'b0;

  assign sel_4085 = 1'b0;

  assign s_303 = 1'b1;

  assign sel_2_669 = (tmp_3 == 1'b0 ? sel_4085 :
              s_303);

  assign sel_4086 = 1'b0;

  assign sel_2_670 = (tmp_5 == 1'b0 ? sel_2_669 :
              sel_4086);

  assign sel_4087 = 1'b0;

  assign sel_2_671 = (tmp_7 == 1'b0 ? sel_2_670 :
              sel_4087);

  assign sel_4088 = 1'b0;

  assign sel_2_672 = (tmp_9 == 1'b0 ? sel_2_671 :
              sel_4088);

  assign sel_4089 = 1'b0;

  assign sel_2_673 = (tmp_11 == 1'b0 ? sel_2_672 :
              sel_4089);

  assign sel_4090 = 1'b0;

  assign sel_2_674 = (tmp_13 == 1'b0 ? sel_2_673 :
              sel_4090);

  assign sel_4091 = 1'b0;

  assign sel_2_675 = (tmp_15 == 1'b0 ? sel_2_674 :
              sel_4091);

  assign sel_4092 = 1'b0;

  assign sel_2_676 = (tmp_17 == 1'b0 ? sel_2_675 :
              sel_4092);

  assign sel_2_677 = (s_10 == 1'b0 ? sel_4084 :
              sel_2_676);

  assign sel_2_678 = (s_11 == 1'b0 ? sel_4083 :
              sel_2_677);

  assign sel_4093 = 1'b0;

  assign sel_2_679 = (s_12 == 1'b0 ? sel_2_678 :
              sel_4093);

  assign sel_4094 = 1'b0;

  assign sel_4095 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_679, sel_4071, sel_4072, sel_4073, sel_4074, sel_4075,
       sel_4076, sel_4077, sel_4078, sel_4079, sel_4080, sel_4081, sel_4082,
       sel_4094, sel_4095) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6149_sel_2 = sel_4094;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6149_sel_2 = sel_2_679;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6149_sel_2 = sel_4082;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6149_sel_2 = sel_4081;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6149_sel_2 = sel_4080;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6149_sel_2 = sel_4079;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6149_sel_2 = sel_4078;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6149_sel_2 = sel_4077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6149_sel_2 = sel_4076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6149_sel_2 = sel_4075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6149_sel_2 = sel_4074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6149_sel_2 = sel_4073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6149_sel_2 = sel_4072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6149_sel_2 = sel_4071;
        end
      default :
        begin
          p6149_sel_2 = sel_4095;
        end
    endcase
    sel_2_680 = p6149_sel_2;
  end

  always @* begin
    p6148cont_bits_41_cont_bits_41[5] = cont_bits_41_19[5];
    if (sel_2_680) begin
      p6148cont_bits_41_cont_bits_41[5] = tmp_256;
    end
    cont_bits_41_20[0] = cont_bits_41_19[0];
    cont_bits_41_20[1] = cont_bits_41_19[1];
    cont_bits_41_20[2] = cont_bits_41_19[2];
    cont_bits_41_20[3] = cont_bits_41_19[3];
    cont_bits_41_20[4] = cont_bits_41_19[4];
    cont_bits_41_20[5] = p6148cont_bits_41_cont_bits_41[5];
    cont_bits_41_20[6] = cont_bits_41_19[6];
    cont_bits_41_20[7] = cont_bits_41_19[7];
    cont_bits_41_20[8] = cont_bits_41_19[8];
    cont_bits_41_20[9] = cont_bits_41_19[9];
    cont_bits_41_20[10] = cont_bits_41_19[10];
    cont_bits_41_20[11] = cont_bits_41_19[11];
  end

  assign sel_4096 = 32'sd0;

  assign sel_4097 = 32'sd0;

  assign sel_4098 = 32'sd0;

  assign sel_4099 = 32'sd0;

  assign sel_4100 = 32'sd0;

  assign sel_4101 = 32'sd0;

  assign sel_4102 = 32'sd0;

  assign sel_4103 = 32'sd0;

  assign sel_4104 = 32'sd0;

  assign sel_4105 = 32'sd0;

  assign sel_4106 = 32'sd0;

  assign sel_4107 = 32'sd0;

  assign sel_4108 = 32'sd0;

  assign sel_4109 = 32'sd0;

  assign sel_4110 = 32'sd0;

  assign s_304 = 32'sd6;

  assign sel_1_667 = (tmp_3 == 1'b0 ? sel_4110 :
              s_304);

  assign sel_4111 = 32'sd0;

  assign sel_1_668 = (tmp_5 == 1'b0 ? sel_1_667 :
              sel_4111);

  assign sel_4112 = 32'sd0;

  assign sel_1_669 = (tmp_7 == 1'b0 ? sel_1_668 :
              sel_4112);

  assign sel_4113 = 32'sd0;

  assign sel_1_670 = (tmp_9 == 1'b0 ? sel_1_669 :
              sel_4113);

  assign sel_4114 = 32'sd0;

  assign sel_1_671 = (tmp_11 == 1'b0 ? sel_1_670 :
              sel_4114);

  assign sel_4115 = 32'sd0;

  assign sel_1_672 = (tmp_13 == 1'b0 ? sel_1_671 :
              sel_4115);

  assign sel_4116 = 32'sd0;

  assign sel_1_673 = (tmp_15 == 1'b0 ? sel_1_672 :
              sel_4116);

  assign sel_4117 = 32'sd0;

  assign sel_1_674 = (tmp_17 == 1'b0 ? sel_1_673 :
              sel_4117);

  assign sel_1_675 = (s_10 == 1'b0 ? sel_4109 :
              sel_1_674);

  assign sel_1_676 = (s_11 == 1'b0 ? sel_4108 :
              sel_1_675);

  assign sel_4118 = 32'sd0;

  assign sel_1_677 = (s_12 == 1'b0 ? sel_1_676 :
              sel_4118);

  assign sel_4119 = 32'sd0;

  assign sel_4120 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_677, sel_4096, sel_4097, sel_4098, sel_4099, sel_4100,
       sel_4101, sel_4102, sel_4103, sel_4104, sel_4105, sel_4106, sel_4107,
       sel_4119, sel_4120) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9115_sel_1 = sel_4119;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9115_sel_1 = sel_1_677;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9115_sel_1 = sel_4107;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9115_sel_1 = sel_4106;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9115_sel_1 = sel_4105;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9115_sel_1 = sel_4104;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9115_sel_1 = sel_4103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9115_sel_1 = sel_4102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9115_sel_1 = sel_4101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9115_sel_1 = sel_4100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9115_sel_1 = sel_4099;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9115_sel_1 = sel_4098;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9115_sel_1 = sel_4097;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9115_sel_1 = sel_4096;
        end
      default :
        begin
          p9115_sel_1 = sel_4120;
        end
    endcase
    sel_1_678 = p9115_sel_1;
  end

  assign tmp_257 = functionOutput_19[sel_1_678];

  assign sel_4121 = 1'b0;

  assign sel_4122 = 1'b0;

  assign sel_4123 = 1'b0;

  assign sel_4124 = 1'b0;

  assign sel_4125 = 1'b0;

  assign sel_4126 = 1'b0;

  assign sel_4127 = 1'b0;

  assign sel_4128 = 1'b0;

  assign sel_4129 = 1'b0;

  assign sel_4130 = 1'b0;

  assign sel_4131 = 1'b0;

  assign sel_4132 = 1'b0;

  assign sel_4133 = 1'b0;

  assign sel_4134 = 1'b0;

  assign sel_4135 = 1'b0;

  assign s_305 = 1'b1;

  assign sel_2_681 = (tmp_3 == 1'b0 ? sel_4135 :
              s_305);

  assign sel_4136 = 1'b0;

  assign sel_2_682 = (tmp_5 == 1'b0 ? sel_2_681 :
              sel_4136);

  assign sel_4137 = 1'b0;

  assign sel_2_683 = (tmp_7 == 1'b0 ? sel_2_682 :
              sel_4137);

  assign sel_4138 = 1'b0;

  assign sel_2_684 = (tmp_9 == 1'b0 ? sel_2_683 :
              sel_4138);

  assign sel_4139 = 1'b0;

  assign sel_2_685 = (tmp_11 == 1'b0 ? sel_2_684 :
              sel_4139);

  assign sel_4140 = 1'b0;

  assign sel_2_686 = (tmp_13 == 1'b0 ? sel_2_685 :
              sel_4140);

  assign sel_4141 = 1'b0;

  assign sel_2_687 = (tmp_15 == 1'b0 ? sel_2_686 :
              sel_4141);

  assign sel_4142 = 1'b0;

  assign sel_2_688 = (tmp_17 == 1'b0 ? sel_2_687 :
              sel_4142);

  assign sel_2_689 = (s_10 == 1'b0 ? sel_4134 :
              sel_2_688);

  assign sel_2_690 = (s_11 == 1'b0 ? sel_4133 :
              sel_2_689);

  assign sel_4143 = 1'b0;

  assign sel_2_691 = (s_12 == 1'b0 ? sel_2_690 :
              sel_4143);

  assign sel_4144 = 1'b0;

  assign sel_4145 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_691, sel_4121, sel_4122, sel_4123, sel_4124, sel_4125,
       sel_4126, sel_4127, sel_4128, sel_4129, sel_4130, sel_4131, sel_4132,
       sel_4144, sel_4145) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5935_sel_2 = sel_4144;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5935_sel_2 = sel_2_691;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5935_sel_2 = sel_4132;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5935_sel_2 = sel_4131;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5935_sel_2 = sel_4130;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5935_sel_2 = sel_4129;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5935_sel_2 = sel_4128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5935_sel_2 = sel_4127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5935_sel_2 = sel_4126;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5935_sel_2 = sel_4125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5935_sel_2 = sel_4124;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5935_sel_2 = sel_4123;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5935_sel_2 = sel_4122;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5935_sel_2 = sel_4121;
        end
      default :
        begin
          p5935_sel_2 = sel_4145;
        end
    endcase
    sel_2_692 = p5935_sel_2;
  end

  always @* begin
    p5934cont_bits_41_cont_bits_41[6] = cont_bits_41_20[6];
    if (sel_2_692) begin
      p5934cont_bits_41_cont_bits_41[6] = tmp_257;
    end
    cont_bits_41_21[0] = cont_bits_41_20[0];
    cont_bits_41_21[1] = cont_bits_41_20[1];
    cont_bits_41_21[2] = cont_bits_41_20[2];
    cont_bits_41_21[3] = cont_bits_41_20[3];
    cont_bits_41_21[4] = cont_bits_41_20[4];
    cont_bits_41_21[5] = cont_bits_41_20[5];
    cont_bits_41_21[6] = p5934cont_bits_41_cont_bits_41[6];
    cont_bits_41_21[7] = cont_bits_41_20[7];
    cont_bits_41_21[8] = cont_bits_41_20[8];
    cont_bits_41_21[9] = cont_bits_41_20[9];
    cont_bits_41_21[10] = cont_bits_41_20[10];
    cont_bits_41_21[11] = cont_bits_41_20[11];
  end

  assign sel_4146 = 32'sd0;

  assign sel_4147 = 32'sd0;

  assign sel_4148 = 32'sd0;

  assign sel_4149 = 32'sd0;

  assign sel_4150 = 32'sd0;

  assign sel_4151 = 32'sd0;

  assign sel_4152 = 32'sd0;

  assign sel_4153 = 32'sd0;

  assign sel_4154 = 32'sd0;

  assign sel_4155 = 32'sd0;

  assign sel_4156 = 32'sd0;

  assign sel_4157 = 32'sd0;

  assign sel_4158 = 32'sd0;

  assign sel_4159 = 32'sd0;

  assign sel_4160 = 32'sd0;

  assign s_306 = 32'sd7;

  assign sel_1_679 = (tmp_3 == 1'b0 ? sel_4160 :
              s_306);

  assign sel_4161 = 32'sd0;

  assign sel_1_680 = (tmp_5 == 1'b0 ? sel_1_679 :
              sel_4161);

  assign sel_4162 = 32'sd0;

  assign sel_1_681 = (tmp_7 == 1'b0 ? sel_1_680 :
              sel_4162);

  assign sel_4163 = 32'sd0;

  assign sel_1_682 = (tmp_9 == 1'b0 ? sel_1_681 :
              sel_4163);

  assign sel_4164 = 32'sd0;

  assign sel_1_683 = (tmp_11 == 1'b0 ? sel_1_682 :
              sel_4164);

  assign sel_4165 = 32'sd0;

  assign sel_1_684 = (tmp_13 == 1'b0 ? sel_1_683 :
              sel_4165);

  assign sel_4166 = 32'sd0;

  assign sel_1_685 = (tmp_15 == 1'b0 ? sel_1_684 :
              sel_4166);

  assign sel_4167 = 32'sd0;

  assign sel_1_686 = (tmp_17 == 1'b0 ? sel_1_685 :
              sel_4167);

  assign sel_1_687 = (s_10 == 1'b0 ? sel_4159 :
              sel_1_686);

  assign sel_1_688 = (s_11 == 1'b0 ? sel_4158 :
              sel_1_687);

  assign sel_4168 = 32'sd0;

  assign sel_1_689 = (s_12 == 1'b0 ? sel_1_688 :
              sel_4168);

  assign sel_4169 = 32'sd0;

  assign sel_4170 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_689, sel_4146, sel_4147, sel_4148, sel_4149, sel_4150,
       sel_4151, sel_4152, sel_4153, sel_4154, sel_4155, sel_4156, sel_4157,
       sel_4169, sel_4170) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9761_sel_1 = sel_4169;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9761_sel_1 = sel_1_689;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9761_sel_1 = sel_4157;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9761_sel_1 = sel_4156;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9761_sel_1 = sel_4155;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9761_sel_1 = sel_4154;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9761_sel_1 = sel_4153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9761_sel_1 = sel_4152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9761_sel_1 = sel_4151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9761_sel_1 = sel_4150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9761_sel_1 = sel_4149;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9761_sel_1 = sel_4148;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9761_sel_1 = sel_4147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9761_sel_1 = sel_4146;
        end
      default :
        begin
          p9761_sel_1 = sel_4170;
        end
    endcase
    sel_1_690 = p9761_sel_1;
  end

  assign tmp_258 = functionOutput_19[sel_1_690];

  assign sel_4171 = 1'b0;

  assign sel_4172 = 1'b0;

  assign sel_4173 = 1'b0;

  assign sel_4174 = 1'b0;

  assign sel_4175 = 1'b0;

  assign sel_4176 = 1'b0;

  assign sel_4177 = 1'b0;

  assign sel_4178 = 1'b0;

  assign sel_4179 = 1'b0;

  assign sel_4180 = 1'b0;

  assign sel_4181 = 1'b0;

  assign sel_4182 = 1'b0;

  assign sel_4183 = 1'b0;

  assign sel_4184 = 1'b0;

  assign sel_4185 = 1'b0;

  assign s_307 = 1'b1;

  assign sel_2_693 = (tmp_3 == 1'b0 ? sel_4185 :
              s_307);

  assign sel_4186 = 1'b0;

  assign sel_2_694 = (tmp_5 == 1'b0 ? sel_2_693 :
              sel_4186);

  assign sel_4187 = 1'b0;

  assign sel_2_695 = (tmp_7 == 1'b0 ? sel_2_694 :
              sel_4187);

  assign sel_4188 = 1'b0;

  assign sel_2_696 = (tmp_9 == 1'b0 ? sel_2_695 :
              sel_4188);

  assign sel_4189 = 1'b0;

  assign sel_2_697 = (tmp_11 == 1'b0 ? sel_2_696 :
              sel_4189);

  assign sel_4190 = 1'b0;

  assign sel_2_698 = (tmp_13 == 1'b0 ? sel_2_697 :
              sel_4190);

  assign sel_4191 = 1'b0;

  assign sel_2_699 = (tmp_15 == 1'b0 ? sel_2_698 :
              sel_4191);

  assign sel_4192 = 1'b0;

  assign sel_2_700 = (tmp_17 == 1'b0 ? sel_2_699 :
              sel_4192);

  assign sel_2_701 = (s_10 == 1'b0 ? sel_4184 :
              sel_2_700);

  assign sel_2_702 = (s_11 == 1'b0 ? sel_4183 :
              sel_2_701);

  assign sel_4193 = 1'b0;

  assign sel_2_703 = (s_12 == 1'b0 ? sel_2_702 :
              sel_4193);

  assign sel_4194 = 1'b0;

  assign sel_4195 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_703, sel_4171, sel_4172, sel_4173, sel_4174, sel_4175,
       sel_4176, sel_4177, sel_4178, sel_4179, sel_4180, sel_4181, sel_4182,
       sel_4194, sel_4195) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5543_sel_2 = sel_4194;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5543_sel_2 = sel_2_703;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5543_sel_2 = sel_4182;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5543_sel_2 = sel_4181;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5543_sel_2 = sel_4180;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5543_sel_2 = sel_4179;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5543_sel_2 = sel_4178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5543_sel_2 = sel_4177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5543_sel_2 = sel_4176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5543_sel_2 = sel_4175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5543_sel_2 = sel_4174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5543_sel_2 = sel_4173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5543_sel_2 = sel_4172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5543_sel_2 = sel_4171;
        end
      default :
        begin
          p5543_sel_2 = sel_4195;
        end
    endcase
    sel_2_704 = p5543_sel_2;
  end

  always @* begin
    p5542cont_bits_41_cont_bits_41[7] = cont_bits_41_21[7];
    if (sel_2_704) begin
      p5542cont_bits_41_cont_bits_41[7] = tmp_258;
    end
    cont_bits_41_22[0] = cont_bits_41_21[0];
    cont_bits_41_22[1] = cont_bits_41_21[1];
    cont_bits_41_22[2] = cont_bits_41_21[2];
    cont_bits_41_22[3] = cont_bits_41_21[3];
    cont_bits_41_22[4] = cont_bits_41_21[4];
    cont_bits_41_22[5] = cont_bits_41_21[5];
    cont_bits_41_22[6] = cont_bits_41_21[6];
    cont_bits_41_22[7] = p5542cont_bits_41_cont_bits_41[7];
    cont_bits_41_22[8] = cont_bits_41_21[8];
    cont_bits_41_22[9] = cont_bits_41_21[9];
    cont_bits_41_22[10] = cont_bits_41_21[10];
    cont_bits_41_22[11] = cont_bits_41_21[11];
  end

  assign sel_4196 = 32'sd0;

  assign sel_4197 = 32'sd0;

  assign sel_4198 = 32'sd0;

  assign sel_4199 = 32'sd0;

  assign sel_4200 = 32'sd0;

  assign sel_4201 = 32'sd0;

  assign sel_4202 = 32'sd0;

  assign sel_4203 = 32'sd0;

  assign sel_4204 = 32'sd0;

  assign sel_4205 = 32'sd0;

  assign sel_4206 = 32'sd0;

  assign sel_4207 = 32'sd0;

  assign sel_4208 = 32'sd0;

  assign sel_4209 = 32'sd0;

  assign sel_4210 = 32'sd0;

  assign s_308 = 32'sd8;

  assign sel_1_691 = (tmp_3 == 1'b0 ? sel_4210 :
              s_308);

  assign sel_4211 = 32'sd0;

  assign sel_1_692 = (tmp_5 == 1'b0 ? sel_1_691 :
              sel_4211);

  assign sel_4212 = 32'sd0;

  assign sel_1_693 = (tmp_7 == 1'b0 ? sel_1_692 :
              sel_4212);

  assign sel_4213 = 32'sd0;

  assign sel_1_694 = (tmp_9 == 1'b0 ? sel_1_693 :
              sel_4213);

  assign sel_4214 = 32'sd0;

  assign sel_1_695 = (tmp_11 == 1'b0 ? sel_1_694 :
              sel_4214);

  assign sel_4215 = 32'sd0;

  assign sel_1_696 = (tmp_13 == 1'b0 ? sel_1_695 :
              sel_4215);

  assign sel_4216 = 32'sd0;

  assign sel_1_697 = (tmp_15 == 1'b0 ? sel_1_696 :
              sel_4216);

  assign sel_4217 = 32'sd0;

  assign sel_1_698 = (tmp_17 == 1'b0 ? sel_1_697 :
              sel_4217);

  assign sel_1_699 = (s_10 == 1'b0 ? sel_4209 :
              sel_1_698);

  assign sel_1_700 = (s_11 == 1'b0 ? sel_4208 :
              sel_1_699);

  assign sel_4218 = 32'sd0;

  assign sel_1_701 = (s_12 == 1'b0 ? sel_1_700 :
              sel_4218);

  assign sel_4219 = 32'sd0;

  assign sel_4220 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_701, sel_4196, sel_4197, sel_4198, sel_4199, sel_4200,
       sel_4201, sel_4202, sel_4203, sel_4204, sel_4205, sel_4206, sel_4207,
       sel_4219, sel_4220) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9217_sel_1 = sel_4219;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9217_sel_1 = sel_1_701;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9217_sel_1 = sel_4207;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9217_sel_1 = sel_4206;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9217_sel_1 = sel_4205;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9217_sel_1 = sel_4204;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9217_sel_1 = sel_4203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9217_sel_1 = sel_4202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9217_sel_1 = sel_4201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9217_sel_1 = sel_4200;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9217_sel_1 = sel_4199;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9217_sel_1 = sel_4198;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9217_sel_1 = sel_4197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9217_sel_1 = sel_4196;
        end
      default :
        begin
          p9217_sel_1 = sel_4220;
        end
    endcase
    sel_1_702 = p9217_sel_1;
  end

  assign tmp_259 = functionOutput_19[sel_1_702];

  assign sel_4221 = 1'b0;

  assign sel_4222 = 1'b0;

  assign sel_4223 = 1'b0;

  assign sel_4224 = 1'b0;

  assign sel_4225 = 1'b0;

  assign sel_4226 = 1'b0;

  assign sel_4227 = 1'b0;

  assign sel_4228 = 1'b0;

  assign sel_4229 = 1'b0;

  assign sel_4230 = 1'b0;

  assign sel_4231 = 1'b0;

  assign sel_4232 = 1'b0;

  assign sel_4233 = 1'b0;

  assign sel_4234 = 1'b0;

  assign sel_4235 = 1'b0;

  assign s_309 = 1'b1;

  assign sel_2_705 = (tmp_3 == 1'b0 ? sel_4235 :
              s_309);

  assign sel_4236 = 1'b0;

  assign sel_2_706 = (tmp_5 == 1'b0 ? sel_2_705 :
              sel_4236);

  assign sel_4237 = 1'b0;

  assign sel_2_707 = (tmp_7 == 1'b0 ? sel_2_706 :
              sel_4237);

  assign sel_4238 = 1'b0;

  assign sel_2_708 = (tmp_9 == 1'b0 ? sel_2_707 :
              sel_4238);

  assign sel_4239 = 1'b0;

  assign sel_2_709 = (tmp_11 == 1'b0 ? sel_2_708 :
              sel_4239);

  assign sel_4240 = 1'b0;

  assign sel_2_710 = (tmp_13 == 1'b0 ? sel_2_709 :
              sel_4240);

  assign sel_4241 = 1'b0;

  assign sel_2_711 = (tmp_15 == 1'b0 ? sel_2_710 :
              sel_4241);

  assign sel_4242 = 1'b0;

  assign sel_2_712 = (tmp_17 == 1'b0 ? sel_2_711 :
              sel_4242);

  assign sel_2_713 = (s_10 == 1'b0 ? sel_4234 :
              sel_2_712);

  assign sel_2_714 = (s_11 == 1'b0 ? sel_4233 :
              sel_2_713);

  assign sel_4243 = 1'b0;

  assign sel_2_715 = (s_12 == 1'b0 ? sel_2_714 :
              sel_4243);

  assign sel_4244 = 1'b0;

  assign sel_4245 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_715, sel_4221, sel_4222, sel_4223, sel_4224, sel_4225,
       sel_4226, sel_4227, sel_4228, sel_4229, sel_4230, sel_4231, sel_4232,
       sel_4244, sel_4245) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5329_sel_2 = sel_4244;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5329_sel_2 = sel_2_715;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5329_sel_2 = sel_4232;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5329_sel_2 = sel_4231;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5329_sel_2 = sel_4230;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5329_sel_2 = sel_4229;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5329_sel_2 = sel_4228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5329_sel_2 = sel_4227;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5329_sel_2 = sel_4226;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5329_sel_2 = sel_4225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5329_sel_2 = sel_4224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5329_sel_2 = sel_4223;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5329_sel_2 = sel_4222;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5329_sel_2 = sel_4221;
        end
      default :
        begin
          p5329_sel_2 = sel_4245;
        end
    endcase
    sel_2_716 = p5329_sel_2;
  end

  always @* begin
    p5328cont_bits_41_cont_bits_41[8] = cont_bits_41_22[8];
    if (sel_2_716) begin
      p5328cont_bits_41_cont_bits_41[8] = tmp_259;
    end
    cont_bits_41_23[0] = cont_bits_41_22[0];
    cont_bits_41_23[1] = cont_bits_41_22[1];
    cont_bits_41_23[2] = cont_bits_41_22[2];
    cont_bits_41_23[3] = cont_bits_41_22[3];
    cont_bits_41_23[4] = cont_bits_41_22[4];
    cont_bits_41_23[5] = cont_bits_41_22[5];
    cont_bits_41_23[6] = cont_bits_41_22[6];
    cont_bits_41_23[7] = cont_bits_41_22[7];
    cont_bits_41_23[8] = p5328cont_bits_41_cont_bits_41[8];
    cont_bits_41_23[9] = cont_bits_41_22[9];
    cont_bits_41_23[10] = cont_bits_41_22[10];
    cont_bits_41_23[11] = cont_bits_41_22[11];
  end

  assign sel_4246 = 32'sd0;

  assign sel_4247 = 32'sd0;

  assign sel_4248 = 32'sd0;

  assign sel_4249 = 32'sd0;

  assign sel_4250 = 32'sd0;

  assign sel_4251 = 32'sd0;

  assign sel_4252 = 32'sd0;

  assign sel_4253 = 32'sd0;

  assign sel_4254 = 32'sd0;

  assign sel_4255 = 32'sd0;

  assign sel_4256 = 32'sd0;

  assign sel_4257 = 32'sd0;

  assign sel_4258 = 32'sd0;

  assign sel_4259 = 32'sd0;

  assign sel_4260 = 32'sd0;

  assign s_310 = 32'sd9;

  assign sel_1_703 = (tmp_3 == 1'b0 ? sel_4260 :
              s_310);

  assign sel_4261 = 32'sd0;

  assign sel_1_704 = (tmp_5 == 1'b0 ? sel_1_703 :
              sel_4261);

  assign sel_4262 = 32'sd0;

  assign sel_1_705 = (tmp_7 == 1'b0 ? sel_1_704 :
              sel_4262);

  assign sel_4263 = 32'sd0;

  assign sel_1_706 = (tmp_9 == 1'b0 ? sel_1_705 :
              sel_4263);

  assign sel_4264 = 32'sd0;

  assign sel_1_707 = (tmp_11 == 1'b0 ? sel_1_706 :
              sel_4264);

  assign sel_4265 = 32'sd0;

  assign sel_1_708 = (tmp_13 == 1'b0 ? sel_1_707 :
              sel_4265);

  assign sel_4266 = 32'sd0;

  assign sel_1_709 = (tmp_15 == 1'b0 ? sel_1_708 :
              sel_4266);

  assign sel_4267 = 32'sd0;

  assign sel_1_710 = (tmp_17 == 1'b0 ? sel_1_709 :
              sel_4267);

  assign sel_1_711 = (s_10 == 1'b0 ? sel_4259 :
              sel_1_710);

  assign sel_1_712 = (s_11 == 1'b0 ? sel_4258 :
              sel_1_711);

  assign sel_4268 = 32'sd0;

  assign sel_1_713 = (s_12 == 1'b0 ? sel_1_712 :
              sel_4268);

  assign sel_4269 = 32'sd0;

  assign sel_4270 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_713, sel_4246, sel_4247, sel_4248, sel_4249, sel_4250,
       sel_4251, sel_4252, sel_4253, sel_4254, sel_4255, sel_4256, sel_4257,
       sel_4269, sel_4270) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8724_sel_1 = sel_4269;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8724_sel_1 = sel_1_713;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8724_sel_1 = sel_4257;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8724_sel_1 = sel_4256;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8724_sel_1 = sel_4255;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8724_sel_1 = sel_4254;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8724_sel_1 = sel_4253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8724_sel_1 = sel_4252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8724_sel_1 = sel_4251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8724_sel_1 = sel_4250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8724_sel_1 = sel_4249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8724_sel_1 = sel_4248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8724_sel_1 = sel_4247;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8724_sel_1 = sel_4246;
        end
      default :
        begin
          p8724_sel_1 = sel_4270;
        end
    endcase
    sel_1_714 = p8724_sel_1;
  end

  assign tmp_260 = functionOutput_19[sel_1_714];

  assign sel_4271 = 1'b0;

  assign sel_4272 = 1'b0;

  assign sel_4273 = 1'b0;

  assign sel_4274 = 1'b0;

  assign sel_4275 = 1'b0;

  assign sel_4276 = 1'b0;

  assign sel_4277 = 1'b0;

  assign sel_4278 = 1'b0;

  assign sel_4279 = 1'b0;

  assign sel_4280 = 1'b0;

  assign sel_4281 = 1'b0;

  assign sel_4282 = 1'b0;

  assign sel_4283 = 1'b0;

  assign sel_4284 = 1'b0;

  assign sel_4285 = 1'b0;

  assign s_311 = 1'b1;

  assign sel_2_717 = (tmp_3 == 1'b0 ? sel_4285 :
              s_311);

  assign sel_4286 = 1'b0;

  assign sel_2_718 = (tmp_5 == 1'b0 ? sel_2_717 :
              sel_4286);

  assign sel_4287 = 1'b0;

  assign sel_2_719 = (tmp_7 == 1'b0 ? sel_2_718 :
              sel_4287);

  assign sel_4288 = 1'b0;

  assign sel_2_720 = (tmp_9 == 1'b0 ? sel_2_719 :
              sel_4288);

  assign sel_4289 = 1'b0;

  assign sel_2_721 = (tmp_11 == 1'b0 ? sel_2_720 :
              sel_4289);

  assign sel_4290 = 1'b0;

  assign sel_2_722 = (tmp_13 == 1'b0 ? sel_2_721 :
              sel_4290);

  assign sel_4291 = 1'b0;

  assign sel_2_723 = (tmp_15 == 1'b0 ? sel_2_722 :
              sel_4291);

  assign sel_4292 = 1'b0;

  assign sel_2_724 = (tmp_17 == 1'b0 ? sel_2_723 :
              sel_4292);

  assign sel_2_725 = (s_10 == 1'b0 ? sel_4284 :
              sel_2_724);

  assign sel_2_726 = (s_11 == 1'b0 ? sel_4283 :
              sel_2_725);

  assign sel_4293 = 1'b0;

  assign sel_2_727 = (s_12 == 1'b0 ? sel_2_726 :
              sel_4293);

  assign sel_4294 = 1'b0;

  assign sel_4295 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_727, sel_4271, sel_4272, sel_4273, sel_4274, sel_4275,
       sel_4276, sel_4277, sel_4278, sel_4279, sel_4280, sel_4281, sel_4282,
       sel_4294, sel_4295) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4937_sel_2 = sel_4294;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4937_sel_2 = sel_2_727;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4937_sel_2 = sel_4282;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4937_sel_2 = sel_4281;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4937_sel_2 = sel_4280;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4937_sel_2 = sel_4279;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4937_sel_2 = sel_4278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4937_sel_2 = sel_4277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4937_sel_2 = sel_4276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4937_sel_2 = sel_4275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4937_sel_2 = sel_4274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4937_sel_2 = sel_4273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4937_sel_2 = sel_4272;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4937_sel_2 = sel_4271;
        end
      default :
        begin
          p4937_sel_2 = sel_4295;
        end
    endcase
    sel_2_728 = p4937_sel_2;
  end

  always @* begin
    p4936cont_bits_41_cont_bits_41[9] = cont_bits_41_23[9];
    if (sel_2_728) begin
      p4936cont_bits_41_cont_bits_41[9] = tmp_260;
    end
    cont_bits_41_24[0] = cont_bits_41_23[0];
    cont_bits_41_24[1] = cont_bits_41_23[1];
    cont_bits_41_24[2] = cont_bits_41_23[2];
    cont_bits_41_24[3] = cont_bits_41_23[3];
    cont_bits_41_24[4] = cont_bits_41_23[4];
    cont_bits_41_24[5] = cont_bits_41_23[5];
    cont_bits_41_24[6] = cont_bits_41_23[6];
    cont_bits_41_24[7] = cont_bits_41_23[7];
    cont_bits_41_24[8] = cont_bits_41_23[8];
    cont_bits_41_24[9] = p4936cont_bits_41_cont_bits_41[9];
    cont_bits_41_24[10] = cont_bits_41_23[10];
    cont_bits_41_24[11] = cont_bits_41_23[11];
  end

  assign sel_4296 = 32'sd0;

  assign sel_4297 = 32'sd0;

  assign sel_4298 = 32'sd0;

  assign sel_4299 = 32'sd0;

  assign sel_4300 = 32'sd0;

  assign sel_4301 = 32'sd0;

  assign sel_4302 = 32'sd0;

  assign sel_4303 = 32'sd0;

  assign sel_4304 = 32'sd0;

  assign sel_4305 = 32'sd0;

  assign sel_4306 = 32'sd0;

  assign sel_4307 = 32'sd0;

  assign sel_4308 = 32'sd0;

  assign sel_4309 = 32'sd0;

  assign sel_4310 = 32'sd0;

  assign s_312 = 32'sd10;

  assign sel_1_715 = (tmp_3 == 1'b0 ? sel_4310 :
              s_312);

  assign sel_4311 = 32'sd0;

  assign sel_1_716 = (tmp_5 == 1'b0 ? sel_1_715 :
              sel_4311);

  assign sel_4312 = 32'sd0;

  assign sel_1_717 = (tmp_7 == 1'b0 ? sel_1_716 :
              sel_4312);

  assign sel_4313 = 32'sd0;

  assign sel_1_718 = (tmp_9 == 1'b0 ? sel_1_717 :
              sel_4313);

  assign sel_4314 = 32'sd0;

  assign sel_1_719 = (tmp_11 == 1'b0 ? sel_1_718 :
              sel_4314);

  assign sel_4315 = 32'sd0;

  assign sel_1_720 = (tmp_13 == 1'b0 ? sel_1_719 :
              sel_4315);

  assign sel_4316 = 32'sd0;

  assign sel_1_721 = (tmp_15 == 1'b0 ? sel_1_720 :
              sel_4316);

  assign sel_4317 = 32'sd0;

  assign sel_1_722 = (tmp_17 == 1'b0 ? sel_1_721 :
              sel_4317);

  assign sel_1_723 = (s_10 == 1'b0 ? sel_4309 :
              sel_1_722);

  assign sel_1_724 = (s_11 == 1'b0 ? sel_4308 :
              sel_1_723);

  assign sel_4318 = 32'sd0;

  assign sel_1_725 = (s_12 == 1'b0 ? sel_1_724 :
              sel_4318);

  assign sel_4319 = 32'sd0;

  assign sel_4320 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_725, sel_4296, sel_4297, sel_4298, sel_4299, sel_4300,
       sel_4301, sel_4302, sel_4303, sel_4304, sel_4305, sel_4306, sel_4307,
       sel_4319, sel_4320) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9319_sel_1 = sel_4319;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9319_sel_1 = sel_1_725;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9319_sel_1 = sel_4307;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9319_sel_1 = sel_4306;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9319_sel_1 = sel_4305;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9319_sel_1 = sel_4304;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9319_sel_1 = sel_4303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9319_sel_1 = sel_4302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9319_sel_1 = sel_4301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9319_sel_1 = sel_4300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9319_sel_1 = sel_4299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9319_sel_1 = sel_4298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9319_sel_1 = sel_4297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9319_sel_1 = sel_4296;
        end
      default :
        begin
          p9319_sel_1 = sel_4320;
        end
    endcase
    sel_1_726 = p9319_sel_1;
  end

  assign tmp_261 = functionOutput_19[sel_1_726];

  assign sel_4321 = 1'b0;

  assign sel_4322 = 1'b0;

  assign sel_4323 = 1'b0;

  assign sel_4324 = 1'b0;

  assign sel_4325 = 1'b0;

  assign sel_4326 = 1'b0;

  assign sel_4327 = 1'b0;

  assign sel_4328 = 1'b0;

  assign sel_4329 = 1'b0;

  assign sel_4330 = 1'b0;

  assign sel_4331 = 1'b0;

  assign sel_4332 = 1'b0;

  assign sel_4333 = 1'b0;

  assign sel_4334 = 1'b0;

  assign sel_4335 = 1'b0;

  assign s_313 = 1'b1;

  assign sel_2_729 = (tmp_3 == 1'b0 ? sel_4335 :
              s_313);

  assign sel_4336 = 1'b0;

  assign sel_2_730 = (tmp_5 == 1'b0 ? sel_2_729 :
              sel_4336);

  assign sel_4337 = 1'b0;

  assign sel_2_731 = (tmp_7 == 1'b0 ? sel_2_730 :
              sel_4337);

  assign sel_4338 = 1'b0;

  assign sel_2_732 = (tmp_9 == 1'b0 ? sel_2_731 :
              sel_4338);

  assign sel_4339 = 1'b0;

  assign sel_2_733 = (tmp_11 == 1'b0 ? sel_2_732 :
              sel_4339);

  assign sel_4340 = 1'b0;

  assign sel_2_734 = (tmp_13 == 1'b0 ? sel_2_733 :
              sel_4340);

  assign sel_4341 = 1'b0;

  assign sel_2_735 = (tmp_15 == 1'b0 ? sel_2_734 :
              sel_4341);

  assign sel_4342 = 1'b0;

  assign sel_2_736 = (tmp_17 == 1'b0 ? sel_2_735 :
              sel_4342);

  assign sel_2_737 = (s_10 == 1'b0 ? sel_4334 :
              sel_2_736);

  assign sel_2_738 = (s_11 == 1'b0 ? sel_4333 :
              sel_2_737);

  assign sel_4343 = 1'b0;

  assign sel_2_739 = (s_12 == 1'b0 ? sel_2_738 :
              sel_4343);

  assign sel_4344 = 1'b0;

  assign sel_4345 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_739, sel_4321, sel_4322, sel_4323, sel_4324, sel_4325,
       sel_4326, sel_4327, sel_4328, sel_4329, sel_4330, sel_4331, sel_4332,
       sel_4344, sel_4345) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4723_sel_2 = sel_4344;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4723_sel_2 = sel_2_739;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4723_sel_2 = sel_4332;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4723_sel_2 = sel_4331;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4723_sel_2 = sel_4330;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4723_sel_2 = sel_4329;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4723_sel_2 = sel_4328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4723_sel_2 = sel_4327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4723_sel_2 = sel_4326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4723_sel_2 = sel_4325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4723_sel_2 = sel_4324;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4723_sel_2 = sel_4323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4723_sel_2 = sel_4322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4723_sel_2 = sel_4321;
        end
      default :
        begin
          p4723_sel_2 = sel_4345;
        end
    endcase
    sel_2_740 = p4723_sel_2;
  end

  always @* begin
    p4722cont_bits_41_cont_bits_41[10] = cont_bits_41_24[10];
    if (sel_2_740) begin
      p4722cont_bits_41_cont_bits_41[10] = tmp_261;
    end
    cont_bits_41_25[0] = cont_bits_41_24[0];
    cont_bits_41_25[1] = cont_bits_41_24[1];
    cont_bits_41_25[2] = cont_bits_41_24[2];
    cont_bits_41_25[3] = cont_bits_41_24[3];
    cont_bits_41_25[4] = cont_bits_41_24[4];
    cont_bits_41_25[5] = cont_bits_41_24[5];
    cont_bits_41_25[6] = cont_bits_41_24[6];
    cont_bits_41_25[7] = cont_bits_41_24[7];
    cont_bits_41_25[8] = cont_bits_41_24[8];
    cont_bits_41_25[9] = cont_bits_41_24[9];
    cont_bits_41_25[10] = p4722cont_bits_41_cont_bits_41[10];
    cont_bits_41_25[11] = cont_bits_41_24[11];
  end

  assign sel_4346 = 32'sd0;

  assign sel_4347 = 32'sd0;

  assign sel_4348 = 32'sd0;

  assign sel_4349 = 32'sd0;

  assign sel_4350 = 32'sd0;

  assign sel_4351 = 32'sd0;

  assign sel_4352 = 32'sd0;

  assign sel_4353 = 32'sd0;

  assign sel_4354 = 32'sd0;

  assign sel_4355 = 32'sd0;

  assign sel_4356 = 32'sd0;

  assign sel_4357 = 32'sd0;

  assign sel_4358 = 32'sd0;

  assign sel_4359 = 32'sd0;

  assign sel_4360 = 32'sd0;

  assign s_314 = 32'sd11;

  assign sel_1_727 = (tmp_3 == 1'b0 ? sel_4360 :
              s_314);

  assign sel_4361 = 32'sd0;

  assign sel_1_728 = (tmp_5 == 1'b0 ? sel_1_727 :
              sel_4361);

  assign sel_4362 = 32'sd0;

  assign sel_1_729 = (tmp_7 == 1'b0 ? sel_1_728 :
              sel_4362);

  assign sel_4363 = 32'sd0;

  assign sel_1_730 = (tmp_9 == 1'b0 ? sel_1_729 :
              sel_4363);

  assign sel_4364 = 32'sd0;

  assign sel_1_731 = (tmp_11 == 1'b0 ? sel_1_730 :
              sel_4364);

  assign sel_4365 = 32'sd0;

  assign sel_1_732 = (tmp_13 == 1'b0 ? sel_1_731 :
              sel_4365);

  assign sel_4366 = 32'sd0;

  assign sel_1_733 = (tmp_15 == 1'b0 ? sel_1_732 :
              sel_4366);

  assign sel_4367 = 32'sd0;

  assign sel_1_734 = (tmp_17 == 1'b0 ? sel_1_733 :
              sel_4367);

  assign sel_1_735 = (s_10 == 1'b0 ? sel_4359 :
              sel_1_734);

  assign sel_1_736 = (s_11 == 1'b0 ? sel_4358 :
              sel_1_735);

  assign sel_4368 = 32'sd0;

  assign sel_1_737 = (s_12 == 1'b0 ? sel_1_736 :
              sel_4368);

  assign sel_4369 = 32'sd0;

  assign sel_4370 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_737, sel_4346, sel_4347, sel_4348, sel_4349, sel_4350,
       sel_4351, sel_4352, sel_4353, sel_4354, sel_4355, sel_4356, sel_4357,
       sel_4369, sel_4370) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9200_sel_1 = sel_4369;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9200_sel_1 = sel_1_737;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9200_sel_1 = sel_4357;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9200_sel_1 = sel_4356;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9200_sel_1 = sel_4355;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9200_sel_1 = sel_4354;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9200_sel_1 = sel_4353;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9200_sel_1 = sel_4352;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9200_sel_1 = sel_4351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9200_sel_1 = sel_4350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9200_sel_1 = sel_4349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9200_sel_1 = sel_4348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9200_sel_1 = sel_4347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9200_sel_1 = sel_4346;
        end
      default :
        begin
          p9200_sel_1 = sel_4370;
        end
    endcase
    sel_1_738 = p9200_sel_1;
  end

  assign tmp_262 = functionOutput_19[sel_1_738];

  assign sel_4371 = 1'b0;

  assign sel_4372 = 1'b0;

  assign sel_4373 = 1'b0;

  assign sel_4374 = 1'b0;

  assign sel_4375 = 1'b0;

  assign sel_4376 = 1'b0;

  assign sel_4377 = 1'b0;

  assign sel_4378 = 1'b0;

  assign sel_4379 = 1'b0;

  assign sel_4380 = 1'b0;

  assign sel_4381 = 1'b0;

  assign sel_4382 = 1'b0;

  assign sel_4383 = 1'b0;

  assign sel_4384 = 1'b0;

  assign sel_4385 = 1'b0;

  assign s_315 = 1'b1;

  assign sel_2_741 = (tmp_3 == 1'b0 ? sel_4385 :
              s_315);

  assign sel_4386 = 1'b0;

  assign sel_2_742 = (tmp_5 == 1'b0 ? sel_2_741 :
              sel_4386);

  assign sel_4387 = 1'b0;

  assign sel_2_743 = (tmp_7 == 1'b0 ? sel_2_742 :
              sel_4387);

  assign sel_4388 = 1'b0;

  assign sel_2_744 = (tmp_9 == 1'b0 ? sel_2_743 :
              sel_4388);

  assign sel_4389 = 1'b0;

  assign sel_2_745 = (tmp_11 == 1'b0 ? sel_2_744 :
              sel_4389);

  assign sel_4390 = 1'b0;

  assign sel_2_746 = (tmp_13 == 1'b0 ? sel_2_745 :
              sel_4390);

  assign sel_4391 = 1'b0;

  assign sel_2_747 = (tmp_15 == 1'b0 ? sel_2_746 :
              sel_4391);

  assign sel_4392 = 1'b0;

  assign sel_2_748 = (tmp_17 == 1'b0 ? sel_2_747 :
              sel_4392);

  assign sel_2_749 = (s_10 == 1'b0 ? sel_4384 :
              sel_2_748);

  assign sel_2_750 = (s_11 == 1'b0 ? sel_4383 :
              sel_2_749);

  assign sel_4393 = 1'b0;

  assign sel_2_751 = (s_12 == 1'b0 ? sel_2_750 :
              sel_4393);

  assign sel_4394 = 1'b0;

  assign sel_4395 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_751, sel_4371, sel_4372, sel_4373, sel_4374, sel_4375,
       sel_4376, sel_4377, sel_4378, sel_4379, sel_4380, sel_4381, sel_4382,
       sel_4394, sel_4395) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4331_sel_2 = sel_4394;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4331_sel_2 = sel_2_751;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4331_sel_2 = sel_4382;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4331_sel_2 = sel_4381;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4331_sel_2 = sel_4380;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4331_sel_2 = sel_4379;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4331_sel_2 = sel_4378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4331_sel_2 = sel_4377;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4331_sel_2 = sel_4376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4331_sel_2 = sel_4375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4331_sel_2 = sel_4374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4331_sel_2 = sel_4373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4331_sel_2 = sel_4372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4331_sel_2 = sel_4371;
        end
      default :
        begin
          p4331_sel_2 = sel_4395;
        end
    endcase
    sel_2_752 = p4331_sel_2;
  end

  always @* begin
    p4330cont_bits_41_cont_bits_41[11] = cont_bits_41_25[11];
    if (sel_2_752) begin
      p4330cont_bits_41_cont_bits_41[11] = tmp_262;
    end
    cont_bits_41_26[0] = cont_bits_41_25[0];
    cont_bits_41_26[1] = cont_bits_41_25[1];
    cont_bits_41_26[2] = cont_bits_41_25[2];
    cont_bits_41_26[3] = cont_bits_41_25[3];
    cont_bits_41_26[4] = cont_bits_41_25[4];
    cont_bits_41_26[5] = cont_bits_41_25[5];
    cont_bits_41_26[6] = cont_bits_41_25[6];
    cont_bits_41_26[7] = cont_bits_41_25[7];
    cont_bits_41_26[8] = cont_bits_41_25[8];
    cont_bits_41_26[9] = cont_bits_41_25[9];
    cont_bits_41_26[10] = cont_bits_41_25[10];
    cont_bits_41_26[11] = p4330cont_bits_41_cont_bits_41[11];
  end

  assign sel_4396 = 32'sd0;

  assign sel_4397 = 32'sd0;

  assign sel_4398 = 32'sd0;

  assign sel_4399 = 32'sd0;

  assign sel_4400 = 32'sd0;

  assign sel_4401 = 32'sd0;

  assign sel_4402 = 32'sd0;

  assign sel_4403 = 32'sd0;

  assign sel_4404 = 32'sd0;

  assign sel_4405 = 32'sd0;

  assign sel_4406 = 32'sd0;

  assign sel_4407 = 32'sd0;

  assign sel_4408 = 32'sd0;

  assign sel_4409 = 32'sd0;

  assign sel_4410 = 32'sd0;

  assign s_316 = 32'sd0;

  assign sel_1_739 = (tmp_3 == 1'b0 ? sel_4410 :
              s_316);

  assign sel_4411 = 32'sd0;

  assign sel_1_740 = (tmp_5 == 1'b0 ? sel_1_739 :
              sel_4411);

  assign sel_4412 = 32'sd0;

  assign sel_1_741 = (tmp_7 == 1'b0 ? sel_1_740 :
              sel_4412);

  assign sel_4413 = 32'sd0;

  assign sel_1_742 = (tmp_9 == 1'b0 ? sel_1_741 :
              sel_4413);

  assign sel_4414 = 32'sd0;

  assign sel_1_743 = (tmp_11 == 1'b0 ? sel_1_742 :
              sel_4414);

  assign sel_4415 = 32'sd0;

  assign sel_1_744 = (tmp_13 == 1'b0 ? sel_1_743 :
              sel_4415);

  assign sel_4416 = 32'sd0;

  assign sel_1_745 = (tmp_15 == 1'b0 ? sel_1_744 :
              sel_4416);

  assign sel_4417 = 32'sd0;

  assign sel_1_746 = (tmp_17 == 1'b0 ? sel_1_745 :
              sel_4417);

  assign sel_1_747 = (s_10 == 1'b0 ? sel_4409 :
              sel_1_746);

  assign sel_1_748 = (s_11 == 1'b0 ? sel_4408 :
              sel_1_747);

  assign sel_4418 = 32'sd0;

  assign sel_1_749 = (s_12 == 1'b0 ? sel_1_748 :
              sel_4418);

  assign sel_4419 = 32'sd0;

  assign sel_4420 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_749, sel_4396, sel_4397, sel_4398, sel_4399, sel_4400,
       sel_4401, sel_4402, sel_4403, sel_4404, sel_4405, sel_4406, sel_4407,
       sel_4419, sel_4420) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3382_sel_1 = sel_4419;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3382_sel_1 = sel_1_749;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3382_sel_1 = sel_4407;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3382_sel_1 = sel_4406;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3382_sel_1 = sel_4405;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3382_sel_1 = sel_4404;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3382_sel_1 = sel_4403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3382_sel_1 = sel_4402;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3382_sel_1 = sel_4401;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3382_sel_1 = sel_4400;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3382_sel_1 = sel_4399;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3382_sel_1 = sel_4398;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3382_sel_1 = sel_4397;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3382_sel_1 = sel_4396;
        end
      default :
        begin
          p3382_sel_1 = sel_4420;
        end
    endcase
    sel_1_750 = p3382_sel_1;
  end

  assign cont_bits_41_27 = cont_bits_41_26[sel_1_750];

  assign cont_bits_42_14[0] = 1'b0;
  assign cont_bits_42_14[1] = 1'b0;
  assign cont_bits_42_14[2] = 1'b0;
  assign cont_bits_42_14[3] = 1'b0;
  assign cont_bits_42_14[4] = 1'b0;
  assign cont_bits_42_14[5] = 1'b0;
  assign cont_bits_42_14[6] = 1'b0;
  assign cont_bits_42_14[7] = 1'b0;
  assign cont_bits_42_14[8] = 1'b0;
  assign cont_bits_42_14[9] = 1'b0;
  assign cont_bits_42_14[10] = 1'b0;
  assign cont_bits_42_14[11] = 1'b0;

  simfcn1 u_simfcn1_9 (.vx(r_v42),  // uint16
                       .cont_bits2_0(functionOutput_0_9),  // boolean
                       .cont_bits2_1(functionOutput_1_9),  // boolean
                       .cont_bits2_2(functionOutput_2_9),  // boolean
                       .cont_bits2_3(functionOutput_3_9),  // boolean
                       .cont_bits2_4(functionOutput_4_9),  // boolean
                       .cont_bits2_5(functionOutput_5_9),  // boolean
                       .cont_bits2_6(functionOutput_6_9),  // boolean
                       .cont_bits2_7(functionOutput_7_9),  // boolean
                       .cont_bits2_8(functionOutput_8_9),  // boolean
                       .cont_bits2_9(functionOutput_9_9),  // boolean
                       .cont_bits2_10(functionOutput_10_9),  // boolean
                       .cont_bits2_11(functionOutput_11_9)  // boolean
                       );

  assign functionOutput_20[0] = functionOutput_0_9;
  assign functionOutput_20[1] = functionOutput_1_9;
  assign functionOutput_20[2] = functionOutput_2_9;
  assign functionOutput_20[3] = functionOutput_3_9;
  assign functionOutput_20[4] = functionOutput_4_9;
  assign functionOutput_20[5] = functionOutput_5_9;
  assign functionOutput_20[6] = functionOutput_6_9;
  assign functionOutput_20[7] = functionOutput_7_9;
  assign functionOutput_20[8] = functionOutput_8_9;
  assign functionOutput_20[9] = functionOutput_9_9;
  assign functionOutput_20[10] = functionOutput_10_9;
  assign functionOutput_20[11] = functionOutput_11_9;

  assign sel_4421 = 32'sd0;

  assign sel_4422 = 32'sd0;

  assign sel_4423 = 32'sd0;

  assign sel_4424 = 32'sd0;

  assign sel_4425 = 32'sd0;

  assign sel_4426 = 32'sd0;

  assign sel_4427 = 32'sd0;

  assign sel_4428 = 32'sd0;

  assign sel_4429 = 32'sd0;

  assign sel_4430 = 32'sd0;

  assign sel_4431 = 32'sd0;

  assign sel_4432 = 32'sd0;

  assign sel_4433 = 32'sd0;

  assign sel_4434 = 32'sd0;

  assign sel_4435 = 32'sd0;

  assign s_317 = 32'sd0;

  assign sel_1_751 = (tmp_5 == 1'b0 ? sel_4435 :
              s_317);

  assign sel_4436 = 32'sd0;

  assign sel_1_752 = (tmp_7 == 1'b0 ? sel_1_751 :
              sel_4436);

  assign sel_4437 = 32'sd0;

  assign sel_1_753 = (tmp_9 == 1'b0 ? sel_1_752 :
              sel_4437);

  assign sel_4438 = 32'sd0;

  assign sel_1_754 = (tmp_11 == 1'b0 ? sel_1_753 :
              sel_4438);

  assign sel_4439 = 32'sd0;

  assign sel_1_755 = (tmp_13 == 1'b0 ? sel_1_754 :
              sel_4439);

  assign sel_4440 = 32'sd0;

  assign sel_1_756 = (tmp_15 == 1'b0 ? sel_1_755 :
              sel_4440);

  assign sel_4441 = 32'sd0;

  assign sel_1_757 = (tmp_17 == 1'b0 ? sel_1_756 :
              sel_4441);

  assign sel_1_758 = (s_10 == 1'b0 ? sel_4434 :
              sel_1_757);

  assign sel_1_759 = (s_11 == 1'b0 ? sel_4433 :
              sel_1_758);

  assign sel_4442 = 32'sd0;

  assign sel_1_760 = (s_12 == 1'b0 ? sel_1_759 :
              sel_4442);

  assign sel_4443 = 32'sd0;

  assign sel_4444 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_760, sel_4421, sel_4422, sel_4423, sel_4424, sel_4425,
       sel_4426, sel_4427, sel_4428, sel_4429, sel_4430, sel_4431, sel_4432,
       sel_4443, sel_4444) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9370_sel_1 = sel_4443;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9370_sel_1 = sel_1_760;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9370_sel_1 = sel_4432;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9370_sel_1 = sel_4431;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9370_sel_1 = sel_4430;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9370_sel_1 = sel_4429;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9370_sel_1 = sel_4428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9370_sel_1 = sel_4427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9370_sel_1 = sel_4426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9370_sel_1 = sel_4425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9370_sel_1 = sel_4424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9370_sel_1 = sel_4423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9370_sel_1 = sel_4422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9370_sel_1 = sel_4421;
        end
      default :
        begin
          p9370_sel_1 = sel_4444;
        end
    endcase
    sel_1_761 = p9370_sel_1;
  end

  assign tmp_263 = functionOutput_20[sel_1_761];

  assign sel_4445 = 1'b0;

  assign sel_4446 = 1'b0;

  assign sel_4447 = 1'b0;

  assign sel_4448 = 1'b0;

  assign sel_4449 = 1'b0;

  assign sel_4450 = 1'b0;

  assign sel_4451 = 1'b0;

  assign sel_4452 = 1'b0;

  assign sel_4453 = 1'b0;

  assign sel_4454 = 1'b0;

  assign sel_4455 = 1'b0;

  assign sel_4456 = 1'b0;

  assign sel_4457 = 1'b0;

  assign sel_4458 = 1'b0;

  assign sel_4459 = 1'b0;

  assign s_318 = 1'b1;

  assign sel_2_753 = (tmp_5 == 1'b0 ? sel_4459 :
              s_318);

  assign sel_4460 = 1'b0;

  assign sel_2_754 = (tmp_7 == 1'b0 ? sel_2_753 :
              sel_4460);

  assign sel_4461 = 1'b0;

  assign sel_2_755 = (tmp_9 == 1'b0 ? sel_2_754 :
              sel_4461);

  assign sel_4462 = 1'b0;

  assign sel_2_756 = (tmp_11 == 1'b0 ? sel_2_755 :
              sel_4462);

  assign sel_4463 = 1'b0;

  assign sel_2_757 = (tmp_13 == 1'b0 ? sel_2_756 :
              sel_4463);

  assign sel_4464 = 1'b0;

  assign sel_2_758 = (tmp_15 == 1'b0 ? sel_2_757 :
              sel_4464);

  assign sel_4465 = 1'b0;

  assign sel_2_759 = (tmp_17 == 1'b0 ? sel_2_758 :
              sel_4465);

  assign sel_2_760 = (s_10 == 1'b0 ? sel_4458 :
              sel_2_759);

  assign sel_2_761 = (s_11 == 1'b0 ? sel_4457 :
              sel_2_760);

  assign sel_4466 = 1'b0;

  assign sel_2_762 = (s_12 == 1'b0 ? sel_2_761 :
              sel_4466);

  assign sel_4467 = 1'b0;

  assign sel_4468 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_762, sel_4445, sel_4446, sel_4447, sel_4448, sel_4449,
       sel_4450, sel_4451, sel_4452, sel_4453, sel_4454, sel_4455, sel_4456,
       sel_4467, sel_4468) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7752_sel_2 = sel_4467;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7752_sel_2 = sel_2_762;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7752_sel_2 = sel_4456;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7752_sel_2 = sel_4455;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7752_sel_2 = sel_4454;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7752_sel_2 = sel_4453;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7752_sel_2 = sel_4452;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7752_sel_2 = sel_4451;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7752_sel_2 = sel_4450;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7752_sel_2 = sel_4449;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7752_sel_2 = sel_4448;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7752_sel_2 = sel_4447;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7752_sel_2 = sel_4446;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7752_sel_2 = sel_4445;
        end
      default :
        begin
          p7752_sel_2 = sel_4468;
        end
    endcase
    sel_2_763 = p7752_sel_2;
  end

  always @* begin
    p7751cont_bits_42_cont_bits_42[0] = cont_bits_42_14[0];
    if (sel_2_763) begin
      p7751cont_bits_42_cont_bits_42[0] = tmp_263;
    end
    cont_bits_42_15[0] = p7751cont_bits_42_cont_bits_42[0];
    cont_bits_42_15[1] = cont_bits_42_14[1];
    cont_bits_42_15[2] = cont_bits_42_14[2];
    cont_bits_42_15[3] = cont_bits_42_14[3];
    cont_bits_42_15[4] = cont_bits_42_14[4];
    cont_bits_42_15[5] = cont_bits_42_14[5];
    cont_bits_42_15[6] = cont_bits_42_14[6];
    cont_bits_42_15[7] = cont_bits_42_14[7];
    cont_bits_42_15[8] = cont_bits_42_14[8];
    cont_bits_42_15[9] = cont_bits_42_14[9];
    cont_bits_42_15[10] = cont_bits_42_14[10];
    cont_bits_42_15[11] = cont_bits_42_14[11];
  end

  assign sel_4469 = 32'sd0;

  assign sel_4470 = 32'sd0;

  assign sel_4471 = 32'sd0;

  assign sel_4472 = 32'sd0;

  assign sel_4473 = 32'sd0;

  assign sel_4474 = 32'sd0;

  assign sel_4475 = 32'sd0;

  assign sel_4476 = 32'sd0;

  assign sel_4477 = 32'sd0;

  assign sel_4478 = 32'sd0;

  assign sel_4479 = 32'sd0;

  assign sel_4480 = 32'sd0;

  assign sel_4481 = 32'sd0;

  assign sel_4482 = 32'sd0;

  assign sel_4483 = 32'sd0;

  assign s_319 = 32'sd1;

  assign sel_1_762 = (tmp_5 == 1'b0 ? sel_4483 :
              s_319);

  assign sel_4484 = 32'sd0;

  assign sel_1_763 = (tmp_7 == 1'b0 ? sel_1_762 :
              sel_4484);

  assign sel_4485 = 32'sd0;

  assign sel_1_764 = (tmp_9 == 1'b0 ? sel_1_763 :
              sel_4485);

  assign sel_4486 = 32'sd0;

  assign sel_1_765 = (tmp_11 == 1'b0 ? sel_1_764 :
              sel_4486);

  assign sel_4487 = 32'sd0;

  assign sel_1_766 = (tmp_13 == 1'b0 ? sel_1_765 :
              sel_4487);

  assign sel_4488 = 32'sd0;

  assign sel_1_767 = (tmp_15 == 1'b0 ? sel_1_766 :
              sel_4488);

  assign sel_4489 = 32'sd0;

  assign sel_1_768 = (tmp_17 == 1'b0 ? sel_1_767 :
              sel_4489);

  assign sel_1_769 = (s_10 == 1'b0 ? sel_4482 :
              sel_1_768);

  assign sel_1_770 = (s_11 == 1'b0 ? sel_4481 :
              sel_1_769);

  assign sel_4490 = 32'sd0;

  assign sel_1_771 = (s_12 == 1'b0 ? sel_1_770 :
              sel_4490);

  assign sel_4491 = 32'sd0;

  assign sel_4492 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_771, sel_4469, sel_4470, sel_4471, sel_4472, sel_4473,
       sel_4474, sel_4475, sel_4476, sel_4477, sel_4478, sel_4479, sel_4480,
       sel_4491, sel_4492) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8877_sel_1 = sel_4491;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8877_sel_1 = sel_1_771;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8877_sel_1 = sel_4480;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8877_sel_1 = sel_4479;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8877_sel_1 = sel_4478;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8877_sel_1 = sel_4477;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8877_sel_1 = sel_4476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8877_sel_1 = sel_4475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8877_sel_1 = sel_4474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8877_sel_1 = sel_4473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8877_sel_1 = sel_4472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8877_sel_1 = sel_4471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8877_sel_1 = sel_4470;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8877_sel_1 = sel_4469;
        end
      default :
        begin
          p8877_sel_1 = sel_4492;
        end
    endcase
    sel_1_772 = p8877_sel_1;
  end

  assign tmp_264 = functionOutput_20[sel_1_772];

  assign sel_4493 = 1'b0;

  assign sel_4494 = 1'b0;

  assign sel_4495 = 1'b0;

  assign sel_4496 = 1'b0;

  assign sel_4497 = 1'b0;

  assign sel_4498 = 1'b0;

  assign sel_4499 = 1'b0;

  assign sel_4500 = 1'b0;

  assign sel_4501 = 1'b0;

  assign sel_4502 = 1'b0;

  assign sel_4503 = 1'b0;

  assign sel_4504 = 1'b0;

  assign sel_4505 = 1'b0;

  assign sel_4506 = 1'b0;

  assign sel_4507 = 1'b0;

  assign s_320 = 1'b1;

  assign sel_2_764 = (tmp_5 == 1'b0 ? sel_4507 :
              s_320);

  assign sel_4508 = 1'b0;

  assign sel_2_765 = (tmp_7 == 1'b0 ? sel_2_764 :
              sel_4508);

  assign sel_4509 = 1'b0;

  assign sel_2_766 = (tmp_9 == 1'b0 ? sel_2_765 :
              sel_4509);

  assign sel_4510 = 1'b0;

  assign sel_2_767 = (tmp_11 == 1'b0 ? sel_2_766 :
              sel_4510);

  assign sel_4511 = 1'b0;

  assign sel_2_768 = (tmp_13 == 1'b0 ? sel_2_767 :
              sel_4511);

  assign sel_4512 = 1'b0;

  assign sel_2_769 = (tmp_15 == 1'b0 ? sel_2_768 :
              sel_4512);

  assign sel_4513 = 1'b0;

  assign sel_2_770 = (tmp_17 == 1'b0 ? sel_2_769 :
              sel_4513);

  assign sel_2_771 = (s_10 == 1'b0 ? sel_4506 :
              sel_2_770);

  assign sel_2_772 = (s_11 == 1'b0 ? sel_4505 :
              sel_2_771);

  assign sel_4514 = 1'b0;

  assign sel_2_773 = (s_12 == 1'b0 ? sel_2_772 :
              sel_4514);

  assign sel_4515 = 1'b0;

  assign sel_4516 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_773, sel_4493, sel_4494, sel_4495, sel_4496, sel_4497,
       sel_4498, sel_4499, sel_4500, sel_4501, sel_4502, sel_4503, sel_4504,
       sel_4515, sel_4516) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7427_sel_2 = sel_4515;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7427_sel_2 = sel_2_773;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7427_sel_2 = sel_4504;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7427_sel_2 = sel_4503;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7427_sel_2 = sel_4502;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7427_sel_2 = sel_4501;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7427_sel_2 = sel_4500;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7427_sel_2 = sel_4499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7427_sel_2 = sel_4498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7427_sel_2 = sel_4497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7427_sel_2 = sel_4496;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7427_sel_2 = sel_4495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7427_sel_2 = sel_4494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7427_sel_2 = sel_4493;
        end
      default :
        begin
          p7427_sel_2 = sel_4516;
        end
    endcase
    sel_2_774 = p7427_sel_2;
  end

  always @* begin
    p7426cont_bits_42_cont_bits_42[1] = cont_bits_42_15[1];
    if (sel_2_774) begin
      p7426cont_bits_42_cont_bits_42[1] = tmp_264;
    end
    cont_bits_42_16[0] = cont_bits_42_15[0];
    cont_bits_42_16[1] = p7426cont_bits_42_cont_bits_42[1];
    cont_bits_42_16[2] = cont_bits_42_15[2];
    cont_bits_42_16[3] = cont_bits_42_15[3];
    cont_bits_42_16[4] = cont_bits_42_15[4];
    cont_bits_42_16[5] = cont_bits_42_15[5];
    cont_bits_42_16[6] = cont_bits_42_15[6];
    cont_bits_42_16[7] = cont_bits_42_15[7];
    cont_bits_42_16[8] = cont_bits_42_15[8];
    cont_bits_42_16[9] = cont_bits_42_15[9];
    cont_bits_42_16[10] = cont_bits_42_15[10];
    cont_bits_42_16[11] = cont_bits_42_15[11];
  end

  assign sel_4517 = 32'sd0;

  assign sel_4518 = 32'sd0;

  assign sel_4519 = 32'sd0;

  assign sel_4520 = 32'sd0;

  assign sel_4521 = 32'sd0;

  assign sel_4522 = 32'sd0;

  assign sel_4523 = 32'sd0;

  assign sel_4524 = 32'sd0;

  assign sel_4525 = 32'sd0;

  assign sel_4526 = 32'sd0;

  assign sel_4527 = 32'sd0;

  assign sel_4528 = 32'sd0;

  assign sel_4529 = 32'sd0;

  assign sel_4530 = 32'sd0;

  assign sel_4531 = 32'sd0;

  assign s_321 = 32'sd2;

  assign sel_1_773 = (tmp_5 == 1'b0 ? sel_4531 :
              s_321);

  assign sel_4532 = 32'sd0;

  assign sel_1_774 = (tmp_7 == 1'b0 ? sel_1_773 :
              sel_4532);

  assign sel_4533 = 32'sd0;

  assign sel_1_775 = (tmp_9 == 1'b0 ? sel_1_774 :
              sel_4533);

  assign sel_4534 = 32'sd0;

  assign sel_1_776 = (tmp_11 == 1'b0 ? sel_1_775 :
              sel_4534);

  assign sel_4535 = 32'sd0;

  assign sel_1_777 = (tmp_13 == 1'b0 ? sel_1_776 :
              sel_4535);

  assign sel_4536 = 32'sd0;

  assign sel_1_778 = (tmp_15 == 1'b0 ? sel_1_777 :
              sel_4536);

  assign sel_4537 = 32'sd0;

  assign sel_1_779 = (tmp_17 == 1'b0 ? sel_1_778 :
              sel_4537);

  assign sel_1_780 = (s_10 == 1'b0 ? sel_4530 :
              sel_1_779);

  assign sel_1_781 = (s_11 == 1'b0 ? sel_4529 :
              sel_1_780);

  assign sel_4538 = 32'sd0;

  assign sel_1_782 = (s_12 == 1'b0 ? sel_1_781 :
              sel_4538);

  assign sel_4539 = 32'sd0;

  assign sel_4540 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_782, sel_4517, sel_4518, sel_4519, sel_4520, sel_4521,
       sel_4522, sel_4523, sel_4524, sel_4525, sel_4526, sel_4527, sel_4528,
       sel_4539, sel_4540) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9812_sel_1 = sel_4539;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9812_sel_1 = sel_1_782;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9812_sel_1 = sel_4528;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9812_sel_1 = sel_4527;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9812_sel_1 = sel_4526;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9812_sel_1 = sel_4525;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9812_sel_1 = sel_4524;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9812_sel_1 = sel_4523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9812_sel_1 = sel_4522;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9812_sel_1 = sel_4521;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9812_sel_1 = sel_4520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9812_sel_1 = sel_4519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9812_sel_1 = sel_4518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9812_sel_1 = sel_4517;
        end
      default :
        begin
          p9812_sel_1 = sel_4540;
        end
    endcase
    sel_1_783 = p9812_sel_1;
  end

  assign tmp_265 = functionOutput_20[sel_1_783];

  assign sel_4541 = 1'b0;

  assign sel_4542 = 1'b0;

  assign sel_4543 = 1'b0;

  assign sel_4544 = 1'b0;

  assign sel_4545 = 1'b0;

  assign sel_4546 = 1'b0;

  assign sel_4547 = 1'b0;

  assign sel_4548 = 1'b0;

  assign sel_4549 = 1'b0;

  assign sel_4550 = 1'b0;

  assign sel_4551 = 1'b0;

  assign sel_4552 = 1'b0;

  assign sel_4553 = 1'b0;

  assign sel_4554 = 1'b0;

  assign sel_4555 = 1'b0;

  assign s_322 = 1'b1;

  assign sel_2_775 = (tmp_5 == 1'b0 ? sel_4555 :
              s_322);

  assign sel_4556 = 1'b0;

  assign sel_2_776 = (tmp_7 == 1'b0 ? sel_2_775 :
              sel_4556);

  assign sel_4557 = 1'b0;

  assign sel_2_777 = (tmp_9 == 1'b0 ? sel_2_776 :
              sel_4557);

  assign sel_4558 = 1'b0;

  assign sel_2_778 = (tmp_11 == 1'b0 ? sel_2_777 :
              sel_4558);

  assign sel_4559 = 1'b0;

  assign sel_2_779 = (tmp_13 == 1'b0 ? sel_2_778 :
              sel_4559);

  assign sel_4560 = 1'b0;

  assign sel_2_780 = (tmp_15 == 1'b0 ? sel_2_779 :
              sel_4560);

  assign sel_4561 = 1'b0;

  assign sel_2_781 = (tmp_17 == 1'b0 ? sel_2_780 :
              sel_4561);

  assign sel_2_782 = (s_10 == 1'b0 ? sel_4554 :
              sel_2_781);

  assign sel_2_783 = (s_11 == 1'b0 ? sel_4553 :
              sel_2_782);

  assign sel_4562 = 1'b0;

  assign sel_2_784 = (s_12 == 1'b0 ? sel_2_783 :
              sel_4562);

  assign sel_4563 = 1'b0;

  assign sel_4564 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_784, sel_4541, sel_4542, sel_4543, sel_4544, sel_4545,
       sel_4546, sel_4547, sel_4548, sel_4549, sel_4550, sel_4551, sel_4552,
       sel_4563, sel_4564) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7114_sel_2 = sel_4563;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7114_sel_2 = sel_2_784;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7114_sel_2 = sel_4552;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7114_sel_2 = sel_4551;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7114_sel_2 = sel_4550;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7114_sel_2 = sel_4549;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7114_sel_2 = sel_4548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7114_sel_2 = sel_4547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7114_sel_2 = sel_4546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7114_sel_2 = sel_4545;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7114_sel_2 = sel_4544;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7114_sel_2 = sel_4543;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7114_sel_2 = sel_4542;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7114_sel_2 = sel_4541;
        end
      default :
        begin
          p7114_sel_2 = sel_4564;
        end
    endcase
    sel_2_785 = p7114_sel_2;
  end

  always @* begin
    p7113cont_bits_42_cont_bits_42[2] = cont_bits_42_16[2];
    if (sel_2_785) begin
      p7113cont_bits_42_cont_bits_42[2] = tmp_265;
    end
    cont_bits_42_17[0] = cont_bits_42_16[0];
    cont_bits_42_17[1] = cont_bits_42_16[1];
    cont_bits_42_17[2] = p7113cont_bits_42_cont_bits_42[2];
    cont_bits_42_17[3] = cont_bits_42_16[3];
    cont_bits_42_17[4] = cont_bits_42_16[4];
    cont_bits_42_17[5] = cont_bits_42_16[5];
    cont_bits_42_17[6] = cont_bits_42_16[6];
    cont_bits_42_17[7] = cont_bits_42_16[7];
    cont_bits_42_17[8] = cont_bits_42_16[8];
    cont_bits_42_17[9] = cont_bits_42_16[9];
    cont_bits_42_17[10] = cont_bits_42_16[10];
    cont_bits_42_17[11] = cont_bits_42_16[11];
  end

  assign sel_4565 = 32'sd0;

  assign sel_4566 = 32'sd0;

  assign sel_4567 = 32'sd0;

  assign sel_4568 = 32'sd0;

  assign sel_4569 = 32'sd0;

  assign sel_4570 = 32'sd0;

  assign sel_4571 = 32'sd0;

  assign sel_4572 = 32'sd0;

  assign sel_4573 = 32'sd0;

  assign sel_4574 = 32'sd0;

  assign sel_4575 = 32'sd0;

  assign sel_4576 = 32'sd0;

  assign sel_4577 = 32'sd0;

  assign sel_4578 = 32'sd0;

  assign sel_4579 = 32'sd0;

  assign s_323 = 32'sd3;

  assign sel_1_784 = (tmp_5 == 1'b0 ? sel_4579 :
              s_323);

  assign sel_4580 = 32'sd0;

  assign sel_1_785 = (tmp_7 == 1'b0 ? sel_1_784 :
              sel_4580);

  assign sel_4581 = 32'sd0;

  assign sel_1_786 = (tmp_9 == 1'b0 ? sel_1_785 :
              sel_4581);

  assign sel_4582 = 32'sd0;

  assign sel_1_787 = (tmp_11 == 1'b0 ? sel_1_786 :
              sel_4582);

  assign sel_4583 = 32'sd0;

  assign sel_1_788 = (tmp_13 == 1'b0 ? sel_1_787 :
              sel_4583);

  assign sel_4584 = 32'sd0;

  assign sel_1_789 = (tmp_15 == 1'b0 ? sel_1_788 :
              sel_4584);

  assign sel_4585 = 32'sd0;

  assign sel_1_790 = (tmp_17 == 1'b0 ? sel_1_789 :
              sel_4585);

  assign sel_1_791 = (s_10 == 1'b0 ? sel_4578 :
              sel_1_790);

  assign sel_1_792 = (s_11 == 1'b0 ? sel_4577 :
              sel_1_791);

  assign sel_4586 = 32'sd0;

  assign sel_1_793 = (s_12 == 1'b0 ? sel_1_792 :
              sel_4586);

  assign sel_4587 = 32'sd0;

  assign sel_4588 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_793, sel_4565, sel_4566, sel_4567, sel_4568, sel_4569,
       sel_4570, sel_4571, sel_4572, sel_4573, sel_4574, sel_4575, sel_4576,
       sel_4587, sel_4588) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8809_sel_1 = sel_4587;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8809_sel_1 = sel_1_793;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8809_sel_1 = sel_4576;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8809_sel_1 = sel_4575;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8809_sel_1 = sel_4574;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8809_sel_1 = sel_4573;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8809_sel_1 = sel_4572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8809_sel_1 = sel_4571;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8809_sel_1 = sel_4570;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8809_sel_1 = sel_4569;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8809_sel_1 = sel_4568;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8809_sel_1 = sel_4567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8809_sel_1 = sel_4566;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8809_sel_1 = sel_4565;
        end
      default :
        begin
          p8809_sel_1 = sel_4588;
        end
    endcase
    sel_1_794 = p8809_sel_1;
  end

  assign tmp_266 = functionOutput_20[sel_1_794];

  assign sel_4589 = 1'b0;

  assign sel_4590 = 1'b0;

  assign sel_4591 = 1'b0;

  assign sel_4592 = 1'b0;

  assign sel_4593 = 1'b0;

  assign sel_4594 = 1'b0;

  assign sel_4595 = 1'b0;

  assign sel_4596 = 1'b0;

  assign sel_4597 = 1'b0;

  assign sel_4598 = 1'b0;

  assign sel_4599 = 1'b0;

  assign sel_4600 = 1'b0;

  assign sel_4601 = 1'b0;

  assign sel_4602 = 1'b0;

  assign sel_4603 = 1'b0;

  assign s_324 = 1'b1;

  assign sel_2_786 = (tmp_5 == 1'b0 ? sel_4603 :
              s_324);

  assign sel_4604 = 1'b0;

  assign sel_2_787 = (tmp_7 == 1'b0 ? sel_2_786 :
              sel_4604);

  assign sel_4605 = 1'b0;

  assign sel_2_788 = (tmp_9 == 1'b0 ? sel_2_787 :
              sel_4605);

  assign sel_4606 = 1'b0;

  assign sel_2_789 = (tmp_11 == 1'b0 ? sel_2_788 :
              sel_4606);

  assign sel_4607 = 1'b0;

  assign sel_2_790 = (tmp_13 == 1'b0 ? sel_2_789 :
              sel_4607);

  assign sel_4608 = 1'b0;

  assign sel_2_791 = (tmp_15 == 1'b0 ? sel_2_790 :
              sel_4608);

  assign sel_4609 = 1'b0;

  assign sel_2_792 = (tmp_17 == 1'b0 ? sel_2_791 :
              sel_4609);

  assign sel_2_793 = (s_10 == 1'b0 ? sel_4602 :
              sel_2_792);

  assign sel_2_794 = (s_11 == 1'b0 ? sel_4601 :
              sel_2_793);

  assign sel_4610 = 1'b0;

  assign sel_2_795 = (s_12 == 1'b0 ? sel_2_794 :
              sel_4610);

  assign sel_4611 = 1'b0;

  assign sel_4612 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_795, sel_4589, sel_4590, sel_4591, sel_4592, sel_4593,
       sel_4594, sel_4595, sel_4596, sel_4597, sel_4598, sel_4599, sel_4600,
       sel_4611, sel_4612) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6789_sel_2 = sel_4611;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6789_sel_2 = sel_2_795;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6789_sel_2 = sel_4600;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6789_sel_2 = sel_4599;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6789_sel_2 = sel_4598;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6789_sel_2 = sel_4597;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6789_sel_2 = sel_4596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6789_sel_2 = sel_4595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6789_sel_2 = sel_4594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6789_sel_2 = sel_4593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6789_sel_2 = sel_4592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6789_sel_2 = sel_4591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6789_sel_2 = sel_4590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6789_sel_2 = sel_4589;
        end
      default :
        begin
          p6789_sel_2 = sel_4612;
        end
    endcase
    sel_2_796 = p6789_sel_2;
  end

  always @* begin
    p6788cont_bits_42_cont_bits_42[3] = cont_bits_42_17[3];
    if (sel_2_796) begin
      p6788cont_bits_42_cont_bits_42[3] = tmp_266;
    end
    cont_bits_42_18[0] = cont_bits_42_17[0];
    cont_bits_42_18[1] = cont_bits_42_17[1];
    cont_bits_42_18[2] = cont_bits_42_17[2];
    cont_bits_42_18[3] = p6788cont_bits_42_cont_bits_42[3];
    cont_bits_42_18[4] = cont_bits_42_17[4];
    cont_bits_42_18[5] = cont_bits_42_17[5];
    cont_bits_42_18[6] = cont_bits_42_17[6];
    cont_bits_42_18[7] = cont_bits_42_17[7];
    cont_bits_42_18[8] = cont_bits_42_17[8];
    cont_bits_42_18[9] = cont_bits_42_17[9];
    cont_bits_42_18[10] = cont_bits_42_17[10];
    cont_bits_42_18[11] = cont_bits_42_17[11];
  end

  assign sel_4613 = 32'sd0;

  assign sel_4614 = 32'sd0;

  assign sel_4615 = 32'sd0;

  assign sel_4616 = 32'sd0;

  assign sel_4617 = 32'sd0;

  assign sel_4618 = 32'sd0;

  assign sel_4619 = 32'sd0;

  assign sel_4620 = 32'sd0;

  assign sel_4621 = 32'sd0;

  assign sel_4622 = 32'sd0;

  assign sel_4623 = 32'sd0;

  assign sel_4624 = 32'sd0;

  assign sel_4625 = 32'sd0;

  assign sel_4626 = 32'sd0;

  assign sel_4627 = 32'sd0;

  assign s_325 = 32'sd4;

  assign sel_1_795 = (tmp_5 == 1'b0 ? sel_4627 :
              s_325);

  assign sel_4628 = 32'sd0;

  assign sel_1_796 = (tmp_7 == 1'b0 ? sel_1_795 :
              sel_4628);

  assign sel_4629 = 32'sd0;

  assign sel_1_797 = (tmp_9 == 1'b0 ? sel_1_796 :
              sel_4629);

  assign sel_4630 = 32'sd0;

  assign sel_1_798 = (tmp_11 == 1'b0 ? sel_1_797 :
              sel_4630);

  assign sel_4631 = 32'sd0;

  assign sel_1_799 = (tmp_13 == 1'b0 ? sel_1_798 :
              sel_4631);

  assign sel_4632 = 32'sd0;

  assign sel_1_800 = (tmp_15 == 1'b0 ? sel_1_799 :
              sel_4632);

  assign sel_4633 = 32'sd0;

  assign sel_1_801 = (tmp_17 == 1'b0 ? sel_1_800 :
              sel_4633);

  assign sel_1_802 = (s_10 == 1'b0 ? sel_4626 :
              sel_1_801);

  assign sel_1_803 = (s_11 == 1'b0 ? sel_4625 :
              sel_1_802);

  assign sel_4634 = 32'sd0;

  assign sel_1_804 = (s_12 == 1'b0 ? sel_1_803 :
              sel_4634);

  assign sel_4635 = 32'sd0;

  assign sel_4636 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_804, sel_4613, sel_4614, sel_4615, sel_4616, sel_4617,
       sel_4618, sel_4619, sel_4620, sel_4621, sel_4622, sel_4623, sel_4624,
       sel_4635, sel_4636) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8792_sel_1 = sel_4635;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8792_sel_1 = sel_1_804;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8792_sel_1 = sel_4624;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8792_sel_1 = sel_4623;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8792_sel_1 = sel_4622;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8792_sel_1 = sel_4621;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8792_sel_1 = sel_4620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8792_sel_1 = sel_4619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8792_sel_1 = sel_4618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8792_sel_1 = sel_4617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8792_sel_1 = sel_4616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8792_sel_1 = sel_4615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8792_sel_1 = sel_4614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8792_sel_1 = sel_4613;
        end
      default :
        begin
          p8792_sel_1 = sel_4636;
        end
    endcase
    sel_1_805 = p8792_sel_1;
  end

  assign tmp_267 = functionOutput_20[sel_1_805];

  assign sel_4637 = 1'b0;

  assign sel_4638 = 1'b0;

  assign sel_4639 = 1'b0;

  assign sel_4640 = 1'b0;

  assign sel_4641 = 1'b0;

  assign sel_4642 = 1'b0;

  assign sel_4643 = 1'b0;

  assign sel_4644 = 1'b0;

  assign sel_4645 = 1'b0;

  assign sel_4646 = 1'b0;

  assign sel_4647 = 1'b0;

  assign sel_4648 = 1'b0;

  assign sel_4649 = 1'b0;

  assign sel_4650 = 1'b0;

  assign sel_4651 = 1'b0;

  assign s_326 = 1'b1;

  assign sel_2_797 = (tmp_5 == 1'b0 ? sel_4651 :
              s_326);

  assign sel_4652 = 1'b0;

  assign sel_2_798 = (tmp_7 == 1'b0 ? sel_2_797 :
              sel_4652);

  assign sel_4653 = 1'b0;

  assign sel_2_799 = (tmp_9 == 1'b0 ? sel_2_798 :
              sel_4653);

  assign sel_4654 = 1'b0;

  assign sel_2_800 = (tmp_11 == 1'b0 ? sel_2_799 :
              sel_4654);

  assign sel_4655 = 1'b0;

  assign sel_2_801 = (tmp_13 == 1'b0 ? sel_2_800 :
              sel_4655);

  assign sel_4656 = 1'b0;

  assign sel_2_802 = (tmp_15 == 1'b0 ? sel_2_801 :
              sel_4656);

  assign sel_4657 = 1'b0;

  assign sel_2_803 = (tmp_17 == 1'b0 ? sel_2_802 :
              sel_4657);

  assign sel_2_804 = (s_10 == 1'b0 ? sel_4650 :
              sel_2_803);

  assign sel_2_805 = (s_11 == 1'b0 ? sel_4649 :
              sel_2_804);

  assign sel_4658 = 1'b0;

  assign sel_2_806 = (s_12 == 1'b0 ? sel_2_805 :
              sel_4658);

  assign sel_4659 = 1'b0;

  assign sel_4660 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_806, sel_4637, sel_4638, sel_4639, sel_4640, sel_4641,
       sel_4642, sel_4643, sel_4644, sel_4645, sel_4646, sel_4647, sel_4648,
       sel_4659, sel_4660) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6507_sel_2 = sel_4659;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6507_sel_2 = sel_2_806;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6507_sel_2 = sel_4648;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6507_sel_2 = sel_4647;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6507_sel_2 = sel_4646;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6507_sel_2 = sel_4645;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6507_sel_2 = sel_4644;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6507_sel_2 = sel_4643;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6507_sel_2 = sel_4642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6507_sel_2 = sel_4641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6507_sel_2 = sel_4640;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6507_sel_2 = sel_4639;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6507_sel_2 = sel_4638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6507_sel_2 = sel_4637;
        end
      default :
        begin
          p6507_sel_2 = sel_4660;
        end
    endcase
    sel_2_807 = p6507_sel_2;
  end

  always @* begin
    p6506cont_bits_42_cont_bits_42[4] = cont_bits_42_18[4];
    if (sel_2_807) begin
      p6506cont_bits_42_cont_bits_42[4] = tmp_267;
    end
    cont_bits_42_19[0] = cont_bits_42_18[0];
    cont_bits_42_19[1] = cont_bits_42_18[1];
    cont_bits_42_19[2] = cont_bits_42_18[2];
    cont_bits_42_19[3] = cont_bits_42_18[3];
    cont_bits_42_19[4] = p6506cont_bits_42_cont_bits_42[4];
    cont_bits_42_19[5] = cont_bits_42_18[5];
    cont_bits_42_19[6] = cont_bits_42_18[6];
    cont_bits_42_19[7] = cont_bits_42_18[7];
    cont_bits_42_19[8] = cont_bits_42_18[8];
    cont_bits_42_19[9] = cont_bits_42_18[9];
    cont_bits_42_19[10] = cont_bits_42_18[10];
    cont_bits_42_19[11] = cont_bits_42_18[11];
  end

  assign sel_4661 = 32'sd0;

  assign sel_4662 = 32'sd0;

  assign sel_4663 = 32'sd0;

  assign sel_4664 = 32'sd0;

  assign sel_4665 = 32'sd0;

  assign sel_4666 = 32'sd0;

  assign sel_4667 = 32'sd0;

  assign sel_4668 = 32'sd0;

  assign sel_4669 = 32'sd0;

  assign sel_4670 = 32'sd0;

  assign sel_4671 = 32'sd0;

  assign sel_4672 = 32'sd0;

  assign sel_4673 = 32'sd0;

  assign sel_4674 = 32'sd0;

  assign sel_4675 = 32'sd0;

  assign s_327 = 32'sd5;

  assign sel_1_806 = (tmp_5 == 1'b0 ? sel_4675 :
              s_327);

  assign sel_4676 = 32'sd0;

  assign sel_1_807 = (tmp_7 == 1'b0 ? sel_1_806 :
              sel_4676);

  assign sel_4677 = 32'sd0;

  assign sel_1_808 = (tmp_9 == 1'b0 ? sel_1_807 :
              sel_4677);

  assign sel_4678 = 32'sd0;

  assign sel_1_809 = (tmp_11 == 1'b0 ? sel_1_808 :
              sel_4678);

  assign sel_4679 = 32'sd0;

  assign sel_1_810 = (tmp_13 == 1'b0 ? sel_1_809 :
              sel_4679);

  assign sel_4680 = 32'sd0;

  assign sel_1_811 = (tmp_15 == 1'b0 ? sel_1_810 :
              sel_4680);

  assign sel_4681 = 32'sd0;

  assign sel_1_812 = (tmp_17 == 1'b0 ? sel_1_811 :
              sel_4681);

  assign sel_1_813 = (s_10 == 1'b0 ? sel_4674 :
              sel_1_812);

  assign sel_1_814 = (s_11 == 1'b0 ? sel_4673 :
              sel_1_813);

  assign sel_4682 = 32'sd0;

  assign sel_1_815 = (s_12 == 1'b0 ? sel_1_814 :
              sel_4682);

  assign sel_4683 = 32'sd0;

  assign sel_4684 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_815, sel_4661, sel_4662, sel_4663, sel_4664, sel_4665,
       sel_4666, sel_4667, sel_4668, sel_4669, sel_4670, sel_4671, sel_4672,
       sel_4683, sel_4684) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8401_sel_1 = sel_4683;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8401_sel_1 = sel_1_815;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8401_sel_1 = sel_4672;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8401_sel_1 = sel_4671;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8401_sel_1 = sel_4670;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8401_sel_1 = sel_4669;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8401_sel_1 = sel_4668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8401_sel_1 = sel_4667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8401_sel_1 = sel_4666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8401_sel_1 = sel_4665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8401_sel_1 = sel_4664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8401_sel_1 = sel_4663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8401_sel_1 = sel_4662;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8401_sel_1 = sel_4661;
        end
      default :
        begin
          p8401_sel_1 = sel_4684;
        end
    endcase
    sel_1_816 = p8401_sel_1;
  end

  assign tmp_268 = functionOutput_20[sel_1_816];

  assign sel_4685 = 1'b0;

  assign sel_4686 = 1'b0;

  assign sel_4687 = 1'b0;

  assign sel_4688 = 1'b0;

  assign sel_4689 = 1'b0;

  assign sel_4690 = 1'b0;

  assign sel_4691 = 1'b0;

  assign sel_4692 = 1'b0;

  assign sel_4693 = 1'b0;

  assign sel_4694 = 1'b0;

  assign sel_4695 = 1'b0;

  assign sel_4696 = 1'b0;

  assign sel_4697 = 1'b0;

  assign sel_4698 = 1'b0;

  assign sel_4699 = 1'b0;

  assign s_328 = 1'b1;

  assign sel_2_808 = (tmp_5 == 1'b0 ? sel_4699 :
              s_328);

  assign sel_4700 = 1'b0;

  assign sel_2_809 = (tmp_7 == 1'b0 ? sel_2_808 :
              sel_4700);

  assign sel_4701 = 1'b0;

  assign sel_2_810 = (tmp_9 == 1'b0 ? sel_2_809 :
              sel_4701);

  assign sel_4702 = 1'b0;

  assign sel_2_811 = (tmp_11 == 1'b0 ? sel_2_810 :
              sel_4702);

  assign sel_4703 = 1'b0;

  assign sel_2_812 = (tmp_13 == 1'b0 ? sel_2_811 :
              sel_4703);

  assign sel_4704 = 1'b0;

  assign sel_2_813 = (tmp_15 == 1'b0 ? sel_2_812 :
              sel_4704);

  assign sel_4705 = 1'b0;

  assign sel_2_814 = (tmp_17 == 1'b0 ? sel_2_813 :
              sel_4705);

  assign sel_2_815 = (s_10 == 1'b0 ? sel_4698 :
              sel_2_814);

  assign sel_2_816 = (s_11 == 1'b0 ? sel_4697 :
              sel_2_815);

  assign sel_4706 = 1'b0;

  assign sel_2_817 = (s_12 == 1'b0 ? sel_2_816 :
              sel_4706);

  assign sel_4707 = 1'b0;

  assign sel_4708 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_817, sel_4685, sel_4686, sel_4687, sel_4688, sel_4689,
       sel_4690, sel_4691, sel_4692, sel_4693, sel_4694, sel_4695, sel_4696,
       sel_4707, sel_4708) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6183_sel_2 = sel_4707;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6183_sel_2 = sel_2_817;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6183_sel_2 = sel_4696;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6183_sel_2 = sel_4695;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6183_sel_2 = sel_4694;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6183_sel_2 = sel_4693;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6183_sel_2 = sel_4692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6183_sel_2 = sel_4691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6183_sel_2 = sel_4690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6183_sel_2 = sel_4689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6183_sel_2 = sel_4688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6183_sel_2 = sel_4687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6183_sel_2 = sel_4686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6183_sel_2 = sel_4685;
        end
      default :
        begin
          p6183_sel_2 = sel_4708;
        end
    endcase
    sel_2_818 = p6183_sel_2;
  end

  always @* begin
    p6182cont_bits_42_cont_bits_42[5] = cont_bits_42_19[5];
    if (sel_2_818) begin
      p6182cont_bits_42_cont_bits_42[5] = tmp_268;
    end
    cont_bits_42_20[0] = cont_bits_42_19[0];
    cont_bits_42_20[1] = cont_bits_42_19[1];
    cont_bits_42_20[2] = cont_bits_42_19[2];
    cont_bits_42_20[3] = cont_bits_42_19[3];
    cont_bits_42_20[4] = cont_bits_42_19[4];
    cont_bits_42_20[5] = p6182cont_bits_42_cont_bits_42[5];
    cont_bits_42_20[6] = cont_bits_42_19[6];
    cont_bits_42_20[7] = cont_bits_42_19[7];
    cont_bits_42_20[8] = cont_bits_42_19[8];
    cont_bits_42_20[9] = cont_bits_42_19[9];
    cont_bits_42_20[10] = cont_bits_42_19[10];
    cont_bits_42_20[11] = cont_bits_42_19[11];
  end

  assign sel_4709 = 32'sd0;

  assign sel_4710 = 32'sd0;

  assign sel_4711 = 32'sd0;

  assign sel_4712 = 32'sd0;

  assign sel_4713 = 32'sd0;

  assign sel_4714 = 32'sd0;

  assign sel_4715 = 32'sd0;

  assign sel_4716 = 32'sd0;

  assign sel_4717 = 32'sd0;

  assign sel_4718 = 32'sd0;

  assign sel_4719 = 32'sd0;

  assign sel_4720 = 32'sd0;

  assign sel_4721 = 32'sd0;

  assign sel_4722 = 32'sd0;

  assign sel_4723 = 32'sd0;

  assign s_329 = 32'sd6;

  assign sel_1_817 = (tmp_5 == 1'b0 ? sel_4723 :
              s_329);

  assign sel_4724 = 32'sd0;

  assign sel_1_818 = (tmp_7 == 1'b0 ? sel_1_817 :
              sel_4724);

  assign sel_4725 = 32'sd0;

  assign sel_1_819 = (tmp_9 == 1'b0 ? sel_1_818 :
              sel_4725);

  assign sel_4726 = 32'sd0;

  assign sel_1_820 = (tmp_11 == 1'b0 ? sel_1_819 :
              sel_4726);

  assign sel_4727 = 32'sd0;

  assign sel_1_821 = (tmp_13 == 1'b0 ? sel_1_820 :
              sel_4727);

  assign sel_4728 = 32'sd0;

  assign sel_1_822 = (tmp_15 == 1'b0 ? sel_1_821 :
              sel_4728);

  assign sel_4729 = 32'sd0;

  assign sel_1_823 = (tmp_17 == 1'b0 ? sel_1_822 :
              sel_4729);

  assign sel_1_824 = (s_10 == 1'b0 ? sel_4722 :
              sel_1_823);

  assign sel_1_825 = (s_11 == 1'b0 ? sel_4721 :
              sel_1_824);

  assign sel_4730 = 32'sd0;

  assign sel_1_826 = (s_12 == 1'b0 ? sel_1_825 :
              sel_4730);

  assign sel_4731 = 32'sd0;

  assign sel_4732 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_826, sel_4709, sel_4710, sel_4711, sel_4712, sel_4713,
       sel_4714, sel_4715, sel_4716, sel_4717, sel_4718, sel_4719, sel_4720,
       sel_4731, sel_4732) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9030_sel_1 = sel_4731;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9030_sel_1 = sel_1_826;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9030_sel_1 = sel_4720;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9030_sel_1 = sel_4719;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9030_sel_1 = sel_4718;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9030_sel_1 = sel_4717;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9030_sel_1 = sel_4716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9030_sel_1 = sel_4715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9030_sel_1 = sel_4714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9030_sel_1 = sel_4713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9030_sel_1 = sel_4712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9030_sel_1 = sel_4711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9030_sel_1 = sel_4710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9030_sel_1 = sel_4709;
        end
      default :
        begin
          p9030_sel_1 = sel_4732;
        end
    endcase
    sel_1_827 = p9030_sel_1;
  end

  assign tmp_269 = functionOutput_20[sel_1_827];

  assign sel_4733 = 1'b0;

  assign sel_4734 = 1'b0;

  assign sel_4735 = 1'b0;

  assign sel_4736 = 1'b0;

  assign sel_4737 = 1'b0;

  assign sel_4738 = 1'b0;

  assign sel_4739 = 1'b0;

  assign sel_4740 = 1'b0;

  assign sel_4741 = 1'b0;

  assign sel_4742 = 1'b0;

  assign sel_4743 = 1'b0;

  assign sel_4744 = 1'b0;

  assign sel_4745 = 1'b0;

  assign sel_4746 = 1'b0;

  assign sel_4747 = 1'b0;

  assign s_330 = 1'b1;

  assign sel_2_819 = (tmp_5 == 1'b0 ? sel_4747 :
              s_330);

  assign sel_4748 = 1'b0;

  assign sel_2_820 = (tmp_7 == 1'b0 ? sel_2_819 :
              sel_4748);

  assign sel_4749 = 1'b0;

  assign sel_2_821 = (tmp_9 == 1'b0 ? sel_2_820 :
              sel_4749);

  assign sel_4750 = 1'b0;

  assign sel_2_822 = (tmp_11 == 1'b0 ? sel_2_821 :
              sel_4750);

  assign sel_4751 = 1'b0;

  assign sel_2_823 = (tmp_13 == 1'b0 ? sel_2_822 :
              sel_4751);

  assign sel_4752 = 1'b0;

  assign sel_2_824 = (tmp_15 == 1'b0 ? sel_2_823 :
              sel_4752);

  assign sel_4753 = 1'b0;

  assign sel_2_825 = (tmp_17 == 1'b0 ? sel_2_824 :
              sel_4753);

  assign sel_2_826 = (s_10 == 1'b0 ? sel_4746 :
              sel_2_825);

  assign sel_2_827 = (s_11 == 1'b0 ? sel_4745 :
              sel_2_826);

  assign sel_4754 = 1'b0;

  assign sel_2_828 = (s_12 == 1'b0 ? sel_2_827 :
              sel_4754);

  assign sel_4755 = 1'b0;

  assign sel_4756 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_828, sel_4733, sel_4734, sel_4735, sel_4736, sel_4737,
       sel_4738, sel_4739, sel_4740, sel_4741, sel_4742, sel_4743, sel_4744,
       sel_4755, sel_4756) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5901_sel_2 = sel_4755;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5901_sel_2 = sel_2_828;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5901_sel_2 = sel_4744;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5901_sel_2 = sel_4743;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5901_sel_2 = sel_4742;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5901_sel_2 = sel_4741;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5901_sel_2 = sel_4740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5901_sel_2 = sel_4739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5901_sel_2 = sel_4738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5901_sel_2 = sel_4737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5901_sel_2 = sel_4736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5901_sel_2 = sel_4735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5901_sel_2 = sel_4734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5901_sel_2 = sel_4733;
        end
      default :
        begin
          p5901_sel_2 = sel_4756;
        end
    endcase
    sel_2_829 = p5901_sel_2;
  end

  always @* begin
    p5900cont_bits_42_cont_bits_42[6] = cont_bits_42_20[6];
    if (sel_2_829) begin
      p5900cont_bits_42_cont_bits_42[6] = tmp_269;
    end
    cont_bits_42_21[0] = cont_bits_42_20[0];
    cont_bits_42_21[1] = cont_bits_42_20[1];
    cont_bits_42_21[2] = cont_bits_42_20[2];
    cont_bits_42_21[3] = cont_bits_42_20[3];
    cont_bits_42_21[4] = cont_bits_42_20[4];
    cont_bits_42_21[5] = cont_bits_42_20[5];
    cont_bits_42_21[6] = p5900cont_bits_42_cont_bits_42[6];
    cont_bits_42_21[7] = cont_bits_42_20[7];
    cont_bits_42_21[8] = cont_bits_42_20[8];
    cont_bits_42_21[9] = cont_bits_42_20[9];
    cont_bits_42_21[10] = cont_bits_42_20[10];
    cont_bits_42_21[11] = cont_bits_42_20[11];
  end

  assign sel_4757 = 32'sd0;

  assign sel_4758 = 32'sd0;

  assign sel_4759 = 32'sd0;

  assign sel_4760 = 32'sd0;

  assign sel_4761 = 32'sd0;

  assign sel_4762 = 32'sd0;

  assign sel_4763 = 32'sd0;

  assign sel_4764 = 32'sd0;

  assign sel_4765 = 32'sd0;

  assign sel_4766 = 32'sd0;

  assign sel_4767 = 32'sd0;

  assign sel_4768 = 32'sd0;

  assign sel_4769 = 32'sd0;

  assign sel_4770 = 32'sd0;

  assign sel_4771 = 32'sd0;

  assign s_331 = 32'sd7;

  assign sel_1_828 = (tmp_5 == 1'b0 ? sel_4771 :
              s_331);

  assign sel_4772 = 32'sd0;

  assign sel_1_829 = (tmp_7 == 1'b0 ? sel_1_828 :
              sel_4772);

  assign sel_4773 = 32'sd0;

  assign sel_1_830 = (tmp_9 == 1'b0 ? sel_1_829 :
              sel_4773);

  assign sel_4774 = 32'sd0;

  assign sel_1_831 = (tmp_11 == 1'b0 ? sel_1_830 :
              sel_4774);

  assign sel_4775 = 32'sd0;

  assign sel_1_832 = (tmp_13 == 1'b0 ? sel_1_831 :
              sel_4775);

  assign sel_4776 = 32'sd0;

  assign sel_1_833 = (tmp_15 == 1'b0 ? sel_1_832 :
              sel_4776);

  assign sel_4777 = 32'sd0;

  assign sel_1_834 = (tmp_17 == 1'b0 ? sel_1_833 :
              sel_4777);

  assign sel_1_835 = (s_10 == 1'b0 ? sel_4770 :
              sel_1_834);

  assign sel_1_836 = (s_11 == 1'b0 ? sel_4769 :
              sel_1_835);

  assign sel_4778 = 32'sd0;

  assign sel_1_837 = (s_12 == 1'b0 ? sel_1_836 :
              sel_4778);

  assign sel_4779 = 32'sd0;

  assign sel_4780 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_837, sel_4757, sel_4758, sel_4759, sel_4760, sel_4761,
       sel_4762, sel_4763, sel_4764, sel_4765, sel_4766, sel_4767, sel_4768,
       sel_4779, sel_4780) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8435_sel_1 = sel_4779;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8435_sel_1 = sel_1_837;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8435_sel_1 = sel_4768;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8435_sel_1 = sel_4767;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8435_sel_1 = sel_4766;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8435_sel_1 = sel_4765;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8435_sel_1 = sel_4764;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8435_sel_1 = sel_4763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8435_sel_1 = sel_4762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8435_sel_1 = sel_4761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8435_sel_1 = sel_4760;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8435_sel_1 = sel_4759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8435_sel_1 = sel_4758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8435_sel_1 = sel_4757;
        end
      default :
        begin
          p8435_sel_1 = sel_4780;
        end
    endcase
    sel_1_838 = p8435_sel_1;
  end

  assign tmp_270 = functionOutput_20[sel_1_838];

  assign sel_4781 = 1'b0;

  assign sel_4782 = 1'b0;

  assign sel_4783 = 1'b0;

  assign sel_4784 = 1'b0;

  assign sel_4785 = 1'b0;

  assign sel_4786 = 1'b0;

  assign sel_4787 = 1'b0;

  assign sel_4788 = 1'b0;

  assign sel_4789 = 1'b0;

  assign sel_4790 = 1'b0;

  assign sel_4791 = 1'b0;

  assign sel_4792 = 1'b0;

  assign sel_4793 = 1'b0;

  assign sel_4794 = 1'b0;

  assign sel_4795 = 1'b0;

  assign s_332 = 1'b1;

  assign sel_2_830 = (tmp_5 == 1'b0 ? sel_4795 :
              s_332);

  assign sel_4796 = 1'b0;

  assign sel_2_831 = (tmp_7 == 1'b0 ? sel_2_830 :
              sel_4796);

  assign sel_4797 = 1'b0;

  assign sel_2_832 = (tmp_9 == 1'b0 ? sel_2_831 :
              sel_4797);

  assign sel_4798 = 1'b0;

  assign sel_2_833 = (tmp_11 == 1'b0 ? sel_2_832 :
              sel_4798);

  assign sel_4799 = 1'b0;

  assign sel_2_834 = (tmp_13 == 1'b0 ? sel_2_833 :
              sel_4799);

  assign sel_4800 = 1'b0;

  assign sel_2_835 = (tmp_15 == 1'b0 ? sel_2_834 :
              sel_4800);

  assign sel_4801 = 1'b0;

  assign sel_2_836 = (tmp_17 == 1'b0 ? sel_2_835 :
              sel_4801);

  assign sel_2_837 = (s_10 == 1'b0 ? sel_4794 :
              sel_2_836);

  assign sel_2_838 = (s_11 == 1'b0 ? sel_4793 :
              sel_2_837);

  assign sel_4802 = 1'b0;

  assign sel_2_839 = (s_12 == 1'b0 ? sel_2_838 :
              sel_4802);

  assign sel_4803 = 1'b0;

  assign sel_4804 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_839, sel_4781, sel_4782, sel_4783, sel_4784, sel_4785,
       sel_4786, sel_4787, sel_4788, sel_4789, sel_4790, sel_4791, sel_4792,
       sel_4803, sel_4804) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5577_sel_2 = sel_4803;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5577_sel_2 = sel_2_839;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5577_sel_2 = sel_4792;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5577_sel_2 = sel_4791;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5577_sel_2 = sel_4790;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5577_sel_2 = sel_4789;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5577_sel_2 = sel_4788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5577_sel_2 = sel_4787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5577_sel_2 = sel_4786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5577_sel_2 = sel_4785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5577_sel_2 = sel_4784;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5577_sel_2 = sel_4783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5577_sel_2 = sel_4782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5577_sel_2 = sel_4781;
        end
      default :
        begin
          p5577_sel_2 = sel_4804;
        end
    endcase
    sel_2_840 = p5577_sel_2;
  end

  always @* begin
    p5576cont_bits_42_cont_bits_42[7] = cont_bits_42_21[7];
    if (sel_2_840) begin
      p5576cont_bits_42_cont_bits_42[7] = tmp_270;
    end
    cont_bits_42_22[0] = cont_bits_42_21[0];
    cont_bits_42_22[1] = cont_bits_42_21[1];
    cont_bits_42_22[2] = cont_bits_42_21[2];
    cont_bits_42_22[3] = cont_bits_42_21[3];
    cont_bits_42_22[4] = cont_bits_42_21[4];
    cont_bits_42_22[5] = cont_bits_42_21[5];
    cont_bits_42_22[6] = cont_bits_42_21[6];
    cont_bits_42_22[7] = p5576cont_bits_42_cont_bits_42[7];
    cont_bits_42_22[8] = cont_bits_42_21[8];
    cont_bits_42_22[9] = cont_bits_42_21[9];
    cont_bits_42_22[10] = cont_bits_42_21[10];
    cont_bits_42_22[11] = cont_bits_42_21[11];
  end

  assign sel_4805 = 32'sd0;

  assign sel_4806 = 32'sd0;

  assign sel_4807 = 32'sd0;

  assign sel_4808 = 32'sd0;

  assign sel_4809 = 32'sd0;

  assign sel_4810 = 32'sd0;

  assign sel_4811 = 32'sd0;

  assign sel_4812 = 32'sd0;

  assign sel_4813 = 32'sd0;

  assign sel_4814 = 32'sd0;

  assign sel_4815 = 32'sd0;

  assign sel_4816 = 32'sd0;

  assign sel_4817 = 32'sd0;

  assign sel_4818 = 32'sd0;

  assign sel_4819 = 32'sd0;

  assign s_333 = 32'sd8;

  assign sel_1_839 = (tmp_5 == 1'b0 ? sel_4819 :
              s_333);

  assign sel_4820 = 32'sd0;

  assign sel_1_840 = (tmp_7 == 1'b0 ? sel_1_839 :
              sel_4820);

  assign sel_4821 = 32'sd0;

  assign sel_1_841 = (tmp_9 == 1'b0 ? sel_1_840 :
              sel_4821);

  assign sel_4822 = 32'sd0;

  assign sel_1_842 = (tmp_11 == 1'b0 ? sel_1_841 :
              sel_4822);

  assign sel_4823 = 32'sd0;

  assign sel_1_843 = (tmp_13 == 1'b0 ? sel_1_842 :
              sel_4823);

  assign sel_4824 = 32'sd0;

  assign sel_1_844 = (tmp_15 == 1'b0 ? sel_1_843 :
              sel_4824);

  assign sel_4825 = 32'sd0;

  assign sel_1_845 = (tmp_17 == 1'b0 ? sel_1_844 :
              sel_4825);

  assign sel_1_846 = (s_10 == 1'b0 ? sel_4818 :
              sel_1_845);

  assign sel_1_847 = (s_11 == 1'b0 ? sel_4817 :
              sel_1_846);

  assign sel_4826 = 32'sd0;

  assign sel_1_848 = (s_12 == 1'b0 ? sel_1_847 :
              sel_4826);

  assign sel_4827 = 32'sd0;

  assign sel_4828 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_848, sel_4805, sel_4806, sel_4807, sel_4808, sel_4809,
       sel_4810, sel_4811, sel_4812, sel_4813, sel_4814, sel_4815, sel_4816,
       sel_4827, sel_4828) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8333_sel_1 = sel_4827;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8333_sel_1 = sel_1_848;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8333_sel_1 = sel_4816;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8333_sel_1 = sel_4815;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8333_sel_1 = sel_4814;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8333_sel_1 = sel_4813;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8333_sel_1 = sel_4812;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8333_sel_1 = sel_4811;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8333_sel_1 = sel_4810;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8333_sel_1 = sel_4809;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8333_sel_1 = sel_4808;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8333_sel_1 = sel_4807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8333_sel_1 = sel_4806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8333_sel_1 = sel_4805;
        end
      default :
        begin
          p8333_sel_1 = sel_4828;
        end
    endcase
    sel_1_849 = p8333_sel_1;
  end

  assign tmp_271 = functionOutput_20[sel_1_849];

  assign sel_4829 = 1'b0;

  assign sel_4830 = 1'b0;

  assign sel_4831 = 1'b0;

  assign sel_4832 = 1'b0;

  assign sel_4833 = 1'b0;

  assign sel_4834 = 1'b0;

  assign sel_4835 = 1'b0;

  assign sel_4836 = 1'b0;

  assign sel_4837 = 1'b0;

  assign sel_4838 = 1'b0;

  assign sel_4839 = 1'b0;

  assign sel_4840 = 1'b0;

  assign sel_4841 = 1'b0;

  assign sel_4842 = 1'b0;

  assign sel_4843 = 1'b0;

  assign s_334 = 1'b1;

  assign sel_2_841 = (tmp_5 == 1'b0 ? sel_4843 :
              s_334);

  assign sel_4844 = 1'b0;

  assign sel_2_842 = (tmp_7 == 1'b0 ? sel_2_841 :
              sel_4844);

  assign sel_4845 = 1'b0;

  assign sel_2_843 = (tmp_9 == 1'b0 ? sel_2_842 :
              sel_4845);

  assign sel_4846 = 1'b0;

  assign sel_2_844 = (tmp_11 == 1'b0 ? sel_2_843 :
              sel_4846);

  assign sel_4847 = 1'b0;

  assign sel_2_845 = (tmp_13 == 1'b0 ? sel_2_844 :
              sel_4847);

  assign sel_4848 = 1'b0;

  assign sel_2_846 = (tmp_15 == 1'b0 ? sel_2_845 :
              sel_4848);

  assign sel_4849 = 1'b0;

  assign sel_2_847 = (tmp_17 == 1'b0 ? sel_2_846 :
              sel_4849);

  assign sel_2_848 = (s_10 == 1'b0 ? sel_4842 :
              sel_2_847);

  assign sel_2_849 = (s_11 == 1'b0 ? sel_4841 :
              sel_2_848);

  assign sel_4850 = 1'b0;

  assign sel_2_850 = (s_12 == 1'b0 ? sel_2_849 :
              sel_4850);

  assign sel_4851 = 1'b0;

  assign sel_4852 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_850, sel_4829, sel_4830, sel_4831, sel_4832, sel_4833,
       sel_4834, sel_4835, sel_4836, sel_4837, sel_4838, sel_4839, sel_4840,
       sel_4851, sel_4852) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5295_sel_2 = sel_4851;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5295_sel_2 = sel_2_850;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5295_sel_2 = sel_4840;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5295_sel_2 = sel_4839;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5295_sel_2 = sel_4838;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5295_sel_2 = sel_4837;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5295_sel_2 = sel_4836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5295_sel_2 = sel_4835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5295_sel_2 = sel_4834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5295_sel_2 = sel_4833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5295_sel_2 = sel_4832;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5295_sel_2 = sel_4831;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5295_sel_2 = sel_4830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5295_sel_2 = sel_4829;
        end
      default :
        begin
          p5295_sel_2 = sel_4852;
        end
    endcase
    sel_2_851 = p5295_sel_2;
  end

  always @* begin
    p5294cont_bits_42_cont_bits_42[8] = cont_bits_42_22[8];
    if (sel_2_851) begin
      p5294cont_bits_42_cont_bits_42[8] = tmp_271;
    end
    cont_bits_42_23[0] = cont_bits_42_22[0];
    cont_bits_42_23[1] = cont_bits_42_22[1];
    cont_bits_42_23[2] = cont_bits_42_22[2];
    cont_bits_42_23[3] = cont_bits_42_22[3];
    cont_bits_42_23[4] = cont_bits_42_22[4];
    cont_bits_42_23[5] = cont_bits_42_22[5];
    cont_bits_42_23[6] = cont_bits_42_22[6];
    cont_bits_42_23[7] = cont_bits_42_22[7];
    cont_bits_42_23[8] = p5294cont_bits_42_cont_bits_42[8];
    cont_bits_42_23[9] = cont_bits_42_22[9];
    cont_bits_42_23[10] = cont_bits_42_22[10];
    cont_bits_42_23[11] = cont_bits_42_22[11];
  end

  assign sel_4853 = 32'sd0;

  assign sel_4854 = 32'sd0;

  assign sel_4855 = 32'sd0;

  assign sel_4856 = 32'sd0;

  assign sel_4857 = 32'sd0;

  assign sel_4858 = 32'sd0;

  assign sel_4859 = 32'sd0;

  assign sel_4860 = 32'sd0;

  assign sel_4861 = 32'sd0;

  assign sel_4862 = 32'sd0;

  assign sel_4863 = 32'sd0;

  assign sel_4864 = 32'sd0;

  assign sel_4865 = 32'sd0;

  assign sel_4866 = 32'sd0;

  assign sel_4867 = 32'sd0;

  assign s_335 = 32'sd9;

  assign sel_1_850 = (tmp_5 == 1'b0 ? sel_4867 :
              s_335);

  assign sel_4868 = 32'sd0;

  assign sel_1_851 = (tmp_7 == 1'b0 ? sel_1_850 :
              sel_4868);

  assign sel_4869 = 32'sd0;

  assign sel_1_852 = (tmp_9 == 1'b0 ? sel_1_851 :
              sel_4869);

  assign sel_4870 = 32'sd0;

  assign sel_1_853 = (tmp_11 == 1'b0 ? sel_1_852 :
              sel_4870);

  assign sel_4871 = 32'sd0;

  assign sel_1_854 = (tmp_13 == 1'b0 ? sel_1_853 :
              sel_4871);

  assign sel_4872 = 32'sd0;

  assign sel_1_855 = (tmp_15 == 1'b0 ? sel_1_854 :
              sel_4872);

  assign sel_4873 = 32'sd0;

  assign sel_1_856 = (tmp_17 == 1'b0 ? sel_1_855 :
              sel_4873);

  assign sel_1_857 = (s_10 == 1'b0 ? sel_4866 :
              sel_1_856);

  assign sel_1_858 = (s_11 == 1'b0 ? sel_4865 :
              sel_1_857);

  assign sel_4874 = 32'sd0;

  assign sel_1_859 = (s_12 == 1'b0 ? sel_1_858 :
              sel_4874);

  assign sel_4875 = 32'sd0;

  assign sel_4876 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_859, sel_4853, sel_4854, sel_4855, sel_4856, sel_4857,
       sel_4858, sel_4859, sel_4860, sel_4861, sel_4862, sel_4863, sel_4864,
       sel_4875, sel_4876) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9795_sel_1 = sel_4875;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9795_sel_1 = sel_1_859;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9795_sel_1 = sel_4864;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9795_sel_1 = sel_4863;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9795_sel_1 = sel_4862;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9795_sel_1 = sel_4861;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9795_sel_1 = sel_4860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9795_sel_1 = sel_4859;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9795_sel_1 = sel_4858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9795_sel_1 = sel_4857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9795_sel_1 = sel_4856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9795_sel_1 = sel_4855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9795_sel_1 = sel_4854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9795_sel_1 = sel_4853;
        end
      default :
        begin
          p9795_sel_1 = sel_4876;
        end
    endcase
    sel_1_860 = p9795_sel_1;
  end

  assign tmp_272 = functionOutput_20[sel_1_860];

  assign sel_4877 = 1'b0;

  assign sel_4878 = 1'b0;

  assign sel_4879 = 1'b0;

  assign sel_4880 = 1'b0;

  assign sel_4881 = 1'b0;

  assign sel_4882 = 1'b0;

  assign sel_4883 = 1'b0;

  assign sel_4884 = 1'b0;

  assign sel_4885 = 1'b0;

  assign sel_4886 = 1'b0;

  assign sel_4887 = 1'b0;

  assign sel_4888 = 1'b0;

  assign sel_4889 = 1'b0;

  assign sel_4890 = 1'b0;

  assign sel_4891 = 1'b0;

  assign s_336 = 1'b1;

  assign sel_2_852 = (tmp_5 == 1'b0 ? sel_4891 :
              s_336);

  assign sel_4892 = 1'b0;

  assign sel_2_853 = (tmp_7 == 1'b0 ? sel_2_852 :
              sel_4892);

  assign sel_4893 = 1'b0;

  assign sel_2_854 = (tmp_9 == 1'b0 ? sel_2_853 :
              sel_4893);

  assign sel_4894 = 1'b0;

  assign sel_2_855 = (tmp_11 == 1'b0 ? sel_2_854 :
              sel_4894);

  assign sel_4895 = 1'b0;

  assign sel_2_856 = (tmp_13 == 1'b0 ? sel_2_855 :
              sel_4895);

  assign sel_4896 = 1'b0;

  assign sel_2_857 = (tmp_15 == 1'b0 ? sel_2_856 :
              sel_4896);

  assign sel_4897 = 1'b0;

  assign sel_2_858 = (tmp_17 == 1'b0 ? sel_2_857 :
              sel_4897);

  assign sel_2_859 = (s_10 == 1'b0 ? sel_4890 :
              sel_2_858);

  assign sel_2_860 = (s_11 == 1'b0 ? sel_4889 :
              sel_2_859);

  assign sel_4898 = 1'b0;

  assign sel_2_861 = (s_12 == 1'b0 ? sel_2_860 :
              sel_4898);

  assign sel_4899 = 1'b0;

  assign sel_4900 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_861, sel_4877, sel_4878, sel_4879, sel_4880, sel_4881,
       sel_4882, sel_4883, sel_4884, sel_4885, sel_4886, sel_4887, sel_4888,
       sel_4899, sel_4900) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4971_sel_2 = sel_4899;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4971_sel_2 = sel_2_861;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4971_sel_2 = sel_4888;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4971_sel_2 = sel_4887;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4971_sel_2 = sel_4886;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4971_sel_2 = sel_4885;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4971_sel_2 = sel_4884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4971_sel_2 = sel_4883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4971_sel_2 = sel_4882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4971_sel_2 = sel_4881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4971_sel_2 = sel_4880;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4971_sel_2 = sel_4879;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4971_sel_2 = sel_4878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4971_sel_2 = sel_4877;
        end
      default :
        begin
          p4971_sel_2 = sel_4900;
        end
    endcase
    sel_2_862 = p4971_sel_2;
  end

  always @* begin
    p4970cont_bits_42_cont_bits_42[9] = cont_bits_42_23[9];
    if (sel_2_862) begin
      p4970cont_bits_42_cont_bits_42[9] = tmp_272;
    end
    cont_bits_42_24[0] = cont_bits_42_23[0];
    cont_bits_42_24[1] = cont_bits_42_23[1];
    cont_bits_42_24[2] = cont_bits_42_23[2];
    cont_bits_42_24[3] = cont_bits_42_23[3];
    cont_bits_42_24[4] = cont_bits_42_23[4];
    cont_bits_42_24[5] = cont_bits_42_23[5];
    cont_bits_42_24[6] = cont_bits_42_23[6];
    cont_bits_42_24[7] = cont_bits_42_23[7];
    cont_bits_42_24[8] = cont_bits_42_23[8];
    cont_bits_42_24[9] = p4970cont_bits_42_cont_bits_42[9];
    cont_bits_42_24[10] = cont_bits_42_23[10];
    cont_bits_42_24[11] = cont_bits_42_23[11];
  end

  assign sel_4901 = 32'sd0;

  assign sel_4902 = 32'sd0;

  assign sel_4903 = 32'sd0;

  assign sel_4904 = 32'sd0;

  assign sel_4905 = 32'sd0;

  assign sel_4906 = 32'sd0;

  assign sel_4907 = 32'sd0;

  assign sel_4908 = 32'sd0;

  assign sel_4909 = 32'sd0;

  assign sel_4910 = 32'sd0;

  assign sel_4911 = 32'sd0;

  assign sel_4912 = 32'sd0;

  assign sel_4913 = 32'sd0;

  assign sel_4914 = 32'sd0;

  assign sel_4915 = 32'sd0;

  assign s_337 = 32'sd10;

  assign sel_1_861 = (tmp_5 == 1'b0 ? sel_4915 :
              s_337);

  assign sel_4916 = 32'sd0;

  assign sel_1_862 = (tmp_7 == 1'b0 ? sel_1_861 :
              sel_4916);

  assign sel_4917 = 32'sd0;

  assign sel_1_863 = (tmp_9 == 1'b0 ? sel_1_862 :
              sel_4917);

  assign sel_4918 = 32'sd0;

  assign sel_1_864 = (tmp_11 == 1'b0 ? sel_1_863 :
              sel_4918);

  assign sel_4919 = 32'sd0;

  assign sel_1_865 = (tmp_13 == 1'b0 ? sel_1_864 :
              sel_4919);

  assign sel_4920 = 32'sd0;

  assign sel_1_866 = (tmp_15 == 1'b0 ? sel_1_865 :
              sel_4920);

  assign sel_4921 = 32'sd0;

  assign sel_1_867 = (tmp_17 == 1'b0 ? sel_1_866 :
              sel_4921);

  assign sel_1_868 = (s_10 == 1'b0 ? sel_4914 :
              sel_1_867);

  assign sel_1_869 = (s_11 == 1'b0 ? sel_4913 :
              sel_1_868);

  assign sel_4922 = 32'sd0;

  assign sel_1_870 = (s_12 == 1'b0 ? sel_1_869 :
              sel_4922);

  assign sel_4923 = 32'sd0;

  assign sel_4924 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_870, sel_4901, sel_4902, sel_4903, sel_4904, sel_4905,
       sel_4906, sel_4907, sel_4908, sel_4909, sel_4910, sel_4911, sel_4912,
       sel_4923, sel_4924) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9098_sel_1 = sel_4923;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9098_sel_1 = sel_1_870;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9098_sel_1 = sel_4912;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9098_sel_1 = sel_4911;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9098_sel_1 = sel_4910;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9098_sel_1 = sel_4909;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9098_sel_1 = sel_4908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9098_sel_1 = sel_4907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9098_sel_1 = sel_4906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9098_sel_1 = sel_4905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9098_sel_1 = sel_4904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9098_sel_1 = sel_4903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9098_sel_1 = sel_4902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9098_sel_1 = sel_4901;
        end
      default :
        begin
          p9098_sel_1 = sel_4924;
        end
    endcase
    sel_1_871 = p9098_sel_1;
  end

  assign tmp_273 = functionOutput_20[sel_1_871];

  assign sel_4925 = 1'b0;

  assign sel_4926 = 1'b0;

  assign sel_4927 = 1'b0;

  assign sel_4928 = 1'b0;

  assign sel_4929 = 1'b0;

  assign sel_4930 = 1'b0;

  assign sel_4931 = 1'b0;

  assign sel_4932 = 1'b0;

  assign sel_4933 = 1'b0;

  assign sel_4934 = 1'b0;

  assign sel_4935 = 1'b0;

  assign sel_4936 = 1'b0;

  assign sel_4937 = 1'b0;

  assign sel_4938 = 1'b0;

  assign sel_4939 = 1'b0;

  assign s_338 = 1'b1;

  assign sel_2_863 = (tmp_5 == 1'b0 ? sel_4939 :
              s_338);

  assign sel_4940 = 1'b0;

  assign sel_2_864 = (tmp_7 == 1'b0 ? sel_2_863 :
              sel_4940);

  assign sel_4941 = 1'b0;

  assign sel_2_865 = (tmp_9 == 1'b0 ? sel_2_864 :
              sel_4941);

  assign sel_4942 = 1'b0;

  assign sel_2_866 = (tmp_11 == 1'b0 ? sel_2_865 :
              sel_4942);

  assign sel_4943 = 1'b0;

  assign sel_2_867 = (tmp_13 == 1'b0 ? sel_2_866 :
              sel_4943);

  assign sel_4944 = 1'b0;

  assign sel_2_868 = (tmp_15 == 1'b0 ? sel_2_867 :
              sel_4944);

  assign sel_4945 = 1'b0;

  assign sel_2_869 = (tmp_17 == 1'b0 ? sel_2_868 :
              sel_4945);

  assign sel_2_870 = (s_10 == 1'b0 ? sel_4938 :
              sel_2_869);

  assign sel_2_871 = (s_11 == 1'b0 ? sel_4937 :
              sel_2_870);

  assign sel_4946 = 1'b0;

  assign sel_2_872 = (s_12 == 1'b0 ? sel_2_871 :
              sel_4946);

  assign sel_4947 = 1'b0;

  assign sel_4948 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_872, sel_4925, sel_4926, sel_4927, sel_4928, sel_4929,
       sel_4930, sel_4931, sel_4932, sel_4933, sel_4934, sel_4935, sel_4936,
       sel_4947, sel_4948) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4689_sel_2 = sel_4947;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4689_sel_2 = sel_2_872;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4689_sel_2 = sel_4936;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4689_sel_2 = sel_4935;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4689_sel_2 = sel_4934;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4689_sel_2 = sel_4933;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4689_sel_2 = sel_4932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4689_sel_2 = sel_4931;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4689_sel_2 = sel_4930;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4689_sel_2 = sel_4929;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4689_sel_2 = sel_4928;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4689_sel_2 = sel_4927;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4689_sel_2 = sel_4926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4689_sel_2 = sel_4925;
        end
      default :
        begin
          p4689_sel_2 = sel_4948;
        end
    endcase
    sel_2_873 = p4689_sel_2;
  end

  always @* begin
    p4688cont_bits_42_cont_bits_42[10] = cont_bits_42_24[10];
    if (sel_2_873) begin
      p4688cont_bits_42_cont_bits_42[10] = tmp_273;
    end
    cont_bits_42_25[0] = cont_bits_42_24[0];
    cont_bits_42_25[1] = cont_bits_42_24[1];
    cont_bits_42_25[2] = cont_bits_42_24[2];
    cont_bits_42_25[3] = cont_bits_42_24[3];
    cont_bits_42_25[4] = cont_bits_42_24[4];
    cont_bits_42_25[5] = cont_bits_42_24[5];
    cont_bits_42_25[6] = cont_bits_42_24[6];
    cont_bits_42_25[7] = cont_bits_42_24[7];
    cont_bits_42_25[8] = cont_bits_42_24[8];
    cont_bits_42_25[9] = cont_bits_42_24[9];
    cont_bits_42_25[10] = p4688cont_bits_42_cont_bits_42[10];
    cont_bits_42_25[11] = cont_bits_42_24[11];
  end

  assign sel_4949 = 32'sd0;

  assign sel_4950 = 32'sd0;

  assign sel_4951 = 32'sd0;

  assign sel_4952 = 32'sd0;

  assign sel_4953 = 32'sd0;

  assign sel_4954 = 32'sd0;

  assign sel_4955 = 32'sd0;

  assign sel_4956 = 32'sd0;

  assign sel_4957 = 32'sd0;

  assign sel_4958 = 32'sd0;

  assign sel_4959 = 32'sd0;

  assign sel_4960 = 32'sd0;

  assign sel_4961 = 32'sd0;

  assign sel_4962 = 32'sd0;

  assign sel_4963 = 32'sd0;

  assign s_339 = 32'sd11;

  assign sel_1_872 = (tmp_5 == 1'b0 ? sel_4963 :
              s_339);

  assign sel_4964 = 32'sd0;

  assign sel_1_873 = (tmp_7 == 1'b0 ? sel_1_872 :
              sel_4964);

  assign sel_4965 = 32'sd0;

  assign sel_1_874 = (tmp_9 == 1'b0 ? sel_1_873 :
              sel_4965);

  assign sel_4966 = 32'sd0;

  assign sel_1_875 = (tmp_11 == 1'b0 ? sel_1_874 :
              sel_4966);

  assign sel_4967 = 32'sd0;

  assign sel_1_876 = (tmp_13 == 1'b0 ? sel_1_875 :
              sel_4967);

  assign sel_4968 = 32'sd0;

  assign sel_1_877 = (tmp_15 == 1'b0 ? sel_1_876 :
              sel_4968);

  assign sel_4969 = 32'sd0;

  assign sel_1_878 = (tmp_17 == 1'b0 ? sel_1_877 :
              sel_4969);

  assign sel_1_879 = (s_10 == 1'b0 ? sel_4962 :
              sel_1_878);

  assign sel_1_880 = (s_11 == 1'b0 ? sel_4961 :
              sel_1_879);

  assign sel_4970 = 32'sd0;

  assign sel_1_881 = (s_12 == 1'b0 ? sel_1_880 :
              sel_4970);

  assign sel_4971 = 32'sd0;

  assign sel_4972 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_881, sel_4949, sel_4950, sel_4951, sel_4952, sel_4953,
       sel_4954, sel_4955, sel_4956, sel_4957, sel_4958, sel_4959, sel_4960,
       sel_4971, sel_4972) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8316_sel_1 = sel_4971;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8316_sel_1 = sel_1_881;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8316_sel_1 = sel_4960;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8316_sel_1 = sel_4959;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8316_sel_1 = sel_4958;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8316_sel_1 = sel_4957;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8316_sel_1 = sel_4956;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8316_sel_1 = sel_4955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8316_sel_1 = sel_4954;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8316_sel_1 = sel_4953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8316_sel_1 = sel_4952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8316_sel_1 = sel_4951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8316_sel_1 = sel_4950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8316_sel_1 = sel_4949;
        end
      default :
        begin
          p8316_sel_1 = sel_4972;
        end
    endcase
    sel_1_882 = p8316_sel_1;
  end

  assign tmp_274 = functionOutput_20[sel_1_882];

  assign sel_4973 = 1'b0;

  assign sel_4974 = 1'b0;

  assign sel_4975 = 1'b0;

  assign sel_4976 = 1'b0;

  assign sel_4977 = 1'b0;

  assign sel_4978 = 1'b0;

  assign sel_4979 = 1'b0;

  assign sel_4980 = 1'b0;

  assign sel_4981 = 1'b0;

  assign sel_4982 = 1'b0;

  assign sel_4983 = 1'b0;

  assign sel_4984 = 1'b0;

  assign sel_4985 = 1'b0;

  assign sel_4986 = 1'b0;

  assign sel_4987 = 1'b0;

  assign s_340 = 1'b1;

  assign sel_2_874 = (tmp_5 == 1'b0 ? sel_4987 :
              s_340);

  assign sel_4988 = 1'b0;

  assign sel_2_875 = (tmp_7 == 1'b0 ? sel_2_874 :
              sel_4988);

  assign sel_4989 = 1'b0;

  assign sel_2_876 = (tmp_9 == 1'b0 ? sel_2_875 :
              sel_4989);

  assign sel_4990 = 1'b0;

  assign sel_2_877 = (tmp_11 == 1'b0 ? sel_2_876 :
              sel_4990);

  assign sel_4991 = 1'b0;

  assign sel_2_878 = (tmp_13 == 1'b0 ? sel_2_877 :
              sel_4991);

  assign sel_4992 = 1'b0;

  assign sel_2_879 = (tmp_15 == 1'b0 ? sel_2_878 :
              sel_4992);

  assign sel_4993 = 1'b0;

  assign sel_2_880 = (tmp_17 == 1'b0 ? sel_2_879 :
              sel_4993);

  assign sel_2_881 = (s_10 == 1'b0 ? sel_4986 :
              sel_2_880);

  assign sel_2_882 = (s_11 == 1'b0 ? sel_4985 :
              sel_2_881);

  assign sel_4994 = 1'b0;

  assign sel_2_883 = (s_12 == 1'b0 ? sel_2_882 :
              sel_4994);

  assign sel_4995 = 1'b0;

  assign sel_4996 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_883, sel_4973, sel_4974, sel_4975, sel_4976, sel_4977,
       sel_4978, sel_4979, sel_4980, sel_4981, sel_4982, sel_4983, sel_4984,
       sel_4995, sel_4996) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4365_sel_2 = sel_4995;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4365_sel_2 = sel_2_883;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4365_sel_2 = sel_4984;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4365_sel_2 = sel_4983;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4365_sel_2 = sel_4982;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4365_sel_2 = sel_4981;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4365_sel_2 = sel_4980;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4365_sel_2 = sel_4979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4365_sel_2 = sel_4978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4365_sel_2 = sel_4977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4365_sel_2 = sel_4976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4365_sel_2 = sel_4975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4365_sel_2 = sel_4974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4365_sel_2 = sel_4973;
        end
      default :
        begin
          p4365_sel_2 = sel_4996;
        end
    endcase
    sel_2_884 = p4365_sel_2;
  end

  always @* begin
    p4364cont_bits_42_cont_bits_42[11] = cont_bits_42_25[11];
    if (sel_2_884) begin
      p4364cont_bits_42_cont_bits_42[11] = tmp_274;
    end
    cont_bits_42_26[0] = cont_bits_42_25[0];
    cont_bits_42_26[1] = cont_bits_42_25[1];
    cont_bits_42_26[2] = cont_bits_42_25[2];
    cont_bits_42_26[3] = cont_bits_42_25[3];
    cont_bits_42_26[4] = cont_bits_42_25[4];
    cont_bits_42_26[5] = cont_bits_42_25[5];
    cont_bits_42_26[6] = cont_bits_42_25[6];
    cont_bits_42_26[7] = cont_bits_42_25[7];
    cont_bits_42_26[8] = cont_bits_42_25[8];
    cont_bits_42_26[9] = cont_bits_42_25[9];
    cont_bits_42_26[10] = cont_bits_42_25[10];
    cont_bits_42_26[11] = p4364cont_bits_42_cont_bits_42[11];
  end

  assign sel_4997 = 32'sd0;

  assign sel_4998 = 32'sd0;

  assign sel_4999 = 32'sd0;

  assign sel_5000 = 32'sd0;

  assign sel_5001 = 32'sd0;

  assign sel_5002 = 32'sd0;

  assign sel_5003 = 32'sd0;

  assign sel_5004 = 32'sd0;

  assign sel_5005 = 32'sd0;

  assign sel_5006 = 32'sd0;

  assign sel_5007 = 32'sd0;

  assign sel_5008 = 32'sd0;

  assign sel_5009 = 32'sd0;

  assign sel_5010 = 32'sd0;

  assign sel_5011 = 32'sd0;

  assign s_341 = 32'sd0;

  assign sel_1_883 = (tmp_5 == 1'b0 ? sel_5011 :
              s_341);

  assign sel_5012 = 32'sd0;

  assign sel_1_884 = (tmp_7 == 1'b0 ? sel_1_883 :
              sel_5012);

  assign sel_5013 = 32'sd0;

  assign sel_1_885 = (tmp_9 == 1'b0 ? sel_1_884 :
              sel_5013);

  assign sel_5014 = 32'sd0;

  assign sel_1_886 = (tmp_11 == 1'b0 ? sel_1_885 :
              sel_5014);

  assign sel_5015 = 32'sd0;

  assign sel_1_887 = (tmp_13 == 1'b0 ? sel_1_886 :
              sel_5015);

  assign sel_5016 = 32'sd0;

  assign sel_1_888 = (tmp_15 == 1'b0 ? sel_1_887 :
              sel_5016);

  assign sel_5017 = 32'sd0;

  assign sel_1_889 = (tmp_17 == 1'b0 ? sel_1_888 :
              sel_5017);

  assign sel_1_890 = (s_10 == 1'b0 ? sel_5010 :
              sel_1_889);

  assign sel_1_891 = (s_11 == 1'b0 ? sel_5009 :
              sel_1_890);

  assign sel_5018 = 32'sd0;

  assign sel_1_892 = (s_12 == 1'b0 ? sel_1_891 :
              sel_5018);

  assign sel_5019 = 32'sd0;

  assign sel_5020 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_892, sel_4997, sel_4998, sel_4999, sel_5000, sel_5001,
       sel_5002, sel_5003, sel_5004, sel_5005, sel_5006, sel_5007, sel_5008,
       sel_5019, sel_5020) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2957_sel_1 = sel_5019;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2957_sel_1 = sel_1_892;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2957_sel_1 = sel_5008;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2957_sel_1 = sel_5007;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2957_sel_1 = sel_5006;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2957_sel_1 = sel_5005;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2957_sel_1 = sel_5004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2957_sel_1 = sel_5003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2957_sel_1 = sel_5002;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2957_sel_1 = sel_5001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2957_sel_1 = sel_5000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2957_sel_1 = sel_4999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2957_sel_1 = sel_4998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2957_sel_1 = sel_4997;
        end
      default :
        begin
          p2957_sel_1 = sel_5020;
        end
    endcase
    sel_1_893 = p2957_sel_1;
  end

  assign cont_bits_42_27 = cont_bits_42_26[sel_1_893];

  assign sel_1_894 = (tmp_5 == 1'b0 ? cont_bits_41_27 :
              cont_bits_42_27);

  assign cont_bits_32_14[0] = 1'b0;
  assign cont_bits_32_14[1] = 1'b0;
  assign cont_bits_32_14[2] = 1'b0;
  assign cont_bits_32_14[3] = 1'b0;
  assign cont_bits_32_14[4] = 1'b0;
  assign cont_bits_32_14[5] = 1'b0;
  assign cont_bits_32_14[6] = 1'b0;
  assign cont_bits_32_14[7] = 1'b0;
  assign cont_bits_32_14[8] = 1'b0;
  assign cont_bits_32_14[9] = 1'b0;
  assign cont_bits_32_14[10] = 1'b0;
  assign cont_bits_32_14[11] = 1'b0;

  simfcn1 u_simfcn1_10 (.vx(r_v32),  // uint16
                        .cont_bits2_0(functionOutput_0_10),  // boolean
                        .cont_bits2_1(functionOutput_1_10),  // boolean
                        .cont_bits2_2(functionOutput_2_10),  // boolean
                        .cont_bits2_3(functionOutput_3_10),  // boolean
                        .cont_bits2_4(functionOutput_4_10),  // boolean
                        .cont_bits2_5(functionOutput_5_10),  // boolean
                        .cont_bits2_6(functionOutput_6_10),  // boolean
                        .cont_bits2_7(functionOutput_7_10),  // boolean
                        .cont_bits2_8(functionOutput_8_10),  // boolean
                        .cont_bits2_9(functionOutput_9_10),  // boolean
                        .cont_bits2_10(functionOutput_10_10),  // boolean
                        .cont_bits2_11(functionOutput_11_10)  // boolean
                        );

  assign functionOutput_21[0] = functionOutput_0_10;
  assign functionOutput_21[1] = functionOutput_1_10;
  assign functionOutput_21[2] = functionOutput_2_10;
  assign functionOutput_21[3] = functionOutput_3_10;
  assign functionOutput_21[4] = functionOutput_4_10;
  assign functionOutput_21[5] = functionOutput_5_10;
  assign functionOutput_21[6] = functionOutput_6_10;
  assign functionOutput_21[7] = functionOutput_7_10;
  assign functionOutput_21[8] = functionOutput_8_10;
  assign functionOutput_21[9] = functionOutput_9_10;
  assign functionOutput_21[10] = functionOutput_10_10;
  assign functionOutput_21[11] = functionOutput_11_10;

  assign sel_5021 = 32'sd0;

  assign sel_5022 = 32'sd0;

  assign sel_5023 = 32'sd0;

  assign sel_5024 = 32'sd0;

  assign sel_5025 = 32'sd0;

  assign sel_5026 = 32'sd0;

  assign sel_5027 = 32'sd0;

  assign sel_5028 = 32'sd0;

  assign sel_5029 = 32'sd0;

  assign sel_5030 = 32'sd0;

  assign sel_5031 = 32'sd0;

  assign sel_5032 = 32'sd0;

  assign sel_5033 = 32'sd0;

  assign sel_5034 = 32'sd0;

  assign sel_5035 = 32'sd0;

  assign s_342 = 32'sd0;

  assign sel_1_895 = (tmp_7 == 1'b0 ? sel_5035 :
              s_342);

  assign sel_5036 = 32'sd0;

  assign sel_1_896 = (tmp_9 == 1'b0 ? sel_1_895 :
              sel_5036);

  assign sel_5037 = 32'sd0;

  assign sel_1_897 = (tmp_11 == 1'b0 ? sel_1_896 :
              sel_5037);

  assign sel_5038 = 32'sd0;

  assign sel_1_898 = (tmp_13 == 1'b0 ? sel_1_897 :
              sel_5038);

  assign sel_5039 = 32'sd0;

  assign sel_1_899 = (tmp_15 == 1'b0 ? sel_1_898 :
              sel_5039);

  assign sel_5040 = 32'sd0;

  assign sel_1_900 = (tmp_17 == 1'b0 ? sel_1_899 :
              sel_5040);

  assign sel_1_901 = (s_10 == 1'b0 ? sel_5034 :
              sel_1_900);

  assign sel_1_902 = (s_11 == 1'b0 ? sel_5033 :
              sel_1_901);

  assign sel_5041 = 32'sd0;

  assign sel_1_903 = (s_12 == 1'b0 ? sel_1_902 :
              sel_5041);

  assign sel_5042 = 32'sd0;

  assign sel_5043 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_903, sel_5021, sel_5022, sel_5023, sel_5024, sel_5025,
       sel_5026, sel_5027, sel_5028, sel_5029, sel_5030, sel_5031, sel_5032,
       sel_5042, sel_5043) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8860_sel_1 = sel_5042;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8860_sel_1 = sel_1_903;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8860_sel_1 = sel_5032;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8860_sel_1 = sel_5031;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8860_sel_1 = sel_5030;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8860_sel_1 = sel_5029;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8860_sel_1 = sel_5028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8860_sel_1 = sel_5027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8860_sel_1 = sel_5026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8860_sel_1 = sel_5025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8860_sel_1 = sel_5024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8860_sel_1 = sel_5023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8860_sel_1 = sel_5022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8860_sel_1 = sel_5021;
        end
      default :
        begin
          p8860_sel_1 = sel_5043;
        end
    endcase
    sel_1_904 = p8860_sel_1;
  end

  assign tmp_275 = functionOutput_21[sel_1_904];

  assign sel_5044 = 1'b0;

  assign sel_5045 = 1'b0;

  assign sel_5046 = 1'b0;

  assign sel_5047 = 1'b0;

  assign sel_5048 = 1'b0;

  assign sel_5049 = 1'b0;

  assign sel_5050 = 1'b0;

  assign sel_5051 = 1'b0;

  assign sel_5052 = 1'b0;

  assign sel_5053 = 1'b0;

  assign sel_5054 = 1'b0;

  assign sel_5055 = 1'b0;

  assign sel_5056 = 1'b0;

  assign sel_5057 = 1'b0;

  assign sel_5058 = 1'b0;

  assign s_343 = 1'b1;

  assign sel_2_885 = (tmp_7 == 1'b0 ? sel_5058 :
              s_343);

  assign sel_5059 = 1'b0;

  assign sel_2_886 = (tmp_9 == 1'b0 ? sel_2_885 :
              sel_5059);

  assign sel_5060 = 1'b0;

  assign sel_2_887 = (tmp_11 == 1'b0 ? sel_2_886 :
              sel_5060);

  assign sel_5061 = 1'b0;

  assign sel_2_888 = (tmp_13 == 1'b0 ? sel_2_887 :
              sel_5061);

  assign sel_5062 = 1'b0;

  assign sel_2_889 = (tmp_15 == 1'b0 ? sel_2_888 :
              sel_5062);

  assign sel_5063 = 1'b0;

  assign sel_2_890 = (tmp_17 == 1'b0 ? sel_2_889 :
              sel_5063);

  assign sel_2_891 = (s_10 == 1'b0 ? sel_5057 :
              sel_2_890);

  assign sel_2_892 = (s_11 == 1'b0 ? sel_5056 :
              sel_2_891);

  assign sel_5064 = 1'b0;

  assign sel_2_893 = (s_12 == 1'b0 ? sel_2_892 :
              sel_5064);

  assign sel_5065 = 1'b0;

  assign sel_5066 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_893, sel_5044, sel_5045, sel_5046, sel_5047, sel_5048,
       sel_5049, sel_5050, sel_5051, sel_5052, sel_5053, sel_5054, sel_5055,
       sel_5065, sel_5066) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7803_sel_2 = sel_5065;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7803_sel_2 = sel_2_893;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7803_sel_2 = sel_5055;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7803_sel_2 = sel_5054;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7803_sel_2 = sel_5053;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7803_sel_2 = sel_5052;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7803_sel_2 = sel_5051;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7803_sel_2 = sel_5050;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7803_sel_2 = sel_5049;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7803_sel_2 = sel_5048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7803_sel_2 = sel_5047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7803_sel_2 = sel_5046;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7803_sel_2 = sel_5045;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7803_sel_2 = sel_5044;
        end
      default :
        begin
          p7803_sel_2 = sel_5066;
        end
    endcase
    sel_2_894 = p7803_sel_2;
  end

  always @* begin
    p7802cont_bits_32_cont_bits_32[0] = cont_bits_32_14[0];
    if (sel_2_894) begin
      p7802cont_bits_32_cont_bits_32[0] = tmp_275;
    end
    cont_bits_32_15[0] = p7802cont_bits_32_cont_bits_32[0];
    cont_bits_32_15[1] = cont_bits_32_14[1];
    cont_bits_32_15[2] = cont_bits_32_14[2];
    cont_bits_32_15[3] = cont_bits_32_14[3];
    cont_bits_32_15[4] = cont_bits_32_14[4];
    cont_bits_32_15[5] = cont_bits_32_14[5];
    cont_bits_32_15[6] = cont_bits_32_14[6];
    cont_bits_32_15[7] = cont_bits_32_14[7];
    cont_bits_32_15[8] = cont_bits_32_14[8];
    cont_bits_32_15[9] = cont_bits_32_14[9];
    cont_bits_32_15[10] = cont_bits_32_14[10];
    cont_bits_32_15[11] = cont_bits_32_14[11];
  end

  assign sel_5067 = 32'sd0;

  assign sel_5068 = 32'sd0;

  assign sel_5069 = 32'sd0;

  assign sel_5070 = 32'sd0;

  assign sel_5071 = 32'sd0;

  assign sel_5072 = 32'sd0;

  assign sel_5073 = 32'sd0;

  assign sel_5074 = 32'sd0;

  assign sel_5075 = 32'sd0;

  assign sel_5076 = 32'sd0;

  assign sel_5077 = 32'sd0;

  assign sel_5078 = 32'sd0;

  assign sel_5079 = 32'sd0;

  assign sel_5080 = 32'sd0;

  assign sel_5081 = 32'sd0;

  assign s_344 = 32'sd1;

  assign sel_1_905 = (tmp_7 == 1'b0 ? sel_5081 :
              s_344);

  assign sel_5082 = 32'sd0;

  assign sel_1_906 = (tmp_9 == 1'b0 ? sel_1_905 :
              sel_5082);

  assign sel_5083 = 32'sd0;

  assign sel_1_907 = (tmp_11 == 1'b0 ? sel_1_906 :
              sel_5083);

  assign sel_5084 = 32'sd0;

  assign sel_1_908 = (tmp_13 == 1'b0 ? sel_1_907 :
              sel_5084);

  assign sel_5085 = 32'sd0;

  assign sel_1_909 = (tmp_15 == 1'b0 ? sel_1_908 :
              sel_5085);

  assign sel_5086 = 32'sd0;

  assign sel_1_910 = (tmp_17 == 1'b0 ? sel_1_909 :
              sel_5086);

  assign sel_1_911 = (s_10 == 1'b0 ? sel_5080 :
              sel_1_910);

  assign sel_1_912 = (s_11 == 1'b0 ? sel_5079 :
              sel_1_911);

  assign sel_5087 = 32'sd0;

  assign sel_1_913 = (s_12 == 1'b0 ? sel_1_912 :
              sel_5087);

  assign sel_5088 = 32'sd0;

  assign sel_5089 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_913, sel_5067, sel_5068, sel_5069, sel_5070, sel_5071,
       sel_5072, sel_5073, sel_5074, sel_5075, sel_5076, sel_5077, sel_5078,
       sel_5088, sel_5089) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9574_sel_1 = sel_5088;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9574_sel_1 = sel_1_913;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9574_sel_1 = sel_5078;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9574_sel_1 = sel_5077;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9574_sel_1 = sel_5076;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9574_sel_1 = sel_5075;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9574_sel_1 = sel_5074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9574_sel_1 = sel_5073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9574_sel_1 = sel_5072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9574_sel_1 = sel_5071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9574_sel_1 = sel_5070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9574_sel_1 = sel_5069;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9574_sel_1 = sel_5068;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9574_sel_1 = sel_5067;
        end
      default :
        begin
          p9574_sel_1 = sel_5089;
        end
    endcase
    sel_1_914 = p9574_sel_1;
  end

  assign tmp_276 = functionOutput_21[sel_1_914];

  assign sel_5090 = 1'b0;

  assign sel_5091 = 1'b0;

  assign sel_5092 = 1'b0;

  assign sel_5093 = 1'b0;

  assign sel_5094 = 1'b0;

  assign sel_5095 = 1'b0;

  assign sel_5096 = 1'b0;

  assign sel_5097 = 1'b0;

  assign sel_5098 = 1'b0;

  assign sel_5099 = 1'b0;

  assign sel_5100 = 1'b0;

  assign sel_5101 = 1'b0;

  assign sel_5102 = 1'b0;

  assign sel_5103 = 1'b0;

  assign sel_5104 = 1'b0;

  assign s_345 = 1'b1;

  assign sel_2_895 = (tmp_7 == 1'b0 ? sel_5104 :
              s_345);

  assign sel_5105 = 1'b0;

  assign sel_2_896 = (tmp_9 == 1'b0 ? sel_2_895 :
              sel_5105);

  assign sel_5106 = 1'b0;

  assign sel_2_897 = (tmp_11 == 1'b0 ? sel_2_896 :
              sel_5106);

  assign sel_5107 = 1'b0;

  assign sel_2_898 = (tmp_13 == 1'b0 ? sel_2_897 :
              sel_5107);

  assign sel_5108 = 1'b0;

  assign sel_2_899 = (tmp_15 == 1'b0 ? sel_2_898 :
              sel_5108);

  assign sel_5109 = 1'b0;

  assign sel_2_900 = (tmp_17 == 1'b0 ? sel_2_899 :
              sel_5109);

  assign sel_2_901 = (s_10 == 1'b0 ? sel_5103 :
              sel_2_900);

  assign sel_2_902 = (s_11 == 1'b0 ? sel_5102 :
              sel_2_901);

  assign sel_5110 = 1'b0;

  assign sel_2_903 = (s_12 == 1'b0 ? sel_2_902 :
              sel_5110);

  assign sel_5111 = 1'b0;

  assign sel_5112 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_903, sel_5090, sel_5091, sel_5092, sel_5093, sel_5094,
       sel_5095, sel_5096, sel_5097, sel_5098, sel_5099, sel_5100, sel_5101,
       sel_5111, sel_5112) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7376_sel_2 = sel_5111;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7376_sel_2 = sel_2_903;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7376_sel_2 = sel_5101;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7376_sel_2 = sel_5100;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7376_sel_2 = sel_5099;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7376_sel_2 = sel_5098;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7376_sel_2 = sel_5097;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7376_sel_2 = sel_5096;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7376_sel_2 = sel_5095;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7376_sel_2 = sel_5094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7376_sel_2 = sel_5093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7376_sel_2 = sel_5092;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7376_sel_2 = sel_5091;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7376_sel_2 = sel_5090;
        end
      default :
        begin
          p7376_sel_2 = sel_5112;
        end
    endcase
    sel_2_904 = p7376_sel_2;
  end

  always @* begin
    p7375cont_bits_32_cont_bits_32[1] = cont_bits_32_15[1];
    if (sel_2_904) begin
      p7375cont_bits_32_cont_bits_32[1] = tmp_276;
    end
    cont_bits_32_16[0] = cont_bits_32_15[0];
    cont_bits_32_16[1] = p7375cont_bits_32_cont_bits_32[1];
    cont_bits_32_16[2] = cont_bits_32_15[2];
    cont_bits_32_16[3] = cont_bits_32_15[3];
    cont_bits_32_16[4] = cont_bits_32_15[4];
    cont_bits_32_16[5] = cont_bits_32_15[5];
    cont_bits_32_16[6] = cont_bits_32_15[6];
    cont_bits_32_16[7] = cont_bits_32_15[7];
    cont_bits_32_16[8] = cont_bits_32_15[8];
    cont_bits_32_16[9] = cont_bits_32_15[9];
    cont_bits_32_16[10] = cont_bits_32_15[10];
    cont_bits_32_16[11] = cont_bits_32_15[11];
  end

  assign sel_5113 = 32'sd0;

  assign sel_5114 = 32'sd0;

  assign sel_5115 = 32'sd0;

  assign sel_5116 = 32'sd0;

  assign sel_5117 = 32'sd0;

  assign sel_5118 = 32'sd0;

  assign sel_5119 = 32'sd0;

  assign sel_5120 = 32'sd0;

  assign sel_5121 = 32'sd0;

  assign sel_5122 = 32'sd0;

  assign sel_5123 = 32'sd0;

  assign sel_5124 = 32'sd0;

  assign sel_5125 = 32'sd0;

  assign sel_5126 = 32'sd0;

  assign sel_5127 = 32'sd0;

  assign s_346 = 32'sd2;

  assign sel_1_915 = (tmp_7 == 1'b0 ? sel_5127 :
              s_346);

  assign sel_5128 = 32'sd0;

  assign sel_1_916 = (tmp_9 == 1'b0 ? sel_1_915 :
              sel_5128);

  assign sel_5129 = 32'sd0;

  assign sel_1_917 = (tmp_11 == 1'b0 ? sel_1_916 :
              sel_5129);

  assign sel_5130 = 32'sd0;

  assign sel_1_918 = (tmp_13 == 1'b0 ? sel_1_917 :
              sel_5130);

  assign sel_5131 = 32'sd0;

  assign sel_1_919 = (tmp_15 == 1'b0 ? sel_1_918 :
              sel_5131);

  assign sel_5132 = 32'sd0;

  assign sel_1_920 = (tmp_17 == 1'b0 ? sel_1_919 :
              sel_5132);

  assign sel_1_921 = (s_10 == 1'b0 ? sel_5126 :
              sel_1_920);

  assign sel_1_922 = (s_11 == 1'b0 ? sel_5125 :
              sel_1_921);

  assign sel_5133 = 32'sd0;

  assign sel_1_923 = (s_12 == 1'b0 ? sel_1_922 :
              sel_5133);

  assign sel_5134 = 32'sd0;

  assign sel_5135 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_923, sel_5113, sel_5114, sel_5115, sel_5116, sel_5117,
       sel_5118, sel_5119, sel_5120, sel_5121, sel_5122, sel_5123, sel_5124,
       sel_5134, sel_5135) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8673_sel_1 = sel_5134;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8673_sel_1 = sel_1_923;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8673_sel_1 = sel_5124;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8673_sel_1 = sel_5123;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8673_sel_1 = sel_5122;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8673_sel_1 = sel_5121;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8673_sel_1 = sel_5120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8673_sel_1 = sel_5119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8673_sel_1 = sel_5118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8673_sel_1 = sel_5117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8673_sel_1 = sel_5116;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8673_sel_1 = sel_5115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8673_sel_1 = sel_5114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8673_sel_1 = sel_5113;
        end
      default :
        begin
          p8673_sel_1 = sel_5135;
        end
    endcase
    sel_1_924 = p8673_sel_1;
  end

  assign tmp_277 = functionOutput_21[sel_1_924];

  assign sel_5136 = 1'b0;

  assign sel_5137 = 1'b0;

  assign sel_5138 = 1'b0;

  assign sel_5139 = 1'b0;

  assign sel_5140 = 1'b0;

  assign sel_5141 = 1'b0;

  assign sel_5142 = 1'b0;

  assign sel_5143 = 1'b0;

  assign sel_5144 = 1'b0;

  assign sel_5145 = 1'b0;

  assign sel_5146 = 1'b0;

  assign sel_5147 = 1'b0;

  assign sel_5148 = 1'b0;

  assign sel_5149 = 1'b0;

  assign sel_5150 = 1'b0;

  assign s_347 = 1'b1;

  assign sel_2_905 = (tmp_7 == 1'b0 ? sel_5150 :
              s_347);

  assign sel_5151 = 1'b0;

  assign sel_2_906 = (tmp_9 == 1'b0 ? sel_2_905 :
              sel_5151);

  assign sel_5152 = 1'b0;

  assign sel_2_907 = (tmp_11 == 1'b0 ? sel_2_906 :
              sel_5152);

  assign sel_5153 = 1'b0;

  assign sel_2_908 = (tmp_13 == 1'b0 ? sel_2_907 :
              sel_5153);

  assign sel_5154 = 1'b0;

  assign sel_2_909 = (tmp_15 == 1'b0 ? sel_2_908 :
              sel_5154);

  assign sel_5155 = 1'b0;

  assign sel_2_910 = (tmp_17 == 1'b0 ? sel_2_909 :
              sel_5155);

  assign sel_2_911 = (s_10 == 1'b0 ? sel_5149 :
              sel_2_910);

  assign sel_2_912 = (s_11 == 1'b0 ? sel_5148 :
              sel_2_911);

  assign sel_5156 = 1'b0;

  assign sel_2_913 = (s_12 == 1'b0 ? sel_2_912 :
              sel_5156);

  assign sel_5157 = 1'b0;

  assign sel_5158 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_913, sel_5136, sel_5137, sel_5138, sel_5139, sel_5140,
       sel_5141, sel_5142, sel_5143, sel_5144, sel_5145, sel_5146, sel_5147,
       sel_5157, sel_5158) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7165_sel_2 = sel_5157;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7165_sel_2 = sel_2_913;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7165_sel_2 = sel_5147;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7165_sel_2 = sel_5146;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7165_sel_2 = sel_5145;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7165_sel_2 = sel_5144;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7165_sel_2 = sel_5143;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7165_sel_2 = sel_5142;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7165_sel_2 = sel_5141;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7165_sel_2 = sel_5140;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7165_sel_2 = sel_5139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7165_sel_2 = sel_5138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7165_sel_2 = sel_5137;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7165_sel_2 = sel_5136;
        end
      default :
        begin
          p7165_sel_2 = sel_5158;
        end
    endcase
    sel_2_914 = p7165_sel_2;
  end

  always @* begin
    p7164cont_bits_32_cont_bits_32[2] = cont_bits_32_16[2];
    if (sel_2_914) begin
      p7164cont_bits_32_cont_bits_32[2] = tmp_277;
    end
    cont_bits_32_17[0] = cont_bits_32_16[0];
    cont_bits_32_17[1] = cont_bits_32_16[1];
    cont_bits_32_17[2] = p7164cont_bits_32_cont_bits_32[2];
    cont_bits_32_17[3] = cont_bits_32_16[3];
    cont_bits_32_17[4] = cont_bits_32_16[4];
    cont_bits_32_17[5] = cont_bits_32_16[5];
    cont_bits_32_17[6] = cont_bits_32_16[6];
    cont_bits_32_17[7] = cont_bits_32_16[7];
    cont_bits_32_17[8] = cont_bits_32_16[8];
    cont_bits_32_17[9] = cont_bits_32_16[9];
    cont_bits_32_17[10] = cont_bits_32_16[10];
    cont_bits_32_17[11] = cont_bits_32_16[11];
  end

  assign sel_5159 = 32'sd0;

  assign sel_5160 = 32'sd0;

  assign sel_5161 = 32'sd0;

  assign sel_5162 = 32'sd0;

  assign sel_5163 = 32'sd0;

  assign sel_5164 = 32'sd0;

  assign sel_5165 = 32'sd0;

  assign sel_5166 = 32'sd0;

  assign sel_5167 = 32'sd0;

  assign sel_5168 = 32'sd0;

  assign sel_5169 = 32'sd0;

  assign sel_5170 = 32'sd0;

  assign sel_5171 = 32'sd0;

  assign sel_5172 = 32'sd0;

  assign sel_5173 = 32'sd0;

  assign s_348 = 32'sd3;

  assign sel_1_925 = (tmp_7 == 1'b0 ? sel_5173 :
              s_348);

  assign sel_5174 = 32'sd0;

  assign sel_1_926 = (tmp_9 == 1'b0 ? sel_1_925 :
              sel_5174);

  assign sel_5175 = 32'sd0;

  assign sel_1_927 = (tmp_11 == 1'b0 ? sel_1_926 :
              sel_5175);

  assign sel_5176 = 32'sd0;

  assign sel_1_928 = (tmp_13 == 1'b0 ? sel_1_927 :
              sel_5176);

  assign sel_5177 = 32'sd0;

  assign sel_1_929 = (tmp_15 == 1'b0 ? sel_1_928 :
              sel_5177);

  assign sel_5178 = 32'sd0;

  assign sel_1_930 = (tmp_17 == 1'b0 ? sel_1_929 :
              sel_5178);

  assign sel_1_931 = (s_10 == 1'b0 ? sel_5172 :
              sel_1_930);

  assign sel_1_932 = (s_11 == 1'b0 ? sel_5171 :
              sel_1_931);

  assign sel_5179 = 32'sd0;

  assign sel_1_933 = (s_12 == 1'b0 ? sel_1_932 :
              sel_5179);

  assign sel_5180 = 32'sd0;

  assign sel_5181 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_933, sel_5159, sel_5160, sel_5161, sel_5162, sel_5163,
       sel_5164, sel_5165, sel_5166, sel_5167, sel_5168, sel_5169, sel_5170,
       sel_5180, sel_5181) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8486_sel_1 = sel_5180;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8486_sel_1 = sel_1_933;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8486_sel_1 = sel_5170;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8486_sel_1 = sel_5169;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8486_sel_1 = sel_5168;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8486_sel_1 = sel_5167;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8486_sel_1 = sel_5166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8486_sel_1 = sel_5165;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8486_sel_1 = sel_5164;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8486_sel_1 = sel_5163;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8486_sel_1 = sel_5162;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8486_sel_1 = sel_5161;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8486_sel_1 = sel_5160;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8486_sel_1 = sel_5159;
        end
      default :
        begin
          p8486_sel_1 = sel_5181;
        end
    endcase
    sel_1_934 = p8486_sel_1;
  end

  assign tmp_278 = functionOutput_21[sel_1_934];

  assign sel_5182 = 1'b0;

  assign sel_5183 = 1'b0;

  assign sel_5184 = 1'b0;

  assign sel_5185 = 1'b0;

  assign sel_5186 = 1'b0;

  assign sel_5187 = 1'b0;

  assign sel_5188 = 1'b0;

  assign sel_5189 = 1'b0;

  assign sel_5190 = 1'b0;

  assign sel_5191 = 1'b0;

  assign sel_5192 = 1'b0;

  assign sel_5193 = 1'b0;

  assign sel_5194 = 1'b0;

  assign sel_5195 = 1'b0;

  assign sel_5196 = 1'b0;

  assign s_349 = 1'b1;

  assign sel_2_915 = (tmp_7 == 1'b0 ? sel_5196 :
              s_349);

  assign sel_5197 = 1'b0;

  assign sel_2_916 = (tmp_9 == 1'b0 ? sel_2_915 :
              sel_5197);

  assign sel_5198 = 1'b0;

  assign sel_2_917 = (tmp_11 == 1'b0 ? sel_2_916 :
              sel_5198);

  assign sel_5199 = 1'b0;

  assign sel_2_918 = (tmp_13 == 1'b0 ? sel_2_917 :
              sel_5199);

  assign sel_5200 = 1'b0;

  assign sel_2_919 = (tmp_15 == 1'b0 ? sel_2_918 :
              sel_5200);

  assign sel_5201 = 1'b0;

  assign sel_2_920 = (tmp_17 == 1'b0 ? sel_2_919 :
              sel_5201);

  assign sel_2_921 = (s_10 == 1'b0 ? sel_5195 :
              sel_2_920);

  assign sel_2_922 = (s_11 == 1'b0 ? sel_5194 :
              sel_2_921);

  assign sel_5202 = 1'b0;

  assign sel_2_923 = (s_12 == 1'b0 ? sel_2_922 :
              sel_5202);

  assign sel_5203 = 1'b0;

  assign sel_5204 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_923, sel_5182, sel_5183, sel_5184, sel_5185, sel_5186,
       sel_5187, sel_5188, sel_5189, sel_5190, sel_5191, sel_5192, sel_5193,
       sel_5203, sel_5204) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6738_sel_2 = sel_5203;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6738_sel_2 = sel_2_923;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6738_sel_2 = sel_5193;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6738_sel_2 = sel_5192;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6738_sel_2 = sel_5191;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6738_sel_2 = sel_5190;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6738_sel_2 = sel_5189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6738_sel_2 = sel_5188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6738_sel_2 = sel_5187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6738_sel_2 = sel_5186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6738_sel_2 = sel_5185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6738_sel_2 = sel_5184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6738_sel_2 = sel_5183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6738_sel_2 = sel_5182;
        end
      default :
        begin
          p6738_sel_2 = sel_5204;
        end
    endcase
    sel_2_924 = p6738_sel_2;
  end

  always @* begin
    p6737cont_bits_32_cont_bits_32[3] = cont_bits_32_17[3];
    if (sel_2_924) begin
      p6737cont_bits_32_cont_bits_32[3] = tmp_278;
    end
    cont_bits_32_18[0] = cont_bits_32_17[0];
    cont_bits_32_18[1] = cont_bits_32_17[1];
    cont_bits_32_18[2] = cont_bits_32_17[2];
    cont_bits_32_18[3] = p6737cont_bits_32_cont_bits_32[3];
    cont_bits_32_18[4] = cont_bits_32_17[4];
    cont_bits_32_18[5] = cont_bits_32_17[5];
    cont_bits_32_18[6] = cont_bits_32_17[6];
    cont_bits_32_18[7] = cont_bits_32_17[7];
    cont_bits_32_18[8] = cont_bits_32_17[8];
    cont_bits_32_18[9] = cont_bits_32_17[9];
    cont_bits_32_18[10] = cont_bits_32_17[10];
    cont_bits_32_18[11] = cont_bits_32_17[11];
  end

  assign sel_5205 = 32'sd0;

  assign sel_5206 = 32'sd0;

  assign sel_5207 = 32'sd0;

  assign sel_5208 = 32'sd0;

  assign sel_5209 = 32'sd0;

  assign sel_5210 = 32'sd0;

  assign sel_5211 = 32'sd0;

  assign sel_5212 = 32'sd0;

  assign sel_5213 = 32'sd0;

  assign sel_5214 = 32'sd0;

  assign sel_5215 = 32'sd0;

  assign sel_5216 = 32'sd0;

  assign sel_5217 = 32'sd0;

  assign sel_5218 = 32'sd0;

  assign sel_5219 = 32'sd0;

  assign s_350 = 32'sd4;

  assign sel_1_935 = (tmp_7 == 1'b0 ? sel_5219 :
              s_350);

  assign sel_5220 = 32'sd0;

  assign sel_1_936 = (tmp_9 == 1'b0 ? sel_1_935 :
              sel_5220);

  assign sel_5221 = 32'sd0;

  assign sel_1_937 = (tmp_11 == 1'b0 ? sel_1_936 :
              sel_5221);

  assign sel_5222 = 32'sd0;

  assign sel_1_938 = (tmp_13 == 1'b0 ? sel_1_937 :
              sel_5222);

  assign sel_5223 = 32'sd0;

  assign sel_1_939 = (tmp_15 == 1'b0 ? sel_1_938 :
              sel_5223);

  assign sel_5224 = 32'sd0;

  assign sel_1_940 = (tmp_17 == 1'b0 ? sel_1_939 :
              sel_5224);

  assign sel_1_941 = (s_10 == 1'b0 ? sel_5218 :
              sel_1_940);

  assign sel_1_942 = (s_11 == 1'b0 ? sel_5217 :
              sel_1_941);

  assign sel_5225 = 32'sd0;

  assign sel_1_943 = (s_12 == 1'b0 ? sel_1_942 :
              sel_5225);

  assign sel_5226 = 32'sd0;

  assign sel_5227 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_943, sel_5205, sel_5206, sel_5207, sel_5208, sel_5209,
       sel_5210, sel_5211, sel_5212, sel_5213, sel_5214, sel_5215, sel_5216,
       sel_5226, sel_5227) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8775_sel_1 = sel_5226;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8775_sel_1 = sel_1_943;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8775_sel_1 = sel_5216;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8775_sel_1 = sel_5215;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8775_sel_1 = sel_5214;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8775_sel_1 = sel_5213;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8775_sel_1 = sel_5212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8775_sel_1 = sel_5211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8775_sel_1 = sel_5210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8775_sel_1 = sel_5209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8775_sel_1 = sel_5208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8775_sel_1 = sel_5207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8775_sel_1 = sel_5206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8775_sel_1 = sel_5205;
        end
      default :
        begin
          p8775_sel_1 = sel_5227;
        end
    endcase
    sel_1_944 = p8775_sel_1;
  end

  assign tmp_279 = functionOutput_21[sel_1_944];

  assign sel_5228 = 1'b0;

  assign sel_5229 = 1'b0;

  assign sel_5230 = 1'b0;

  assign sel_5231 = 1'b0;

  assign sel_5232 = 1'b0;

  assign sel_5233 = 1'b0;

  assign sel_5234 = 1'b0;

  assign sel_5235 = 1'b0;

  assign sel_5236 = 1'b0;

  assign sel_5237 = 1'b0;

  assign sel_5238 = 1'b0;

  assign sel_5239 = 1'b0;

  assign sel_5240 = 1'b0;

  assign sel_5241 = 1'b0;

  assign sel_5242 = 1'b0;

  assign s_351 = 1'b1;

  assign sel_2_925 = (tmp_7 == 1'b0 ? sel_5242 :
              s_351);

  assign sel_5243 = 1'b0;

  assign sel_2_926 = (tmp_9 == 1'b0 ? sel_2_925 :
              sel_5243);

  assign sel_5244 = 1'b0;

  assign sel_2_927 = (tmp_11 == 1'b0 ? sel_2_926 :
              sel_5244);

  assign sel_5245 = 1'b0;

  assign sel_2_928 = (tmp_13 == 1'b0 ? sel_2_927 :
              sel_5245);

  assign sel_5246 = 1'b0;

  assign sel_2_929 = (tmp_15 == 1'b0 ? sel_2_928 :
              sel_5246);

  assign sel_5247 = 1'b0;

  assign sel_2_930 = (tmp_17 == 1'b0 ? sel_2_929 :
              sel_5247);

  assign sel_2_931 = (s_10 == 1'b0 ? sel_5241 :
              sel_2_930);

  assign sel_2_932 = (s_11 == 1'b0 ? sel_5240 :
              sel_2_931);

  assign sel_5248 = 1'b0;

  assign sel_2_933 = (s_12 == 1'b0 ? sel_2_932 :
              sel_5248);

  assign sel_5249 = 1'b0;

  assign sel_5250 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_933, sel_5228, sel_5229, sel_5230, sel_5231, sel_5232,
       sel_5233, sel_5234, sel_5235, sel_5236, sel_5237, sel_5238, sel_5239,
       sel_5249, sel_5250) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6558_sel_2 = sel_5249;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6558_sel_2 = sel_2_933;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6558_sel_2 = sel_5239;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6558_sel_2 = sel_5238;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6558_sel_2 = sel_5237;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6558_sel_2 = sel_5236;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6558_sel_2 = sel_5235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6558_sel_2 = sel_5234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6558_sel_2 = sel_5233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6558_sel_2 = sel_5232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6558_sel_2 = sel_5231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6558_sel_2 = sel_5230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6558_sel_2 = sel_5229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6558_sel_2 = sel_5228;
        end
      default :
        begin
          p6558_sel_2 = sel_5250;
        end
    endcase
    sel_2_934 = p6558_sel_2;
  end

  always @* begin
    p6557cont_bits_32_cont_bits_32[4] = cont_bits_32_18[4];
    if (sel_2_934) begin
      p6557cont_bits_32_cont_bits_32[4] = tmp_279;
    end
    cont_bits_32_19[0] = cont_bits_32_18[0];
    cont_bits_32_19[1] = cont_bits_32_18[1];
    cont_bits_32_19[2] = cont_bits_32_18[2];
    cont_bits_32_19[3] = cont_bits_32_18[3];
    cont_bits_32_19[4] = p6557cont_bits_32_cont_bits_32[4];
    cont_bits_32_19[5] = cont_bits_32_18[5];
    cont_bits_32_19[6] = cont_bits_32_18[6];
    cont_bits_32_19[7] = cont_bits_32_18[7];
    cont_bits_32_19[8] = cont_bits_32_18[8];
    cont_bits_32_19[9] = cont_bits_32_18[9];
    cont_bits_32_19[10] = cont_bits_32_18[10];
    cont_bits_32_19[11] = cont_bits_32_18[11];
  end

  assign sel_5251 = 32'sd0;

  assign sel_5252 = 32'sd0;

  assign sel_5253 = 32'sd0;

  assign sel_5254 = 32'sd0;

  assign sel_5255 = 32'sd0;

  assign sel_5256 = 32'sd0;

  assign sel_5257 = 32'sd0;

  assign sel_5258 = 32'sd0;

  assign sel_5259 = 32'sd0;

  assign sel_5260 = 32'sd0;

  assign sel_5261 = 32'sd0;

  assign sel_5262 = 32'sd0;

  assign sel_5263 = 32'sd0;

  assign sel_5264 = 32'sd0;

  assign sel_5265 = 32'sd0;

  assign s_352 = 32'sd5;

  assign sel_1_945 = (tmp_7 == 1'b0 ? sel_5265 :
              s_352);

  assign sel_5266 = 32'sd0;

  assign sel_1_946 = (tmp_9 == 1'b0 ? sel_1_945 :
              sel_5266);

  assign sel_5267 = 32'sd0;

  assign sel_1_947 = (tmp_11 == 1'b0 ? sel_1_946 :
              sel_5267);

  assign sel_5268 = 32'sd0;

  assign sel_1_948 = (tmp_13 == 1'b0 ? sel_1_947 :
              sel_5268);

  assign sel_5269 = 32'sd0;

  assign sel_1_949 = (tmp_15 == 1'b0 ? sel_1_948 :
              sel_5269);

  assign sel_5270 = 32'sd0;

  assign sel_1_950 = (tmp_17 == 1'b0 ? sel_1_949 :
              sel_5270);

  assign sel_1_951 = (s_10 == 1'b0 ? sel_5264 :
              sel_1_950);

  assign sel_1_952 = (s_11 == 1'b0 ? sel_5263 :
              sel_1_951);

  assign sel_5271 = 32'sd0;

  assign sel_1_953 = (s_12 == 1'b0 ? sel_1_952 :
              sel_5271);

  assign sel_5272 = 32'sd0;

  assign sel_5273 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_953, sel_5251, sel_5252, sel_5253, sel_5254, sel_5255,
       sel_5256, sel_5257, sel_5258, sel_5259, sel_5260, sel_5261, sel_5262,
       sel_5272, sel_5273) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8537_sel_1 = sel_5272;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8537_sel_1 = sel_1_953;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8537_sel_1 = sel_5262;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8537_sel_1 = sel_5261;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8537_sel_1 = sel_5260;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8537_sel_1 = sel_5259;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8537_sel_1 = sel_5258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8537_sel_1 = sel_5257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8537_sel_1 = sel_5256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8537_sel_1 = sel_5255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8537_sel_1 = sel_5254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8537_sel_1 = sel_5253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8537_sel_1 = sel_5252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8537_sel_1 = sel_5251;
        end
      default :
        begin
          p8537_sel_1 = sel_5273;
        end
    endcase
    sel_1_954 = p8537_sel_1;
  end

  assign tmp_280 = functionOutput_21[sel_1_954];

  assign sel_5274 = 1'b0;

  assign sel_5275 = 1'b0;

  assign sel_5276 = 1'b0;

  assign sel_5277 = 1'b0;

  assign sel_5278 = 1'b0;

  assign sel_5279 = 1'b0;

  assign sel_5280 = 1'b0;

  assign sel_5281 = 1'b0;

  assign sel_5282 = 1'b0;

  assign sel_5283 = 1'b0;

  assign sel_5284 = 1'b0;

  assign sel_5285 = 1'b0;

  assign sel_5286 = 1'b0;

  assign sel_5287 = 1'b0;

  assign sel_5288 = 1'b0;

  assign s_353 = 1'b1;

  assign sel_2_935 = (tmp_7 == 1'b0 ? sel_5288 :
              s_353);

  assign sel_5289 = 1'b0;

  assign sel_2_936 = (tmp_9 == 1'b0 ? sel_2_935 :
              sel_5289);

  assign sel_5290 = 1'b0;

  assign sel_2_937 = (tmp_11 == 1'b0 ? sel_2_936 :
              sel_5290);

  assign sel_5291 = 1'b0;

  assign sel_2_938 = (tmp_13 == 1'b0 ? sel_2_937 :
              sel_5291);

  assign sel_5292 = 1'b0;

  assign sel_2_939 = (tmp_15 == 1'b0 ? sel_2_938 :
              sel_5292);

  assign sel_5293 = 1'b0;

  assign sel_2_940 = (tmp_17 == 1'b0 ? sel_2_939 :
              sel_5293);

  assign sel_2_941 = (s_10 == 1'b0 ? sel_5287 :
              sel_2_940);

  assign sel_2_942 = (s_11 == 1'b0 ? sel_5286 :
              sel_2_941);

  assign sel_5294 = 1'b0;

  assign sel_2_943 = (s_12 == 1'b0 ? sel_2_942 :
              sel_5294);

  assign sel_5295 = 1'b0;

  assign sel_5296 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_943, sel_5274, sel_5275, sel_5276, sel_5277, sel_5278,
       sel_5279, sel_5280, sel_5281, sel_5282, sel_5283, sel_5284, sel_5285,
       sel_5295, sel_5296) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6132_sel_2 = sel_5295;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6132_sel_2 = sel_2_943;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6132_sel_2 = sel_5285;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6132_sel_2 = sel_5284;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6132_sel_2 = sel_5283;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6132_sel_2 = sel_5282;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6132_sel_2 = sel_5281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6132_sel_2 = sel_5280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6132_sel_2 = sel_5279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6132_sel_2 = sel_5278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6132_sel_2 = sel_5277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6132_sel_2 = sel_5276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6132_sel_2 = sel_5275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6132_sel_2 = sel_5274;
        end
      default :
        begin
          p6132_sel_2 = sel_5296;
        end
    endcase
    sel_2_944 = p6132_sel_2;
  end

  always @* begin
    p6131cont_bits_32_cont_bits_32[5] = cont_bits_32_19[5];
    if (sel_2_944) begin
      p6131cont_bits_32_cont_bits_32[5] = tmp_280;
    end
    cont_bits_32_20[0] = cont_bits_32_19[0];
    cont_bits_32_20[1] = cont_bits_32_19[1];
    cont_bits_32_20[2] = cont_bits_32_19[2];
    cont_bits_32_20[3] = cont_bits_32_19[3];
    cont_bits_32_20[4] = cont_bits_32_19[4];
    cont_bits_32_20[5] = p6131cont_bits_32_cont_bits_32[5];
    cont_bits_32_20[6] = cont_bits_32_19[6];
    cont_bits_32_20[7] = cont_bits_32_19[7];
    cont_bits_32_20[8] = cont_bits_32_19[8];
    cont_bits_32_20[9] = cont_bits_32_19[9];
    cont_bits_32_20[10] = cont_bits_32_19[10];
    cont_bits_32_20[11] = cont_bits_32_19[11];
  end

  assign sel_5297 = 32'sd0;

  assign sel_5298 = 32'sd0;

  assign sel_5299 = 32'sd0;

  assign sel_5300 = 32'sd0;

  assign sel_5301 = 32'sd0;

  assign sel_5302 = 32'sd0;

  assign sel_5303 = 32'sd0;

  assign sel_5304 = 32'sd0;

  assign sel_5305 = 32'sd0;

  assign sel_5306 = 32'sd0;

  assign sel_5307 = 32'sd0;

  assign sel_5308 = 32'sd0;

  assign sel_5309 = 32'sd0;

  assign sel_5310 = 32'sd0;

  assign sel_5311 = 32'sd0;

  assign s_354 = 32'sd6;

  assign sel_1_955 = (tmp_7 == 1'b0 ? sel_5311 :
              s_354);

  assign sel_5312 = 32'sd0;

  assign sel_1_956 = (tmp_9 == 1'b0 ? sel_1_955 :
              sel_5312);

  assign sel_5313 = 32'sd0;

  assign sel_1_957 = (tmp_11 == 1'b0 ? sel_1_956 :
              sel_5313);

  assign sel_5314 = 32'sd0;

  assign sel_1_958 = (tmp_13 == 1'b0 ? sel_1_957 :
              sel_5314);

  assign sel_5315 = 32'sd0;

  assign sel_1_959 = (tmp_15 == 1'b0 ? sel_1_958 :
              sel_5315);

  assign sel_5316 = 32'sd0;

  assign sel_1_960 = (tmp_17 == 1'b0 ? sel_1_959 :
              sel_5316);

  assign sel_1_961 = (s_10 == 1'b0 ? sel_5310 :
              sel_1_960);

  assign sel_1_962 = (s_11 == 1'b0 ? sel_5309 :
              sel_1_961);

  assign sel_5317 = 32'sd0;

  assign sel_1_963 = (s_12 == 1'b0 ? sel_1_962 :
              sel_5317);

  assign sel_5318 = 32'sd0;

  assign sel_5319 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_963, sel_5297, sel_5298, sel_5299, sel_5300, sel_5301,
       sel_5302, sel_5303, sel_5304, sel_5305, sel_5306, sel_5307, sel_5308,
       sel_5318, sel_5319) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8894_sel_1 = sel_5318;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8894_sel_1 = sel_1_963;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8894_sel_1 = sel_5308;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8894_sel_1 = sel_5307;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8894_sel_1 = sel_5306;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8894_sel_1 = sel_5305;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8894_sel_1 = sel_5304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8894_sel_1 = sel_5303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8894_sel_1 = sel_5302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8894_sel_1 = sel_5301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8894_sel_1 = sel_5300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8894_sel_1 = sel_5299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8894_sel_1 = sel_5298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8894_sel_1 = sel_5297;
        end
      default :
        begin
          p8894_sel_1 = sel_5319;
        end
    endcase
    sel_1_964 = p8894_sel_1;
  end

  assign tmp_281 = functionOutput_21[sel_1_964];

  assign sel_5320 = 1'b0;

  assign sel_5321 = 1'b0;

  assign sel_5322 = 1'b0;

  assign sel_5323 = 1'b0;

  assign sel_5324 = 1'b0;

  assign sel_5325 = 1'b0;

  assign sel_5326 = 1'b0;

  assign sel_5327 = 1'b0;

  assign sel_5328 = 1'b0;

  assign sel_5329 = 1'b0;

  assign sel_5330 = 1'b0;

  assign sel_5331 = 1'b0;

  assign sel_5332 = 1'b0;

  assign sel_5333 = 1'b0;

  assign sel_5334 = 1'b0;

  assign s_355 = 1'b1;

  assign sel_2_945 = (tmp_7 == 1'b0 ? sel_5334 :
              s_355);

  assign sel_5335 = 1'b0;

  assign sel_2_946 = (tmp_9 == 1'b0 ? sel_2_945 :
              sel_5335);

  assign sel_5336 = 1'b0;

  assign sel_2_947 = (tmp_11 == 1'b0 ? sel_2_946 :
              sel_5336);

  assign sel_5337 = 1'b0;

  assign sel_2_948 = (tmp_13 == 1'b0 ? sel_2_947 :
              sel_5337);

  assign sel_5338 = 1'b0;

  assign sel_2_949 = (tmp_15 == 1'b0 ? sel_2_948 :
              sel_5338);

  assign sel_5339 = 1'b0;

  assign sel_2_950 = (tmp_17 == 1'b0 ? sel_2_949 :
              sel_5339);

  assign sel_2_951 = (s_10 == 1'b0 ? sel_5333 :
              sel_2_950);

  assign sel_2_952 = (s_11 == 1'b0 ? sel_5332 :
              sel_2_951);

  assign sel_5340 = 1'b0;

  assign sel_2_953 = (s_12 == 1'b0 ? sel_2_952 :
              sel_5340);

  assign sel_5341 = 1'b0;

  assign sel_5342 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_953, sel_5320, sel_5321, sel_5322, sel_5323, sel_5324,
       sel_5325, sel_5326, sel_5327, sel_5328, sel_5329, sel_5330, sel_5331,
       sel_5341, sel_5342) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5952_sel_2 = sel_5341;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5952_sel_2 = sel_2_953;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5952_sel_2 = sel_5331;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5952_sel_2 = sel_5330;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5952_sel_2 = sel_5329;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5952_sel_2 = sel_5328;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5952_sel_2 = sel_5327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5952_sel_2 = sel_5326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5952_sel_2 = sel_5325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5952_sel_2 = sel_5324;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5952_sel_2 = sel_5323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5952_sel_2 = sel_5322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5952_sel_2 = sel_5321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5952_sel_2 = sel_5320;
        end
      default :
        begin
          p5952_sel_2 = sel_5342;
        end
    endcase
    sel_2_954 = p5952_sel_2;
  end

  always @* begin
    p5951cont_bits_32_cont_bits_32[6] = cont_bits_32_20[6];
    if (sel_2_954) begin
      p5951cont_bits_32_cont_bits_32[6] = tmp_281;
    end
    cont_bits_32_21[0] = cont_bits_32_20[0];
    cont_bits_32_21[1] = cont_bits_32_20[1];
    cont_bits_32_21[2] = cont_bits_32_20[2];
    cont_bits_32_21[3] = cont_bits_32_20[3];
    cont_bits_32_21[4] = cont_bits_32_20[4];
    cont_bits_32_21[5] = cont_bits_32_20[5];
    cont_bits_32_21[6] = p5951cont_bits_32_cont_bits_32[6];
    cont_bits_32_21[7] = cont_bits_32_20[7];
    cont_bits_32_21[8] = cont_bits_32_20[8];
    cont_bits_32_21[9] = cont_bits_32_20[9];
    cont_bits_32_21[10] = cont_bits_32_20[10];
    cont_bits_32_21[11] = cont_bits_32_20[11];
  end

  assign sel_5343 = 32'sd0;

  assign sel_5344 = 32'sd0;

  assign sel_5345 = 32'sd0;

  assign sel_5346 = 32'sd0;

  assign sel_5347 = 32'sd0;

  assign sel_5348 = 32'sd0;

  assign sel_5349 = 32'sd0;

  assign sel_5350 = 32'sd0;

  assign sel_5351 = 32'sd0;

  assign sel_5352 = 32'sd0;

  assign sel_5353 = 32'sd0;

  assign sel_5354 = 32'sd0;

  assign sel_5355 = 32'sd0;

  assign sel_5356 = 32'sd0;

  assign sel_5357 = 32'sd0;

  assign s_356 = 32'sd7;

  assign sel_1_965 = (tmp_7 == 1'b0 ? sel_5357 :
              s_356);

  assign sel_5358 = 32'sd0;

  assign sel_1_966 = (tmp_9 == 1'b0 ? sel_1_965 :
              sel_5358);

  assign sel_5359 = 32'sd0;

  assign sel_1_967 = (tmp_11 == 1'b0 ? sel_1_966 :
              sel_5359);

  assign sel_5360 = 32'sd0;

  assign sel_1_968 = (tmp_13 == 1'b0 ? sel_1_967 :
              sel_5360);

  assign sel_5361 = 32'sd0;

  assign sel_1_969 = (tmp_15 == 1'b0 ? sel_1_968 :
              sel_5361);

  assign sel_5362 = 32'sd0;

  assign sel_1_970 = (tmp_17 == 1'b0 ? sel_1_969 :
              sel_5362);

  assign sel_1_971 = (s_10 == 1'b0 ? sel_5356 :
              sel_1_970);

  assign sel_1_972 = (s_11 == 1'b0 ? sel_5355 :
              sel_1_971);

  assign sel_5363 = 32'sd0;

  assign sel_1_973 = (s_12 == 1'b0 ? sel_1_972 :
              sel_5363);

  assign sel_5364 = 32'sd0;

  assign sel_5365 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_973, sel_5343, sel_5344, sel_5345, sel_5346, sel_5347,
       sel_5348, sel_5349, sel_5350, sel_5351, sel_5352, sel_5353, sel_5354,
       sel_5364, sel_5365) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8826_sel_1 = sel_5364;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8826_sel_1 = sel_1_973;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8826_sel_1 = sel_5354;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8826_sel_1 = sel_5353;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8826_sel_1 = sel_5352;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8826_sel_1 = sel_5351;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8826_sel_1 = sel_5350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8826_sel_1 = sel_5349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8826_sel_1 = sel_5348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8826_sel_1 = sel_5347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8826_sel_1 = sel_5346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8826_sel_1 = sel_5345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8826_sel_1 = sel_5344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8826_sel_1 = sel_5343;
        end
      default :
        begin
          p8826_sel_1 = sel_5365;
        end
    endcase
    sel_1_974 = p8826_sel_1;
  end

  assign tmp_282 = functionOutput_21[sel_1_974];

  assign sel_5366 = 1'b0;

  assign sel_5367 = 1'b0;

  assign sel_5368 = 1'b0;

  assign sel_5369 = 1'b0;

  assign sel_5370 = 1'b0;

  assign sel_5371 = 1'b0;

  assign sel_5372 = 1'b0;

  assign sel_5373 = 1'b0;

  assign sel_5374 = 1'b0;

  assign sel_5375 = 1'b0;

  assign sel_5376 = 1'b0;

  assign sel_5377 = 1'b0;

  assign sel_5378 = 1'b0;

  assign sel_5379 = 1'b0;

  assign sel_5380 = 1'b0;

  assign s_357 = 1'b1;

  assign sel_2_955 = (tmp_7 == 1'b0 ? sel_5380 :
              s_357);

  assign sel_5381 = 1'b0;

  assign sel_2_956 = (tmp_9 == 1'b0 ? sel_2_955 :
              sel_5381);

  assign sel_5382 = 1'b0;

  assign sel_2_957 = (tmp_11 == 1'b0 ? sel_2_956 :
              sel_5382);

  assign sel_5383 = 1'b0;

  assign sel_2_958 = (tmp_13 == 1'b0 ? sel_2_957 :
              sel_5383);

  assign sel_5384 = 1'b0;

  assign sel_2_959 = (tmp_15 == 1'b0 ? sel_2_958 :
              sel_5384);

  assign sel_5385 = 1'b0;

  assign sel_2_960 = (tmp_17 == 1'b0 ? sel_2_959 :
              sel_5385);

  assign sel_2_961 = (s_10 == 1'b0 ? sel_5379 :
              sel_2_960);

  assign sel_2_962 = (s_11 == 1'b0 ? sel_5378 :
              sel_2_961);

  assign sel_5386 = 1'b0;

  assign sel_2_963 = (s_12 == 1'b0 ? sel_2_962 :
              sel_5386);

  assign sel_5387 = 1'b0;

  assign sel_5388 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_963, sel_5366, sel_5367, sel_5368, sel_5369, sel_5370,
       sel_5371, sel_5372, sel_5373, sel_5374, sel_5375, sel_5376, sel_5377,
       sel_5387, sel_5388) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5526_sel_2 = sel_5387;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5526_sel_2 = sel_2_963;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5526_sel_2 = sel_5377;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5526_sel_2 = sel_5376;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5526_sel_2 = sel_5375;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5526_sel_2 = sel_5374;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5526_sel_2 = sel_5373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5526_sel_2 = sel_5372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5526_sel_2 = sel_5371;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5526_sel_2 = sel_5370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5526_sel_2 = sel_5369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5526_sel_2 = sel_5368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5526_sel_2 = sel_5367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5526_sel_2 = sel_5366;
        end
      default :
        begin
          p5526_sel_2 = sel_5388;
        end
    endcase
    sel_2_964 = p5526_sel_2;
  end

  always @* begin
    p5525cont_bits_32_cont_bits_32[7] = cont_bits_32_21[7];
    if (sel_2_964) begin
      p5525cont_bits_32_cont_bits_32[7] = tmp_282;
    end
    cont_bits_32_22[0] = cont_bits_32_21[0];
    cont_bits_32_22[1] = cont_bits_32_21[1];
    cont_bits_32_22[2] = cont_bits_32_21[2];
    cont_bits_32_22[3] = cont_bits_32_21[3];
    cont_bits_32_22[4] = cont_bits_32_21[4];
    cont_bits_32_22[5] = cont_bits_32_21[5];
    cont_bits_32_22[6] = cont_bits_32_21[6];
    cont_bits_32_22[7] = p5525cont_bits_32_cont_bits_32[7];
    cont_bits_32_22[8] = cont_bits_32_21[8];
    cont_bits_32_22[9] = cont_bits_32_21[9];
    cont_bits_32_22[10] = cont_bits_32_21[10];
    cont_bits_32_22[11] = cont_bits_32_21[11];
  end

  assign sel_5389 = 32'sd0;

  assign sel_5390 = 32'sd0;

  assign sel_5391 = 32'sd0;

  assign sel_5392 = 32'sd0;

  assign sel_5393 = 32'sd0;

  assign sel_5394 = 32'sd0;

  assign sel_5395 = 32'sd0;

  assign sel_5396 = 32'sd0;

  assign sel_5397 = 32'sd0;

  assign sel_5398 = 32'sd0;

  assign sel_5399 = 32'sd0;

  assign sel_5400 = 32'sd0;

  assign sel_5401 = 32'sd0;

  assign sel_5402 = 32'sd0;

  assign sel_5403 = 32'sd0;

  assign s_358 = 32'sd8;

  assign sel_1_975 = (tmp_7 == 1'b0 ? sel_5403 :
              s_358);

  assign sel_5404 = 32'sd0;

  assign sel_1_976 = (tmp_9 == 1'b0 ? sel_1_975 :
              sel_5404);

  assign sel_5405 = 32'sd0;

  assign sel_1_977 = (tmp_11 == 1'b0 ? sel_1_976 :
              sel_5405);

  assign sel_5406 = 32'sd0;

  assign sel_1_978 = (tmp_13 == 1'b0 ? sel_1_977 :
              sel_5406);

  assign sel_5407 = 32'sd0;

  assign sel_1_979 = (tmp_15 == 1'b0 ? sel_1_978 :
              sel_5407);

  assign sel_5408 = 32'sd0;

  assign sel_1_980 = (tmp_17 == 1'b0 ? sel_1_979 :
              sel_5408);

  assign sel_1_981 = (s_10 == 1'b0 ? sel_5402 :
              sel_1_980);

  assign sel_1_982 = (s_11 == 1'b0 ? sel_5401 :
              sel_1_981);

  assign sel_5409 = 32'sd0;

  assign sel_1_983 = (s_12 == 1'b0 ? sel_1_982 :
              sel_5409);

  assign sel_5410 = 32'sd0;

  assign sel_5411 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_983, sel_5389, sel_5390, sel_5391, sel_5392, sel_5393,
       sel_5394, sel_5395, sel_5396, sel_5397, sel_5398, sel_5399, sel_5400,
       sel_5410, sel_5411) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8741_sel_1 = sel_5410;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8741_sel_1 = sel_1_983;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8741_sel_1 = sel_5400;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8741_sel_1 = sel_5399;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8741_sel_1 = sel_5398;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8741_sel_1 = sel_5397;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8741_sel_1 = sel_5396;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8741_sel_1 = sel_5395;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8741_sel_1 = sel_5394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8741_sel_1 = sel_5393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8741_sel_1 = sel_5392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8741_sel_1 = sel_5391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8741_sel_1 = sel_5390;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8741_sel_1 = sel_5389;
        end
      default :
        begin
          p8741_sel_1 = sel_5411;
        end
    endcase
    sel_1_984 = p8741_sel_1;
  end

  assign tmp_283 = functionOutput_21[sel_1_984];

  assign sel_5412 = 1'b0;

  assign sel_5413 = 1'b0;

  assign sel_5414 = 1'b0;

  assign sel_5415 = 1'b0;

  assign sel_5416 = 1'b0;

  assign sel_5417 = 1'b0;

  assign sel_5418 = 1'b0;

  assign sel_5419 = 1'b0;

  assign sel_5420 = 1'b0;

  assign sel_5421 = 1'b0;

  assign sel_5422 = 1'b0;

  assign sel_5423 = 1'b0;

  assign sel_5424 = 1'b0;

  assign sel_5425 = 1'b0;

  assign sel_5426 = 1'b0;

  assign s_359 = 1'b1;

  assign sel_2_965 = (tmp_7 == 1'b0 ? sel_5426 :
              s_359);

  assign sel_5427 = 1'b0;

  assign sel_2_966 = (tmp_9 == 1'b0 ? sel_2_965 :
              sel_5427);

  assign sel_5428 = 1'b0;

  assign sel_2_967 = (tmp_11 == 1'b0 ? sel_2_966 :
              sel_5428);

  assign sel_5429 = 1'b0;

  assign sel_2_968 = (tmp_13 == 1'b0 ? sel_2_967 :
              sel_5429);

  assign sel_5430 = 1'b0;

  assign sel_2_969 = (tmp_15 == 1'b0 ? sel_2_968 :
              sel_5430);

  assign sel_5431 = 1'b0;

  assign sel_2_970 = (tmp_17 == 1'b0 ? sel_2_969 :
              sel_5431);

  assign sel_2_971 = (s_10 == 1'b0 ? sel_5425 :
              sel_2_970);

  assign sel_2_972 = (s_11 == 1'b0 ? sel_5424 :
              sel_2_971);

  assign sel_5432 = 1'b0;

  assign sel_2_973 = (s_12 == 1'b0 ? sel_2_972 :
              sel_5432);

  assign sel_5433 = 1'b0;

  assign sel_5434 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_973, sel_5412, sel_5413, sel_5414, sel_5415, sel_5416,
       sel_5417, sel_5418, sel_5419, sel_5420, sel_5421, sel_5422, sel_5423,
       sel_5433, sel_5434) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5346_sel_2 = sel_5433;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5346_sel_2 = sel_2_973;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5346_sel_2 = sel_5423;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5346_sel_2 = sel_5422;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5346_sel_2 = sel_5421;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5346_sel_2 = sel_5420;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5346_sel_2 = sel_5419;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5346_sel_2 = sel_5418;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5346_sel_2 = sel_5417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5346_sel_2 = sel_5416;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5346_sel_2 = sel_5415;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5346_sel_2 = sel_5414;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5346_sel_2 = sel_5413;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5346_sel_2 = sel_5412;
        end
      default :
        begin
          p5346_sel_2 = sel_5434;
        end
    endcase
    sel_2_974 = p5346_sel_2;
  end

  always @* begin
    p5345cont_bits_32_cont_bits_32[8] = cont_bits_32_22[8];
    if (sel_2_974) begin
      p5345cont_bits_32_cont_bits_32[8] = tmp_283;
    end
    cont_bits_32_23[0] = cont_bits_32_22[0];
    cont_bits_32_23[1] = cont_bits_32_22[1];
    cont_bits_32_23[2] = cont_bits_32_22[2];
    cont_bits_32_23[3] = cont_bits_32_22[3];
    cont_bits_32_23[4] = cont_bits_32_22[4];
    cont_bits_32_23[5] = cont_bits_32_22[5];
    cont_bits_32_23[6] = cont_bits_32_22[6];
    cont_bits_32_23[7] = cont_bits_32_22[7];
    cont_bits_32_23[8] = p5345cont_bits_32_cont_bits_32[8];
    cont_bits_32_23[9] = cont_bits_32_22[9];
    cont_bits_32_23[10] = cont_bits_32_22[10];
    cont_bits_32_23[11] = cont_bits_32_22[11];
  end

  assign sel_5435 = 32'sd0;

  assign sel_5436 = 32'sd0;

  assign sel_5437 = 32'sd0;

  assign sel_5438 = 32'sd0;

  assign sel_5439 = 32'sd0;

  assign sel_5440 = 32'sd0;

  assign sel_5441 = 32'sd0;

  assign sel_5442 = 32'sd0;

  assign sel_5443 = 32'sd0;

  assign sel_5444 = 32'sd0;

  assign sel_5445 = 32'sd0;

  assign sel_5446 = 32'sd0;

  assign sel_5447 = 32'sd0;

  assign sel_5448 = 32'sd0;

  assign sel_5449 = 32'sd0;

  assign s_360 = 32'sd9;

  assign sel_1_985 = (tmp_7 == 1'b0 ? sel_5449 :
              s_360);

  assign sel_5450 = 32'sd0;

  assign sel_1_986 = (tmp_9 == 1'b0 ? sel_1_985 :
              sel_5450);

  assign sel_5451 = 32'sd0;

  assign sel_1_987 = (tmp_11 == 1'b0 ? sel_1_986 :
              sel_5451);

  assign sel_5452 = 32'sd0;

  assign sel_1_988 = (tmp_13 == 1'b0 ? sel_1_987 :
              sel_5452);

  assign sel_5453 = 32'sd0;

  assign sel_1_989 = (tmp_15 == 1'b0 ? sel_1_988 :
              sel_5453);

  assign sel_5454 = 32'sd0;

  assign sel_1_990 = (tmp_17 == 1'b0 ? sel_1_989 :
              sel_5454);

  assign sel_1_991 = (s_10 == 1'b0 ? sel_5448 :
              sel_1_990);

  assign sel_1_992 = (s_11 == 1'b0 ? sel_5447 :
              sel_1_991);

  assign sel_5455 = 32'sd0;

  assign sel_1_993 = (s_12 == 1'b0 ? sel_1_992 :
              sel_5455);

  assign sel_5456 = 32'sd0;

  assign sel_5457 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_993, sel_5435, sel_5436, sel_5437, sel_5438, sel_5439,
       sel_5440, sel_5441, sel_5442, sel_5443, sel_5444, sel_5445, sel_5446,
       sel_5456, sel_5457) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9149_sel_1 = sel_5456;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9149_sel_1 = sel_1_993;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9149_sel_1 = sel_5446;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9149_sel_1 = sel_5445;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9149_sel_1 = sel_5444;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9149_sel_1 = sel_5443;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9149_sel_1 = sel_5442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9149_sel_1 = sel_5441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9149_sel_1 = sel_5440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9149_sel_1 = sel_5439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9149_sel_1 = sel_5438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9149_sel_1 = sel_5437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9149_sel_1 = sel_5436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9149_sel_1 = sel_5435;
        end
      default :
        begin
          p9149_sel_1 = sel_5457;
        end
    endcase
    sel_1_994 = p9149_sel_1;
  end

  assign tmp_284 = functionOutput_21[sel_1_994];

  assign sel_5458 = 1'b0;

  assign sel_5459 = 1'b0;

  assign sel_5460 = 1'b0;

  assign sel_5461 = 1'b0;

  assign sel_5462 = 1'b0;

  assign sel_5463 = 1'b0;

  assign sel_5464 = 1'b0;

  assign sel_5465 = 1'b0;

  assign sel_5466 = 1'b0;

  assign sel_5467 = 1'b0;

  assign sel_5468 = 1'b0;

  assign sel_5469 = 1'b0;

  assign sel_5470 = 1'b0;

  assign sel_5471 = 1'b0;

  assign sel_5472 = 1'b0;

  assign s_361 = 1'b1;

  assign sel_2_975 = (tmp_7 == 1'b0 ? sel_5472 :
              s_361);

  assign sel_5473 = 1'b0;

  assign sel_2_976 = (tmp_9 == 1'b0 ? sel_2_975 :
              sel_5473);

  assign sel_5474 = 1'b0;

  assign sel_2_977 = (tmp_11 == 1'b0 ? sel_2_976 :
              sel_5474);

  assign sel_5475 = 1'b0;

  assign sel_2_978 = (tmp_13 == 1'b0 ? sel_2_977 :
              sel_5475);

  assign sel_5476 = 1'b0;

  assign sel_2_979 = (tmp_15 == 1'b0 ? sel_2_978 :
              sel_5476);

  assign sel_5477 = 1'b0;

  assign sel_2_980 = (tmp_17 == 1'b0 ? sel_2_979 :
              sel_5477);

  assign sel_2_981 = (s_10 == 1'b0 ? sel_5471 :
              sel_2_980);

  assign sel_2_982 = (s_11 == 1'b0 ? sel_5470 :
              sel_2_981);

  assign sel_5478 = 1'b0;

  assign sel_2_983 = (s_12 == 1'b0 ? sel_2_982 :
              sel_5478);

  assign sel_5479 = 1'b0;

  assign sel_5480 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_983, sel_5458, sel_5459, sel_5460, sel_5461, sel_5462,
       sel_5463, sel_5464, sel_5465, sel_5466, sel_5467, sel_5468, sel_5469,
       sel_5479, sel_5480) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4920_sel_2 = sel_5479;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4920_sel_2 = sel_2_983;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4920_sel_2 = sel_5469;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4920_sel_2 = sel_5468;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4920_sel_2 = sel_5467;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4920_sel_2 = sel_5466;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4920_sel_2 = sel_5465;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4920_sel_2 = sel_5464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4920_sel_2 = sel_5463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4920_sel_2 = sel_5462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4920_sel_2 = sel_5461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4920_sel_2 = sel_5460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4920_sel_2 = sel_5459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4920_sel_2 = sel_5458;
        end
      default :
        begin
          p4920_sel_2 = sel_5480;
        end
    endcase
    sel_2_984 = p4920_sel_2;
  end

  always @* begin
    p4919cont_bits_32_cont_bits_32[9] = cont_bits_32_23[9];
    if (sel_2_984) begin
      p4919cont_bits_32_cont_bits_32[9] = tmp_284;
    end
    cont_bits_32_24[0] = cont_bits_32_23[0];
    cont_bits_32_24[1] = cont_bits_32_23[1];
    cont_bits_32_24[2] = cont_bits_32_23[2];
    cont_bits_32_24[3] = cont_bits_32_23[3];
    cont_bits_32_24[4] = cont_bits_32_23[4];
    cont_bits_32_24[5] = cont_bits_32_23[5];
    cont_bits_32_24[6] = cont_bits_32_23[6];
    cont_bits_32_24[7] = cont_bits_32_23[7];
    cont_bits_32_24[8] = cont_bits_32_23[8];
    cont_bits_32_24[9] = p4919cont_bits_32_cont_bits_32[9];
    cont_bits_32_24[10] = cont_bits_32_23[10];
    cont_bits_32_24[11] = cont_bits_32_23[11];
  end

  assign sel_5481 = 32'sd0;

  assign sel_5482 = 32'sd0;

  assign sel_5483 = 32'sd0;

  assign sel_5484 = 32'sd0;

  assign sel_5485 = 32'sd0;

  assign sel_5486 = 32'sd0;

  assign sel_5487 = 32'sd0;

  assign sel_5488 = 32'sd0;

  assign sel_5489 = 32'sd0;

  assign sel_5490 = 32'sd0;

  assign sel_5491 = 32'sd0;

  assign sel_5492 = 32'sd0;

  assign sel_5493 = 32'sd0;

  assign sel_5494 = 32'sd0;

  assign sel_5495 = 32'sd0;

  assign s_362 = 32'sd10;

  assign sel_1_995 = (tmp_7 == 1'b0 ? sel_5495 :
              s_362);

  assign sel_5496 = 32'sd0;

  assign sel_1_996 = (tmp_9 == 1'b0 ? sel_1_995 :
              sel_5496);

  assign sel_5497 = 32'sd0;

  assign sel_1_997 = (tmp_11 == 1'b0 ? sel_1_996 :
              sel_5497);

  assign sel_5498 = 32'sd0;

  assign sel_1_998 = (tmp_13 == 1'b0 ? sel_1_997 :
              sel_5498);

  assign sel_5499 = 32'sd0;

  assign sel_1_999 = (tmp_15 == 1'b0 ? sel_1_998 :
              sel_5499);

  assign sel_5500 = 32'sd0;

  assign sel_1_1000 = (tmp_17 == 1'b0 ? sel_1_999 :
              sel_5500);

  assign sel_1_1001 = (s_10 == 1'b0 ? sel_5494 :
              sel_1_1000);

  assign sel_1_1002 = (s_11 == 1'b0 ? sel_5493 :
              sel_1_1001);

  assign sel_5501 = 32'sd0;

  assign sel_1_1003 = (s_12 == 1'b0 ? sel_1_1002 :
              sel_5501);

  assign sel_5502 = 32'sd0;

  assign sel_5503 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1003, sel_5481, sel_5482, sel_5483, sel_5484, sel_5485,
       sel_5486, sel_5487, sel_5488, sel_5489, sel_5490, sel_5491, sel_5492,
       sel_5502, sel_5503) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8248_sel_1 = sel_5502;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8248_sel_1 = sel_1_1003;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8248_sel_1 = sel_5492;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8248_sel_1 = sel_5491;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8248_sel_1 = sel_5490;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8248_sel_1 = sel_5489;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8248_sel_1 = sel_5488;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8248_sel_1 = sel_5487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8248_sel_1 = sel_5486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8248_sel_1 = sel_5485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8248_sel_1 = sel_5484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8248_sel_1 = sel_5483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8248_sel_1 = sel_5482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8248_sel_1 = sel_5481;
        end
      default :
        begin
          p8248_sel_1 = sel_5503;
        end
    endcase
    sel_1_1004 = p8248_sel_1;
  end

  assign tmp_285 = functionOutput_21[sel_1_1004];

  assign sel_5504 = 1'b0;

  assign sel_5505 = 1'b0;

  assign sel_5506 = 1'b0;

  assign sel_5507 = 1'b0;

  assign sel_5508 = 1'b0;

  assign sel_5509 = 1'b0;

  assign sel_5510 = 1'b0;

  assign sel_5511 = 1'b0;

  assign sel_5512 = 1'b0;

  assign sel_5513 = 1'b0;

  assign sel_5514 = 1'b0;

  assign sel_5515 = 1'b0;

  assign sel_5516 = 1'b0;

  assign sel_5517 = 1'b0;

  assign sel_5518 = 1'b0;

  assign s_363 = 1'b1;

  assign sel_2_985 = (tmp_7 == 1'b0 ? sel_5518 :
              s_363);

  assign sel_5519 = 1'b0;

  assign sel_2_986 = (tmp_9 == 1'b0 ? sel_2_985 :
              sel_5519);

  assign sel_5520 = 1'b0;

  assign sel_2_987 = (tmp_11 == 1'b0 ? sel_2_986 :
              sel_5520);

  assign sel_5521 = 1'b0;

  assign sel_2_988 = (tmp_13 == 1'b0 ? sel_2_987 :
              sel_5521);

  assign sel_5522 = 1'b0;

  assign sel_2_989 = (tmp_15 == 1'b0 ? sel_2_988 :
              sel_5522);

  assign sel_5523 = 1'b0;

  assign sel_2_990 = (tmp_17 == 1'b0 ? sel_2_989 :
              sel_5523);

  assign sel_2_991 = (s_10 == 1'b0 ? sel_5517 :
              sel_2_990);

  assign sel_2_992 = (s_11 == 1'b0 ? sel_5516 :
              sel_2_991);

  assign sel_5524 = 1'b0;

  assign sel_2_993 = (s_12 == 1'b0 ? sel_2_992 :
              sel_5524);

  assign sel_5525 = 1'b0;

  assign sel_5526 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_993, sel_5504, sel_5505, sel_5506, sel_5507, sel_5508,
       sel_5509, sel_5510, sel_5511, sel_5512, sel_5513, sel_5514, sel_5515,
       sel_5525, sel_5526) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4740_sel_2 = sel_5525;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4740_sel_2 = sel_2_993;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4740_sel_2 = sel_5515;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4740_sel_2 = sel_5514;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4740_sel_2 = sel_5513;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4740_sel_2 = sel_5512;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4740_sel_2 = sel_5511;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4740_sel_2 = sel_5510;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4740_sel_2 = sel_5509;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4740_sel_2 = sel_5508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4740_sel_2 = sel_5507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4740_sel_2 = sel_5506;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4740_sel_2 = sel_5505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4740_sel_2 = sel_5504;
        end
      default :
        begin
          p4740_sel_2 = sel_5526;
        end
    endcase
    sel_2_994 = p4740_sel_2;
  end

  always @* begin
    p4739cont_bits_32_cont_bits_32[10] = cont_bits_32_24[10];
    if (sel_2_994) begin
      p4739cont_bits_32_cont_bits_32[10] = tmp_285;
    end
    cont_bits_32_25[0] = cont_bits_32_24[0];
    cont_bits_32_25[1] = cont_bits_32_24[1];
    cont_bits_32_25[2] = cont_bits_32_24[2];
    cont_bits_32_25[3] = cont_bits_32_24[3];
    cont_bits_32_25[4] = cont_bits_32_24[4];
    cont_bits_32_25[5] = cont_bits_32_24[5];
    cont_bits_32_25[6] = cont_bits_32_24[6];
    cont_bits_32_25[7] = cont_bits_32_24[7];
    cont_bits_32_25[8] = cont_bits_32_24[8];
    cont_bits_32_25[9] = cont_bits_32_24[9];
    cont_bits_32_25[10] = p4739cont_bits_32_cont_bits_32[10];
    cont_bits_32_25[11] = cont_bits_32_24[11];
  end

  assign sel_5527 = 32'sd0;

  assign sel_5528 = 32'sd0;

  assign sel_5529 = 32'sd0;

  assign sel_5530 = 32'sd0;

  assign sel_5531 = 32'sd0;

  assign sel_5532 = 32'sd0;

  assign sel_5533 = 32'sd0;

  assign sel_5534 = 32'sd0;

  assign sel_5535 = 32'sd0;

  assign sel_5536 = 32'sd0;

  assign sel_5537 = 32'sd0;

  assign sel_5538 = 32'sd0;

  assign sel_5539 = 32'sd0;

  assign sel_5540 = 32'sd0;

  assign sel_5541 = 32'sd0;

  assign s_364 = 32'sd11;

  assign sel_1_1005 = (tmp_7 == 1'b0 ? sel_5541 :
              s_364);

  assign sel_5542 = 32'sd0;

  assign sel_1_1006 = (tmp_9 == 1'b0 ? sel_1_1005 :
              sel_5542);

  assign sel_5543 = 32'sd0;

  assign sel_1_1007 = (tmp_11 == 1'b0 ? sel_1_1006 :
              sel_5543);

  assign sel_5544 = 32'sd0;

  assign sel_1_1008 = (tmp_13 == 1'b0 ? sel_1_1007 :
              sel_5544);

  assign sel_5545 = 32'sd0;

  assign sel_1_1009 = (tmp_15 == 1'b0 ? sel_1_1008 :
              sel_5545);

  assign sel_5546 = 32'sd0;

  assign sel_1_1010 = (tmp_17 == 1'b0 ? sel_1_1009 :
              sel_5546);

  assign sel_1_1011 = (s_10 == 1'b0 ? sel_5540 :
              sel_1_1010);

  assign sel_1_1012 = (s_11 == 1'b0 ? sel_5539 :
              sel_1_1011);

  assign sel_5547 = 32'sd0;

  assign sel_1_1013 = (s_12 == 1'b0 ? sel_1_1012 :
              sel_5547);

  assign sel_5548 = 32'sd0;

  assign sel_5549 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1013, sel_5527, sel_5528, sel_5529, sel_5530, sel_5531,
       sel_5532, sel_5533, sel_5534, sel_5535, sel_5536, sel_5537, sel_5538,
       sel_5548, sel_5549) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9523_sel_1 = sel_5548;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9523_sel_1 = sel_1_1013;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9523_sel_1 = sel_5538;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9523_sel_1 = sel_5537;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9523_sel_1 = sel_5536;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9523_sel_1 = sel_5535;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9523_sel_1 = sel_5534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9523_sel_1 = sel_5533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9523_sel_1 = sel_5532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9523_sel_1 = sel_5531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9523_sel_1 = sel_5530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9523_sel_1 = sel_5529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9523_sel_1 = sel_5528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9523_sel_1 = sel_5527;
        end
      default :
        begin
          p9523_sel_1 = sel_5549;
        end
    endcase
    sel_1_1014 = p9523_sel_1;
  end

  assign tmp_286 = functionOutput_21[sel_1_1014];

  assign sel_5550 = 1'b0;

  assign sel_5551 = 1'b0;

  assign sel_5552 = 1'b0;

  assign sel_5553 = 1'b0;

  assign sel_5554 = 1'b0;

  assign sel_5555 = 1'b0;

  assign sel_5556 = 1'b0;

  assign sel_5557 = 1'b0;

  assign sel_5558 = 1'b0;

  assign sel_5559 = 1'b0;

  assign sel_5560 = 1'b0;

  assign sel_5561 = 1'b0;

  assign sel_5562 = 1'b0;

  assign sel_5563 = 1'b0;

  assign sel_5564 = 1'b0;

  assign s_365 = 1'b1;

  assign sel_2_995 = (tmp_7 == 1'b0 ? sel_5564 :
              s_365);

  assign sel_5565 = 1'b0;

  assign sel_2_996 = (tmp_9 == 1'b0 ? sel_2_995 :
              sel_5565);

  assign sel_5566 = 1'b0;

  assign sel_2_997 = (tmp_11 == 1'b0 ? sel_2_996 :
              sel_5566);

  assign sel_5567 = 1'b0;

  assign sel_2_998 = (tmp_13 == 1'b0 ? sel_2_997 :
              sel_5567);

  assign sel_5568 = 1'b0;

  assign sel_2_999 = (tmp_15 == 1'b0 ? sel_2_998 :
              sel_5568);

  assign sel_5569 = 1'b0;

  assign sel_2_1000 = (tmp_17 == 1'b0 ? sel_2_999 :
              sel_5569);

  assign sel_2_1001 = (s_10 == 1'b0 ? sel_5563 :
              sel_2_1000);

  assign sel_2_1002 = (s_11 == 1'b0 ? sel_5562 :
              sel_2_1001);

  assign sel_5570 = 1'b0;

  assign sel_2_1003 = (s_12 == 1'b0 ? sel_2_1002 :
              sel_5570);

  assign sel_5571 = 1'b0;

  assign sel_5572 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1003, sel_5550, sel_5551, sel_5552, sel_5553, sel_5554,
       sel_5555, sel_5556, sel_5557, sel_5558, sel_5559, sel_5560, sel_5561,
       sel_5571, sel_5572) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4314_sel_2 = sel_5571;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4314_sel_2 = sel_2_1003;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4314_sel_2 = sel_5561;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4314_sel_2 = sel_5560;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4314_sel_2 = sel_5559;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4314_sel_2 = sel_5558;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4314_sel_2 = sel_5557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4314_sel_2 = sel_5556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4314_sel_2 = sel_5555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4314_sel_2 = sel_5554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4314_sel_2 = sel_5553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4314_sel_2 = sel_5552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4314_sel_2 = sel_5551;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4314_sel_2 = sel_5550;
        end
      default :
        begin
          p4314_sel_2 = sel_5572;
        end
    endcase
    sel_2_1004 = p4314_sel_2;
  end

  always @* begin
    p4313cont_bits_32_cont_bits_32[11] = cont_bits_32_25[11];
    if (sel_2_1004) begin
      p4313cont_bits_32_cont_bits_32[11] = tmp_286;
    end
    cont_bits_32_26[0] = cont_bits_32_25[0];
    cont_bits_32_26[1] = cont_bits_32_25[1];
    cont_bits_32_26[2] = cont_bits_32_25[2];
    cont_bits_32_26[3] = cont_bits_32_25[3];
    cont_bits_32_26[4] = cont_bits_32_25[4];
    cont_bits_32_26[5] = cont_bits_32_25[5];
    cont_bits_32_26[6] = cont_bits_32_25[6];
    cont_bits_32_26[7] = cont_bits_32_25[7];
    cont_bits_32_26[8] = cont_bits_32_25[8];
    cont_bits_32_26[9] = cont_bits_32_25[9];
    cont_bits_32_26[10] = cont_bits_32_25[10];
    cont_bits_32_26[11] = p4313cont_bits_32_cont_bits_32[11];
  end

  assign sel_5573 = 32'sd0;

  assign sel_5574 = 32'sd0;

  assign sel_5575 = 32'sd0;

  assign sel_5576 = 32'sd0;

  assign sel_5577 = 32'sd0;

  assign sel_5578 = 32'sd0;

  assign sel_5579 = 32'sd0;

  assign sel_5580 = 32'sd0;

  assign sel_5581 = 32'sd0;

  assign sel_5582 = 32'sd0;

  assign sel_5583 = 32'sd0;

  assign sel_5584 = 32'sd0;

  assign sel_5585 = 32'sd0;

  assign sel_5586 = 32'sd0;

  assign sel_5587 = 32'sd0;

  assign s_366 = 32'sd0;

  assign sel_1_1015 = (tmp_7 == 1'b0 ? sel_5587 :
              s_366);

  assign sel_5588 = 32'sd0;

  assign sel_1_1016 = (tmp_9 == 1'b0 ? sel_1_1015 :
              sel_5588);

  assign sel_5589 = 32'sd0;

  assign sel_1_1017 = (tmp_11 == 1'b0 ? sel_1_1016 :
              sel_5589);

  assign sel_5590 = 32'sd0;

  assign sel_1_1018 = (tmp_13 == 1'b0 ? sel_1_1017 :
              sel_5590);

  assign sel_5591 = 32'sd0;

  assign sel_1_1019 = (tmp_15 == 1'b0 ? sel_1_1018 :
              sel_5591);

  assign sel_5592 = 32'sd0;

  assign sel_1_1020 = (tmp_17 == 1'b0 ? sel_1_1019 :
              sel_5592);

  assign sel_1_1021 = (s_10 == 1'b0 ? sel_5586 :
              sel_1_1020);

  assign sel_1_1022 = (s_11 == 1'b0 ? sel_5585 :
              sel_1_1021);

  assign sel_5593 = 32'sd0;

  assign sel_1_1023 = (s_12 == 1'b0 ? sel_1_1022 :
              sel_5593);

  assign sel_5594 = 32'sd0;

  assign sel_5595 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1023, sel_5573, sel_5574, sel_5575, sel_5576, sel_5577,
       sel_5578, sel_5579, sel_5580, sel_5581, sel_5582, sel_5583, sel_5584,
       sel_5594, sel_5595) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3501_sel_1 = sel_5594;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3501_sel_1 = sel_1_1023;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3501_sel_1 = sel_5584;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3501_sel_1 = sel_5583;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3501_sel_1 = sel_5582;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3501_sel_1 = sel_5581;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3501_sel_1 = sel_5580;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3501_sel_1 = sel_5579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3501_sel_1 = sel_5578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3501_sel_1 = sel_5577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3501_sel_1 = sel_5576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3501_sel_1 = sel_5575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3501_sel_1 = sel_5574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3501_sel_1 = sel_5573;
        end
      default :
        begin
          p3501_sel_1 = sel_5595;
        end
    endcase
    sel_1_1024 = p3501_sel_1;
  end

  assign cont_bits_32_27 = cont_bits_32_26[sel_1_1024];

  assign sel_1_1025 = (tmp_7 == 1'b0 ? sel_1_894 :
              cont_bits_32_27);

  assign cont_bits_31_14[0] = 1'b0;
  assign cont_bits_31_14[1] = 1'b0;
  assign cont_bits_31_14[2] = 1'b0;
  assign cont_bits_31_14[3] = 1'b0;
  assign cont_bits_31_14[4] = 1'b0;
  assign cont_bits_31_14[5] = 1'b0;
  assign cont_bits_31_14[6] = 1'b0;
  assign cont_bits_31_14[7] = 1'b0;
  assign cont_bits_31_14[8] = 1'b0;
  assign cont_bits_31_14[9] = 1'b0;
  assign cont_bits_31_14[10] = 1'b0;
  assign cont_bits_31_14[11] = 1'b0;

  simfcn1 u_simfcn1_11 (.vx(r_v31),  // uint16
                        .cont_bits2_0(functionOutput_0_11),  // boolean
                        .cont_bits2_1(functionOutput_1_11),  // boolean
                        .cont_bits2_2(functionOutput_2_11),  // boolean
                        .cont_bits2_3(functionOutput_3_11),  // boolean
                        .cont_bits2_4(functionOutput_4_11),  // boolean
                        .cont_bits2_5(functionOutput_5_11),  // boolean
                        .cont_bits2_6(functionOutput_6_11),  // boolean
                        .cont_bits2_7(functionOutput_7_11),  // boolean
                        .cont_bits2_8(functionOutput_8_11),  // boolean
                        .cont_bits2_9(functionOutput_9_11),  // boolean
                        .cont_bits2_10(functionOutput_10_11),  // boolean
                        .cont_bits2_11(functionOutput_11_11)  // boolean
                        );

  assign functionOutput_22[0] = functionOutput_0_11;
  assign functionOutput_22[1] = functionOutput_1_11;
  assign functionOutput_22[2] = functionOutput_2_11;
  assign functionOutput_22[3] = functionOutput_3_11;
  assign functionOutput_22[4] = functionOutput_4_11;
  assign functionOutput_22[5] = functionOutput_5_11;
  assign functionOutput_22[6] = functionOutput_6_11;
  assign functionOutput_22[7] = functionOutput_7_11;
  assign functionOutput_22[8] = functionOutput_8_11;
  assign functionOutput_22[9] = functionOutput_9_11;
  assign functionOutput_22[10] = functionOutput_10_11;
  assign functionOutput_22[11] = functionOutput_11_11;

  assign sel_5596 = 32'sd0;

  assign sel_5597 = 32'sd0;

  assign sel_5598 = 32'sd0;

  assign sel_5599 = 32'sd0;

  assign sel_5600 = 32'sd0;

  assign sel_5601 = 32'sd0;

  assign sel_5602 = 32'sd0;

  assign sel_5603 = 32'sd0;

  assign sel_5604 = 32'sd0;

  assign sel_5605 = 32'sd0;

  assign sel_5606 = 32'sd0;

  assign sel_5607 = 32'sd0;

  assign sel_5608 = 32'sd0;

  assign sel_5609 = 32'sd0;

  assign sel_5610 = 32'sd0;

  assign s_367 = 32'sd0;

  assign sel_1_1026 = (tmp_9 == 1'b0 ? sel_5610 :
              s_367);

  assign sel_5611 = 32'sd0;

  assign sel_1_1027 = (tmp_11 == 1'b0 ? sel_1_1026 :
              sel_5611);

  assign sel_5612 = 32'sd0;

  assign sel_1_1028 = (tmp_13 == 1'b0 ? sel_1_1027 :
              sel_5612);

  assign sel_5613 = 32'sd0;

  assign sel_1_1029 = (tmp_15 == 1'b0 ? sel_1_1028 :
              sel_5613);

  assign sel_5614 = 32'sd0;

  assign sel_1_1030 = (tmp_17 == 1'b0 ? sel_1_1029 :
              sel_5614);

  assign sel_1_1031 = (s_10 == 1'b0 ? sel_5609 :
              sel_1_1030);

  assign sel_1_1032 = (s_11 == 1'b0 ? sel_5608 :
              sel_1_1031);

  assign sel_5615 = 32'sd0;

  assign sel_1_1033 = (s_12 == 1'b0 ? sel_1_1032 :
              sel_5615);

  assign sel_5616 = 32'sd0;

  assign sel_5617 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1033, sel_5596, sel_5597, sel_5598, sel_5599, sel_5600,
       sel_5601, sel_5602, sel_5603, sel_5604, sel_5605, sel_5606, sel_5607,
       sel_5616, sel_5617) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8469_sel_1 = sel_5616;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8469_sel_1 = sel_1_1033;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8469_sel_1 = sel_5607;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8469_sel_1 = sel_5606;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8469_sel_1 = sel_5605;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8469_sel_1 = sel_5604;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8469_sel_1 = sel_5603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8469_sel_1 = sel_5602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8469_sel_1 = sel_5601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8469_sel_1 = sel_5600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8469_sel_1 = sel_5599;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8469_sel_1 = sel_5598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8469_sel_1 = sel_5597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8469_sel_1 = sel_5596;
        end
      default :
        begin
          p8469_sel_1 = sel_5617;
        end
    endcase
    sel_1_1034 = p8469_sel_1;
  end

  assign tmp_287 = functionOutput_22[sel_1_1034];

  assign sel_5618 = 1'b0;

  assign sel_5619 = 1'b0;

  assign sel_5620 = 1'b0;

  assign sel_5621 = 1'b0;

  assign sel_5622 = 1'b0;

  assign sel_5623 = 1'b0;

  assign sel_5624 = 1'b0;

  assign sel_5625 = 1'b0;

  assign sel_5626 = 1'b0;

  assign sel_5627 = 1'b0;

  assign sel_5628 = 1'b0;

  assign sel_5629 = 1'b0;

  assign sel_5630 = 1'b0;

  assign sel_5631 = 1'b0;

  assign sel_5632 = 1'b0;

  assign s_368 = 1'b1;

  assign sel_2_1005 = (tmp_9 == 1'b0 ? sel_5632 :
              s_368);

  assign sel_5633 = 1'b0;

  assign sel_2_1006 = (tmp_11 == 1'b0 ? sel_2_1005 :
              sel_5633);

  assign sel_5634 = 1'b0;

  assign sel_2_1007 = (tmp_13 == 1'b0 ? sel_2_1006 :
              sel_5634);

  assign sel_5635 = 1'b0;

  assign sel_2_1008 = (tmp_15 == 1'b0 ? sel_2_1007 :
              sel_5635);

  assign sel_5636 = 1'b0;

  assign sel_2_1009 = (tmp_17 == 1'b0 ? sel_2_1008 :
              sel_5636);

  assign sel_2_1010 = (s_10 == 1'b0 ? sel_5631 :
              sel_2_1009);

  assign sel_2_1011 = (s_11 == 1'b0 ? sel_5630 :
              sel_2_1010);

  assign sel_5637 = 1'b0;

  assign sel_2_1012 = (s_12 == 1'b0 ? sel_2_1011 :
              sel_5637);

  assign sel_5638 = 1'b0;

  assign sel_5639 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1012, sel_5618, sel_5619, sel_5620, sel_5621, sel_5622,
       sel_5623, sel_5624, sel_5625, sel_5626, sel_5627, sel_5628, sel_5629,
       sel_5638, sel_5639) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7854_sel_2 = sel_5638;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7854_sel_2 = sel_2_1012;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7854_sel_2 = sel_5629;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7854_sel_2 = sel_5628;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7854_sel_2 = sel_5627;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7854_sel_2 = sel_5626;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7854_sel_2 = sel_5625;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7854_sel_2 = sel_5624;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7854_sel_2 = sel_5623;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7854_sel_2 = sel_5622;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7854_sel_2 = sel_5621;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7854_sel_2 = sel_5620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7854_sel_2 = sel_5619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7854_sel_2 = sel_5618;
        end
      default :
        begin
          p7854_sel_2 = sel_5639;
        end
    endcase
    sel_2_1013 = p7854_sel_2;
  end

  always @* begin
    p7853cont_bits_31_cont_bits_31[0] = cont_bits_31_14[0];
    if (sel_2_1013) begin
      p7853cont_bits_31_cont_bits_31[0] = tmp_287;
    end
    cont_bits_31_15[0] = p7853cont_bits_31_cont_bits_31[0];
    cont_bits_31_15[1] = cont_bits_31_14[1];
    cont_bits_31_15[2] = cont_bits_31_14[2];
    cont_bits_31_15[3] = cont_bits_31_14[3];
    cont_bits_31_15[4] = cont_bits_31_14[4];
    cont_bits_31_15[5] = cont_bits_31_14[5];
    cont_bits_31_15[6] = cont_bits_31_14[6];
    cont_bits_31_15[7] = cont_bits_31_14[7];
    cont_bits_31_15[8] = cont_bits_31_14[8];
    cont_bits_31_15[9] = cont_bits_31_14[9];
    cont_bits_31_15[10] = cont_bits_31_14[10];
    cont_bits_31_15[11] = cont_bits_31_14[11];
  end

  assign sel_5640 = 32'sd0;

  assign sel_5641 = 32'sd0;

  assign sel_5642 = 32'sd0;

  assign sel_5643 = 32'sd0;

  assign sel_5644 = 32'sd0;

  assign sel_5645 = 32'sd0;

  assign sel_5646 = 32'sd0;

  assign sel_5647 = 32'sd0;

  assign sel_5648 = 32'sd0;

  assign sel_5649 = 32'sd0;

  assign sel_5650 = 32'sd0;

  assign sel_5651 = 32'sd0;

  assign sel_5652 = 32'sd0;

  assign sel_5653 = 32'sd0;

  assign sel_5654 = 32'sd0;

  assign s_369 = 32'sd1;

  assign sel_1_1035 = (tmp_9 == 1'b0 ? sel_5654 :
              s_369);

  assign sel_5655 = 32'sd0;

  assign sel_1_1036 = (tmp_11 == 1'b0 ? sel_1_1035 :
              sel_5655);

  assign sel_5656 = 32'sd0;

  assign sel_1_1037 = (tmp_13 == 1'b0 ? sel_1_1036 :
              sel_5656);

  assign sel_5657 = 32'sd0;

  assign sel_1_1038 = (tmp_15 == 1'b0 ? sel_1_1037 :
              sel_5657);

  assign sel_5658 = 32'sd0;

  assign sel_1_1039 = (tmp_17 == 1'b0 ? sel_1_1038 :
              sel_5658);

  assign sel_1_1040 = (s_10 == 1'b0 ? sel_5653 :
              sel_1_1039);

  assign sel_1_1041 = (s_11 == 1'b0 ? sel_5652 :
              sel_1_1040);

  assign sel_5659 = 32'sd0;

  assign sel_1_1042 = (s_12 == 1'b0 ? sel_1_1041 :
              sel_5659);

  assign sel_5660 = 32'sd0;

  assign sel_5661 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1042, sel_5640, sel_5641, sel_5642, sel_5643, sel_5644,
       sel_5645, sel_5646, sel_5647, sel_5648, sel_5649, sel_5650, sel_5651,
       sel_5660, sel_5661) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9744_sel_1 = sel_5660;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9744_sel_1 = sel_1_1042;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9744_sel_1 = sel_5651;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9744_sel_1 = sel_5650;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9744_sel_1 = sel_5649;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9744_sel_1 = sel_5648;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9744_sel_1 = sel_5647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9744_sel_1 = sel_5646;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9744_sel_1 = sel_5645;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9744_sel_1 = sel_5644;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9744_sel_1 = sel_5643;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9744_sel_1 = sel_5642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9744_sel_1 = sel_5641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9744_sel_1 = sel_5640;
        end
      default :
        begin
          p9744_sel_1 = sel_5661;
        end
    endcase
    sel_1_1043 = p9744_sel_1;
  end

  assign tmp_288 = functionOutput_22[sel_1_1043];

  assign sel_5662 = 1'b0;

  assign sel_5663 = 1'b0;

  assign sel_5664 = 1'b0;

  assign sel_5665 = 1'b0;

  assign sel_5666 = 1'b0;

  assign sel_5667 = 1'b0;

  assign sel_5668 = 1'b0;

  assign sel_5669 = 1'b0;

  assign sel_5670 = 1'b0;

  assign sel_5671 = 1'b0;

  assign sel_5672 = 1'b0;

  assign sel_5673 = 1'b0;

  assign sel_5674 = 1'b0;

  assign sel_5675 = 1'b0;

  assign sel_5676 = 1'b0;

  assign s_370 = 1'b1;

  assign sel_2_1014 = (tmp_9 == 1'b0 ? sel_5676 :
              s_370);

  assign sel_5677 = 1'b0;

  assign sel_2_1015 = (tmp_11 == 1'b0 ? sel_2_1014 :
              sel_5677);

  assign sel_5678 = 1'b0;

  assign sel_2_1016 = (tmp_13 == 1'b0 ? sel_2_1015 :
              sel_5678);

  assign sel_5679 = 1'b0;

  assign sel_2_1017 = (tmp_15 == 1'b0 ? sel_2_1016 :
              sel_5679);

  assign sel_5680 = 1'b0;

  assign sel_2_1018 = (tmp_17 == 1'b0 ? sel_2_1017 :
              sel_5680);

  assign sel_2_1019 = (s_10 == 1'b0 ? sel_5675 :
              sel_2_1018);

  assign sel_2_1020 = (s_11 == 1'b0 ? sel_5674 :
              sel_2_1019);

  assign sel_5681 = 1'b0;

  assign sel_2_1021 = (s_12 == 1'b0 ? sel_2_1020 :
              sel_5681);

  assign sel_5682 = 1'b0;

  assign sel_5683 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1021, sel_5662, sel_5663, sel_5664, sel_5665, sel_5666,
       sel_5667, sel_5668, sel_5669, sel_5670, sel_5671, sel_5672, sel_5673,
       sel_5682, sel_5683) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7325_sel_2 = sel_5682;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7325_sel_2 = sel_2_1021;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7325_sel_2 = sel_5673;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7325_sel_2 = sel_5672;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7325_sel_2 = sel_5671;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7325_sel_2 = sel_5670;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7325_sel_2 = sel_5669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7325_sel_2 = sel_5668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7325_sel_2 = sel_5667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7325_sel_2 = sel_5666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7325_sel_2 = sel_5665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7325_sel_2 = sel_5664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7325_sel_2 = sel_5663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7325_sel_2 = sel_5662;
        end
      default :
        begin
          p7325_sel_2 = sel_5683;
        end
    endcase
    sel_2_1022 = p7325_sel_2;
  end

  always @* begin
    p7324cont_bits_31_cont_bits_31[1] = cont_bits_31_15[1];
    if (sel_2_1022) begin
      p7324cont_bits_31_cont_bits_31[1] = tmp_288;
    end
    cont_bits_31_16[0] = cont_bits_31_15[0];
    cont_bits_31_16[1] = p7324cont_bits_31_cont_bits_31[1];
    cont_bits_31_16[2] = cont_bits_31_15[2];
    cont_bits_31_16[3] = cont_bits_31_15[3];
    cont_bits_31_16[4] = cont_bits_31_15[4];
    cont_bits_31_16[5] = cont_bits_31_15[5];
    cont_bits_31_16[6] = cont_bits_31_15[6];
    cont_bits_31_16[7] = cont_bits_31_15[7];
    cont_bits_31_16[8] = cont_bits_31_15[8];
    cont_bits_31_16[9] = cont_bits_31_15[9];
    cont_bits_31_16[10] = cont_bits_31_15[10];
    cont_bits_31_16[11] = cont_bits_31_15[11];
  end

  assign sel_5684 = 32'sd0;

  assign sel_5685 = 32'sd0;

  assign sel_5686 = 32'sd0;

  assign sel_5687 = 32'sd0;

  assign sel_5688 = 32'sd0;

  assign sel_5689 = 32'sd0;

  assign sel_5690 = 32'sd0;

  assign sel_5691 = 32'sd0;

  assign sel_5692 = 32'sd0;

  assign sel_5693 = 32'sd0;

  assign sel_5694 = 32'sd0;

  assign sel_5695 = 32'sd0;

  assign sel_5696 = 32'sd0;

  assign sel_5697 = 32'sd0;

  assign sel_5698 = 32'sd0;

  assign s_371 = 32'sd2;

  assign sel_1_1044 = (tmp_9 == 1'b0 ? sel_5698 :
              s_371);

  assign sel_5699 = 32'sd0;

  assign sel_1_1045 = (tmp_11 == 1'b0 ? sel_1_1044 :
              sel_5699);

  assign sel_5700 = 32'sd0;

  assign sel_1_1046 = (tmp_13 == 1'b0 ? sel_1_1045 :
              sel_5700);

  assign sel_5701 = 32'sd0;

  assign sel_1_1047 = (tmp_15 == 1'b0 ? sel_1_1046 :
              sel_5701);

  assign sel_5702 = 32'sd0;

  assign sel_1_1048 = (tmp_17 == 1'b0 ? sel_1_1047 :
              sel_5702);

  assign sel_1_1049 = (s_10 == 1'b0 ? sel_5697 :
              sel_1_1048);

  assign sel_1_1050 = (s_11 == 1'b0 ? sel_5696 :
              sel_1_1049);

  assign sel_5703 = 32'sd0;

  assign sel_1_1051 = (s_12 == 1'b0 ? sel_1_1050 :
              sel_5703);

  assign sel_5704 = 32'sd0;

  assign sel_5705 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1051, sel_5684, sel_5685, sel_5686, sel_5687, sel_5688,
       sel_5689, sel_5690, sel_5691, sel_5692, sel_5693, sel_5694, sel_5695,
       sel_5704, sel_5705) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9353_sel_1 = sel_5704;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9353_sel_1 = sel_1_1051;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9353_sel_1 = sel_5695;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9353_sel_1 = sel_5694;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9353_sel_1 = sel_5693;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9353_sel_1 = sel_5692;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9353_sel_1 = sel_5691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9353_sel_1 = sel_5690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9353_sel_1 = sel_5689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9353_sel_1 = sel_5688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9353_sel_1 = sel_5687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9353_sel_1 = sel_5686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9353_sel_1 = sel_5685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9353_sel_1 = sel_5684;
        end
      default :
        begin
          p9353_sel_1 = sel_5705;
        end
    endcase
    sel_1_1052 = p9353_sel_1;
  end

  assign tmp_289 = functionOutput_22[sel_1_1052];

  assign sel_5706 = 1'b0;

  assign sel_5707 = 1'b0;

  assign sel_5708 = 1'b0;

  assign sel_5709 = 1'b0;

  assign sel_5710 = 1'b0;

  assign sel_5711 = 1'b0;

  assign sel_5712 = 1'b0;

  assign sel_5713 = 1'b0;

  assign sel_5714 = 1'b0;

  assign sel_5715 = 1'b0;

  assign sel_5716 = 1'b0;

  assign sel_5717 = 1'b0;

  assign sel_5718 = 1'b0;

  assign sel_5719 = 1'b0;

  assign sel_5720 = 1'b0;

  assign s_372 = 1'b1;

  assign sel_2_1023 = (tmp_9 == 1'b0 ? sel_5720 :
              s_372);

  assign sel_5721 = 1'b0;

  assign sel_2_1024 = (tmp_11 == 1'b0 ? sel_2_1023 :
              sel_5721);

  assign sel_5722 = 1'b0;

  assign sel_2_1025 = (tmp_13 == 1'b0 ? sel_2_1024 :
              sel_5722);

  assign sel_5723 = 1'b0;

  assign sel_2_1026 = (tmp_15 == 1'b0 ? sel_2_1025 :
              sel_5723);

  assign sel_5724 = 1'b0;

  assign sel_2_1027 = (tmp_17 == 1'b0 ? sel_2_1026 :
              sel_5724);

  assign sel_2_1028 = (s_10 == 1'b0 ? sel_5719 :
              sel_2_1027);

  assign sel_2_1029 = (s_11 == 1'b0 ? sel_5718 :
              sel_2_1028);

  assign sel_5725 = 1'b0;

  assign sel_2_1030 = (s_12 == 1'b0 ? sel_2_1029 :
              sel_5725);

  assign sel_5726 = 1'b0;

  assign sel_5727 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1030, sel_5706, sel_5707, sel_5708, sel_5709, sel_5710,
       sel_5711, sel_5712, sel_5713, sel_5714, sel_5715, sel_5716, sel_5717,
       sel_5726, sel_5727) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7216_sel_2 = sel_5726;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7216_sel_2 = sel_2_1030;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7216_sel_2 = sel_5717;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7216_sel_2 = sel_5716;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7216_sel_2 = sel_5715;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7216_sel_2 = sel_5714;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7216_sel_2 = sel_5713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7216_sel_2 = sel_5712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7216_sel_2 = sel_5711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7216_sel_2 = sel_5710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7216_sel_2 = sel_5709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7216_sel_2 = sel_5708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7216_sel_2 = sel_5707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7216_sel_2 = sel_5706;
        end
      default :
        begin
          p7216_sel_2 = sel_5727;
        end
    endcase
    sel_2_1031 = p7216_sel_2;
  end

  always @* begin
    p7215cont_bits_31_cont_bits_31[2] = cont_bits_31_16[2];
    if (sel_2_1031) begin
      p7215cont_bits_31_cont_bits_31[2] = tmp_289;
    end
    cont_bits_31_17[0] = cont_bits_31_16[0];
    cont_bits_31_17[1] = cont_bits_31_16[1];
    cont_bits_31_17[2] = p7215cont_bits_31_cont_bits_31[2];
    cont_bits_31_17[3] = cont_bits_31_16[3];
    cont_bits_31_17[4] = cont_bits_31_16[4];
    cont_bits_31_17[5] = cont_bits_31_16[5];
    cont_bits_31_17[6] = cont_bits_31_16[6];
    cont_bits_31_17[7] = cont_bits_31_16[7];
    cont_bits_31_17[8] = cont_bits_31_16[8];
    cont_bits_31_17[9] = cont_bits_31_16[9];
    cont_bits_31_17[10] = cont_bits_31_16[10];
    cont_bits_31_17[11] = cont_bits_31_16[11];
  end

  assign sel_5728 = 32'sd0;

  assign sel_5729 = 32'sd0;

  assign sel_5730 = 32'sd0;

  assign sel_5731 = 32'sd0;

  assign sel_5732 = 32'sd0;

  assign sel_5733 = 32'sd0;

  assign sel_5734 = 32'sd0;

  assign sel_5735 = 32'sd0;

  assign sel_5736 = 32'sd0;

  assign sel_5737 = 32'sd0;

  assign sel_5738 = 32'sd0;

  assign sel_5739 = 32'sd0;

  assign sel_5740 = 32'sd0;

  assign sel_5741 = 32'sd0;

  assign sel_5742 = 32'sd0;

  assign s_373 = 32'sd3;

  assign sel_1_1053 = (tmp_9 == 1'b0 ? sel_5742 :
              s_373);

  assign sel_5743 = 32'sd0;

  assign sel_1_1054 = (tmp_11 == 1'b0 ? sel_1_1053 :
              sel_5743);

  assign sel_5744 = 32'sd0;

  assign sel_1_1055 = (tmp_13 == 1'b0 ? sel_1_1054 :
              sel_5744);

  assign sel_5745 = 32'sd0;

  assign sel_1_1056 = (tmp_15 == 1'b0 ? sel_1_1055 :
              sel_5745);

  assign sel_5746 = 32'sd0;

  assign sel_1_1057 = (tmp_17 == 1'b0 ? sel_1_1056 :
              sel_5746);

  assign sel_1_1058 = (s_10 == 1'b0 ? sel_5741 :
              sel_1_1057);

  assign sel_1_1059 = (s_11 == 1'b0 ? sel_5740 :
              sel_1_1058);

  assign sel_5747 = 32'sd0;

  assign sel_1_1060 = (s_12 == 1'b0 ? sel_1_1059 :
              sel_5747);

  assign sel_5748 = 32'sd0;

  assign sel_5749 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1060, sel_5728, sel_5729, sel_5730, sel_5731, sel_5732,
       sel_5733, sel_5734, sel_5735, sel_5736, sel_5737, sel_5738, sel_5739,
       sel_5748, sel_5749) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8639_sel_1 = sel_5748;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8639_sel_1 = sel_1_1060;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8639_sel_1 = sel_5739;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8639_sel_1 = sel_5738;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8639_sel_1 = sel_5737;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8639_sel_1 = sel_5736;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8639_sel_1 = sel_5735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8639_sel_1 = sel_5734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8639_sel_1 = sel_5733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8639_sel_1 = sel_5732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8639_sel_1 = sel_5731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8639_sel_1 = sel_5730;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8639_sel_1 = sel_5729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8639_sel_1 = sel_5728;
        end
      default :
        begin
          p8639_sel_1 = sel_5749;
        end
    endcase
    sel_1_1061 = p8639_sel_1;
  end

  assign tmp_290 = functionOutput_22[sel_1_1061];

  assign sel_5750 = 1'b0;

  assign sel_5751 = 1'b0;

  assign sel_5752 = 1'b0;

  assign sel_5753 = 1'b0;

  assign sel_5754 = 1'b0;

  assign sel_5755 = 1'b0;

  assign sel_5756 = 1'b0;

  assign sel_5757 = 1'b0;

  assign sel_5758 = 1'b0;

  assign sel_5759 = 1'b0;

  assign sel_5760 = 1'b0;

  assign sel_5761 = 1'b0;

  assign sel_5762 = 1'b0;

  assign sel_5763 = 1'b0;

  assign sel_5764 = 1'b0;

  assign s_374 = 1'b1;

  assign sel_2_1032 = (tmp_9 == 1'b0 ? sel_5764 :
              s_374);

  assign sel_5765 = 1'b0;

  assign sel_2_1033 = (tmp_11 == 1'b0 ? sel_2_1032 :
              sel_5765);

  assign sel_5766 = 1'b0;

  assign sel_2_1034 = (tmp_13 == 1'b0 ? sel_2_1033 :
              sel_5766);

  assign sel_5767 = 1'b0;

  assign sel_2_1035 = (tmp_15 == 1'b0 ? sel_2_1034 :
              sel_5767);

  assign sel_5768 = 1'b0;

  assign sel_2_1036 = (tmp_17 == 1'b0 ? sel_2_1035 :
              sel_5768);

  assign sel_2_1037 = (s_10 == 1'b0 ? sel_5763 :
              sel_2_1036);

  assign sel_2_1038 = (s_11 == 1'b0 ? sel_5762 :
              sel_2_1037);

  assign sel_5769 = 1'b0;

  assign sel_2_1039 = (s_12 == 1'b0 ? sel_2_1038 :
              sel_5769);

  assign sel_5770 = 1'b0;

  assign sel_5771 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1039, sel_5750, sel_5751, sel_5752, sel_5753, sel_5754,
       sel_5755, sel_5756, sel_5757, sel_5758, sel_5759, sel_5760, sel_5761,
       sel_5770, sel_5771) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6687_sel_2 = sel_5770;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6687_sel_2 = sel_2_1039;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6687_sel_2 = sel_5761;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6687_sel_2 = sel_5760;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6687_sel_2 = sel_5759;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6687_sel_2 = sel_5758;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6687_sel_2 = sel_5757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6687_sel_2 = sel_5756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6687_sel_2 = sel_5755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6687_sel_2 = sel_5754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6687_sel_2 = sel_5753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6687_sel_2 = sel_5752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6687_sel_2 = sel_5751;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6687_sel_2 = sel_5750;
        end
      default :
        begin
          p6687_sel_2 = sel_5771;
        end
    endcase
    sel_2_1040 = p6687_sel_2;
  end

  always @* begin
    p6686cont_bits_31_cont_bits_31[3] = cont_bits_31_17[3];
    if (sel_2_1040) begin
      p6686cont_bits_31_cont_bits_31[3] = tmp_290;
    end
    cont_bits_31_18[0] = cont_bits_31_17[0];
    cont_bits_31_18[1] = cont_bits_31_17[1];
    cont_bits_31_18[2] = cont_bits_31_17[2];
    cont_bits_31_18[3] = p6686cont_bits_31_cont_bits_31[3];
    cont_bits_31_18[4] = cont_bits_31_17[4];
    cont_bits_31_18[5] = cont_bits_31_17[5];
    cont_bits_31_18[6] = cont_bits_31_17[6];
    cont_bits_31_18[7] = cont_bits_31_17[7];
    cont_bits_31_18[8] = cont_bits_31_17[8];
    cont_bits_31_18[9] = cont_bits_31_17[9];
    cont_bits_31_18[10] = cont_bits_31_17[10];
    cont_bits_31_18[11] = cont_bits_31_17[11];
  end

  assign sel_5772 = 32'sd0;

  assign sel_5773 = 32'sd0;

  assign sel_5774 = 32'sd0;

  assign sel_5775 = 32'sd0;

  assign sel_5776 = 32'sd0;

  assign sel_5777 = 32'sd0;

  assign sel_5778 = 32'sd0;

  assign sel_5779 = 32'sd0;

  assign sel_5780 = 32'sd0;

  assign sel_5781 = 32'sd0;

  assign sel_5782 = 32'sd0;

  assign sel_5783 = 32'sd0;

  assign sel_5784 = 32'sd0;

  assign sel_5785 = 32'sd0;

  assign sel_5786 = 32'sd0;

  assign s_375 = 32'sd4;

  assign sel_1_1062 = (tmp_9 == 1'b0 ? sel_5786 :
              s_375);

  assign sel_5787 = 32'sd0;

  assign sel_1_1063 = (tmp_11 == 1'b0 ? sel_1_1062 :
              sel_5787);

  assign sel_5788 = 32'sd0;

  assign sel_1_1064 = (tmp_13 == 1'b0 ? sel_1_1063 :
              sel_5788);

  assign sel_5789 = 32'sd0;

  assign sel_1_1065 = (tmp_15 == 1'b0 ? sel_1_1064 :
              sel_5789);

  assign sel_5790 = 32'sd0;

  assign sel_1_1066 = (tmp_17 == 1'b0 ? sel_1_1065 :
              sel_5790);

  assign sel_1_1067 = (s_10 == 1'b0 ? sel_5785 :
              sel_1_1066);

  assign sel_1_1068 = (s_11 == 1'b0 ? sel_5784 :
              sel_1_1067);

  assign sel_5791 = 32'sd0;

  assign sel_1_1069 = (s_12 == 1'b0 ? sel_1_1068 :
              sel_5791);

  assign sel_5792 = 32'sd0;

  assign sel_5793 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1069, sel_5772, sel_5773, sel_5774, sel_5775, sel_5776,
       sel_5777, sel_5778, sel_5779, sel_5780, sel_5781, sel_5782, sel_5783,
       sel_5792, sel_5793) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8282_sel_1 = sel_5792;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8282_sel_1 = sel_1_1069;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8282_sel_1 = sel_5783;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8282_sel_1 = sel_5782;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8282_sel_1 = sel_5781;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8282_sel_1 = sel_5780;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8282_sel_1 = sel_5779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8282_sel_1 = sel_5778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8282_sel_1 = sel_5777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8282_sel_1 = sel_5776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8282_sel_1 = sel_5775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8282_sel_1 = sel_5774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8282_sel_1 = sel_5773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8282_sel_1 = sel_5772;
        end
      default :
        begin
          p8282_sel_1 = sel_5793;
        end
    endcase
    sel_1_1070 = p8282_sel_1;
  end

  assign tmp_291 = functionOutput_22[sel_1_1070];

  assign sel_5794 = 1'b0;

  assign sel_5795 = 1'b0;

  assign sel_5796 = 1'b0;

  assign sel_5797 = 1'b0;

  assign sel_5798 = 1'b0;

  assign sel_5799 = 1'b0;

  assign sel_5800 = 1'b0;

  assign sel_5801 = 1'b0;

  assign sel_5802 = 1'b0;

  assign sel_5803 = 1'b0;

  assign sel_5804 = 1'b0;

  assign sel_5805 = 1'b0;

  assign sel_5806 = 1'b0;

  assign sel_5807 = 1'b0;

  assign sel_5808 = 1'b0;

  assign s_376 = 1'b1;

  assign sel_2_1041 = (tmp_9 == 1'b0 ? sel_5808 :
              s_376);

  assign sel_5809 = 1'b0;

  assign sel_2_1042 = (tmp_11 == 1'b0 ? sel_2_1041 :
              sel_5809);

  assign sel_5810 = 1'b0;

  assign sel_2_1043 = (tmp_13 == 1'b0 ? sel_2_1042 :
              sel_5810);

  assign sel_5811 = 1'b0;

  assign sel_2_1044 = (tmp_15 == 1'b0 ? sel_2_1043 :
              sel_5811);

  assign sel_5812 = 1'b0;

  assign sel_2_1045 = (tmp_17 == 1'b0 ? sel_2_1044 :
              sel_5812);

  assign sel_2_1046 = (s_10 == 1'b0 ? sel_5807 :
              sel_2_1045);

  assign sel_2_1047 = (s_11 == 1'b0 ? sel_5806 :
              sel_2_1046);

  assign sel_5813 = 1'b0;

  assign sel_2_1048 = (s_12 == 1'b0 ? sel_2_1047 :
              sel_5813);

  assign sel_5814 = 1'b0;

  assign sel_5815 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1048, sel_5794, sel_5795, sel_5796, sel_5797, sel_5798,
       sel_5799, sel_5800, sel_5801, sel_5802, sel_5803, sel_5804, sel_5805,
       sel_5814, sel_5815) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6609_sel_2 = sel_5814;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6609_sel_2 = sel_2_1048;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6609_sel_2 = sel_5805;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6609_sel_2 = sel_5804;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6609_sel_2 = sel_5803;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6609_sel_2 = sel_5802;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6609_sel_2 = sel_5801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6609_sel_2 = sel_5800;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6609_sel_2 = sel_5799;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6609_sel_2 = sel_5798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6609_sel_2 = sel_5797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6609_sel_2 = sel_5796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6609_sel_2 = sel_5795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6609_sel_2 = sel_5794;
        end
      default :
        begin
          p6609_sel_2 = sel_5815;
        end
    endcase
    sel_2_1049 = p6609_sel_2;
  end

  always @* begin
    p6608cont_bits_31_cont_bits_31[4] = cont_bits_31_18[4];
    if (sel_2_1049) begin
      p6608cont_bits_31_cont_bits_31[4] = tmp_291;
    end
    cont_bits_31_19[0] = cont_bits_31_18[0];
    cont_bits_31_19[1] = cont_bits_31_18[1];
    cont_bits_31_19[2] = cont_bits_31_18[2];
    cont_bits_31_19[3] = cont_bits_31_18[3];
    cont_bits_31_19[4] = p6608cont_bits_31_cont_bits_31[4];
    cont_bits_31_19[5] = cont_bits_31_18[5];
    cont_bits_31_19[6] = cont_bits_31_18[6];
    cont_bits_31_19[7] = cont_bits_31_18[7];
    cont_bits_31_19[8] = cont_bits_31_18[8];
    cont_bits_31_19[9] = cont_bits_31_18[9];
    cont_bits_31_19[10] = cont_bits_31_18[10];
    cont_bits_31_19[11] = cont_bits_31_18[11];
  end

  assign sel_5816 = 32'sd0;

  assign sel_5817 = 32'sd0;

  assign sel_5818 = 32'sd0;

  assign sel_5819 = 32'sd0;

  assign sel_5820 = 32'sd0;

  assign sel_5821 = 32'sd0;

  assign sel_5822 = 32'sd0;

  assign sel_5823 = 32'sd0;

  assign sel_5824 = 32'sd0;

  assign sel_5825 = 32'sd0;

  assign sel_5826 = 32'sd0;

  assign sel_5827 = 32'sd0;

  assign sel_5828 = 32'sd0;

  assign sel_5829 = 32'sd0;

  assign sel_5830 = 32'sd0;

  assign s_377 = 32'sd5;

  assign sel_1_1071 = (tmp_9 == 1'b0 ? sel_5830 :
              s_377);

  assign sel_5831 = 32'sd0;

  assign sel_1_1072 = (tmp_11 == 1'b0 ? sel_1_1071 :
              sel_5831);

  assign sel_5832 = 32'sd0;

  assign sel_1_1073 = (tmp_13 == 1'b0 ? sel_1_1072 :
              sel_5832);

  assign sel_5833 = 32'sd0;

  assign sel_1_1074 = (tmp_15 == 1'b0 ? sel_1_1073 :
              sel_5833);

  assign sel_5834 = 32'sd0;

  assign sel_1_1075 = (tmp_17 == 1'b0 ? sel_1_1074 :
              sel_5834);

  assign sel_1_1076 = (s_10 == 1'b0 ? sel_5829 :
              sel_1_1075);

  assign sel_1_1077 = (s_11 == 1'b0 ? sel_5828 :
              sel_1_1076);

  assign sel_5835 = 32'sd0;

  assign sel_1_1078 = (s_12 == 1'b0 ? sel_1_1077 :
              sel_5835);

  assign sel_5836 = 32'sd0;

  assign sel_5837 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1078, sel_5816, sel_5817, sel_5818, sel_5819, sel_5820,
       sel_5821, sel_5822, sel_5823, sel_5824, sel_5825, sel_5826, sel_5827,
       sel_5836, sel_5837) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8265_sel_1 = sel_5836;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8265_sel_1 = sel_1_1078;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8265_sel_1 = sel_5827;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8265_sel_1 = sel_5826;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8265_sel_1 = sel_5825;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8265_sel_1 = sel_5824;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8265_sel_1 = sel_5823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8265_sel_1 = sel_5822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8265_sel_1 = sel_5821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8265_sel_1 = sel_5820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8265_sel_1 = sel_5819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8265_sel_1 = sel_5818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8265_sel_1 = sel_5817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8265_sel_1 = sel_5816;
        end
      default :
        begin
          p8265_sel_1 = sel_5837;
        end
    endcase
    sel_1_1079 = p8265_sel_1;
  end

  assign tmp_292 = functionOutput_22[sel_1_1079];

  assign sel_5838 = 1'b0;

  assign sel_5839 = 1'b0;

  assign sel_5840 = 1'b0;

  assign sel_5841 = 1'b0;

  assign sel_5842 = 1'b0;

  assign sel_5843 = 1'b0;

  assign sel_5844 = 1'b0;

  assign sel_5845 = 1'b0;

  assign sel_5846 = 1'b0;

  assign sel_5847 = 1'b0;

  assign sel_5848 = 1'b0;

  assign sel_5849 = 1'b0;

  assign sel_5850 = 1'b0;

  assign sel_5851 = 1'b0;

  assign sel_5852 = 1'b0;

  assign s_378 = 1'b1;

  assign sel_2_1050 = (tmp_9 == 1'b0 ? sel_5852 :
              s_378);

  assign sel_5853 = 1'b0;

  assign sel_2_1051 = (tmp_11 == 1'b0 ? sel_2_1050 :
              sel_5853);

  assign sel_5854 = 1'b0;

  assign sel_2_1052 = (tmp_13 == 1'b0 ? sel_2_1051 :
              sel_5854);

  assign sel_5855 = 1'b0;

  assign sel_2_1053 = (tmp_15 == 1'b0 ? sel_2_1052 :
              sel_5855);

  assign sel_5856 = 1'b0;

  assign sel_2_1054 = (tmp_17 == 1'b0 ? sel_2_1053 :
              sel_5856);

  assign sel_2_1055 = (s_10 == 1'b0 ? sel_5851 :
              sel_2_1054);

  assign sel_2_1056 = (s_11 == 1'b0 ? sel_5850 :
              sel_2_1055);

  assign sel_5857 = 1'b0;

  assign sel_2_1057 = (s_12 == 1'b0 ? sel_2_1056 :
              sel_5857);

  assign sel_5858 = 1'b0;

  assign sel_5859 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1057, sel_5838, sel_5839, sel_5840, sel_5841, sel_5842,
       sel_5843, sel_5844, sel_5845, sel_5846, sel_5847, sel_5848, sel_5849,
       sel_5858, sel_5859) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6081_sel_2 = sel_5858;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6081_sel_2 = sel_2_1057;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6081_sel_2 = sel_5849;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6081_sel_2 = sel_5848;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6081_sel_2 = sel_5847;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6081_sel_2 = sel_5846;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6081_sel_2 = sel_5845;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6081_sel_2 = sel_5844;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6081_sel_2 = sel_5843;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6081_sel_2 = sel_5842;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6081_sel_2 = sel_5841;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6081_sel_2 = sel_5840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6081_sel_2 = sel_5839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6081_sel_2 = sel_5838;
        end
      default :
        begin
          p6081_sel_2 = sel_5859;
        end
    endcase
    sel_2_1058 = p6081_sel_2;
  end

  always @* begin
    p6080cont_bits_31_cont_bits_31[5] = cont_bits_31_19[5];
    if (sel_2_1058) begin
      p6080cont_bits_31_cont_bits_31[5] = tmp_292;
    end
    cont_bits_31_20[0] = cont_bits_31_19[0];
    cont_bits_31_20[1] = cont_bits_31_19[1];
    cont_bits_31_20[2] = cont_bits_31_19[2];
    cont_bits_31_20[3] = cont_bits_31_19[3];
    cont_bits_31_20[4] = cont_bits_31_19[4];
    cont_bits_31_20[5] = p6080cont_bits_31_cont_bits_31[5];
    cont_bits_31_20[6] = cont_bits_31_19[6];
    cont_bits_31_20[7] = cont_bits_31_19[7];
    cont_bits_31_20[8] = cont_bits_31_19[8];
    cont_bits_31_20[9] = cont_bits_31_19[9];
    cont_bits_31_20[10] = cont_bits_31_19[10];
    cont_bits_31_20[11] = cont_bits_31_19[11];
  end

  assign sel_5860 = 32'sd0;

  assign sel_5861 = 32'sd0;

  assign sel_5862 = 32'sd0;

  assign sel_5863 = 32'sd0;

  assign sel_5864 = 32'sd0;

  assign sel_5865 = 32'sd0;

  assign sel_5866 = 32'sd0;

  assign sel_5867 = 32'sd0;

  assign sel_5868 = 32'sd0;

  assign sel_5869 = 32'sd0;

  assign sel_5870 = 32'sd0;

  assign sel_5871 = 32'sd0;

  assign sel_5872 = 32'sd0;

  assign sel_5873 = 32'sd0;

  assign sel_5874 = 32'sd0;

  assign s_379 = 32'sd6;

  assign sel_1_1080 = (tmp_9 == 1'b0 ? sel_5874 :
              s_379);

  assign sel_5875 = 32'sd0;

  assign sel_1_1081 = (tmp_11 == 1'b0 ? sel_1_1080 :
              sel_5875);

  assign sel_5876 = 32'sd0;

  assign sel_1_1082 = (tmp_13 == 1'b0 ? sel_1_1081 :
              sel_5876);

  assign sel_5877 = 32'sd0;

  assign sel_1_1083 = (tmp_15 == 1'b0 ? sel_1_1082 :
              sel_5877);

  assign sel_5878 = 32'sd0;

  assign sel_1_1084 = (tmp_17 == 1'b0 ? sel_1_1083 :
              sel_5878);

  assign sel_1_1085 = (s_10 == 1'b0 ? sel_5873 :
              sel_1_1084);

  assign sel_1_1086 = (s_11 == 1'b0 ? sel_5872 :
              sel_1_1085);

  assign sel_5879 = 32'sd0;

  assign sel_1_1087 = (s_12 == 1'b0 ? sel_1_1086 :
              sel_5879);

  assign sel_5880 = 32'sd0;

  assign sel_5881 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1087, sel_5860, sel_5861, sel_5862, sel_5863, sel_5864,
       sel_5865, sel_5866, sel_5867, sel_5868, sel_5869, sel_5870, sel_5871,
       sel_5880, sel_5881) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9676_sel_1 = sel_5880;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9676_sel_1 = sel_1_1087;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9676_sel_1 = sel_5871;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9676_sel_1 = sel_5870;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9676_sel_1 = sel_5869;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9676_sel_1 = sel_5868;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9676_sel_1 = sel_5867;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9676_sel_1 = sel_5866;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9676_sel_1 = sel_5865;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9676_sel_1 = sel_5864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9676_sel_1 = sel_5863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9676_sel_1 = sel_5862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9676_sel_1 = sel_5861;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9676_sel_1 = sel_5860;
        end
      default :
        begin
          p9676_sel_1 = sel_5881;
        end
    endcase
    sel_1_1088 = p9676_sel_1;
  end

  assign tmp_293 = functionOutput_22[sel_1_1088];

  assign sel_5882 = 1'b0;

  assign sel_5883 = 1'b0;

  assign sel_5884 = 1'b0;

  assign sel_5885 = 1'b0;

  assign sel_5886 = 1'b0;

  assign sel_5887 = 1'b0;

  assign sel_5888 = 1'b0;

  assign sel_5889 = 1'b0;

  assign sel_5890 = 1'b0;

  assign sel_5891 = 1'b0;

  assign sel_5892 = 1'b0;

  assign sel_5893 = 1'b0;

  assign sel_5894 = 1'b0;

  assign sel_5895 = 1'b0;

  assign sel_5896 = 1'b0;

  assign s_380 = 1'b1;

  assign sel_2_1059 = (tmp_9 == 1'b0 ? sel_5896 :
              s_380);

  assign sel_5897 = 1'b0;

  assign sel_2_1060 = (tmp_11 == 1'b0 ? sel_2_1059 :
              sel_5897);

  assign sel_5898 = 1'b0;

  assign sel_2_1061 = (tmp_13 == 1'b0 ? sel_2_1060 :
              sel_5898);

  assign sel_5899 = 1'b0;

  assign sel_2_1062 = (tmp_15 == 1'b0 ? sel_2_1061 :
              sel_5899);

  assign sel_5900 = 1'b0;

  assign sel_2_1063 = (tmp_17 == 1'b0 ? sel_2_1062 :
              sel_5900);

  assign sel_2_1064 = (s_10 == 1'b0 ? sel_5895 :
              sel_2_1063);

  assign sel_2_1065 = (s_11 == 1'b0 ? sel_5894 :
              sel_2_1064);

  assign sel_5901 = 1'b0;

  assign sel_2_1066 = (s_12 == 1'b0 ? sel_2_1065 :
              sel_5901);

  assign sel_5902 = 1'b0;

  assign sel_5903 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1066, sel_5882, sel_5883, sel_5884, sel_5885, sel_5886,
       sel_5887, sel_5888, sel_5889, sel_5890, sel_5891, sel_5892, sel_5893,
       sel_5902, sel_5903) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6003_sel_2 = sel_5902;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6003_sel_2 = sel_2_1066;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6003_sel_2 = sel_5893;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6003_sel_2 = sel_5892;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6003_sel_2 = sel_5891;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6003_sel_2 = sel_5890;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6003_sel_2 = sel_5889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6003_sel_2 = sel_5888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6003_sel_2 = sel_5887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6003_sel_2 = sel_5886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6003_sel_2 = sel_5885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6003_sel_2 = sel_5884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6003_sel_2 = sel_5883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6003_sel_2 = sel_5882;
        end
      default :
        begin
          p6003_sel_2 = sel_5903;
        end
    endcase
    sel_2_1067 = p6003_sel_2;
  end

  always @* begin
    p6002cont_bits_31_cont_bits_31[6] = cont_bits_31_20[6];
    if (sel_2_1067) begin
      p6002cont_bits_31_cont_bits_31[6] = tmp_293;
    end
    cont_bits_31_21[0] = cont_bits_31_20[0];
    cont_bits_31_21[1] = cont_bits_31_20[1];
    cont_bits_31_21[2] = cont_bits_31_20[2];
    cont_bits_31_21[3] = cont_bits_31_20[3];
    cont_bits_31_21[4] = cont_bits_31_20[4];
    cont_bits_31_21[5] = cont_bits_31_20[5];
    cont_bits_31_21[6] = p6002cont_bits_31_cont_bits_31[6];
    cont_bits_31_21[7] = cont_bits_31_20[7];
    cont_bits_31_21[8] = cont_bits_31_20[8];
    cont_bits_31_21[9] = cont_bits_31_20[9];
    cont_bits_31_21[10] = cont_bits_31_20[10];
    cont_bits_31_21[11] = cont_bits_31_20[11];
  end

  assign sel_5904 = 32'sd0;

  assign sel_5905 = 32'sd0;

  assign sel_5906 = 32'sd0;

  assign sel_5907 = 32'sd0;

  assign sel_5908 = 32'sd0;

  assign sel_5909 = 32'sd0;

  assign sel_5910 = 32'sd0;

  assign sel_5911 = 32'sd0;

  assign sel_5912 = 32'sd0;

  assign sel_5913 = 32'sd0;

  assign sel_5914 = 32'sd0;

  assign sel_5915 = 32'sd0;

  assign sel_5916 = 32'sd0;

  assign sel_5917 = 32'sd0;

  assign sel_5918 = 32'sd0;

  assign s_381 = 32'sd7;

  assign sel_1_1089 = (tmp_9 == 1'b0 ? sel_5918 :
              s_381);

  assign sel_5919 = 32'sd0;

  assign sel_1_1090 = (tmp_11 == 1'b0 ? sel_1_1089 :
              sel_5919);

  assign sel_5920 = 32'sd0;

  assign sel_1_1091 = (tmp_13 == 1'b0 ? sel_1_1090 :
              sel_5920);

  assign sel_5921 = 32'sd0;

  assign sel_1_1092 = (tmp_15 == 1'b0 ? sel_1_1091 :
              sel_5921);

  assign sel_5922 = 32'sd0;

  assign sel_1_1093 = (tmp_17 == 1'b0 ? sel_1_1092 :
              sel_5922);

  assign sel_1_1094 = (s_10 == 1'b0 ? sel_5917 :
              sel_1_1093);

  assign sel_1_1095 = (s_11 == 1'b0 ? sel_5916 :
              sel_1_1094);

  assign sel_5923 = 32'sd0;

  assign sel_1_1096 = (s_12 == 1'b0 ? sel_1_1095 :
              sel_5923);

  assign sel_5924 = 32'sd0;

  assign sel_5925 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1096, sel_5904, sel_5905, sel_5906, sel_5907, sel_5908,
       sel_5909, sel_5910, sel_5911, sel_5912, sel_5913, sel_5914, sel_5915,
       sel_5924, sel_5925) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9268_sel_1 = sel_5924;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9268_sel_1 = sel_1_1096;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9268_sel_1 = sel_5915;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9268_sel_1 = sel_5914;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9268_sel_1 = sel_5913;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9268_sel_1 = sel_5912;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9268_sel_1 = sel_5911;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9268_sel_1 = sel_5910;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9268_sel_1 = sel_5909;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9268_sel_1 = sel_5908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9268_sel_1 = sel_5907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9268_sel_1 = sel_5906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9268_sel_1 = sel_5905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9268_sel_1 = sel_5904;
        end
      default :
        begin
          p9268_sel_1 = sel_5925;
        end
    endcase
    sel_1_1097 = p9268_sel_1;
  end

  assign tmp_294 = functionOutput_22[sel_1_1097];

  assign sel_5926 = 1'b0;

  assign sel_5927 = 1'b0;

  assign sel_5928 = 1'b0;

  assign sel_5929 = 1'b0;

  assign sel_5930 = 1'b0;

  assign sel_5931 = 1'b0;

  assign sel_5932 = 1'b0;

  assign sel_5933 = 1'b0;

  assign sel_5934 = 1'b0;

  assign sel_5935 = 1'b0;

  assign sel_5936 = 1'b0;

  assign sel_5937 = 1'b0;

  assign sel_5938 = 1'b0;

  assign sel_5939 = 1'b0;

  assign sel_5940 = 1'b0;

  assign s_382 = 1'b1;

  assign sel_2_1068 = (tmp_9 == 1'b0 ? sel_5940 :
              s_382);

  assign sel_5941 = 1'b0;

  assign sel_2_1069 = (tmp_11 == 1'b0 ? sel_2_1068 :
              sel_5941);

  assign sel_5942 = 1'b0;

  assign sel_2_1070 = (tmp_13 == 1'b0 ? sel_2_1069 :
              sel_5942);

  assign sel_5943 = 1'b0;

  assign sel_2_1071 = (tmp_15 == 1'b0 ? sel_2_1070 :
              sel_5943);

  assign sel_5944 = 1'b0;

  assign sel_2_1072 = (tmp_17 == 1'b0 ? sel_2_1071 :
              sel_5944);

  assign sel_2_1073 = (s_10 == 1'b0 ? sel_5939 :
              sel_2_1072);

  assign sel_2_1074 = (s_11 == 1'b0 ? sel_5938 :
              sel_2_1073);

  assign sel_5945 = 1'b0;

  assign sel_2_1075 = (s_12 == 1'b0 ? sel_2_1074 :
              sel_5945);

  assign sel_5946 = 1'b0;

  assign sel_5947 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1075, sel_5926, sel_5927, sel_5928, sel_5929, sel_5930,
       sel_5931, sel_5932, sel_5933, sel_5934, sel_5935, sel_5936, sel_5937,
       sel_5946, sel_5947) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5475_sel_2 = sel_5946;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5475_sel_2 = sel_2_1075;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5475_sel_2 = sel_5937;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5475_sel_2 = sel_5936;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5475_sel_2 = sel_5935;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5475_sel_2 = sel_5934;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5475_sel_2 = sel_5933;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5475_sel_2 = sel_5932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5475_sel_2 = sel_5931;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5475_sel_2 = sel_5930;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5475_sel_2 = sel_5929;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5475_sel_2 = sel_5928;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5475_sel_2 = sel_5927;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5475_sel_2 = sel_5926;
        end
      default :
        begin
          p5475_sel_2 = sel_5947;
        end
    endcase
    sel_2_1076 = p5475_sel_2;
  end

  always @* begin
    p5474cont_bits_31_cont_bits_31[7] = cont_bits_31_21[7];
    if (sel_2_1076) begin
      p5474cont_bits_31_cont_bits_31[7] = tmp_294;
    end
    cont_bits_31_22[0] = cont_bits_31_21[0];
    cont_bits_31_22[1] = cont_bits_31_21[1];
    cont_bits_31_22[2] = cont_bits_31_21[2];
    cont_bits_31_22[3] = cont_bits_31_21[3];
    cont_bits_31_22[4] = cont_bits_31_21[4];
    cont_bits_31_22[5] = cont_bits_31_21[5];
    cont_bits_31_22[6] = cont_bits_31_21[6];
    cont_bits_31_22[7] = p5474cont_bits_31_cont_bits_31[7];
    cont_bits_31_22[8] = cont_bits_31_21[8];
    cont_bits_31_22[9] = cont_bits_31_21[9];
    cont_bits_31_22[10] = cont_bits_31_21[10];
    cont_bits_31_22[11] = cont_bits_31_21[11];
  end

  assign sel_5948 = 32'sd0;

  assign sel_5949 = 32'sd0;

  assign sel_5950 = 32'sd0;

  assign sel_5951 = 32'sd0;

  assign sel_5952 = 32'sd0;

  assign sel_5953 = 32'sd0;

  assign sel_5954 = 32'sd0;

  assign sel_5955 = 32'sd0;

  assign sel_5956 = 32'sd0;

  assign sel_5957 = 32'sd0;

  assign sel_5958 = 32'sd0;

  assign sel_5959 = 32'sd0;

  assign sel_5960 = 32'sd0;

  assign sel_5961 = 32'sd0;

  assign sel_5962 = 32'sd0;

  assign s_383 = 32'sd8;

  assign sel_1_1098 = (tmp_9 == 1'b0 ? sel_5962 :
              s_383);

  assign sel_5963 = 32'sd0;

  assign sel_1_1099 = (tmp_11 == 1'b0 ? sel_1_1098 :
              sel_5963);

  assign sel_5964 = 32'sd0;

  assign sel_1_1100 = (tmp_13 == 1'b0 ? sel_1_1099 :
              sel_5964);

  assign sel_5965 = 32'sd0;

  assign sel_1_1101 = (tmp_15 == 1'b0 ? sel_1_1100 :
              sel_5965);

  assign sel_5966 = 32'sd0;

  assign sel_1_1102 = (tmp_17 == 1'b0 ? sel_1_1101 :
              sel_5966);

  assign sel_1_1103 = (s_10 == 1'b0 ? sel_5961 :
              sel_1_1102);

  assign sel_1_1104 = (s_11 == 1'b0 ? sel_5960 :
              sel_1_1103);

  assign sel_5967 = 32'sd0;

  assign sel_1_1105 = (s_12 == 1'b0 ? sel_1_1104 :
              sel_5967);

  assign sel_5968 = 32'sd0;

  assign sel_5969 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1105, sel_5948, sel_5949, sel_5950, sel_5951, sel_5952,
       sel_5953, sel_5954, sel_5955, sel_5956, sel_5957, sel_5958, sel_5959,
       sel_5968, sel_5969) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8911_sel_1 = sel_5968;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8911_sel_1 = sel_1_1105;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8911_sel_1 = sel_5959;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8911_sel_1 = sel_5958;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8911_sel_1 = sel_5957;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8911_sel_1 = sel_5956;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8911_sel_1 = sel_5955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8911_sel_1 = sel_5954;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8911_sel_1 = sel_5953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8911_sel_1 = sel_5952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8911_sel_1 = sel_5951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8911_sel_1 = sel_5950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8911_sel_1 = sel_5949;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8911_sel_1 = sel_5948;
        end
      default :
        begin
          p8911_sel_1 = sel_5969;
        end
    endcase
    sel_1_1106 = p8911_sel_1;
  end

  assign tmp_295 = functionOutput_22[sel_1_1106];

  assign sel_5970 = 1'b0;

  assign sel_5971 = 1'b0;

  assign sel_5972 = 1'b0;

  assign sel_5973 = 1'b0;

  assign sel_5974 = 1'b0;

  assign sel_5975 = 1'b0;

  assign sel_5976 = 1'b0;

  assign sel_5977 = 1'b0;

  assign sel_5978 = 1'b0;

  assign sel_5979 = 1'b0;

  assign sel_5980 = 1'b0;

  assign sel_5981 = 1'b0;

  assign sel_5982 = 1'b0;

  assign sel_5983 = 1'b0;

  assign sel_5984 = 1'b0;

  assign s_384 = 1'b1;

  assign sel_2_1077 = (tmp_9 == 1'b0 ? sel_5984 :
              s_384);

  assign sel_5985 = 1'b0;

  assign sel_2_1078 = (tmp_11 == 1'b0 ? sel_2_1077 :
              sel_5985);

  assign sel_5986 = 1'b0;

  assign sel_2_1079 = (tmp_13 == 1'b0 ? sel_2_1078 :
              sel_5986);

  assign sel_5987 = 1'b0;

  assign sel_2_1080 = (tmp_15 == 1'b0 ? sel_2_1079 :
              sel_5987);

  assign sel_5988 = 1'b0;

  assign sel_2_1081 = (tmp_17 == 1'b0 ? sel_2_1080 :
              sel_5988);

  assign sel_2_1082 = (s_10 == 1'b0 ? sel_5983 :
              sel_2_1081);

  assign sel_2_1083 = (s_11 == 1'b0 ? sel_5982 :
              sel_2_1082);

  assign sel_5989 = 1'b0;

  assign sel_2_1084 = (s_12 == 1'b0 ? sel_2_1083 :
              sel_5989);

  assign sel_5990 = 1'b0;

  assign sel_5991 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1084, sel_5970, sel_5971, sel_5972, sel_5973, sel_5974,
       sel_5975, sel_5976, sel_5977, sel_5978, sel_5979, sel_5980, sel_5981,
       sel_5990, sel_5991) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5397_sel_2 = sel_5990;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5397_sel_2 = sel_2_1084;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5397_sel_2 = sel_5981;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5397_sel_2 = sel_5980;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5397_sel_2 = sel_5979;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5397_sel_2 = sel_5978;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5397_sel_2 = sel_5977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5397_sel_2 = sel_5976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5397_sel_2 = sel_5975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5397_sel_2 = sel_5974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5397_sel_2 = sel_5973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5397_sel_2 = sel_5972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5397_sel_2 = sel_5971;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5397_sel_2 = sel_5970;
        end
      default :
        begin
          p5397_sel_2 = sel_5991;
        end
    endcase
    sel_2_1085 = p5397_sel_2;
  end

  always @* begin
    p5396cont_bits_31_cont_bits_31[8] = cont_bits_31_22[8];
    if (sel_2_1085) begin
      p5396cont_bits_31_cont_bits_31[8] = tmp_295;
    end
    cont_bits_31_23[0] = cont_bits_31_22[0];
    cont_bits_31_23[1] = cont_bits_31_22[1];
    cont_bits_31_23[2] = cont_bits_31_22[2];
    cont_bits_31_23[3] = cont_bits_31_22[3];
    cont_bits_31_23[4] = cont_bits_31_22[4];
    cont_bits_31_23[5] = cont_bits_31_22[5];
    cont_bits_31_23[6] = cont_bits_31_22[6];
    cont_bits_31_23[7] = cont_bits_31_22[7];
    cont_bits_31_23[8] = p5396cont_bits_31_cont_bits_31[8];
    cont_bits_31_23[9] = cont_bits_31_22[9];
    cont_bits_31_23[10] = cont_bits_31_22[10];
    cont_bits_31_23[11] = cont_bits_31_22[11];
  end

  assign sel_5992 = 32'sd0;

  assign sel_5993 = 32'sd0;

  assign sel_5994 = 32'sd0;

  assign sel_5995 = 32'sd0;

  assign sel_5996 = 32'sd0;

  assign sel_5997 = 32'sd0;

  assign sel_5998 = 32'sd0;

  assign sel_5999 = 32'sd0;

  assign sel_6000 = 32'sd0;

  assign sel_6001 = 32'sd0;

  assign sel_6002 = 32'sd0;

  assign sel_6003 = 32'sd0;

  assign sel_6004 = 32'sd0;

  assign sel_6005 = 32'sd0;

  assign sel_6006 = 32'sd0;

  assign s_385 = 32'sd9;

  assign sel_1_1107 = (tmp_9 == 1'b0 ? sel_6006 :
              s_385);

  assign sel_6007 = 32'sd0;

  assign sel_1_1108 = (tmp_11 == 1'b0 ? sel_1_1107 :
              sel_6007);

  assign sel_6008 = 32'sd0;

  assign sel_1_1109 = (tmp_13 == 1'b0 ? sel_1_1108 :
              sel_6008);

  assign sel_6009 = 32'sd0;

  assign sel_1_1110 = (tmp_15 == 1'b0 ? sel_1_1109 :
              sel_6009);

  assign sel_6010 = 32'sd0;

  assign sel_1_1111 = (tmp_17 == 1'b0 ? sel_1_1110 :
              sel_6010);

  assign sel_1_1112 = (s_10 == 1'b0 ? sel_6005 :
              sel_1_1111);

  assign sel_1_1113 = (s_11 == 1'b0 ? sel_6004 :
              sel_1_1112);

  assign sel_6011 = 32'sd0;

  assign sel_1_1114 = (s_12 == 1'b0 ? sel_1_1113 :
              sel_6011);

  assign sel_6012 = 32'sd0;

  assign sel_6013 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1114, sel_5992, sel_5993, sel_5994, sel_5995, sel_5996,
       sel_5997, sel_5998, sel_5999, sel_6000, sel_6001, sel_6002, sel_6003,
       sel_6012, sel_6013) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8996_sel_1 = sel_6012;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8996_sel_1 = sel_1_1114;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8996_sel_1 = sel_6003;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8996_sel_1 = sel_6002;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8996_sel_1 = sel_6001;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8996_sel_1 = sel_6000;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8996_sel_1 = sel_5999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8996_sel_1 = sel_5998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8996_sel_1 = sel_5997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8996_sel_1 = sel_5996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8996_sel_1 = sel_5995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8996_sel_1 = sel_5994;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8996_sel_1 = sel_5993;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8996_sel_1 = sel_5992;
        end
      default :
        begin
          p8996_sel_1 = sel_6013;
        end
    endcase
    sel_1_1115 = p8996_sel_1;
  end

  assign tmp_296 = functionOutput_22[sel_1_1115];

  assign sel_6014 = 1'b0;

  assign sel_6015 = 1'b0;

  assign sel_6016 = 1'b0;

  assign sel_6017 = 1'b0;

  assign sel_6018 = 1'b0;

  assign sel_6019 = 1'b0;

  assign sel_6020 = 1'b0;

  assign sel_6021 = 1'b0;

  assign sel_6022 = 1'b0;

  assign sel_6023 = 1'b0;

  assign sel_6024 = 1'b0;

  assign sel_6025 = 1'b0;

  assign sel_6026 = 1'b0;

  assign sel_6027 = 1'b0;

  assign sel_6028 = 1'b0;

  assign s_386 = 1'b1;

  assign sel_2_1086 = (tmp_9 == 1'b0 ? sel_6028 :
              s_386);

  assign sel_6029 = 1'b0;

  assign sel_2_1087 = (tmp_11 == 1'b0 ? sel_2_1086 :
              sel_6029);

  assign sel_6030 = 1'b0;

  assign sel_2_1088 = (tmp_13 == 1'b0 ? sel_2_1087 :
              sel_6030);

  assign sel_6031 = 1'b0;

  assign sel_2_1089 = (tmp_15 == 1'b0 ? sel_2_1088 :
              sel_6031);

  assign sel_6032 = 1'b0;

  assign sel_2_1090 = (tmp_17 == 1'b0 ? sel_2_1089 :
              sel_6032);

  assign sel_2_1091 = (s_10 == 1'b0 ? sel_6027 :
              sel_2_1090);

  assign sel_2_1092 = (s_11 == 1'b0 ? sel_6026 :
              sel_2_1091);

  assign sel_6033 = 1'b0;

  assign sel_2_1093 = (s_12 == 1'b0 ? sel_2_1092 :
              sel_6033);

  assign sel_6034 = 1'b0;

  assign sel_6035 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1093, sel_6014, sel_6015, sel_6016, sel_6017, sel_6018,
       sel_6019, sel_6020, sel_6021, sel_6022, sel_6023, sel_6024, sel_6025,
       sel_6034, sel_6035) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4869_sel_2 = sel_6034;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4869_sel_2 = sel_2_1093;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4869_sel_2 = sel_6025;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4869_sel_2 = sel_6024;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4869_sel_2 = sel_6023;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4869_sel_2 = sel_6022;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4869_sel_2 = sel_6021;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4869_sel_2 = sel_6020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4869_sel_2 = sel_6019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4869_sel_2 = sel_6018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4869_sel_2 = sel_6017;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4869_sel_2 = sel_6016;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4869_sel_2 = sel_6015;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4869_sel_2 = sel_6014;
        end
      default :
        begin
          p4869_sel_2 = sel_6035;
        end
    endcase
    sel_2_1094 = p4869_sel_2;
  end

  always @* begin
    p4868cont_bits_31_cont_bits_31[9] = cont_bits_31_23[9];
    if (sel_2_1094) begin
      p4868cont_bits_31_cont_bits_31[9] = tmp_296;
    end
    cont_bits_31_24[0] = cont_bits_31_23[0];
    cont_bits_31_24[1] = cont_bits_31_23[1];
    cont_bits_31_24[2] = cont_bits_31_23[2];
    cont_bits_31_24[3] = cont_bits_31_23[3];
    cont_bits_31_24[4] = cont_bits_31_23[4];
    cont_bits_31_24[5] = cont_bits_31_23[5];
    cont_bits_31_24[6] = cont_bits_31_23[6];
    cont_bits_31_24[7] = cont_bits_31_23[7];
    cont_bits_31_24[8] = cont_bits_31_23[8];
    cont_bits_31_24[9] = p4868cont_bits_31_cont_bits_31[9];
    cont_bits_31_24[10] = cont_bits_31_23[10];
    cont_bits_31_24[11] = cont_bits_31_23[11];
  end

  assign sel_6036 = 32'sd0;

  assign sel_6037 = 32'sd0;

  assign sel_6038 = 32'sd0;

  assign sel_6039 = 32'sd0;

  assign sel_6040 = 32'sd0;

  assign sel_6041 = 32'sd0;

  assign sel_6042 = 32'sd0;

  assign sel_6043 = 32'sd0;

  assign sel_6044 = 32'sd0;

  assign sel_6045 = 32'sd0;

  assign sel_6046 = 32'sd0;

  assign sel_6047 = 32'sd0;

  assign sel_6048 = 32'sd0;

  assign sel_6049 = 32'sd0;

  assign sel_6050 = 32'sd0;

  assign s_387 = 32'sd10;

  assign sel_1_1116 = (tmp_9 == 1'b0 ? sel_6050 :
              s_387);

  assign sel_6051 = 32'sd0;

  assign sel_1_1117 = (tmp_11 == 1'b0 ? sel_1_1116 :
              sel_6051);

  assign sel_6052 = 32'sd0;

  assign sel_1_1118 = (tmp_13 == 1'b0 ? sel_1_1117 :
              sel_6052);

  assign sel_6053 = 32'sd0;

  assign sel_1_1119 = (tmp_15 == 1'b0 ? sel_1_1118 :
              sel_6053);

  assign sel_6054 = 32'sd0;

  assign sel_1_1120 = (tmp_17 == 1'b0 ? sel_1_1119 :
              sel_6054);

  assign sel_1_1121 = (s_10 == 1'b0 ? sel_6049 :
              sel_1_1120);

  assign sel_1_1122 = (s_11 == 1'b0 ? sel_6048 :
              sel_1_1121);

  assign sel_6055 = 32'sd0;

  assign sel_1_1123 = (s_12 == 1'b0 ? sel_1_1122 :
              sel_6055);

  assign sel_6056 = 32'sd0;

  assign sel_6057 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1123, sel_6036, sel_6037, sel_6038, sel_6039, sel_6040,
       sel_6041, sel_6042, sel_6043, sel_6044, sel_6045, sel_6046, sel_6047,
       sel_6056, sel_6057) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8622_sel_1 = sel_6056;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8622_sel_1 = sel_1_1123;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8622_sel_1 = sel_6047;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8622_sel_1 = sel_6046;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8622_sel_1 = sel_6045;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8622_sel_1 = sel_6044;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8622_sel_1 = sel_6043;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8622_sel_1 = sel_6042;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8622_sel_1 = sel_6041;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8622_sel_1 = sel_6040;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8622_sel_1 = sel_6039;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8622_sel_1 = sel_6038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8622_sel_1 = sel_6037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8622_sel_1 = sel_6036;
        end
      default :
        begin
          p8622_sel_1 = sel_6057;
        end
    endcase
    sel_1_1124 = p8622_sel_1;
  end

  assign tmp_297 = functionOutput_22[sel_1_1124];

  assign sel_6058 = 1'b0;

  assign sel_6059 = 1'b0;

  assign sel_6060 = 1'b0;

  assign sel_6061 = 1'b0;

  assign sel_6062 = 1'b0;

  assign sel_6063 = 1'b0;

  assign sel_6064 = 1'b0;

  assign sel_6065 = 1'b0;

  assign sel_6066 = 1'b0;

  assign sel_6067 = 1'b0;

  assign sel_6068 = 1'b0;

  assign sel_6069 = 1'b0;

  assign sel_6070 = 1'b0;

  assign sel_6071 = 1'b0;

  assign sel_6072 = 1'b0;

  assign s_388 = 1'b1;

  assign sel_2_1095 = (tmp_9 == 1'b0 ? sel_6072 :
              s_388);

  assign sel_6073 = 1'b0;

  assign sel_2_1096 = (tmp_11 == 1'b0 ? sel_2_1095 :
              sel_6073);

  assign sel_6074 = 1'b0;

  assign sel_2_1097 = (tmp_13 == 1'b0 ? sel_2_1096 :
              sel_6074);

  assign sel_6075 = 1'b0;

  assign sel_2_1098 = (tmp_15 == 1'b0 ? sel_2_1097 :
              sel_6075);

  assign sel_6076 = 1'b0;

  assign sel_2_1099 = (tmp_17 == 1'b0 ? sel_2_1098 :
              sel_6076);

  assign sel_2_1100 = (s_10 == 1'b0 ? sel_6071 :
              sel_2_1099);

  assign sel_2_1101 = (s_11 == 1'b0 ? sel_6070 :
              sel_2_1100);

  assign sel_6077 = 1'b0;

  assign sel_2_1102 = (s_12 == 1'b0 ? sel_2_1101 :
              sel_6077);

  assign sel_6078 = 1'b0;

  assign sel_6079 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1102, sel_6058, sel_6059, sel_6060, sel_6061, sel_6062,
       sel_6063, sel_6064, sel_6065, sel_6066, sel_6067, sel_6068, sel_6069,
       sel_6078, sel_6079) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4791_sel_2 = sel_6078;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4791_sel_2 = sel_2_1102;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4791_sel_2 = sel_6069;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4791_sel_2 = sel_6068;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4791_sel_2 = sel_6067;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4791_sel_2 = sel_6066;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4791_sel_2 = sel_6065;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4791_sel_2 = sel_6064;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4791_sel_2 = sel_6063;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4791_sel_2 = sel_6062;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4791_sel_2 = sel_6061;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4791_sel_2 = sel_6060;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4791_sel_2 = sel_6059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4791_sel_2 = sel_6058;
        end
      default :
        begin
          p4791_sel_2 = sel_6079;
        end
    endcase
    sel_2_1103 = p4791_sel_2;
  end

  always @* begin
    p4790cont_bits_31_cont_bits_31[10] = cont_bits_31_24[10];
    if (sel_2_1103) begin
      p4790cont_bits_31_cont_bits_31[10] = tmp_297;
    end
    cont_bits_31_25[0] = cont_bits_31_24[0];
    cont_bits_31_25[1] = cont_bits_31_24[1];
    cont_bits_31_25[2] = cont_bits_31_24[2];
    cont_bits_31_25[3] = cont_bits_31_24[3];
    cont_bits_31_25[4] = cont_bits_31_24[4];
    cont_bits_31_25[5] = cont_bits_31_24[5];
    cont_bits_31_25[6] = cont_bits_31_24[6];
    cont_bits_31_25[7] = cont_bits_31_24[7];
    cont_bits_31_25[8] = cont_bits_31_24[8];
    cont_bits_31_25[9] = cont_bits_31_24[9];
    cont_bits_31_25[10] = p4790cont_bits_31_cont_bits_31[10];
    cont_bits_31_25[11] = cont_bits_31_24[11];
  end

  assign sel_6080 = 32'sd0;

  assign sel_6081 = 32'sd0;

  assign sel_6082 = 32'sd0;

  assign sel_6083 = 32'sd0;

  assign sel_6084 = 32'sd0;

  assign sel_6085 = 32'sd0;

  assign sel_6086 = 32'sd0;

  assign sel_6087 = 32'sd0;

  assign sel_6088 = 32'sd0;

  assign sel_6089 = 32'sd0;

  assign sel_6090 = 32'sd0;

  assign sel_6091 = 32'sd0;

  assign sel_6092 = 32'sd0;

  assign sel_6093 = 32'sd0;

  assign sel_6094 = 32'sd0;

  assign s_389 = 32'sd11;

  assign sel_1_1125 = (tmp_9 == 1'b0 ? sel_6094 :
              s_389);

  assign sel_6095 = 32'sd0;

  assign sel_1_1126 = (tmp_11 == 1'b0 ? sel_1_1125 :
              sel_6095);

  assign sel_6096 = 32'sd0;

  assign sel_1_1127 = (tmp_13 == 1'b0 ? sel_1_1126 :
              sel_6096);

  assign sel_6097 = 32'sd0;

  assign sel_1_1128 = (tmp_15 == 1'b0 ? sel_1_1127 :
              sel_6097);

  assign sel_6098 = 32'sd0;

  assign sel_1_1129 = (tmp_17 == 1'b0 ? sel_1_1128 :
              sel_6098);

  assign sel_1_1130 = (s_10 == 1'b0 ? sel_6093 :
              sel_1_1129);

  assign sel_1_1131 = (s_11 == 1'b0 ? sel_6092 :
              sel_1_1130);

  assign sel_6099 = 32'sd0;

  assign sel_1_1132 = (s_12 == 1'b0 ? sel_1_1131 :
              sel_6099);

  assign sel_6100 = 32'sd0;

  assign sel_6101 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1132, sel_6080, sel_6081, sel_6082, sel_6083, sel_6084,
       sel_6085, sel_6086, sel_6087, sel_6088, sel_6089, sel_6090, sel_6091,
       sel_6100, sel_6101) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8928_sel_1 = sel_6100;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8928_sel_1 = sel_1_1132;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8928_sel_1 = sel_6091;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8928_sel_1 = sel_6090;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8928_sel_1 = sel_6089;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8928_sel_1 = sel_6088;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8928_sel_1 = sel_6087;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8928_sel_1 = sel_6086;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8928_sel_1 = sel_6085;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8928_sel_1 = sel_6084;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8928_sel_1 = sel_6083;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8928_sel_1 = sel_6082;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8928_sel_1 = sel_6081;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8928_sel_1 = sel_6080;
        end
      default :
        begin
          p8928_sel_1 = sel_6101;
        end
    endcase
    sel_1_1133 = p8928_sel_1;
  end

  assign tmp_298 = functionOutput_22[sel_1_1133];

  assign sel_6102 = 1'b0;

  assign sel_6103 = 1'b0;

  assign sel_6104 = 1'b0;

  assign sel_6105 = 1'b0;

  assign sel_6106 = 1'b0;

  assign sel_6107 = 1'b0;

  assign sel_6108 = 1'b0;

  assign sel_6109 = 1'b0;

  assign sel_6110 = 1'b0;

  assign sel_6111 = 1'b0;

  assign sel_6112 = 1'b0;

  assign sel_6113 = 1'b0;

  assign sel_6114 = 1'b0;

  assign sel_6115 = 1'b0;

  assign sel_6116 = 1'b0;

  assign s_390 = 1'b1;

  assign sel_2_1104 = (tmp_9 == 1'b0 ? sel_6116 :
              s_390);

  assign sel_6117 = 1'b0;

  assign sel_2_1105 = (tmp_11 == 1'b0 ? sel_2_1104 :
              sel_6117);

  assign sel_6118 = 1'b0;

  assign sel_2_1106 = (tmp_13 == 1'b0 ? sel_2_1105 :
              sel_6118);

  assign sel_6119 = 1'b0;

  assign sel_2_1107 = (tmp_15 == 1'b0 ? sel_2_1106 :
              sel_6119);

  assign sel_6120 = 1'b0;

  assign sel_2_1108 = (tmp_17 == 1'b0 ? sel_2_1107 :
              sel_6120);

  assign sel_2_1109 = (s_10 == 1'b0 ? sel_6115 :
              sel_2_1108);

  assign sel_2_1110 = (s_11 == 1'b0 ? sel_6114 :
              sel_2_1109);

  assign sel_6121 = 1'b0;

  assign sel_2_1111 = (s_12 == 1'b0 ? sel_2_1110 :
              sel_6121);

  assign sel_6122 = 1'b0;

  assign sel_6123 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1111, sel_6102, sel_6103, sel_6104, sel_6105, sel_6106,
       sel_6107, sel_6108, sel_6109, sel_6110, sel_6111, sel_6112, sel_6113,
       sel_6122, sel_6123) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4263_sel_2 = sel_6122;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4263_sel_2 = sel_2_1111;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4263_sel_2 = sel_6113;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4263_sel_2 = sel_6112;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4263_sel_2 = sel_6111;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4263_sel_2 = sel_6110;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4263_sel_2 = sel_6109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4263_sel_2 = sel_6108;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4263_sel_2 = sel_6107;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4263_sel_2 = sel_6106;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4263_sel_2 = sel_6105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4263_sel_2 = sel_6104;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4263_sel_2 = sel_6103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4263_sel_2 = sel_6102;
        end
      default :
        begin
          p4263_sel_2 = sel_6123;
        end
    endcase
    sel_2_1112 = p4263_sel_2;
  end

  always @* begin
    p4262cont_bits_31_cont_bits_31[11] = cont_bits_31_25[11];
    if (sel_2_1112) begin
      p4262cont_bits_31_cont_bits_31[11] = tmp_298;
    end
    cont_bits_31_26[0] = cont_bits_31_25[0];
    cont_bits_31_26[1] = cont_bits_31_25[1];
    cont_bits_31_26[2] = cont_bits_31_25[2];
    cont_bits_31_26[3] = cont_bits_31_25[3];
    cont_bits_31_26[4] = cont_bits_31_25[4];
    cont_bits_31_26[5] = cont_bits_31_25[5];
    cont_bits_31_26[6] = cont_bits_31_25[6];
    cont_bits_31_26[7] = cont_bits_31_25[7];
    cont_bits_31_26[8] = cont_bits_31_25[8];
    cont_bits_31_26[9] = cont_bits_31_25[9];
    cont_bits_31_26[10] = cont_bits_31_25[10];
    cont_bits_31_26[11] = p4262cont_bits_31_cont_bits_31[11];
  end

  assign sel_6124 = 32'sd0;

  assign sel_6125 = 32'sd0;

  assign sel_6126 = 32'sd0;

  assign sel_6127 = 32'sd0;

  assign sel_6128 = 32'sd0;

  assign sel_6129 = 32'sd0;

  assign sel_6130 = 32'sd0;

  assign sel_6131 = 32'sd0;

  assign sel_6132 = 32'sd0;

  assign sel_6133 = 32'sd0;

  assign sel_6134 = 32'sd0;

  assign sel_6135 = 32'sd0;

  assign sel_6136 = 32'sd0;

  assign sel_6137 = 32'sd0;

  assign sel_6138 = 32'sd0;

  assign s_391 = 32'sd0;

  assign sel_1_1134 = (tmp_9 == 1'b0 ? sel_6138 :
              s_391);

  assign sel_6139 = 32'sd0;

  assign sel_1_1135 = (tmp_11 == 1'b0 ? sel_1_1134 :
              sel_6139);

  assign sel_6140 = 32'sd0;

  assign sel_1_1136 = (tmp_13 == 1'b0 ? sel_1_1135 :
              sel_6140);

  assign sel_6141 = 32'sd0;

  assign sel_1_1137 = (tmp_15 == 1'b0 ? sel_1_1136 :
              sel_6141);

  assign sel_6142 = 32'sd0;

  assign sel_1_1138 = (tmp_17 == 1'b0 ? sel_1_1137 :
              sel_6142);

  assign sel_1_1139 = (s_10 == 1'b0 ? sel_6137 :
              sel_1_1138);

  assign sel_1_1140 = (s_11 == 1'b0 ? sel_6136 :
              sel_1_1139);

  assign sel_6143 = 32'sd0;

  assign sel_1_1141 = (s_12 == 1'b0 ? sel_1_1140 :
              sel_6143);

  assign sel_6144 = 32'sd0;

  assign sel_6145 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1141, sel_6124, sel_6125, sel_6126, sel_6127, sel_6128,
       sel_6129, sel_6130, sel_6131, sel_6132, sel_6133, sel_6134, sel_6135,
       sel_6144, sel_6145) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4113_sel_1 = sel_6144;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4113_sel_1 = sel_1_1141;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4113_sel_1 = sel_6135;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4113_sel_1 = sel_6134;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4113_sel_1 = sel_6133;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4113_sel_1 = sel_6132;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4113_sel_1 = sel_6131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4113_sel_1 = sel_6130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4113_sel_1 = sel_6129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4113_sel_1 = sel_6128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4113_sel_1 = sel_6127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4113_sel_1 = sel_6126;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4113_sel_1 = sel_6125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4113_sel_1 = sel_6124;
        end
      default :
        begin
          p4113_sel_1 = sel_6145;
        end
    endcase
    sel_1_1142 = p4113_sel_1;
  end

  assign cont_bits_31_27 = cont_bits_31_26[sel_1_1142];

  assign sel_1_1143 = (tmp_9 == 1'b0 ? sel_1_1025 :
              cont_bits_31_27);

  assign cont_bits_22_14[0] = 1'b0;
  assign cont_bits_22_14[1] = 1'b0;
  assign cont_bits_22_14[2] = 1'b0;
  assign cont_bits_22_14[3] = 1'b0;
  assign cont_bits_22_14[4] = 1'b0;
  assign cont_bits_22_14[5] = 1'b0;
  assign cont_bits_22_14[6] = 1'b0;
  assign cont_bits_22_14[7] = 1'b0;
  assign cont_bits_22_14[8] = 1'b0;
  assign cont_bits_22_14[9] = 1'b0;
  assign cont_bits_22_14[10] = 1'b0;
  assign cont_bits_22_14[11] = 1'b0;

  simfcn1 u_simfcn1_12 (.vx(r_v22),  // uint16
                        .cont_bits2_0(functionOutput_0_12),  // boolean
                        .cont_bits2_1(functionOutput_1_12),  // boolean
                        .cont_bits2_2(functionOutput_2_12),  // boolean
                        .cont_bits2_3(functionOutput_3_12),  // boolean
                        .cont_bits2_4(functionOutput_4_12),  // boolean
                        .cont_bits2_5(functionOutput_5_12),  // boolean
                        .cont_bits2_6(functionOutput_6_12),  // boolean
                        .cont_bits2_7(functionOutput_7_12),  // boolean
                        .cont_bits2_8(functionOutput_8_12),  // boolean
                        .cont_bits2_9(functionOutput_9_12),  // boolean
                        .cont_bits2_10(functionOutput_10_12),  // boolean
                        .cont_bits2_11(functionOutput_11_12)  // boolean
                        );

  assign functionOutput_23[0] = functionOutput_0_12;
  assign functionOutput_23[1] = functionOutput_1_12;
  assign functionOutput_23[2] = functionOutput_2_12;
  assign functionOutput_23[3] = functionOutput_3_12;
  assign functionOutput_23[4] = functionOutput_4_12;
  assign functionOutput_23[5] = functionOutput_5_12;
  assign functionOutput_23[6] = functionOutput_6_12;
  assign functionOutput_23[7] = functionOutput_7_12;
  assign functionOutput_23[8] = functionOutput_8_12;
  assign functionOutput_23[9] = functionOutput_9_12;
  assign functionOutput_23[10] = functionOutput_10_12;
  assign functionOutput_23[11] = functionOutput_11_12;

  assign sel_6146 = 32'sd0;

  assign sel_6147 = 32'sd0;

  assign sel_6148 = 32'sd0;

  assign sel_6149 = 32'sd0;

  assign sel_6150 = 32'sd0;

  assign sel_6151 = 32'sd0;

  assign sel_6152 = 32'sd0;

  assign sel_6153 = 32'sd0;

  assign sel_6154 = 32'sd0;

  assign sel_6155 = 32'sd0;

  assign sel_6156 = 32'sd0;

  assign sel_6157 = 32'sd0;

  assign sel_6158 = 32'sd0;

  assign sel_6159 = 32'sd0;

  assign sel_6160 = 32'sd0;

  assign s_392 = 32'sd0;

  assign sel_1_1144 = (tmp_11 == 1'b0 ? sel_6160 :
              s_392);

  assign sel_6161 = 32'sd0;

  assign sel_1_1145 = (tmp_13 == 1'b0 ? sel_1_1144 :
              sel_6161);

  assign sel_6162 = 32'sd0;

  assign sel_1_1146 = (tmp_15 == 1'b0 ? sel_1_1145 :
              sel_6162);

  assign sel_6163 = 32'sd0;

  assign sel_1_1147 = (tmp_17 == 1'b0 ? sel_1_1146 :
              sel_6163);

  assign sel_1_1148 = (s_10 == 1'b0 ? sel_6159 :
              sel_1_1147);

  assign sel_1_1149 = (s_11 == 1'b0 ? sel_6158 :
              sel_1_1148);

  assign sel_6164 = 32'sd0;

  assign sel_1_1150 = (s_12 == 1'b0 ? sel_1_1149 :
              sel_6164);

  assign sel_6165 = 32'sd0;

  assign sel_6166 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1150, sel_6146, sel_6147, sel_6148, sel_6149, sel_6150,
       sel_6151, sel_6152, sel_6153, sel_6154, sel_6155, sel_6156, sel_6157,
       sel_6165, sel_6166) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8503_sel_1 = sel_6165;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8503_sel_1 = sel_1_1150;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8503_sel_1 = sel_6157;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8503_sel_1 = sel_6156;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8503_sel_1 = sel_6155;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8503_sel_1 = sel_6154;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8503_sel_1 = sel_6153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8503_sel_1 = sel_6152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8503_sel_1 = sel_6151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8503_sel_1 = sel_6150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8503_sel_1 = sel_6149;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8503_sel_1 = sel_6148;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8503_sel_1 = sel_6147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8503_sel_1 = sel_6146;
        end
      default :
        begin
          p8503_sel_1 = sel_6166;
        end
    endcase
    sel_1_1151 = p8503_sel_1;
  end

  assign tmp_299 = functionOutput_23[sel_1_1151];

  assign sel_6167 = 1'b0;

  assign sel_6168 = 1'b0;

  assign sel_6169 = 1'b0;

  assign sel_6170 = 1'b0;

  assign sel_6171 = 1'b0;

  assign sel_6172 = 1'b0;

  assign sel_6173 = 1'b0;

  assign sel_6174 = 1'b0;

  assign sel_6175 = 1'b0;

  assign sel_6176 = 1'b0;

  assign sel_6177 = 1'b0;

  assign sel_6178 = 1'b0;

  assign sel_6179 = 1'b0;

  assign sel_6180 = 1'b0;

  assign sel_6181 = 1'b0;

  assign s_393 = 1'b1;

  assign sel_2_1113 = (tmp_11 == 1'b0 ? sel_6181 :
              s_393);

  assign sel_6182 = 1'b0;

  assign sel_2_1114 = (tmp_13 == 1'b0 ? sel_2_1113 :
              sel_6182);

  assign sel_6183 = 1'b0;

  assign sel_2_1115 = (tmp_15 == 1'b0 ? sel_2_1114 :
              sel_6183);

  assign sel_6184 = 1'b0;

  assign sel_2_1116 = (tmp_17 == 1'b0 ? sel_2_1115 :
              sel_6184);

  assign sel_2_1117 = (s_10 == 1'b0 ? sel_6180 :
              sel_2_1116);

  assign sel_2_1118 = (s_11 == 1'b0 ? sel_6179 :
              sel_2_1117);

  assign sel_6185 = 1'b0;

  assign sel_2_1119 = (s_12 == 1'b0 ? sel_2_1118 :
              sel_6185);

  assign sel_6186 = 1'b0;

  assign sel_6187 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1119, sel_6167, sel_6168, sel_6169, sel_6170, sel_6171,
       sel_6172, sel_6173, sel_6174, sel_6175, sel_6176, sel_6177, sel_6178,
       sel_6186, sel_6187) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7837_sel_2 = sel_6186;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7837_sel_2 = sel_2_1119;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7837_sel_2 = sel_6178;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7837_sel_2 = sel_6177;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7837_sel_2 = sel_6176;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7837_sel_2 = sel_6175;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7837_sel_2 = sel_6174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7837_sel_2 = sel_6173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7837_sel_2 = sel_6172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7837_sel_2 = sel_6171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7837_sel_2 = sel_6170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7837_sel_2 = sel_6169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7837_sel_2 = sel_6168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7837_sel_2 = sel_6167;
        end
      default :
        begin
          p7837_sel_2 = sel_6187;
        end
    endcase
    sel_2_1120 = p7837_sel_2;
  end

  always @* begin
    p7836cont_bits_22_cont_bits_22[0] = cont_bits_22_14[0];
    if (sel_2_1120) begin
      p7836cont_bits_22_cont_bits_22[0] = tmp_299;
    end
    cont_bits_22_15[0] = p7836cont_bits_22_cont_bits_22[0];
    cont_bits_22_15[1] = cont_bits_22_14[1];
    cont_bits_22_15[2] = cont_bits_22_14[2];
    cont_bits_22_15[3] = cont_bits_22_14[3];
    cont_bits_22_15[4] = cont_bits_22_14[4];
    cont_bits_22_15[5] = cont_bits_22_14[5];
    cont_bits_22_15[6] = cont_bits_22_14[6];
    cont_bits_22_15[7] = cont_bits_22_14[7];
    cont_bits_22_15[8] = cont_bits_22_14[8];
    cont_bits_22_15[9] = cont_bits_22_14[9];
    cont_bits_22_15[10] = cont_bits_22_14[10];
    cont_bits_22_15[11] = cont_bits_22_14[11];
  end

  assign sel_6188 = 32'sd0;

  assign sel_6189 = 32'sd0;

  assign sel_6190 = 32'sd0;

  assign sel_6191 = 32'sd0;

  assign sel_6192 = 32'sd0;

  assign sel_6193 = 32'sd0;

  assign sel_6194 = 32'sd0;

  assign sel_6195 = 32'sd0;

  assign sel_6196 = 32'sd0;

  assign sel_6197 = 32'sd0;

  assign sel_6198 = 32'sd0;

  assign sel_6199 = 32'sd0;

  assign sel_6200 = 32'sd0;

  assign sel_6201 = 32'sd0;

  assign sel_6202 = 32'sd0;

  assign s_394 = 32'sd1;

  assign sel_1_1152 = (tmp_11 == 1'b0 ? sel_6202 :
              s_394);

  assign sel_6203 = 32'sd0;

  assign sel_1_1153 = (tmp_13 == 1'b0 ? sel_1_1152 :
              sel_6203);

  assign sel_6204 = 32'sd0;

  assign sel_1_1154 = (tmp_15 == 1'b0 ? sel_1_1153 :
              sel_6204);

  assign sel_6205 = 32'sd0;

  assign sel_1_1155 = (tmp_17 == 1'b0 ? sel_1_1154 :
              sel_6205);

  assign sel_1_1156 = (s_10 == 1'b0 ? sel_6201 :
              sel_1_1155);

  assign sel_1_1157 = (s_11 == 1'b0 ? sel_6200 :
              sel_1_1156);

  assign sel_6206 = 32'sd0;

  assign sel_1_1158 = (s_12 == 1'b0 ? sel_1_1157 :
              sel_6206);

  assign sel_6207 = 32'sd0;

  assign sel_6208 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1158, sel_6188, sel_6189, sel_6190, sel_6191, sel_6192,
       sel_6193, sel_6194, sel_6195, sel_6196, sel_6197, sel_6198, sel_6199,
       sel_6207, sel_6208) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8690_sel_1 = sel_6207;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8690_sel_1 = sel_1_1158;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8690_sel_1 = sel_6199;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8690_sel_1 = sel_6198;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8690_sel_1 = sel_6197;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8690_sel_1 = sel_6196;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8690_sel_1 = sel_6195;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8690_sel_1 = sel_6194;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8690_sel_1 = sel_6193;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8690_sel_1 = sel_6192;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8690_sel_1 = sel_6191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8690_sel_1 = sel_6190;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8690_sel_1 = sel_6189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8690_sel_1 = sel_6188;
        end
      default :
        begin
          p8690_sel_1 = sel_6208;
        end
    endcase
    sel_1_1159 = p8690_sel_1;
  end

  assign tmp_300 = functionOutput_23[sel_1_1159];

  assign sel_6209 = 1'b0;

  assign sel_6210 = 1'b0;

  assign sel_6211 = 1'b0;

  assign sel_6212 = 1'b0;

  assign sel_6213 = 1'b0;

  assign sel_6214 = 1'b0;

  assign sel_6215 = 1'b0;

  assign sel_6216 = 1'b0;

  assign sel_6217 = 1'b0;

  assign sel_6218 = 1'b0;

  assign sel_6219 = 1'b0;

  assign sel_6220 = 1'b0;

  assign sel_6221 = 1'b0;

  assign sel_6222 = 1'b0;

  assign sel_6223 = 1'b0;

  assign s_395 = 1'b1;

  assign sel_2_1121 = (tmp_11 == 1'b0 ? sel_6223 :
              s_395);

  assign sel_6224 = 1'b0;

  assign sel_2_1122 = (tmp_13 == 1'b0 ? sel_2_1121 :
              sel_6224);

  assign sel_6225 = 1'b0;

  assign sel_2_1123 = (tmp_15 == 1'b0 ? sel_2_1122 :
              sel_6225);

  assign sel_6226 = 1'b0;

  assign sel_2_1124 = (tmp_17 == 1'b0 ? sel_2_1123 :
              sel_6226);

  assign sel_2_1125 = (s_10 == 1'b0 ? sel_6222 :
              sel_2_1124);

  assign sel_2_1126 = (s_11 == 1'b0 ? sel_6221 :
              sel_2_1125);

  assign sel_6227 = 1'b0;

  assign sel_2_1127 = (s_12 == 1'b0 ? sel_2_1126 :
              sel_6227);

  assign sel_6228 = 1'b0;

  assign sel_6229 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1127, sel_6209, sel_6210, sel_6211, sel_6212, sel_6213,
       sel_6214, sel_6215, sel_6216, sel_6217, sel_6218, sel_6219, sel_6220,
       sel_6228, sel_6229) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7342_sel_2 = sel_6228;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7342_sel_2 = sel_2_1127;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7342_sel_2 = sel_6220;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7342_sel_2 = sel_6219;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7342_sel_2 = sel_6218;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7342_sel_2 = sel_6217;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7342_sel_2 = sel_6216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7342_sel_2 = sel_6215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7342_sel_2 = sel_6214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7342_sel_2 = sel_6213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7342_sel_2 = sel_6212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7342_sel_2 = sel_6211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7342_sel_2 = sel_6210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7342_sel_2 = sel_6209;
        end
      default :
        begin
          p7342_sel_2 = sel_6229;
        end
    endcase
    sel_2_1128 = p7342_sel_2;
  end

  always @* begin
    p7341cont_bits_22_cont_bits_22[1] = cont_bits_22_15[1];
    if (sel_2_1128) begin
      p7341cont_bits_22_cont_bits_22[1] = tmp_300;
    end
    cont_bits_22_16[0] = cont_bits_22_15[0];
    cont_bits_22_16[1] = p7341cont_bits_22_cont_bits_22[1];
    cont_bits_22_16[2] = cont_bits_22_15[2];
    cont_bits_22_16[3] = cont_bits_22_15[3];
    cont_bits_22_16[4] = cont_bits_22_15[4];
    cont_bits_22_16[5] = cont_bits_22_15[5];
    cont_bits_22_16[6] = cont_bits_22_15[6];
    cont_bits_22_16[7] = cont_bits_22_15[7];
    cont_bits_22_16[8] = cont_bits_22_15[8];
    cont_bits_22_16[9] = cont_bits_22_15[9];
    cont_bits_22_16[10] = cont_bits_22_15[10];
    cont_bits_22_16[11] = cont_bits_22_15[11];
  end

  assign sel_6230 = 32'sd0;

  assign sel_6231 = 32'sd0;

  assign sel_6232 = 32'sd0;

  assign sel_6233 = 32'sd0;

  assign sel_6234 = 32'sd0;

  assign sel_6235 = 32'sd0;

  assign sel_6236 = 32'sd0;

  assign sel_6237 = 32'sd0;

  assign sel_6238 = 32'sd0;

  assign sel_6239 = 32'sd0;

  assign sel_6240 = 32'sd0;

  assign sel_6241 = 32'sd0;

  assign sel_6242 = 32'sd0;

  assign sel_6243 = 32'sd0;

  assign sel_6244 = 32'sd0;

  assign s_396 = 32'sd2;

  assign sel_1_1160 = (tmp_11 == 1'b0 ? sel_6244 :
              s_396);

  assign sel_6245 = 32'sd0;

  assign sel_1_1161 = (tmp_13 == 1'b0 ? sel_1_1160 :
              sel_6245);

  assign sel_6246 = 32'sd0;

  assign sel_1_1162 = (tmp_15 == 1'b0 ? sel_1_1161 :
              sel_6246);

  assign sel_6247 = 32'sd0;

  assign sel_1_1163 = (tmp_17 == 1'b0 ? sel_1_1162 :
              sel_6247);

  assign sel_1_1164 = (s_10 == 1'b0 ? sel_6243 :
              sel_1_1163);

  assign sel_1_1165 = (s_11 == 1'b0 ? sel_6242 :
              sel_1_1164);

  assign sel_6248 = 32'sd0;

  assign sel_1_1166 = (s_12 == 1'b0 ? sel_1_1165 :
              sel_6248);

  assign sel_6249 = 32'sd0;

  assign sel_6250 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1166, sel_6230, sel_6231, sel_6232, sel_6233, sel_6234,
       sel_6235, sel_6236, sel_6237, sel_6238, sel_6239, sel_6240, sel_6241,
       sel_6249, sel_6250) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9489_sel_1 = sel_6249;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9489_sel_1 = sel_1_1166;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9489_sel_1 = sel_6241;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9489_sel_1 = sel_6240;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9489_sel_1 = sel_6239;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9489_sel_1 = sel_6238;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9489_sel_1 = sel_6237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9489_sel_1 = sel_6236;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9489_sel_1 = sel_6235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9489_sel_1 = sel_6234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9489_sel_1 = sel_6233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9489_sel_1 = sel_6232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9489_sel_1 = sel_6231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9489_sel_1 = sel_6230;
        end
      default :
        begin
          p9489_sel_1 = sel_6250;
        end
    endcase
    sel_1_1167 = p9489_sel_1;
  end

  assign tmp_301 = functionOutput_23[sel_1_1167];

  assign sel_6251 = 1'b0;

  assign sel_6252 = 1'b0;

  assign sel_6253 = 1'b0;

  assign sel_6254 = 1'b0;

  assign sel_6255 = 1'b0;

  assign sel_6256 = 1'b0;

  assign sel_6257 = 1'b0;

  assign sel_6258 = 1'b0;

  assign sel_6259 = 1'b0;

  assign sel_6260 = 1'b0;

  assign sel_6261 = 1'b0;

  assign sel_6262 = 1'b0;

  assign sel_6263 = 1'b0;

  assign sel_6264 = 1'b0;

  assign sel_6265 = 1'b0;

  assign s_397 = 1'b1;

  assign sel_2_1129 = (tmp_11 == 1'b0 ? sel_6265 :
              s_397);

  assign sel_6266 = 1'b0;

  assign sel_2_1130 = (tmp_13 == 1'b0 ? sel_2_1129 :
              sel_6266);

  assign sel_6267 = 1'b0;

  assign sel_2_1131 = (tmp_15 == 1'b0 ? sel_2_1130 :
              sel_6267);

  assign sel_6268 = 1'b0;

  assign sel_2_1132 = (tmp_17 == 1'b0 ? sel_2_1131 :
              sel_6268);

  assign sel_2_1133 = (s_10 == 1'b0 ? sel_6264 :
              sel_2_1132);

  assign sel_2_1134 = (s_11 == 1'b0 ? sel_6263 :
              sel_2_1133);

  assign sel_6269 = 1'b0;

  assign sel_2_1135 = (s_12 == 1'b0 ? sel_2_1134 :
              sel_6269);

  assign sel_6270 = 1'b0;

  assign sel_6271 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1135, sel_6251, sel_6252, sel_6253, sel_6254, sel_6255,
       sel_6256, sel_6257, sel_6258, sel_6259, sel_6260, sel_6261, sel_6262,
       sel_6270, sel_6271) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7199_sel_2 = sel_6270;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7199_sel_2 = sel_2_1135;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7199_sel_2 = sel_6262;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7199_sel_2 = sel_6261;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7199_sel_2 = sel_6260;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7199_sel_2 = sel_6259;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7199_sel_2 = sel_6258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7199_sel_2 = sel_6257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7199_sel_2 = sel_6256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7199_sel_2 = sel_6255;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7199_sel_2 = sel_6254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7199_sel_2 = sel_6253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7199_sel_2 = sel_6252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7199_sel_2 = sel_6251;
        end
      default :
        begin
          p7199_sel_2 = sel_6271;
        end
    endcase
    sel_2_1136 = p7199_sel_2;
  end

  always @* begin
    p7198cont_bits_22_cont_bits_22[2] = cont_bits_22_16[2];
    if (sel_2_1136) begin
      p7198cont_bits_22_cont_bits_22[2] = tmp_301;
    end
    cont_bits_22_17[0] = cont_bits_22_16[0];
    cont_bits_22_17[1] = cont_bits_22_16[1];
    cont_bits_22_17[2] = p7198cont_bits_22_cont_bits_22[2];
    cont_bits_22_17[3] = cont_bits_22_16[3];
    cont_bits_22_17[4] = cont_bits_22_16[4];
    cont_bits_22_17[5] = cont_bits_22_16[5];
    cont_bits_22_17[6] = cont_bits_22_16[6];
    cont_bits_22_17[7] = cont_bits_22_16[7];
    cont_bits_22_17[8] = cont_bits_22_16[8];
    cont_bits_22_17[9] = cont_bits_22_16[9];
    cont_bits_22_17[10] = cont_bits_22_16[10];
    cont_bits_22_17[11] = cont_bits_22_16[11];
  end

  assign sel_6272 = 32'sd0;

  assign sel_6273 = 32'sd0;

  assign sel_6274 = 32'sd0;

  assign sel_6275 = 32'sd0;

  assign sel_6276 = 32'sd0;

  assign sel_6277 = 32'sd0;

  assign sel_6278 = 32'sd0;

  assign sel_6279 = 32'sd0;

  assign sel_6280 = 32'sd0;

  assign sel_6281 = 32'sd0;

  assign sel_6282 = 32'sd0;

  assign sel_6283 = 32'sd0;

  assign sel_6284 = 32'sd0;

  assign sel_6285 = 32'sd0;

  assign sel_6286 = 32'sd0;

  assign s_398 = 32'sd3;

  assign sel_1_1168 = (tmp_11 == 1'b0 ? sel_6286 :
              s_398);

  assign sel_6287 = 32'sd0;

  assign sel_1_1169 = (tmp_13 == 1'b0 ? sel_1_1168 :
              sel_6287);

  assign sel_6288 = 32'sd0;

  assign sel_1_1170 = (tmp_15 == 1'b0 ? sel_1_1169 :
              sel_6288);

  assign sel_6289 = 32'sd0;

  assign sel_1_1171 = (tmp_17 == 1'b0 ? sel_1_1170 :
              sel_6289);

  assign sel_1_1172 = (s_10 == 1'b0 ? sel_6285 :
              sel_1_1171);

  assign sel_1_1173 = (s_11 == 1'b0 ? sel_6284 :
              sel_1_1172);

  assign sel_6290 = 32'sd0;

  assign sel_1_1174 = (s_12 == 1'b0 ? sel_1_1173 :
              sel_6290);

  assign sel_6291 = 32'sd0;

  assign sel_6292 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1174, sel_6272, sel_6273, sel_6274, sel_6275, sel_6276,
       sel_6277, sel_6278, sel_6279, sel_6280, sel_6281, sel_6282, sel_6283,
       sel_6291, sel_6292) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9659_sel_1 = sel_6291;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9659_sel_1 = sel_1_1174;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9659_sel_1 = sel_6283;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9659_sel_1 = sel_6282;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9659_sel_1 = sel_6281;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9659_sel_1 = sel_6280;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9659_sel_1 = sel_6279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9659_sel_1 = sel_6278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9659_sel_1 = sel_6277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9659_sel_1 = sel_6276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9659_sel_1 = sel_6275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9659_sel_1 = sel_6274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9659_sel_1 = sel_6273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9659_sel_1 = sel_6272;
        end
      default :
        begin
          p9659_sel_1 = sel_6292;
        end
    endcase
    sel_1_1175 = p9659_sel_1;
  end

  assign tmp_302 = functionOutput_23[sel_1_1175];

  assign sel_6293 = 1'b0;

  assign sel_6294 = 1'b0;

  assign sel_6295 = 1'b0;

  assign sel_6296 = 1'b0;

  assign sel_6297 = 1'b0;

  assign sel_6298 = 1'b0;

  assign sel_6299 = 1'b0;

  assign sel_6300 = 1'b0;

  assign sel_6301 = 1'b0;

  assign sel_6302 = 1'b0;

  assign sel_6303 = 1'b0;

  assign sel_6304 = 1'b0;

  assign sel_6305 = 1'b0;

  assign sel_6306 = 1'b0;

  assign sel_6307 = 1'b0;

  assign s_399 = 1'b1;

  assign sel_2_1137 = (tmp_11 == 1'b0 ? sel_6307 :
              s_399);

  assign sel_6308 = 1'b0;

  assign sel_2_1138 = (tmp_13 == 1'b0 ? sel_2_1137 :
              sel_6308);

  assign sel_6309 = 1'b0;

  assign sel_2_1139 = (tmp_15 == 1'b0 ? sel_2_1138 :
              sel_6309);

  assign sel_6310 = 1'b0;

  assign sel_2_1140 = (tmp_17 == 1'b0 ? sel_2_1139 :
              sel_6310);

  assign sel_2_1141 = (s_10 == 1'b0 ? sel_6306 :
              sel_2_1140);

  assign sel_2_1142 = (s_11 == 1'b0 ? sel_6305 :
              sel_2_1141);

  assign sel_6311 = 1'b0;

  assign sel_2_1143 = (s_12 == 1'b0 ? sel_2_1142 :
              sel_6311);

  assign sel_6312 = 1'b0;

  assign sel_6313 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1143, sel_6293, sel_6294, sel_6295, sel_6296, sel_6297,
       sel_6298, sel_6299, sel_6300, sel_6301, sel_6302, sel_6303, sel_6304,
       sel_6312, sel_6313) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6704_sel_2 = sel_6312;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6704_sel_2 = sel_2_1143;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6704_sel_2 = sel_6304;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6704_sel_2 = sel_6303;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6704_sel_2 = sel_6302;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6704_sel_2 = sel_6301;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6704_sel_2 = sel_6300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6704_sel_2 = sel_6299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6704_sel_2 = sel_6298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6704_sel_2 = sel_6297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6704_sel_2 = sel_6296;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6704_sel_2 = sel_6295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6704_sel_2 = sel_6294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6704_sel_2 = sel_6293;
        end
      default :
        begin
          p6704_sel_2 = sel_6313;
        end
    endcase
    sel_2_1144 = p6704_sel_2;
  end

  always @* begin
    p6703cont_bits_22_cont_bits_22[3] = cont_bits_22_17[3];
    if (sel_2_1144) begin
      p6703cont_bits_22_cont_bits_22[3] = tmp_302;
    end
    cont_bits_22_18[0] = cont_bits_22_17[0];
    cont_bits_22_18[1] = cont_bits_22_17[1];
    cont_bits_22_18[2] = cont_bits_22_17[2];
    cont_bits_22_18[3] = p6703cont_bits_22_cont_bits_22[3];
    cont_bits_22_18[4] = cont_bits_22_17[4];
    cont_bits_22_18[5] = cont_bits_22_17[5];
    cont_bits_22_18[6] = cont_bits_22_17[6];
    cont_bits_22_18[7] = cont_bits_22_17[7];
    cont_bits_22_18[8] = cont_bits_22_17[8];
    cont_bits_22_18[9] = cont_bits_22_17[9];
    cont_bits_22_18[10] = cont_bits_22_17[10];
    cont_bits_22_18[11] = cont_bits_22_17[11];
  end

  assign sel_6314 = 32'sd0;

  assign sel_6315 = 32'sd0;

  assign sel_6316 = 32'sd0;

  assign sel_6317 = 32'sd0;

  assign sel_6318 = 32'sd0;

  assign sel_6319 = 32'sd0;

  assign sel_6320 = 32'sd0;

  assign sel_6321 = 32'sd0;

  assign sel_6322 = 32'sd0;

  assign sel_6323 = 32'sd0;

  assign sel_6324 = 32'sd0;

  assign sel_6325 = 32'sd0;

  assign sel_6326 = 32'sd0;

  assign sel_6327 = 32'sd0;

  assign sel_6328 = 32'sd0;

  assign s_400 = 32'sd4;

  assign sel_1_1176 = (tmp_11 == 1'b0 ? sel_6328 :
              s_400);

  assign sel_6329 = 32'sd0;

  assign sel_1_1177 = (tmp_13 == 1'b0 ? sel_1_1176 :
              sel_6329);

  assign sel_6330 = 32'sd0;

  assign sel_1_1178 = (tmp_15 == 1'b0 ? sel_1_1177 :
              sel_6330);

  assign sel_6331 = 32'sd0;

  assign sel_1_1179 = (tmp_17 == 1'b0 ? sel_1_1178 :
              sel_6331);

  assign sel_1_1180 = (s_10 == 1'b0 ? sel_6327 :
              sel_1_1179);

  assign sel_1_1181 = (s_11 == 1'b0 ? sel_6326 :
              sel_1_1180);

  assign sel_6332 = 32'sd0;

  assign sel_1_1182 = (s_12 == 1'b0 ? sel_1_1181 :
              sel_6332);

  assign sel_6333 = 32'sd0;

  assign sel_6334 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1182, sel_6314, sel_6315, sel_6316, sel_6317, sel_6318,
       sel_6319, sel_6320, sel_6321, sel_6322, sel_6323, sel_6324, sel_6325,
       sel_6333, sel_6334) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9302_sel_1 = sel_6333;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9302_sel_1 = sel_1_1182;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9302_sel_1 = sel_6325;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9302_sel_1 = sel_6324;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9302_sel_1 = sel_6323;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9302_sel_1 = sel_6322;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9302_sel_1 = sel_6321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9302_sel_1 = sel_6320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9302_sel_1 = sel_6319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9302_sel_1 = sel_6318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9302_sel_1 = sel_6317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9302_sel_1 = sel_6316;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9302_sel_1 = sel_6315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9302_sel_1 = sel_6314;
        end
      default :
        begin
          p9302_sel_1 = sel_6334;
        end
    endcase
    sel_1_1183 = p9302_sel_1;
  end

  assign tmp_303 = functionOutput_23[sel_1_1183];

  assign sel_6335 = 1'b0;

  assign sel_6336 = 1'b0;

  assign sel_6337 = 1'b0;

  assign sel_6338 = 1'b0;

  assign sel_6339 = 1'b0;

  assign sel_6340 = 1'b0;

  assign sel_6341 = 1'b0;

  assign sel_6342 = 1'b0;

  assign sel_6343 = 1'b0;

  assign sel_6344 = 1'b0;

  assign sel_6345 = 1'b0;

  assign sel_6346 = 1'b0;

  assign sel_6347 = 1'b0;

  assign sel_6348 = 1'b0;

  assign sel_6349 = 1'b0;

  assign s_401 = 1'b1;

  assign sel_2_1145 = (tmp_11 == 1'b0 ? sel_6349 :
              s_401);

  assign sel_6350 = 1'b0;

  assign sel_2_1146 = (tmp_13 == 1'b0 ? sel_2_1145 :
              sel_6350);

  assign sel_6351 = 1'b0;

  assign sel_2_1147 = (tmp_15 == 1'b0 ? sel_2_1146 :
              sel_6351);

  assign sel_6352 = 1'b0;

  assign sel_2_1148 = (tmp_17 == 1'b0 ? sel_2_1147 :
              sel_6352);

  assign sel_2_1149 = (s_10 == 1'b0 ? sel_6348 :
              sel_2_1148);

  assign sel_2_1150 = (s_11 == 1'b0 ? sel_6347 :
              sel_2_1149);

  assign sel_6353 = 1'b0;

  assign sel_2_1151 = (s_12 == 1'b0 ? sel_2_1150 :
              sel_6353);

  assign sel_6354 = 1'b0;

  assign sel_6355 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1151, sel_6335, sel_6336, sel_6337, sel_6338, sel_6339,
       sel_6340, sel_6341, sel_6342, sel_6343, sel_6344, sel_6345, sel_6346,
       sel_6354, sel_6355) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6592_sel_2 = sel_6354;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6592_sel_2 = sel_2_1151;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6592_sel_2 = sel_6346;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6592_sel_2 = sel_6345;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6592_sel_2 = sel_6344;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6592_sel_2 = sel_6343;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6592_sel_2 = sel_6342;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6592_sel_2 = sel_6341;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6592_sel_2 = sel_6340;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6592_sel_2 = sel_6339;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6592_sel_2 = sel_6338;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6592_sel_2 = sel_6337;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6592_sel_2 = sel_6336;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6592_sel_2 = sel_6335;
        end
      default :
        begin
          p6592_sel_2 = sel_6355;
        end
    endcase
    sel_2_1152 = p6592_sel_2;
  end

  always @* begin
    p6591cont_bits_22_cont_bits_22[4] = cont_bits_22_18[4];
    if (sel_2_1152) begin
      p6591cont_bits_22_cont_bits_22[4] = tmp_303;
    end
    cont_bits_22_19[0] = cont_bits_22_18[0];
    cont_bits_22_19[1] = cont_bits_22_18[1];
    cont_bits_22_19[2] = cont_bits_22_18[2];
    cont_bits_22_19[3] = cont_bits_22_18[3];
    cont_bits_22_19[4] = p6591cont_bits_22_cont_bits_22[4];
    cont_bits_22_19[5] = cont_bits_22_18[5];
    cont_bits_22_19[6] = cont_bits_22_18[6];
    cont_bits_22_19[7] = cont_bits_22_18[7];
    cont_bits_22_19[8] = cont_bits_22_18[8];
    cont_bits_22_19[9] = cont_bits_22_18[9];
    cont_bits_22_19[10] = cont_bits_22_18[10];
    cont_bits_22_19[11] = cont_bits_22_18[11];
  end

  assign sel_6356 = 32'sd0;

  assign sel_6357 = 32'sd0;

  assign sel_6358 = 32'sd0;

  assign sel_6359 = 32'sd0;

  assign sel_6360 = 32'sd0;

  assign sel_6361 = 32'sd0;

  assign sel_6362 = 32'sd0;

  assign sel_6363 = 32'sd0;

  assign sel_6364 = 32'sd0;

  assign sel_6365 = 32'sd0;

  assign sel_6366 = 32'sd0;

  assign sel_6367 = 32'sd0;

  assign sel_6368 = 32'sd0;

  assign sel_6369 = 32'sd0;

  assign sel_6370 = 32'sd0;

  assign s_402 = 32'sd5;

  assign sel_1_1184 = (tmp_11 == 1'b0 ? sel_6370 :
              s_402);

  assign sel_6371 = 32'sd0;

  assign sel_1_1185 = (tmp_13 == 1'b0 ? sel_1_1184 :
              sel_6371);

  assign sel_6372 = 32'sd0;

  assign sel_1_1186 = (tmp_15 == 1'b0 ? sel_1_1185 :
              sel_6372);

  assign sel_6373 = 32'sd0;

  assign sel_1_1187 = (tmp_17 == 1'b0 ? sel_1_1186 :
              sel_6373);

  assign sel_1_1188 = (s_10 == 1'b0 ? sel_6369 :
              sel_1_1187);

  assign sel_1_1189 = (s_11 == 1'b0 ? sel_6368 :
              sel_1_1188);

  assign sel_6374 = 32'sd0;

  assign sel_1_1190 = (s_12 == 1'b0 ? sel_1_1189 :
              sel_6374);

  assign sel_6375 = 32'sd0;

  assign sel_6376 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1190, sel_6356, sel_6357, sel_6358, sel_6359, sel_6360,
       sel_6361, sel_6362, sel_6363, sel_6364, sel_6365, sel_6366, sel_6367,
       sel_6375, sel_6376) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9336_sel_1 = sel_6375;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9336_sel_1 = sel_1_1190;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9336_sel_1 = sel_6367;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9336_sel_1 = sel_6366;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9336_sel_1 = sel_6365;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9336_sel_1 = sel_6364;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9336_sel_1 = sel_6363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9336_sel_1 = sel_6362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9336_sel_1 = sel_6361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9336_sel_1 = sel_6360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9336_sel_1 = sel_6359;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9336_sel_1 = sel_6358;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9336_sel_1 = sel_6357;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9336_sel_1 = sel_6356;
        end
      default :
        begin
          p9336_sel_1 = sel_6376;
        end
    endcase
    sel_1_1191 = p9336_sel_1;
  end

  assign tmp_304 = functionOutput_23[sel_1_1191];

  assign sel_6377 = 1'b0;

  assign sel_6378 = 1'b0;

  assign sel_6379 = 1'b0;

  assign sel_6380 = 1'b0;

  assign sel_6381 = 1'b0;

  assign sel_6382 = 1'b0;

  assign sel_6383 = 1'b0;

  assign sel_6384 = 1'b0;

  assign sel_6385 = 1'b0;

  assign sel_6386 = 1'b0;

  assign sel_6387 = 1'b0;

  assign sel_6388 = 1'b0;

  assign sel_6389 = 1'b0;

  assign sel_6390 = 1'b0;

  assign sel_6391 = 1'b0;

  assign s_403 = 1'b1;

  assign sel_2_1153 = (tmp_11 == 1'b0 ? sel_6391 :
              s_403);

  assign sel_6392 = 1'b0;

  assign sel_2_1154 = (tmp_13 == 1'b0 ? sel_2_1153 :
              sel_6392);

  assign sel_6393 = 1'b0;

  assign sel_2_1155 = (tmp_15 == 1'b0 ? sel_2_1154 :
              sel_6393);

  assign sel_6394 = 1'b0;

  assign sel_2_1156 = (tmp_17 == 1'b0 ? sel_2_1155 :
              sel_6394);

  assign sel_2_1157 = (s_10 == 1'b0 ? sel_6390 :
              sel_2_1156);

  assign sel_2_1158 = (s_11 == 1'b0 ? sel_6389 :
              sel_2_1157);

  assign sel_6395 = 1'b0;

  assign sel_2_1159 = (s_12 == 1'b0 ? sel_2_1158 :
              sel_6395);

  assign sel_6396 = 1'b0;

  assign sel_6397 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1159, sel_6377, sel_6378, sel_6379, sel_6380, sel_6381,
       sel_6382, sel_6383, sel_6384, sel_6385, sel_6386, sel_6387, sel_6388,
       sel_6396, sel_6397) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6098_sel_2 = sel_6396;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6098_sel_2 = sel_2_1159;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6098_sel_2 = sel_6388;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6098_sel_2 = sel_6387;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6098_sel_2 = sel_6386;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6098_sel_2 = sel_6385;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6098_sel_2 = sel_6384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6098_sel_2 = sel_6383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6098_sel_2 = sel_6382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6098_sel_2 = sel_6381;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6098_sel_2 = sel_6380;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6098_sel_2 = sel_6379;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6098_sel_2 = sel_6378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6098_sel_2 = sel_6377;
        end
      default :
        begin
          p6098_sel_2 = sel_6397;
        end
    endcase
    sel_2_1160 = p6098_sel_2;
  end

  always @* begin
    p6097cont_bits_22_cont_bits_22[5] = cont_bits_22_19[5];
    if (sel_2_1160) begin
      p6097cont_bits_22_cont_bits_22[5] = tmp_304;
    end
    cont_bits_22_20[0] = cont_bits_22_19[0];
    cont_bits_22_20[1] = cont_bits_22_19[1];
    cont_bits_22_20[2] = cont_bits_22_19[2];
    cont_bits_22_20[3] = cont_bits_22_19[3];
    cont_bits_22_20[4] = cont_bits_22_19[4];
    cont_bits_22_20[5] = p6097cont_bits_22_cont_bits_22[5];
    cont_bits_22_20[6] = cont_bits_22_19[6];
    cont_bits_22_20[7] = cont_bits_22_19[7];
    cont_bits_22_20[8] = cont_bits_22_19[8];
    cont_bits_22_20[9] = cont_bits_22_19[9];
    cont_bits_22_20[10] = cont_bits_22_19[10];
    cont_bits_22_20[11] = cont_bits_22_19[11];
  end

  assign sel_6398 = 32'sd0;

  assign sel_6399 = 32'sd0;

  assign sel_6400 = 32'sd0;

  assign sel_6401 = 32'sd0;

  assign sel_6402 = 32'sd0;

  assign sel_6403 = 32'sd0;

  assign sel_6404 = 32'sd0;

  assign sel_6405 = 32'sd0;

  assign sel_6406 = 32'sd0;

  assign sel_6407 = 32'sd0;

  assign sel_6408 = 32'sd0;

  assign sel_6409 = 32'sd0;

  assign sel_6410 = 32'sd0;

  assign sel_6411 = 32'sd0;

  assign sel_6412 = 32'sd0;

  assign s_404 = 32'sd6;

  assign sel_1_1192 = (tmp_11 == 1'b0 ? sel_6412 :
              s_404);

  assign sel_6413 = 32'sd0;

  assign sel_1_1193 = (tmp_13 == 1'b0 ? sel_1_1192 :
              sel_6413);

  assign sel_6414 = 32'sd0;

  assign sel_1_1194 = (tmp_15 == 1'b0 ? sel_1_1193 :
              sel_6414);

  assign sel_6415 = 32'sd0;

  assign sel_1_1195 = (tmp_17 == 1'b0 ? sel_1_1194 :
              sel_6415);

  assign sel_1_1196 = (s_10 == 1'b0 ? sel_6411 :
              sel_1_1195);

  assign sel_1_1197 = (s_11 == 1'b0 ? sel_6410 :
              sel_1_1196);

  assign sel_6416 = 32'sd0;

  assign sel_1_1198 = (s_12 == 1'b0 ? sel_1_1197 :
              sel_6416);

  assign sel_6417 = 32'sd0;

  assign sel_6418 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1198, sel_6398, sel_6399, sel_6400, sel_6401, sel_6402,
       sel_6403, sel_6404, sel_6405, sel_6406, sel_6407, sel_6408, sel_6409,
       sel_6417, sel_6418) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9693_sel_1 = sel_6417;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9693_sel_1 = sel_1_1198;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9693_sel_1 = sel_6409;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9693_sel_1 = sel_6408;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9693_sel_1 = sel_6407;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9693_sel_1 = sel_6406;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9693_sel_1 = sel_6405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9693_sel_1 = sel_6404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9693_sel_1 = sel_6403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9693_sel_1 = sel_6402;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9693_sel_1 = sel_6401;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9693_sel_1 = sel_6400;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9693_sel_1 = sel_6399;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9693_sel_1 = sel_6398;
        end
      default :
        begin
          p9693_sel_1 = sel_6418;
        end
    endcase
    sel_1_1199 = p9693_sel_1;
  end

  assign tmp_305 = functionOutput_23[sel_1_1199];

  assign sel_6419 = 1'b0;

  assign sel_6420 = 1'b0;

  assign sel_6421 = 1'b0;

  assign sel_6422 = 1'b0;

  assign sel_6423 = 1'b0;

  assign sel_6424 = 1'b0;

  assign sel_6425 = 1'b0;

  assign sel_6426 = 1'b0;

  assign sel_6427 = 1'b0;

  assign sel_6428 = 1'b0;

  assign sel_6429 = 1'b0;

  assign sel_6430 = 1'b0;

  assign sel_6431 = 1'b0;

  assign sel_6432 = 1'b0;

  assign sel_6433 = 1'b0;

  assign s_405 = 1'b1;

  assign sel_2_1161 = (tmp_11 == 1'b0 ? sel_6433 :
              s_405);

  assign sel_6434 = 1'b0;

  assign sel_2_1162 = (tmp_13 == 1'b0 ? sel_2_1161 :
              sel_6434);

  assign sel_6435 = 1'b0;

  assign sel_2_1163 = (tmp_15 == 1'b0 ? sel_2_1162 :
              sel_6435);

  assign sel_6436 = 1'b0;

  assign sel_2_1164 = (tmp_17 == 1'b0 ? sel_2_1163 :
              sel_6436);

  assign sel_2_1165 = (s_10 == 1'b0 ? sel_6432 :
              sel_2_1164);

  assign sel_2_1166 = (s_11 == 1'b0 ? sel_6431 :
              sel_2_1165);

  assign sel_6437 = 1'b0;

  assign sel_2_1167 = (s_12 == 1'b0 ? sel_2_1166 :
              sel_6437);

  assign sel_6438 = 1'b0;

  assign sel_6439 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1167, sel_6419, sel_6420, sel_6421, sel_6422, sel_6423,
       sel_6424, sel_6425, sel_6426, sel_6427, sel_6428, sel_6429, sel_6430,
       sel_6438, sel_6439) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5986_sel_2 = sel_6438;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5986_sel_2 = sel_2_1167;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5986_sel_2 = sel_6430;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5986_sel_2 = sel_6429;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5986_sel_2 = sel_6428;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5986_sel_2 = sel_6427;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5986_sel_2 = sel_6426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5986_sel_2 = sel_6425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5986_sel_2 = sel_6424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5986_sel_2 = sel_6423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5986_sel_2 = sel_6422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5986_sel_2 = sel_6421;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5986_sel_2 = sel_6420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5986_sel_2 = sel_6419;
        end
      default :
        begin
          p5986_sel_2 = sel_6439;
        end
    endcase
    sel_2_1168 = p5986_sel_2;
  end

  always @* begin
    p5985cont_bits_22_cont_bits_22[6] = cont_bits_22_20[6];
    if (sel_2_1168) begin
      p5985cont_bits_22_cont_bits_22[6] = tmp_305;
    end
    cont_bits_22_21[0] = cont_bits_22_20[0];
    cont_bits_22_21[1] = cont_bits_22_20[1];
    cont_bits_22_21[2] = cont_bits_22_20[2];
    cont_bits_22_21[3] = cont_bits_22_20[3];
    cont_bits_22_21[4] = cont_bits_22_20[4];
    cont_bits_22_21[5] = cont_bits_22_20[5];
    cont_bits_22_21[6] = p5985cont_bits_22_cont_bits_22[6];
    cont_bits_22_21[7] = cont_bits_22_20[7];
    cont_bits_22_21[8] = cont_bits_22_20[8];
    cont_bits_22_21[9] = cont_bits_22_20[9];
    cont_bits_22_21[10] = cont_bits_22_20[10];
    cont_bits_22_21[11] = cont_bits_22_20[11];
  end

  assign sel_6440 = 32'sd0;

  assign sel_6441 = 32'sd0;

  assign sel_6442 = 32'sd0;

  assign sel_6443 = 32'sd0;

  assign sel_6444 = 32'sd0;

  assign sel_6445 = 32'sd0;

  assign sel_6446 = 32'sd0;

  assign sel_6447 = 32'sd0;

  assign sel_6448 = 32'sd0;

  assign sel_6449 = 32'sd0;

  assign sel_6450 = 32'sd0;

  assign sel_6451 = 32'sd0;

  assign sel_6452 = 32'sd0;

  assign sel_6453 = 32'sd0;

  assign sel_6454 = 32'sd0;

  assign s_406 = 32'sd7;

  assign sel_1_1200 = (tmp_11 == 1'b0 ? sel_6454 :
              s_406);

  assign sel_6455 = 32'sd0;

  assign sel_1_1201 = (tmp_13 == 1'b0 ? sel_1_1200 :
              sel_6455);

  assign sel_6456 = 32'sd0;

  assign sel_1_1202 = (tmp_15 == 1'b0 ? sel_1_1201 :
              sel_6456);

  assign sel_6457 = 32'sd0;

  assign sel_1_1203 = (tmp_17 == 1'b0 ? sel_1_1202 :
              sel_6457);

  assign sel_1_1204 = (s_10 == 1'b0 ? sel_6453 :
              sel_1_1203);

  assign sel_1_1205 = (s_11 == 1'b0 ? sel_6452 :
              sel_1_1204);

  assign sel_6458 = 32'sd0;

  assign sel_1_1206 = (s_12 == 1'b0 ? sel_1_1205 :
              sel_6458);

  assign sel_6459 = 32'sd0;

  assign sel_6460 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1206, sel_6440, sel_6441, sel_6442, sel_6443, sel_6444,
       sel_6445, sel_6446, sel_6447, sel_6448, sel_6449, sel_6450, sel_6451,
       sel_6459, sel_6460) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8843_sel_1 = sel_6459;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8843_sel_1 = sel_1_1206;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8843_sel_1 = sel_6451;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8843_sel_1 = sel_6450;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8843_sel_1 = sel_6449;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8843_sel_1 = sel_6448;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8843_sel_1 = sel_6447;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8843_sel_1 = sel_6446;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8843_sel_1 = sel_6445;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8843_sel_1 = sel_6444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8843_sel_1 = sel_6443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8843_sel_1 = sel_6442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8843_sel_1 = sel_6441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8843_sel_1 = sel_6440;
        end
      default :
        begin
          p8843_sel_1 = sel_6460;
        end
    endcase
    sel_1_1207 = p8843_sel_1;
  end

  assign tmp_306 = functionOutput_23[sel_1_1207];

  assign sel_6461 = 1'b0;

  assign sel_6462 = 1'b0;

  assign sel_6463 = 1'b0;

  assign sel_6464 = 1'b0;

  assign sel_6465 = 1'b0;

  assign sel_6466 = 1'b0;

  assign sel_6467 = 1'b0;

  assign sel_6468 = 1'b0;

  assign sel_6469 = 1'b0;

  assign sel_6470 = 1'b0;

  assign sel_6471 = 1'b0;

  assign sel_6472 = 1'b0;

  assign sel_6473 = 1'b0;

  assign sel_6474 = 1'b0;

  assign sel_6475 = 1'b0;

  assign s_407 = 1'b1;

  assign sel_2_1169 = (tmp_11 == 1'b0 ? sel_6475 :
              s_407);

  assign sel_6476 = 1'b0;

  assign sel_2_1170 = (tmp_13 == 1'b0 ? sel_2_1169 :
              sel_6476);

  assign sel_6477 = 1'b0;

  assign sel_2_1171 = (tmp_15 == 1'b0 ? sel_2_1170 :
              sel_6477);

  assign sel_6478 = 1'b0;

  assign sel_2_1172 = (tmp_17 == 1'b0 ? sel_2_1171 :
              sel_6478);

  assign sel_2_1173 = (s_10 == 1'b0 ? sel_6474 :
              sel_2_1172);

  assign sel_2_1174 = (s_11 == 1'b0 ? sel_6473 :
              sel_2_1173);

  assign sel_6479 = 1'b0;

  assign sel_2_1175 = (s_12 == 1'b0 ? sel_2_1174 :
              sel_6479);

  assign sel_6480 = 1'b0;

  assign sel_6481 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1175, sel_6461, sel_6462, sel_6463, sel_6464, sel_6465,
       sel_6466, sel_6467, sel_6468, sel_6469, sel_6470, sel_6471, sel_6472,
       sel_6480, sel_6481) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5492_sel_2 = sel_6480;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5492_sel_2 = sel_2_1175;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5492_sel_2 = sel_6472;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5492_sel_2 = sel_6471;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5492_sel_2 = sel_6470;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5492_sel_2 = sel_6469;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5492_sel_2 = sel_6468;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5492_sel_2 = sel_6467;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5492_sel_2 = sel_6466;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5492_sel_2 = sel_6465;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5492_sel_2 = sel_6464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5492_sel_2 = sel_6463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5492_sel_2 = sel_6462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5492_sel_2 = sel_6461;
        end
      default :
        begin
          p5492_sel_2 = sel_6481;
        end
    endcase
    sel_2_1176 = p5492_sel_2;
  end

  always @* begin
    p5491cont_bits_22_cont_bits_22[7] = cont_bits_22_21[7];
    if (sel_2_1176) begin
      p5491cont_bits_22_cont_bits_22[7] = tmp_306;
    end
    cont_bits_22_22[0] = cont_bits_22_21[0];
    cont_bits_22_22[1] = cont_bits_22_21[1];
    cont_bits_22_22[2] = cont_bits_22_21[2];
    cont_bits_22_22[3] = cont_bits_22_21[3];
    cont_bits_22_22[4] = cont_bits_22_21[4];
    cont_bits_22_22[5] = cont_bits_22_21[5];
    cont_bits_22_22[6] = cont_bits_22_21[6];
    cont_bits_22_22[7] = p5491cont_bits_22_cont_bits_22[7];
    cont_bits_22_22[8] = cont_bits_22_21[8];
    cont_bits_22_22[9] = cont_bits_22_21[9];
    cont_bits_22_22[10] = cont_bits_22_21[10];
    cont_bits_22_22[11] = cont_bits_22_21[11];
  end

  assign sel_6482 = 32'sd0;

  assign sel_6483 = 32'sd0;

  assign sel_6484 = 32'sd0;

  assign sel_6485 = 32'sd0;

  assign sel_6486 = 32'sd0;

  assign sel_6487 = 32'sd0;

  assign sel_6488 = 32'sd0;

  assign sel_6489 = 32'sd0;

  assign sel_6490 = 32'sd0;

  assign sel_6491 = 32'sd0;

  assign sel_6492 = 32'sd0;

  assign sel_6493 = 32'sd0;

  assign sel_6494 = 32'sd0;

  assign sel_6495 = 32'sd0;

  assign sel_6496 = 32'sd0;

  assign s_408 = 32'sd8;

  assign sel_1_1208 = (tmp_11 == 1'b0 ? sel_6496 :
              s_408);

  assign sel_6497 = 32'sd0;

  assign sel_1_1209 = (tmp_13 == 1'b0 ? sel_1_1208 :
              sel_6497);

  assign sel_6498 = 32'sd0;

  assign sel_1_1210 = (tmp_15 == 1'b0 ? sel_1_1209 :
              sel_6498);

  assign sel_6499 = 32'sd0;

  assign sel_1_1211 = (tmp_17 == 1'b0 ? sel_1_1210 :
              sel_6499);

  assign sel_1_1212 = (s_10 == 1'b0 ? sel_6495 :
              sel_1_1211);

  assign sel_1_1213 = (s_11 == 1'b0 ? sel_6494 :
              sel_1_1212);

  assign sel_6500 = 32'sd0;

  assign sel_1_1214 = (s_12 == 1'b0 ? sel_1_1213 :
              sel_6500);

  assign sel_6501 = 32'sd0;

  assign sel_6502 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1214, sel_6482, sel_6483, sel_6484, sel_6485, sel_6486,
       sel_6487, sel_6488, sel_6489, sel_6490, sel_6491, sel_6492, sel_6493,
       sel_6501, sel_6502) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9064_sel_1 = sel_6501;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9064_sel_1 = sel_1_1214;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9064_sel_1 = sel_6493;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9064_sel_1 = sel_6492;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9064_sel_1 = sel_6491;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9064_sel_1 = sel_6490;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9064_sel_1 = sel_6489;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9064_sel_1 = sel_6488;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9064_sel_1 = sel_6487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9064_sel_1 = sel_6486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9064_sel_1 = sel_6485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9064_sel_1 = sel_6484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9064_sel_1 = sel_6483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9064_sel_1 = sel_6482;
        end
      default :
        begin
          p9064_sel_1 = sel_6502;
        end
    endcase
    sel_1_1215 = p9064_sel_1;
  end

  assign tmp_307 = functionOutput_23[sel_1_1215];

  assign sel_6503 = 1'b0;

  assign sel_6504 = 1'b0;

  assign sel_6505 = 1'b0;

  assign sel_6506 = 1'b0;

  assign sel_6507 = 1'b0;

  assign sel_6508 = 1'b0;

  assign sel_6509 = 1'b0;

  assign sel_6510 = 1'b0;

  assign sel_6511 = 1'b0;

  assign sel_6512 = 1'b0;

  assign sel_6513 = 1'b0;

  assign sel_6514 = 1'b0;

  assign sel_6515 = 1'b0;

  assign sel_6516 = 1'b0;

  assign sel_6517 = 1'b0;

  assign s_409 = 1'b1;

  assign sel_2_1177 = (tmp_11 == 1'b0 ? sel_6517 :
              s_409);

  assign sel_6518 = 1'b0;

  assign sel_2_1178 = (tmp_13 == 1'b0 ? sel_2_1177 :
              sel_6518);

  assign sel_6519 = 1'b0;

  assign sel_2_1179 = (tmp_15 == 1'b0 ? sel_2_1178 :
              sel_6519);

  assign sel_6520 = 1'b0;

  assign sel_2_1180 = (tmp_17 == 1'b0 ? sel_2_1179 :
              sel_6520);

  assign sel_2_1181 = (s_10 == 1'b0 ? sel_6516 :
              sel_2_1180);

  assign sel_2_1182 = (s_11 == 1'b0 ? sel_6515 :
              sel_2_1181);

  assign sel_6521 = 1'b0;

  assign sel_2_1183 = (s_12 == 1'b0 ? sel_2_1182 :
              sel_6521);

  assign sel_6522 = 1'b0;

  assign sel_6523 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1183, sel_6503, sel_6504, sel_6505, sel_6506, sel_6507,
       sel_6508, sel_6509, sel_6510, sel_6511, sel_6512, sel_6513, sel_6514,
       sel_6522, sel_6523) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5380_sel_2 = sel_6522;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5380_sel_2 = sel_2_1183;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5380_sel_2 = sel_6514;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5380_sel_2 = sel_6513;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5380_sel_2 = sel_6512;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5380_sel_2 = sel_6511;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5380_sel_2 = sel_6510;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5380_sel_2 = sel_6509;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5380_sel_2 = sel_6508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5380_sel_2 = sel_6507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5380_sel_2 = sel_6506;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5380_sel_2 = sel_6505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5380_sel_2 = sel_6504;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5380_sel_2 = sel_6503;
        end
      default :
        begin
          p5380_sel_2 = sel_6523;
        end
    endcase
    sel_2_1184 = p5380_sel_2;
  end

  always @* begin
    p5379cont_bits_22_cont_bits_22[8] = cont_bits_22_22[8];
    if (sel_2_1184) begin
      p5379cont_bits_22_cont_bits_22[8] = tmp_307;
    end
    cont_bits_22_23[0] = cont_bits_22_22[0];
    cont_bits_22_23[1] = cont_bits_22_22[1];
    cont_bits_22_23[2] = cont_bits_22_22[2];
    cont_bits_22_23[3] = cont_bits_22_22[3];
    cont_bits_22_23[4] = cont_bits_22_22[4];
    cont_bits_22_23[5] = cont_bits_22_22[5];
    cont_bits_22_23[6] = cont_bits_22_22[6];
    cont_bits_22_23[7] = cont_bits_22_22[7];
    cont_bits_22_23[8] = p5379cont_bits_22_cont_bits_22[8];
    cont_bits_22_23[9] = cont_bits_22_22[9];
    cont_bits_22_23[10] = cont_bits_22_22[10];
    cont_bits_22_23[11] = cont_bits_22_22[11];
  end

  assign sel_6524 = 32'sd0;

  assign sel_6525 = 32'sd0;

  assign sel_6526 = 32'sd0;

  assign sel_6527 = 32'sd0;

  assign sel_6528 = 32'sd0;

  assign sel_6529 = 32'sd0;

  assign sel_6530 = 32'sd0;

  assign sel_6531 = 32'sd0;

  assign sel_6532 = 32'sd0;

  assign sel_6533 = 32'sd0;

  assign sel_6534 = 32'sd0;

  assign sel_6535 = 32'sd0;

  assign sel_6536 = 32'sd0;

  assign sel_6537 = 32'sd0;

  assign sel_6538 = 32'sd0;

  assign s_410 = 32'sd9;

  assign sel_1_1216 = (tmp_11 == 1'b0 ? sel_6538 :
              s_410);

  assign sel_6539 = 32'sd0;

  assign sel_1_1217 = (tmp_13 == 1'b0 ? sel_1_1216 :
              sel_6539);

  assign sel_6540 = 32'sd0;

  assign sel_1_1218 = (tmp_15 == 1'b0 ? sel_1_1217 :
              sel_6540);

  assign sel_6541 = 32'sd0;

  assign sel_1_1219 = (tmp_17 == 1'b0 ? sel_1_1218 :
              sel_6541);

  assign sel_1_1220 = (s_10 == 1'b0 ? sel_6537 :
              sel_1_1219);

  assign sel_1_1221 = (s_11 == 1'b0 ? sel_6536 :
              sel_1_1220);

  assign sel_6542 = 32'sd0;

  assign sel_1_1222 = (s_12 == 1'b0 ? sel_1_1221 :
              sel_6542);

  assign sel_6543 = 32'sd0;

  assign sel_6544 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1222, sel_6524, sel_6525, sel_6526, sel_6527, sel_6528,
       sel_6529, sel_6530, sel_6531, sel_6532, sel_6533, sel_6534, sel_6535,
       sel_6543, sel_6544) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9863_sel_1 = sel_6543;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9863_sel_1 = sel_1_1222;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9863_sel_1 = sel_6535;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9863_sel_1 = sel_6534;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9863_sel_1 = sel_6533;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9863_sel_1 = sel_6532;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9863_sel_1 = sel_6531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9863_sel_1 = sel_6530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9863_sel_1 = sel_6529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9863_sel_1 = sel_6528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9863_sel_1 = sel_6527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9863_sel_1 = sel_6526;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9863_sel_1 = sel_6525;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9863_sel_1 = sel_6524;
        end
      default :
        begin
          p9863_sel_1 = sel_6544;
        end
    endcase
    sel_1_1223 = p9863_sel_1;
  end

  assign tmp_308 = functionOutput_23[sel_1_1223];

  assign sel_6545 = 1'b0;

  assign sel_6546 = 1'b0;

  assign sel_6547 = 1'b0;

  assign sel_6548 = 1'b0;

  assign sel_6549 = 1'b0;

  assign sel_6550 = 1'b0;

  assign sel_6551 = 1'b0;

  assign sel_6552 = 1'b0;

  assign sel_6553 = 1'b0;

  assign sel_6554 = 1'b0;

  assign sel_6555 = 1'b0;

  assign sel_6556 = 1'b0;

  assign sel_6557 = 1'b0;

  assign sel_6558 = 1'b0;

  assign sel_6559 = 1'b0;

  assign s_411 = 1'b1;

  assign sel_2_1185 = (tmp_11 == 1'b0 ? sel_6559 :
              s_411);

  assign sel_6560 = 1'b0;

  assign sel_2_1186 = (tmp_13 == 1'b0 ? sel_2_1185 :
              sel_6560);

  assign sel_6561 = 1'b0;

  assign sel_2_1187 = (tmp_15 == 1'b0 ? sel_2_1186 :
              sel_6561);

  assign sel_6562 = 1'b0;

  assign sel_2_1188 = (tmp_17 == 1'b0 ? sel_2_1187 :
              sel_6562);

  assign sel_2_1189 = (s_10 == 1'b0 ? sel_6558 :
              sel_2_1188);

  assign sel_2_1190 = (s_11 == 1'b0 ? sel_6557 :
              sel_2_1189);

  assign sel_6563 = 1'b0;

  assign sel_2_1191 = (s_12 == 1'b0 ? sel_2_1190 :
              sel_6563);

  assign sel_6564 = 1'b0;

  assign sel_6565 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1191, sel_6545, sel_6546, sel_6547, sel_6548, sel_6549,
       sel_6550, sel_6551, sel_6552, sel_6553, sel_6554, sel_6555, sel_6556,
       sel_6564, sel_6565) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4886_sel_2 = sel_6564;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4886_sel_2 = sel_2_1191;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4886_sel_2 = sel_6556;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4886_sel_2 = sel_6555;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4886_sel_2 = sel_6554;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4886_sel_2 = sel_6553;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4886_sel_2 = sel_6552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4886_sel_2 = sel_6551;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4886_sel_2 = sel_6550;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4886_sel_2 = sel_6549;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4886_sel_2 = sel_6548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4886_sel_2 = sel_6547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4886_sel_2 = sel_6546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4886_sel_2 = sel_6545;
        end
      default :
        begin
          p4886_sel_2 = sel_6565;
        end
    endcase
    sel_2_1192 = p4886_sel_2;
  end

  always @* begin
    p4885cont_bits_22_cont_bits_22[9] = cont_bits_22_23[9];
    if (sel_2_1192) begin
      p4885cont_bits_22_cont_bits_22[9] = tmp_308;
    end
    cont_bits_22_24[0] = cont_bits_22_23[0];
    cont_bits_22_24[1] = cont_bits_22_23[1];
    cont_bits_22_24[2] = cont_bits_22_23[2];
    cont_bits_22_24[3] = cont_bits_22_23[3];
    cont_bits_22_24[4] = cont_bits_22_23[4];
    cont_bits_22_24[5] = cont_bits_22_23[5];
    cont_bits_22_24[6] = cont_bits_22_23[6];
    cont_bits_22_24[7] = cont_bits_22_23[7];
    cont_bits_22_24[8] = cont_bits_22_23[8];
    cont_bits_22_24[9] = p4885cont_bits_22_cont_bits_22[9];
    cont_bits_22_24[10] = cont_bits_22_23[10];
    cont_bits_22_24[11] = cont_bits_22_23[11];
  end

  assign sel_6566 = 32'sd0;

  assign sel_6567 = 32'sd0;

  assign sel_6568 = 32'sd0;

  assign sel_6569 = 32'sd0;

  assign sel_6570 = 32'sd0;

  assign sel_6571 = 32'sd0;

  assign sel_6572 = 32'sd0;

  assign sel_6573 = 32'sd0;

  assign sel_6574 = 32'sd0;

  assign sel_6575 = 32'sd0;

  assign sel_6576 = 32'sd0;

  assign sel_6577 = 32'sd0;

  assign sel_6578 = 32'sd0;

  assign sel_6579 = 32'sd0;

  assign sel_6580 = 32'sd0;

  assign s_412 = 32'sd10;

  assign sel_1_1224 = (tmp_11 == 1'b0 ? sel_6580 :
              s_412);

  assign sel_6581 = 32'sd0;

  assign sel_1_1225 = (tmp_13 == 1'b0 ? sel_1_1224 :
              sel_6581);

  assign sel_6582 = 32'sd0;

  assign sel_1_1226 = (tmp_15 == 1'b0 ? sel_1_1225 :
              sel_6582);

  assign sel_6583 = 32'sd0;

  assign sel_1_1227 = (tmp_17 == 1'b0 ? sel_1_1226 :
              sel_6583);

  assign sel_1_1228 = (s_10 == 1'b0 ? sel_6579 :
              sel_1_1227);

  assign sel_1_1229 = (s_11 == 1'b0 ? sel_6578 :
              sel_1_1228);

  assign sel_6584 = 32'sd0;

  assign sel_1_1230 = (s_12 == 1'b0 ? sel_1_1229 :
              sel_6584);

  assign sel_6585 = 32'sd0;

  assign sel_6586 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1230, sel_6566, sel_6567, sel_6568, sel_6569, sel_6570,
       sel_6571, sel_6572, sel_6573, sel_6574, sel_6575, sel_6576, sel_6577,
       sel_6585, sel_6586) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9727_sel_1 = sel_6585;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9727_sel_1 = sel_1_1230;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9727_sel_1 = sel_6577;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9727_sel_1 = sel_6576;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9727_sel_1 = sel_6575;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9727_sel_1 = sel_6574;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9727_sel_1 = sel_6573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9727_sel_1 = sel_6572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9727_sel_1 = sel_6571;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9727_sel_1 = sel_6570;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9727_sel_1 = sel_6569;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9727_sel_1 = sel_6568;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9727_sel_1 = sel_6567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9727_sel_1 = sel_6566;
        end
      default :
        begin
          p9727_sel_1 = sel_6586;
        end
    endcase
    sel_1_1231 = p9727_sel_1;
  end

  assign tmp_309 = functionOutput_23[sel_1_1231];

  assign sel_6587 = 1'b0;

  assign sel_6588 = 1'b0;

  assign sel_6589 = 1'b0;

  assign sel_6590 = 1'b0;

  assign sel_6591 = 1'b0;

  assign sel_6592 = 1'b0;

  assign sel_6593 = 1'b0;

  assign sel_6594 = 1'b0;

  assign sel_6595 = 1'b0;

  assign sel_6596 = 1'b0;

  assign sel_6597 = 1'b0;

  assign sel_6598 = 1'b0;

  assign sel_6599 = 1'b0;

  assign sel_6600 = 1'b0;

  assign sel_6601 = 1'b0;

  assign s_413 = 1'b1;

  assign sel_2_1193 = (tmp_11 == 1'b0 ? sel_6601 :
              s_413);

  assign sel_6602 = 1'b0;

  assign sel_2_1194 = (tmp_13 == 1'b0 ? sel_2_1193 :
              sel_6602);

  assign sel_6603 = 1'b0;

  assign sel_2_1195 = (tmp_15 == 1'b0 ? sel_2_1194 :
              sel_6603);

  assign sel_6604 = 1'b0;

  assign sel_2_1196 = (tmp_17 == 1'b0 ? sel_2_1195 :
              sel_6604);

  assign sel_2_1197 = (s_10 == 1'b0 ? sel_6600 :
              sel_2_1196);

  assign sel_2_1198 = (s_11 == 1'b0 ? sel_6599 :
              sel_2_1197);

  assign sel_6605 = 1'b0;

  assign sel_2_1199 = (s_12 == 1'b0 ? sel_2_1198 :
              sel_6605);

  assign sel_6606 = 1'b0;

  assign sel_6607 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1199, sel_6587, sel_6588, sel_6589, sel_6590, sel_6591,
       sel_6592, sel_6593, sel_6594, sel_6595, sel_6596, sel_6597, sel_6598,
       sel_6606, sel_6607) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4774_sel_2 = sel_6606;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4774_sel_2 = sel_2_1199;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4774_sel_2 = sel_6598;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4774_sel_2 = sel_6597;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4774_sel_2 = sel_6596;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4774_sel_2 = sel_6595;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4774_sel_2 = sel_6594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4774_sel_2 = sel_6593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4774_sel_2 = sel_6592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4774_sel_2 = sel_6591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4774_sel_2 = sel_6590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4774_sel_2 = sel_6589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4774_sel_2 = sel_6588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4774_sel_2 = sel_6587;
        end
      default :
        begin
          p4774_sel_2 = sel_6607;
        end
    endcase
    sel_2_1200 = p4774_sel_2;
  end

  always @* begin
    p4773cont_bits_22_cont_bits_22[10] = cont_bits_22_24[10];
    if (sel_2_1200) begin
      p4773cont_bits_22_cont_bits_22[10] = tmp_309;
    end
    cont_bits_22_25[0] = cont_bits_22_24[0];
    cont_bits_22_25[1] = cont_bits_22_24[1];
    cont_bits_22_25[2] = cont_bits_22_24[2];
    cont_bits_22_25[3] = cont_bits_22_24[3];
    cont_bits_22_25[4] = cont_bits_22_24[4];
    cont_bits_22_25[5] = cont_bits_22_24[5];
    cont_bits_22_25[6] = cont_bits_22_24[6];
    cont_bits_22_25[7] = cont_bits_22_24[7];
    cont_bits_22_25[8] = cont_bits_22_24[8];
    cont_bits_22_25[9] = cont_bits_22_24[9];
    cont_bits_22_25[10] = p4773cont_bits_22_cont_bits_22[10];
    cont_bits_22_25[11] = cont_bits_22_24[11];
  end

  assign sel_6608 = 32'sd0;

  assign sel_6609 = 32'sd0;

  assign sel_6610 = 32'sd0;

  assign sel_6611 = 32'sd0;

  assign sel_6612 = 32'sd0;

  assign sel_6613 = 32'sd0;

  assign sel_6614 = 32'sd0;

  assign sel_6615 = 32'sd0;

  assign sel_6616 = 32'sd0;

  assign sel_6617 = 32'sd0;

  assign sel_6618 = 32'sd0;

  assign sel_6619 = 32'sd0;

  assign sel_6620 = 32'sd0;

  assign sel_6621 = 32'sd0;

  assign sel_6622 = 32'sd0;

  assign s_414 = 32'sd11;

  assign sel_1_1232 = (tmp_11 == 1'b0 ? sel_6622 :
              s_414);

  assign sel_6623 = 32'sd0;

  assign sel_1_1233 = (tmp_13 == 1'b0 ? sel_1_1232 :
              sel_6623);

  assign sel_6624 = 32'sd0;

  assign sel_1_1234 = (tmp_15 == 1'b0 ? sel_1_1233 :
              sel_6624);

  assign sel_6625 = 32'sd0;

  assign sel_1_1235 = (tmp_17 == 1'b0 ? sel_1_1234 :
              sel_6625);

  assign sel_1_1236 = (s_10 == 1'b0 ? sel_6621 :
              sel_1_1235);

  assign sel_1_1237 = (s_11 == 1'b0 ? sel_6620 :
              sel_1_1236);

  assign sel_6626 = 32'sd0;

  assign sel_1_1238 = (s_12 == 1'b0 ? sel_1_1237 :
              sel_6626);

  assign sel_6627 = 32'sd0;

  assign sel_6628 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1238, sel_6608, sel_6609, sel_6610, sel_6611, sel_6612,
       sel_6613, sel_6614, sel_6615, sel_6616, sel_6617, sel_6618, sel_6619,
       sel_6627, sel_6628) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9013_sel_1 = sel_6627;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9013_sel_1 = sel_1_1238;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9013_sel_1 = sel_6619;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9013_sel_1 = sel_6618;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9013_sel_1 = sel_6617;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9013_sel_1 = sel_6616;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9013_sel_1 = sel_6615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9013_sel_1 = sel_6614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9013_sel_1 = sel_6613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9013_sel_1 = sel_6612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9013_sel_1 = sel_6611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9013_sel_1 = sel_6610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9013_sel_1 = sel_6609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9013_sel_1 = sel_6608;
        end
      default :
        begin
          p9013_sel_1 = sel_6628;
        end
    endcase
    sel_1_1239 = p9013_sel_1;
  end

  assign tmp_310 = functionOutput_23[sel_1_1239];

  assign sel_6629 = 1'b0;

  assign sel_6630 = 1'b0;

  assign sel_6631 = 1'b0;

  assign sel_6632 = 1'b0;

  assign sel_6633 = 1'b0;

  assign sel_6634 = 1'b0;

  assign sel_6635 = 1'b0;

  assign sel_6636 = 1'b0;

  assign sel_6637 = 1'b0;

  assign sel_6638 = 1'b0;

  assign sel_6639 = 1'b0;

  assign sel_6640 = 1'b0;

  assign sel_6641 = 1'b0;

  assign sel_6642 = 1'b0;

  assign sel_6643 = 1'b0;

  assign s_415 = 1'b1;

  assign sel_2_1201 = (tmp_11 == 1'b0 ? sel_6643 :
              s_415);

  assign sel_6644 = 1'b0;

  assign sel_2_1202 = (tmp_13 == 1'b0 ? sel_2_1201 :
              sel_6644);

  assign sel_6645 = 1'b0;

  assign sel_2_1203 = (tmp_15 == 1'b0 ? sel_2_1202 :
              sel_6645);

  assign sel_6646 = 1'b0;

  assign sel_2_1204 = (tmp_17 == 1'b0 ? sel_2_1203 :
              sel_6646);

  assign sel_2_1205 = (s_10 == 1'b0 ? sel_6642 :
              sel_2_1204);

  assign sel_2_1206 = (s_11 == 1'b0 ? sel_6641 :
              sel_2_1205);

  assign sel_6647 = 1'b0;

  assign sel_2_1207 = (s_12 == 1'b0 ? sel_2_1206 :
              sel_6647);

  assign sel_6648 = 1'b0;

  assign sel_6649 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1207, sel_6629, sel_6630, sel_6631, sel_6632, sel_6633,
       sel_6634, sel_6635, sel_6636, sel_6637, sel_6638, sel_6639, sel_6640,
       sel_6648, sel_6649) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4280_sel_2 = sel_6648;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4280_sel_2 = sel_2_1207;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4280_sel_2 = sel_6640;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4280_sel_2 = sel_6639;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4280_sel_2 = sel_6638;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4280_sel_2 = sel_6637;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4280_sel_2 = sel_6636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4280_sel_2 = sel_6635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4280_sel_2 = sel_6634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4280_sel_2 = sel_6633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4280_sel_2 = sel_6632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4280_sel_2 = sel_6631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4280_sel_2 = sel_6630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4280_sel_2 = sel_6629;
        end
      default :
        begin
          p4280_sel_2 = sel_6649;
        end
    endcase
    sel_2_1208 = p4280_sel_2;
  end

  always @* begin
    p4279cont_bits_22_cont_bits_22[11] = cont_bits_22_25[11];
    if (sel_2_1208) begin
      p4279cont_bits_22_cont_bits_22[11] = tmp_310;
    end
    cont_bits_22_26[0] = cont_bits_22_25[0];
    cont_bits_22_26[1] = cont_bits_22_25[1];
    cont_bits_22_26[2] = cont_bits_22_25[2];
    cont_bits_22_26[3] = cont_bits_22_25[3];
    cont_bits_22_26[4] = cont_bits_22_25[4];
    cont_bits_22_26[5] = cont_bits_22_25[5];
    cont_bits_22_26[6] = cont_bits_22_25[6];
    cont_bits_22_26[7] = cont_bits_22_25[7];
    cont_bits_22_26[8] = cont_bits_22_25[8];
    cont_bits_22_26[9] = cont_bits_22_25[9];
    cont_bits_22_26[10] = cont_bits_22_25[10];
    cont_bits_22_26[11] = p4279cont_bits_22_cont_bits_22[11];
  end

  assign sel_6650 = 32'sd0;

  assign sel_6651 = 32'sd0;

  assign sel_6652 = 32'sd0;

  assign sel_6653 = 32'sd0;

  assign sel_6654 = 32'sd0;

  assign sel_6655 = 32'sd0;

  assign sel_6656 = 32'sd0;

  assign sel_6657 = 32'sd0;

  assign sel_6658 = 32'sd0;

  assign sel_6659 = 32'sd0;

  assign sel_6660 = 32'sd0;

  assign sel_6661 = 32'sd0;

  assign sel_6662 = 32'sd0;

  assign sel_6663 = 32'sd0;

  assign sel_6664 = 32'sd0;

  assign s_416 = 32'sd0;

  assign sel_1_1240 = (tmp_11 == 1'b0 ? sel_6664 :
              s_416);

  assign sel_6665 = 32'sd0;

  assign sel_1_1241 = (tmp_13 == 1'b0 ? sel_1_1240 :
              sel_6665);

  assign sel_6666 = 32'sd0;

  assign sel_1_1242 = (tmp_15 == 1'b0 ? sel_1_1241 :
              sel_6666);

  assign sel_6667 = 32'sd0;

  assign sel_1_1243 = (tmp_17 == 1'b0 ? sel_1_1242 :
              sel_6667);

  assign sel_1_1244 = (s_10 == 1'b0 ? sel_6663 :
              sel_1_1243);

  assign sel_1_1245 = (s_11 == 1'b0 ? sel_6662 :
              sel_1_1244);

  assign sel_6668 = 32'sd0;

  assign sel_1_1246 = (s_12 == 1'b0 ? sel_1_1245 :
              sel_6668);

  assign sel_6669 = 32'sd0;

  assign sel_6670 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1246, sel_6650, sel_6651, sel_6652, sel_6653, sel_6654,
       sel_6655, sel_6656, sel_6657, sel_6658, sel_6659, sel_6660, sel_6661,
       sel_6669, sel_6670) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3892_sel_1 = sel_6669;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3892_sel_1 = sel_1_1246;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3892_sel_1 = sel_6661;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3892_sel_1 = sel_6660;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3892_sel_1 = sel_6659;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3892_sel_1 = sel_6658;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3892_sel_1 = sel_6657;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3892_sel_1 = sel_6656;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3892_sel_1 = sel_6655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3892_sel_1 = sel_6654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3892_sel_1 = sel_6653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3892_sel_1 = sel_6652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3892_sel_1 = sel_6651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3892_sel_1 = sel_6650;
        end
      default :
        begin
          p3892_sel_1 = sel_6670;
        end
    endcase
    sel_1_1247 = p3892_sel_1;
  end

  assign cont_bits_22_27 = cont_bits_22_26[sel_1_1247];

  assign sel_1_1248 = (tmp_11 == 1'b0 ? sel_1_1143 :
              cont_bits_22_27);

  assign cont_bits_21_14[0] = 1'b0;
  assign cont_bits_21_14[1] = 1'b0;
  assign cont_bits_21_14[2] = 1'b0;
  assign cont_bits_21_14[3] = 1'b0;
  assign cont_bits_21_14[4] = 1'b0;
  assign cont_bits_21_14[5] = 1'b0;
  assign cont_bits_21_14[6] = 1'b0;
  assign cont_bits_21_14[7] = 1'b0;
  assign cont_bits_21_14[8] = 1'b0;
  assign cont_bits_21_14[9] = 1'b0;
  assign cont_bits_21_14[10] = 1'b0;
  assign cont_bits_21_14[11] = 1'b0;

  simfcn1 u_simfcn1_13 (.vx(r_v21),  // uint16
                        .cont_bits2_0(functionOutput_0_13),  // boolean
                        .cont_bits2_1(functionOutput_1_13),  // boolean
                        .cont_bits2_2(functionOutput_2_13),  // boolean
                        .cont_bits2_3(functionOutput_3_13),  // boolean
                        .cont_bits2_4(functionOutput_4_13),  // boolean
                        .cont_bits2_5(functionOutput_5_13),  // boolean
                        .cont_bits2_6(functionOutput_6_13),  // boolean
                        .cont_bits2_7(functionOutput_7_13),  // boolean
                        .cont_bits2_8(functionOutput_8_13),  // boolean
                        .cont_bits2_9(functionOutput_9_13),  // boolean
                        .cont_bits2_10(functionOutput_10_13),  // boolean
                        .cont_bits2_11(functionOutput_11_13)  // boolean
                        );

  assign functionOutput_24[0] = functionOutput_0_13;
  assign functionOutput_24[1] = functionOutput_1_13;
  assign functionOutput_24[2] = functionOutput_2_13;
  assign functionOutput_24[3] = functionOutput_3_13;
  assign functionOutput_24[4] = functionOutput_4_13;
  assign functionOutput_24[5] = functionOutput_5_13;
  assign functionOutput_24[6] = functionOutput_6_13;
  assign functionOutput_24[7] = functionOutput_7_13;
  assign functionOutput_24[8] = functionOutput_8_13;
  assign functionOutput_24[9] = functionOutput_9_13;
  assign functionOutput_24[10] = functionOutput_10_13;
  assign functionOutput_24[11] = functionOutput_11_13;

  assign sel_6671 = 32'sd0;

  assign sel_6672 = 32'sd0;

  assign sel_6673 = 32'sd0;

  assign sel_6674 = 32'sd0;

  assign sel_6675 = 32'sd0;

  assign sel_6676 = 32'sd0;

  assign sel_6677 = 32'sd0;

  assign sel_6678 = 32'sd0;

  assign sel_6679 = 32'sd0;

  assign sel_6680 = 32'sd0;

  assign sel_6681 = 32'sd0;

  assign sel_6682 = 32'sd0;

  assign sel_6683 = 32'sd0;

  assign sel_6684 = 32'sd0;

  assign sel_6685 = 32'sd0;

  assign s_417 = 32'sd0;

  assign sel_1_1249 = (tmp_13 == 1'b0 ? sel_6685 :
              s_417);

  assign sel_6686 = 32'sd0;

  assign sel_1_1250 = (tmp_15 == 1'b0 ? sel_1_1249 :
              sel_6686);

  assign sel_6687 = 32'sd0;

  assign sel_1_1251 = (tmp_17 == 1'b0 ? sel_1_1250 :
              sel_6687);

  assign sel_1_1252 = (s_10 == 1'b0 ? sel_6684 :
              sel_1_1251);

  assign sel_1_1253 = (s_11 == 1'b0 ? sel_6683 :
              sel_1_1252);

  assign sel_6688 = 32'sd0;

  assign sel_1_1254 = (s_12 == 1'b0 ? sel_1_1253 :
              sel_6688);

  assign sel_6689 = 32'sd0;

  assign sel_6690 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1254, sel_6671, sel_6672, sel_6673, sel_6674, sel_6675,
       sel_6676, sel_6677, sel_6678, sel_6679, sel_6680, sel_6681, sel_6682,
       sel_6689, sel_6690) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9166_sel_1 = sel_6689;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9166_sel_1 = sel_1_1254;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9166_sel_1 = sel_6682;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9166_sel_1 = sel_6681;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9166_sel_1 = sel_6680;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9166_sel_1 = sel_6679;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9166_sel_1 = sel_6678;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9166_sel_1 = sel_6677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9166_sel_1 = sel_6676;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9166_sel_1 = sel_6675;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9166_sel_1 = sel_6674;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9166_sel_1 = sel_6673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9166_sel_1 = sel_6672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9166_sel_1 = sel_6671;
        end
      default :
        begin
          p9166_sel_1 = sel_6690;
        end
    endcase
    sel_1_1255 = p9166_sel_1;
  end

  assign tmp_311 = functionOutput_24[sel_1_1255];

  assign sel_6691 = 1'b0;

  assign sel_6692 = 1'b0;

  assign sel_6693 = 1'b0;

  assign sel_6694 = 1'b0;

  assign sel_6695 = 1'b0;

  assign sel_6696 = 1'b0;

  assign sel_6697 = 1'b0;

  assign sel_6698 = 1'b0;

  assign sel_6699 = 1'b0;

  assign sel_6700 = 1'b0;

  assign sel_6701 = 1'b0;

  assign sel_6702 = 1'b0;

  assign sel_6703 = 1'b0;

  assign sel_6704 = 1'b0;

  assign sel_6705 = 1'b0;

  assign s_418 = 1'b1;

  assign sel_2_1209 = (tmp_13 == 1'b0 ? sel_6705 :
              s_418);

  assign sel_6706 = 1'b0;

  assign sel_2_1210 = (tmp_15 == 1'b0 ? sel_2_1209 :
              sel_6706);

  assign sel_6707 = 1'b0;

  assign sel_2_1211 = (tmp_17 == 1'b0 ? sel_2_1210 :
              sel_6707);

  assign sel_2_1212 = (s_10 == 1'b0 ? sel_6704 :
              sel_2_1211);

  assign sel_2_1213 = (s_11 == 1'b0 ? sel_6703 :
              sel_2_1212);

  assign sel_6708 = 1'b0;

  assign sel_2_1214 = (s_12 == 1'b0 ? sel_2_1213 :
              sel_6708);

  assign sel_6709 = 1'b0;

  assign sel_6710 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1214, sel_6691, sel_6692, sel_6693, sel_6694, sel_6695,
       sel_6696, sel_6697, sel_6698, sel_6699, sel_6700, sel_6701, sel_6702,
       sel_6709, sel_6710) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7769_sel_2 = sel_6709;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7769_sel_2 = sel_2_1214;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7769_sel_2 = sel_6702;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7769_sel_2 = sel_6701;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7769_sel_2 = sel_6700;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7769_sel_2 = sel_6699;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7769_sel_2 = sel_6698;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7769_sel_2 = sel_6697;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7769_sel_2 = sel_6696;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7769_sel_2 = sel_6695;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7769_sel_2 = sel_6694;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7769_sel_2 = sel_6693;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7769_sel_2 = sel_6692;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7769_sel_2 = sel_6691;
        end
      default :
        begin
          p7769_sel_2 = sel_6710;
        end
    endcase
    sel_2_1215 = p7769_sel_2;
  end

  always @* begin
    p7768cont_bits_21_cont_bits_21[0] = cont_bits_21_14[0];
    if (sel_2_1215) begin
      p7768cont_bits_21_cont_bits_21[0] = tmp_311;
    end
    cont_bits_21_15[0] = p7768cont_bits_21_cont_bits_21[0];
    cont_bits_21_15[1] = cont_bits_21_14[1];
    cont_bits_21_15[2] = cont_bits_21_14[2];
    cont_bits_21_15[3] = cont_bits_21_14[3];
    cont_bits_21_15[4] = cont_bits_21_14[4];
    cont_bits_21_15[5] = cont_bits_21_14[5];
    cont_bits_21_15[6] = cont_bits_21_14[6];
    cont_bits_21_15[7] = cont_bits_21_14[7];
    cont_bits_21_15[8] = cont_bits_21_14[8];
    cont_bits_21_15[9] = cont_bits_21_14[9];
    cont_bits_21_15[10] = cont_bits_21_14[10];
    cont_bits_21_15[11] = cont_bits_21_14[11];
  end

  assign sel_6711 = 32'sd0;

  assign sel_6712 = 32'sd0;

  assign sel_6713 = 32'sd0;

  assign sel_6714 = 32'sd0;

  assign sel_6715 = 32'sd0;

  assign sel_6716 = 32'sd0;

  assign sel_6717 = 32'sd0;

  assign sel_6718 = 32'sd0;

  assign sel_6719 = 32'sd0;

  assign sel_6720 = 32'sd0;

  assign sel_6721 = 32'sd0;

  assign sel_6722 = 32'sd0;

  assign sel_6723 = 32'sd0;

  assign sel_6724 = 32'sd0;

  assign sel_6725 = 32'sd0;

  assign s_419 = 32'sd1;

  assign sel_1_1256 = (tmp_13 == 1'b0 ? sel_6725 :
              s_419);

  assign sel_6726 = 32'sd0;

  assign sel_1_1257 = (tmp_15 == 1'b0 ? sel_1_1256 :
              sel_6726);

  assign sel_6727 = 32'sd0;

  assign sel_1_1258 = (tmp_17 == 1'b0 ? sel_1_1257 :
              sel_6727);

  assign sel_1_1259 = (s_10 == 1'b0 ? sel_6724 :
              sel_1_1258);

  assign sel_1_1260 = (s_11 == 1'b0 ? sel_6723 :
              sel_1_1259);

  assign sel_6728 = 32'sd0;

  assign sel_1_1261 = (s_12 == 1'b0 ? sel_1_1260 :
              sel_6728);

  assign sel_6729 = 32'sd0;

  assign sel_6730 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1261, sel_6711, sel_6712, sel_6713, sel_6714, sel_6715,
       sel_6716, sel_6717, sel_6718, sel_6719, sel_6720, sel_6721, sel_6722,
       sel_6729, sel_6730) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9540_sel_1 = sel_6729;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9540_sel_1 = sel_1_1261;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9540_sel_1 = sel_6722;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9540_sel_1 = sel_6721;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9540_sel_1 = sel_6720;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9540_sel_1 = sel_6719;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9540_sel_1 = sel_6718;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9540_sel_1 = sel_6717;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9540_sel_1 = sel_6716;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9540_sel_1 = sel_6715;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9540_sel_1 = sel_6714;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9540_sel_1 = sel_6713;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9540_sel_1 = sel_6712;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9540_sel_1 = sel_6711;
        end
      default :
        begin
          p9540_sel_1 = sel_6730;
        end
    endcase
    sel_1_1262 = p9540_sel_1;
  end

  assign tmp_312 = functionOutput_24[sel_1_1262];

  assign sel_6731 = 1'b0;

  assign sel_6732 = 1'b0;

  assign sel_6733 = 1'b0;

  assign sel_6734 = 1'b0;

  assign sel_6735 = 1'b0;

  assign sel_6736 = 1'b0;

  assign sel_6737 = 1'b0;

  assign sel_6738 = 1'b0;

  assign sel_6739 = 1'b0;

  assign sel_6740 = 1'b0;

  assign sel_6741 = 1'b0;

  assign sel_6742 = 1'b0;

  assign sel_6743 = 1'b0;

  assign sel_6744 = 1'b0;

  assign sel_6745 = 1'b0;

  assign s_420 = 1'b1;

  assign sel_2_1216 = (tmp_13 == 1'b0 ? sel_6745 :
              s_420);

  assign sel_6746 = 1'b0;

  assign sel_2_1217 = (tmp_15 == 1'b0 ? sel_2_1216 :
              sel_6746);

  assign sel_6747 = 1'b0;

  assign sel_2_1218 = (tmp_17 == 1'b0 ? sel_2_1217 :
              sel_6747);

  assign sel_2_1219 = (s_10 == 1'b0 ? sel_6744 :
              sel_2_1218);

  assign sel_2_1220 = (s_11 == 1'b0 ? sel_6743 :
              sel_2_1219);

  assign sel_6748 = 1'b0;

  assign sel_2_1221 = (s_12 == 1'b0 ? sel_2_1220 :
              sel_6748);

  assign sel_6749 = 1'b0;

  assign sel_6750 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1221, sel_6731, sel_6732, sel_6733, sel_6734, sel_6735,
       sel_6736, sel_6737, sel_6738, sel_6739, sel_6740, sel_6741, sel_6742,
       sel_6749, sel_6750) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7410_sel_2 = sel_6749;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7410_sel_2 = sel_2_1221;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7410_sel_2 = sel_6742;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7410_sel_2 = sel_6741;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7410_sel_2 = sel_6740;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7410_sel_2 = sel_6739;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7410_sel_2 = sel_6738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7410_sel_2 = sel_6737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7410_sel_2 = sel_6736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7410_sel_2 = sel_6735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7410_sel_2 = sel_6734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7410_sel_2 = sel_6733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7410_sel_2 = sel_6732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7410_sel_2 = sel_6731;
        end
      default :
        begin
          p7410_sel_2 = sel_6750;
        end
    endcase
    sel_2_1222 = p7410_sel_2;
  end

  always @* begin
    p7409cont_bits_21_cont_bits_21[1] = cont_bits_21_15[1];
    if (sel_2_1222) begin
      p7409cont_bits_21_cont_bits_21[1] = tmp_312;
    end
    cont_bits_21_16[0] = cont_bits_21_15[0];
    cont_bits_21_16[1] = p7409cont_bits_21_cont_bits_21[1];
    cont_bits_21_16[2] = cont_bits_21_15[2];
    cont_bits_21_16[3] = cont_bits_21_15[3];
    cont_bits_21_16[4] = cont_bits_21_15[4];
    cont_bits_21_16[5] = cont_bits_21_15[5];
    cont_bits_21_16[6] = cont_bits_21_15[6];
    cont_bits_21_16[7] = cont_bits_21_15[7];
    cont_bits_21_16[8] = cont_bits_21_15[8];
    cont_bits_21_16[9] = cont_bits_21_15[9];
    cont_bits_21_16[10] = cont_bits_21_15[10];
    cont_bits_21_16[11] = cont_bits_21_15[11];
  end

  assign sel_6751 = 32'sd0;

  assign sel_6752 = 32'sd0;

  assign sel_6753 = 32'sd0;

  assign sel_6754 = 32'sd0;

  assign sel_6755 = 32'sd0;

  assign sel_6756 = 32'sd0;

  assign sel_6757 = 32'sd0;

  assign sel_6758 = 32'sd0;

  assign sel_6759 = 32'sd0;

  assign sel_6760 = 32'sd0;

  assign sel_6761 = 32'sd0;

  assign sel_6762 = 32'sd0;

  assign sel_6763 = 32'sd0;

  assign sel_6764 = 32'sd0;

  assign sel_6765 = 32'sd0;

  assign s_421 = 32'sd2;

  assign sel_1_1263 = (tmp_13 == 1'b0 ? sel_6765 :
              s_421);

  assign sel_6766 = 32'sd0;

  assign sel_1_1264 = (tmp_15 == 1'b0 ? sel_1_1263 :
              sel_6766);

  assign sel_6767 = 32'sd0;

  assign sel_1_1265 = (tmp_17 == 1'b0 ? sel_1_1264 :
              sel_6767);

  assign sel_1_1266 = (s_10 == 1'b0 ? sel_6764 :
              sel_1_1265);

  assign sel_1_1267 = (s_11 == 1'b0 ? sel_6763 :
              sel_1_1266);

  assign sel_6768 = 32'sd0;

  assign sel_1_1268 = (s_12 == 1'b0 ? sel_1_1267 :
              sel_6768);

  assign sel_6769 = 32'sd0;

  assign sel_6770 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1268, sel_6751, sel_6752, sel_6753, sel_6754, sel_6755,
       sel_6756, sel_6757, sel_6758, sel_6759, sel_6760, sel_6761, sel_6762,
       sel_6769, sel_6770) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9132_sel_1 = sel_6769;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9132_sel_1 = sel_1_1268;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9132_sel_1 = sel_6762;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9132_sel_1 = sel_6761;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9132_sel_1 = sel_6760;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9132_sel_1 = sel_6759;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9132_sel_1 = sel_6758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9132_sel_1 = sel_6757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9132_sel_1 = sel_6756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9132_sel_1 = sel_6755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9132_sel_1 = sel_6754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9132_sel_1 = sel_6753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9132_sel_1 = sel_6752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9132_sel_1 = sel_6751;
        end
      default :
        begin
          p9132_sel_1 = sel_6770;
        end
    endcase
    sel_1_1269 = p9132_sel_1;
  end

  assign tmp_313 = functionOutput_24[sel_1_1269];

  assign sel_6771 = 1'b0;

  assign sel_6772 = 1'b0;

  assign sel_6773 = 1'b0;

  assign sel_6774 = 1'b0;

  assign sel_6775 = 1'b0;

  assign sel_6776 = 1'b0;

  assign sel_6777 = 1'b0;

  assign sel_6778 = 1'b0;

  assign sel_6779 = 1'b0;

  assign sel_6780 = 1'b0;

  assign sel_6781 = 1'b0;

  assign sel_6782 = 1'b0;

  assign sel_6783 = 1'b0;

  assign sel_6784 = 1'b0;

  assign sel_6785 = 1'b0;

  assign s_422 = 1'b1;

  assign sel_2_1223 = (tmp_13 == 1'b0 ? sel_6785 :
              s_422);

  assign sel_6786 = 1'b0;

  assign sel_2_1224 = (tmp_15 == 1'b0 ? sel_2_1223 :
              sel_6786);

  assign sel_6787 = 1'b0;

  assign sel_2_1225 = (tmp_17 == 1'b0 ? sel_2_1224 :
              sel_6787);

  assign sel_2_1226 = (s_10 == 1'b0 ? sel_6784 :
              sel_2_1225);

  assign sel_2_1227 = (s_11 == 1'b0 ? sel_6783 :
              sel_2_1226);

  assign sel_6788 = 1'b0;

  assign sel_2_1228 = (s_12 == 1'b0 ? sel_2_1227 :
              sel_6788);

  assign sel_6789 = 1'b0;

  assign sel_6790 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1228, sel_6771, sel_6772, sel_6773, sel_6774, sel_6775,
       sel_6776, sel_6777, sel_6778, sel_6779, sel_6780, sel_6781, sel_6782,
       sel_6789, sel_6790) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7131_sel_2 = sel_6789;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7131_sel_2 = sel_2_1228;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7131_sel_2 = sel_6782;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7131_sel_2 = sel_6781;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7131_sel_2 = sel_6780;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7131_sel_2 = sel_6779;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7131_sel_2 = sel_6778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7131_sel_2 = sel_6777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7131_sel_2 = sel_6776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7131_sel_2 = sel_6775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7131_sel_2 = sel_6774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7131_sel_2 = sel_6773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7131_sel_2 = sel_6772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7131_sel_2 = sel_6771;
        end
      default :
        begin
          p7131_sel_2 = sel_6790;
        end
    endcase
    sel_2_1229 = p7131_sel_2;
  end

  always @* begin
    p7130cont_bits_21_cont_bits_21[2] = cont_bits_21_16[2];
    if (sel_2_1229) begin
      p7130cont_bits_21_cont_bits_21[2] = tmp_313;
    end
    cont_bits_21_17[0] = cont_bits_21_16[0];
    cont_bits_21_17[1] = cont_bits_21_16[1];
    cont_bits_21_17[2] = p7130cont_bits_21_cont_bits_21[2];
    cont_bits_21_17[3] = cont_bits_21_16[3];
    cont_bits_21_17[4] = cont_bits_21_16[4];
    cont_bits_21_17[5] = cont_bits_21_16[5];
    cont_bits_21_17[6] = cont_bits_21_16[6];
    cont_bits_21_17[7] = cont_bits_21_16[7];
    cont_bits_21_17[8] = cont_bits_21_16[8];
    cont_bits_21_17[9] = cont_bits_21_16[9];
    cont_bits_21_17[10] = cont_bits_21_16[10];
    cont_bits_21_17[11] = cont_bits_21_16[11];
  end

  assign sel_6791 = 32'sd0;

  assign sel_6792 = 32'sd0;

  assign sel_6793 = 32'sd0;

  assign sel_6794 = 32'sd0;

  assign sel_6795 = 32'sd0;

  assign sel_6796 = 32'sd0;

  assign sel_6797 = 32'sd0;

  assign sel_6798 = 32'sd0;

  assign sel_6799 = 32'sd0;

  assign sel_6800 = 32'sd0;

  assign sel_6801 = 32'sd0;

  assign sel_6802 = 32'sd0;

  assign sel_6803 = 32'sd0;

  assign sel_6804 = 32'sd0;

  assign sel_6805 = 32'sd0;

  assign s_423 = 32'sd3;

  assign sel_1_1270 = (tmp_13 == 1'b0 ? sel_6805 :
              s_423);

  assign sel_6806 = 32'sd0;

  assign sel_1_1271 = (tmp_15 == 1'b0 ? sel_1_1270 :
              sel_6806);

  assign sel_6807 = 32'sd0;

  assign sel_1_1272 = (tmp_17 == 1'b0 ? sel_1_1271 :
              sel_6807);

  assign sel_1_1273 = (s_10 == 1'b0 ? sel_6804 :
              sel_1_1272);

  assign sel_1_1274 = (s_11 == 1'b0 ? sel_6803 :
              sel_1_1273);

  assign sel_6808 = 32'sd0;

  assign sel_1_1275 = (s_12 == 1'b0 ? sel_1_1274 :
              sel_6808);

  assign sel_6809 = 32'sd0;

  assign sel_6810 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1275, sel_6791, sel_6792, sel_6793, sel_6794, sel_6795,
       sel_6796, sel_6797, sel_6798, sel_6799, sel_6800, sel_6801, sel_6802,
       sel_6809, sel_6810) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9421_sel_1 = sel_6809;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9421_sel_1 = sel_1_1275;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9421_sel_1 = sel_6802;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9421_sel_1 = sel_6801;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9421_sel_1 = sel_6800;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9421_sel_1 = sel_6799;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9421_sel_1 = sel_6798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9421_sel_1 = sel_6797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9421_sel_1 = sel_6796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9421_sel_1 = sel_6795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9421_sel_1 = sel_6794;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9421_sel_1 = sel_6793;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9421_sel_1 = sel_6792;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9421_sel_1 = sel_6791;
        end
      default :
        begin
          p9421_sel_1 = sel_6810;
        end
    endcase
    sel_1_1276 = p9421_sel_1;
  end

  assign tmp_314 = functionOutput_24[sel_1_1276];

  assign sel_6811 = 1'b0;

  assign sel_6812 = 1'b0;

  assign sel_6813 = 1'b0;

  assign sel_6814 = 1'b0;

  assign sel_6815 = 1'b0;

  assign sel_6816 = 1'b0;

  assign sel_6817 = 1'b0;

  assign sel_6818 = 1'b0;

  assign sel_6819 = 1'b0;

  assign sel_6820 = 1'b0;

  assign sel_6821 = 1'b0;

  assign sel_6822 = 1'b0;

  assign sel_6823 = 1'b0;

  assign sel_6824 = 1'b0;

  assign sel_6825 = 1'b0;

  assign s_424 = 1'b1;

  assign sel_2_1230 = (tmp_13 == 1'b0 ? sel_6825 :
              s_424);

  assign sel_6826 = 1'b0;

  assign sel_2_1231 = (tmp_15 == 1'b0 ? sel_2_1230 :
              sel_6826);

  assign sel_6827 = 1'b0;

  assign sel_2_1232 = (tmp_17 == 1'b0 ? sel_2_1231 :
              sel_6827);

  assign sel_2_1233 = (s_10 == 1'b0 ? sel_6824 :
              sel_2_1232);

  assign sel_2_1234 = (s_11 == 1'b0 ? sel_6823 :
              sel_2_1233);

  assign sel_6828 = 1'b0;

  assign sel_2_1235 = (s_12 == 1'b0 ? sel_2_1234 :
              sel_6828);

  assign sel_6829 = 1'b0;

  assign sel_6830 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1235, sel_6811, sel_6812, sel_6813, sel_6814, sel_6815,
       sel_6816, sel_6817, sel_6818, sel_6819, sel_6820, sel_6821, sel_6822,
       sel_6829, sel_6830) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6772_sel_2 = sel_6829;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6772_sel_2 = sel_2_1235;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6772_sel_2 = sel_6822;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6772_sel_2 = sel_6821;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6772_sel_2 = sel_6820;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6772_sel_2 = sel_6819;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6772_sel_2 = sel_6818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6772_sel_2 = sel_6817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6772_sel_2 = sel_6816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6772_sel_2 = sel_6815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6772_sel_2 = sel_6814;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6772_sel_2 = sel_6813;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6772_sel_2 = sel_6812;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6772_sel_2 = sel_6811;
        end
      default :
        begin
          p6772_sel_2 = sel_6830;
        end
    endcase
    sel_2_1236 = p6772_sel_2;
  end

  always @* begin
    p6771cont_bits_21_cont_bits_21[3] = cont_bits_21_17[3];
    if (sel_2_1236) begin
      p6771cont_bits_21_cont_bits_21[3] = tmp_314;
    end
    cont_bits_21_18[0] = cont_bits_21_17[0];
    cont_bits_21_18[1] = cont_bits_21_17[1];
    cont_bits_21_18[2] = cont_bits_21_17[2];
    cont_bits_21_18[3] = p6771cont_bits_21_cont_bits_21[3];
    cont_bits_21_18[4] = cont_bits_21_17[4];
    cont_bits_21_18[5] = cont_bits_21_17[5];
    cont_bits_21_18[6] = cont_bits_21_17[6];
    cont_bits_21_18[7] = cont_bits_21_17[7];
    cont_bits_21_18[8] = cont_bits_21_17[8];
    cont_bits_21_18[9] = cont_bits_21_17[9];
    cont_bits_21_18[10] = cont_bits_21_17[10];
    cont_bits_21_18[11] = cont_bits_21_17[11];
  end

  assign sel_6831 = 32'sd0;

  assign sel_6832 = 32'sd0;

  assign sel_6833 = 32'sd0;

  assign sel_6834 = 32'sd0;

  assign sel_6835 = 32'sd0;

  assign sel_6836 = 32'sd0;

  assign sel_6837 = 32'sd0;

  assign sel_6838 = 32'sd0;

  assign sel_6839 = 32'sd0;

  assign sel_6840 = 32'sd0;

  assign sel_6841 = 32'sd0;

  assign sel_6842 = 32'sd0;

  assign sel_6843 = 32'sd0;

  assign sel_6844 = 32'sd0;

  assign sel_6845 = 32'sd0;

  assign s_425 = 32'sd4;

  assign sel_1_1277 = (tmp_13 == 1'b0 ? sel_6845 :
              s_425);

  assign sel_6846 = 32'sd0;

  assign sel_1_1278 = (tmp_15 == 1'b0 ? sel_1_1277 :
              sel_6846);

  assign sel_6847 = 32'sd0;

  assign sel_1_1279 = (tmp_17 == 1'b0 ? sel_1_1278 :
              sel_6847);

  assign sel_1_1280 = (s_10 == 1'b0 ? sel_6844 :
              sel_1_1279);

  assign sel_1_1281 = (s_11 == 1'b0 ? sel_6843 :
              sel_1_1280);

  assign sel_6848 = 32'sd0;

  assign sel_1_1282 = (s_12 == 1'b0 ? sel_1_1281 :
              sel_6848);

  assign sel_6849 = 32'sd0;

  assign sel_6850 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1282, sel_6831, sel_6832, sel_6833, sel_6834, sel_6835,
       sel_6836, sel_6837, sel_6838, sel_6839, sel_6840, sel_6841, sel_6842,
       sel_6849, sel_6850) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9710_sel_1 = sel_6849;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9710_sel_1 = sel_1_1282;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9710_sel_1 = sel_6842;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9710_sel_1 = sel_6841;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9710_sel_1 = sel_6840;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9710_sel_1 = sel_6839;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9710_sel_1 = sel_6838;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9710_sel_1 = sel_6837;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9710_sel_1 = sel_6836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9710_sel_1 = sel_6835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9710_sel_1 = sel_6834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9710_sel_1 = sel_6833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9710_sel_1 = sel_6832;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9710_sel_1 = sel_6831;
        end
      default :
        begin
          p9710_sel_1 = sel_6850;
        end
    endcase
    sel_1_1283 = p9710_sel_1;
  end

  assign tmp_315 = functionOutput_24[sel_1_1283];

  assign sel_6851 = 1'b0;

  assign sel_6852 = 1'b0;

  assign sel_6853 = 1'b0;

  assign sel_6854 = 1'b0;

  assign sel_6855 = 1'b0;

  assign sel_6856 = 1'b0;

  assign sel_6857 = 1'b0;

  assign sel_6858 = 1'b0;

  assign sel_6859 = 1'b0;

  assign sel_6860 = 1'b0;

  assign sel_6861 = 1'b0;

  assign sel_6862 = 1'b0;

  assign sel_6863 = 1'b0;

  assign sel_6864 = 1'b0;

  assign sel_6865 = 1'b0;

  assign s_426 = 1'b1;

  assign sel_2_1237 = (tmp_13 == 1'b0 ? sel_6865 :
              s_426);

  assign sel_6866 = 1'b0;

  assign sel_2_1238 = (tmp_15 == 1'b0 ? sel_2_1237 :
              sel_6866);

  assign sel_6867 = 1'b0;

  assign sel_2_1239 = (tmp_17 == 1'b0 ? sel_2_1238 :
              sel_6867);

  assign sel_2_1240 = (s_10 == 1'b0 ? sel_6864 :
              sel_2_1239);

  assign sel_2_1241 = (s_11 == 1'b0 ? sel_6863 :
              sel_2_1240);

  assign sel_6868 = 1'b0;

  assign sel_2_1242 = (s_12 == 1'b0 ? sel_2_1241 :
              sel_6868);

  assign sel_6869 = 1'b0;

  assign sel_6870 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1242, sel_6851, sel_6852, sel_6853, sel_6854, sel_6855,
       sel_6856, sel_6857, sel_6858, sel_6859, sel_6860, sel_6861, sel_6862,
       sel_6869, sel_6870) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6524_sel_2 = sel_6869;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6524_sel_2 = sel_2_1242;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6524_sel_2 = sel_6862;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6524_sel_2 = sel_6861;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6524_sel_2 = sel_6860;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6524_sel_2 = sel_6859;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6524_sel_2 = sel_6858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6524_sel_2 = sel_6857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6524_sel_2 = sel_6856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6524_sel_2 = sel_6855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6524_sel_2 = sel_6854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6524_sel_2 = sel_6853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6524_sel_2 = sel_6852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6524_sel_2 = sel_6851;
        end
      default :
        begin
          p6524_sel_2 = sel_6870;
        end
    endcase
    sel_2_1243 = p6524_sel_2;
  end

  always @* begin
    p6523cont_bits_21_cont_bits_21[4] = cont_bits_21_18[4];
    if (sel_2_1243) begin
      p6523cont_bits_21_cont_bits_21[4] = tmp_315;
    end
    cont_bits_21_19[0] = cont_bits_21_18[0];
    cont_bits_21_19[1] = cont_bits_21_18[1];
    cont_bits_21_19[2] = cont_bits_21_18[2];
    cont_bits_21_19[3] = cont_bits_21_18[3];
    cont_bits_21_19[4] = p6523cont_bits_21_cont_bits_21[4];
    cont_bits_21_19[5] = cont_bits_21_18[5];
    cont_bits_21_19[6] = cont_bits_21_18[6];
    cont_bits_21_19[7] = cont_bits_21_18[7];
    cont_bits_21_19[8] = cont_bits_21_18[8];
    cont_bits_21_19[9] = cont_bits_21_18[9];
    cont_bits_21_19[10] = cont_bits_21_18[10];
    cont_bits_21_19[11] = cont_bits_21_18[11];
  end

  assign sel_6871 = 32'sd0;

  assign sel_6872 = 32'sd0;

  assign sel_6873 = 32'sd0;

  assign sel_6874 = 32'sd0;

  assign sel_6875 = 32'sd0;

  assign sel_6876 = 32'sd0;

  assign sel_6877 = 32'sd0;

  assign sel_6878 = 32'sd0;

  assign sel_6879 = 32'sd0;

  assign sel_6880 = 32'sd0;

  assign sel_6881 = 32'sd0;

  assign sel_6882 = 32'sd0;

  assign sel_6883 = 32'sd0;

  assign sel_6884 = 32'sd0;

  assign sel_6885 = 32'sd0;

  assign s_427 = 32'sd5;

  assign sel_1_1284 = (tmp_13 == 1'b0 ? sel_6885 :
              s_427);

  assign sel_6886 = 32'sd0;

  assign sel_1_1285 = (tmp_15 == 1'b0 ? sel_1_1284 :
              sel_6886);

  assign sel_6887 = 32'sd0;

  assign sel_1_1286 = (tmp_17 == 1'b0 ? sel_1_1285 :
              sel_6887);

  assign sel_1_1287 = (s_10 == 1'b0 ? sel_6884 :
              sel_1_1286);

  assign sel_1_1288 = (s_11 == 1'b0 ? sel_6883 :
              sel_1_1287);

  assign sel_6888 = 32'sd0;

  assign sel_1_1289 = (s_12 == 1'b0 ? sel_1_1288 :
              sel_6888);

  assign sel_6889 = 32'sd0;

  assign sel_6890 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1289, sel_6871, sel_6872, sel_6873, sel_6874, sel_6875,
       sel_6876, sel_6877, sel_6878, sel_6879, sel_6880, sel_6881, sel_6882,
       sel_6889, sel_6890) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9642_sel_1 = sel_6889;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9642_sel_1 = sel_1_1289;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9642_sel_1 = sel_6882;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9642_sel_1 = sel_6881;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9642_sel_1 = sel_6880;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9642_sel_1 = sel_6879;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9642_sel_1 = sel_6878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9642_sel_1 = sel_6877;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9642_sel_1 = sel_6876;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9642_sel_1 = sel_6875;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9642_sel_1 = sel_6874;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9642_sel_1 = sel_6873;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9642_sel_1 = sel_6872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9642_sel_1 = sel_6871;
        end
      default :
        begin
          p9642_sel_1 = sel_6890;
        end
    endcase
    sel_1_1290 = p9642_sel_1;
  end

  assign tmp_316 = functionOutput_24[sel_1_1290];

  assign sel_6891 = 1'b0;

  assign sel_6892 = 1'b0;

  assign sel_6893 = 1'b0;

  assign sel_6894 = 1'b0;

  assign sel_6895 = 1'b0;

  assign sel_6896 = 1'b0;

  assign sel_6897 = 1'b0;

  assign sel_6898 = 1'b0;

  assign sel_6899 = 1'b0;

  assign sel_6900 = 1'b0;

  assign sel_6901 = 1'b0;

  assign sel_6902 = 1'b0;

  assign sel_6903 = 1'b0;

  assign sel_6904 = 1'b0;

  assign sel_6905 = 1'b0;

  assign s_428 = 1'b1;

  assign sel_2_1244 = (tmp_13 == 1'b0 ? sel_6905 :
              s_428);

  assign sel_6906 = 1'b0;

  assign sel_2_1245 = (tmp_15 == 1'b0 ? sel_2_1244 :
              sel_6906);

  assign sel_6907 = 1'b0;

  assign sel_2_1246 = (tmp_17 == 1'b0 ? sel_2_1245 :
              sel_6907);

  assign sel_2_1247 = (s_10 == 1'b0 ? sel_6904 :
              sel_2_1246);

  assign sel_2_1248 = (s_11 == 1'b0 ? sel_6903 :
              sel_2_1247);

  assign sel_6908 = 1'b0;

  assign sel_2_1249 = (s_12 == 1'b0 ? sel_2_1248 :
              sel_6908);

  assign sel_6909 = 1'b0;

  assign sel_6910 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1249, sel_6891, sel_6892, sel_6893, sel_6894, sel_6895,
       sel_6896, sel_6897, sel_6898, sel_6899, sel_6900, sel_6901, sel_6902,
       sel_6909, sel_6910) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6166_sel_2 = sel_6909;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6166_sel_2 = sel_2_1249;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6166_sel_2 = sel_6902;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6166_sel_2 = sel_6901;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6166_sel_2 = sel_6900;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6166_sel_2 = sel_6899;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6166_sel_2 = sel_6898;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6166_sel_2 = sel_6897;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6166_sel_2 = sel_6896;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6166_sel_2 = sel_6895;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6166_sel_2 = sel_6894;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6166_sel_2 = sel_6893;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6166_sel_2 = sel_6892;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6166_sel_2 = sel_6891;
        end
      default :
        begin
          p6166_sel_2 = sel_6910;
        end
    endcase
    sel_2_1250 = p6166_sel_2;
  end

  always @* begin
    p6165cont_bits_21_cont_bits_21[5] = cont_bits_21_19[5];
    if (sel_2_1250) begin
      p6165cont_bits_21_cont_bits_21[5] = tmp_316;
    end
    cont_bits_21_20[0] = cont_bits_21_19[0];
    cont_bits_21_20[1] = cont_bits_21_19[1];
    cont_bits_21_20[2] = cont_bits_21_19[2];
    cont_bits_21_20[3] = cont_bits_21_19[3];
    cont_bits_21_20[4] = cont_bits_21_19[4];
    cont_bits_21_20[5] = p6165cont_bits_21_cont_bits_21[5];
    cont_bits_21_20[6] = cont_bits_21_19[6];
    cont_bits_21_20[7] = cont_bits_21_19[7];
    cont_bits_21_20[8] = cont_bits_21_19[8];
    cont_bits_21_20[9] = cont_bits_21_19[9];
    cont_bits_21_20[10] = cont_bits_21_19[10];
    cont_bits_21_20[11] = cont_bits_21_19[11];
  end

  assign sel_6911 = 32'sd0;

  assign sel_6912 = 32'sd0;

  assign sel_6913 = 32'sd0;

  assign sel_6914 = 32'sd0;

  assign sel_6915 = 32'sd0;

  assign sel_6916 = 32'sd0;

  assign sel_6917 = 32'sd0;

  assign sel_6918 = 32'sd0;

  assign sel_6919 = 32'sd0;

  assign sel_6920 = 32'sd0;

  assign sel_6921 = 32'sd0;

  assign sel_6922 = 32'sd0;

  assign sel_6923 = 32'sd0;

  assign sel_6924 = 32'sd0;

  assign sel_6925 = 32'sd0;

  assign s_429 = 32'sd6;

  assign sel_1_1291 = (tmp_13 == 1'b0 ? sel_6925 :
              s_429);

  assign sel_6926 = 32'sd0;

  assign sel_1_1292 = (tmp_15 == 1'b0 ? sel_1_1291 :
              sel_6926);

  assign sel_6927 = 32'sd0;

  assign sel_1_1293 = (tmp_17 == 1'b0 ? sel_1_1292 :
              sel_6927);

  assign sel_1_1294 = (s_10 == 1'b0 ? sel_6924 :
              sel_1_1293);

  assign sel_1_1295 = (s_11 == 1'b0 ? sel_6923 :
              sel_1_1294);

  assign sel_6928 = 32'sd0;

  assign sel_1_1296 = (s_12 == 1'b0 ? sel_1_1295 :
              sel_6928);

  assign sel_6929 = 32'sd0;

  assign sel_6930 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1296, sel_6911, sel_6912, sel_6913, sel_6914, sel_6915,
       sel_6916, sel_6917, sel_6918, sel_6919, sel_6920, sel_6921, sel_6922,
       sel_6929, sel_6930) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9506_sel_1 = sel_6929;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9506_sel_1 = sel_1_1296;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9506_sel_1 = sel_6922;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9506_sel_1 = sel_6921;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9506_sel_1 = sel_6920;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9506_sel_1 = sel_6919;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9506_sel_1 = sel_6918;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9506_sel_1 = sel_6917;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9506_sel_1 = sel_6916;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9506_sel_1 = sel_6915;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9506_sel_1 = sel_6914;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9506_sel_1 = sel_6913;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9506_sel_1 = sel_6912;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9506_sel_1 = sel_6911;
        end
      default :
        begin
          p9506_sel_1 = sel_6930;
        end
    endcase
    sel_1_1297 = p9506_sel_1;
  end

  assign tmp_317 = functionOutput_24[sel_1_1297];

  assign sel_6931 = 1'b0;

  assign sel_6932 = 1'b0;

  assign sel_6933 = 1'b0;

  assign sel_6934 = 1'b0;

  assign sel_6935 = 1'b0;

  assign sel_6936 = 1'b0;

  assign sel_6937 = 1'b0;

  assign sel_6938 = 1'b0;

  assign sel_6939 = 1'b0;

  assign sel_6940 = 1'b0;

  assign sel_6941 = 1'b0;

  assign sel_6942 = 1'b0;

  assign sel_6943 = 1'b0;

  assign sel_6944 = 1'b0;

  assign sel_6945 = 1'b0;

  assign s_430 = 1'b1;

  assign sel_2_1251 = (tmp_13 == 1'b0 ? sel_6945 :
              s_430);

  assign sel_6946 = 1'b0;

  assign sel_2_1252 = (tmp_15 == 1'b0 ? sel_2_1251 :
              sel_6946);

  assign sel_6947 = 1'b0;

  assign sel_2_1253 = (tmp_17 == 1'b0 ? sel_2_1252 :
              sel_6947);

  assign sel_2_1254 = (s_10 == 1'b0 ? sel_6944 :
              sel_2_1253);

  assign sel_2_1255 = (s_11 == 1'b0 ? sel_6943 :
              sel_2_1254);

  assign sel_6948 = 1'b0;

  assign sel_2_1256 = (s_12 == 1'b0 ? sel_2_1255 :
              sel_6948);

  assign sel_6949 = 1'b0;

  assign sel_6950 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1256, sel_6931, sel_6932, sel_6933, sel_6934, sel_6935,
       sel_6936, sel_6937, sel_6938, sel_6939, sel_6940, sel_6941, sel_6942,
       sel_6949, sel_6950) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5918_sel_2 = sel_6949;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5918_sel_2 = sel_2_1256;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5918_sel_2 = sel_6942;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5918_sel_2 = sel_6941;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5918_sel_2 = sel_6940;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5918_sel_2 = sel_6939;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5918_sel_2 = sel_6938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5918_sel_2 = sel_6937;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5918_sel_2 = sel_6936;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5918_sel_2 = sel_6935;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5918_sel_2 = sel_6934;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5918_sel_2 = sel_6933;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5918_sel_2 = sel_6932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5918_sel_2 = sel_6931;
        end
      default :
        begin
          p5918_sel_2 = sel_6950;
        end
    endcase
    sel_2_1257 = p5918_sel_2;
  end

  always @* begin
    p5917cont_bits_21_cont_bits_21[6] = cont_bits_21_20[6];
    if (sel_2_1257) begin
      p5917cont_bits_21_cont_bits_21[6] = tmp_317;
    end
    cont_bits_21_21[0] = cont_bits_21_20[0];
    cont_bits_21_21[1] = cont_bits_21_20[1];
    cont_bits_21_21[2] = cont_bits_21_20[2];
    cont_bits_21_21[3] = cont_bits_21_20[3];
    cont_bits_21_21[4] = cont_bits_21_20[4];
    cont_bits_21_21[5] = cont_bits_21_20[5];
    cont_bits_21_21[6] = p5917cont_bits_21_cont_bits_21[6];
    cont_bits_21_21[7] = cont_bits_21_20[7];
    cont_bits_21_21[8] = cont_bits_21_20[8];
    cont_bits_21_21[9] = cont_bits_21_20[9];
    cont_bits_21_21[10] = cont_bits_21_20[10];
    cont_bits_21_21[11] = cont_bits_21_20[11];
  end

  assign sel_6951 = 32'sd0;

  assign sel_6952 = 32'sd0;

  assign sel_6953 = 32'sd0;

  assign sel_6954 = 32'sd0;

  assign sel_6955 = 32'sd0;

  assign sel_6956 = 32'sd0;

  assign sel_6957 = 32'sd0;

  assign sel_6958 = 32'sd0;

  assign sel_6959 = 32'sd0;

  assign sel_6960 = 32'sd0;

  assign sel_6961 = 32'sd0;

  assign sel_6962 = 32'sd0;

  assign sel_6963 = 32'sd0;

  assign sel_6964 = 32'sd0;

  assign sel_6965 = 32'sd0;

  assign s_431 = 32'sd7;

  assign sel_1_1298 = (tmp_13 == 1'b0 ? sel_6965 :
              s_431);

  assign sel_6966 = 32'sd0;

  assign sel_1_1299 = (tmp_15 == 1'b0 ? sel_1_1298 :
              sel_6966);

  assign sel_6967 = 32'sd0;

  assign sel_1_1300 = (tmp_17 == 1'b0 ? sel_1_1299 :
              sel_6967);

  assign sel_1_1301 = (s_10 == 1'b0 ? sel_6964 :
              sel_1_1300);

  assign sel_1_1302 = (s_11 == 1'b0 ? sel_6963 :
              sel_1_1301);

  assign sel_6968 = 32'sd0;

  assign sel_1_1303 = (s_12 == 1'b0 ? sel_1_1302 :
              sel_6968);

  assign sel_6969 = 32'sd0;

  assign sel_6970 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1303, sel_6951, sel_6952, sel_6953, sel_6954, sel_6955,
       sel_6956, sel_6957, sel_6958, sel_6959, sel_6960, sel_6961, sel_6962,
       sel_6969, sel_6970) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8979_sel_1 = sel_6969;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8979_sel_1 = sel_1_1303;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8979_sel_1 = sel_6962;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8979_sel_1 = sel_6961;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8979_sel_1 = sel_6960;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8979_sel_1 = sel_6959;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8979_sel_1 = sel_6958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8979_sel_1 = sel_6957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8979_sel_1 = sel_6956;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8979_sel_1 = sel_6955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8979_sel_1 = sel_6954;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8979_sel_1 = sel_6953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8979_sel_1 = sel_6952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8979_sel_1 = sel_6951;
        end
      default :
        begin
          p8979_sel_1 = sel_6970;
        end
    endcase
    sel_1_1304 = p8979_sel_1;
  end

  assign tmp_318 = functionOutput_24[sel_1_1304];

  assign sel_6971 = 1'b0;

  assign sel_6972 = 1'b0;

  assign sel_6973 = 1'b0;

  assign sel_6974 = 1'b0;

  assign sel_6975 = 1'b0;

  assign sel_6976 = 1'b0;

  assign sel_6977 = 1'b0;

  assign sel_6978 = 1'b0;

  assign sel_6979 = 1'b0;

  assign sel_6980 = 1'b0;

  assign sel_6981 = 1'b0;

  assign sel_6982 = 1'b0;

  assign sel_6983 = 1'b0;

  assign sel_6984 = 1'b0;

  assign sel_6985 = 1'b0;

  assign s_432 = 1'b1;

  assign sel_2_1258 = (tmp_13 == 1'b0 ? sel_6985 :
              s_432);

  assign sel_6986 = 1'b0;

  assign sel_2_1259 = (tmp_15 == 1'b0 ? sel_2_1258 :
              sel_6986);

  assign sel_6987 = 1'b0;

  assign sel_2_1260 = (tmp_17 == 1'b0 ? sel_2_1259 :
              sel_6987);

  assign sel_2_1261 = (s_10 == 1'b0 ? sel_6984 :
              sel_2_1260);

  assign sel_2_1262 = (s_11 == 1'b0 ? sel_6983 :
              sel_2_1261);

  assign sel_6988 = 1'b0;

  assign sel_2_1263 = (s_12 == 1'b0 ? sel_2_1262 :
              sel_6988);

  assign sel_6989 = 1'b0;

  assign sel_6990 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1263, sel_6971, sel_6972, sel_6973, sel_6974, sel_6975,
       sel_6976, sel_6977, sel_6978, sel_6979, sel_6980, sel_6981, sel_6982,
       sel_6989, sel_6990) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5560_sel_2 = sel_6989;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5560_sel_2 = sel_2_1263;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5560_sel_2 = sel_6982;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5560_sel_2 = sel_6981;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5560_sel_2 = sel_6980;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5560_sel_2 = sel_6979;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5560_sel_2 = sel_6978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5560_sel_2 = sel_6977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5560_sel_2 = sel_6976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5560_sel_2 = sel_6975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5560_sel_2 = sel_6974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5560_sel_2 = sel_6973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5560_sel_2 = sel_6972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5560_sel_2 = sel_6971;
        end
      default :
        begin
          p5560_sel_2 = sel_6990;
        end
    endcase
    sel_2_1264 = p5560_sel_2;
  end

  always @* begin
    p5559cont_bits_21_cont_bits_21[7] = cont_bits_21_21[7];
    if (sel_2_1264) begin
      p5559cont_bits_21_cont_bits_21[7] = tmp_318;
    end
    cont_bits_21_22[0] = cont_bits_21_21[0];
    cont_bits_21_22[1] = cont_bits_21_21[1];
    cont_bits_21_22[2] = cont_bits_21_21[2];
    cont_bits_21_22[3] = cont_bits_21_21[3];
    cont_bits_21_22[4] = cont_bits_21_21[4];
    cont_bits_21_22[5] = cont_bits_21_21[5];
    cont_bits_21_22[6] = cont_bits_21_21[6];
    cont_bits_21_22[7] = p5559cont_bits_21_cont_bits_21[7];
    cont_bits_21_22[8] = cont_bits_21_21[8];
    cont_bits_21_22[9] = cont_bits_21_21[9];
    cont_bits_21_22[10] = cont_bits_21_21[10];
    cont_bits_21_22[11] = cont_bits_21_21[11];
  end

  assign sel_6991 = 32'sd0;

  assign sel_6992 = 32'sd0;

  assign sel_6993 = 32'sd0;

  assign sel_6994 = 32'sd0;

  assign sel_6995 = 32'sd0;

  assign sel_6996 = 32'sd0;

  assign sel_6997 = 32'sd0;

  assign sel_6998 = 32'sd0;

  assign sel_6999 = 32'sd0;

  assign sel_7000 = 32'sd0;

  assign sel_7001 = 32'sd0;

  assign sel_7002 = 32'sd0;

  assign sel_7003 = 32'sd0;

  assign sel_7004 = 32'sd0;

  assign sel_7005 = 32'sd0;

  assign s_433 = 32'sd8;

  assign sel_1_1305 = (tmp_13 == 1'b0 ? sel_7005 :
              s_433);

  assign sel_7006 = 32'sd0;

  assign sel_1_1306 = (tmp_15 == 1'b0 ? sel_1_1305 :
              sel_7006);

  assign sel_7007 = 32'sd0;

  assign sel_1_1307 = (tmp_17 == 1'b0 ? sel_1_1306 :
              sel_7007);

  assign sel_1_1308 = (s_10 == 1'b0 ? sel_7004 :
              sel_1_1307);

  assign sel_1_1309 = (s_11 == 1'b0 ? sel_7003 :
              sel_1_1308);

  assign sel_7008 = 32'sd0;

  assign sel_1_1310 = (s_12 == 1'b0 ? sel_1_1309 :
              sel_7008);

  assign sel_7009 = 32'sd0;

  assign sel_7010 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1310, sel_6991, sel_6992, sel_6993, sel_6994, sel_6995,
       sel_6996, sel_6997, sel_6998, sel_6999, sel_7000, sel_7001, sel_7002,
       sel_7009, sel_7010) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9591_sel_1 = sel_7009;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9591_sel_1 = sel_1_1310;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9591_sel_1 = sel_7002;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9591_sel_1 = sel_7001;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9591_sel_1 = sel_7000;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9591_sel_1 = sel_6999;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9591_sel_1 = sel_6998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9591_sel_1 = sel_6997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9591_sel_1 = sel_6996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9591_sel_1 = sel_6995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9591_sel_1 = sel_6994;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9591_sel_1 = sel_6993;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9591_sel_1 = sel_6992;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9591_sel_1 = sel_6991;
        end
      default :
        begin
          p9591_sel_1 = sel_7010;
        end
    endcase
    sel_1_1311 = p9591_sel_1;
  end

  assign tmp_319 = functionOutput_24[sel_1_1311];

  assign sel_7011 = 1'b0;

  assign sel_7012 = 1'b0;

  assign sel_7013 = 1'b0;

  assign sel_7014 = 1'b0;

  assign sel_7015 = 1'b0;

  assign sel_7016 = 1'b0;

  assign sel_7017 = 1'b0;

  assign sel_7018 = 1'b0;

  assign sel_7019 = 1'b0;

  assign sel_7020 = 1'b0;

  assign sel_7021 = 1'b0;

  assign sel_7022 = 1'b0;

  assign sel_7023 = 1'b0;

  assign sel_7024 = 1'b0;

  assign sel_7025 = 1'b0;

  assign s_434 = 1'b1;

  assign sel_2_1265 = (tmp_13 == 1'b0 ? sel_7025 :
              s_434);

  assign sel_7026 = 1'b0;

  assign sel_2_1266 = (tmp_15 == 1'b0 ? sel_2_1265 :
              sel_7026);

  assign sel_7027 = 1'b0;

  assign sel_2_1267 = (tmp_17 == 1'b0 ? sel_2_1266 :
              sel_7027);

  assign sel_2_1268 = (s_10 == 1'b0 ? sel_7024 :
              sel_2_1267);

  assign sel_2_1269 = (s_11 == 1'b0 ? sel_7023 :
              sel_2_1268);

  assign sel_7028 = 1'b0;

  assign sel_2_1270 = (s_12 == 1'b0 ? sel_2_1269 :
              sel_7028);

  assign sel_7029 = 1'b0;

  assign sel_7030 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1270, sel_7011, sel_7012, sel_7013, sel_7014, sel_7015,
       sel_7016, sel_7017, sel_7018, sel_7019, sel_7020, sel_7021, sel_7022,
       sel_7029, sel_7030) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5312_sel_2 = sel_7029;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5312_sel_2 = sel_2_1270;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5312_sel_2 = sel_7022;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5312_sel_2 = sel_7021;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5312_sel_2 = sel_7020;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5312_sel_2 = sel_7019;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5312_sel_2 = sel_7018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5312_sel_2 = sel_7017;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5312_sel_2 = sel_7016;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5312_sel_2 = sel_7015;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5312_sel_2 = sel_7014;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5312_sel_2 = sel_7013;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5312_sel_2 = sel_7012;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5312_sel_2 = sel_7011;
        end
      default :
        begin
          p5312_sel_2 = sel_7030;
        end
    endcase
    sel_2_1271 = p5312_sel_2;
  end

  always @* begin
    p5311cont_bits_21_cont_bits_21[8] = cont_bits_21_22[8];
    if (sel_2_1271) begin
      p5311cont_bits_21_cont_bits_21[8] = tmp_319;
    end
    cont_bits_21_23[0] = cont_bits_21_22[0];
    cont_bits_21_23[1] = cont_bits_21_22[1];
    cont_bits_21_23[2] = cont_bits_21_22[2];
    cont_bits_21_23[3] = cont_bits_21_22[3];
    cont_bits_21_23[4] = cont_bits_21_22[4];
    cont_bits_21_23[5] = cont_bits_21_22[5];
    cont_bits_21_23[6] = cont_bits_21_22[6];
    cont_bits_21_23[7] = cont_bits_21_22[7];
    cont_bits_21_23[8] = p5311cont_bits_21_cont_bits_21[8];
    cont_bits_21_23[9] = cont_bits_21_22[9];
    cont_bits_21_23[10] = cont_bits_21_22[10];
    cont_bits_21_23[11] = cont_bits_21_22[11];
  end

  assign sel_7031 = 32'sd0;

  assign sel_7032 = 32'sd0;

  assign sel_7033 = 32'sd0;

  assign sel_7034 = 32'sd0;

  assign sel_7035 = 32'sd0;

  assign sel_7036 = 32'sd0;

  assign sel_7037 = 32'sd0;

  assign sel_7038 = 32'sd0;

  assign sel_7039 = 32'sd0;

  assign sel_7040 = 32'sd0;

  assign sel_7041 = 32'sd0;

  assign sel_7042 = 32'sd0;

  assign sel_7043 = 32'sd0;

  assign sel_7044 = 32'sd0;

  assign sel_7045 = 32'sd0;

  assign s_435 = 32'sd9;

  assign sel_1_1312 = (tmp_13 == 1'b0 ? sel_7045 :
              s_435);

  assign sel_7046 = 32'sd0;

  assign sel_1_1313 = (tmp_15 == 1'b0 ? sel_1_1312 :
              sel_7046);

  assign sel_7047 = 32'sd0;

  assign sel_1_1314 = (tmp_17 == 1'b0 ? sel_1_1313 :
              sel_7047);

  assign sel_1_1315 = (s_10 == 1'b0 ? sel_7044 :
              sel_1_1314);

  assign sel_1_1316 = (s_11 == 1'b0 ? sel_7043 :
              sel_1_1315);

  assign sel_7048 = 32'sd0;

  assign sel_1_1317 = (s_12 == 1'b0 ? sel_1_1316 :
              sel_7048);

  assign sel_7049 = 32'sd0;

  assign sel_7050 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1317, sel_7031, sel_7032, sel_7033, sel_7034, sel_7035,
       sel_7036, sel_7037, sel_7038, sel_7039, sel_7040, sel_7041, sel_7042,
       sel_7049, sel_7050) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9778_sel_1 = sel_7049;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9778_sel_1 = sel_1_1317;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9778_sel_1 = sel_7042;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9778_sel_1 = sel_7041;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9778_sel_1 = sel_7040;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9778_sel_1 = sel_7039;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9778_sel_1 = sel_7038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9778_sel_1 = sel_7037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9778_sel_1 = sel_7036;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9778_sel_1 = sel_7035;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9778_sel_1 = sel_7034;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9778_sel_1 = sel_7033;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9778_sel_1 = sel_7032;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9778_sel_1 = sel_7031;
        end
      default :
        begin
          p9778_sel_1 = sel_7050;
        end
    endcase
    sel_1_1318 = p9778_sel_1;
  end

  assign tmp_320 = functionOutput_24[sel_1_1318];

  assign sel_7051 = 1'b0;

  assign sel_7052 = 1'b0;

  assign sel_7053 = 1'b0;

  assign sel_7054 = 1'b0;

  assign sel_7055 = 1'b0;

  assign sel_7056 = 1'b0;

  assign sel_7057 = 1'b0;

  assign sel_7058 = 1'b0;

  assign sel_7059 = 1'b0;

  assign sel_7060 = 1'b0;

  assign sel_7061 = 1'b0;

  assign sel_7062 = 1'b0;

  assign sel_7063 = 1'b0;

  assign sel_7064 = 1'b0;

  assign sel_7065 = 1'b0;

  assign s_436 = 1'b1;

  assign sel_2_1272 = (tmp_13 == 1'b0 ? sel_7065 :
              s_436);

  assign sel_7066 = 1'b0;

  assign sel_2_1273 = (tmp_15 == 1'b0 ? sel_2_1272 :
              sel_7066);

  assign sel_7067 = 1'b0;

  assign sel_2_1274 = (tmp_17 == 1'b0 ? sel_2_1273 :
              sel_7067);

  assign sel_2_1275 = (s_10 == 1'b0 ? sel_7064 :
              sel_2_1274);

  assign sel_2_1276 = (s_11 == 1'b0 ? sel_7063 :
              sel_2_1275);

  assign sel_7068 = 1'b0;

  assign sel_2_1277 = (s_12 == 1'b0 ? sel_2_1276 :
              sel_7068);

  assign sel_7069 = 1'b0;

  assign sel_7070 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1277, sel_7051, sel_7052, sel_7053, sel_7054, sel_7055,
       sel_7056, sel_7057, sel_7058, sel_7059, sel_7060, sel_7061, sel_7062,
       sel_7069, sel_7070) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4954_sel_2 = sel_7069;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4954_sel_2 = sel_2_1277;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4954_sel_2 = sel_7062;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4954_sel_2 = sel_7061;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4954_sel_2 = sel_7060;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4954_sel_2 = sel_7059;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4954_sel_2 = sel_7058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4954_sel_2 = sel_7057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4954_sel_2 = sel_7056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4954_sel_2 = sel_7055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4954_sel_2 = sel_7054;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4954_sel_2 = sel_7053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4954_sel_2 = sel_7052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4954_sel_2 = sel_7051;
        end
      default :
        begin
          p4954_sel_2 = sel_7070;
        end
    endcase
    sel_2_1278 = p4954_sel_2;
  end

  always @* begin
    p4953cont_bits_21_cont_bits_21[9] = cont_bits_21_23[9];
    if (sel_2_1278) begin
      p4953cont_bits_21_cont_bits_21[9] = tmp_320;
    end
    cont_bits_21_24[0] = cont_bits_21_23[0];
    cont_bits_21_24[1] = cont_bits_21_23[1];
    cont_bits_21_24[2] = cont_bits_21_23[2];
    cont_bits_21_24[3] = cont_bits_21_23[3];
    cont_bits_21_24[4] = cont_bits_21_23[4];
    cont_bits_21_24[5] = cont_bits_21_23[5];
    cont_bits_21_24[6] = cont_bits_21_23[6];
    cont_bits_21_24[7] = cont_bits_21_23[7];
    cont_bits_21_24[8] = cont_bits_21_23[8];
    cont_bits_21_24[9] = p4953cont_bits_21_cont_bits_21[9];
    cont_bits_21_24[10] = cont_bits_21_23[10];
    cont_bits_21_24[11] = cont_bits_21_23[11];
  end

  assign sel_7071 = 32'sd0;

  assign sel_7072 = 32'sd0;

  assign sel_7073 = 32'sd0;

  assign sel_7074 = 32'sd0;

  assign sel_7075 = 32'sd0;

  assign sel_7076 = 32'sd0;

  assign sel_7077 = 32'sd0;

  assign sel_7078 = 32'sd0;

  assign sel_7079 = 32'sd0;

  assign sel_7080 = 32'sd0;

  assign sel_7081 = 32'sd0;

  assign sel_7082 = 32'sd0;

  assign sel_7083 = 32'sd0;

  assign sel_7084 = 32'sd0;

  assign sel_7085 = 32'sd0;

  assign s_437 = 32'sd10;

  assign sel_1_1319 = (tmp_13 == 1'b0 ? sel_7085 :
              s_437);

  assign sel_7086 = 32'sd0;

  assign sel_1_1320 = (tmp_15 == 1'b0 ? sel_1_1319 :
              sel_7086);

  assign sel_7087 = 32'sd0;

  assign sel_1_1321 = (tmp_17 == 1'b0 ? sel_1_1320 :
              sel_7087);

  assign sel_1_1322 = (s_10 == 1'b0 ? sel_7084 :
              sel_1_1321);

  assign sel_1_1323 = (s_11 == 1'b0 ? sel_7083 :
              sel_1_1322);

  assign sel_7088 = 32'sd0;

  assign sel_1_1324 = (s_12 == 1'b0 ? sel_1_1323 :
              sel_7088);

  assign sel_7089 = 32'sd0;

  assign sel_7090 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1324, sel_7071, sel_7072, sel_7073, sel_7074, sel_7075,
       sel_7076, sel_7077, sel_7078, sel_7079, sel_7080, sel_7081, sel_7082,
       sel_7089, sel_7090) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8758_sel_1 = sel_7089;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8758_sel_1 = sel_1_1324;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8758_sel_1 = sel_7082;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8758_sel_1 = sel_7081;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8758_sel_1 = sel_7080;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8758_sel_1 = sel_7079;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8758_sel_1 = sel_7078;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8758_sel_1 = sel_7077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8758_sel_1 = sel_7076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8758_sel_1 = sel_7075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8758_sel_1 = sel_7074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8758_sel_1 = sel_7073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8758_sel_1 = sel_7072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8758_sel_1 = sel_7071;
        end
      default :
        begin
          p8758_sel_1 = sel_7090;
        end
    endcase
    sel_1_1325 = p8758_sel_1;
  end

  assign tmp_321 = functionOutput_24[sel_1_1325];

  assign sel_7091 = 1'b0;

  assign sel_7092 = 1'b0;

  assign sel_7093 = 1'b0;

  assign sel_7094 = 1'b0;

  assign sel_7095 = 1'b0;

  assign sel_7096 = 1'b0;

  assign sel_7097 = 1'b0;

  assign sel_7098 = 1'b0;

  assign sel_7099 = 1'b0;

  assign sel_7100 = 1'b0;

  assign sel_7101 = 1'b0;

  assign sel_7102 = 1'b0;

  assign sel_7103 = 1'b0;

  assign sel_7104 = 1'b0;

  assign sel_7105 = 1'b0;

  assign s_438 = 1'b1;

  assign sel_2_1279 = (tmp_13 == 1'b0 ? sel_7105 :
              s_438);

  assign sel_7106 = 1'b0;

  assign sel_2_1280 = (tmp_15 == 1'b0 ? sel_2_1279 :
              sel_7106);

  assign sel_7107 = 1'b0;

  assign sel_2_1281 = (tmp_17 == 1'b0 ? sel_2_1280 :
              sel_7107);

  assign sel_2_1282 = (s_10 == 1'b0 ? sel_7104 :
              sel_2_1281);

  assign sel_2_1283 = (s_11 == 1'b0 ? sel_7103 :
              sel_2_1282);

  assign sel_7108 = 1'b0;

  assign sel_2_1284 = (s_12 == 1'b0 ? sel_2_1283 :
              sel_7108);

  assign sel_7109 = 1'b0;

  assign sel_7110 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1284, sel_7091, sel_7092, sel_7093, sel_7094, sel_7095,
       sel_7096, sel_7097, sel_7098, sel_7099, sel_7100, sel_7101, sel_7102,
       sel_7109, sel_7110) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4706_sel_2 = sel_7109;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4706_sel_2 = sel_2_1284;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4706_sel_2 = sel_7102;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4706_sel_2 = sel_7101;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4706_sel_2 = sel_7100;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4706_sel_2 = sel_7099;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4706_sel_2 = sel_7098;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4706_sel_2 = sel_7097;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4706_sel_2 = sel_7096;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4706_sel_2 = sel_7095;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4706_sel_2 = sel_7094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4706_sel_2 = sel_7093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4706_sel_2 = sel_7092;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4706_sel_2 = sel_7091;
        end
      default :
        begin
          p4706_sel_2 = sel_7110;
        end
    endcase
    sel_2_1285 = p4706_sel_2;
  end

  always @* begin
    p4705cont_bits_21_cont_bits_21[10] = cont_bits_21_24[10];
    if (sel_2_1285) begin
      p4705cont_bits_21_cont_bits_21[10] = tmp_321;
    end
    cont_bits_21_25[0] = cont_bits_21_24[0];
    cont_bits_21_25[1] = cont_bits_21_24[1];
    cont_bits_21_25[2] = cont_bits_21_24[2];
    cont_bits_21_25[3] = cont_bits_21_24[3];
    cont_bits_21_25[4] = cont_bits_21_24[4];
    cont_bits_21_25[5] = cont_bits_21_24[5];
    cont_bits_21_25[6] = cont_bits_21_24[6];
    cont_bits_21_25[7] = cont_bits_21_24[7];
    cont_bits_21_25[8] = cont_bits_21_24[8];
    cont_bits_21_25[9] = cont_bits_21_24[9];
    cont_bits_21_25[10] = p4705cont_bits_21_cont_bits_21[10];
    cont_bits_21_25[11] = cont_bits_21_24[11];
  end

  assign sel_7111 = 32'sd0;

  assign sel_7112 = 32'sd0;

  assign sel_7113 = 32'sd0;

  assign sel_7114 = 32'sd0;

  assign sel_7115 = 32'sd0;

  assign sel_7116 = 32'sd0;

  assign sel_7117 = 32'sd0;

  assign sel_7118 = 32'sd0;

  assign sel_7119 = 32'sd0;

  assign sel_7120 = 32'sd0;

  assign sel_7121 = 32'sd0;

  assign sel_7122 = 32'sd0;

  assign sel_7123 = 32'sd0;

  assign sel_7124 = 32'sd0;

  assign sel_7125 = 32'sd0;

  assign s_439 = 32'sd11;

  assign sel_1_1326 = (tmp_13 == 1'b0 ? sel_7125 :
              s_439);

  assign sel_7126 = 32'sd0;

  assign sel_1_1327 = (tmp_15 == 1'b0 ? sel_1_1326 :
              sel_7126);

  assign sel_7127 = 32'sd0;

  assign sel_1_1328 = (tmp_17 == 1'b0 ? sel_1_1327 :
              sel_7127);

  assign sel_1_1329 = (s_10 == 1'b0 ? sel_7124 :
              sel_1_1328);

  assign sel_1_1330 = (s_11 == 1'b0 ? sel_7123 :
              sel_1_1329);

  assign sel_7128 = 32'sd0;

  assign sel_1_1331 = (s_12 == 1'b0 ? sel_1_1330 :
              sel_7128);

  assign sel_7129 = 32'sd0;

  assign sel_7130 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1331, sel_7111, sel_7112, sel_7113, sel_7114, sel_7115,
       sel_7116, sel_7117, sel_7118, sel_7119, sel_7120, sel_7121, sel_7122,
       sel_7129, sel_7130) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9608_sel_1 = sel_7129;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9608_sel_1 = sel_1_1331;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9608_sel_1 = sel_7122;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9608_sel_1 = sel_7121;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9608_sel_1 = sel_7120;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9608_sel_1 = sel_7119;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9608_sel_1 = sel_7118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9608_sel_1 = sel_7117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9608_sel_1 = sel_7116;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9608_sel_1 = sel_7115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9608_sel_1 = sel_7114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9608_sel_1 = sel_7113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9608_sel_1 = sel_7112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9608_sel_1 = sel_7111;
        end
      default :
        begin
          p9608_sel_1 = sel_7130;
        end
    endcase
    sel_1_1332 = p9608_sel_1;
  end

  assign tmp_322 = functionOutput_24[sel_1_1332];

  assign sel_7131 = 1'b0;

  assign sel_7132 = 1'b0;

  assign sel_7133 = 1'b0;

  assign sel_7134 = 1'b0;

  assign sel_7135 = 1'b0;

  assign sel_7136 = 1'b0;

  assign sel_7137 = 1'b0;

  assign sel_7138 = 1'b0;

  assign sel_7139 = 1'b0;

  assign sel_7140 = 1'b0;

  assign sel_7141 = 1'b0;

  assign sel_7142 = 1'b0;

  assign sel_7143 = 1'b0;

  assign sel_7144 = 1'b0;

  assign sel_7145 = 1'b0;

  assign s_440 = 1'b1;

  assign sel_2_1286 = (tmp_13 == 1'b0 ? sel_7145 :
              s_440);

  assign sel_7146 = 1'b0;

  assign sel_2_1287 = (tmp_15 == 1'b0 ? sel_2_1286 :
              sel_7146);

  assign sel_7147 = 1'b0;

  assign sel_2_1288 = (tmp_17 == 1'b0 ? sel_2_1287 :
              sel_7147);

  assign sel_2_1289 = (s_10 == 1'b0 ? sel_7144 :
              sel_2_1288);

  assign sel_2_1290 = (s_11 == 1'b0 ? sel_7143 :
              sel_2_1289);

  assign sel_7148 = 1'b0;

  assign sel_2_1291 = (s_12 == 1'b0 ? sel_2_1290 :
              sel_7148);

  assign sel_7149 = 1'b0;

  assign sel_7150 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1291, sel_7131, sel_7132, sel_7133, sel_7134, sel_7135,
       sel_7136, sel_7137, sel_7138, sel_7139, sel_7140, sel_7141, sel_7142,
       sel_7149, sel_7150) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4348_sel_2 = sel_7149;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4348_sel_2 = sel_2_1291;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4348_sel_2 = sel_7142;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4348_sel_2 = sel_7141;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4348_sel_2 = sel_7140;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4348_sel_2 = sel_7139;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4348_sel_2 = sel_7138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4348_sel_2 = sel_7137;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4348_sel_2 = sel_7136;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4348_sel_2 = sel_7135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4348_sel_2 = sel_7134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4348_sel_2 = sel_7133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4348_sel_2 = sel_7132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4348_sel_2 = sel_7131;
        end
      default :
        begin
          p4348_sel_2 = sel_7150;
        end
    endcase
    sel_2_1292 = p4348_sel_2;
  end

  always @* begin
    p4347cont_bits_21_cont_bits_21[11] = cont_bits_21_25[11];
    if (sel_2_1292) begin
      p4347cont_bits_21_cont_bits_21[11] = tmp_322;
    end
    cont_bits_21_26[0] = cont_bits_21_25[0];
    cont_bits_21_26[1] = cont_bits_21_25[1];
    cont_bits_21_26[2] = cont_bits_21_25[2];
    cont_bits_21_26[3] = cont_bits_21_25[3];
    cont_bits_21_26[4] = cont_bits_21_25[4];
    cont_bits_21_26[5] = cont_bits_21_25[5];
    cont_bits_21_26[6] = cont_bits_21_25[6];
    cont_bits_21_26[7] = cont_bits_21_25[7];
    cont_bits_21_26[8] = cont_bits_21_25[8];
    cont_bits_21_26[9] = cont_bits_21_25[9];
    cont_bits_21_26[10] = cont_bits_21_25[10];
    cont_bits_21_26[11] = p4347cont_bits_21_cont_bits_21[11];
  end

  assign sel_7151 = 32'sd0;

  assign sel_7152 = 32'sd0;

  assign sel_7153 = 32'sd0;

  assign sel_7154 = 32'sd0;

  assign sel_7155 = 32'sd0;

  assign sel_7156 = 32'sd0;

  assign sel_7157 = 32'sd0;

  assign sel_7158 = 32'sd0;

  assign sel_7159 = 32'sd0;

  assign sel_7160 = 32'sd0;

  assign sel_7161 = 32'sd0;

  assign sel_7162 = 32'sd0;

  assign sel_7163 = 32'sd0;

  assign sel_7164 = 32'sd0;

  assign sel_7165 = 32'sd0;

  assign s_441 = 32'sd0;

  assign sel_1_1333 = (tmp_13 == 1'b0 ? sel_7165 :
              s_441);

  assign sel_7166 = 32'sd0;

  assign sel_1_1334 = (tmp_15 == 1'b0 ? sel_1_1333 :
              sel_7166);

  assign sel_7167 = 32'sd0;

  assign sel_1_1335 = (tmp_17 == 1'b0 ? sel_1_1334 :
              sel_7167);

  assign sel_1_1336 = (s_10 == 1'b0 ? sel_7164 :
              sel_1_1335);

  assign sel_1_1337 = (s_11 == 1'b0 ? sel_7163 :
              sel_1_1336);

  assign sel_7168 = 32'sd0;

  assign sel_1_1338 = (s_12 == 1'b0 ? sel_1_1337 :
              sel_7168);

  assign sel_7169 = 32'sd0;

  assign sel_7170 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1338, sel_7151, sel_7152, sel_7153, sel_7154, sel_7155,
       sel_7156, sel_7157, sel_7158, sel_7159, sel_7160, sel_7161, sel_7162,
       sel_7169, sel_7170) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3093_sel_1 = sel_7169;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3093_sel_1 = sel_1_1338;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3093_sel_1 = sel_7162;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3093_sel_1 = sel_7161;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3093_sel_1 = sel_7160;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3093_sel_1 = sel_7159;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3093_sel_1 = sel_7158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3093_sel_1 = sel_7157;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3093_sel_1 = sel_7156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3093_sel_1 = sel_7155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3093_sel_1 = sel_7154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3093_sel_1 = sel_7153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3093_sel_1 = sel_7152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3093_sel_1 = sel_7151;
        end
      default :
        begin
          p3093_sel_1 = sel_7170;
        end
    endcase
    sel_1_1339 = p3093_sel_1;
  end

  assign cont_bits_21_27 = cont_bits_21_26[sel_1_1339];

  assign sel_1_1340 = (tmp_13 == 1'b0 ? sel_1_1248 :
              cont_bits_21_27);

  assign cont_bits_12_14[0] = 1'b0;
  assign cont_bits_12_14[1] = 1'b0;
  assign cont_bits_12_14[2] = 1'b0;
  assign cont_bits_12_14[3] = 1'b0;
  assign cont_bits_12_14[4] = 1'b0;
  assign cont_bits_12_14[5] = 1'b0;
  assign cont_bits_12_14[6] = 1'b0;
  assign cont_bits_12_14[7] = 1'b0;
  assign cont_bits_12_14[8] = 1'b0;
  assign cont_bits_12_14[9] = 1'b0;
  assign cont_bits_12_14[10] = 1'b0;
  assign cont_bits_12_14[11] = 1'b0;

  simfcn1 u_simfcn1_14 (.vx(r_v12),  // uint16
                        .cont_bits2_0(functionOutput_0_14),  // boolean
                        .cont_bits2_1(functionOutput_1_14),  // boolean
                        .cont_bits2_2(functionOutput_2_14),  // boolean
                        .cont_bits2_3(functionOutput_3_14),  // boolean
                        .cont_bits2_4(functionOutput_4_14),  // boolean
                        .cont_bits2_5(functionOutput_5_14),  // boolean
                        .cont_bits2_6(functionOutput_6_14),  // boolean
                        .cont_bits2_7(functionOutput_7_14),  // boolean
                        .cont_bits2_8(functionOutput_8_14),  // boolean
                        .cont_bits2_9(functionOutput_9_14),  // boolean
                        .cont_bits2_10(functionOutput_10_14),  // boolean
                        .cont_bits2_11(functionOutput_11_14)  // boolean
                        );

  assign functionOutput_25[0] = functionOutput_0_14;
  assign functionOutput_25[1] = functionOutput_1_14;
  assign functionOutput_25[2] = functionOutput_2_14;
  assign functionOutput_25[3] = functionOutput_3_14;
  assign functionOutput_25[4] = functionOutput_4_14;
  assign functionOutput_25[5] = functionOutput_5_14;
  assign functionOutput_25[6] = functionOutput_6_14;
  assign functionOutput_25[7] = functionOutput_7_14;
  assign functionOutput_25[8] = functionOutput_8_14;
  assign functionOutput_25[9] = functionOutput_9_14;
  assign functionOutput_25[10] = functionOutput_10_14;
  assign functionOutput_25[11] = functionOutput_11_14;

  assign sel_7171 = 32'sd0;

  assign sel_7172 = 32'sd0;

  assign sel_7173 = 32'sd0;

  assign sel_7174 = 32'sd0;

  assign sel_7175 = 32'sd0;

  assign sel_7176 = 32'sd0;

  assign sel_7177 = 32'sd0;

  assign sel_7178 = 32'sd0;

  assign sel_7179 = 32'sd0;

  assign sel_7180 = 32'sd0;

  assign sel_7181 = 32'sd0;

  assign sel_7182 = 32'sd0;

  assign sel_7183 = 32'sd0;

  assign sel_7184 = 32'sd0;

  assign sel_7185 = 32'sd0;

  assign s_442 = 32'sd0;

  assign sel_1_1341 = (tmp_15 == 1'b0 ? sel_7185 :
              s_442);

  assign sel_7186 = 32'sd0;

  assign sel_1_1342 = (tmp_17 == 1'b0 ? sel_1_1341 :
              sel_7186);

  assign sel_1_1343 = (s_10 == 1'b0 ? sel_7184 :
              sel_1_1342);

  assign sel_1_1344 = (s_11 == 1'b0 ? sel_7183 :
              sel_1_1343);

  assign sel_7187 = 32'sd0;

  assign sel_1_1345 = (s_12 == 1'b0 ? sel_1_1344 :
              sel_7187);

  assign sel_7188 = 32'sd0;

  assign sel_7189 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1345, sel_7171, sel_7172, sel_7173, sel_7174, sel_7175,
       sel_7176, sel_7177, sel_7178, sel_7179, sel_7180, sel_7181, sel_7182,
       sel_7188, sel_7189) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8588_sel_1 = sel_7188;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8588_sel_1 = sel_1_1345;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8588_sel_1 = sel_7182;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8588_sel_1 = sel_7181;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8588_sel_1 = sel_7180;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8588_sel_1 = sel_7179;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8588_sel_1 = sel_7178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8588_sel_1 = sel_7177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8588_sel_1 = sel_7176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8588_sel_1 = sel_7175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8588_sel_1 = sel_7174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8588_sel_1 = sel_7173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8588_sel_1 = sel_7172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8588_sel_1 = sel_7171;
        end
      default :
        begin
          p8588_sel_1 = sel_7189;
        end
    endcase
    sel_1_1346 = p8588_sel_1;
  end

  assign tmp_323 = functionOutput_25[sel_1_1346];

  assign sel_7190 = 1'b0;

  assign sel_7191 = 1'b0;

  assign sel_7192 = 1'b0;

  assign sel_7193 = 1'b0;

  assign sel_7194 = 1'b0;

  assign sel_7195 = 1'b0;

  assign sel_7196 = 1'b0;

  assign sel_7197 = 1'b0;

  assign sel_7198 = 1'b0;

  assign sel_7199 = 1'b0;

  assign sel_7200 = 1'b0;

  assign sel_7201 = 1'b0;

  assign sel_7202 = 1'b0;

  assign sel_7203 = 1'b0;

  assign sel_7204 = 1'b0;

  assign s_443 = 1'b1;

  assign sel_2_1293 = (tmp_15 == 1'b0 ? sel_7204 :
              s_443);

  assign sel_7205 = 1'b0;

  assign sel_2_1294 = (tmp_17 == 1'b0 ? sel_2_1293 :
              sel_7205);

  assign sel_2_1295 = (s_10 == 1'b0 ? sel_7203 :
              sel_2_1294);

  assign sel_2_1296 = (s_11 == 1'b0 ? sel_7202 :
              sel_2_1295);

  assign sel_7206 = 1'b0;

  assign sel_2_1297 = (s_12 == 1'b0 ? sel_2_1296 :
              sel_7206);

  assign sel_7207 = 1'b0;

  assign sel_7208 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1297, sel_7190, sel_7191, sel_7192, sel_7193, sel_7194,
       sel_7195, sel_7196, sel_7197, sel_7198, sel_7199, sel_7200, sel_7201,
       sel_7207, sel_7208) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7820_sel_2 = sel_7207;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7820_sel_2 = sel_2_1297;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7820_sel_2 = sel_7201;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7820_sel_2 = sel_7200;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7820_sel_2 = sel_7199;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7820_sel_2 = sel_7198;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7820_sel_2 = sel_7197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7820_sel_2 = sel_7196;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7820_sel_2 = sel_7195;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7820_sel_2 = sel_7194;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7820_sel_2 = sel_7193;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7820_sel_2 = sel_7192;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7820_sel_2 = sel_7191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7820_sel_2 = sel_7190;
        end
      default :
        begin
          p7820_sel_2 = sel_7208;
        end
    endcase
    sel_2_1298 = p7820_sel_2;
  end

  always @* begin
    p7819cont_bits_12_cont_bits_12[0] = cont_bits_12_14[0];
    if (sel_2_1298) begin
      p7819cont_bits_12_cont_bits_12[0] = tmp_323;
    end
    cont_bits_12_15[0] = p7819cont_bits_12_cont_bits_12[0];
    cont_bits_12_15[1] = cont_bits_12_14[1];
    cont_bits_12_15[2] = cont_bits_12_14[2];
    cont_bits_12_15[3] = cont_bits_12_14[3];
    cont_bits_12_15[4] = cont_bits_12_14[4];
    cont_bits_12_15[5] = cont_bits_12_14[5];
    cont_bits_12_15[6] = cont_bits_12_14[6];
    cont_bits_12_15[7] = cont_bits_12_14[7];
    cont_bits_12_15[8] = cont_bits_12_14[8];
    cont_bits_12_15[9] = cont_bits_12_14[9];
    cont_bits_12_15[10] = cont_bits_12_14[10];
    cont_bits_12_15[11] = cont_bits_12_14[11];
  end

  assign sel_7209 = 32'sd0;

  assign sel_7210 = 32'sd0;

  assign sel_7211 = 32'sd0;

  assign sel_7212 = 32'sd0;

  assign sel_7213 = 32'sd0;

  assign sel_7214 = 32'sd0;

  assign sel_7215 = 32'sd0;

  assign sel_7216 = 32'sd0;

  assign sel_7217 = 32'sd0;

  assign sel_7218 = 32'sd0;

  assign sel_7219 = 32'sd0;

  assign sel_7220 = 32'sd0;

  assign sel_7221 = 32'sd0;

  assign sel_7222 = 32'sd0;

  assign sel_7223 = 32'sd0;

  assign s_444 = 32'sd1;

  assign sel_1_1347 = (tmp_15 == 1'b0 ? sel_7223 :
              s_444);

  assign sel_7224 = 32'sd0;

  assign sel_1_1348 = (tmp_17 == 1'b0 ? sel_1_1347 :
              sel_7224);

  assign sel_1_1349 = (s_10 == 1'b0 ? sel_7222 :
              sel_1_1348);

  assign sel_1_1350 = (s_11 == 1'b0 ? sel_7221 :
              sel_1_1349);

  assign sel_7225 = 32'sd0;

  assign sel_1_1351 = (s_12 == 1'b0 ? sel_1_1350 :
              sel_7225);

  assign sel_7226 = 32'sd0;

  assign sel_7227 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1351, sel_7209, sel_7210, sel_7211, sel_7212, sel_7213,
       sel_7214, sel_7215, sel_7216, sel_7217, sel_7218, sel_7219, sel_7220,
       sel_7226, sel_7227) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8554_sel_1 = sel_7226;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8554_sel_1 = sel_1_1351;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8554_sel_1 = sel_7220;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8554_sel_1 = sel_7219;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8554_sel_1 = sel_7218;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8554_sel_1 = sel_7217;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8554_sel_1 = sel_7216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8554_sel_1 = sel_7215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8554_sel_1 = sel_7214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8554_sel_1 = sel_7213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8554_sel_1 = sel_7212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8554_sel_1 = sel_7211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8554_sel_1 = sel_7210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8554_sel_1 = sel_7209;
        end
      default :
        begin
          p8554_sel_1 = sel_7227;
        end
    endcase
    sel_1_1352 = p8554_sel_1;
  end

  assign tmp_324 = functionOutput_25[sel_1_1352];

  assign sel_7228 = 1'b0;

  assign sel_7229 = 1'b0;

  assign sel_7230 = 1'b0;

  assign sel_7231 = 1'b0;

  assign sel_7232 = 1'b0;

  assign sel_7233 = 1'b0;

  assign sel_7234 = 1'b0;

  assign sel_7235 = 1'b0;

  assign sel_7236 = 1'b0;

  assign sel_7237 = 1'b0;

  assign sel_7238 = 1'b0;

  assign sel_7239 = 1'b0;

  assign sel_7240 = 1'b0;

  assign sel_7241 = 1'b0;

  assign sel_7242 = 1'b0;

  assign s_445 = 1'b1;

  assign sel_2_1299 = (tmp_15 == 1'b0 ? sel_7242 :
              s_445);

  assign sel_7243 = 1'b0;

  assign sel_2_1300 = (tmp_17 == 1'b0 ? sel_2_1299 :
              sel_7243);

  assign sel_2_1301 = (s_10 == 1'b0 ? sel_7241 :
              sel_2_1300);

  assign sel_2_1302 = (s_11 == 1'b0 ? sel_7240 :
              sel_2_1301);

  assign sel_7244 = 1'b0;

  assign sel_2_1303 = (s_12 == 1'b0 ? sel_2_1302 :
              sel_7244);

  assign sel_7245 = 1'b0;

  assign sel_7246 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1303, sel_7228, sel_7229, sel_7230, sel_7231, sel_7232,
       sel_7233, sel_7234, sel_7235, sel_7236, sel_7237, sel_7238, sel_7239,
       sel_7245, sel_7246) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7359_sel_2 = sel_7245;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7359_sel_2 = sel_2_1303;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7359_sel_2 = sel_7239;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7359_sel_2 = sel_7238;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7359_sel_2 = sel_7237;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7359_sel_2 = sel_7236;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7359_sel_2 = sel_7235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7359_sel_2 = sel_7234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7359_sel_2 = sel_7233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7359_sel_2 = sel_7232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7359_sel_2 = sel_7231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7359_sel_2 = sel_7230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7359_sel_2 = sel_7229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7359_sel_2 = sel_7228;
        end
      default :
        begin
          p7359_sel_2 = sel_7246;
        end
    endcase
    sel_2_1304 = p7359_sel_2;
  end

  always @* begin
    p7358cont_bits_12_cont_bits_12[1] = cont_bits_12_15[1];
    if (sel_2_1304) begin
      p7358cont_bits_12_cont_bits_12[1] = tmp_324;
    end
    cont_bits_12_16[0] = cont_bits_12_15[0];
    cont_bits_12_16[1] = p7358cont_bits_12_cont_bits_12[1];
    cont_bits_12_16[2] = cont_bits_12_15[2];
    cont_bits_12_16[3] = cont_bits_12_15[3];
    cont_bits_12_16[4] = cont_bits_12_15[4];
    cont_bits_12_16[5] = cont_bits_12_15[5];
    cont_bits_12_16[6] = cont_bits_12_15[6];
    cont_bits_12_16[7] = cont_bits_12_15[7];
    cont_bits_12_16[8] = cont_bits_12_15[8];
    cont_bits_12_16[9] = cont_bits_12_15[9];
    cont_bits_12_16[10] = cont_bits_12_15[10];
    cont_bits_12_16[11] = cont_bits_12_15[11];
  end

  assign sel_7247 = 32'sd0;

  assign sel_7248 = 32'sd0;

  assign sel_7249 = 32'sd0;

  assign sel_7250 = 32'sd0;

  assign sel_7251 = 32'sd0;

  assign sel_7252 = 32'sd0;

  assign sel_7253 = 32'sd0;

  assign sel_7254 = 32'sd0;

  assign sel_7255 = 32'sd0;

  assign sel_7256 = 32'sd0;

  assign sel_7257 = 32'sd0;

  assign sel_7258 = 32'sd0;

  assign sel_7259 = 32'sd0;

  assign sel_7260 = 32'sd0;

  assign sel_7261 = 32'sd0;

  assign s_446 = 32'sd2;

  assign sel_1_1353 = (tmp_15 == 1'b0 ? sel_7261 :
              s_446);

  assign sel_7262 = 32'sd0;

  assign sel_1_1354 = (tmp_17 == 1'b0 ? sel_1_1353 :
              sel_7262);

  assign sel_1_1355 = (s_10 == 1'b0 ? sel_7260 :
              sel_1_1354);

  assign sel_1_1356 = (s_11 == 1'b0 ? sel_7259 :
              sel_1_1355);

  assign sel_7263 = 32'sd0;

  assign sel_1_1357 = (s_12 == 1'b0 ? sel_1_1356 :
              sel_7263);

  assign sel_7264 = 32'sd0;

  assign sel_7265 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1357, sel_7247, sel_7248, sel_7249, sel_7250, sel_7251,
       sel_7252, sel_7253, sel_7254, sel_7255, sel_7256, sel_7257, sel_7258,
       sel_7264, sel_7265) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8367_sel_1 = sel_7264;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8367_sel_1 = sel_1_1357;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8367_sel_1 = sel_7258;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8367_sel_1 = sel_7257;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8367_sel_1 = sel_7256;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8367_sel_1 = sel_7255;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8367_sel_1 = sel_7254;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8367_sel_1 = sel_7253;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8367_sel_1 = sel_7252;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8367_sel_1 = sel_7251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8367_sel_1 = sel_7250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8367_sel_1 = sel_7249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8367_sel_1 = sel_7248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8367_sel_1 = sel_7247;
        end
      default :
        begin
          p8367_sel_1 = sel_7265;
        end
    endcase
    sel_1_1358 = p8367_sel_1;
  end

  assign tmp_325 = functionOutput_25[sel_1_1358];

  assign sel_7266 = 1'b0;

  assign sel_7267 = 1'b0;

  assign sel_7268 = 1'b0;

  assign sel_7269 = 1'b0;

  assign sel_7270 = 1'b0;

  assign sel_7271 = 1'b0;

  assign sel_7272 = 1'b0;

  assign sel_7273 = 1'b0;

  assign sel_7274 = 1'b0;

  assign sel_7275 = 1'b0;

  assign sel_7276 = 1'b0;

  assign sel_7277 = 1'b0;

  assign sel_7278 = 1'b0;

  assign sel_7279 = 1'b0;

  assign sel_7280 = 1'b0;

  assign s_447 = 1'b1;

  assign sel_2_1305 = (tmp_15 == 1'b0 ? sel_7280 :
              s_447);

  assign sel_7281 = 1'b0;

  assign sel_2_1306 = (tmp_17 == 1'b0 ? sel_2_1305 :
              sel_7281);

  assign sel_2_1307 = (s_10 == 1'b0 ? sel_7279 :
              sel_2_1306);

  assign sel_2_1308 = (s_11 == 1'b0 ? sel_7278 :
              sel_2_1307);

  assign sel_7282 = 1'b0;

  assign sel_2_1309 = (s_12 == 1'b0 ? sel_2_1308 :
              sel_7282);

  assign sel_7283 = 1'b0;

  assign sel_7284 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1309, sel_7266, sel_7267, sel_7268, sel_7269, sel_7270,
       sel_7271, sel_7272, sel_7273, sel_7274, sel_7275, sel_7276, sel_7277,
       sel_7283, sel_7284) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7182_sel_2 = sel_7283;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7182_sel_2 = sel_2_1309;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7182_sel_2 = sel_7277;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7182_sel_2 = sel_7276;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7182_sel_2 = sel_7275;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7182_sel_2 = sel_7274;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7182_sel_2 = sel_7273;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7182_sel_2 = sel_7272;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7182_sel_2 = sel_7271;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7182_sel_2 = sel_7270;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7182_sel_2 = sel_7269;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7182_sel_2 = sel_7268;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7182_sel_2 = sel_7267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7182_sel_2 = sel_7266;
        end
      default :
        begin
          p7182_sel_2 = sel_7284;
        end
    endcase
    sel_2_1310 = p7182_sel_2;
  end

  always @* begin
    p7181cont_bits_12_cont_bits_12[2] = cont_bits_12_16[2];
    if (sel_2_1310) begin
      p7181cont_bits_12_cont_bits_12[2] = tmp_325;
    end
    cont_bits_12_17[0] = cont_bits_12_16[0];
    cont_bits_12_17[1] = cont_bits_12_16[1];
    cont_bits_12_17[2] = p7181cont_bits_12_cont_bits_12[2];
    cont_bits_12_17[3] = cont_bits_12_16[3];
    cont_bits_12_17[4] = cont_bits_12_16[4];
    cont_bits_12_17[5] = cont_bits_12_16[5];
    cont_bits_12_17[6] = cont_bits_12_16[6];
    cont_bits_12_17[7] = cont_bits_12_16[7];
    cont_bits_12_17[8] = cont_bits_12_16[8];
    cont_bits_12_17[9] = cont_bits_12_16[9];
    cont_bits_12_17[10] = cont_bits_12_16[10];
    cont_bits_12_17[11] = cont_bits_12_16[11];
  end

  assign sel_7285 = 32'sd0;

  assign sel_7286 = 32'sd0;

  assign sel_7287 = 32'sd0;

  assign sel_7288 = 32'sd0;

  assign sel_7289 = 32'sd0;

  assign sel_7290 = 32'sd0;

  assign sel_7291 = 32'sd0;

  assign sel_7292 = 32'sd0;

  assign sel_7293 = 32'sd0;

  assign sel_7294 = 32'sd0;

  assign sel_7295 = 32'sd0;

  assign sel_7296 = 32'sd0;

  assign sel_7297 = 32'sd0;

  assign sel_7298 = 32'sd0;

  assign sel_7299 = 32'sd0;

  assign s_448 = 32'sd3;

  assign sel_1_1359 = (tmp_15 == 1'b0 ? sel_7299 :
              s_448);

  assign sel_7300 = 32'sd0;

  assign sel_1_1360 = (tmp_17 == 1'b0 ? sel_1_1359 :
              sel_7300);

  assign sel_1_1361 = (s_10 == 1'b0 ? sel_7298 :
              sel_1_1360);

  assign sel_1_1362 = (s_11 == 1'b0 ? sel_7297 :
              sel_1_1361);

  assign sel_7301 = 32'sd0;

  assign sel_1_1363 = (s_12 == 1'b0 ? sel_1_1362 :
              sel_7301);

  assign sel_7302 = 32'sd0;

  assign sel_7303 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1363, sel_7285, sel_7286, sel_7287, sel_7288, sel_7289,
       sel_7290, sel_7291, sel_7292, sel_7293, sel_7294, sel_7295, sel_7296,
       sel_7302, sel_7303) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8384_sel_1 = sel_7302;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8384_sel_1 = sel_1_1363;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8384_sel_1 = sel_7296;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8384_sel_1 = sel_7295;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8384_sel_1 = sel_7294;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8384_sel_1 = sel_7293;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8384_sel_1 = sel_7292;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8384_sel_1 = sel_7291;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8384_sel_1 = sel_7290;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8384_sel_1 = sel_7289;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8384_sel_1 = sel_7288;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8384_sel_1 = sel_7287;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8384_sel_1 = sel_7286;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8384_sel_1 = sel_7285;
        end
      default :
        begin
          p8384_sel_1 = sel_7303;
        end
    endcase
    sel_1_1364 = p8384_sel_1;
  end

  assign tmp_326 = functionOutput_25[sel_1_1364];

  assign sel_7304 = 1'b0;

  assign sel_7305 = 1'b0;

  assign sel_7306 = 1'b0;

  assign sel_7307 = 1'b0;

  assign sel_7308 = 1'b0;

  assign sel_7309 = 1'b0;

  assign sel_7310 = 1'b0;

  assign sel_7311 = 1'b0;

  assign sel_7312 = 1'b0;

  assign sel_7313 = 1'b0;

  assign sel_7314 = 1'b0;

  assign sel_7315 = 1'b0;

  assign sel_7316 = 1'b0;

  assign sel_7317 = 1'b0;

  assign sel_7318 = 1'b0;

  assign s_449 = 1'b1;

  assign sel_2_1311 = (tmp_15 == 1'b0 ? sel_7318 :
              s_449);

  assign sel_7319 = 1'b0;

  assign sel_2_1312 = (tmp_17 == 1'b0 ? sel_2_1311 :
              sel_7319);

  assign sel_2_1313 = (s_10 == 1'b0 ? sel_7317 :
              sel_2_1312);

  assign sel_2_1314 = (s_11 == 1'b0 ? sel_7316 :
              sel_2_1313);

  assign sel_7320 = 1'b0;

  assign sel_2_1315 = (s_12 == 1'b0 ? sel_2_1314 :
              sel_7320);

  assign sel_7321 = 1'b0;

  assign sel_7322 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1315, sel_7304, sel_7305, sel_7306, sel_7307, sel_7308,
       sel_7309, sel_7310, sel_7311, sel_7312, sel_7313, sel_7314, sel_7315,
       sel_7321, sel_7322) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6721_sel_2 = sel_7321;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6721_sel_2 = sel_2_1315;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6721_sel_2 = sel_7315;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6721_sel_2 = sel_7314;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6721_sel_2 = sel_7313;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6721_sel_2 = sel_7312;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6721_sel_2 = sel_7311;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6721_sel_2 = sel_7310;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6721_sel_2 = sel_7309;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6721_sel_2 = sel_7308;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6721_sel_2 = sel_7307;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6721_sel_2 = sel_7306;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6721_sel_2 = sel_7305;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6721_sel_2 = sel_7304;
        end
      default :
        begin
          p6721_sel_2 = sel_7322;
        end
    endcase
    sel_2_1316 = p6721_sel_2;
  end

  always @* begin
    p6720cont_bits_12_cont_bits_12[3] = cont_bits_12_17[3];
    if (sel_2_1316) begin
      p6720cont_bits_12_cont_bits_12[3] = tmp_326;
    end
    cont_bits_12_18[0] = cont_bits_12_17[0];
    cont_bits_12_18[1] = cont_bits_12_17[1];
    cont_bits_12_18[2] = cont_bits_12_17[2];
    cont_bits_12_18[3] = p6720cont_bits_12_cont_bits_12[3];
    cont_bits_12_18[4] = cont_bits_12_17[4];
    cont_bits_12_18[5] = cont_bits_12_17[5];
    cont_bits_12_18[6] = cont_bits_12_17[6];
    cont_bits_12_18[7] = cont_bits_12_17[7];
    cont_bits_12_18[8] = cont_bits_12_17[8];
    cont_bits_12_18[9] = cont_bits_12_17[9];
    cont_bits_12_18[10] = cont_bits_12_17[10];
    cont_bits_12_18[11] = cont_bits_12_17[11];
  end

  assign sel_7323 = 32'sd0;

  assign sel_7324 = 32'sd0;

  assign sel_7325 = 32'sd0;

  assign sel_7326 = 32'sd0;

  assign sel_7327 = 32'sd0;

  assign sel_7328 = 32'sd0;

  assign sel_7329 = 32'sd0;

  assign sel_7330 = 32'sd0;

  assign sel_7331 = 32'sd0;

  assign sel_7332 = 32'sd0;

  assign sel_7333 = 32'sd0;

  assign sel_7334 = 32'sd0;

  assign sel_7335 = 32'sd0;

  assign sel_7336 = 32'sd0;

  assign sel_7337 = 32'sd0;

  assign s_450 = 32'sd4;

  assign sel_1_1365 = (tmp_15 == 1'b0 ? sel_7337 :
              s_450);

  assign sel_7338 = 32'sd0;

  assign sel_1_1366 = (tmp_17 == 1'b0 ? sel_1_1365 :
              sel_7338);

  assign sel_1_1367 = (s_10 == 1'b0 ? sel_7336 :
              sel_1_1366);

  assign sel_1_1368 = (s_11 == 1'b0 ? sel_7335 :
              sel_1_1367);

  assign sel_7339 = 32'sd0;

  assign sel_1_1369 = (s_12 == 1'b0 ? sel_1_1368 :
              sel_7339);

  assign sel_7340 = 32'sd0;

  assign sel_7341 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1369, sel_7323, sel_7324, sel_7325, sel_7326, sel_7327,
       sel_7328, sel_7329, sel_7330, sel_7331, sel_7332, sel_7333, sel_7334,
       sel_7340, sel_7341) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9846_sel_1 = sel_7340;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9846_sel_1 = sel_1_1369;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9846_sel_1 = sel_7334;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9846_sel_1 = sel_7333;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9846_sel_1 = sel_7332;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9846_sel_1 = sel_7331;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9846_sel_1 = sel_7330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9846_sel_1 = sel_7329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9846_sel_1 = sel_7328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9846_sel_1 = sel_7327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9846_sel_1 = sel_7326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9846_sel_1 = sel_7325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9846_sel_1 = sel_7324;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9846_sel_1 = sel_7323;
        end
      default :
        begin
          p9846_sel_1 = sel_7341;
        end
    endcase
    sel_1_1370 = p9846_sel_1;
  end

  assign tmp_327 = functionOutput_25[sel_1_1370];

  assign sel_7342 = 1'b0;

  assign sel_7343 = 1'b0;

  assign sel_7344 = 1'b0;

  assign sel_7345 = 1'b0;

  assign sel_7346 = 1'b0;

  assign sel_7347 = 1'b0;

  assign sel_7348 = 1'b0;

  assign sel_7349 = 1'b0;

  assign sel_7350 = 1'b0;

  assign sel_7351 = 1'b0;

  assign sel_7352 = 1'b0;

  assign sel_7353 = 1'b0;

  assign sel_7354 = 1'b0;

  assign sel_7355 = 1'b0;

  assign sel_7356 = 1'b0;

  assign s_451 = 1'b1;

  assign sel_2_1317 = (tmp_15 == 1'b0 ? sel_7356 :
              s_451);

  assign sel_7357 = 1'b0;

  assign sel_2_1318 = (tmp_17 == 1'b0 ? sel_2_1317 :
              sel_7357);

  assign sel_2_1319 = (s_10 == 1'b0 ? sel_7355 :
              sel_2_1318);

  assign sel_2_1320 = (s_11 == 1'b0 ? sel_7354 :
              sel_2_1319);

  assign sel_7358 = 1'b0;

  assign sel_2_1321 = (s_12 == 1'b0 ? sel_2_1320 :
              sel_7358);

  assign sel_7359 = 1'b0;

  assign sel_7360 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1321, sel_7342, sel_7343, sel_7344, sel_7345, sel_7346,
       sel_7347, sel_7348, sel_7349, sel_7350, sel_7351, sel_7352, sel_7353,
       sel_7359, sel_7360) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6575_sel_2 = sel_7359;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6575_sel_2 = sel_2_1321;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6575_sel_2 = sel_7353;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6575_sel_2 = sel_7352;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6575_sel_2 = sel_7351;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6575_sel_2 = sel_7350;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6575_sel_2 = sel_7349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6575_sel_2 = sel_7348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6575_sel_2 = sel_7347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6575_sel_2 = sel_7346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6575_sel_2 = sel_7345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6575_sel_2 = sel_7344;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6575_sel_2 = sel_7343;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6575_sel_2 = sel_7342;
        end
      default :
        begin
          p6575_sel_2 = sel_7360;
        end
    endcase
    sel_2_1322 = p6575_sel_2;
  end

  always @* begin
    p6574cont_bits_12_cont_bits_12[4] = cont_bits_12_18[4];
    if (sel_2_1322) begin
      p6574cont_bits_12_cont_bits_12[4] = tmp_327;
    end
    cont_bits_12_19[0] = cont_bits_12_18[0];
    cont_bits_12_19[1] = cont_bits_12_18[1];
    cont_bits_12_19[2] = cont_bits_12_18[2];
    cont_bits_12_19[3] = cont_bits_12_18[3];
    cont_bits_12_19[4] = p6574cont_bits_12_cont_bits_12[4];
    cont_bits_12_19[5] = cont_bits_12_18[5];
    cont_bits_12_19[6] = cont_bits_12_18[6];
    cont_bits_12_19[7] = cont_bits_12_18[7];
    cont_bits_12_19[8] = cont_bits_12_18[8];
    cont_bits_12_19[9] = cont_bits_12_18[9];
    cont_bits_12_19[10] = cont_bits_12_18[10];
    cont_bits_12_19[11] = cont_bits_12_18[11];
  end

  assign sel_7361 = 32'sd0;

  assign sel_7362 = 32'sd0;

  assign sel_7363 = 32'sd0;

  assign sel_7364 = 32'sd0;

  assign sel_7365 = 32'sd0;

  assign sel_7366 = 32'sd0;

  assign sel_7367 = 32'sd0;

  assign sel_7368 = 32'sd0;

  assign sel_7369 = 32'sd0;

  assign sel_7370 = 32'sd0;

  assign sel_7371 = 32'sd0;

  assign sel_7372 = 32'sd0;

  assign sel_7373 = 32'sd0;

  assign sel_7374 = 32'sd0;

  assign sel_7375 = 32'sd0;

  assign s_452 = 32'sd5;

  assign sel_1_1371 = (tmp_15 == 1'b0 ? sel_7375 :
              s_452);

  assign sel_7376 = 32'sd0;

  assign sel_1_1372 = (tmp_17 == 1'b0 ? sel_1_1371 :
              sel_7376);

  assign sel_1_1373 = (s_10 == 1'b0 ? sel_7374 :
              sel_1_1372);

  assign sel_1_1374 = (s_11 == 1'b0 ? sel_7373 :
              sel_1_1373);

  assign sel_7377 = 32'sd0;

  assign sel_1_1375 = (s_12 == 1'b0 ? sel_1_1374 :
              sel_7377);

  assign sel_7378 = 32'sd0;

  assign sel_7379 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1375, sel_7361, sel_7362, sel_7363, sel_7364, sel_7365,
       sel_7366, sel_7367, sel_7368, sel_7369, sel_7370, sel_7371, sel_7372,
       sel_7378, sel_7379) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8571_sel_1 = sel_7378;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8571_sel_1 = sel_1_1375;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8571_sel_1 = sel_7372;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8571_sel_1 = sel_7371;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8571_sel_1 = sel_7370;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8571_sel_1 = sel_7369;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8571_sel_1 = sel_7368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8571_sel_1 = sel_7367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8571_sel_1 = sel_7366;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8571_sel_1 = sel_7365;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8571_sel_1 = sel_7364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8571_sel_1 = sel_7363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8571_sel_1 = sel_7362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8571_sel_1 = sel_7361;
        end
      default :
        begin
          p8571_sel_1 = sel_7379;
        end
    endcase
    sel_1_1376 = p8571_sel_1;
  end

  assign tmp_328 = functionOutput_25[sel_1_1376];

  assign sel_7380 = 1'b0;

  assign sel_7381 = 1'b0;

  assign sel_7382 = 1'b0;

  assign sel_7383 = 1'b0;

  assign sel_7384 = 1'b0;

  assign sel_7385 = 1'b0;

  assign sel_7386 = 1'b0;

  assign sel_7387 = 1'b0;

  assign sel_7388 = 1'b0;

  assign sel_7389 = 1'b0;

  assign sel_7390 = 1'b0;

  assign sel_7391 = 1'b0;

  assign sel_7392 = 1'b0;

  assign sel_7393 = 1'b0;

  assign sel_7394 = 1'b0;

  assign s_453 = 1'b1;

  assign sel_2_1323 = (tmp_15 == 1'b0 ? sel_7394 :
              s_453);

  assign sel_7395 = 1'b0;

  assign sel_2_1324 = (tmp_17 == 1'b0 ? sel_2_1323 :
              sel_7395);

  assign sel_2_1325 = (s_10 == 1'b0 ? sel_7393 :
              sel_2_1324);

  assign sel_2_1326 = (s_11 == 1'b0 ? sel_7392 :
              sel_2_1325);

  assign sel_7396 = 1'b0;

  assign sel_2_1327 = (s_12 == 1'b0 ? sel_2_1326 :
              sel_7396);

  assign sel_7397 = 1'b0;

  assign sel_7398 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1327, sel_7380, sel_7381, sel_7382, sel_7383, sel_7384,
       sel_7385, sel_7386, sel_7387, sel_7388, sel_7389, sel_7390, sel_7391,
       sel_7397, sel_7398) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6115_sel_2 = sel_7397;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6115_sel_2 = sel_2_1327;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6115_sel_2 = sel_7391;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6115_sel_2 = sel_7390;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6115_sel_2 = sel_7389;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6115_sel_2 = sel_7388;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6115_sel_2 = sel_7387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6115_sel_2 = sel_7386;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6115_sel_2 = sel_7385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6115_sel_2 = sel_7384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6115_sel_2 = sel_7383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6115_sel_2 = sel_7382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6115_sel_2 = sel_7381;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6115_sel_2 = sel_7380;
        end
      default :
        begin
          p6115_sel_2 = sel_7398;
        end
    endcase
    sel_2_1328 = p6115_sel_2;
  end

  always @* begin
    p6114cont_bits_12_cont_bits_12[5] = cont_bits_12_19[5];
    if (sel_2_1328) begin
      p6114cont_bits_12_cont_bits_12[5] = tmp_328;
    end
    cont_bits_12_20[0] = cont_bits_12_19[0];
    cont_bits_12_20[1] = cont_bits_12_19[1];
    cont_bits_12_20[2] = cont_bits_12_19[2];
    cont_bits_12_20[3] = cont_bits_12_19[3];
    cont_bits_12_20[4] = cont_bits_12_19[4];
    cont_bits_12_20[5] = p6114cont_bits_12_cont_bits_12[5];
    cont_bits_12_20[6] = cont_bits_12_19[6];
    cont_bits_12_20[7] = cont_bits_12_19[7];
    cont_bits_12_20[8] = cont_bits_12_19[8];
    cont_bits_12_20[9] = cont_bits_12_19[9];
    cont_bits_12_20[10] = cont_bits_12_19[10];
    cont_bits_12_20[11] = cont_bits_12_19[11];
  end

  assign sel_7399 = 32'sd0;

  assign sel_7400 = 32'sd0;

  assign sel_7401 = 32'sd0;

  assign sel_7402 = 32'sd0;

  assign sel_7403 = 32'sd0;

  assign sel_7404 = 32'sd0;

  assign sel_7405 = 32'sd0;

  assign sel_7406 = 32'sd0;

  assign sel_7407 = 32'sd0;

  assign sel_7408 = 32'sd0;

  assign sel_7409 = 32'sd0;

  assign sel_7410 = 32'sd0;

  assign sel_7411 = 32'sd0;

  assign sel_7412 = 32'sd0;

  assign sel_7413 = 32'sd0;

  assign s_454 = 32'sd6;

  assign sel_1_1377 = (tmp_15 == 1'b0 ? sel_7413 :
              s_454);

  assign sel_7414 = 32'sd0;

  assign sel_1_1378 = (tmp_17 == 1'b0 ? sel_1_1377 :
              sel_7414);

  assign sel_1_1379 = (s_10 == 1'b0 ? sel_7412 :
              sel_1_1378);

  assign sel_1_1380 = (s_11 == 1'b0 ? sel_7411 :
              sel_1_1379);

  assign sel_7415 = 32'sd0;

  assign sel_1_1381 = (s_12 == 1'b0 ? sel_1_1380 :
              sel_7415);

  assign sel_7416 = 32'sd0;

  assign sel_7417 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1381, sel_7399, sel_7400, sel_7401, sel_7402, sel_7403,
       sel_7404, sel_7405, sel_7406, sel_7407, sel_7408, sel_7409, sel_7410,
       sel_7416, sel_7417) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8656_sel_1 = sel_7416;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8656_sel_1 = sel_1_1381;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8656_sel_1 = sel_7410;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8656_sel_1 = sel_7409;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8656_sel_1 = sel_7408;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8656_sel_1 = sel_7407;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8656_sel_1 = sel_7406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8656_sel_1 = sel_7405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8656_sel_1 = sel_7404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8656_sel_1 = sel_7403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8656_sel_1 = sel_7402;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8656_sel_1 = sel_7401;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8656_sel_1 = sel_7400;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8656_sel_1 = sel_7399;
        end
      default :
        begin
          p8656_sel_1 = sel_7417;
        end
    endcase
    sel_1_1382 = p8656_sel_1;
  end

  assign tmp_329 = functionOutput_25[sel_1_1382];

  assign sel_7418 = 1'b0;

  assign sel_7419 = 1'b0;

  assign sel_7420 = 1'b0;

  assign sel_7421 = 1'b0;

  assign sel_7422 = 1'b0;

  assign sel_7423 = 1'b0;

  assign sel_7424 = 1'b0;

  assign sel_7425 = 1'b0;

  assign sel_7426 = 1'b0;

  assign sel_7427 = 1'b0;

  assign sel_7428 = 1'b0;

  assign sel_7429 = 1'b0;

  assign sel_7430 = 1'b0;

  assign sel_7431 = 1'b0;

  assign sel_7432 = 1'b0;

  assign s_455 = 1'b1;

  assign sel_2_1329 = (tmp_15 == 1'b0 ? sel_7432 :
              s_455);

  assign sel_7433 = 1'b0;

  assign sel_2_1330 = (tmp_17 == 1'b0 ? sel_2_1329 :
              sel_7433);

  assign sel_2_1331 = (s_10 == 1'b0 ? sel_7431 :
              sel_2_1330);

  assign sel_2_1332 = (s_11 == 1'b0 ? sel_7430 :
              sel_2_1331);

  assign sel_7434 = 1'b0;

  assign sel_2_1333 = (s_12 == 1'b0 ? sel_2_1332 :
              sel_7434);

  assign sel_7435 = 1'b0;

  assign sel_7436 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1333, sel_7418, sel_7419, sel_7420, sel_7421, sel_7422,
       sel_7423, sel_7424, sel_7425, sel_7426, sel_7427, sel_7428, sel_7429,
       sel_7435, sel_7436) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5969_sel_2 = sel_7435;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5969_sel_2 = sel_2_1333;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5969_sel_2 = sel_7429;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5969_sel_2 = sel_7428;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5969_sel_2 = sel_7427;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5969_sel_2 = sel_7426;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5969_sel_2 = sel_7425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5969_sel_2 = sel_7424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5969_sel_2 = sel_7423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5969_sel_2 = sel_7422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5969_sel_2 = sel_7421;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5969_sel_2 = sel_7420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5969_sel_2 = sel_7419;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5969_sel_2 = sel_7418;
        end
      default :
        begin
          p5969_sel_2 = sel_7436;
        end
    endcase
    sel_2_1334 = p5969_sel_2;
  end

  always @* begin
    p5968cont_bits_12_cont_bits_12[6] = cont_bits_12_20[6];
    if (sel_2_1334) begin
      p5968cont_bits_12_cont_bits_12[6] = tmp_329;
    end
    cont_bits_12_21[0] = cont_bits_12_20[0];
    cont_bits_12_21[1] = cont_bits_12_20[1];
    cont_bits_12_21[2] = cont_bits_12_20[2];
    cont_bits_12_21[3] = cont_bits_12_20[3];
    cont_bits_12_21[4] = cont_bits_12_20[4];
    cont_bits_12_21[5] = cont_bits_12_20[5];
    cont_bits_12_21[6] = p5968cont_bits_12_cont_bits_12[6];
    cont_bits_12_21[7] = cont_bits_12_20[7];
    cont_bits_12_21[8] = cont_bits_12_20[8];
    cont_bits_12_21[9] = cont_bits_12_20[9];
    cont_bits_12_21[10] = cont_bits_12_20[10];
    cont_bits_12_21[11] = cont_bits_12_20[11];
  end

  assign sel_7437 = 32'sd0;

  assign sel_7438 = 32'sd0;

  assign sel_7439 = 32'sd0;

  assign sel_7440 = 32'sd0;

  assign sel_7441 = 32'sd0;

  assign sel_7442 = 32'sd0;

  assign sel_7443 = 32'sd0;

  assign sel_7444 = 32'sd0;

  assign sel_7445 = 32'sd0;

  assign sel_7446 = 32'sd0;

  assign sel_7447 = 32'sd0;

  assign sel_7448 = 32'sd0;

  assign sel_7449 = 32'sd0;

  assign sel_7450 = 32'sd0;

  assign sel_7451 = 32'sd0;

  assign s_456 = 32'sd7;

  assign sel_1_1383 = (tmp_15 == 1'b0 ? sel_7451 :
              s_456);

  assign sel_7452 = 32'sd0;

  assign sel_1_1384 = (tmp_17 == 1'b0 ? sel_1_1383 :
              sel_7452);

  assign sel_1_1385 = (s_10 == 1'b0 ? sel_7450 :
              sel_1_1384);

  assign sel_1_1386 = (s_11 == 1'b0 ? sel_7449 :
              sel_1_1385);

  assign sel_7453 = 32'sd0;

  assign sel_1_1387 = (s_12 == 1'b0 ? sel_1_1386 :
              sel_7453);

  assign sel_7454 = 32'sd0;

  assign sel_7455 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1387, sel_7437, sel_7438, sel_7439, sel_7440, sel_7441,
       sel_7442, sel_7443, sel_7444, sel_7445, sel_7446, sel_7447, sel_7448,
       sel_7454, sel_7455) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9251_sel_1 = sel_7454;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9251_sel_1 = sel_1_1387;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9251_sel_1 = sel_7448;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9251_sel_1 = sel_7447;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9251_sel_1 = sel_7446;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9251_sel_1 = sel_7445;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9251_sel_1 = sel_7444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9251_sel_1 = sel_7443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9251_sel_1 = sel_7442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9251_sel_1 = sel_7441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9251_sel_1 = sel_7440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9251_sel_1 = sel_7439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9251_sel_1 = sel_7438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9251_sel_1 = sel_7437;
        end
      default :
        begin
          p9251_sel_1 = sel_7455;
        end
    endcase
    sel_1_1388 = p9251_sel_1;
  end

  assign tmp_330 = functionOutput_25[sel_1_1388];

  assign sel_7456 = 1'b0;

  assign sel_7457 = 1'b0;

  assign sel_7458 = 1'b0;

  assign sel_7459 = 1'b0;

  assign sel_7460 = 1'b0;

  assign sel_7461 = 1'b0;

  assign sel_7462 = 1'b0;

  assign sel_7463 = 1'b0;

  assign sel_7464 = 1'b0;

  assign sel_7465 = 1'b0;

  assign sel_7466 = 1'b0;

  assign sel_7467 = 1'b0;

  assign sel_7468 = 1'b0;

  assign sel_7469 = 1'b0;

  assign sel_7470 = 1'b0;

  assign s_457 = 1'b1;

  assign sel_2_1335 = (tmp_15 == 1'b0 ? sel_7470 :
              s_457);

  assign sel_7471 = 1'b0;

  assign sel_2_1336 = (tmp_17 == 1'b0 ? sel_2_1335 :
              sel_7471);

  assign sel_2_1337 = (s_10 == 1'b0 ? sel_7469 :
              sel_2_1336);

  assign sel_2_1338 = (s_11 == 1'b0 ? sel_7468 :
              sel_2_1337);

  assign sel_7472 = 1'b0;

  assign sel_2_1339 = (s_12 == 1'b0 ? sel_2_1338 :
              sel_7472);

  assign sel_7473 = 1'b0;

  assign sel_7474 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1339, sel_7456, sel_7457, sel_7458, sel_7459, sel_7460,
       sel_7461, sel_7462, sel_7463, sel_7464, sel_7465, sel_7466, sel_7467,
       sel_7473, sel_7474) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5509_sel_2 = sel_7473;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5509_sel_2 = sel_2_1339;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5509_sel_2 = sel_7467;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5509_sel_2 = sel_7466;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5509_sel_2 = sel_7465;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5509_sel_2 = sel_7464;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5509_sel_2 = sel_7463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5509_sel_2 = sel_7462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5509_sel_2 = sel_7461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5509_sel_2 = sel_7460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5509_sel_2 = sel_7459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5509_sel_2 = sel_7458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5509_sel_2 = sel_7457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5509_sel_2 = sel_7456;
        end
      default :
        begin
          p5509_sel_2 = sel_7474;
        end
    endcase
    sel_2_1340 = p5509_sel_2;
  end

  always @* begin
    p5508cont_bits_12_cont_bits_12[7] = cont_bits_12_21[7];
    if (sel_2_1340) begin
      p5508cont_bits_12_cont_bits_12[7] = tmp_330;
    end
    cont_bits_12_22[0] = cont_bits_12_21[0];
    cont_bits_12_22[1] = cont_bits_12_21[1];
    cont_bits_12_22[2] = cont_bits_12_21[2];
    cont_bits_12_22[3] = cont_bits_12_21[3];
    cont_bits_12_22[4] = cont_bits_12_21[4];
    cont_bits_12_22[5] = cont_bits_12_21[5];
    cont_bits_12_22[6] = cont_bits_12_21[6];
    cont_bits_12_22[7] = p5508cont_bits_12_cont_bits_12[7];
    cont_bits_12_22[8] = cont_bits_12_21[8];
    cont_bits_12_22[9] = cont_bits_12_21[9];
    cont_bits_12_22[10] = cont_bits_12_21[10];
    cont_bits_12_22[11] = cont_bits_12_21[11];
  end

  assign sel_7475 = 32'sd0;

  assign sel_7476 = 32'sd0;

  assign sel_7477 = 32'sd0;

  assign sel_7478 = 32'sd0;

  assign sel_7479 = 32'sd0;

  assign sel_7480 = 32'sd0;

  assign sel_7481 = 32'sd0;

  assign sel_7482 = 32'sd0;

  assign sel_7483 = 32'sd0;

  assign sel_7484 = 32'sd0;

  assign sel_7485 = 32'sd0;

  assign sel_7486 = 32'sd0;

  assign sel_7487 = 32'sd0;

  assign sel_7488 = 32'sd0;

  assign sel_7489 = 32'sd0;

  assign s_458 = 32'sd8;

  assign sel_1_1389 = (tmp_15 == 1'b0 ? sel_7489 :
              s_458);

  assign sel_7490 = 32'sd0;

  assign sel_1_1390 = (tmp_17 == 1'b0 ? sel_1_1389 :
              sel_7490);

  assign sel_1_1391 = (s_10 == 1'b0 ? sel_7488 :
              sel_1_1390);

  assign sel_1_1392 = (s_11 == 1'b0 ? sel_7487 :
              sel_1_1391);

  assign sel_7491 = 32'sd0;

  assign sel_1_1393 = (s_12 == 1'b0 ? sel_1_1392 :
              sel_7491);

  assign sel_7492 = 32'sd0;

  assign sel_7493 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1393, sel_7475, sel_7476, sel_7477, sel_7478, sel_7479,
       sel_7480, sel_7481, sel_7482, sel_7483, sel_7484, sel_7485, sel_7486,
       sel_7492, sel_7493) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9081_sel_1 = sel_7492;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9081_sel_1 = sel_1_1393;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9081_sel_1 = sel_7486;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9081_sel_1 = sel_7485;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9081_sel_1 = sel_7484;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9081_sel_1 = sel_7483;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9081_sel_1 = sel_7482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9081_sel_1 = sel_7481;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9081_sel_1 = sel_7480;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9081_sel_1 = sel_7479;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9081_sel_1 = sel_7478;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9081_sel_1 = sel_7477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9081_sel_1 = sel_7476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9081_sel_1 = sel_7475;
        end
      default :
        begin
          p9081_sel_1 = sel_7493;
        end
    endcase
    sel_1_1394 = p9081_sel_1;
  end

  assign tmp_331 = functionOutput_25[sel_1_1394];

  assign sel_7494 = 1'b0;

  assign sel_7495 = 1'b0;

  assign sel_7496 = 1'b0;

  assign sel_7497 = 1'b0;

  assign sel_7498 = 1'b0;

  assign sel_7499 = 1'b0;

  assign sel_7500 = 1'b0;

  assign sel_7501 = 1'b0;

  assign sel_7502 = 1'b0;

  assign sel_7503 = 1'b0;

  assign sel_7504 = 1'b0;

  assign sel_7505 = 1'b0;

  assign sel_7506 = 1'b0;

  assign sel_7507 = 1'b0;

  assign sel_7508 = 1'b0;

  assign s_459 = 1'b1;

  assign sel_2_1341 = (tmp_15 == 1'b0 ? sel_7508 :
              s_459);

  assign sel_7509 = 1'b0;

  assign sel_2_1342 = (tmp_17 == 1'b0 ? sel_2_1341 :
              sel_7509);

  assign sel_2_1343 = (s_10 == 1'b0 ? sel_7507 :
              sel_2_1342);

  assign sel_2_1344 = (s_11 == 1'b0 ? sel_7506 :
              sel_2_1343);

  assign sel_7510 = 1'b0;

  assign sel_2_1345 = (s_12 == 1'b0 ? sel_2_1344 :
              sel_7510);

  assign sel_7511 = 1'b0;

  assign sel_7512 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1345, sel_7494, sel_7495, sel_7496, sel_7497, sel_7498,
       sel_7499, sel_7500, sel_7501, sel_7502, sel_7503, sel_7504, sel_7505,
       sel_7511, sel_7512) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5363_sel_2 = sel_7511;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5363_sel_2 = sel_2_1345;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5363_sel_2 = sel_7505;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5363_sel_2 = sel_7504;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5363_sel_2 = sel_7503;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5363_sel_2 = sel_7502;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5363_sel_2 = sel_7501;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5363_sel_2 = sel_7500;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5363_sel_2 = sel_7499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5363_sel_2 = sel_7498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5363_sel_2 = sel_7497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5363_sel_2 = sel_7496;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5363_sel_2 = sel_7495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5363_sel_2 = sel_7494;
        end
      default :
        begin
          p5363_sel_2 = sel_7512;
        end
    endcase
    sel_2_1346 = p5363_sel_2;
  end

  always @* begin
    p5362cont_bits_12_cont_bits_12[8] = cont_bits_12_22[8];
    if (sel_2_1346) begin
      p5362cont_bits_12_cont_bits_12[8] = tmp_331;
    end
    cont_bits_12_23[0] = cont_bits_12_22[0];
    cont_bits_12_23[1] = cont_bits_12_22[1];
    cont_bits_12_23[2] = cont_bits_12_22[2];
    cont_bits_12_23[3] = cont_bits_12_22[3];
    cont_bits_12_23[4] = cont_bits_12_22[4];
    cont_bits_12_23[5] = cont_bits_12_22[5];
    cont_bits_12_23[6] = cont_bits_12_22[6];
    cont_bits_12_23[7] = cont_bits_12_22[7];
    cont_bits_12_23[8] = p5362cont_bits_12_cont_bits_12[8];
    cont_bits_12_23[9] = cont_bits_12_22[9];
    cont_bits_12_23[10] = cont_bits_12_22[10];
    cont_bits_12_23[11] = cont_bits_12_22[11];
  end

  assign sel_7513 = 32'sd0;

  assign sel_7514 = 32'sd0;

  assign sel_7515 = 32'sd0;

  assign sel_7516 = 32'sd0;

  assign sel_7517 = 32'sd0;

  assign sel_7518 = 32'sd0;

  assign sel_7519 = 32'sd0;

  assign sel_7520 = 32'sd0;

  assign sel_7521 = 32'sd0;

  assign sel_7522 = 32'sd0;

  assign sel_7523 = 32'sd0;

  assign sel_7524 = 32'sd0;

  assign sel_7525 = 32'sd0;

  assign sel_7526 = 32'sd0;

  assign sel_7527 = 32'sd0;

  assign s_460 = 32'sd9;

  assign sel_1_1395 = (tmp_15 == 1'b0 ? sel_7527 :
              s_460);

  assign sel_7528 = 32'sd0;

  assign sel_1_1396 = (tmp_17 == 1'b0 ? sel_1_1395 :
              sel_7528);

  assign sel_1_1397 = (s_10 == 1'b0 ? sel_7526 :
              sel_1_1396);

  assign sel_1_1398 = (s_11 == 1'b0 ? sel_7525 :
              sel_1_1397);

  assign sel_7529 = 32'sd0;

  assign sel_1_1399 = (s_12 == 1'b0 ? sel_1_1398 :
              sel_7529);

  assign sel_7530 = 32'sd0;

  assign sel_7531 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1399, sel_7513, sel_7514, sel_7515, sel_7516, sel_7517,
       sel_7518, sel_7519, sel_7520, sel_7521, sel_7522, sel_7523, sel_7524,
       sel_7530, sel_7531) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8350_sel_1 = sel_7530;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8350_sel_1 = sel_1_1399;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8350_sel_1 = sel_7524;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8350_sel_1 = sel_7523;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8350_sel_1 = sel_7522;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8350_sel_1 = sel_7521;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8350_sel_1 = sel_7520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8350_sel_1 = sel_7519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8350_sel_1 = sel_7518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8350_sel_1 = sel_7517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8350_sel_1 = sel_7516;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8350_sel_1 = sel_7515;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8350_sel_1 = sel_7514;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8350_sel_1 = sel_7513;
        end
      default :
        begin
          p8350_sel_1 = sel_7531;
        end
    endcase
    sel_1_1400 = p8350_sel_1;
  end

  assign tmp_332 = functionOutput_25[sel_1_1400];

  assign sel_7532 = 1'b0;

  assign sel_7533 = 1'b0;

  assign sel_7534 = 1'b0;

  assign sel_7535 = 1'b0;

  assign sel_7536 = 1'b0;

  assign sel_7537 = 1'b0;

  assign sel_7538 = 1'b0;

  assign sel_7539 = 1'b0;

  assign sel_7540 = 1'b0;

  assign sel_7541 = 1'b0;

  assign sel_7542 = 1'b0;

  assign sel_7543 = 1'b0;

  assign sel_7544 = 1'b0;

  assign sel_7545 = 1'b0;

  assign sel_7546 = 1'b0;

  assign s_461 = 1'b1;

  assign sel_2_1347 = (tmp_15 == 1'b0 ? sel_7546 :
              s_461);

  assign sel_7547 = 1'b0;

  assign sel_2_1348 = (tmp_17 == 1'b0 ? sel_2_1347 :
              sel_7547);

  assign sel_2_1349 = (s_10 == 1'b0 ? sel_7545 :
              sel_2_1348);

  assign sel_2_1350 = (s_11 == 1'b0 ? sel_7544 :
              sel_2_1349);

  assign sel_7548 = 1'b0;

  assign sel_2_1351 = (s_12 == 1'b0 ? sel_2_1350 :
              sel_7548);

  assign sel_7549 = 1'b0;

  assign sel_7550 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1351, sel_7532, sel_7533, sel_7534, sel_7535, sel_7536,
       sel_7537, sel_7538, sel_7539, sel_7540, sel_7541, sel_7542, sel_7543,
       sel_7549, sel_7550) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4903_sel_2 = sel_7549;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4903_sel_2 = sel_2_1351;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4903_sel_2 = sel_7543;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4903_sel_2 = sel_7542;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4903_sel_2 = sel_7541;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4903_sel_2 = sel_7540;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4903_sel_2 = sel_7539;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4903_sel_2 = sel_7538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4903_sel_2 = sel_7537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4903_sel_2 = sel_7536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4903_sel_2 = sel_7535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4903_sel_2 = sel_7534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4903_sel_2 = sel_7533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4903_sel_2 = sel_7532;
        end
      default :
        begin
          p4903_sel_2 = sel_7550;
        end
    endcase
    sel_2_1352 = p4903_sel_2;
  end

  always @* begin
    p4902cont_bits_12_cont_bits_12[9] = cont_bits_12_23[9];
    if (sel_2_1352) begin
      p4902cont_bits_12_cont_bits_12[9] = tmp_332;
    end
    cont_bits_12_24[0] = cont_bits_12_23[0];
    cont_bits_12_24[1] = cont_bits_12_23[1];
    cont_bits_12_24[2] = cont_bits_12_23[2];
    cont_bits_12_24[3] = cont_bits_12_23[3];
    cont_bits_12_24[4] = cont_bits_12_23[4];
    cont_bits_12_24[5] = cont_bits_12_23[5];
    cont_bits_12_24[6] = cont_bits_12_23[6];
    cont_bits_12_24[7] = cont_bits_12_23[7];
    cont_bits_12_24[8] = cont_bits_12_23[8];
    cont_bits_12_24[9] = p4902cont_bits_12_cont_bits_12[9];
    cont_bits_12_24[10] = cont_bits_12_23[10];
    cont_bits_12_24[11] = cont_bits_12_23[11];
  end

  assign sel_7551 = 32'sd0;

  assign sel_7552 = 32'sd0;

  assign sel_7553 = 32'sd0;

  assign sel_7554 = 32'sd0;

  assign sel_7555 = 32'sd0;

  assign sel_7556 = 32'sd0;

  assign sel_7557 = 32'sd0;

  assign sel_7558 = 32'sd0;

  assign sel_7559 = 32'sd0;

  assign sel_7560 = 32'sd0;

  assign sel_7561 = 32'sd0;

  assign sel_7562 = 32'sd0;

  assign sel_7563 = 32'sd0;

  assign sel_7564 = 32'sd0;

  assign sel_7565 = 32'sd0;

  assign s_462 = 32'sd10;

  assign sel_1_1401 = (tmp_15 == 1'b0 ? sel_7565 :
              s_462);

  assign sel_7566 = 32'sd0;

  assign sel_1_1402 = (tmp_17 == 1'b0 ? sel_1_1401 :
              sel_7566);

  assign sel_1_1403 = (s_10 == 1'b0 ? sel_7564 :
              sel_1_1402);

  assign sel_1_1404 = (s_11 == 1'b0 ? sel_7563 :
              sel_1_1403);

  assign sel_7567 = 32'sd0;

  assign sel_1_1405 = (s_12 == 1'b0 ? sel_1_1404 :
              sel_7567);

  assign sel_7568 = 32'sd0;

  assign sel_7569 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1405, sel_7551, sel_7552, sel_7553, sel_7554, sel_7555,
       sel_7556, sel_7557, sel_7558, sel_7559, sel_7560, sel_7561, sel_7562,
       sel_7568, sel_7569) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8605_sel_1 = sel_7568;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8605_sel_1 = sel_1_1405;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8605_sel_1 = sel_7562;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8605_sel_1 = sel_7561;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8605_sel_1 = sel_7560;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8605_sel_1 = sel_7559;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8605_sel_1 = sel_7558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8605_sel_1 = sel_7557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8605_sel_1 = sel_7556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8605_sel_1 = sel_7555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8605_sel_1 = sel_7554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8605_sel_1 = sel_7553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8605_sel_1 = sel_7552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8605_sel_1 = sel_7551;
        end
      default :
        begin
          p8605_sel_1 = sel_7569;
        end
    endcase
    sel_1_1406 = p8605_sel_1;
  end

  assign tmp_333 = functionOutput_25[sel_1_1406];

  assign sel_7570 = 1'b0;

  assign sel_7571 = 1'b0;

  assign sel_7572 = 1'b0;

  assign sel_7573 = 1'b0;

  assign sel_7574 = 1'b0;

  assign sel_7575 = 1'b0;

  assign sel_7576 = 1'b0;

  assign sel_7577 = 1'b0;

  assign sel_7578 = 1'b0;

  assign sel_7579 = 1'b0;

  assign sel_7580 = 1'b0;

  assign sel_7581 = 1'b0;

  assign sel_7582 = 1'b0;

  assign sel_7583 = 1'b0;

  assign sel_7584 = 1'b0;

  assign s_463 = 1'b1;

  assign sel_2_1353 = (tmp_15 == 1'b0 ? sel_7584 :
              s_463);

  assign sel_7585 = 1'b0;

  assign sel_2_1354 = (tmp_17 == 1'b0 ? sel_2_1353 :
              sel_7585);

  assign sel_2_1355 = (s_10 == 1'b0 ? sel_7583 :
              sel_2_1354);

  assign sel_2_1356 = (s_11 == 1'b0 ? sel_7582 :
              sel_2_1355);

  assign sel_7586 = 1'b0;

  assign sel_2_1357 = (s_12 == 1'b0 ? sel_2_1356 :
              sel_7586);

  assign sel_7587 = 1'b0;

  assign sel_7588 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1357, sel_7570, sel_7571, sel_7572, sel_7573, sel_7574,
       sel_7575, sel_7576, sel_7577, sel_7578, sel_7579, sel_7580, sel_7581,
       sel_7587, sel_7588) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4757_sel_2 = sel_7587;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4757_sel_2 = sel_2_1357;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4757_sel_2 = sel_7581;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4757_sel_2 = sel_7580;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4757_sel_2 = sel_7579;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4757_sel_2 = sel_7578;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4757_sel_2 = sel_7577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4757_sel_2 = sel_7576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4757_sel_2 = sel_7575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4757_sel_2 = sel_7574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4757_sel_2 = sel_7573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4757_sel_2 = sel_7572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4757_sel_2 = sel_7571;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4757_sel_2 = sel_7570;
        end
      default :
        begin
          p4757_sel_2 = sel_7588;
        end
    endcase
    sel_2_1358 = p4757_sel_2;
  end

  always @* begin
    p4756cont_bits_12_cont_bits_12[10] = cont_bits_12_24[10];
    if (sel_2_1358) begin
      p4756cont_bits_12_cont_bits_12[10] = tmp_333;
    end
    cont_bits_12_25[0] = cont_bits_12_24[0];
    cont_bits_12_25[1] = cont_bits_12_24[1];
    cont_bits_12_25[2] = cont_bits_12_24[2];
    cont_bits_12_25[3] = cont_bits_12_24[3];
    cont_bits_12_25[4] = cont_bits_12_24[4];
    cont_bits_12_25[5] = cont_bits_12_24[5];
    cont_bits_12_25[6] = cont_bits_12_24[6];
    cont_bits_12_25[7] = cont_bits_12_24[7];
    cont_bits_12_25[8] = cont_bits_12_24[8];
    cont_bits_12_25[9] = cont_bits_12_24[9];
    cont_bits_12_25[10] = p4756cont_bits_12_cont_bits_12[10];
    cont_bits_12_25[11] = cont_bits_12_24[11];
  end

  assign sel_7589 = 32'sd0;

  assign sel_7590 = 32'sd0;

  assign sel_7591 = 32'sd0;

  assign sel_7592 = 32'sd0;

  assign sel_7593 = 32'sd0;

  assign sel_7594 = 32'sd0;

  assign sel_7595 = 32'sd0;

  assign sel_7596 = 32'sd0;

  assign sel_7597 = 32'sd0;

  assign sel_7598 = 32'sd0;

  assign sel_7599 = 32'sd0;

  assign sel_7600 = 32'sd0;

  assign sel_7601 = 32'sd0;

  assign sel_7602 = 32'sd0;

  assign sel_7603 = 32'sd0;

  assign s_464 = 32'sd11;

  assign sel_1_1407 = (tmp_15 == 1'b0 ? sel_7603 :
              s_464);

  assign sel_7604 = 32'sd0;

  assign sel_1_1408 = (tmp_17 == 1'b0 ? sel_1_1407 :
              sel_7604);

  assign sel_1_1409 = (s_10 == 1'b0 ? sel_7602 :
              sel_1_1408);

  assign sel_1_1410 = (s_11 == 1'b0 ? sel_7601 :
              sel_1_1409);

  assign sel_7605 = 32'sd0;

  assign sel_1_1411 = (s_12 == 1'b0 ? sel_1_1410 :
              sel_7605);

  assign sel_7606 = 32'sd0;

  assign sel_7607 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1411, sel_7589, sel_7590, sel_7591, sel_7592, sel_7593,
       sel_7594, sel_7595, sel_7596, sel_7597, sel_7598, sel_7599, sel_7600,
       sel_7606, sel_7607) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8299_sel_1 = sel_7606;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8299_sel_1 = sel_1_1411;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8299_sel_1 = sel_7600;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8299_sel_1 = sel_7599;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8299_sel_1 = sel_7598;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8299_sel_1 = sel_7597;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8299_sel_1 = sel_7596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8299_sel_1 = sel_7595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8299_sel_1 = sel_7594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8299_sel_1 = sel_7593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8299_sel_1 = sel_7592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8299_sel_1 = sel_7591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8299_sel_1 = sel_7590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8299_sel_1 = sel_7589;
        end
      default :
        begin
          p8299_sel_1 = sel_7607;
        end
    endcase
    sel_1_1412 = p8299_sel_1;
  end

  assign tmp_334 = functionOutput_25[sel_1_1412];

  assign sel_7608 = 1'b0;

  assign sel_7609 = 1'b0;

  assign sel_7610 = 1'b0;

  assign sel_7611 = 1'b0;

  assign sel_7612 = 1'b0;

  assign sel_7613 = 1'b0;

  assign sel_7614 = 1'b0;

  assign sel_7615 = 1'b0;

  assign sel_7616 = 1'b0;

  assign sel_7617 = 1'b0;

  assign sel_7618 = 1'b0;

  assign sel_7619 = 1'b0;

  assign sel_7620 = 1'b0;

  assign sel_7621 = 1'b0;

  assign sel_7622 = 1'b0;

  assign s_465 = 1'b1;

  assign sel_2_1359 = (tmp_15 == 1'b0 ? sel_7622 :
              s_465);

  assign sel_7623 = 1'b0;

  assign sel_2_1360 = (tmp_17 == 1'b0 ? sel_2_1359 :
              sel_7623);

  assign sel_2_1361 = (s_10 == 1'b0 ? sel_7621 :
              sel_2_1360);

  assign sel_2_1362 = (s_11 == 1'b0 ? sel_7620 :
              sel_2_1361);

  assign sel_7624 = 1'b0;

  assign sel_2_1363 = (s_12 == 1'b0 ? sel_2_1362 :
              sel_7624);

  assign sel_7625 = 1'b0;

  assign sel_7626 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1363, sel_7608, sel_7609, sel_7610, sel_7611, sel_7612,
       sel_7613, sel_7614, sel_7615, sel_7616, sel_7617, sel_7618, sel_7619,
       sel_7625, sel_7626) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4297_sel_2 = sel_7625;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4297_sel_2 = sel_2_1363;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4297_sel_2 = sel_7619;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4297_sel_2 = sel_7618;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4297_sel_2 = sel_7617;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4297_sel_2 = sel_7616;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4297_sel_2 = sel_7615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4297_sel_2 = sel_7614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4297_sel_2 = sel_7613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4297_sel_2 = sel_7612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4297_sel_2 = sel_7611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4297_sel_2 = sel_7610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4297_sel_2 = sel_7609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4297_sel_2 = sel_7608;
        end
      default :
        begin
          p4297_sel_2 = sel_7626;
        end
    endcase
    sel_2_1364 = p4297_sel_2;
  end

  always @* begin
    p4296cont_bits_12_cont_bits_12[11] = cont_bits_12_25[11];
    if (sel_2_1364) begin
      p4296cont_bits_12_cont_bits_12[11] = tmp_334;
    end
    cont_bits_12_26[0] = cont_bits_12_25[0];
    cont_bits_12_26[1] = cont_bits_12_25[1];
    cont_bits_12_26[2] = cont_bits_12_25[2];
    cont_bits_12_26[3] = cont_bits_12_25[3];
    cont_bits_12_26[4] = cont_bits_12_25[4];
    cont_bits_12_26[5] = cont_bits_12_25[5];
    cont_bits_12_26[6] = cont_bits_12_25[6];
    cont_bits_12_26[7] = cont_bits_12_25[7];
    cont_bits_12_26[8] = cont_bits_12_25[8];
    cont_bits_12_26[9] = cont_bits_12_25[9];
    cont_bits_12_26[10] = cont_bits_12_25[10];
    cont_bits_12_26[11] = p4296cont_bits_12_cont_bits_12[11];
  end

  assign sel_7627 = 32'sd0;

  assign sel_7628 = 32'sd0;

  assign sel_7629 = 32'sd0;

  assign sel_7630 = 32'sd0;

  assign sel_7631 = 32'sd0;

  assign sel_7632 = 32'sd0;

  assign sel_7633 = 32'sd0;

  assign sel_7634 = 32'sd0;

  assign sel_7635 = 32'sd0;

  assign sel_7636 = 32'sd0;

  assign sel_7637 = 32'sd0;

  assign sel_7638 = 32'sd0;

  assign sel_7639 = 32'sd0;

  assign sel_7640 = 32'sd0;

  assign sel_7641 = 32'sd0;

  assign s_466 = 32'sd0;

  assign sel_1_1413 = (tmp_15 == 1'b0 ? sel_7641 :
              s_466);

  assign sel_7642 = 32'sd0;

  assign sel_1_1414 = (tmp_17 == 1'b0 ? sel_1_1413 :
              sel_7642);

  assign sel_1_1415 = (s_10 == 1'b0 ? sel_7640 :
              sel_1_1414);

  assign sel_1_1416 = (s_11 == 1'b0 ? sel_7639 :
              sel_1_1415);

  assign sel_7643 = 32'sd0;

  assign sel_1_1417 = (s_12 == 1'b0 ? sel_1_1416 :
              sel_7643);

  assign sel_7644 = 32'sd0;

  assign sel_7645 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1417, sel_7627, sel_7628, sel_7629, sel_7630, sel_7631,
       sel_7632, sel_7633, sel_7634, sel_7635, sel_7636, sel_7637, sel_7638,
       sel_7644, sel_7645) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3807_sel_1 = sel_7644;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3807_sel_1 = sel_1_1417;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3807_sel_1 = sel_7638;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3807_sel_1 = sel_7637;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3807_sel_1 = sel_7636;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3807_sel_1 = sel_7635;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3807_sel_1 = sel_7634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3807_sel_1 = sel_7633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3807_sel_1 = sel_7632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3807_sel_1 = sel_7631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3807_sel_1 = sel_7630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3807_sel_1 = sel_7629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3807_sel_1 = sel_7628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3807_sel_1 = sel_7627;
        end
      default :
        begin
          p3807_sel_1 = sel_7645;
        end
    endcase
    sel_1_1418 = p3807_sel_1;
  end

  assign cont_bits_12_27 = cont_bits_12_26[sel_1_1418];

  assign sel_1_1419 = (tmp_15 == 1'b0 ? sel_1_1340 :
              cont_bits_12_27);

  assign cont_bits_15[0] = 1'b0;
  assign cont_bits_15[1] = 1'b0;
  assign cont_bits_15[2] = 1'b0;
  assign cont_bits_15[3] = 1'b0;
  assign cont_bits_15[4] = 1'b0;
  assign cont_bits_15[5] = 1'b0;
  assign cont_bits_15[6] = 1'b0;
  assign cont_bits_15[7] = 1'b0;
  assign cont_bits_15[8] = 1'b0;
  assign cont_bits_15[9] = 1'b0;
  assign cont_bits_15[10] = 1'b0;
  assign cont_bits_15[11] = 1'b0;

  simfcn1 u_simfcn1_15 (.vx(r_v11),  // uint16
                        .cont_bits2_0(functionOutput_0_15),  // boolean
                        .cont_bits2_1(functionOutput_1_15),  // boolean
                        .cont_bits2_2(functionOutput_2_15),  // boolean
                        .cont_bits2_3(functionOutput_3_15),  // boolean
                        .cont_bits2_4(functionOutput_4_15),  // boolean
                        .cont_bits2_5(functionOutput_5_15),  // boolean
                        .cont_bits2_6(functionOutput_6_15),  // boolean
                        .cont_bits2_7(functionOutput_7_15),  // boolean
                        .cont_bits2_8(functionOutput_8_15),  // boolean
                        .cont_bits2_9(functionOutput_9_15),  // boolean
                        .cont_bits2_10(functionOutput_10_15),  // boolean
                        .cont_bits2_11(functionOutput_11_15)  // boolean
                        );

  assign functionOutput_26[0] = functionOutput_0_15;
  assign functionOutput_26[1] = functionOutput_1_15;
  assign functionOutput_26[2] = functionOutput_2_15;
  assign functionOutput_26[3] = functionOutput_3_15;
  assign functionOutput_26[4] = functionOutput_4_15;
  assign functionOutput_26[5] = functionOutput_5_15;
  assign functionOutput_26[6] = functionOutput_6_15;
  assign functionOutput_26[7] = functionOutput_7_15;
  assign functionOutput_26[8] = functionOutput_8_15;
  assign functionOutput_26[9] = functionOutput_9_15;
  assign functionOutput_26[10] = functionOutput_10_15;
  assign functionOutput_26[11] = functionOutput_11_15;

  assign sel_7646 = 32'sd0;

  assign sel_7647 = 32'sd0;

  assign sel_7648 = 32'sd0;

  assign sel_7649 = 32'sd0;

  assign sel_7650 = 32'sd0;

  assign sel_7651 = 32'sd0;

  assign sel_7652 = 32'sd0;

  assign sel_7653 = 32'sd0;

  assign sel_7654 = 32'sd0;

  assign sel_7655 = 32'sd0;

  assign sel_7656 = 32'sd0;

  assign sel_7657 = 32'sd0;

  assign sel_7658 = 32'sd0;

  assign sel_7659 = 32'sd0;

  assign sel_7660 = 32'sd0;

  assign s_467 = 32'sd0;

  assign sel_1_1420 = (tmp_17 == 1'b0 ? sel_7660 :
              s_467);

  assign sel_1_1421 = (s_10 == 1'b0 ? sel_7659 :
              sel_1_1420);

  assign sel_1_1422 = (s_11 == 1'b0 ? sel_7658 :
              sel_1_1421);

  assign sel_7661 = 32'sd0;

  assign sel_1_1423 = (s_12 == 1'b0 ? sel_1_1422 :
              sel_7661);

  assign sel_7662 = 32'sd0;

  assign sel_7663 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1423, sel_7646, sel_7647, sel_7648, sel_7649, sel_7650,
       sel_7651, sel_7652, sel_7653, sel_7654, sel_7655, sel_7656, sel_7657,
       sel_7662, sel_7663) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9625_sel_1 = sel_7662;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9625_sel_1 = sel_1_1423;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9625_sel_1 = sel_7657;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9625_sel_1 = sel_7656;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9625_sel_1 = sel_7655;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9625_sel_1 = sel_7654;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9625_sel_1 = sel_7653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9625_sel_1 = sel_7652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9625_sel_1 = sel_7651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9625_sel_1 = sel_7650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9625_sel_1 = sel_7649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9625_sel_1 = sel_7648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9625_sel_1 = sel_7647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9625_sel_1 = sel_7646;
        end
      default :
        begin
          p9625_sel_1 = sel_7663;
        end
    endcase
    sel_1_1424 = p9625_sel_1;
  end

  assign tmp_335 = functionOutput_26[sel_1_1424];

  assign sel_7664 = 1'b0;

  assign sel_7665 = 1'b0;

  assign sel_7666 = 1'b0;

  assign sel_7667 = 1'b0;

  assign sel_7668 = 1'b0;

  assign sel_7669 = 1'b0;

  assign sel_7670 = 1'b0;

  assign sel_7671 = 1'b0;

  assign sel_7672 = 1'b0;

  assign sel_7673 = 1'b0;

  assign sel_7674 = 1'b0;

  assign sel_7675 = 1'b0;

  assign sel_7676 = 1'b0;

  assign sel_7677 = 1'b0;

  assign sel_7678 = 1'b0;

  assign s_468 = 1'b1;

  assign sel_2_1365 = (tmp_17 == 1'b0 ? sel_7678 :
              s_468);

  assign sel_2_1366 = (s_10 == 1'b0 ? sel_7677 :
              sel_2_1365);

  assign sel_2_1367 = (s_11 == 1'b0 ? sel_7676 :
              sel_2_1366);

  assign sel_7679 = 1'b0;

  assign sel_2_1368 = (s_12 == 1'b0 ? sel_2_1367 :
              sel_7679);

  assign sel_7680 = 1'b0;

  assign sel_7681 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1368, sel_7664, sel_7665, sel_7666, sel_7667, sel_7668,
       sel_7669, sel_7670, sel_7671, sel_7672, sel_7673, sel_7674, sel_7675,
       sel_7680, sel_7681) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7735_sel_2 = sel_7680;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7735_sel_2 = sel_2_1368;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7735_sel_2 = sel_7675;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7735_sel_2 = sel_7674;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7735_sel_2 = sel_7673;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7735_sel_2 = sel_7672;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7735_sel_2 = sel_7671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7735_sel_2 = sel_7670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7735_sel_2 = sel_7669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7735_sel_2 = sel_7668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7735_sel_2 = sel_7667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7735_sel_2 = sel_7666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7735_sel_2 = sel_7665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7735_sel_2 = sel_7664;
        end
      default :
        begin
          p7735_sel_2 = sel_7681;
        end
    endcase
    sel_2_1369 = p7735_sel_2;
  end

  always @* begin
    p7734cont_bits_cont_bits[0] = cont_bits_15[0];
    if (sel_2_1369) begin
      p7734cont_bits_cont_bits[0] = tmp_335;
    end
    cont_bits_16[0] = p7734cont_bits_cont_bits[0];
    cont_bits_16[1] = cont_bits_15[1];
    cont_bits_16[2] = cont_bits_15[2];
    cont_bits_16[3] = cont_bits_15[3];
    cont_bits_16[4] = cont_bits_15[4];
    cont_bits_16[5] = cont_bits_15[5];
    cont_bits_16[6] = cont_bits_15[6];
    cont_bits_16[7] = cont_bits_15[7];
    cont_bits_16[8] = cont_bits_15[8];
    cont_bits_16[9] = cont_bits_15[9];
    cont_bits_16[10] = cont_bits_15[10];
    cont_bits_16[11] = cont_bits_15[11];
  end

  assign sel_7682 = 32'sd0;

  assign sel_7683 = 32'sd0;

  assign sel_7684 = 32'sd0;

  assign sel_7685 = 32'sd0;

  assign sel_7686 = 32'sd0;

  assign sel_7687 = 32'sd0;

  assign sel_7688 = 32'sd0;

  assign sel_7689 = 32'sd0;

  assign sel_7690 = 32'sd0;

  assign sel_7691 = 32'sd0;

  assign sel_7692 = 32'sd0;

  assign sel_7693 = 32'sd0;

  assign sel_7694 = 32'sd0;

  assign sel_7695 = 32'sd0;

  assign sel_7696 = 32'sd0;

  assign s_469 = 32'sd1;

  assign sel_1_1425 = (tmp_17 == 1'b0 ? sel_7696 :
              s_469);

  assign sel_1_1426 = (s_10 == 1'b0 ? sel_7695 :
              sel_1_1425);

  assign sel_1_1427 = (s_11 == 1'b0 ? sel_7694 :
              sel_1_1426);

  assign sel_7697 = 32'sd0;

  assign sel_1_1428 = (s_12 == 1'b0 ? sel_1_1427 :
              sel_7697);

  assign sel_7698 = 32'sd0;

  assign sel_7699 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1428, sel_7682, sel_7683, sel_7684, sel_7685, sel_7686,
       sel_7687, sel_7688, sel_7689, sel_7690, sel_7691, sel_7692, sel_7693,
       sel_7698, sel_7699) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9404_sel_1 = sel_7698;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9404_sel_1 = sel_1_1428;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9404_sel_1 = sel_7693;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9404_sel_1 = sel_7692;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9404_sel_1 = sel_7691;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9404_sel_1 = sel_7690;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9404_sel_1 = sel_7689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9404_sel_1 = sel_7688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9404_sel_1 = sel_7687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9404_sel_1 = sel_7686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9404_sel_1 = sel_7685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9404_sel_1 = sel_7684;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9404_sel_1 = sel_7683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9404_sel_1 = sel_7682;
        end
      default :
        begin
          p9404_sel_1 = sel_7699;
        end
    endcase
    sel_1_1429 = p9404_sel_1;
  end

  assign tmp_336 = functionOutput_26[sel_1_1429];

  assign sel_7700 = 1'b0;

  assign sel_7701 = 1'b0;

  assign sel_7702 = 1'b0;

  assign sel_7703 = 1'b0;

  assign sel_7704 = 1'b0;

  assign sel_7705 = 1'b0;

  assign sel_7706 = 1'b0;

  assign sel_7707 = 1'b0;

  assign sel_7708 = 1'b0;

  assign sel_7709 = 1'b0;

  assign sel_7710 = 1'b0;

  assign sel_7711 = 1'b0;

  assign sel_7712 = 1'b0;

  assign sel_7713 = 1'b0;

  assign sel_7714 = 1'b0;

  assign s_470 = 1'b1;

  assign sel_2_1370 = (tmp_17 == 1'b0 ? sel_7714 :
              s_470);

  assign sel_2_1371 = (s_10 == 1'b0 ? sel_7713 :
              sel_2_1370);

  assign sel_2_1372 = (s_11 == 1'b0 ? sel_7712 :
              sel_2_1371);

  assign sel_7715 = 1'b0;

  assign sel_2_1373 = (s_12 == 1'b0 ? sel_2_1372 :
              sel_7715);

  assign sel_7716 = 1'b0;

  assign sel_7717 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1373, sel_7700, sel_7701, sel_7702, sel_7703, sel_7704,
       sel_7705, sel_7706, sel_7707, sel_7708, sel_7709, sel_7710, sel_7711,
       sel_7716, sel_7717) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7444_sel_2 = sel_7716;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7444_sel_2 = sel_2_1373;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7444_sel_2 = sel_7711;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7444_sel_2 = sel_7710;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7444_sel_2 = sel_7709;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7444_sel_2 = sel_7708;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7444_sel_2 = sel_7707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7444_sel_2 = sel_7706;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7444_sel_2 = sel_7705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7444_sel_2 = sel_7704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7444_sel_2 = sel_7703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7444_sel_2 = sel_7702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7444_sel_2 = sel_7701;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7444_sel_2 = sel_7700;
        end
      default :
        begin
          p7444_sel_2 = sel_7717;
        end
    endcase
    sel_2_1374 = p7444_sel_2;
  end

  always @* begin
    p7443cont_bits_cont_bits[1] = cont_bits_16[1];
    if (sel_2_1374) begin
      p7443cont_bits_cont_bits[1] = tmp_336;
    end
    cont_bits_17[0] = cont_bits_16[0];
    cont_bits_17[1] = p7443cont_bits_cont_bits[1];
    cont_bits_17[2] = cont_bits_16[2];
    cont_bits_17[3] = cont_bits_16[3];
    cont_bits_17[4] = cont_bits_16[4];
    cont_bits_17[5] = cont_bits_16[5];
    cont_bits_17[6] = cont_bits_16[6];
    cont_bits_17[7] = cont_bits_16[7];
    cont_bits_17[8] = cont_bits_16[8];
    cont_bits_17[9] = cont_bits_16[9];
    cont_bits_17[10] = cont_bits_16[10];
    cont_bits_17[11] = cont_bits_16[11];
  end

  assign sel_7718 = 32'sd0;

  assign sel_7719 = 32'sd0;

  assign sel_7720 = 32'sd0;

  assign sel_7721 = 32'sd0;

  assign sel_7722 = 32'sd0;

  assign sel_7723 = 32'sd0;

  assign sel_7724 = 32'sd0;

  assign sel_7725 = 32'sd0;

  assign sel_7726 = 32'sd0;

  assign sel_7727 = 32'sd0;

  assign sel_7728 = 32'sd0;

  assign sel_7729 = 32'sd0;

  assign sel_7730 = 32'sd0;

  assign sel_7731 = 32'sd0;

  assign sel_7732 = 32'sd0;

  assign s_471 = 32'sd2;

  assign sel_1_1430 = (tmp_17 == 1'b0 ? sel_7732 :
              s_471);

  assign sel_1_1431 = (s_10 == 1'b0 ? sel_7731 :
              sel_1_1430);

  assign sel_1_1432 = (s_11 == 1'b0 ? sel_7730 :
              sel_1_1431);

  assign sel_7733 = 32'sd0;

  assign sel_1_1433 = (s_12 == 1'b0 ? sel_1_1432 :
              sel_7733);

  assign sel_7734 = 32'sd0;

  assign sel_7735 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1433, sel_7718, sel_7719, sel_7720, sel_7721, sel_7722,
       sel_7723, sel_7724, sel_7725, sel_7726, sel_7727, sel_7728, sel_7729,
       sel_7734, sel_7735) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8962_sel_1 = sel_7734;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8962_sel_1 = sel_1_1433;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8962_sel_1 = sel_7729;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8962_sel_1 = sel_7728;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8962_sel_1 = sel_7727;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8962_sel_1 = sel_7726;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8962_sel_1 = sel_7725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8962_sel_1 = sel_7724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8962_sel_1 = sel_7723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8962_sel_1 = sel_7722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8962_sel_1 = sel_7721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8962_sel_1 = sel_7720;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8962_sel_1 = sel_7719;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8962_sel_1 = sel_7718;
        end
      default :
        begin
          p8962_sel_1 = sel_7735;
        end
    endcase
    sel_1_1434 = p8962_sel_1;
  end

  assign tmp_337 = functionOutput_26[sel_1_1434];

  assign sel_7736 = 1'b0;

  assign sel_7737 = 1'b0;

  assign sel_7738 = 1'b0;

  assign sel_7739 = 1'b0;

  assign sel_7740 = 1'b0;

  assign sel_7741 = 1'b0;

  assign sel_7742 = 1'b0;

  assign sel_7743 = 1'b0;

  assign sel_7744 = 1'b0;

  assign sel_7745 = 1'b0;

  assign sel_7746 = 1'b0;

  assign sel_7747 = 1'b0;

  assign sel_7748 = 1'b0;

  assign sel_7749 = 1'b0;

  assign sel_7750 = 1'b0;

  assign s_472 = 1'b1;

  assign sel_2_1375 = (tmp_17 == 1'b0 ? sel_7750 :
              s_472);

  assign sel_2_1376 = (s_10 == 1'b0 ? sel_7749 :
              sel_2_1375);

  assign sel_2_1377 = (s_11 == 1'b0 ? sel_7748 :
              sel_2_1376);

  assign sel_7751 = 1'b0;

  assign sel_2_1378 = (s_12 == 1'b0 ? sel_2_1377 :
              sel_7751);

  assign sel_7752 = 1'b0;

  assign sel_7753 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1378, sel_7736, sel_7737, sel_7738, sel_7739, sel_7740,
       sel_7741, sel_7742, sel_7743, sel_7744, sel_7745, sel_7746, sel_7747,
       sel_7752, sel_7753) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7097_sel_2 = sel_7752;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7097_sel_2 = sel_2_1378;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7097_sel_2 = sel_7747;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7097_sel_2 = sel_7746;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7097_sel_2 = sel_7745;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7097_sel_2 = sel_7744;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7097_sel_2 = sel_7743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7097_sel_2 = sel_7742;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7097_sel_2 = sel_7741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7097_sel_2 = sel_7740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7097_sel_2 = sel_7739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7097_sel_2 = sel_7738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7097_sel_2 = sel_7737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7097_sel_2 = sel_7736;
        end
      default :
        begin
          p7097_sel_2 = sel_7753;
        end
    endcase
    sel_2_1379 = p7097_sel_2;
  end

  always @* begin
    p7096cont_bits_cont_bits[2] = cont_bits_17[2];
    if (sel_2_1379) begin
      p7096cont_bits_cont_bits[2] = tmp_337;
    end
    cont_bits_18[0] = cont_bits_17[0];
    cont_bits_18[1] = cont_bits_17[1];
    cont_bits_18[2] = p7096cont_bits_cont_bits[2];
    cont_bits_18[3] = cont_bits_17[3];
    cont_bits_18[4] = cont_bits_17[4];
    cont_bits_18[5] = cont_bits_17[5];
    cont_bits_18[6] = cont_bits_17[6];
    cont_bits_18[7] = cont_bits_17[7];
    cont_bits_18[8] = cont_bits_17[8];
    cont_bits_18[9] = cont_bits_17[9];
    cont_bits_18[10] = cont_bits_17[10];
    cont_bits_18[11] = cont_bits_17[11];
  end

  assign sel_7754 = 32'sd0;

  assign sel_7755 = 32'sd0;

  assign sel_7756 = 32'sd0;

  assign sel_7757 = 32'sd0;

  assign sel_7758 = 32'sd0;

  assign sel_7759 = 32'sd0;

  assign sel_7760 = 32'sd0;

  assign sel_7761 = 32'sd0;

  assign sel_7762 = 32'sd0;

  assign sel_7763 = 32'sd0;

  assign sel_7764 = 32'sd0;

  assign sel_7765 = 32'sd0;

  assign sel_7766 = 32'sd0;

  assign sel_7767 = 32'sd0;

  assign sel_7768 = 32'sd0;

  assign s_473 = 32'sd3;

  assign sel_1_1435 = (tmp_17 == 1'b0 ? sel_7768 :
              s_473);

  assign sel_1_1436 = (s_10 == 1'b0 ? sel_7767 :
              sel_1_1435);

  assign sel_1_1437 = (s_11 == 1'b0 ? sel_7766 :
              sel_1_1436);

  assign sel_7769 = 32'sd0;

  assign sel_1_1438 = (s_12 == 1'b0 ? sel_1_1437 :
              sel_7769);

  assign sel_7770 = 32'sd0;

  assign sel_7771 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1438, sel_7754, sel_7755, sel_7756, sel_7757, sel_7758,
       sel_7759, sel_7760, sel_7761, sel_7762, sel_7763, sel_7764, sel_7765,
       sel_7770, sel_7771) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9455_sel_1 = sel_7770;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9455_sel_1 = sel_1_1438;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9455_sel_1 = sel_7765;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9455_sel_1 = sel_7764;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9455_sel_1 = sel_7763;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9455_sel_1 = sel_7762;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9455_sel_1 = sel_7761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9455_sel_1 = sel_7760;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9455_sel_1 = sel_7759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9455_sel_1 = sel_7758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9455_sel_1 = sel_7757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9455_sel_1 = sel_7756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9455_sel_1 = sel_7755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9455_sel_1 = sel_7754;
        end
      default :
        begin
          p9455_sel_1 = sel_7771;
        end
    endcase
    sel_1_1439 = p9455_sel_1;
  end

  assign tmp_338 = functionOutput_26[sel_1_1439];

  assign sel_7772 = 1'b0;

  assign sel_7773 = 1'b0;

  assign sel_7774 = 1'b0;

  assign sel_7775 = 1'b0;

  assign sel_7776 = 1'b0;

  assign sel_7777 = 1'b0;

  assign sel_7778 = 1'b0;

  assign sel_7779 = 1'b0;

  assign sel_7780 = 1'b0;

  assign sel_7781 = 1'b0;

  assign sel_7782 = 1'b0;

  assign sel_7783 = 1'b0;

  assign sel_7784 = 1'b0;

  assign sel_7785 = 1'b0;

  assign sel_7786 = 1'b0;

  assign s_474 = 1'b1;

  assign sel_2_1380 = (tmp_17 == 1'b0 ? sel_7786 :
              s_474);

  assign sel_2_1381 = (s_10 == 1'b0 ? sel_7785 :
              sel_2_1380);

  assign sel_2_1382 = (s_11 == 1'b0 ? sel_7784 :
              sel_2_1381);

  assign sel_7787 = 1'b0;

  assign sel_2_1383 = (s_12 == 1'b0 ? sel_2_1382 :
              sel_7787);

  assign sel_7788 = 1'b0;

  assign sel_7789 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1383, sel_7772, sel_7773, sel_7774, sel_7775, sel_7776,
       sel_7777, sel_7778, sel_7779, sel_7780, sel_7781, sel_7782, sel_7783,
       sel_7788, sel_7789) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6806_sel_2 = sel_7788;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6806_sel_2 = sel_2_1383;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6806_sel_2 = sel_7783;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6806_sel_2 = sel_7782;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6806_sel_2 = sel_7781;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6806_sel_2 = sel_7780;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6806_sel_2 = sel_7779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6806_sel_2 = sel_7778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6806_sel_2 = sel_7777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6806_sel_2 = sel_7776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6806_sel_2 = sel_7775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6806_sel_2 = sel_7774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6806_sel_2 = sel_7773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6806_sel_2 = sel_7772;
        end
      default :
        begin
          p6806_sel_2 = sel_7789;
        end
    endcase
    sel_2_1384 = p6806_sel_2;
  end

  always @* begin
    p6805cont_bits_cont_bits[3] = cont_bits_18[3];
    if (sel_2_1384) begin
      p6805cont_bits_cont_bits[3] = tmp_338;
    end
    cont_bits_19[0] = cont_bits_18[0];
    cont_bits_19[1] = cont_bits_18[1];
    cont_bits_19[2] = cont_bits_18[2];
    cont_bits_19[3] = p6805cont_bits_cont_bits[3];
    cont_bits_19[4] = cont_bits_18[4];
    cont_bits_19[5] = cont_bits_18[5];
    cont_bits_19[6] = cont_bits_18[6];
    cont_bits_19[7] = cont_bits_18[7];
    cont_bits_19[8] = cont_bits_18[8];
    cont_bits_19[9] = cont_bits_18[9];
    cont_bits_19[10] = cont_bits_18[10];
    cont_bits_19[11] = cont_bits_18[11];
  end

  assign sel_7790 = 32'sd0;

  assign sel_7791 = 32'sd0;

  assign sel_7792 = 32'sd0;

  assign sel_7793 = 32'sd0;

  assign sel_7794 = 32'sd0;

  assign sel_7795 = 32'sd0;

  assign sel_7796 = 32'sd0;

  assign sel_7797 = 32'sd0;

  assign sel_7798 = 32'sd0;

  assign sel_7799 = 32'sd0;

  assign sel_7800 = 32'sd0;

  assign sel_7801 = 32'sd0;

  assign sel_7802 = 32'sd0;

  assign sel_7803 = 32'sd0;

  assign sel_7804 = 32'sd0;

  assign s_475 = 32'sd4;

  assign sel_1_1440 = (tmp_17 == 1'b0 ? sel_7804 :
              s_475);

  assign sel_1_1441 = (s_10 == 1'b0 ? sel_7803 :
              sel_1_1440);

  assign sel_1_1442 = (s_11 == 1'b0 ? sel_7802 :
              sel_1_1441);

  assign sel_7805 = 32'sd0;

  assign sel_1_1443 = (s_12 == 1'b0 ? sel_1_1442 :
              sel_7805);

  assign sel_7806 = 32'sd0;

  assign sel_7807 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1443, sel_7790, sel_7791, sel_7792, sel_7793, sel_7794,
       sel_7795, sel_7796, sel_7797, sel_7798, sel_7799, sel_7800, sel_7801,
       sel_7806, sel_7807) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8707_sel_1 = sel_7806;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8707_sel_1 = sel_1_1443;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8707_sel_1 = sel_7801;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8707_sel_1 = sel_7800;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8707_sel_1 = sel_7799;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8707_sel_1 = sel_7798;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8707_sel_1 = sel_7797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8707_sel_1 = sel_7796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8707_sel_1 = sel_7795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8707_sel_1 = sel_7794;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8707_sel_1 = sel_7793;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8707_sel_1 = sel_7792;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8707_sel_1 = sel_7791;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8707_sel_1 = sel_7790;
        end
      default :
        begin
          p8707_sel_1 = sel_7807;
        end
    endcase
    sel_1_1444 = p8707_sel_1;
  end

  assign tmp_339 = functionOutput_26[sel_1_1444];

  assign sel_7808 = 1'b0;

  assign sel_7809 = 1'b0;

  assign sel_7810 = 1'b0;

  assign sel_7811 = 1'b0;

  assign sel_7812 = 1'b0;

  assign sel_7813 = 1'b0;

  assign sel_7814 = 1'b0;

  assign sel_7815 = 1'b0;

  assign sel_7816 = 1'b0;

  assign sel_7817 = 1'b0;

  assign sel_7818 = 1'b0;

  assign sel_7819 = 1'b0;

  assign sel_7820 = 1'b0;

  assign sel_7821 = 1'b0;

  assign sel_7822 = 1'b0;

  assign s_476 = 1'b1;

  assign sel_2_1385 = (tmp_17 == 1'b0 ? sel_7822 :
              s_476);

  assign sel_2_1386 = (s_10 == 1'b0 ? sel_7821 :
              sel_2_1385);

  assign sel_2_1387 = (s_11 == 1'b0 ? sel_7820 :
              sel_2_1386);

  assign sel_7823 = 1'b0;

  assign sel_2_1388 = (s_12 == 1'b0 ? sel_2_1387 :
              sel_7823);

  assign sel_7824 = 1'b0;

  assign sel_7825 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1388, sel_7808, sel_7809, sel_7810, sel_7811, sel_7812,
       sel_7813, sel_7814, sel_7815, sel_7816, sel_7817, sel_7818, sel_7819,
       sel_7824, sel_7825) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6490_sel_2 = sel_7824;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6490_sel_2 = sel_2_1388;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6490_sel_2 = sel_7819;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6490_sel_2 = sel_7818;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6490_sel_2 = sel_7817;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6490_sel_2 = sel_7816;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6490_sel_2 = sel_7815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6490_sel_2 = sel_7814;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6490_sel_2 = sel_7813;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6490_sel_2 = sel_7812;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6490_sel_2 = sel_7811;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6490_sel_2 = sel_7810;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6490_sel_2 = sel_7809;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6490_sel_2 = sel_7808;
        end
      default :
        begin
          p6490_sel_2 = sel_7825;
        end
    endcase
    sel_2_1389 = p6490_sel_2;
  end

  always @* begin
    p6489cont_bits_cont_bits[4] = cont_bits_19[4];
    if (sel_2_1389) begin
      p6489cont_bits_cont_bits[4] = tmp_339;
    end
    cont_bits_20[0] = cont_bits_19[0];
    cont_bits_20[1] = cont_bits_19[1];
    cont_bits_20[2] = cont_bits_19[2];
    cont_bits_20[3] = cont_bits_19[3];
    cont_bits_20[4] = p6489cont_bits_cont_bits[4];
    cont_bits_20[5] = cont_bits_19[5];
    cont_bits_20[6] = cont_bits_19[6];
    cont_bits_20[7] = cont_bits_19[7];
    cont_bits_20[8] = cont_bits_19[8];
    cont_bits_20[9] = cont_bits_19[9];
    cont_bits_20[10] = cont_bits_19[10];
    cont_bits_20[11] = cont_bits_19[11];
  end

  assign sel_7826 = 32'sd0;

  assign sel_7827 = 32'sd0;

  assign sel_7828 = 32'sd0;

  assign sel_7829 = 32'sd0;

  assign sel_7830 = 32'sd0;

  assign sel_7831 = 32'sd0;

  assign sel_7832 = 32'sd0;

  assign sel_7833 = 32'sd0;

  assign sel_7834 = 32'sd0;

  assign sel_7835 = 32'sd0;

  assign sel_7836 = 32'sd0;

  assign sel_7837 = 32'sd0;

  assign sel_7838 = 32'sd0;

  assign sel_7839 = 32'sd0;

  assign sel_7840 = 32'sd0;

  assign s_477 = 32'sd5;

  assign sel_1_1445 = (tmp_17 == 1'b0 ? sel_7840 :
              s_477);

  assign sel_1_1446 = (s_10 == 1'b0 ? sel_7839 :
              sel_1_1445);

  assign sel_1_1447 = (s_11 == 1'b0 ? sel_7838 :
              sel_1_1446);

  assign sel_7841 = 32'sd0;

  assign sel_1_1448 = (s_12 == 1'b0 ? sel_1_1447 :
              sel_7841);

  assign sel_7842 = 32'sd0;

  assign sel_7843 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1448, sel_7826, sel_7827, sel_7828, sel_7829, sel_7830,
       sel_7831, sel_7832, sel_7833, sel_7834, sel_7835, sel_7836, sel_7837,
       sel_7842, sel_7843) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9047_sel_1 = sel_7842;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9047_sel_1 = sel_1_1448;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9047_sel_1 = sel_7837;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9047_sel_1 = sel_7836;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9047_sel_1 = sel_7835;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9047_sel_1 = sel_7834;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9047_sel_1 = sel_7833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9047_sel_1 = sel_7832;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9047_sel_1 = sel_7831;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9047_sel_1 = sel_7830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9047_sel_1 = sel_7829;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9047_sel_1 = sel_7828;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9047_sel_1 = sel_7827;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9047_sel_1 = sel_7826;
        end
      default :
        begin
          p9047_sel_1 = sel_7843;
        end
    endcase
    sel_1_1449 = p9047_sel_1;
  end

  assign tmp_340 = functionOutput_26[sel_1_1449];

  assign sel_7844 = 1'b0;

  assign sel_7845 = 1'b0;

  assign sel_7846 = 1'b0;

  assign sel_7847 = 1'b0;

  assign sel_7848 = 1'b0;

  assign sel_7849 = 1'b0;

  assign sel_7850 = 1'b0;

  assign sel_7851 = 1'b0;

  assign sel_7852 = 1'b0;

  assign sel_7853 = 1'b0;

  assign sel_7854 = 1'b0;

  assign sel_7855 = 1'b0;

  assign sel_7856 = 1'b0;

  assign sel_7857 = 1'b0;

  assign sel_7858 = 1'b0;

  assign s_478 = 1'b1;

  assign sel_2_1390 = (tmp_17 == 1'b0 ? sel_7858 :
              s_478);

  assign sel_2_1391 = (s_10 == 1'b0 ? sel_7857 :
              sel_2_1390);

  assign sel_2_1392 = (s_11 == 1'b0 ? sel_7856 :
              sel_2_1391);

  assign sel_7859 = 1'b0;

  assign sel_2_1393 = (s_12 == 1'b0 ? sel_2_1392 :
              sel_7859);

  assign sel_7860 = 1'b0;

  assign sel_7861 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1393, sel_7844, sel_7845, sel_7846, sel_7847, sel_7848,
       sel_7849, sel_7850, sel_7851, sel_7852, sel_7853, sel_7854, sel_7855,
       sel_7860, sel_7861) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6200_sel_2 = sel_7860;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6200_sel_2 = sel_2_1393;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6200_sel_2 = sel_7855;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6200_sel_2 = sel_7854;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6200_sel_2 = sel_7853;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6200_sel_2 = sel_7852;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6200_sel_2 = sel_7851;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6200_sel_2 = sel_7850;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6200_sel_2 = sel_7849;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6200_sel_2 = sel_7848;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6200_sel_2 = sel_7847;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6200_sel_2 = sel_7846;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6200_sel_2 = sel_7845;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6200_sel_2 = sel_7844;
        end
      default :
        begin
          p6200_sel_2 = sel_7861;
        end
    endcase
    sel_2_1394 = p6200_sel_2;
  end

  always @* begin
    p6199cont_bits_cont_bits[5] = cont_bits_20[5];
    if (sel_2_1394) begin
      p6199cont_bits_cont_bits[5] = tmp_340;
    end
    cont_bits_23[0] = cont_bits_20[0];
    cont_bits_23[1] = cont_bits_20[1];
    cont_bits_23[2] = cont_bits_20[2];
    cont_bits_23[3] = cont_bits_20[3];
    cont_bits_23[4] = cont_bits_20[4];
    cont_bits_23[5] = p6199cont_bits_cont_bits[5];
    cont_bits_23[6] = cont_bits_20[6];
    cont_bits_23[7] = cont_bits_20[7];
    cont_bits_23[8] = cont_bits_20[8];
    cont_bits_23[9] = cont_bits_20[9];
    cont_bits_23[10] = cont_bits_20[10];
    cont_bits_23[11] = cont_bits_20[11];
  end

  assign sel_7862 = 32'sd0;

  assign sel_7863 = 32'sd0;

  assign sel_7864 = 32'sd0;

  assign sel_7865 = 32'sd0;

  assign sel_7866 = 32'sd0;

  assign sel_7867 = 32'sd0;

  assign sel_7868 = 32'sd0;

  assign sel_7869 = 32'sd0;

  assign sel_7870 = 32'sd0;

  assign sel_7871 = 32'sd0;

  assign sel_7872 = 32'sd0;

  assign sel_7873 = 32'sd0;

  assign sel_7874 = 32'sd0;

  assign sel_7875 = 32'sd0;

  assign sel_7876 = 32'sd0;

  assign s_479 = 32'sd6;

  assign sel_1_1450 = (tmp_17 == 1'b0 ? sel_7876 :
              s_479);

  assign sel_1_1451 = (s_10 == 1'b0 ? sel_7875 :
              sel_1_1450);

  assign sel_1_1452 = (s_11 == 1'b0 ? sel_7874 :
              sel_1_1451);

  assign sel_7877 = 32'sd0;

  assign sel_1_1453 = (s_12 == 1'b0 ? sel_1_1452 :
              sel_7877);

  assign sel_7878 = 32'sd0;

  assign sel_7879 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1453, sel_7862, sel_7863, sel_7864, sel_7865, sel_7866,
       sel_7867, sel_7868, sel_7869, sel_7870, sel_7871, sel_7872, sel_7873,
       sel_7878, sel_7879) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9557_sel_1 = sel_7878;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9557_sel_1 = sel_1_1453;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9557_sel_1 = sel_7873;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9557_sel_1 = sel_7872;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9557_sel_1 = sel_7871;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9557_sel_1 = sel_7870;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9557_sel_1 = sel_7869;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9557_sel_1 = sel_7868;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9557_sel_1 = sel_7867;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9557_sel_1 = sel_7866;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9557_sel_1 = sel_7865;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9557_sel_1 = sel_7864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9557_sel_1 = sel_7863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9557_sel_1 = sel_7862;
        end
      default :
        begin
          p9557_sel_1 = sel_7879;
        end
    endcase
    sel_1_1454 = p9557_sel_1;
  end

  assign tmp_341 = functionOutput_26[sel_1_1454];

  assign sel_7880 = 1'b0;

  assign sel_7881 = 1'b0;

  assign sel_7882 = 1'b0;

  assign sel_7883 = 1'b0;

  assign sel_7884 = 1'b0;

  assign sel_7885 = 1'b0;

  assign sel_7886 = 1'b0;

  assign sel_7887 = 1'b0;

  assign sel_7888 = 1'b0;

  assign sel_7889 = 1'b0;

  assign sel_7890 = 1'b0;

  assign sel_7891 = 1'b0;

  assign sel_7892 = 1'b0;

  assign sel_7893 = 1'b0;

  assign sel_7894 = 1'b0;

  assign s_480 = 1'b1;

  assign sel_2_1395 = (tmp_17 == 1'b0 ? sel_7894 :
              s_480);

  assign sel_2_1396 = (s_10 == 1'b0 ? sel_7893 :
              sel_2_1395);

  assign sel_2_1397 = (s_11 == 1'b0 ? sel_7892 :
              sel_2_1396);

  assign sel_7895 = 1'b0;

  assign sel_2_1398 = (s_12 == 1'b0 ? sel_2_1397 :
              sel_7895);

  assign sel_7896 = 1'b0;

  assign sel_7897 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1398, sel_7880, sel_7881, sel_7882, sel_7883, sel_7884,
       sel_7885, sel_7886, sel_7887, sel_7888, sel_7889, sel_7890, sel_7891,
       sel_7896, sel_7897) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5884_sel_2 = sel_7896;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5884_sel_2 = sel_2_1398;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5884_sel_2 = sel_7891;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5884_sel_2 = sel_7890;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5884_sel_2 = sel_7889;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5884_sel_2 = sel_7888;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5884_sel_2 = sel_7887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5884_sel_2 = sel_7886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5884_sel_2 = sel_7885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5884_sel_2 = sel_7884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5884_sel_2 = sel_7883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5884_sel_2 = sel_7882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5884_sel_2 = sel_7881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5884_sel_2 = sel_7880;
        end
      default :
        begin
          p5884_sel_2 = sel_7897;
        end
    endcase
    sel_2_1399 = p5884_sel_2;
  end

  always @* begin
    p5883cont_bits_cont_bits[6] = cont_bits_23[6];
    if (sel_2_1399) begin
      p5883cont_bits_cont_bits[6] = tmp_341;
    end
    cont_bits_24[0] = cont_bits_23[0];
    cont_bits_24[1] = cont_bits_23[1];
    cont_bits_24[2] = cont_bits_23[2];
    cont_bits_24[3] = cont_bits_23[3];
    cont_bits_24[4] = cont_bits_23[4];
    cont_bits_24[5] = cont_bits_23[5];
    cont_bits_24[6] = p5883cont_bits_cont_bits[6];
    cont_bits_24[7] = cont_bits_23[7];
    cont_bits_24[8] = cont_bits_23[8];
    cont_bits_24[9] = cont_bits_23[9];
    cont_bits_24[10] = cont_bits_23[10];
    cont_bits_24[11] = cont_bits_23[11];
  end

  assign sel_7898 = 32'sd0;

  assign sel_7899 = 32'sd0;

  assign sel_7900 = 32'sd0;

  assign sel_7901 = 32'sd0;

  assign sel_7902 = 32'sd0;

  assign sel_7903 = 32'sd0;

  assign sel_7904 = 32'sd0;

  assign sel_7905 = 32'sd0;

  assign sel_7906 = 32'sd0;

  assign sel_7907 = 32'sd0;

  assign sel_7908 = 32'sd0;

  assign sel_7909 = 32'sd0;

  assign sel_7910 = 32'sd0;

  assign sel_7911 = 32'sd0;

  assign sel_7912 = 32'sd0;

  assign s_481 = 32'sd7;

  assign sel_1_1455 = (tmp_17 == 1'b0 ? sel_7912 :
              s_481);

  assign sel_1_1456 = (s_10 == 1'b0 ? sel_7911 :
              sel_1_1455);

  assign sel_1_1457 = (s_11 == 1'b0 ? sel_7910 :
              sel_1_1456);

  assign sel_7913 = 32'sd0;

  assign sel_1_1458 = (s_12 == 1'b0 ? sel_1_1457 :
              sel_7913);

  assign sel_7914 = 32'sd0;

  assign sel_7915 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1458, sel_7898, sel_7899, sel_7900, sel_7901, sel_7902,
       sel_7903, sel_7904, sel_7905, sel_7906, sel_7907, sel_7908, sel_7909,
       sel_7914, sel_7915) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9387_sel_1 = sel_7914;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9387_sel_1 = sel_1_1458;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9387_sel_1 = sel_7909;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9387_sel_1 = sel_7908;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9387_sel_1 = sel_7907;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9387_sel_1 = sel_7906;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9387_sel_1 = sel_7905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9387_sel_1 = sel_7904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9387_sel_1 = sel_7903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9387_sel_1 = sel_7902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9387_sel_1 = sel_7901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9387_sel_1 = sel_7900;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9387_sel_1 = sel_7899;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9387_sel_1 = sel_7898;
        end
      default :
        begin
          p9387_sel_1 = sel_7915;
        end
    endcase
    sel_1_1459 = p9387_sel_1;
  end

  assign tmp_342 = functionOutput_26[sel_1_1459];

  assign sel_7916 = 1'b0;

  assign sel_7917 = 1'b0;

  assign sel_7918 = 1'b0;

  assign sel_7919 = 1'b0;

  assign sel_7920 = 1'b0;

  assign sel_7921 = 1'b0;

  assign sel_7922 = 1'b0;

  assign sel_7923 = 1'b0;

  assign sel_7924 = 1'b0;

  assign sel_7925 = 1'b0;

  assign sel_7926 = 1'b0;

  assign sel_7927 = 1'b0;

  assign sel_7928 = 1'b0;

  assign sel_7929 = 1'b0;

  assign sel_7930 = 1'b0;

  assign s_482 = 1'b1;

  assign sel_2_1400 = (tmp_17 == 1'b0 ? sel_7930 :
              s_482);

  assign sel_2_1401 = (s_10 == 1'b0 ? sel_7929 :
              sel_2_1400);

  assign sel_2_1402 = (s_11 == 1'b0 ? sel_7928 :
              sel_2_1401);

  assign sel_7931 = 1'b0;

  assign sel_2_1403 = (s_12 == 1'b0 ? sel_2_1402 :
              sel_7931);

  assign sel_7932 = 1'b0;

  assign sel_7933 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1403, sel_7916, sel_7917, sel_7918, sel_7919, sel_7920,
       sel_7921, sel_7922, sel_7923, sel_7924, sel_7925, sel_7926, sel_7927,
       sel_7932, sel_7933) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5594_sel_2 = sel_7932;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5594_sel_2 = sel_2_1403;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5594_sel_2 = sel_7927;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5594_sel_2 = sel_7926;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5594_sel_2 = sel_7925;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5594_sel_2 = sel_7924;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5594_sel_2 = sel_7923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5594_sel_2 = sel_7922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5594_sel_2 = sel_7921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5594_sel_2 = sel_7920;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5594_sel_2 = sel_7919;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5594_sel_2 = sel_7918;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5594_sel_2 = sel_7917;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5594_sel_2 = sel_7916;
        end
      default :
        begin
          p5594_sel_2 = sel_7933;
        end
    endcase
    sel_2_1404 = p5594_sel_2;
  end

  always @* begin
    p5593cont_bits_cont_bits[7] = cont_bits_24[7];
    if (sel_2_1404) begin
      p5593cont_bits_cont_bits[7] = tmp_342;
    end
    cont_bits_25[0] = cont_bits_24[0];
    cont_bits_25[1] = cont_bits_24[1];
    cont_bits_25[2] = cont_bits_24[2];
    cont_bits_25[3] = cont_bits_24[3];
    cont_bits_25[4] = cont_bits_24[4];
    cont_bits_25[5] = cont_bits_24[5];
    cont_bits_25[6] = cont_bits_24[6];
    cont_bits_25[7] = p5593cont_bits_cont_bits[7];
    cont_bits_25[8] = cont_bits_24[8];
    cont_bits_25[9] = cont_bits_24[9];
    cont_bits_25[10] = cont_bits_24[10];
    cont_bits_25[11] = cont_bits_24[11];
  end

  assign sel_7934 = 32'sd0;

  assign sel_7935 = 32'sd0;

  assign sel_7936 = 32'sd0;

  assign sel_7937 = 32'sd0;

  assign sel_7938 = 32'sd0;

  assign sel_7939 = 32'sd0;

  assign sel_7940 = 32'sd0;

  assign sel_7941 = 32'sd0;

  assign sel_7942 = 32'sd0;

  assign sel_7943 = 32'sd0;

  assign sel_7944 = 32'sd0;

  assign sel_7945 = 32'sd0;

  assign sel_7946 = 32'sd0;

  assign sel_7947 = 32'sd0;

  assign sel_7948 = 32'sd0;

  assign s_483 = 32'sd8;

  assign sel_1_1460 = (tmp_17 == 1'b0 ? sel_7948 :
              s_483);

  assign sel_1_1461 = (s_10 == 1'b0 ? sel_7947 :
              sel_1_1460);

  assign sel_1_1462 = (s_11 == 1'b0 ? sel_7946 :
              sel_1_1461);

  assign sel_7949 = 32'sd0;

  assign sel_1_1463 = (s_12 == 1'b0 ? sel_1_1462 :
              sel_7949);

  assign sel_7950 = 32'sd0;

  assign sel_7951 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1463, sel_7934, sel_7935, sel_7936, sel_7937, sel_7938,
       sel_7939, sel_7940, sel_7941, sel_7942, sel_7943, sel_7944, sel_7945,
       sel_7950, sel_7951) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9829_sel_1 = sel_7950;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9829_sel_1 = sel_1_1463;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9829_sel_1 = sel_7945;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9829_sel_1 = sel_7944;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9829_sel_1 = sel_7943;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9829_sel_1 = sel_7942;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9829_sel_1 = sel_7941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9829_sel_1 = sel_7940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9829_sel_1 = sel_7939;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9829_sel_1 = sel_7938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9829_sel_1 = sel_7937;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9829_sel_1 = sel_7936;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9829_sel_1 = sel_7935;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9829_sel_1 = sel_7934;
        end
      default :
        begin
          p9829_sel_1 = sel_7951;
        end
    endcase
    sel_1_1464 = p9829_sel_1;
  end

  assign tmp_343 = functionOutput_26[sel_1_1464];

  assign sel_7952 = 1'b0;

  assign sel_7953 = 1'b0;

  assign sel_7954 = 1'b0;

  assign sel_7955 = 1'b0;

  assign sel_7956 = 1'b0;

  assign sel_7957 = 1'b0;

  assign sel_7958 = 1'b0;

  assign sel_7959 = 1'b0;

  assign sel_7960 = 1'b0;

  assign sel_7961 = 1'b0;

  assign sel_7962 = 1'b0;

  assign sel_7963 = 1'b0;

  assign sel_7964 = 1'b0;

  assign sel_7965 = 1'b0;

  assign sel_7966 = 1'b0;

  assign s_484 = 1'b1;

  assign sel_2_1405 = (tmp_17 == 1'b0 ? sel_7966 :
              s_484);

  assign sel_2_1406 = (s_10 == 1'b0 ? sel_7965 :
              sel_2_1405);

  assign sel_2_1407 = (s_11 == 1'b0 ? sel_7964 :
              sel_2_1406);

  assign sel_7967 = 1'b0;

  assign sel_2_1408 = (s_12 == 1'b0 ? sel_2_1407 :
              sel_7967);

  assign sel_7968 = 1'b0;

  assign sel_7969 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1408, sel_7952, sel_7953, sel_7954, sel_7955, sel_7956,
       sel_7957, sel_7958, sel_7959, sel_7960, sel_7961, sel_7962, sel_7963,
       sel_7968, sel_7969) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5278_sel_2 = sel_7968;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5278_sel_2 = sel_2_1408;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5278_sel_2 = sel_7963;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5278_sel_2 = sel_7962;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5278_sel_2 = sel_7961;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5278_sel_2 = sel_7960;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5278_sel_2 = sel_7959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5278_sel_2 = sel_7958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5278_sel_2 = sel_7957;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5278_sel_2 = sel_7956;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5278_sel_2 = sel_7955;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5278_sel_2 = sel_7954;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5278_sel_2 = sel_7953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5278_sel_2 = sel_7952;
        end
      default :
        begin
          p5278_sel_2 = sel_7969;
        end
    endcase
    sel_2_1409 = p5278_sel_2;
  end

  always @* begin
    p5277cont_bits_cont_bits[8] = cont_bits_25[8];
    if (sel_2_1409) begin
      p5277cont_bits_cont_bits[8] = tmp_343;
    end
    cont_bits_26[0] = cont_bits_25[0];
    cont_bits_26[1] = cont_bits_25[1];
    cont_bits_26[2] = cont_bits_25[2];
    cont_bits_26[3] = cont_bits_25[3];
    cont_bits_26[4] = cont_bits_25[4];
    cont_bits_26[5] = cont_bits_25[5];
    cont_bits_26[6] = cont_bits_25[6];
    cont_bits_26[7] = cont_bits_25[7];
    cont_bits_26[8] = p5277cont_bits_cont_bits[8];
    cont_bits_26[9] = cont_bits_25[9];
    cont_bits_26[10] = cont_bits_25[10];
    cont_bits_26[11] = cont_bits_25[11];
  end

  assign sel_7970 = 32'sd0;

  assign sel_7971 = 32'sd0;

  assign sel_7972 = 32'sd0;

  assign sel_7973 = 32'sd0;

  assign sel_7974 = 32'sd0;

  assign sel_7975 = 32'sd0;

  assign sel_7976 = 32'sd0;

  assign sel_7977 = 32'sd0;

  assign sel_7978 = 32'sd0;

  assign sel_7979 = 32'sd0;

  assign sel_7980 = 32'sd0;

  assign sel_7981 = 32'sd0;

  assign sel_7982 = 32'sd0;

  assign sel_7983 = 32'sd0;

  assign sel_7984 = 32'sd0;

  assign s_485 = 32'sd9;

  assign sel_1_1465 = (tmp_17 == 1'b0 ? sel_7984 :
              s_485);

  assign sel_1_1466 = (s_10 == 1'b0 ? sel_7983 :
              sel_1_1465);

  assign sel_1_1467 = (s_11 == 1'b0 ? sel_7982 :
              sel_1_1466);

  assign sel_7985 = 32'sd0;

  assign sel_1_1468 = (s_12 == 1'b0 ? sel_1_1467 :
              sel_7985);

  assign sel_7986 = 32'sd0;

  assign sel_7987 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1468, sel_7970, sel_7971, sel_7972, sel_7973, sel_7974,
       sel_7975, sel_7976, sel_7977, sel_7978, sel_7979, sel_7980, sel_7981,
       sel_7986, sel_7987) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8520_sel_1 = sel_7986;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8520_sel_1 = sel_1_1468;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8520_sel_1 = sel_7981;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8520_sel_1 = sel_7980;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8520_sel_1 = sel_7979;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8520_sel_1 = sel_7978;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8520_sel_1 = sel_7977;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8520_sel_1 = sel_7976;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8520_sel_1 = sel_7975;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8520_sel_1 = sel_7974;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8520_sel_1 = sel_7973;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8520_sel_1 = sel_7972;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8520_sel_1 = sel_7971;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8520_sel_1 = sel_7970;
        end
      default :
        begin
          p8520_sel_1 = sel_7987;
        end
    endcase
    sel_1_1469 = p8520_sel_1;
  end

  assign tmp_344 = functionOutput_26[sel_1_1469];

  assign sel_7988 = 1'b0;

  assign sel_7989 = 1'b0;

  assign sel_7990 = 1'b0;

  assign sel_7991 = 1'b0;

  assign sel_7992 = 1'b0;

  assign sel_7993 = 1'b0;

  assign sel_7994 = 1'b0;

  assign sel_7995 = 1'b0;

  assign sel_7996 = 1'b0;

  assign sel_7997 = 1'b0;

  assign sel_7998 = 1'b0;

  assign sel_7999 = 1'b0;

  assign sel_8000 = 1'b0;

  assign sel_8001 = 1'b0;

  assign sel_8002 = 1'b0;

  assign s_486 = 1'b1;

  assign sel_2_1410 = (tmp_17 == 1'b0 ? sel_8002 :
              s_486);

  assign sel_2_1411 = (s_10 == 1'b0 ? sel_8001 :
              sel_2_1410);

  assign sel_2_1412 = (s_11 == 1'b0 ? sel_8000 :
              sel_2_1411);

  assign sel_8003 = 1'b0;

  assign sel_2_1413 = (s_12 == 1'b0 ? sel_2_1412 :
              sel_8003);

  assign sel_8004 = 1'b0;

  assign sel_8005 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1413, sel_7988, sel_7989, sel_7990, sel_7991, sel_7992,
       sel_7993, sel_7994, sel_7995, sel_7996, sel_7997, sel_7998, sel_7999,
       sel_8004, sel_8005) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4988_sel_2 = sel_8004;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4988_sel_2 = sel_2_1413;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4988_sel_2 = sel_7999;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4988_sel_2 = sel_7998;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4988_sel_2 = sel_7997;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4988_sel_2 = sel_7996;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4988_sel_2 = sel_7995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4988_sel_2 = sel_7994;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4988_sel_2 = sel_7993;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4988_sel_2 = sel_7992;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4988_sel_2 = sel_7991;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4988_sel_2 = sel_7990;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4988_sel_2 = sel_7989;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4988_sel_2 = sel_7988;
        end
      default :
        begin
          p4988_sel_2 = sel_8005;
        end
    endcase
    sel_2_1414 = p4988_sel_2;
  end

  always @* begin
    p4987cont_bits_cont_bits[9] = cont_bits_26[9];
    if (sel_2_1414) begin
      p4987cont_bits_cont_bits[9] = tmp_344;
    end
    cont_bits_27[0] = cont_bits_26[0];
    cont_bits_27[1] = cont_bits_26[1];
    cont_bits_27[2] = cont_bits_26[2];
    cont_bits_27[3] = cont_bits_26[3];
    cont_bits_27[4] = cont_bits_26[4];
    cont_bits_27[5] = cont_bits_26[5];
    cont_bits_27[6] = cont_bits_26[6];
    cont_bits_27[7] = cont_bits_26[7];
    cont_bits_27[8] = cont_bits_26[8];
    cont_bits_27[9] = p4987cont_bits_cont_bits[9];
    cont_bits_27[10] = cont_bits_26[10];
    cont_bits_27[11] = cont_bits_26[11];
  end

  assign sel_8006 = 32'sd0;

  assign sel_8007 = 32'sd0;

  assign sel_8008 = 32'sd0;

  assign sel_8009 = 32'sd0;

  assign sel_8010 = 32'sd0;

  assign sel_8011 = 32'sd0;

  assign sel_8012 = 32'sd0;

  assign sel_8013 = 32'sd0;

  assign sel_8014 = 32'sd0;

  assign sel_8015 = 32'sd0;

  assign sel_8016 = 32'sd0;

  assign sel_8017 = 32'sd0;

  assign sel_8018 = 32'sd0;

  assign sel_8019 = 32'sd0;

  assign sel_8020 = 32'sd0;

  assign s_487 = 32'sd10;

  assign sel_1_1470 = (tmp_17 == 1'b0 ? sel_8020 :
              s_487);

  assign sel_1_1471 = (s_10 == 1'b0 ? sel_8019 :
              sel_1_1470);

  assign sel_1_1472 = (s_11 == 1'b0 ? sel_8018 :
              sel_1_1471);

  assign sel_8021 = 32'sd0;

  assign sel_1_1473 = (s_12 == 1'b0 ? sel_1_1472 :
              sel_8021);

  assign sel_8022 = 32'sd0;

  assign sel_8023 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1473, sel_8006, sel_8007, sel_8008, sel_8009, sel_8010,
       sel_8011, sel_8012, sel_8013, sel_8014, sel_8015, sel_8016, sel_8017,
       sel_8022, sel_8023) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9472_sel_1 = sel_8022;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9472_sel_1 = sel_1_1473;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9472_sel_1 = sel_8017;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9472_sel_1 = sel_8016;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9472_sel_1 = sel_8015;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9472_sel_1 = sel_8014;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9472_sel_1 = sel_8013;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9472_sel_1 = sel_8012;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9472_sel_1 = sel_8011;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9472_sel_1 = sel_8010;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9472_sel_1 = sel_8009;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9472_sel_1 = sel_8008;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9472_sel_1 = sel_8007;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9472_sel_1 = sel_8006;
        end
      default :
        begin
          p9472_sel_1 = sel_8023;
        end
    endcase
    sel_1_1474 = p9472_sel_1;
  end

  assign tmp_345 = functionOutput_26[sel_1_1474];

  assign sel_8024 = 1'b0;

  assign sel_8025 = 1'b0;

  assign sel_8026 = 1'b0;

  assign sel_8027 = 1'b0;

  assign sel_8028 = 1'b0;

  assign sel_8029 = 1'b0;

  assign sel_8030 = 1'b0;

  assign sel_8031 = 1'b0;

  assign sel_8032 = 1'b0;

  assign sel_8033 = 1'b0;

  assign sel_8034 = 1'b0;

  assign sel_8035 = 1'b0;

  assign sel_8036 = 1'b0;

  assign sel_8037 = 1'b0;

  assign sel_8038 = 1'b0;

  assign s_488 = 1'b1;

  assign sel_2_1415 = (tmp_17 == 1'b0 ? sel_8038 :
              s_488);

  assign sel_2_1416 = (s_10 == 1'b0 ? sel_8037 :
              sel_2_1415);

  assign sel_2_1417 = (s_11 == 1'b0 ? sel_8036 :
              sel_2_1416);

  assign sel_8039 = 1'b0;

  assign sel_2_1418 = (s_12 == 1'b0 ? sel_2_1417 :
              sel_8039);

  assign sel_8040 = 1'b0;

  assign sel_8041 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1418, sel_8024, sel_8025, sel_8026, sel_8027, sel_8028,
       sel_8029, sel_8030, sel_8031, sel_8032, sel_8033, sel_8034, sel_8035,
       sel_8040, sel_8041) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4672_sel_2 = sel_8040;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4672_sel_2 = sel_2_1418;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4672_sel_2 = sel_8035;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4672_sel_2 = sel_8034;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4672_sel_2 = sel_8033;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4672_sel_2 = sel_8032;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4672_sel_2 = sel_8031;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4672_sel_2 = sel_8030;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4672_sel_2 = sel_8029;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4672_sel_2 = sel_8028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4672_sel_2 = sel_8027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4672_sel_2 = sel_8026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4672_sel_2 = sel_8025;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4672_sel_2 = sel_8024;
        end
      default :
        begin
          p4672_sel_2 = sel_8041;
        end
    endcase
    sel_2_1419 = p4672_sel_2;
  end

  always @* begin
    p4671cont_bits_cont_bits[10] = cont_bits_27[10];
    if (sel_2_1419) begin
      p4671cont_bits_cont_bits[10] = tmp_345;
    end
    cont_bits_28[0] = cont_bits_27[0];
    cont_bits_28[1] = cont_bits_27[1];
    cont_bits_28[2] = cont_bits_27[2];
    cont_bits_28[3] = cont_bits_27[3];
    cont_bits_28[4] = cont_bits_27[4];
    cont_bits_28[5] = cont_bits_27[5];
    cont_bits_28[6] = cont_bits_27[6];
    cont_bits_28[7] = cont_bits_27[7];
    cont_bits_28[8] = cont_bits_27[8];
    cont_bits_28[9] = cont_bits_27[9];
    cont_bits_28[10] = p4671cont_bits_cont_bits[10];
    cont_bits_28[11] = cont_bits_27[11];
  end

  assign sel_8042 = 32'sd0;

  assign sel_8043 = 32'sd0;

  assign sel_8044 = 32'sd0;

  assign sel_8045 = 32'sd0;

  assign sel_8046 = 32'sd0;

  assign sel_8047 = 32'sd0;

  assign sel_8048 = 32'sd0;

  assign sel_8049 = 32'sd0;

  assign sel_8050 = 32'sd0;

  assign sel_8051 = 32'sd0;

  assign sel_8052 = 32'sd0;

  assign sel_8053 = 32'sd0;

  assign sel_8054 = 32'sd0;

  assign sel_8055 = 32'sd0;

  assign sel_8056 = 32'sd0;

  assign s_489 = 32'sd11;

  assign sel_1_1475 = (tmp_17 == 1'b0 ? sel_8056 :
              s_489);

  assign sel_1_1476 = (s_10 == 1'b0 ? sel_8055 :
              sel_1_1475);

  assign sel_1_1477 = (s_11 == 1'b0 ? sel_8054 :
              sel_1_1476);

  assign sel_8057 = 32'sd0;

  assign sel_1_1478 = (s_12 == 1'b0 ? sel_1_1477 :
              sel_8057);

  assign sel_8058 = 32'sd0;

  assign sel_8059 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1478, sel_8042, sel_8043, sel_8044, sel_8045, sel_8046,
       sel_8047, sel_8048, sel_8049, sel_8050, sel_8051, sel_8052, sel_8053,
       sel_8058, sel_8059) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p9438_sel_1 = sel_8058;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p9438_sel_1 = sel_1_1478;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p9438_sel_1 = sel_8053;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p9438_sel_1 = sel_8052;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p9438_sel_1 = sel_8051;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p9438_sel_1 = sel_8050;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p9438_sel_1 = sel_8049;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p9438_sel_1 = sel_8048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p9438_sel_1 = sel_8047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p9438_sel_1 = sel_8046;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p9438_sel_1 = sel_8045;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p9438_sel_1 = sel_8044;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p9438_sel_1 = sel_8043;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p9438_sel_1 = sel_8042;
        end
      default :
        begin
          p9438_sel_1 = sel_8059;
        end
    endcase
    sel_1_1479 = p9438_sel_1;
  end

  assign tmp_346 = functionOutput_26[sel_1_1479];

  assign sel_8060 = 1'b0;

  assign sel_8061 = 1'b0;

  assign sel_8062 = 1'b0;

  assign sel_8063 = 1'b0;

  assign sel_8064 = 1'b0;

  assign sel_8065 = 1'b0;

  assign sel_8066 = 1'b0;

  assign sel_8067 = 1'b0;

  assign sel_8068 = 1'b0;

  assign sel_8069 = 1'b0;

  assign sel_8070 = 1'b0;

  assign sel_8071 = 1'b0;

  assign sel_8072 = 1'b0;

  assign sel_8073 = 1'b0;

  assign sel_8074 = 1'b0;

  assign s_490 = 1'b1;

  assign sel_2_1420 = (tmp_17 == 1'b0 ? sel_8074 :
              s_490);

  assign sel_2_1421 = (s_10 == 1'b0 ? sel_8073 :
              sel_2_1420);

  assign sel_2_1422 = (s_11 == 1'b0 ? sel_8072 :
              sel_2_1421);

  assign sel_8075 = 1'b0;

  assign sel_2_1423 = (s_12 == 1'b0 ? sel_2_1422 :
              sel_8075);

  assign sel_8076 = 1'b0;

  assign sel_8077 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1423, sel_8060, sel_8061, sel_8062, sel_8063, sel_8064,
       sel_8065, sel_8066, sel_8067, sel_8068, sel_8069, sel_8070, sel_8071,
       sel_8076, sel_8077) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4382_sel_2 = sel_8076;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4382_sel_2 = sel_2_1423;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4382_sel_2 = sel_8071;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4382_sel_2 = sel_8070;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4382_sel_2 = sel_8069;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4382_sel_2 = sel_8068;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4382_sel_2 = sel_8067;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4382_sel_2 = sel_8066;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4382_sel_2 = sel_8065;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4382_sel_2 = sel_8064;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4382_sel_2 = sel_8063;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4382_sel_2 = sel_8062;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4382_sel_2 = sel_8061;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4382_sel_2 = sel_8060;
        end
      default :
        begin
          p4382_sel_2 = sel_8077;
        end
    endcase
    sel_2_1424 = p4382_sel_2;
  end

  always @* begin
    p4381cont_bits_cont_bits[11] = cont_bits_28[11];
    if (sel_2_1424) begin
      p4381cont_bits_cont_bits[11] = tmp_346;
    end
    cont_bits_29[0] = cont_bits_28[0];
    cont_bits_29[1] = cont_bits_28[1];
    cont_bits_29[2] = cont_bits_28[2];
    cont_bits_29[3] = cont_bits_28[3];
    cont_bits_29[4] = cont_bits_28[4];
    cont_bits_29[5] = cont_bits_28[5];
    cont_bits_29[6] = cont_bits_28[6];
    cont_bits_29[7] = cont_bits_28[7];
    cont_bits_29[8] = cont_bits_28[8];
    cont_bits_29[9] = cont_bits_28[9];
    cont_bits_29[10] = cont_bits_28[10];
    cont_bits_29[11] = p4381cont_bits_cont_bits[11];
  end

  assign sel_8078 = 32'sd0;

  assign sel_8079 = 32'sd0;

  assign sel_8080 = 32'sd0;

  assign sel_8081 = 32'sd0;

  assign sel_8082 = 32'sd0;

  assign sel_8083 = 32'sd0;

  assign sel_8084 = 32'sd0;

  assign sel_8085 = 32'sd0;

  assign sel_8086 = 32'sd0;

  assign sel_8087 = 32'sd0;

  assign sel_8088 = 32'sd0;

  assign sel_8089 = 32'sd0;

  assign sel_8090 = 32'sd0;

  assign sel_8091 = 32'sd0;

  assign sel_8092 = 32'sd0;

  assign s_491 = 32'sd0;

  assign sel_1_1480 = (tmp_17 == 1'b0 ? sel_8092 :
              s_491);

  assign sel_1_1481 = (s_10 == 1'b0 ? sel_8091 :
              sel_1_1480);

  assign sel_1_1482 = (s_11 == 1'b0 ? sel_8090 :
              sel_1_1481);

  assign sel_8093 = 32'sd0;

  assign sel_1_1483 = (s_12 == 1'b0 ? sel_1_1482 :
              sel_8093);

  assign sel_8094 = 32'sd0;

  assign sel_8095 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1483, sel_8078, sel_8079, sel_8080, sel_8081, sel_8082,
       sel_8083, sel_8084, sel_8085, sel_8086, sel_8087, sel_8088, sel_8089,
       sel_8094, sel_8095) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2787_sel_1 = sel_8094;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2787_sel_1 = sel_1_1483;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2787_sel_1 = sel_8089;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2787_sel_1 = sel_8088;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2787_sel_1 = sel_8087;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2787_sel_1 = sel_8086;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2787_sel_1 = sel_8085;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2787_sel_1 = sel_8084;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2787_sel_1 = sel_8083;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2787_sel_1 = sel_8082;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2787_sel_1 = sel_8081;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2787_sel_1 = sel_8080;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2787_sel_1 = sel_8079;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2787_sel_1 = sel_8078;
        end
      default :
        begin
          p2787_sel_1 = sel_8095;
        end
    endcase
    sel_1_1484 = p2787_sel_1;
  end

  assign cont_bits_30 = cont_bits_29[sel_1_1484];

  assign sel_1_1485 = (tmp_17 == 1'b0 ? sel_1_1419 :
              cont_bits_30);

  assign sel_8096 = 1'b0;

  assign sel_8097 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1_1485, sel_1_594, sel_8096, sel_8097, sel_85, sel_86,
       sel_87, sel_88, sel_89, sel_90, sel_91, sel_92, sel_93, sel_94, sel_95) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p723_sel_1 = sel_8096;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p723_sel_1 = sel_1_1485;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p723_sel_1 = sel_1_594;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p723_sel_1 = sel_95;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p723_sel_1 = sel_94;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p723_sel_1 = sel_93;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p723_sel_1 = sel_92;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p723_sel_1 = sel_91;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p723_sel_1 = sel_90;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p723_sel_1 = sel_89;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p723_sel_1 = sel_88;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p723_sel_1 = sel_87;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p723_sel_1 = sel_86;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p723_sel_1 = sel_85;
        end
      default :
        begin
          p723_sel_1 = sel_8097;
        end
    endcase
    sel_1_1486 = p723_sel_1;
  end

  assign sel_8098 = 1'b0;

  assign sel_8099 = 1'b0;

  assign sel_8100 = 1'b0;

  assign sel_8101 = 1'b0;

  assign sel_8102 = 1'b0;

  assign sel_8103 = 1'b0;

  assign sel_8104 = 1'b0;

  assign sel_8105 = 1'b0;

  assign sel_8106 = 1'b0;

  assign sel_8107 = 1'b0;

  assign sel_8108 = 1'b0;

  assign sel_8109 = 1'b0;

  assign s_492 = 1'b1;

  assign sel_2_1425 = (s_13 == 1'b0 ? sel_8109 :
              s_492);

  assign s_493 = 1'b1;

  assign sel_2_1426 = (s_14 == 1'b0 ? sel_2_1425 :
              s_493);

  assign s_494 = 1'b1;

  assign sel_2_1427 = (s_15 == 1'b0 ? sel_2_1426 :
              s_494);

  assign s_495 = 1'b1;

  assign sel_2_1428 = (s_16 == 1'b0 ? sel_2_1427 :
              s_495);

  assign s_496 = 1'b1;

  assign sel_2_1429 = (s_17 == 1'b0 ? sel_2_1428 :
              s_496);

  assign s_497 = 1'b1;

  assign sel_2_1430 = (s_18 == 1'b0 ? sel_2_1429 :
              s_497);

  assign s_498 = 1'b1;

  assign sel_2_1431 = (s_19 == 1'b0 ? sel_2_1430 :
              s_498);

  assign s_499 = 1'b1;

  assign sel_2_1432 = (s_20 == 1'b0 ? sel_2_1431 :
              s_499);

  assign sel_8110 = 1'b0;

  assign sel_8111 = 1'b0;

  assign sel_8112 = 1'b0;

  assign s_500 = 1'b1;

  assign sel_2_1433 = (tmp_3 == 1'b0 ? sel_8112 :
              s_500);

  assign s_501 = 1'b1;

  assign sel_2_1434 = (tmp_5 == 1'b0 ? sel_2_1433 :
              s_501);

  assign s_502 = 1'b1;

  assign sel_2_1435 = (tmp_7 == 1'b0 ? sel_2_1434 :
              s_502);

  assign s_503 = 1'b1;

  assign sel_2_1436 = (tmp_9 == 1'b0 ? sel_2_1435 :
              s_503);

  assign s_504 = 1'b1;

  assign sel_2_1437 = (tmp_11 == 1'b0 ? sel_2_1436 :
              s_504);

  assign s_505 = 1'b1;

  assign sel_2_1438 = (tmp_13 == 1'b0 ? sel_2_1437 :
              s_505);

  assign s_506 = 1'b1;

  assign sel_2_1439 = (tmp_15 == 1'b0 ? sel_2_1438 :
              s_506);

  assign s_507 = 1'b1;

  assign sel_2_1440 = (tmp_17 == 1'b0 ? sel_2_1439 :
              s_507);

  assign sel_2_1441 = (s_10 == 1'b0 ? sel_8111 :
              sel_2_1440);

  assign sel_2_1442 = (s_11 == 1'b0 ? sel_8110 :
              sel_2_1441);

  assign sel_8113 = 1'b0;

  assign sel_2_1443 = (s_12 == 1'b0 ? sel_2_1442 :
              sel_8113);

  assign sel_8114 = 1'b0;

  assign sel_8115 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1432, sel_2_1443, sel_8098, sel_8099, sel_8100, sel_8101,
       sel_8102, sel_8103, sel_8104, sel_8105, sel_8106, sel_8107, sel_8108,
       sel_8114, sel_8115) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p708_sel_2 = sel_8114;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p708_sel_2 = sel_2_1443;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p708_sel_2 = sel_2_1432;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p708_sel_2 = sel_8108;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p708_sel_2 = sel_8107;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p708_sel_2 = sel_8106;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p708_sel_2 = sel_8105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p708_sel_2 = sel_8104;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p708_sel_2 = sel_8103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p708_sel_2 = sel_8102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p708_sel_2 = sel_8101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p708_sel_2 = sel_8100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p708_sel_2 = sel_8099;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p708_sel_2 = sel_8098;
        end
      default :
        begin
          p708_sel_2 = sel_8115;
        end
    endcase
    sel_2_1444 = p708_sel_2;
  end

  assign sel_8116 = 1'b0;

  assign sel_8117 = 1'b0;

  assign sel_8118 = 1'b0;

  assign sel_8119 = 1'b0;

  assign sel_8120 = 1'b0;

  assign sel_8121 = 1'b0;

  assign sel_8122 = 1'b0;

  assign sel_8123 = 1'b0;

  assign sel_8124 = 1'b0;

  assign sel_8125 = 1'b0;

  assign sel_8126 = 1'b0;

  assign sel_8127 = 32'sd0;

  assign sel_8128 = 32'sd0;

  assign sel_8129 = 32'sd0;

  assign sel_8130 = 32'sd0;

  assign sel_8131 = 32'sd0;

  assign sel_8132 = 32'sd0;

  assign sel_8133 = 32'sd0;

  assign sel_8134 = 32'sd0;

  assign sel_8135 = 32'sd0;

  assign sel_8136 = 32'sd0;

  assign sel_8137 = 32'sd0;

  assign sel_8138 = 32'sd0;

  assign s_508 = 32'sd1;

  assign sel_1_1487 = (s_13 == 1'b0 ? sel_8138 :
              s_508);

  assign sel_8139 = 32'sd0;

  assign sel_1_1488 = (s_14 == 1'b0 ? sel_1_1487 :
              sel_8139);

  assign sel_8140 = 32'sd0;

  assign sel_1_1489 = (s_15 == 1'b0 ? sel_1_1488 :
              sel_8140);

  assign sel_8141 = 32'sd0;

  assign sel_1_1490 = (s_16 == 1'b0 ? sel_1_1489 :
              sel_8141);

  assign sel_8142 = 32'sd0;

  assign sel_1_1491 = (s_17 == 1'b0 ? sel_1_1490 :
              sel_8142);

  assign sel_8143 = 32'sd0;

  assign sel_1_1492 = (s_18 == 1'b0 ? sel_1_1491 :
              sel_8143);

  assign sel_8144 = 32'sd0;

  assign sel_1_1493 = (s_19 == 1'b0 ? sel_1_1492 :
              sel_8144);

  assign sel_8145 = 32'sd0;

  assign sel_1_1494 = (s_20 == 1'b0 ? sel_1_1493 :
              sel_8145);

  assign sel_8146 = 32'sd0;

  assign sel_8147 = 32'sd0;

  assign sel_8148 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1494, sel_8127, sel_8128, sel_8129, sel_8130, sel_8131,
       sel_8132, sel_8133, sel_8134, sel_8135, sel_8136, sel_8137, sel_8146,
       sel_8147, sel_8148) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2175_sel_1 = sel_8147;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2175_sel_1 = sel_8146;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2175_sel_1 = sel_1_1494;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2175_sel_1 = sel_8137;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2175_sel_1 = sel_8136;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2175_sel_1 = sel_8135;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2175_sel_1 = sel_8134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2175_sel_1 = sel_8133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2175_sel_1 = sel_8132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2175_sel_1 = sel_8131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2175_sel_1 = sel_8130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2175_sel_1 = sel_8129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2175_sel_1 = sel_8128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2175_sel_1 = sel_8127;
        end
      default :
        begin
          p2175_sel_1 = sel_8148;
        end
    endcase
    sel_1_1495 = p2175_sel_1;
  end

  assign cont_bits_41_28 = cont_bits_41_12[sel_1_1495];

  assign sel_8149 = 32'sd0;

  assign sel_8150 = 32'sd0;

  assign sel_8151 = 32'sd0;

  assign sel_8152 = 32'sd0;

  assign sel_8153 = 32'sd0;

  assign sel_8154 = 32'sd0;

  assign sel_8155 = 32'sd0;

  assign sel_8156 = 32'sd0;

  assign sel_8157 = 32'sd0;

  assign sel_8158 = 32'sd0;

  assign sel_8159 = 32'sd0;

  assign sel_8160 = 32'sd0;

  assign s_509 = 32'sd1;

  assign sel_1_1496 = (s_14 == 1'b0 ? sel_8160 :
              s_509);

  assign sel_8161 = 32'sd0;

  assign sel_1_1497 = (s_15 == 1'b0 ? sel_1_1496 :
              sel_8161);

  assign sel_8162 = 32'sd0;

  assign sel_1_1498 = (s_16 == 1'b0 ? sel_1_1497 :
              sel_8162);

  assign sel_8163 = 32'sd0;

  assign sel_1_1499 = (s_17 == 1'b0 ? sel_1_1498 :
              sel_8163);

  assign sel_8164 = 32'sd0;

  assign sel_1_1500 = (s_18 == 1'b0 ? sel_1_1499 :
              sel_8164);

  assign sel_8165 = 32'sd0;

  assign sel_1_1501 = (s_19 == 1'b0 ? sel_1_1500 :
              sel_8165);

  assign sel_8166 = 32'sd0;

  assign sel_1_1502 = (s_20 == 1'b0 ? sel_1_1501 :
              sel_8166);

  assign sel_8167 = 32'sd0;

  assign sel_8168 = 32'sd0;

  assign sel_8169 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1502, sel_8149, sel_8150, sel_8151, sel_8152, sel_8153,
       sel_8154, sel_8155, sel_8156, sel_8157, sel_8158, sel_8159, sel_8167,
       sel_8168, sel_8169) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1325_sel_1 = sel_8168;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1325_sel_1 = sel_8167;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1325_sel_1 = sel_1_1502;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1325_sel_1 = sel_8159;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1325_sel_1 = sel_8158;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1325_sel_1 = sel_8157;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1325_sel_1 = sel_8156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1325_sel_1 = sel_8155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1325_sel_1 = sel_8154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1325_sel_1 = sel_8153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1325_sel_1 = sel_8152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1325_sel_1 = sel_8151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1325_sel_1 = sel_8150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1325_sel_1 = sel_8149;
        end
      default :
        begin
          p1325_sel_1 = sel_8169;
        end
    endcase
    sel_1_1503 = p1325_sel_1;
  end

  assign cont_bits_42_28 = cont_bits_42_12[sel_1_1503];

  assign sel_1_1504 = (s_14 == 1'b0 ? cont_bits_41_28 :
              cont_bits_42_28);

  assign sel_8170 = 32'sd0;

  assign sel_8171 = 32'sd0;

  assign sel_8172 = 32'sd0;

  assign sel_8173 = 32'sd0;

  assign sel_8174 = 32'sd0;

  assign sel_8175 = 32'sd0;

  assign sel_8176 = 32'sd0;

  assign sel_8177 = 32'sd0;

  assign sel_8178 = 32'sd0;

  assign sel_8179 = 32'sd0;

  assign sel_8180 = 32'sd0;

  assign sel_8181 = 32'sd0;

  assign s_510 = 32'sd1;

  assign sel_1_1505 = (s_15 == 1'b0 ? sel_8181 :
              s_510);

  assign sel_8182 = 32'sd0;

  assign sel_1_1506 = (s_16 == 1'b0 ? sel_1_1505 :
              sel_8182);

  assign sel_8183 = 32'sd0;

  assign sel_1_1507 = (s_17 == 1'b0 ? sel_1_1506 :
              sel_8183);

  assign sel_8184 = 32'sd0;

  assign sel_1_1508 = (s_18 == 1'b0 ? sel_1_1507 :
              sel_8184);

  assign sel_8185 = 32'sd0;

  assign sel_1_1509 = (s_19 == 1'b0 ? sel_1_1508 :
              sel_8185);

  assign sel_8186 = 32'sd0;

  assign sel_1_1510 = (s_20 == 1'b0 ? sel_1_1509 :
              sel_8186);

  assign sel_8187 = 32'sd0;

  assign sel_8188 = 32'sd0;

  assign sel_8189 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1510, sel_8170, sel_8171, sel_8172, sel_8173, sel_8174,
       sel_8175, sel_8176, sel_8177, sel_8178, sel_8179, sel_8180, sel_8187,
       sel_8188, sel_8189) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1597_sel_1 = sel_8188;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1597_sel_1 = sel_8187;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1597_sel_1 = sel_1_1510;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1597_sel_1 = sel_8180;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1597_sel_1 = sel_8179;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1597_sel_1 = sel_8178;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1597_sel_1 = sel_8177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1597_sel_1 = sel_8176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1597_sel_1 = sel_8175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1597_sel_1 = sel_8174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1597_sel_1 = sel_8173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1597_sel_1 = sel_8172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1597_sel_1 = sel_8171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1597_sel_1 = sel_8170;
        end
      default :
        begin
          p1597_sel_1 = sel_8189;
        end
    endcase
    sel_1_1511 = p1597_sel_1;
  end

  assign cont_bits_32_28 = cont_bits_32_12[sel_1_1511];

  assign sel_1_1512 = (s_15 == 1'b0 ? sel_1_1504 :
              cont_bits_32_28);

  assign sel_8190 = 32'sd0;

  assign sel_8191 = 32'sd0;

  assign sel_8192 = 32'sd0;

  assign sel_8193 = 32'sd0;

  assign sel_8194 = 32'sd0;

  assign sel_8195 = 32'sd0;

  assign sel_8196 = 32'sd0;

  assign sel_8197 = 32'sd0;

  assign sel_8198 = 32'sd0;

  assign sel_8199 = 32'sd0;

  assign sel_8200 = 32'sd0;

  assign sel_8201 = 32'sd0;

  assign s_511 = 32'sd1;

  assign sel_1_1513 = (s_16 == 1'b0 ? sel_8201 :
              s_511);

  assign sel_8202 = 32'sd0;

  assign sel_1_1514 = (s_17 == 1'b0 ? sel_1_1513 :
              sel_8202);

  assign sel_8203 = 32'sd0;

  assign sel_1_1515 = (s_18 == 1'b0 ? sel_1_1514 :
              sel_8203);

  assign sel_8204 = 32'sd0;

  assign sel_1_1516 = (s_19 == 1'b0 ? sel_1_1515 :
              sel_8204);

  assign sel_8205 = 32'sd0;

  assign sel_1_1517 = (s_20 == 1'b0 ? sel_1_1516 :
              sel_8205);

  assign sel_8206 = 32'sd0;

  assign sel_8207 = 32'sd0;

  assign sel_8208 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1517, sel_8190, sel_8191, sel_8192, sel_8193, sel_8194,
       sel_8195, sel_8196, sel_8197, sel_8198, sel_8199, sel_8200, sel_8206,
       sel_8207, sel_8208) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1087_sel_1 = sel_8207;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1087_sel_1 = sel_8206;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1087_sel_1 = sel_1_1517;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1087_sel_1 = sel_8200;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1087_sel_1 = sel_8199;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1087_sel_1 = sel_8198;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1087_sel_1 = sel_8197;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1087_sel_1 = sel_8196;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1087_sel_1 = sel_8195;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1087_sel_1 = sel_8194;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1087_sel_1 = sel_8193;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1087_sel_1 = sel_8192;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1087_sel_1 = sel_8191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1087_sel_1 = sel_8190;
        end
      default :
        begin
          p1087_sel_1 = sel_8208;
        end
    endcase
    sel_1_1518 = p1087_sel_1;
  end

  assign cont_bits_31_28 = cont_bits_31_12[sel_1_1518];

  assign sel_1_1519 = (s_16 == 1'b0 ? sel_1_1512 :
              cont_bits_31_28);

  assign sel_8209 = 32'sd0;

  assign sel_8210 = 32'sd0;

  assign sel_8211 = 32'sd0;

  assign sel_8212 = 32'sd0;

  assign sel_8213 = 32'sd0;

  assign sel_8214 = 32'sd0;

  assign sel_8215 = 32'sd0;

  assign sel_8216 = 32'sd0;

  assign sel_8217 = 32'sd0;

  assign sel_8218 = 32'sd0;

  assign sel_8219 = 32'sd0;

  assign sel_8220 = 32'sd0;

  assign s_512 = 32'sd1;

  assign sel_1_1520 = (s_17 == 1'b0 ? sel_8220 :
              s_512);

  assign sel_8221 = 32'sd0;

  assign sel_1_1521 = (s_18 == 1'b0 ? sel_1_1520 :
              sel_8221);

  assign sel_8222 = 32'sd0;

  assign sel_1_1522 = (s_19 == 1'b0 ? sel_1_1521 :
              sel_8222);

  assign sel_8223 = 32'sd0;

  assign sel_1_1523 = (s_20 == 1'b0 ? sel_1_1522 :
              sel_8223);

  assign sel_8224 = 32'sd0;

  assign sel_8225 = 32'sd0;

  assign sel_8226 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1523, sel_8209, sel_8210, sel_8211, sel_8212, sel_8213,
       sel_8214, sel_8215, sel_8216, sel_8217, sel_8218, sel_8219, sel_8224,
       sel_8225, sel_8226) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1903_sel_1 = sel_8225;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1903_sel_1 = sel_8224;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1903_sel_1 = sel_1_1523;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1903_sel_1 = sel_8219;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1903_sel_1 = sel_8218;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1903_sel_1 = sel_8217;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1903_sel_1 = sel_8216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1903_sel_1 = sel_8215;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1903_sel_1 = sel_8214;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1903_sel_1 = sel_8213;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1903_sel_1 = sel_8212;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1903_sel_1 = sel_8211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1903_sel_1 = sel_8210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1903_sel_1 = sel_8209;
        end
      default :
        begin
          p1903_sel_1 = sel_8226;
        end
    endcase
    sel_1_1524 = p1903_sel_1;
  end

  assign cont_bits_22_28 = cont_bits_22_12[sel_1_1524];

  assign sel_1_1525 = (s_17 == 1'b0 ? sel_1_1519 :
              cont_bits_22_28);

  assign sel_8227 = 32'sd0;

  assign sel_8228 = 32'sd0;

  assign sel_8229 = 32'sd0;

  assign sel_8230 = 32'sd0;

  assign sel_8231 = 32'sd0;

  assign sel_8232 = 32'sd0;

  assign sel_8233 = 32'sd0;

  assign sel_8234 = 32'sd0;

  assign sel_8235 = 32'sd0;

  assign sel_8236 = 32'sd0;

  assign sel_8237 = 32'sd0;

  assign sel_8238 = 32'sd0;

  assign s_513 = 32'sd1;

  assign sel_1_1526 = (s_18 == 1'b0 ? sel_8238 :
              s_513);

  assign sel_8239 = 32'sd0;

  assign sel_1_1527 = (s_19 == 1'b0 ? sel_1_1526 :
              sel_8239);

  assign sel_8240 = 32'sd0;

  assign sel_1_1528 = (s_20 == 1'b0 ? sel_1_1527 :
              sel_8240);

  assign sel_8241 = 32'sd0;

  assign sel_8242 = 32'sd0;

  assign sel_8243 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1528, sel_8227, sel_8228, sel_8229, sel_8230, sel_8231,
       sel_8232, sel_8233, sel_8234, sel_8235, sel_8236, sel_8237, sel_8241,
       sel_8242, sel_8243) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2532_sel_1 = sel_8242;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2532_sel_1 = sel_8241;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2532_sel_1 = sel_1_1528;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2532_sel_1 = sel_8237;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2532_sel_1 = sel_8236;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2532_sel_1 = sel_8235;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2532_sel_1 = sel_8234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2532_sel_1 = sel_8233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2532_sel_1 = sel_8232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2532_sel_1 = sel_8231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2532_sel_1 = sel_8230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2532_sel_1 = sel_8229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2532_sel_1 = sel_8228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2532_sel_1 = sel_8227;
        end
      default :
        begin
          p2532_sel_1 = sel_8243;
        end
    endcase
    sel_1_1529 = p2532_sel_1;
  end

  assign cont_bits_21_28 = cont_bits_21_12[sel_1_1529];

  assign sel_1_1530 = (s_18 == 1'b0 ? sel_1_1525 :
              cont_bits_21_28);

  assign sel_8244 = 32'sd0;

  assign sel_8245 = 32'sd0;

  assign sel_8246 = 32'sd0;

  assign sel_8247 = 32'sd0;

  assign sel_8248 = 32'sd0;

  assign sel_8249 = 32'sd0;

  assign sel_8250 = 32'sd0;

  assign sel_8251 = 32'sd0;

  assign sel_8252 = 32'sd0;

  assign sel_8253 = 32'sd0;

  assign sel_8254 = 32'sd0;

  assign sel_8255 = 32'sd0;

  assign s_514 = 32'sd1;

  assign sel_1_1531 = (s_19 == 1'b0 ? sel_8255 :
              s_514);

  assign sel_8256 = 32'sd0;

  assign sel_1_1532 = (s_20 == 1'b0 ? sel_1_1531 :
              sel_8256);

  assign sel_8257 = 32'sd0;

  assign sel_8258 = 32'sd0;

  assign sel_8259 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1532, sel_8244, sel_8245, sel_8246, sel_8247, sel_8248,
       sel_8249, sel_8250, sel_8251, sel_8252, sel_8253, sel_8254, sel_8257,
       sel_8258, sel_8259) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1563_sel_1 = sel_8258;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1563_sel_1 = sel_8257;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1563_sel_1 = sel_1_1532;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1563_sel_1 = sel_8254;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1563_sel_1 = sel_8253;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1563_sel_1 = sel_8252;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1563_sel_1 = sel_8251;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1563_sel_1 = sel_8250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1563_sel_1 = sel_8249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1563_sel_1 = sel_8248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1563_sel_1 = sel_8247;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1563_sel_1 = sel_8246;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1563_sel_1 = sel_8245;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1563_sel_1 = sel_8244;
        end
      default :
        begin
          p1563_sel_1 = sel_8259;
        end
    endcase
    sel_1_1533 = p1563_sel_1;
  end

  assign cont_bits_12_28 = cont_bits_12_12[sel_1_1533];

  assign sel_1_1534 = (s_19 == 1'b0 ? sel_1_1530 :
              cont_bits_12_28);

  assign sel_8260 = 32'sd0;

  assign sel_8261 = 32'sd0;

  assign sel_8262 = 32'sd0;

  assign sel_8263 = 32'sd0;

  assign sel_8264 = 32'sd0;

  assign sel_8265 = 32'sd0;

  assign sel_8266 = 32'sd0;

  assign sel_8267 = 32'sd0;

  assign sel_8268 = 32'sd0;

  assign sel_8269 = 32'sd0;

  assign sel_8270 = 32'sd0;

  assign sel_8271 = 32'sd0;

  assign s_515 = 32'sd1;

  assign sel_1_1535 = (s_20 == 1'b0 ? sel_8271 :
              s_515);

  assign sel_8272 = 32'sd0;

  assign sel_8273 = 32'sd0;

  assign sel_8274 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1535, sel_8260, sel_8261, sel_8262, sel_8263, sel_8264,
       sel_8265, sel_8266, sel_8267, sel_8268, sel_8269, sel_8270, sel_8272,
       sel_8273, sel_8274) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2294_sel_1 = sel_8273;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2294_sel_1 = sel_8272;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2294_sel_1 = sel_1_1535;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2294_sel_1 = sel_8270;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2294_sel_1 = sel_8269;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2294_sel_1 = sel_8268;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2294_sel_1 = sel_8267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2294_sel_1 = sel_8266;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2294_sel_1 = sel_8265;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2294_sel_1 = sel_8264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2294_sel_1 = sel_8263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2294_sel_1 = sel_8262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2294_sel_1 = sel_8261;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2294_sel_1 = sel_8260;
        end
      default :
        begin
          p2294_sel_1 = sel_8274;
        end
    endcase
    sel_1_1536 = p2294_sel_1;
  end

  assign cont_bits_33 = cont_bits_13[sel_1_1536];

  assign sel_1_1537 = (s_20 == 1'b0 ? sel_1_1534 :
              cont_bits_33);

  assign sel_8275 = 32'sd0;

  assign sel_8276 = 32'sd0;

  assign sel_8277 = 32'sd0;

  assign sel_8278 = 32'sd0;

  assign sel_8279 = 32'sd0;

  assign sel_8280 = 32'sd0;

  assign sel_8281 = 32'sd0;

  assign sel_8282 = 32'sd0;

  assign sel_8283 = 32'sd0;

  assign sel_8284 = 32'sd0;

  assign sel_8285 = 32'sd0;

  assign sel_8286 = 32'sd0;

  assign sel_8287 = 32'sd0;

  assign sel_8288 = 32'sd0;

  assign sel_8289 = 32'sd0;

  assign s_516 = 32'sd1;

  assign sel_1_1538 = (tmp_3 == 1'b0 ? sel_8289 :
              s_516);

  assign sel_8290 = 32'sd0;

  assign sel_1_1539 = (tmp_5 == 1'b0 ? sel_1_1538 :
              sel_8290);

  assign sel_8291 = 32'sd0;

  assign sel_1_1540 = (tmp_7 == 1'b0 ? sel_1_1539 :
              sel_8291);

  assign sel_8292 = 32'sd0;

  assign sel_1_1541 = (tmp_9 == 1'b0 ? sel_1_1540 :
              sel_8292);

  assign sel_8293 = 32'sd0;

  assign sel_1_1542 = (tmp_11 == 1'b0 ? sel_1_1541 :
              sel_8293);

  assign sel_8294 = 32'sd0;

  assign sel_1_1543 = (tmp_13 == 1'b0 ? sel_1_1542 :
              sel_8294);

  assign sel_8295 = 32'sd0;

  assign sel_1_1544 = (tmp_15 == 1'b0 ? sel_1_1543 :
              sel_8295);

  assign sel_8296 = 32'sd0;

  assign sel_1_1545 = (tmp_17 == 1'b0 ? sel_1_1544 :
              sel_8296);

  assign sel_1_1546 = (s_10 == 1'b0 ? sel_8288 :
              sel_1_1545);

  assign sel_1_1547 = (s_11 == 1'b0 ? sel_8287 :
              sel_1_1546);

  assign sel_8297 = 32'sd0;

  assign sel_1_1548 = (s_12 == 1'b0 ? sel_1_1547 :
              sel_8297);

  assign sel_8298 = 32'sd0;

  assign sel_8299 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1548, sel_8275, sel_8276, sel_8277, sel_8278, sel_8279,
       sel_8280, sel_8281, sel_8282, sel_8283, sel_8284, sel_8285, sel_8286,
       sel_8298, sel_8299) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3399_sel_1 = sel_8298;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3399_sel_1 = sel_1_1548;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3399_sel_1 = sel_8286;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3399_sel_1 = sel_8285;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3399_sel_1 = sel_8284;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3399_sel_1 = sel_8283;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3399_sel_1 = sel_8282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3399_sel_1 = sel_8281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3399_sel_1 = sel_8280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3399_sel_1 = sel_8279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3399_sel_1 = sel_8278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3399_sel_1 = sel_8277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3399_sel_1 = sel_8276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3399_sel_1 = sel_8275;
        end
      default :
        begin
          p3399_sel_1 = sel_8299;
        end
    endcase
    sel_1_1549 = p3399_sel_1;
  end

  assign cont_bits_41_29 = cont_bits_41_26[sel_1_1549];

  assign sel_8300 = 32'sd0;

  assign sel_8301 = 32'sd0;

  assign sel_8302 = 32'sd0;

  assign sel_8303 = 32'sd0;

  assign sel_8304 = 32'sd0;

  assign sel_8305 = 32'sd0;

  assign sel_8306 = 32'sd0;

  assign sel_8307 = 32'sd0;

  assign sel_8308 = 32'sd0;

  assign sel_8309 = 32'sd0;

  assign sel_8310 = 32'sd0;

  assign sel_8311 = 32'sd0;

  assign sel_8312 = 32'sd0;

  assign sel_8313 = 32'sd0;

  assign sel_8314 = 32'sd0;

  assign s_517 = 32'sd1;

  assign sel_1_1550 = (tmp_5 == 1'b0 ? sel_8314 :
              s_517);

  assign sel_8315 = 32'sd0;

  assign sel_1_1551 = (tmp_7 == 1'b0 ? sel_1_1550 :
              sel_8315);

  assign sel_8316 = 32'sd0;

  assign sel_1_1552 = (tmp_9 == 1'b0 ? sel_1_1551 :
              sel_8316);

  assign sel_8317 = 32'sd0;

  assign sel_1_1553 = (tmp_11 == 1'b0 ? sel_1_1552 :
              sel_8317);

  assign sel_8318 = 32'sd0;

  assign sel_1_1554 = (tmp_13 == 1'b0 ? sel_1_1553 :
              sel_8318);

  assign sel_8319 = 32'sd0;

  assign sel_1_1555 = (tmp_15 == 1'b0 ? sel_1_1554 :
              sel_8319);

  assign sel_8320 = 32'sd0;

  assign sel_1_1556 = (tmp_17 == 1'b0 ? sel_1_1555 :
              sel_8320);

  assign sel_1_1557 = (s_10 == 1'b0 ? sel_8313 :
              sel_1_1556);

  assign sel_1_1558 = (s_11 == 1'b0 ? sel_8312 :
              sel_1_1557);

  assign sel_8321 = 32'sd0;

  assign sel_1_1559 = (s_12 == 1'b0 ? sel_1_1558 :
              sel_8321);

  assign sel_8322 = 32'sd0;

  assign sel_8323 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1559, sel_8300, sel_8301, sel_8302, sel_8303, sel_8304,
       sel_8305, sel_8306, sel_8307, sel_8308, sel_8309, sel_8310, sel_8311,
       sel_8322, sel_8323) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2889_sel_1 = sel_8322;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2889_sel_1 = sel_1_1559;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2889_sel_1 = sel_8311;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2889_sel_1 = sel_8310;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2889_sel_1 = sel_8309;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2889_sel_1 = sel_8308;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2889_sel_1 = sel_8307;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2889_sel_1 = sel_8306;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2889_sel_1 = sel_8305;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2889_sel_1 = sel_8304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2889_sel_1 = sel_8303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2889_sel_1 = sel_8302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2889_sel_1 = sel_8301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2889_sel_1 = sel_8300;
        end
      default :
        begin
          p2889_sel_1 = sel_8323;
        end
    endcase
    sel_1_1560 = p2889_sel_1;
  end

  assign cont_bits_42_29 = cont_bits_42_26[sel_1_1560];

  assign sel_1_1561 = (tmp_5 == 1'b0 ? cont_bits_41_29 :
              cont_bits_42_29);

  assign sel_8324 = 32'sd0;

  assign sel_8325 = 32'sd0;

  assign sel_8326 = 32'sd0;

  assign sel_8327 = 32'sd0;

  assign sel_8328 = 32'sd0;

  assign sel_8329 = 32'sd0;

  assign sel_8330 = 32'sd0;

  assign sel_8331 = 32'sd0;

  assign sel_8332 = 32'sd0;

  assign sel_8333 = 32'sd0;

  assign sel_8334 = 32'sd0;

  assign sel_8335 = 32'sd0;

  assign sel_8336 = 32'sd0;

  assign sel_8337 = 32'sd0;

  assign sel_8338 = 32'sd0;

  assign s_518 = 32'sd1;

  assign sel_1_1562 = (tmp_7 == 1'b0 ? sel_8338 :
              s_518);

  assign sel_8339 = 32'sd0;

  assign sel_1_1563 = (tmp_9 == 1'b0 ? sel_1_1562 :
              sel_8339);

  assign sel_8340 = 32'sd0;

  assign sel_1_1564 = (tmp_11 == 1'b0 ? sel_1_1563 :
              sel_8340);

  assign sel_8341 = 32'sd0;

  assign sel_1_1565 = (tmp_13 == 1'b0 ? sel_1_1564 :
              sel_8341);

  assign sel_8342 = 32'sd0;

  assign sel_1_1566 = (tmp_15 == 1'b0 ? sel_1_1565 :
              sel_8342);

  assign sel_8343 = 32'sd0;

  assign sel_1_1567 = (tmp_17 == 1'b0 ? sel_1_1566 :
              sel_8343);

  assign sel_1_1568 = (s_10 == 1'b0 ? sel_8337 :
              sel_1_1567);

  assign sel_1_1569 = (s_11 == 1'b0 ? sel_8336 :
              sel_1_1568);

  assign sel_8344 = 32'sd0;

  assign sel_1_1570 = (s_12 == 1'b0 ? sel_1_1569 :
              sel_8344);

  assign sel_8345 = 32'sd0;

  assign sel_8346 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1570, sel_8324, sel_8325, sel_8326, sel_8327, sel_8328,
       sel_8329, sel_8330, sel_8331, sel_8332, sel_8333, sel_8334, sel_8335,
       sel_8345, sel_8346) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3484_sel_1 = sel_8345;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3484_sel_1 = sel_1_1570;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3484_sel_1 = sel_8335;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3484_sel_1 = sel_8334;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3484_sel_1 = sel_8333;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3484_sel_1 = sel_8332;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3484_sel_1 = sel_8331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3484_sel_1 = sel_8330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3484_sel_1 = sel_8329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3484_sel_1 = sel_8328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3484_sel_1 = sel_8327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3484_sel_1 = sel_8326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3484_sel_1 = sel_8325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3484_sel_1 = sel_8324;
        end
      default :
        begin
          p3484_sel_1 = sel_8346;
        end
    endcase
    sel_1_1571 = p3484_sel_1;
  end

  assign cont_bits_32_29 = cont_bits_32_26[sel_1_1571];

  assign sel_1_1572 = (tmp_7 == 1'b0 ? sel_1_1561 :
              cont_bits_32_29);

  assign sel_8347 = 32'sd0;

  assign sel_8348 = 32'sd0;

  assign sel_8349 = 32'sd0;

  assign sel_8350 = 32'sd0;

  assign sel_8351 = 32'sd0;

  assign sel_8352 = 32'sd0;

  assign sel_8353 = 32'sd0;

  assign sel_8354 = 32'sd0;

  assign sel_8355 = 32'sd0;

  assign sel_8356 = 32'sd0;

  assign sel_8357 = 32'sd0;

  assign sel_8358 = 32'sd0;

  assign sel_8359 = 32'sd0;

  assign sel_8360 = 32'sd0;

  assign sel_8361 = 32'sd0;

  assign s_519 = 32'sd1;

  assign sel_1_1573 = (tmp_9 == 1'b0 ? sel_8361 :
              s_519);

  assign sel_8362 = 32'sd0;

  assign sel_1_1574 = (tmp_11 == 1'b0 ? sel_1_1573 :
              sel_8362);

  assign sel_8363 = 32'sd0;

  assign sel_1_1575 = (tmp_13 == 1'b0 ? sel_1_1574 :
              sel_8363);

  assign sel_8364 = 32'sd0;

  assign sel_1_1576 = (tmp_15 == 1'b0 ? sel_1_1575 :
              sel_8364);

  assign sel_8365 = 32'sd0;

  assign sel_1_1577 = (tmp_17 == 1'b0 ? sel_1_1576 :
              sel_8365);

  assign sel_1_1578 = (s_10 == 1'b0 ? sel_8360 :
              sel_1_1577);

  assign sel_1_1579 = (s_11 == 1'b0 ? sel_8359 :
              sel_1_1578);

  assign sel_8366 = 32'sd0;

  assign sel_1_1580 = (s_12 == 1'b0 ? sel_1_1579 :
              sel_8366);

  assign sel_8367 = 32'sd0;

  assign sel_8368 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1580, sel_8347, sel_8348, sel_8349, sel_8350, sel_8351,
       sel_8352, sel_8353, sel_8354, sel_8355, sel_8356, sel_8357, sel_8358,
       sel_8367, sel_8368) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4096_sel_1 = sel_8367;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4096_sel_1 = sel_1_1580;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4096_sel_1 = sel_8358;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4096_sel_1 = sel_8357;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4096_sel_1 = sel_8356;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4096_sel_1 = sel_8355;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4096_sel_1 = sel_8354;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4096_sel_1 = sel_8353;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4096_sel_1 = sel_8352;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4096_sel_1 = sel_8351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4096_sel_1 = sel_8350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4096_sel_1 = sel_8349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4096_sel_1 = sel_8348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4096_sel_1 = sel_8347;
        end
      default :
        begin
          p4096_sel_1 = sel_8368;
        end
    endcase
    sel_1_1581 = p4096_sel_1;
  end

  assign cont_bits_31_29 = cont_bits_31_26[sel_1_1581];

  assign sel_1_1582 = (tmp_9 == 1'b0 ? sel_1_1572 :
              cont_bits_31_29);

  assign sel_8369 = 32'sd0;

  assign sel_8370 = 32'sd0;

  assign sel_8371 = 32'sd0;

  assign sel_8372 = 32'sd0;

  assign sel_8373 = 32'sd0;

  assign sel_8374 = 32'sd0;

  assign sel_8375 = 32'sd0;

  assign sel_8376 = 32'sd0;

  assign sel_8377 = 32'sd0;

  assign sel_8378 = 32'sd0;

  assign sel_8379 = 32'sd0;

  assign sel_8380 = 32'sd0;

  assign sel_8381 = 32'sd0;

  assign sel_8382 = 32'sd0;

  assign sel_8383 = 32'sd0;

  assign s_520 = 32'sd1;

  assign sel_1_1583 = (tmp_11 == 1'b0 ? sel_8383 :
              s_520);

  assign sel_8384 = 32'sd0;

  assign sel_1_1584 = (tmp_13 == 1'b0 ? sel_1_1583 :
              sel_8384);

  assign sel_8385 = 32'sd0;

  assign sel_1_1585 = (tmp_15 == 1'b0 ? sel_1_1584 :
              sel_8385);

  assign sel_8386 = 32'sd0;

  assign sel_1_1586 = (tmp_17 == 1'b0 ? sel_1_1585 :
              sel_8386);

  assign sel_1_1587 = (s_10 == 1'b0 ? sel_8382 :
              sel_1_1586);

  assign sel_1_1588 = (s_11 == 1'b0 ? sel_8381 :
              sel_1_1587);

  assign sel_8387 = 32'sd0;

  assign sel_1_1589 = (s_12 == 1'b0 ? sel_1_1588 :
              sel_8387);

  assign sel_8388 = 32'sd0;

  assign sel_8389 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1589, sel_8369, sel_8370, sel_8371, sel_8372, sel_8373,
       sel_8374, sel_8375, sel_8376, sel_8377, sel_8378, sel_8379, sel_8380,
       sel_8388, sel_8389) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3875_sel_1 = sel_8388;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3875_sel_1 = sel_1_1589;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3875_sel_1 = sel_8380;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3875_sel_1 = sel_8379;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3875_sel_1 = sel_8378;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3875_sel_1 = sel_8377;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3875_sel_1 = sel_8376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3875_sel_1 = sel_8375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3875_sel_1 = sel_8374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3875_sel_1 = sel_8373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3875_sel_1 = sel_8372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3875_sel_1 = sel_8371;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3875_sel_1 = sel_8370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3875_sel_1 = sel_8369;
        end
      default :
        begin
          p3875_sel_1 = sel_8389;
        end
    endcase
    sel_1_1590 = p3875_sel_1;
  end

  assign cont_bits_22_29 = cont_bits_22_26[sel_1_1590];

  assign sel_1_1591 = (tmp_11 == 1'b0 ? sel_1_1582 :
              cont_bits_22_29);

  assign sel_8390 = 32'sd0;

  assign sel_8391 = 32'sd0;

  assign sel_8392 = 32'sd0;

  assign sel_8393 = 32'sd0;

  assign sel_8394 = 32'sd0;

  assign sel_8395 = 32'sd0;

  assign sel_8396 = 32'sd0;

  assign sel_8397 = 32'sd0;

  assign sel_8398 = 32'sd0;

  assign sel_8399 = 32'sd0;

  assign sel_8400 = 32'sd0;

  assign sel_8401 = 32'sd0;

  assign sel_8402 = 32'sd0;

  assign sel_8403 = 32'sd0;

  assign sel_8404 = 32'sd0;

  assign s_521 = 32'sd1;

  assign sel_1_1592 = (tmp_13 == 1'b0 ? sel_8404 :
              s_521);

  assign sel_8405 = 32'sd0;

  assign sel_1_1593 = (tmp_15 == 1'b0 ? sel_1_1592 :
              sel_8405);

  assign sel_8406 = 32'sd0;

  assign sel_1_1594 = (tmp_17 == 1'b0 ? sel_1_1593 :
              sel_8406);

  assign sel_1_1595 = (s_10 == 1'b0 ? sel_8403 :
              sel_1_1594);

  assign sel_1_1596 = (s_11 == 1'b0 ? sel_8402 :
              sel_1_1595);

  assign sel_8407 = 32'sd0;

  assign sel_1_1597 = (s_12 == 1'b0 ? sel_1_1596 :
              sel_8407);

  assign sel_8408 = 32'sd0;

  assign sel_8409 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1597, sel_8390, sel_8391, sel_8392, sel_8393, sel_8394,
       sel_8395, sel_8396, sel_8397, sel_8398, sel_8399, sel_8400, sel_8401,
       sel_8408, sel_8409) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3076_sel_1 = sel_8408;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3076_sel_1 = sel_1_1597;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3076_sel_1 = sel_8401;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3076_sel_1 = sel_8400;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3076_sel_1 = sel_8399;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3076_sel_1 = sel_8398;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3076_sel_1 = sel_8397;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3076_sel_1 = sel_8396;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3076_sel_1 = sel_8395;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3076_sel_1 = sel_8394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3076_sel_1 = sel_8393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3076_sel_1 = sel_8392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3076_sel_1 = sel_8391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3076_sel_1 = sel_8390;
        end
      default :
        begin
          p3076_sel_1 = sel_8409;
        end
    endcase
    sel_1_1598 = p3076_sel_1;
  end

  assign cont_bits_21_29 = cont_bits_21_26[sel_1_1598];

  assign sel_1_1599 = (tmp_13 == 1'b0 ? sel_1_1591 :
              cont_bits_21_29);

  assign sel_8410 = 32'sd0;

  assign sel_8411 = 32'sd0;

  assign sel_8412 = 32'sd0;

  assign sel_8413 = 32'sd0;

  assign sel_8414 = 32'sd0;

  assign sel_8415 = 32'sd0;

  assign sel_8416 = 32'sd0;

  assign sel_8417 = 32'sd0;

  assign sel_8418 = 32'sd0;

  assign sel_8419 = 32'sd0;

  assign sel_8420 = 32'sd0;

  assign sel_8421 = 32'sd0;

  assign sel_8422 = 32'sd0;

  assign sel_8423 = 32'sd0;

  assign sel_8424 = 32'sd0;

  assign s_522 = 32'sd1;

  assign sel_1_1600 = (tmp_15 == 1'b0 ? sel_8424 :
              s_522);

  assign sel_8425 = 32'sd0;

  assign sel_1_1601 = (tmp_17 == 1'b0 ? sel_1_1600 :
              sel_8425);

  assign sel_1_1602 = (s_10 == 1'b0 ? sel_8423 :
              sel_1_1601);

  assign sel_1_1603 = (s_11 == 1'b0 ? sel_8422 :
              sel_1_1602);

  assign sel_8426 = 32'sd0;

  assign sel_1_1604 = (s_12 == 1'b0 ? sel_1_1603 :
              sel_8426);

  assign sel_8427 = 32'sd0;

  assign sel_8428 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1604, sel_8410, sel_8411, sel_8412, sel_8413, sel_8414,
       sel_8415, sel_8416, sel_8417, sel_8418, sel_8419, sel_8420, sel_8421,
       sel_8427, sel_8428) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3773_sel_1 = sel_8427;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3773_sel_1 = sel_1_1604;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3773_sel_1 = sel_8421;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3773_sel_1 = sel_8420;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3773_sel_1 = sel_8419;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3773_sel_1 = sel_8418;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3773_sel_1 = sel_8417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3773_sel_1 = sel_8416;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3773_sel_1 = sel_8415;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3773_sel_1 = sel_8414;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3773_sel_1 = sel_8413;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3773_sel_1 = sel_8412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3773_sel_1 = sel_8411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3773_sel_1 = sel_8410;
        end
      default :
        begin
          p3773_sel_1 = sel_8428;
        end
    endcase
    sel_1_1605 = p3773_sel_1;
  end

  assign cont_bits_12_29 = cont_bits_12_26[sel_1_1605];

  assign sel_1_1606 = (tmp_15 == 1'b0 ? sel_1_1599 :
              cont_bits_12_29);

  assign sel_8429 = 32'sd0;

  assign sel_8430 = 32'sd0;

  assign sel_8431 = 32'sd0;

  assign sel_8432 = 32'sd0;

  assign sel_8433 = 32'sd0;

  assign sel_8434 = 32'sd0;

  assign sel_8435 = 32'sd0;

  assign sel_8436 = 32'sd0;

  assign sel_8437 = 32'sd0;

  assign sel_8438 = 32'sd0;

  assign sel_8439 = 32'sd0;

  assign sel_8440 = 32'sd0;

  assign sel_8441 = 32'sd0;

  assign sel_8442 = 32'sd0;

  assign sel_8443 = 32'sd0;

  assign s_523 = 32'sd1;

  assign sel_1_1607 = (tmp_17 == 1'b0 ? sel_8443 :
              s_523);

  assign sel_1_1608 = (s_10 == 1'b0 ? sel_8442 :
              sel_1_1607);

  assign sel_1_1609 = (s_11 == 1'b0 ? sel_8441 :
              sel_1_1608);

  assign sel_8444 = 32'sd0;

  assign sel_1_1610 = (s_12 == 1'b0 ? sel_1_1609 :
              sel_8444);

  assign sel_8445 = 32'sd0;

  assign sel_8446 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1610, sel_8429, sel_8430, sel_8431, sel_8432, sel_8433,
       sel_8434, sel_8435, sel_8436, sel_8437, sel_8438, sel_8439, sel_8440,
       sel_8445, sel_8446) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2753_sel_1 = sel_8445;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2753_sel_1 = sel_1_1610;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2753_sel_1 = sel_8440;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2753_sel_1 = sel_8439;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2753_sel_1 = sel_8438;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2753_sel_1 = sel_8437;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2753_sel_1 = sel_8436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2753_sel_1 = sel_8435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2753_sel_1 = sel_8434;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2753_sel_1 = sel_8433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2753_sel_1 = sel_8432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2753_sel_1 = sel_8431;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2753_sel_1 = sel_8430;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2753_sel_1 = sel_8429;
        end
      default :
        begin
          p2753_sel_1 = sel_8446;
        end
    endcase
    sel_1_1611 = p2753_sel_1;
  end

  assign cont_bits_34 = cont_bits_29[sel_1_1611];

  assign sel_1_1612 = (tmp_17 == 1'b0 ? sel_1_1606 :
              cont_bits_34);

  assign sel_8447 = 1'b0;

  assign sel_8448 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1_1537, sel_1_1612, sel_8116, sel_8117, sel_8118, sel_8119,
       sel_8120, sel_8121, sel_8122, sel_8123, sel_8124, sel_8125, sel_8126,
       sel_8447, sel_8448) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p691_sel_1 = sel_8447;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p691_sel_1 = sel_1_1612;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p691_sel_1 = sel_1_1537;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p691_sel_1 = sel_8126;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p691_sel_1 = sel_8125;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p691_sel_1 = sel_8124;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p691_sel_1 = sel_8123;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p691_sel_1 = sel_8122;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p691_sel_1 = sel_8121;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p691_sel_1 = sel_8120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p691_sel_1 = sel_8119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p691_sel_1 = sel_8118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p691_sel_1 = sel_8117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p691_sel_1 = sel_8116;
        end
      default :
        begin
          p691_sel_1 = sel_8448;
        end
    endcase
    sel_1_1613 = p691_sel_1;
  end

  assign sel_8449 = 1'b0;

  assign sel_8450 = 1'b0;

  assign sel_8451 = 1'b0;

  assign sel_8452 = 1'b0;

  assign sel_8453 = 1'b0;

  assign sel_8454 = 1'b0;

  assign sel_8455 = 1'b0;

  assign sel_8456 = 1'b0;

  assign sel_8457 = 1'b0;

  assign sel_8458 = 1'b0;

  assign sel_8459 = 1'b0;

  assign sel_8460 = 1'b0;

  assign s_524 = 1'b1;

  assign sel_2_1445 = (s_13 == 1'b0 ? sel_8460 :
              s_524);

  assign s_525 = 1'b1;

  assign sel_2_1446 = (s_14 == 1'b0 ? sel_2_1445 :
              s_525);

  assign s_526 = 1'b1;

  assign sel_2_1447 = (s_15 == 1'b0 ? sel_2_1446 :
              s_526);

  assign s_527 = 1'b1;

  assign sel_2_1448 = (s_16 == 1'b0 ? sel_2_1447 :
              s_527);

  assign s_528 = 1'b1;

  assign sel_2_1449 = (s_17 == 1'b0 ? sel_2_1448 :
              s_528);

  assign s_529 = 1'b1;

  assign sel_2_1450 = (s_18 == 1'b0 ? sel_2_1449 :
              s_529);

  assign s_530 = 1'b1;

  assign sel_2_1451 = (s_19 == 1'b0 ? sel_2_1450 :
              s_530);

  assign s_531 = 1'b1;

  assign sel_2_1452 = (s_20 == 1'b0 ? sel_2_1451 :
              s_531);

  assign sel_8461 = 1'b0;

  assign sel_8462 = 1'b0;

  assign sel_8463 = 1'b0;

  assign s_532 = 1'b1;

  assign sel_2_1453 = (tmp_3 == 1'b0 ? sel_8463 :
              s_532);

  assign s_533 = 1'b1;

  assign sel_2_1454 = (tmp_5 == 1'b0 ? sel_2_1453 :
              s_533);

  assign s_534 = 1'b1;

  assign sel_2_1455 = (tmp_7 == 1'b0 ? sel_2_1454 :
              s_534);

  assign s_535 = 1'b1;

  assign sel_2_1456 = (tmp_9 == 1'b0 ? sel_2_1455 :
              s_535);

  assign s_536 = 1'b1;

  assign sel_2_1457 = (tmp_11 == 1'b0 ? sel_2_1456 :
              s_536);

  assign s_537 = 1'b1;

  assign sel_2_1458 = (tmp_13 == 1'b0 ? sel_2_1457 :
              s_537);

  assign s_538 = 1'b1;

  assign sel_2_1459 = (tmp_15 == 1'b0 ? sel_2_1458 :
              s_538);

  assign s_539 = 1'b1;

  assign sel_2_1460 = (tmp_17 == 1'b0 ? sel_2_1459 :
              s_539);

  assign sel_2_1461 = (s_10 == 1'b0 ? sel_8462 :
              sel_2_1460);

  assign sel_2_1462 = (s_11 == 1'b0 ? sel_8461 :
              sel_2_1461);

  assign sel_8464 = 1'b0;

  assign sel_2_1463 = (s_12 == 1'b0 ? sel_2_1462 :
              sel_8464);

  assign sel_8465 = 1'b0;

  assign sel_8466 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1452, sel_2_1463, sel_8449, sel_8450, sel_8451, sel_8452,
       sel_8453, sel_8454, sel_8455, sel_8456, sel_8457, sel_8458, sel_8459,
       sel_8465, sel_8466) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p676_sel_2 = sel_8465;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p676_sel_2 = sel_2_1463;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p676_sel_2 = sel_2_1452;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p676_sel_2 = sel_8459;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p676_sel_2 = sel_8458;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p676_sel_2 = sel_8457;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p676_sel_2 = sel_8456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p676_sel_2 = sel_8455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p676_sel_2 = sel_8454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p676_sel_2 = sel_8453;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p676_sel_2 = sel_8452;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p676_sel_2 = sel_8451;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p676_sel_2 = sel_8450;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p676_sel_2 = sel_8449;
        end
      default :
        begin
          p676_sel_2 = sel_8466;
        end
    endcase
    sel_2_1464 = p676_sel_2;
  end

  assign sel_8467 = 1'b0;

  assign sel_8468 = 1'b0;

  assign sel_8469 = 1'b0;

  assign sel_8470 = 1'b0;

  assign sel_8471 = 1'b0;

  assign sel_8472 = 1'b0;

  assign sel_8473 = 1'b0;

  assign sel_8474 = 1'b0;

  assign sel_8475 = 1'b0;

  assign sel_8476 = 1'b0;

  assign sel_8477 = 1'b0;

  assign sel_8478 = 32'sd0;

  assign sel_8479 = 32'sd0;

  assign sel_8480 = 32'sd0;

  assign sel_8481 = 32'sd0;

  assign sel_8482 = 32'sd0;

  assign sel_8483 = 32'sd0;

  assign sel_8484 = 32'sd0;

  assign sel_8485 = 32'sd0;

  assign sel_8486 = 32'sd0;

  assign sel_8487 = 32'sd0;

  assign sel_8488 = 32'sd0;

  assign sel_8489 = 32'sd0;

  assign s_540 = 32'sd2;

  assign sel_1_1614 = (s_13 == 1'b0 ? sel_8489 :
              s_540);

  assign sel_8490 = 32'sd0;

  assign sel_1_1615 = (s_14 == 1'b0 ? sel_1_1614 :
              sel_8490);

  assign sel_8491 = 32'sd0;

  assign sel_1_1616 = (s_15 == 1'b0 ? sel_1_1615 :
              sel_8491);

  assign sel_8492 = 32'sd0;

  assign sel_1_1617 = (s_16 == 1'b0 ? sel_1_1616 :
              sel_8492);

  assign sel_8493 = 32'sd0;

  assign sel_1_1618 = (s_17 == 1'b0 ? sel_1_1617 :
              sel_8493);

  assign sel_8494 = 32'sd0;

  assign sel_1_1619 = (s_18 == 1'b0 ? sel_1_1618 :
              sel_8494);

  assign sel_8495 = 32'sd0;

  assign sel_1_1620 = (s_19 == 1'b0 ? sel_1_1619 :
              sel_8495);

  assign sel_8496 = 32'sd0;

  assign sel_1_1621 = (s_20 == 1'b0 ? sel_1_1620 :
              sel_8496);

  assign sel_8497 = 32'sd0;

  assign sel_8498 = 32'sd0;

  assign sel_8499 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1621, sel_8478, sel_8479, sel_8480, sel_8481, sel_8482,
       sel_8483, sel_8484, sel_8485, sel_8486, sel_8487, sel_8488, sel_8497,
       sel_8498, sel_8499) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2141_sel_1 = sel_8498;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2141_sel_1 = sel_8497;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2141_sel_1 = sel_1_1621;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2141_sel_1 = sel_8488;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2141_sel_1 = sel_8487;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2141_sel_1 = sel_8486;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2141_sel_1 = sel_8485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2141_sel_1 = sel_8484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2141_sel_1 = sel_8483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2141_sel_1 = sel_8482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2141_sel_1 = sel_8481;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2141_sel_1 = sel_8480;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2141_sel_1 = sel_8479;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2141_sel_1 = sel_8478;
        end
      default :
        begin
          p2141_sel_1 = sel_8499;
        end
    endcase
    sel_1_1622 = p2141_sel_1;
  end

  assign cont_bits_41_30 = cont_bits_41_12[sel_1_1622];

  assign sel_8500 = 32'sd0;

  assign sel_8501 = 32'sd0;

  assign sel_8502 = 32'sd0;

  assign sel_8503 = 32'sd0;

  assign sel_8504 = 32'sd0;

  assign sel_8505 = 32'sd0;

  assign sel_8506 = 32'sd0;

  assign sel_8507 = 32'sd0;

  assign sel_8508 = 32'sd0;

  assign sel_8509 = 32'sd0;

  assign sel_8510 = 32'sd0;

  assign sel_8511 = 32'sd0;

  assign s_541 = 32'sd2;

  assign sel_1_1623 = (s_14 == 1'b0 ? sel_8511 :
              s_541);

  assign sel_8512 = 32'sd0;

  assign sel_1_1624 = (s_15 == 1'b0 ? sel_1_1623 :
              sel_8512);

  assign sel_8513 = 32'sd0;

  assign sel_1_1625 = (s_16 == 1'b0 ? sel_1_1624 :
              sel_8513);

  assign sel_8514 = 32'sd0;

  assign sel_1_1626 = (s_17 == 1'b0 ? sel_1_1625 :
              sel_8514);

  assign sel_8515 = 32'sd0;

  assign sel_1_1627 = (s_18 == 1'b0 ? sel_1_1626 :
              sel_8515);

  assign sel_8516 = 32'sd0;

  assign sel_1_1628 = (s_19 == 1'b0 ? sel_1_1627 :
              sel_8516);

  assign sel_8517 = 32'sd0;

  assign sel_1_1629 = (s_20 == 1'b0 ? sel_1_1628 :
              sel_8517);

  assign sel_8518 = 32'sd0;

  assign sel_8519 = 32'sd0;

  assign sel_8520 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1629, sel_8500, sel_8501, sel_8502, sel_8503, sel_8504,
       sel_8505, sel_8506, sel_8507, sel_8508, sel_8509, sel_8510, sel_8518,
       sel_8519, sel_8520) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1359_sel_1 = sel_8519;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1359_sel_1 = sel_8518;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1359_sel_1 = sel_1_1629;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1359_sel_1 = sel_8510;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1359_sel_1 = sel_8509;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1359_sel_1 = sel_8508;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1359_sel_1 = sel_8507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1359_sel_1 = sel_8506;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1359_sel_1 = sel_8505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1359_sel_1 = sel_8504;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1359_sel_1 = sel_8503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1359_sel_1 = sel_8502;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1359_sel_1 = sel_8501;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1359_sel_1 = sel_8500;
        end
      default :
        begin
          p1359_sel_1 = sel_8520;
        end
    endcase
    sel_1_1630 = p1359_sel_1;
  end

  assign cont_bits_42_30 = cont_bits_42_12[sel_1_1630];

  assign sel_1_1631 = (s_14 == 1'b0 ? cont_bits_41_30 :
              cont_bits_42_30);

  assign sel_8521 = 32'sd0;

  assign sel_8522 = 32'sd0;

  assign sel_8523 = 32'sd0;

  assign sel_8524 = 32'sd0;

  assign sel_8525 = 32'sd0;

  assign sel_8526 = 32'sd0;

  assign sel_8527 = 32'sd0;

  assign sel_8528 = 32'sd0;

  assign sel_8529 = 32'sd0;

  assign sel_8530 = 32'sd0;

  assign sel_8531 = 32'sd0;

  assign sel_8532 = 32'sd0;

  assign s_542 = 32'sd2;

  assign sel_1_1632 = (s_15 == 1'b0 ? sel_8532 :
              s_542);

  assign sel_8533 = 32'sd0;

  assign sel_1_1633 = (s_16 == 1'b0 ? sel_1_1632 :
              sel_8533);

  assign sel_8534 = 32'sd0;

  assign sel_1_1634 = (s_17 == 1'b0 ? sel_1_1633 :
              sel_8534);

  assign sel_8535 = 32'sd0;

  assign sel_1_1635 = (s_18 == 1'b0 ? sel_1_1634 :
              sel_8535);

  assign sel_8536 = 32'sd0;

  assign sel_1_1636 = (s_19 == 1'b0 ? sel_1_1635 :
              sel_8536);

  assign sel_8537 = 32'sd0;

  assign sel_1_1637 = (s_20 == 1'b0 ? sel_1_1636 :
              sel_8537);

  assign sel_8538 = 32'sd0;

  assign sel_8539 = 32'sd0;

  assign sel_8540 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1637, sel_8521, sel_8522, sel_8523, sel_8524, sel_8525,
       sel_8526, sel_8527, sel_8528, sel_8529, sel_8530, sel_8531, sel_8538,
       sel_8539, sel_8540) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1580_sel_1 = sel_8539;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1580_sel_1 = sel_8538;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1580_sel_1 = sel_1_1637;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1580_sel_1 = sel_8531;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1580_sel_1 = sel_8530;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1580_sel_1 = sel_8529;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1580_sel_1 = sel_8528;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1580_sel_1 = sel_8527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1580_sel_1 = sel_8526;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1580_sel_1 = sel_8525;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1580_sel_1 = sel_8524;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1580_sel_1 = sel_8523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1580_sel_1 = sel_8522;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1580_sel_1 = sel_8521;
        end
      default :
        begin
          p1580_sel_1 = sel_8540;
        end
    endcase
    sel_1_1638 = p1580_sel_1;
  end

  assign cont_bits_32_30 = cont_bits_32_12[sel_1_1638];

  assign sel_1_1639 = (s_15 == 1'b0 ? sel_1_1631 :
              cont_bits_32_30);

  assign sel_8541 = 32'sd0;

  assign sel_8542 = 32'sd0;

  assign sel_8543 = 32'sd0;

  assign sel_8544 = 32'sd0;

  assign sel_8545 = 32'sd0;

  assign sel_8546 = 32'sd0;

  assign sel_8547 = 32'sd0;

  assign sel_8548 = 32'sd0;

  assign sel_8549 = 32'sd0;

  assign sel_8550 = 32'sd0;

  assign sel_8551 = 32'sd0;

  assign sel_8552 = 32'sd0;

  assign s_543 = 32'sd2;

  assign sel_1_1640 = (s_16 == 1'b0 ? sel_8552 :
              s_543);

  assign sel_8553 = 32'sd0;

  assign sel_1_1641 = (s_17 == 1'b0 ? sel_1_1640 :
              sel_8553);

  assign sel_8554 = 32'sd0;

  assign sel_1_1642 = (s_18 == 1'b0 ? sel_1_1641 :
              sel_8554);

  assign sel_8555 = 32'sd0;

  assign sel_1_1643 = (s_19 == 1'b0 ? sel_1_1642 :
              sel_8555);

  assign sel_8556 = 32'sd0;

  assign sel_1_1644 = (s_20 == 1'b0 ? sel_1_1643 :
              sel_8556);

  assign sel_8557 = 32'sd0;

  assign sel_8558 = 32'sd0;

  assign sel_8559 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1644, sel_8541, sel_8542, sel_8543, sel_8544, sel_8545,
       sel_8546, sel_8547, sel_8548, sel_8549, sel_8550, sel_8551, sel_8557,
       sel_8558, sel_8559) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1155_sel_1 = sel_8558;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1155_sel_1 = sel_8557;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1155_sel_1 = sel_1_1644;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1155_sel_1 = sel_8551;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1155_sel_1 = sel_8550;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1155_sel_1 = sel_8549;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1155_sel_1 = sel_8548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1155_sel_1 = sel_8547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1155_sel_1 = sel_8546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1155_sel_1 = sel_8545;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1155_sel_1 = sel_8544;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1155_sel_1 = sel_8543;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1155_sel_1 = sel_8542;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1155_sel_1 = sel_8541;
        end
      default :
        begin
          p1155_sel_1 = sel_8559;
        end
    endcase
    sel_1_1645 = p1155_sel_1;
  end

  assign cont_bits_31_30 = cont_bits_31_12[sel_1_1645];

  assign sel_1_1646 = (s_16 == 1'b0 ? sel_1_1639 :
              cont_bits_31_30);

  assign sel_8560 = 32'sd0;

  assign sel_8561 = 32'sd0;

  assign sel_8562 = 32'sd0;

  assign sel_8563 = 32'sd0;

  assign sel_8564 = 32'sd0;

  assign sel_8565 = 32'sd0;

  assign sel_8566 = 32'sd0;

  assign sel_8567 = 32'sd0;

  assign sel_8568 = 32'sd0;

  assign sel_8569 = 32'sd0;

  assign sel_8570 = 32'sd0;

  assign sel_8571 = 32'sd0;

  assign s_544 = 32'sd2;

  assign sel_1_1647 = (s_17 == 1'b0 ? sel_8571 :
              s_544);

  assign sel_8572 = 32'sd0;

  assign sel_1_1648 = (s_18 == 1'b0 ? sel_1_1647 :
              sel_8572);

  assign sel_8573 = 32'sd0;

  assign sel_1_1649 = (s_19 == 1'b0 ? sel_1_1648 :
              sel_8573);

  assign sel_8574 = 32'sd0;

  assign sel_1_1650 = (s_20 == 1'b0 ? sel_1_1649 :
              sel_8574);

  assign sel_8575 = 32'sd0;

  assign sel_8576 = 32'sd0;

  assign sel_8577 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1650, sel_8560, sel_8561, sel_8562, sel_8563, sel_8564,
       sel_8565, sel_8566, sel_8567, sel_8568, sel_8569, sel_8570, sel_8575,
       sel_8576, sel_8577) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1920_sel_1 = sel_8576;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1920_sel_1 = sel_8575;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1920_sel_1 = sel_1_1650;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1920_sel_1 = sel_8570;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1920_sel_1 = sel_8569;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1920_sel_1 = sel_8568;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1920_sel_1 = sel_8567;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1920_sel_1 = sel_8566;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1920_sel_1 = sel_8565;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1920_sel_1 = sel_8564;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1920_sel_1 = sel_8563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1920_sel_1 = sel_8562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1920_sel_1 = sel_8561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1920_sel_1 = sel_8560;
        end
      default :
        begin
          p1920_sel_1 = sel_8577;
        end
    endcase
    sel_1_1651 = p1920_sel_1;
  end

  assign cont_bits_22_30 = cont_bits_22_12[sel_1_1651];

  assign sel_1_1652 = (s_17 == 1'b0 ? sel_1_1646 :
              cont_bits_22_30);

  assign sel_8578 = 32'sd0;

  assign sel_8579 = 32'sd0;

  assign sel_8580 = 32'sd0;

  assign sel_8581 = 32'sd0;

  assign sel_8582 = 32'sd0;

  assign sel_8583 = 32'sd0;

  assign sel_8584 = 32'sd0;

  assign sel_8585 = 32'sd0;

  assign sel_8586 = 32'sd0;

  assign sel_8587 = 32'sd0;

  assign sel_8588 = 32'sd0;

  assign sel_8589 = 32'sd0;

  assign s_545 = 32'sd2;

  assign sel_1_1653 = (s_18 == 1'b0 ? sel_8589 :
              s_545);

  assign sel_8590 = 32'sd0;

  assign sel_1_1654 = (s_19 == 1'b0 ? sel_1_1653 :
              sel_8590);

  assign sel_8591 = 32'sd0;

  assign sel_1_1655 = (s_20 == 1'b0 ? sel_1_1654 :
              sel_8591);

  assign sel_8592 = 32'sd0;

  assign sel_8593 = 32'sd0;

  assign sel_8594 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1655, sel_8578, sel_8579, sel_8580, sel_8581, sel_8582,
       sel_8583, sel_8584, sel_8585, sel_8586, sel_8587, sel_8588, sel_8592,
       sel_8593, sel_8594) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2430_sel_1 = sel_8593;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2430_sel_1 = sel_8592;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2430_sel_1 = sel_1_1655;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2430_sel_1 = sel_8588;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2430_sel_1 = sel_8587;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2430_sel_1 = sel_8586;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2430_sel_1 = sel_8585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2430_sel_1 = sel_8584;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2430_sel_1 = sel_8583;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2430_sel_1 = sel_8582;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2430_sel_1 = sel_8581;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2430_sel_1 = sel_8580;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2430_sel_1 = sel_8579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2430_sel_1 = sel_8578;
        end
      default :
        begin
          p2430_sel_1 = sel_8594;
        end
    endcase
    sel_1_1656 = p2430_sel_1;
  end

  assign cont_bits_21_30 = cont_bits_21_12[sel_1_1656];

  assign sel_1_1657 = (s_18 == 1'b0 ? sel_1_1652 :
              cont_bits_21_30);

  assign sel_8595 = 32'sd0;

  assign sel_8596 = 32'sd0;

  assign sel_8597 = 32'sd0;

  assign sel_8598 = 32'sd0;

  assign sel_8599 = 32'sd0;

  assign sel_8600 = 32'sd0;

  assign sel_8601 = 32'sd0;

  assign sel_8602 = 32'sd0;

  assign sel_8603 = 32'sd0;

  assign sel_8604 = 32'sd0;

  assign sel_8605 = 32'sd0;

  assign sel_8606 = 32'sd0;

  assign s_546 = 32'sd2;

  assign sel_1_1658 = (s_19 == 1'b0 ? sel_8606 :
              s_546);

  assign sel_8607 = 32'sd0;

  assign sel_1_1659 = (s_20 == 1'b0 ? sel_1_1658 :
              sel_8607);

  assign sel_8608 = 32'sd0;

  assign sel_8609 = 32'sd0;

  assign sel_8610 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1659, sel_8595, sel_8596, sel_8597, sel_8598, sel_8599,
       sel_8600, sel_8601, sel_8602, sel_8603, sel_8604, sel_8605, sel_8608,
       sel_8609, sel_8610) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1529_sel_1 = sel_8609;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1529_sel_1 = sel_8608;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1529_sel_1 = sel_1_1659;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1529_sel_1 = sel_8605;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1529_sel_1 = sel_8604;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1529_sel_1 = sel_8603;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1529_sel_1 = sel_8602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1529_sel_1 = sel_8601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1529_sel_1 = sel_8600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1529_sel_1 = sel_8599;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1529_sel_1 = sel_8598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1529_sel_1 = sel_8597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1529_sel_1 = sel_8596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1529_sel_1 = sel_8595;
        end
      default :
        begin
          p1529_sel_1 = sel_8610;
        end
    endcase
    sel_1_1660 = p1529_sel_1;
  end

  assign cont_bits_12_30 = cont_bits_12_12[sel_1_1660];

  assign sel_1_1661 = (s_19 == 1'b0 ? sel_1_1657 :
              cont_bits_12_30);

  assign sel_8611 = 32'sd0;

  assign sel_8612 = 32'sd0;

  assign sel_8613 = 32'sd0;

  assign sel_8614 = 32'sd0;

  assign sel_8615 = 32'sd0;

  assign sel_8616 = 32'sd0;

  assign sel_8617 = 32'sd0;

  assign sel_8618 = 32'sd0;

  assign sel_8619 = 32'sd0;

  assign sel_8620 = 32'sd0;

  assign sel_8621 = 32'sd0;

  assign sel_8622 = 32'sd0;

  assign s_547 = 32'sd2;

  assign sel_1_1662 = (s_20 == 1'b0 ? sel_8622 :
              s_547);

  assign sel_8623 = 32'sd0;

  assign sel_8624 = 32'sd0;

  assign sel_8625 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1662, sel_8611, sel_8612, sel_8613, sel_8614, sel_8615,
       sel_8616, sel_8617, sel_8618, sel_8619, sel_8620, sel_8621, sel_8623,
       sel_8624, sel_8625) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2277_sel_1 = sel_8624;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2277_sel_1 = sel_8623;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2277_sel_1 = sel_1_1662;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2277_sel_1 = sel_8621;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2277_sel_1 = sel_8620;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2277_sel_1 = sel_8619;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2277_sel_1 = sel_8618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2277_sel_1 = sel_8617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2277_sel_1 = sel_8616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2277_sel_1 = sel_8615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2277_sel_1 = sel_8614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2277_sel_1 = sel_8613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2277_sel_1 = sel_8612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2277_sel_1 = sel_8611;
        end
      default :
        begin
          p2277_sel_1 = sel_8625;
        end
    endcase
    sel_1_1663 = p2277_sel_1;
  end

  assign cont_bits_35 = cont_bits_13[sel_1_1663];

  assign sel_1_1664 = (s_20 == 1'b0 ? sel_1_1661 :
              cont_bits_35);

  assign sel_8626 = 32'sd0;

  assign sel_8627 = 32'sd0;

  assign sel_8628 = 32'sd0;

  assign sel_8629 = 32'sd0;

  assign sel_8630 = 32'sd0;

  assign sel_8631 = 32'sd0;

  assign sel_8632 = 32'sd0;

  assign sel_8633 = 32'sd0;

  assign sel_8634 = 32'sd0;

  assign sel_8635 = 32'sd0;

  assign sel_8636 = 32'sd0;

  assign sel_8637 = 32'sd0;

  assign sel_8638 = 32'sd0;

  assign sel_8639 = 32'sd0;

  assign sel_8640 = 32'sd0;

  assign s_548 = 32'sd2;

  assign sel_1_1665 = (tmp_3 == 1'b0 ? sel_8640 :
              s_548);

  assign sel_8641 = 32'sd0;

  assign sel_1_1666 = (tmp_5 == 1'b0 ? sel_1_1665 :
              sel_8641);

  assign sel_8642 = 32'sd0;

  assign sel_1_1667 = (tmp_7 == 1'b0 ? sel_1_1666 :
              sel_8642);

  assign sel_8643 = 32'sd0;

  assign sel_1_1668 = (tmp_9 == 1'b0 ? sel_1_1667 :
              sel_8643);

  assign sel_8644 = 32'sd0;

  assign sel_1_1669 = (tmp_11 == 1'b0 ? sel_1_1668 :
              sel_8644);

  assign sel_8645 = 32'sd0;

  assign sel_1_1670 = (tmp_13 == 1'b0 ? sel_1_1669 :
              sel_8645);

  assign sel_8646 = 32'sd0;

  assign sel_1_1671 = (tmp_15 == 1'b0 ? sel_1_1670 :
              sel_8646);

  assign sel_8647 = 32'sd0;

  assign sel_1_1672 = (tmp_17 == 1'b0 ? sel_1_1671 :
              sel_8647);

  assign sel_1_1673 = (s_10 == 1'b0 ? sel_8639 :
              sel_1_1672);

  assign sel_1_1674 = (s_11 == 1'b0 ? sel_8638 :
              sel_1_1673);

  assign sel_8648 = 32'sd0;

  assign sel_1_1675 = (s_12 == 1'b0 ? sel_1_1674 :
              sel_8648);

  assign sel_8649 = 32'sd0;

  assign sel_8650 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1675, sel_8626, sel_8627, sel_8628, sel_8629, sel_8630,
       sel_8631, sel_8632, sel_8633, sel_8634, sel_8635, sel_8636, sel_8637,
       sel_8649, sel_8650) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3348_sel_1 = sel_8649;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3348_sel_1 = sel_1_1675;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3348_sel_1 = sel_8637;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3348_sel_1 = sel_8636;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3348_sel_1 = sel_8635;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3348_sel_1 = sel_8634;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3348_sel_1 = sel_8633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3348_sel_1 = sel_8632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3348_sel_1 = sel_8631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3348_sel_1 = sel_8630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3348_sel_1 = sel_8629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3348_sel_1 = sel_8628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3348_sel_1 = sel_8627;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3348_sel_1 = sel_8626;
        end
      default :
        begin
          p3348_sel_1 = sel_8650;
        end
    endcase
    sel_1_1676 = p3348_sel_1;
  end

  assign cont_bits_41_31 = cont_bits_41_26[sel_1_1676];

  assign sel_8651 = 32'sd0;

  assign sel_8652 = 32'sd0;

  assign sel_8653 = 32'sd0;

  assign sel_8654 = 32'sd0;

  assign sel_8655 = 32'sd0;

  assign sel_8656 = 32'sd0;

  assign sel_8657 = 32'sd0;

  assign sel_8658 = 32'sd0;

  assign sel_8659 = 32'sd0;

  assign sel_8660 = 32'sd0;

  assign sel_8661 = 32'sd0;

  assign sel_8662 = 32'sd0;

  assign sel_8663 = 32'sd0;

  assign sel_8664 = 32'sd0;

  assign sel_8665 = 32'sd0;

  assign s_549 = 32'sd2;

  assign sel_1_1677 = (tmp_5 == 1'b0 ? sel_8665 :
              s_549);

  assign sel_8666 = 32'sd0;

  assign sel_1_1678 = (tmp_7 == 1'b0 ? sel_1_1677 :
              sel_8666);

  assign sel_8667 = 32'sd0;

  assign sel_1_1679 = (tmp_9 == 1'b0 ? sel_1_1678 :
              sel_8667);

  assign sel_8668 = 32'sd0;

  assign sel_1_1680 = (tmp_11 == 1'b0 ? sel_1_1679 :
              sel_8668);

  assign sel_8669 = 32'sd0;

  assign sel_1_1681 = (tmp_13 == 1'b0 ? sel_1_1680 :
              sel_8669);

  assign sel_8670 = 32'sd0;

  assign sel_1_1682 = (tmp_15 == 1'b0 ? sel_1_1681 :
              sel_8670);

  assign sel_8671 = 32'sd0;

  assign sel_1_1683 = (tmp_17 == 1'b0 ? sel_1_1682 :
              sel_8671);

  assign sel_1_1684 = (s_10 == 1'b0 ? sel_8664 :
              sel_1_1683);

  assign sel_1_1685 = (s_11 == 1'b0 ? sel_8663 :
              sel_1_1684);

  assign sel_8672 = 32'sd0;

  assign sel_1_1686 = (s_12 == 1'b0 ? sel_1_1685 :
              sel_8672);

  assign sel_8673 = 32'sd0;

  assign sel_8674 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1686, sel_8651, sel_8652, sel_8653, sel_8654, sel_8655,
       sel_8656, sel_8657, sel_8658, sel_8659, sel_8660, sel_8661, sel_8662,
       sel_8673, sel_8674) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2923_sel_1 = sel_8673;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2923_sel_1 = sel_1_1686;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2923_sel_1 = sel_8662;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2923_sel_1 = sel_8661;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2923_sel_1 = sel_8660;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2923_sel_1 = sel_8659;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2923_sel_1 = sel_8658;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2923_sel_1 = sel_8657;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2923_sel_1 = sel_8656;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2923_sel_1 = sel_8655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2923_sel_1 = sel_8654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2923_sel_1 = sel_8653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2923_sel_1 = sel_8652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2923_sel_1 = sel_8651;
        end
      default :
        begin
          p2923_sel_1 = sel_8674;
        end
    endcase
    sel_1_1687 = p2923_sel_1;
  end

  assign cont_bits_42_31 = cont_bits_42_26[sel_1_1687];

  assign sel_1_1688 = (tmp_5 == 1'b0 ? cont_bits_41_31 :
              cont_bits_42_31);

  assign sel_8675 = 32'sd0;

  assign sel_8676 = 32'sd0;

  assign sel_8677 = 32'sd0;

  assign sel_8678 = 32'sd0;

  assign sel_8679 = 32'sd0;

  assign sel_8680 = 32'sd0;

  assign sel_8681 = 32'sd0;

  assign sel_8682 = 32'sd0;

  assign sel_8683 = 32'sd0;

  assign sel_8684 = 32'sd0;

  assign sel_8685 = 32'sd0;

  assign sel_8686 = 32'sd0;

  assign sel_8687 = 32'sd0;

  assign sel_8688 = 32'sd0;

  assign sel_8689 = 32'sd0;

  assign s_550 = 32'sd2;

  assign sel_1_1689 = (tmp_7 == 1'b0 ? sel_8689 :
              s_550);

  assign sel_8690 = 32'sd0;

  assign sel_1_1690 = (tmp_9 == 1'b0 ? sel_1_1689 :
              sel_8690);

  assign sel_8691 = 32'sd0;

  assign sel_1_1691 = (tmp_11 == 1'b0 ? sel_1_1690 :
              sel_8691);

  assign sel_8692 = 32'sd0;

  assign sel_1_1692 = (tmp_13 == 1'b0 ? sel_1_1691 :
              sel_8692);

  assign sel_8693 = 32'sd0;

  assign sel_1_1693 = (tmp_15 == 1'b0 ? sel_1_1692 :
              sel_8693);

  assign sel_8694 = 32'sd0;

  assign sel_1_1694 = (tmp_17 == 1'b0 ? sel_1_1693 :
              sel_8694);

  assign sel_1_1695 = (s_10 == 1'b0 ? sel_8688 :
              sel_1_1694);

  assign sel_1_1696 = (s_11 == 1'b0 ? sel_8687 :
              sel_1_1695);

  assign sel_8695 = 32'sd0;

  assign sel_1_1697 = (s_12 == 1'b0 ? sel_1_1696 :
              sel_8695);

  assign sel_8696 = 32'sd0;

  assign sel_8697 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1697, sel_8675, sel_8676, sel_8677, sel_8678, sel_8679,
       sel_8680, sel_8681, sel_8682, sel_8683, sel_8684, sel_8685, sel_8686,
       sel_8696, sel_8697) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3467_sel_1 = sel_8696;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3467_sel_1 = sel_1_1697;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3467_sel_1 = sel_8686;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3467_sel_1 = sel_8685;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3467_sel_1 = sel_8684;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3467_sel_1 = sel_8683;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3467_sel_1 = sel_8682;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3467_sel_1 = sel_8681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3467_sel_1 = sel_8680;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3467_sel_1 = sel_8679;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3467_sel_1 = sel_8678;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3467_sel_1 = sel_8677;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3467_sel_1 = sel_8676;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3467_sel_1 = sel_8675;
        end
      default :
        begin
          p3467_sel_1 = sel_8697;
        end
    endcase
    sel_1_1698 = p3467_sel_1;
  end

  assign cont_bits_32_31 = cont_bits_32_26[sel_1_1698];

  assign sel_1_1699 = (tmp_7 == 1'b0 ? sel_1_1688 :
              cont_bits_32_31);

  assign sel_8698 = 32'sd0;

  assign sel_8699 = 32'sd0;

  assign sel_8700 = 32'sd0;

  assign sel_8701 = 32'sd0;

  assign sel_8702 = 32'sd0;

  assign sel_8703 = 32'sd0;

  assign sel_8704 = 32'sd0;

  assign sel_8705 = 32'sd0;

  assign sel_8706 = 32'sd0;

  assign sel_8707 = 32'sd0;

  assign sel_8708 = 32'sd0;

  assign sel_8709 = 32'sd0;

  assign sel_8710 = 32'sd0;

  assign sel_8711 = 32'sd0;

  assign sel_8712 = 32'sd0;

  assign s_551 = 32'sd2;

  assign sel_1_1700 = (tmp_9 == 1'b0 ? sel_8712 :
              s_551);

  assign sel_8713 = 32'sd0;

  assign sel_1_1701 = (tmp_11 == 1'b0 ? sel_1_1700 :
              sel_8713);

  assign sel_8714 = 32'sd0;

  assign sel_1_1702 = (tmp_13 == 1'b0 ? sel_1_1701 :
              sel_8714);

  assign sel_8715 = 32'sd0;

  assign sel_1_1703 = (tmp_15 == 1'b0 ? sel_1_1702 :
              sel_8715);

  assign sel_8716 = 32'sd0;

  assign sel_1_1704 = (tmp_17 == 1'b0 ? sel_1_1703 :
              sel_8716);

  assign sel_1_1705 = (s_10 == 1'b0 ? sel_8711 :
              sel_1_1704);

  assign sel_1_1706 = (s_11 == 1'b0 ? sel_8710 :
              sel_1_1705);

  assign sel_8717 = 32'sd0;

  assign sel_1_1707 = (s_12 == 1'b0 ? sel_1_1706 :
              sel_8717);

  assign sel_8718 = 32'sd0;

  assign sel_8719 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1707, sel_8698, sel_8699, sel_8700, sel_8701, sel_8702,
       sel_8703, sel_8704, sel_8705, sel_8706, sel_8707, sel_8708, sel_8709,
       sel_8718, sel_8719) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4079_sel_1 = sel_8718;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4079_sel_1 = sel_1_1707;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4079_sel_1 = sel_8709;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4079_sel_1 = sel_8708;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4079_sel_1 = sel_8707;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4079_sel_1 = sel_8706;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4079_sel_1 = sel_8705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4079_sel_1 = sel_8704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4079_sel_1 = sel_8703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4079_sel_1 = sel_8702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4079_sel_1 = sel_8701;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4079_sel_1 = sel_8700;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4079_sel_1 = sel_8699;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4079_sel_1 = sel_8698;
        end
      default :
        begin
          p4079_sel_1 = sel_8719;
        end
    endcase
    sel_1_1708 = p4079_sel_1;
  end

  assign cont_bits_31_31 = cont_bits_31_26[sel_1_1708];

  assign sel_1_1709 = (tmp_9 == 1'b0 ? sel_1_1699 :
              cont_bits_31_31);

  assign sel_8720 = 32'sd0;

  assign sel_8721 = 32'sd0;

  assign sel_8722 = 32'sd0;

  assign sel_8723 = 32'sd0;

  assign sel_8724 = 32'sd0;

  assign sel_8725 = 32'sd0;

  assign sel_8726 = 32'sd0;

  assign sel_8727 = 32'sd0;

  assign sel_8728 = 32'sd0;

  assign sel_8729 = 32'sd0;

  assign sel_8730 = 32'sd0;

  assign sel_8731 = 32'sd0;

  assign sel_8732 = 32'sd0;

  assign sel_8733 = 32'sd0;

  assign sel_8734 = 32'sd0;

  assign s_552 = 32'sd2;

  assign sel_1_1710 = (tmp_11 == 1'b0 ? sel_8734 :
              s_552);

  assign sel_8735 = 32'sd0;

  assign sel_1_1711 = (tmp_13 == 1'b0 ? sel_1_1710 :
              sel_8735);

  assign sel_8736 = 32'sd0;

  assign sel_1_1712 = (tmp_15 == 1'b0 ? sel_1_1711 :
              sel_8736);

  assign sel_8737 = 32'sd0;

  assign sel_1_1713 = (tmp_17 == 1'b0 ? sel_1_1712 :
              sel_8737);

  assign sel_1_1714 = (s_10 == 1'b0 ? sel_8733 :
              sel_1_1713);

  assign sel_1_1715 = (s_11 == 1'b0 ? sel_8732 :
              sel_1_1714);

  assign sel_8738 = 32'sd0;

  assign sel_1_1716 = (s_12 == 1'b0 ? sel_1_1715 :
              sel_8738);

  assign sel_8739 = 32'sd0;

  assign sel_8740 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1716, sel_8720, sel_8721, sel_8722, sel_8723, sel_8724,
       sel_8725, sel_8726, sel_8727, sel_8728, sel_8729, sel_8730, sel_8731,
       sel_8739, sel_8740) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3858_sel_1 = sel_8739;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3858_sel_1 = sel_1_1716;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3858_sel_1 = sel_8731;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3858_sel_1 = sel_8730;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3858_sel_1 = sel_8729;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3858_sel_1 = sel_8728;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3858_sel_1 = sel_8727;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3858_sel_1 = sel_8726;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3858_sel_1 = sel_8725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3858_sel_1 = sel_8724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3858_sel_1 = sel_8723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3858_sel_1 = sel_8722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3858_sel_1 = sel_8721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3858_sel_1 = sel_8720;
        end
      default :
        begin
          p3858_sel_1 = sel_8740;
        end
    endcase
    sel_1_1717 = p3858_sel_1;
  end

  assign cont_bits_22_31 = cont_bits_22_26[sel_1_1717];

  assign sel_1_1718 = (tmp_11 == 1'b0 ? sel_1_1709 :
              cont_bits_22_31);

  assign sel_8741 = 32'sd0;

  assign sel_8742 = 32'sd0;

  assign sel_8743 = 32'sd0;

  assign sel_8744 = 32'sd0;

  assign sel_8745 = 32'sd0;

  assign sel_8746 = 32'sd0;

  assign sel_8747 = 32'sd0;

  assign sel_8748 = 32'sd0;

  assign sel_8749 = 32'sd0;

  assign sel_8750 = 32'sd0;

  assign sel_8751 = 32'sd0;

  assign sel_8752 = 32'sd0;

  assign sel_8753 = 32'sd0;

  assign sel_8754 = 32'sd0;

  assign sel_8755 = 32'sd0;

  assign s_553 = 32'sd2;

  assign sel_1_1719 = (tmp_13 == 1'b0 ? sel_8755 :
              s_553);

  assign sel_8756 = 32'sd0;

  assign sel_1_1720 = (tmp_15 == 1'b0 ? sel_1_1719 :
              sel_8756);

  assign sel_8757 = 32'sd0;

  assign sel_1_1721 = (tmp_17 == 1'b0 ? sel_1_1720 :
              sel_8757);

  assign sel_1_1722 = (s_10 == 1'b0 ? sel_8754 :
              sel_1_1721);

  assign sel_1_1723 = (s_11 == 1'b0 ? sel_8753 :
              sel_1_1722);

  assign sel_8758 = 32'sd0;

  assign sel_1_1724 = (s_12 == 1'b0 ? sel_1_1723 :
              sel_8758);

  assign sel_8759 = 32'sd0;

  assign sel_8760 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1724, sel_8741, sel_8742, sel_8743, sel_8744, sel_8745,
       sel_8746, sel_8747, sel_8748, sel_8749, sel_8750, sel_8751, sel_8752,
       sel_8759, sel_8760) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3059_sel_1 = sel_8759;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3059_sel_1 = sel_1_1724;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3059_sel_1 = sel_8752;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3059_sel_1 = sel_8751;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3059_sel_1 = sel_8750;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3059_sel_1 = sel_8749;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3059_sel_1 = sel_8748;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3059_sel_1 = sel_8747;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3059_sel_1 = sel_8746;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3059_sel_1 = sel_8745;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3059_sel_1 = sel_8744;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3059_sel_1 = sel_8743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3059_sel_1 = sel_8742;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3059_sel_1 = sel_8741;
        end
      default :
        begin
          p3059_sel_1 = sel_8760;
        end
    endcase
    sel_1_1725 = p3059_sel_1;
  end

  assign cont_bits_21_31 = cont_bits_21_26[sel_1_1725];

  assign sel_1_1726 = (tmp_13 == 1'b0 ? sel_1_1718 :
              cont_bits_21_31);

  assign sel_8761 = 32'sd0;

  assign sel_8762 = 32'sd0;

  assign sel_8763 = 32'sd0;

  assign sel_8764 = 32'sd0;

  assign sel_8765 = 32'sd0;

  assign sel_8766 = 32'sd0;

  assign sel_8767 = 32'sd0;

  assign sel_8768 = 32'sd0;

  assign sel_8769 = 32'sd0;

  assign sel_8770 = 32'sd0;

  assign sel_8771 = 32'sd0;

  assign sel_8772 = 32'sd0;

  assign sel_8773 = 32'sd0;

  assign sel_8774 = 32'sd0;

  assign sel_8775 = 32'sd0;

  assign s_554 = 32'sd2;

  assign sel_1_1727 = (tmp_15 == 1'b0 ? sel_8775 :
              s_554);

  assign sel_8776 = 32'sd0;

  assign sel_1_1728 = (tmp_17 == 1'b0 ? sel_1_1727 :
              sel_8776);

  assign sel_1_1729 = (s_10 == 1'b0 ? sel_8774 :
              sel_1_1728);

  assign sel_1_1730 = (s_11 == 1'b0 ? sel_8773 :
              sel_1_1729);

  assign sel_8777 = 32'sd0;

  assign sel_1_1731 = (s_12 == 1'b0 ? sel_1_1730 :
              sel_8777);

  assign sel_8778 = 32'sd0;

  assign sel_8779 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1731, sel_8761, sel_8762, sel_8763, sel_8764, sel_8765,
       sel_8766, sel_8767, sel_8768, sel_8769, sel_8770, sel_8771, sel_8772,
       sel_8778, sel_8779) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3790_sel_1 = sel_8778;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3790_sel_1 = sel_1_1731;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3790_sel_1 = sel_8772;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3790_sel_1 = sel_8771;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3790_sel_1 = sel_8770;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3790_sel_1 = sel_8769;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3790_sel_1 = sel_8768;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3790_sel_1 = sel_8767;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3790_sel_1 = sel_8766;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3790_sel_1 = sel_8765;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3790_sel_1 = sel_8764;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3790_sel_1 = sel_8763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3790_sel_1 = sel_8762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3790_sel_1 = sel_8761;
        end
      default :
        begin
          p3790_sel_1 = sel_8779;
        end
    endcase
    sel_1_1732 = p3790_sel_1;
  end

  assign cont_bits_12_31 = cont_bits_12_26[sel_1_1732];

  assign sel_1_1733 = (tmp_15 == 1'b0 ? sel_1_1726 :
              cont_bits_12_31);

  assign sel_8780 = 32'sd0;

  assign sel_8781 = 32'sd0;

  assign sel_8782 = 32'sd0;

  assign sel_8783 = 32'sd0;

  assign sel_8784 = 32'sd0;

  assign sel_8785 = 32'sd0;

  assign sel_8786 = 32'sd0;

  assign sel_8787 = 32'sd0;

  assign sel_8788 = 32'sd0;

  assign sel_8789 = 32'sd0;

  assign sel_8790 = 32'sd0;

  assign sel_8791 = 32'sd0;

  assign sel_8792 = 32'sd0;

  assign sel_8793 = 32'sd0;

  assign sel_8794 = 32'sd0;

  assign s_555 = 32'sd2;

  assign sel_1_1734 = (tmp_17 == 1'b0 ? sel_8794 :
              s_555);

  assign sel_1_1735 = (s_10 == 1'b0 ? sel_8793 :
              sel_1_1734);

  assign sel_1_1736 = (s_11 == 1'b0 ? sel_8792 :
              sel_1_1735);

  assign sel_8795 = 32'sd0;

  assign sel_1_1737 = (s_12 == 1'b0 ? sel_1_1736 :
              sel_8795);

  assign sel_8796 = 32'sd0;

  assign sel_8797 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1737, sel_8780, sel_8781, sel_8782, sel_8783, sel_8784,
       sel_8785, sel_8786, sel_8787, sel_8788, sel_8789, sel_8790, sel_8791,
       sel_8796, sel_8797) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2770_sel_1 = sel_8796;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2770_sel_1 = sel_1_1737;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2770_sel_1 = sel_8791;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2770_sel_1 = sel_8790;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2770_sel_1 = sel_8789;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2770_sel_1 = sel_8788;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2770_sel_1 = sel_8787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2770_sel_1 = sel_8786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2770_sel_1 = sel_8785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2770_sel_1 = sel_8784;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2770_sel_1 = sel_8783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2770_sel_1 = sel_8782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2770_sel_1 = sel_8781;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2770_sel_1 = sel_8780;
        end
      default :
        begin
          p2770_sel_1 = sel_8797;
        end
    endcase
    sel_1_1738 = p2770_sel_1;
  end

  assign cont_bits_36 = cont_bits_29[sel_1_1738];

  assign sel_1_1739 = (tmp_17 == 1'b0 ? sel_1_1733 :
              cont_bits_36);

  assign sel_8798 = 1'b0;

  assign sel_8799 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1_1664, sel_1_1739, sel_8467, sel_8468, sel_8469, sel_8470,
       sel_8471, sel_8472, sel_8473, sel_8474, sel_8475, sel_8476, sel_8477,
       sel_8798, sel_8799) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p599_sel_1 = sel_8798;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p599_sel_1 = sel_1_1739;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p599_sel_1 = sel_1_1664;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p599_sel_1 = sel_8477;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p599_sel_1 = sel_8476;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p599_sel_1 = sel_8475;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p599_sel_1 = sel_8474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p599_sel_1 = sel_8473;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p599_sel_1 = sel_8472;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p599_sel_1 = sel_8471;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p599_sel_1 = sel_8470;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p599_sel_1 = sel_8469;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p599_sel_1 = sel_8468;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p599_sel_1 = sel_8467;
        end
      default :
        begin
          p599_sel_1 = sel_8799;
        end
    endcase
    sel_1_1740 = p599_sel_1;
  end

  assign sel_8800 = 1'b0;

  assign sel_8801 = 1'b0;

  assign sel_8802 = 1'b0;

  assign sel_8803 = 1'b0;

  assign sel_8804 = 1'b0;

  assign sel_8805 = 1'b0;

  assign sel_8806 = 1'b0;

  assign sel_8807 = 1'b0;

  assign sel_8808 = 1'b0;

  assign sel_8809 = 1'b0;

  assign sel_8810 = 1'b0;

  assign sel_8811 = 1'b0;

  assign s_556 = 1'b1;

  assign sel_2_1465 = (s_13 == 1'b0 ? sel_8811 :
              s_556);

  assign s_557 = 1'b1;

  assign sel_2_1466 = (s_14 == 1'b0 ? sel_2_1465 :
              s_557);

  assign s_558 = 1'b1;

  assign sel_2_1467 = (s_15 == 1'b0 ? sel_2_1466 :
              s_558);

  assign s_559 = 1'b1;

  assign sel_2_1468 = (s_16 == 1'b0 ? sel_2_1467 :
              s_559);

  assign s_560 = 1'b1;

  assign sel_2_1469 = (s_17 == 1'b0 ? sel_2_1468 :
              s_560);

  assign s_561 = 1'b1;

  assign sel_2_1470 = (s_18 == 1'b0 ? sel_2_1469 :
              s_561);

  assign s_562 = 1'b1;

  assign sel_2_1471 = (s_19 == 1'b0 ? sel_2_1470 :
              s_562);

  assign s_563 = 1'b1;

  assign sel_2_1472 = (s_20 == 1'b0 ? sel_2_1471 :
              s_563);

  assign sel_8812 = 1'b0;

  assign sel_8813 = 1'b0;

  assign sel_8814 = 1'b0;

  assign s_564 = 1'b1;

  assign sel_2_1473 = (tmp_3 == 1'b0 ? sel_8814 :
              s_564);

  assign s_565 = 1'b1;

  assign sel_2_1474 = (tmp_5 == 1'b0 ? sel_2_1473 :
              s_565);

  assign s_566 = 1'b1;

  assign sel_2_1475 = (tmp_7 == 1'b0 ? sel_2_1474 :
              s_566);

  assign s_567 = 1'b1;

  assign sel_2_1476 = (tmp_9 == 1'b0 ? sel_2_1475 :
              s_567);

  assign s_568 = 1'b1;

  assign sel_2_1477 = (tmp_11 == 1'b0 ? sel_2_1476 :
              s_568);

  assign s_569 = 1'b1;

  assign sel_2_1478 = (tmp_13 == 1'b0 ? sel_2_1477 :
              s_569);

  assign s_570 = 1'b1;

  assign sel_2_1479 = (tmp_15 == 1'b0 ? sel_2_1478 :
              s_570);

  assign s_571 = 1'b1;

  assign sel_2_1480 = (tmp_17 == 1'b0 ? sel_2_1479 :
              s_571);

  assign sel_2_1481 = (s_10 == 1'b0 ? sel_8813 :
              sel_2_1480);

  assign sel_2_1482 = (s_11 == 1'b0 ? sel_8812 :
              sel_2_1481);

  assign sel_8815 = 1'b0;

  assign sel_2_1483 = (s_12 == 1'b0 ? sel_2_1482 :
              sel_8815);

  assign sel_8816 = 1'b0;

  assign sel_8817 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1472, sel_2_1483, sel_8800, sel_8801, sel_8802, sel_8803,
       sel_8804, sel_8805, sel_8806, sel_8807, sel_8808, sel_8809, sel_8810,
       sel_8816, sel_8817) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p584_sel_2 = sel_8816;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p584_sel_2 = sel_2_1483;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p584_sel_2 = sel_2_1472;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p584_sel_2 = sel_8810;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p584_sel_2 = sel_8809;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p584_sel_2 = sel_8808;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p584_sel_2 = sel_8807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p584_sel_2 = sel_8806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p584_sel_2 = sel_8805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p584_sel_2 = sel_8804;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p584_sel_2 = sel_8803;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p584_sel_2 = sel_8802;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p584_sel_2 = sel_8801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p584_sel_2 = sel_8800;
        end
      default :
        begin
          p584_sel_2 = sel_8817;
        end
    endcase
    sel_2_1484 = p584_sel_2;
  end

  assign sel_8818 = 1'b0;

  assign sel_8819 = 1'b0;

  assign sel_8820 = 1'b0;

  assign sel_8821 = 1'b0;

  assign sel_8822 = 1'b0;

  assign sel_8823 = 1'b0;

  assign sel_8824 = 1'b0;

  assign sel_8825 = 1'b0;

  assign sel_8826 = 1'b0;

  assign sel_8827 = 1'b0;

  assign sel_8828 = 1'b0;

  assign sel_8829 = 32'sd0;

  assign sel_8830 = 32'sd0;

  assign sel_8831 = 32'sd0;

  assign sel_8832 = 32'sd0;

  assign sel_8833 = 32'sd0;

  assign sel_8834 = 32'sd0;

  assign sel_8835 = 32'sd0;

  assign sel_8836 = 32'sd0;

  assign sel_8837 = 32'sd0;

  assign sel_8838 = 32'sd0;

  assign sel_8839 = 32'sd0;

  assign sel_8840 = 32'sd0;

  assign s_572 = 32'sd3;

  assign sel_1_1741 = (s_13 == 1'b0 ? sel_8840 :
              s_572);

  assign sel_8841 = 32'sd0;

  assign sel_1_1742 = (s_14 == 1'b0 ? sel_1_1741 :
              sel_8841);

  assign sel_8842 = 32'sd0;

  assign sel_1_1743 = (s_15 == 1'b0 ? sel_1_1742 :
              sel_8842);

  assign sel_8843 = 32'sd0;

  assign sel_1_1744 = (s_16 == 1'b0 ? sel_1_1743 :
              sel_8843);

  assign sel_8844 = 32'sd0;

  assign sel_1_1745 = (s_17 == 1'b0 ? sel_1_1744 :
              sel_8844);

  assign sel_8845 = 32'sd0;

  assign sel_1_1746 = (s_18 == 1'b0 ? sel_1_1745 :
              sel_8845);

  assign sel_8846 = 32'sd0;

  assign sel_1_1747 = (s_19 == 1'b0 ? sel_1_1746 :
              sel_8846);

  assign sel_8847 = 32'sd0;

  assign sel_1_1748 = (s_20 == 1'b0 ? sel_1_1747 :
              sel_8847);

  assign sel_8848 = 32'sd0;

  assign sel_8849 = 32'sd0;

  assign sel_8850 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1748, sel_8829, sel_8830, sel_8831, sel_8832, sel_8833,
       sel_8834, sel_8835, sel_8836, sel_8837, sel_8838, sel_8839, sel_8848,
       sel_8849, sel_8850) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2124_sel_1 = sel_8849;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2124_sel_1 = sel_8848;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2124_sel_1 = sel_1_1748;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2124_sel_1 = sel_8839;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2124_sel_1 = sel_8838;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2124_sel_1 = sel_8837;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2124_sel_1 = sel_8836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2124_sel_1 = sel_8835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2124_sel_1 = sel_8834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2124_sel_1 = sel_8833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2124_sel_1 = sel_8832;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2124_sel_1 = sel_8831;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2124_sel_1 = sel_8830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2124_sel_1 = sel_8829;
        end
      default :
        begin
          p2124_sel_1 = sel_8850;
        end
    endcase
    sel_1_1749 = p2124_sel_1;
  end

  assign cont_bits_41_32 = cont_bits_41_12[sel_1_1749];

  assign sel_8851 = 32'sd0;

  assign sel_8852 = 32'sd0;

  assign sel_8853 = 32'sd0;

  assign sel_8854 = 32'sd0;

  assign sel_8855 = 32'sd0;

  assign sel_8856 = 32'sd0;

  assign sel_8857 = 32'sd0;

  assign sel_8858 = 32'sd0;

  assign sel_8859 = 32'sd0;

  assign sel_8860 = 32'sd0;

  assign sel_8861 = 32'sd0;

  assign sel_8862 = 32'sd0;

  assign s_573 = 32'sd3;

  assign sel_1_1750 = (s_14 == 1'b0 ? sel_8862 :
              s_573);

  assign sel_8863 = 32'sd0;

  assign sel_1_1751 = (s_15 == 1'b0 ? sel_1_1750 :
              sel_8863);

  assign sel_8864 = 32'sd0;

  assign sel_1_1752 = (s_16 == 1'b0 ? sel_1_1751 :
              sel_8864);

  assign sel_8865 = 32'sd0;

  assign sel_1_1753 = (s_17 == 1'b0 ? sel_1_1752 :
              sel_8865);

  assign sel_8866 = 32'sd0;

  assign sel_1_1754 = (s_18 == 1'b0 ? sel_1_1753 :
              sel_8866);

  assign sel_8867 = 32'sd0;

  assign sel_1_1755 = (s_19 == 1'b0 ? sel_1_1754 :
              sel_8867);

  assign sel_8868 = 32'sd0;

  assign sel_1_1756 = (s_20 == 1'b0 ? sel_1_1755 :
              sel_8868);

  assign sel_8869 = 32'sd0;

  assign sel_8870 = 32'sd0;

  assign sel_8871 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1756, sel_8851, sel_8852, sel_8853, sel_8854, sel_8855,
       sel_8856, sel_8857, sel_8858, sel_8859, sel_8860, sel_8861, sel_8869,
       sel_8870, sel_8871) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1308_sel_1 = sel_8870;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1308_sel_1 = sel_8869;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1308_sel_1 = sel_1_1756;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1308_sel_1 = sel_8861;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1308_sel_1 = sel_8860;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1308_sel_1 = sel_8859;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1308_sel_1 = sel_8858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1308_sel_1 = sel_8857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1308_sel_1 = sel_8856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1308_sel_1 = sel_8855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1308_sel_1 = sel_8854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1308_sel_1 = sel_8853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1308_sel_1 = sel_8852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1308_sel_1 = sel_8851;
        end
      default :
        begin
          p1308_sel_1 = sel_8871;
        end
    endcase
    sel_1_1757 = p1308_sel_1;
  end

  assign cont_bits_42_32 = cont_bits_42_12[sel_1_1757];

  assign sel_1_1758 = (s_14 == 1'b0 ? cont_bits_41_32 :
              cont_bits_42_32);

  assign sel_8872 = 32'sd0;

  assign sel_8873 = 32'sd0;

  assign sel_8874 = 32'sd0;

  assign sel_8875 = 32'sd0;

  assign sel_8876 = 32'sd0;

  assign sel_8877 = 32'sd0;

  assign sel_8878 = 32'sd0;

  assign sel_8879 = 32'sd0;

  assign sel_8880 = 32'sd0;

  assign sel_8881 = 32'sd0;

  assign sel_8882 = 32'sd0;

  assign sel_8883 = 32'sd0;

  assign s_574 = 32'sd3;

  assign sel_1_1759 = (s_15 == 1'b0 ? sel_8883 :
              s_574);

  assign sel_8884 = 32'sd0;

  assign sel_1_1760 = (s_16 == 1'b0 ? sel_1_1759 :
              sel_8884);

  assign sel_8885 = 32'sd0;

  assign sel_1_1761 = (s_17 == 1'b0 ? sel_1_1760 :
              sel_8885);

  assign sel_8886 = 32'sd0;

  assign sel_1_1762 = (s_18 == 1'b0 ? sel_1_1761 :
              sel_8886);

  assign sel_8887 = 32'sd0;

  assign sel_1_1763 = (s_19 == 1'b0 ? sel_1_1762 :
              sel_8887);

  assign sel_8888 = 32'sd0;

  assign sel_1_1764 = (s_20 == 1'b0 ? sel_1_1763 :
              sel_8888);

  assign sel_8889 = 32'sd0;

  assign sel_8890 = 32'sd0;

  assign sel_8891 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1764, sel_8872, sel_8873, sel_8874, sel_8875, sel_8876,
       sel_8877, sel_8878, sel_8879, sel_8880, sel_8881, sel_8882, sel_8889,
       sel_8890, sel_8891) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1614_sel_1 = sel_8890;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1614_sel_1 = sel_8889;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1614_sel_1 = sel_1_1764;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1614_sel_1 = sel_8882;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1614_sel_1 = sel_8881;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1614_sel_1 = sel_8880;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1614_sel_1 = sel_8879;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1614_sel_1 = sel_8878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1614_sel_1 = sel_8877;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1614_sel_1 = sel_8876;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1614_sel_1 = sel_8875;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1614_sel_1 = sel_8874;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1614_sel_1 = sel_8873;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1614_sel_1 = sel_8872;
        end
      default :
        begin
          p1614_sel_1 = sel_8891;
        end
    endcase
    sel_1_1765 = p1614_sel_1;
  end

  assign cont_bits_32_32 = cont_bits_32_12[sel_1_1765];

  assign sel_1_1766 = (s_15 == 1'b0 ? sel_1_1758 :
              cont_bits_32_32);

  assign sel_8892 = 32'sd0;

  assign sel_8893 = 32'sd0;

  assign sel_8894 = 32'sd0;

  assign sel_8895 = 32'sd0;

  assign sel_8896 = 32'sd0;

  assign sel_8897 = 32'sd0;

  assign sel_8898 = 32'sd0;

  assign sel_8899 = 32'sd0;

  assign sel_8900 = 32'sd0;

  assign sel_8901 = 32'sd0;

  assign sel_8902 = 32'sd0;

  assign sel_8903 = 32'sd0;

  assign s_575 = 32'sd3;

  assign sel_1_1767 = (s_16 == 1'b0 ? sel_8903 :
              s_575);

  assign sel_8904 = 32'sd0;

  assign sel_1_1768 = (s_17 == 1'b0 ? sel_1_1767 :
              sel_8904);

  assign sel_8905 = 32'sd0;

  assign sel_1_1769 = (s_18 == 1'b0 ? sel_1_1768 :
              sel_8905);

  assign sel_8906 = 32'sd0;

  assign sel_1_1770 = (s_19 == 1'b0 ? sel_1_1769 :
              sel_8906);

  assign sel_8907 = 32'sd0;

  assign sel_1_1771 = (s_20 == 1'b0 ? sel_1_1770 :
              sel_8907);

  assign sel_8908 = 32'sd0;

  assign sel_8909 = 32'sd0;

  assign sel_8910 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1771, sel_8892, sel_8893, sel_8894, sel_8895, sel_8896,
       sel_8897, sel_8898, sel_8899, sel_8900, sel_8901, sel_8902, sel_8908,
       sel_8909, sel_8910) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1138_sel_1 = sel_8909;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1138_sel_1 = sel_8908;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1138_sel_1 = sel_1_1771;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1138_sel_1 = sel_8902;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1138_sel_1 = sel_8901;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1138_sel_1 = sel_8900;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1138_sel_1 = sel_8899;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1138_sel_1 = sel_8898;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1138_sel_1 = sel_8897;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1138_sel_1 = sel_8896;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1138_sel_1 = sel_8895;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1138_sel_1 = sel_8894;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1138_sel_1 = sel_8893;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1138_sel_1 = sel_8892;
        end
      default :
        begin
          p1138_sel_1 = sel_8910;
        end
    endcase
    sel_1_1772 = p1138_sel_1;
  end

  assign cont_bits_31_32 = cont_bits_31_12[sel_1_1772];

  assign sel_1_1773 = (s_16 == 1'b0 ? sel_1_1766 :
              cont_bits_31_32);

  assign sel_8911 = 32'sd0;

  assign sel_8912 = 32'sd0;

  assign sel_8913 = 32'sd0;

  assign sel_8914 = 32'sd0;

  assign sel_8915 = 32'sd0;

  assign sel_8916 = 32'sd0;

  assign sel_8917 = 32'sd0;

  assign sel_8918 = 32'sd0;

  assign sel_8919 = 32'sd0;

  assign sel_8920 = 32'sd0;

  assign sel_8921 = 32'sd0;

  assign sel_8922 = 32'sd0;

  assign s_576 = 32'sd3;

  assign sel_1_1774 = (s_17 == 1'b0 ? sel_8922 :
              s_576);

  assign sel_8923 = 32'sd0;

  assign sel_1_1775 = (s_18 == 1'b0 ? sel_1_1774 :
              sel_8923);

  assign sel_8924 = 32'sd0;

  assign sel_1_1776 = (s_19 == 1'b0 ? sel_1_1775 :
              sel_8924);

  assign sel_8925 = 32'sd0;

  assign sel_1_1777 = (s_20 == 1'b0 ? sel_1_1776 :
              sel_8925);

  assign sel_8926 = 32'sd0;

  assign sel_8927 = 32'sd0;

  assign sel_8928 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1777, sel_8911, sel_8912, sel_8913, sel_8914, sel_8915,
       sel_8916, sel_8917, sel_8918, sel_8919, sel_8920, sel_8921, sel_8926,
       sel_8927, sel_8928) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1937_sel_1 = sel_8927;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1937_sel_1 = sel_8926;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1937_sel_1 = sel_1_1777;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1937_sel_1 = sel_8921;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1937_sel_1 = sel_8920;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1937_sel_1 = sel_8919;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1937_sel_1 = sel_8918;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1937_sel_1 = sel_8917;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1937_sel_1 = sel_8916;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1937_sel_1 = sel_8915;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1937_sel_1 = sel_8914;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1937_sel_1 = sel_8913;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1937_sel_1 = sel_8912;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1937_sel_1 = sel_8911;
        end
      default :
        begin
          p1937_sel_1 = sel_8928;
        end
    endcase
    sel_1_1778 = p1937_sel_1;
  end

  assign cont_bits_22_32 = cont_bits_22_12[sel_1_1778];

  assign sel_1_1779 = (s_17 == 1'b0 ? sel_1_1773 :
              cont_bits_22_32);

  assign sel_8929 = 32'sd0;

  assign sel_8930 = 32'sd0;

  assign sel_8931 = 32'sd0;

  assign sel_8932 = 32'sd0;

  assign sel_8933 = 32'sd0;

  assign sel_8934 = 32'sd0;

  assign sel_8935 = 32'sd0;

  assign sel_8936 = 32'sd0;

  assign sel_8937 = 32'sd0;

  assign sel_8938 = 32'sd0;

  assign sel_8939 = 32'sd0;

  assign sel_8940 = 32'sd0;

  assign s_577 = 32'sd3;

  assign sel_1_1780 = (s_18 == 1'b0 ? sel_8940 :
              s_577);

  assign sel_8941 = 32'sd0;

  assign sel_1_1781 = (s_19 == 1'b0 ? sel_1_1780 :
              sel_8941);

  assign sel_8942 = 32'sd0;

  assign sel_1_1782 = (s_20 == 1'b0 ? sel_1_1781 :
              sel_8942);

  assign sel_8943 = 32'sd0;

  assign sel_8944 = 32'sd0;

  assign sel_8945 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1782, sel_8929, sel_8930, sel_8931, sel_8932, sel_8933,
       sel_8934, sel_8935, sel_8936, sel_8937, sel_8938, sel_8939, sel_8943,
       sel_8944, sel_8945) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2447_sel_1 = sel_8944;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2447_sel_1 = sel_8943;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2447_sel_1 = sel_1_1782;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2447_sel_1 = sel_8939;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2447_sel_1 = sel_8938;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2447_sel_1 = sel_8937;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2447_sel_1 = sel_8936;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2447_sel_1 = sel_8935;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2447_sel_1 = sel_8934;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2447_sel_1 = sel_8933;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2447_sel_1 = sel_8932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2447_sel_1 = sel_8931;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2447_sel_1 = sel_8930;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2447_sel_1 = sel_8929;
        end
      default :
        begin
          p2447_sel_1 = sel_8945;
        end
    endcase
    sel_1_1783 = p2447_sel_1;
  end

  assign cont_bits_21_32 = cont_bits_21_12[sel_1_1783];

  assign sel_1_1784 = (s_18 == 1'b0 ? sel_1_1779 :
              cont_bits_21_32);

  assign sel_8946 = 32'sd0;

  assign sel_8947 = 32'sd0;

  assign sel_8948 = 32'sd0;

  assign sel_8949 = 32'sd0;

  assign sel_8950 = 32'sd0;

  assign sel_8951 = 32'sd0;

  assign sel_8952 = 32'sd0;

  assign sel_8953 = 32'sd0;

  assign sel_8954 = 32'sd0;

  assign sel_8955 = 32'sd0;

  assign sel_8956 = 32'sd0;

  assign sel_8957 = 32'sd0;

  assign s_578 = 32'sd3;

  assign sel_1_1785 = (s_19 == 1'b0 ? sel_8957 :
              s_578);

  assign sel_8958 = 32'sd0;

  assign sel_1_1786 = (s_20 == 1'b0 ? sel_1_1785 :
              sel_8958);

  assign sel_8959 = 32'sd0;

  assign sel_8960 = 32'sd0;

  assign sel_8961 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1786, sel_8946, sel_8947, sel_8948, sel_8949, sel_8950,
       sel_8951, sel_8952, sel_8953, sel_8954, sel_8955, sel_8956, sel_8959,
       sel_8960, sel_8961) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1512_sel_1 = sel_8960;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1512_sel_1 = sel_8959;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1512_sel_1 = sel_1_1786;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1512_sel_1 = sel_8956;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1512_sel_1 = sel_8955;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1512_sel_1 = sel_8954;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1512_sel_1 = sel_8953;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1512_sel_1 = sel_8952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1512_sel_1 = sel_8951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1512_sel_1 = sel_8950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1512_sel_1 = sel_8949;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1512_sel_1 = sel_8948;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1512_sel_1 = sel_8947;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1512_sel_1 = sel_8946;
        end
      default :
        begin
          p1512_sel_1 = sel_8961;
        end
    endcase
    sel_1_1787 = p1512_sel_1;
  end

  assign cont_bits_12_32 = cont_bits_12_12[sel_1_1787];

  assign sel_1_1788 = (s_19 == 1'b0 ? sel_1_1784 :
              cont_bits_12_32);

  assign sel_8962 = 32'sd0;

  assign sel_8963 = 32'sd0;

  assign sel_8964 = 32'sd0;

  assign sel_8965 = 32'sd0;

  assign sel_8966 = 32'sd0;

  assign sel_8967 = 32'sd0;

  assign sel_8968 = 32'sd0;

  assign sel_8969 = 32'sd0;

  assign sel_8970 = 32'sd0;

  assign sel_8971 = 32'sd0;

  assign sel_8972 = 32'sd0;

  assign sel_8973 = 32'sd0;

  assign s_579 = 32'sd3;

  assign sel_1_1789 = (s_20 == 1'b0 ? sel_8973 :
              s_579);

  assign sel_8974 = 32'sd0;

  assign sel_8975 = 32'sd0;

  assign sel_8976 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1789, sel_8962, sel_8963, sel_8964, sel_8965, sel_8966,
       sel_8967, sel_8968, sel_8969, sel_8970, sel_8971, sel_8972, sel_8974,
       sel_8975, sel_8976) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2243_sel_1 = sel_8975;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2243_sel_1 = sel_8974;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2243_sel_1 = sel_1_1789;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2243_sel_1 = sel_8972;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2243_sel_1 = sel_8971;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2243_sel_1 = sel_8970;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2243_sel_1 = sel_8969;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2243_sel_1 = sel_8968;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2243_sel_1 = sel_8967;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2243_sel_1 = sel_8966;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2243_sel_1 = sel_8965;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2243_sel_1 = sel_8964;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2243_sel_1 = sel_8963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2243_sel_1 = sel_8962;
        end
      default :
        begin
          p2243_sel_1 = sel_8976;
        end
    endcase
    sel_1_1790 = p2243_sel_1;
  end

  assign cont_bits_37 = cont_bits_13[sel_1_1790];

  assign sel_1_1791 = (s_20 == 1'b0 ? sel_1_1788 :
              cont_bits_37);

  assign sel_8977 = 32'sd0;

  assign sel_8978 = 32'sd0;

  assign sel_8979 = 32'sd0;

  assign sel_8980 = 32'sd0;

  assign sel_8981 = 32'sd0;

  assign sel_8982 = 32'sd0;

  assign sel_8983 = 32'sd0;

  assign sel_8984 = 32'sd0;

  assign sel_8985 = 32'sd0;

  assign sel_8986 = 32'sd0;

  assign sel_8987 = 32'sd0;

  assign sel_8988 = 32'sd0;

  assign sel_8989 = 32'sd0;

  assign sel_8990 = 32'sd0;

  assign sel_8991 = 32'sd0;

  assign s_580 = 32'sd3;

  assign sel_1_1792 = (tmp_3 == 1'b0 ? sel_8991 :
              s_580);

  assign sel_8992 = 32'sd0;

  assign sel_1_1793 = (tmp_5 == 1'b0 ? sel_1_1792 :
              sel_8992);

  assign sel_8993 = 32'sd0;

  assign sel_1_1794 = (tmp_7 == 1'b0 ? sel_1_1793 :
              sel_8993);

  assign sel_8994 = 32'sd0;

  assign sel_1_1795 = (tmp_9 == 1'b0 ? sel_1_1794 :
              sel_8994);

  assign sel_8995 = 32'sd0;

  assign sel_1_1796 = (tmp_11 == 1'b0 ? sel_1_1795 :
              sel_8995);

  assign sel_8996 = 32'sd0;

  assign sel_1_1797 = (tmp_13 == 1'b0 ? sel_1_1796 :
              sel_8996);

  assign sel_8997 = 32'sd0;

  assign sel_1_1798 = (tmp_15 == 1'b0 ? sel_1_1797 :
              sel_8997);

  assign sel_8998 = 32'sd0;

  assign sel_1_1799 = (tmp_17 == 1'b0 ? sel_1_1798 :
              sel_8998);

  assign sel_1_1800 = (s_10 == 1'b0 ? sel_8990 :
              sel_1_1799);

  assign sel_1_1801 = (s_11 == 1'b0 ? sel_8989 :
              sel_1_1800);

  assign sel_8999 = 32'sd0;

  assign sel_1_1802 = (s_12 == 1'b0 ? sel_1_1801 :
              sel_8999);

  assign sel_9000 = 32'sd0;

  assign sel_9001 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1802, sel_8977, sel_8978, sel_8979, sel_8980, sel_8981,
       sel_8982, sel_8983, sel_8984, sel_8985, sel_8986, sel_8987, sel_8988,
       sel_9000, sel_9001) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3365_sel_1 = sel_9000;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3365_sel_1 = sel_1_1802;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3365_sel_1 = sel_8988;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3365_sel_1 = sel_8987;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3365_sel_1 = sel_8986;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3365_sel_1 = sel_8985;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3365_sel_1 = sel_8984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3365_sel_1 = sel_8983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3365_sel_1 = sel_8982;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3365_sel_1 = sel_8981;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3365_sel_1 = sel_8980;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3365_sel_1 = sel_8979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3365_sel_1 = sel_8978;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3365_sel_1 = sel_8977;
        end
      default :
        begin
          p3365_sel_1 = sel_9001;
        end
    endcase
    sel_1_1803 = p3365_sel_1;
  end

  assign cont_bits_41_33 = cont_bits_41_26[sel_1_1803];

  assign sel_9002 = 32'sd0;

  assign sel_9003 = 32'sd0;

  assign sel_9004 = 32'sd0;

  assign sel_9005 = 32'sd0;

  assign sel_9006 = 32'sd0;

  assign sel_9007 = 32'sd0;

  assign sel_9008 = 32'sd0;

  assign sel_9009 = 32'sd0;

  assign sel_9010 = 32'sd0;

  assign sel_9011 = 32'sd0;

  assign sel_9012 = 32'sd0;

  assign sel_9013 = 32'sd0;

  assign sel_9014 = 32'sd0;

  assign sel_9015 = 32'sd0;

  assign sel_9016 = 32'sd0;

  assign s_581 = 32'sd3;

  assign sel_1_1804 = (tmp_5 == 1'b0 ? sel_9016 :
              s_581);

  assign sel_9017 = 32'sd0;

  assign sel_1_1805 = (tmp_7 == 1'b0 ? sel_1_1804 :
              sel_9017);

  assign sel_9018 = 32'sd0;

  assign sel_1_1806 = (tmp_9 == 1'b0 ? sel_1_1805 :
              sel_9018);

  assign sel_9019 = 32'sd0;

  assign sel_1_1807 = (tmp_11 == 1'b0 ? sel_1_1806 :
              sel_9019);

  assign sel_9020 = 32'sd0;

  assign sel_1_1808 = (tmp_13 == 1'b0 ? sel_1_1807 :
              sel_9020);

  assign sel_9021 = 32'sd0;

  assign sel_1_1809 = (tmp_15 == 1'b0 ? sel_1_1808 :
              sel_9021);

  assign sel_9022 = 32'sd0;

  assign sel_1_1810 = (tmp_17 == 1'b0 ? sel_1_1809 :
              sel_9022);

  assign sel_1_1811 = (s_10 == 1'b0 ? sel_9015 :
              sel_1_1810);

  assign sel_1_1812 = (s_11 == 1'b0 ? sel_9014 :
              sel_1_1811);

  assign sel_9023 = 32'sd0;

  assign sel_1_1813 = (s_12 == 1'b0 ? sel_1_1812 :
              sel_9023);

  assign sel_9024 = 32'sd0;

  assign sel_9025 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1813, sel_9002, sel_9003, sel_9004, sel_9005, sel_9006,
       sel_9007, sel_9008, sel_9009, sel_9010, sel_9011, sel_9012, sel_9013,
       sel_9024, sel_9025) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2906_sel_1 = sel_9024;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2906_sel_1 = sel_1_1813;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2906_sel_1 = sel_9013;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2906_sel_1 = sel_9012;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2906_sel_1 = sel_9011;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2906_sel_1 = sel_9010;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2906_sel_1 = sel_9009;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2906_sel_1 = sel_9008;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2906_sel_1 = sel_9007;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2906_sel_1 = sel_9006;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2906_sel_1 = sel_9005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2906_sel_1 = sel_9004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2906_sel_1 = sel_9003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2906_sel_1 = sel_9002;
        end
      default :
        begin
          p2906_sel_1 = sel_9025;
        end
    endcase
    sel_1_1814 = p2906_sel_1;
  end

  assign cont_bits_42_33 = cont_bits_42_26[sel_1_1814];

  assign sel_1_1815 = (tmp_5 == 1'b0 ? cont_bits_41_33 :
              cont_bits_42_33);

  assign sel_9026 = 32'sd0;

  assign sel_9027 = 32'sd0;

  assign sel_9028 = 32'sd0;

  assign sel_9029 = 32'sd0;

  assign sel_9030 = 32'sd0;

  assign sel_9031 = 32'sd0;

  assign sel_9032 = 32'sd0;

  assign sel_9033 = 32'sd0;

  assign sel_9034 = 32'sd0;

  assign sel_9035 = 32'sd0;

  assign sel_9036 = 32'sd0;

  assign sel_9037 = 32'sd0;

  assign sel_9038 = 32'sd0;

  assign sel_9039 = 32'sd0;

  assign sel_9040 = 32'sd0;

  assign s_582 = 32'sd3;

  assign sel_1_1816 = (tmp_7 == 1'b0 ? sel_9040 :
              s_582);

  assign sel_9041 = 32'sd0;

  assign sel_1_1817 = (tmp_9 == 1'b0 ? sel_1_1816 :
              sel_9041);

  assign sel_9042 = 32'sd0;

  assign sel_1_1818 = (tmp_11 == 1'b0 ? sel_1_1817 :
              sel_9042);

  assign sel_9043 = 32'sd0;

  assign sel_1_1819 = (tmp_13 == 1'b0 ? sel_1_1818 :
              sel_9043);

  assign sel_9044 = 32'sd0;

  assign sel_1_1820 = (tmp_15 == 1'b0 ? sel_1_1819 :
              sel_9044);

  assign sel_9045 = 32'sd0;

  assign sel_1_1821 = (tmp_17 == 1'b0 ? sel_1_1820 :
              sel_9045);

  assign sel_1_1822 = (s_10 == 1'b0 ? sel_9039 :
              sel_1_1821);

  assign sel_1_1823 = (s_11 == 1'b0 ? sel_9038 :
              sel_1_1822);

  assign sel_9046 = 32'sd0;

  assign sel_1_1824 = (s_12 == 1'b0 ? sel_1_1823 :
              sel_9046);

  assign sel_9047 = 32'sd0;

  assign sel_9048 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1824, sel_9026, sel_9027, sel_9028, sel_9029, sel_9030,
       sel_9031, sel_9032, sel_9033, sel_9034, sel_9035, sel_9036, sel_9037,
       sel_9047, sel_9048) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3450_sel_1 = sel_9047;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3450_sel_1 = sel_1_1824;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3450_sel_1 = sel_9037;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3450_sel_1 = sel_9036;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3450_sel_1 = sel_9035;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3450_sel_1 = sel_9034;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3450_sel_1 = sel_9033;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3450_sel_1 = sel_9032;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3450_sel_1 = sel_9031;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3450_sel_1 = sel_9030;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3450_sel_1 = sel_9029;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3450_sel_1 = sel_9028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3450_sel_1 = sel_9027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3450_sel_1 = sel_9026;
        end
      default :
        begin
          p3450_sel_1 = sel_9048;
        end
    endcase
    sel_1_1825 = p3450_sel_1;
  end

  assign cont_bits_32_33 = cont_bits_32_26[sel_1_1825];

  assign sel_1_1826 = (tmp_7 == 1'b0 ? sel_1_1815 :
              cont_bits_32_33);

  assign sel_9049 = 32'sd0;

  assign sel_9050 = 32'sd0;

  assign sel_9051 = 32'sd0;

  assign sel_9052 = 32'sd0;

  assign sel_9053 = 32'sd0;

  assign sel_9054 = 32'sd0;

  assign sel_9055 = 32'sd0;

  assign sel_9056 = 32'sd0;

  assign sel_9057 = 32'sd0;

  assign sel_9058 = 32'sd0;

  assign sel_9059 = 32'sd0;

  assign sel_9060 = 32'sd0;

  assign sel_9061 = 32'sd0;

  assign sel_9062 = 32'sd0;

  assign sel_9063 = 32'sd0;

  assign s_583 = 32'sd3;

  assign sel_1_1827 = (tmp_9 == 1'b0 ? sel_9063 :
              s_583);

  assign sel_9064 = 32'sd0;

  assign sel_1_1828 = (tmp_11 == 1'b0 ? sel_1_1827 :
              sel_9064);

  assign sel_9065 = 32'sd0;

  assign sel_1_1829 = (tmp_13 == 1'b0 ? sel_1_1828 :
              sel_9065);

  assign sel_9066 = 32'sd0;

  assign sel_1_1830 = (tmp_15 == 1'b0 ? sel_1_1829 :
              sel_9066);

  assign sel_9067 = 32'sd0;

  assign sel_1_1831 = (tmp_17 == 1'b0 ? sel_1_1830 :
              sel_9067);

  assign sel_1_1832 = (s_10 == 1'b0 ? sel_9062 :
              sel_1_1831);

  assign sel_1_1833 = (s_11 == 1'b0 ? sel_9061 :
              sel_1_1832);

  assign sel_9068 = 32'sd0;

  assign sel_1_1834 = (s_12 == 1'b0 ? sel_1_1833 :
              sel_9068);

  assign sel_9069 = 32'sd0;

  assign sel_9070 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1834, sel_9049, sel_9050, sel_9051, sel_9052, sel_9053,
       sel_9054, sel_9055, sel_9056, sel_9057, sel_9058, sel_9059, sel_9060,
       sel_9069, sel_9070) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4062_sel_1 = sel_9069;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4062_sel_1 = sel_1_1834;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4062_sel_1 = sel_9060;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4062_sel_1 = sel_9059;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4062_sel_1 = sel_9058;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4062_sel_1 = sel_9057;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4062_sel_1 = sel_9056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4062_sel_1 = sel_9055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4062_sel_1 = sel_9054;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4062_sel_1 = sel_9053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4062_sel_1 = sel_9052;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4062_sel_1 = sel_9051;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4062_sel_1 = sel_9050;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4062_sel_1 = sel_9049;
        end
      default :
        begin
          p4062_sel_1 = sel_9070;
        end
    endcase
    sel_1_1835 = p4062_sel_1;
  end

  assign cont_bits_31_33 = cont_bits_31_26[sel_1_1835];

  assign sel_1_1836 = (tmp_9 == 1'b0 ? sel_1_1826 :
              cont_bits_31_33);

  assign sel_9071 = 32'sd0;

  assign sel_9072 = 32'sd0;

  assign sel_9073 = 32'sd0;

  assign sel_9074 = 32'sd0;

  assign sel_9075 = 32'sd0;

  assign sel_9076 = 32'sd0;

  assign sel_9077 = 32'sd0;

  assign sel_9078 = 32'sd0;

  assign sel_9079 = 32'sd0;

  assign sel_9080 = 32'sd0;

  assign sel_9081 = 32'sd0;

  assign sel_9082 = 32'sd0;

  assign sel_9083 = 32'sd0;

  assign sel_9084 = 32'sd0;

  assign sel_9085 = 32'sd0;

  assign s_584 = 32'sd3;

  assign sel_1_1837 = (tmp_11 == 1'b0 ? sel_9085 :
              s_584);

  assign sel_9086 = 32'sd0;

  assign sel_1_1838 = (tmp_13 == 1'b0 ? sel_1_1837 :
              sel_9086);

  assign sel_9087 = 32'sd0;

  assign sel_1_1839 = (tmp_15 == 1'b0 ? sel_1_1838 :
              sel_9087);

  assign sel_9088 = 32'sd0;

  assign sel_1_1840 = (tmp_17 == 1'b0 ? sel_1_1839 :
              sel_9088);

  assign sel_1_1841 = (s_10 == 1'b0 ? sel_9084 :
              sel_1_1840);

  assign sel_1_1842 = (s_11 == 1'b0 ? sel_9083 :
              sel_1_1841);

  assign sel_9089 = 32'sd0;

  assign sel_1_1843 = (s_12 == 1'b0 ? sel_1_1842 :
              sel_9089);

  assign sel_9090 = 32'sd0;

  assign sel_9091 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1843, sel_9071, sel_9072, sel_9073, sel_9074, sel_9075,
       sel_9076, sel_9077, sel_9078, sel_9079, sel_9080, sel_9081, sel_9082,
       sel_9090, sel_9091) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3841_sel_1 = sel_9090;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3841_sel_1 = sel_1_1843;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3841_sel_1 = sel_9082;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3841_sel_1 = sel_9081;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3841_sel_1 = sel_9080;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3841_sel_1 = sel_9079;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3841_sel_1 = sel_9078;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3841_sel_1 = sel_9077;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3841_sel_1 = sel_9076;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3841_sel_1 = sel_9075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3841_sel_1 = sel_9074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3841_sel_1 = sel_9073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3841_sel_1 = sel_9072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3841_sel_1 = sel_9071;
        end
      default :
        begin
          p3841_sel_1 = sel_9091;
        end
    endcase
    sel_1_1844 = p3841_sel_1;
  end

  assign cont_bits_22_33 = cont_bits_22_26[sel_1_1844];

  assign sel_1_1845 = (tmp_11 == 1'b0 ? sel_1_1836 :
              cont_bits_22_33);

  assign sel_9092 = 32'sd0;

  assign sel_9093 = 32'sd0;

  assign sel_9094 = 32'sd0;

  assign sel_9095 = 32'sd0;

  assign sel_9096 = 32'sd0;

  assign sel_9097 = 32'sd0;

  assign sel_9098 = 32'sd0;

  assign sel_9099 = 32'sd0;

  assign sel_9100 = 32'sd0;

  assign sel_9101 = 32'sd0;

  assign sel_9102 = 32'sd0;

  assign sel_9103 = 32'sd0;

  assign sel_9104 = 32'sd0;

  assign sel_9105 = 32'sd0;

  assign sel_9106 = 32'sd0;

  assign s_585 = 32'sd3;

  assign sel_1_1846 = (tmp_13 == 1'b0 ? sel_9106 :
              s_585);

  assign sel_9107 = 32'sd0;

  assign sel_1_1847 = (tmp_15 == 1'b0 ? sel_1_1846 :
              sel_9107);

  assign sel_9108 = 32'sd0;

  assign sel_1_1848 = (tmp_17 == 1'b0 ? sel_1_1847 :
              sel_9108);

  assign sel_1_1849 = (s_10 == 1'b0 ? sel_9105 :
              sel_1_1848);

  assign sel_1_1850 = (s_11 == 1'b0 ? sel_9104 :
              sel_1_1849);

  assign sel_9109 = 32'sd0;

  assign sel_1_1851 = (s_12 == 1'b0 ? sel_1_1850 :
              sel_9109);

  assign sel_9110 = 32'sd0;

  assign sel_9111 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1851, sel_9092, sel_9093, sel_9094, sel_9095, sel_9096,
       sel_9097, sel_9098, sel_9099, sel_9100, sel_9101, sel_9102, sel_9103,
       sel_9110, sel_9111) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3042_sel_1 = sel_9110;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3042_sel_1 = sel_1_1851;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3042_sel_1 = sel_9103;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3042_sel_1 = sel_9102;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3042_sel_1 = sel_9101;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3042_sel_1 = sel_9100;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3042_sel_1 = sel_9099;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3042_sel_1 = sel_9098;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3042_sel_1 = sel_9097;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3042_sel_1 = sel_9096;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3042_sel_1 = sel_9095;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3042_sel_1 = sel_9094;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3042_sel_1 = sel_9093;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3042_sel_1 = sel_9092;
        end
      default :
        begin
          p3042_sel_1 = sel_9111;
        end
    endcase
    sel_1_1852 = p3042_sel_1;
  end

  assign cont_bits_21_33 = cont_bits_21_26[sel_1_1852];

  assign sel_1_1853 = (tmp_13 == 1'b0 ? sel_1_1845 :
              cont_bits_21_33);

  assign sel_9112 = 32'sd0;

  assign sel_9113 = 32'sd0;

  assign sel_9114 = 32'sd0;

  assign sel_9115 = 32'sd0;

  assign sel_9116 = 32'sd0;

  assign sel_9117 = 32'sd0;

  assign sel_9118 = 32'sd0;

  assign sel_9119 = 32'sd0;

  assign sel_9120 = 32'sd0;

  assign sel_9121 = 32'sd0;

  assign sel_9122 = 32'sd0;

  assign sel_9123 = 32'sd0;

  assign sel_9124 = 32'sd0;

  assign sel_9125 = 32'sd0;

  assign sel_9126 = 32'sd0;

  assign s_586 = 32'sd3;

  assign sel_1_1854 = (tmp_15 == 1'b0 ? sel_9126 :
              s_586);

  assign sel_9127 = 32'sd0;

  assign sel_1_1855 = (tmp_17 == 1'b0 ? sel_1_1854 :
              sel_9127);

  assign sel_1_1856 = (s_10 == 1'b0 ? sel_9125 :
              sel_1_1855);

  assign sel_1_1857 = (s_11 == 1'b0 ? sel_9124 :
              sel_1_1856);

  assign sel_9128 = 32'sd0;

  assign sel_1_1858 = (s_12 == 1'b0 ? sel_1_1857 :
              sel_9128);

  assign sel_9129 = 32'sd0;

  assign sel_9130 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1858, sel_9112, sel_9113, sel_9114, sel_9115, sel_9116,
       sel_9117, sel_9118, sel_9119, sel_9120, sel_9121, sel_9122, sel_9123,
       sel_9129, sel_9130) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3722_sel_1 = sel_9129;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3722_sel_1 = sel_1_1858;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3722_sel_1 = sel_9123;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3722_sel_1 = sel_9122;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3722_sel_1 = sel_9121;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3722_sel_1 = sel_9120;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3722_sel_1 = sel_9119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3722_sel_1 = sel_9118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3722_sel_1 = sel_9117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3722_sel_1 = sel_9116;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3722_sel_1 = sel_9115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3722_sel_1 = sel_9114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3722_sel_1 = sel_9113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3722_sel_1 = sel_9112;
        end
      default :
        begin
          p3722_sel_1 = sel_9130;
        end
    endcase
    sel_1_1859 = p3722_sel_1;
  end

  assign cont_bits_12_33 = cont_bits_12_26[sel_1_1859];

  assign sel_1_1860 = (tmp_15 == 1'b0 ? sel_1_1853 :
              cont_bits_12_33);

  assign sel_9131 = 32'sd0;

  assign sel_9132 = 32'sd0;

  assign sel_9133 = 32'sd0;

  assign sel_9134 = 32'sd0;

  assign sel_9135 = 32'sd0;

  assign sel_9136 = 32'sd0;

  assign sel_9137 = 32'sd0;

  assign sel_9138 = 32'sd0;

  assign sel_9139 = 32'sd0;

  assign sel_9140 = 32'sd0;

  assign sel_9141 = 32'sd0;

  assign sel_9142 = 32'sd0;

  assign sel_9143 = 32'sd0;

  assign sel_9144 = 32'sd0;

  assign sel_9145 = 32'sd0;

  assign s_587 = 32'sd3;

  assign sel_1_1861 = (tmp_17 == 1'b0 ? sel_9145 :
              s_587);

  assign sel_1_1862 = (s_10 == 1'b0 ? sel_9144 :
              sel_1_1861);

  assign sel_1_1863 = (s_11 == 1'b0 ? sel_9143 :
              sel_1_1862);

  assign sel_9146 = 32'sd0;

  assign sel_1_1864 = (s_12 == 1'b0 ? sel_1_1863 :
              sel_9146);

  assign sel_9147 = 32'sd0;

  assign sel_9148 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1864, sel_9131, sel_9132, sel_9133, sel_9134, sel_9135,
       sel_9136, sel_9137, sel_9138, sel_9139, sel_9140, sel_9141, sel_9142,
       sel_9147, sel_9148) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2719_sel_1 = sel_9147;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2719_sel_1 = sel_1_1864;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2719_sel_1 = sel_9142;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2719_sel_1 = sel_9141;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2719_sel_1 = sel_9140;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2719_sel_1 = sel_9139;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2719_sel_1 = sel_9138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2719_sel_1 = sel_9137;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2719_sel_1 = sel_9136;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2719_sel_1 = sel_9135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2719_sel_1 = sel_9134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2719_sel_1 = sel_9133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2719_sel_1 = sel_9132;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2719_sel_1 = sel_9131;
        end
      default :
        begin
          p2719_sel_1 = sel_9148;
        end
    endcase
    sel_1_1865 = p2719_sel_1;
  end

  assign cont_bits_38 = cont_bits_29[sel_1_1865];

  assign sel_1_1866 = (tmp_17 == 1'b0 ? sel_1_1860 :
              cont_bits_38);

  assign sel_9149 = 1'b0;

  assign sel_9150 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1_1791, sel_1_1866, sel_8818, sel_8819, sel_8820, sel_8821,
       sel_8822, sel_8823, sel_8824, sel_8825, sel_8826, sel_8827, sel_8828,
       sel_9149, sel_9150) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p542_sel_1 = sel_9149;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p542_sel_1 = sel_1_1866;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p542_sel_1 = sel_1_1791;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p542_sel_1 = sel_8828;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p542_sel_1 = sel_8827;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p542_sel_1 = sel_8826;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p542_sel_1 = sel_8825;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p542_sel_1 = sel_8824;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p542_sel_1 = sel_8823;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p542_sel_1 = sel_8822;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p542_sel_1 = sel_8821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p542_sel_1 = sel_8820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p542_sel_1 = sel_8819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p542_sel_1 = sel_8818;
        end
      default :
        begin
          p542_sel_1 = sel_9150;
        end
    endcase
    sel_1_1867 = p542_sel_1;
  end

  assign sel_9151 = 1'b0;

  assign sel_9152 = 1'b0;

  assign sel_9153 = 1'b0;

  assign sel_9154 = 1'b0;

  assign sel_9155 = 1'b0;

  assign sel_9156 = 1'b0;

  assign sel_9157 = 1'b0;

  assign sel_9158 = 1'b0;

  assign sel_9159 = 1'b0;

  assign sel_9160 = 1'b0;

  assign sel_9161 = 1'b0;

  assign sel_9162 = 1'b0;

  assign s_588 = 1'b1;

  assign sel_2_1485 = (s_13 == 1'b0 ? sel_9162 :
              s_588);

  assign s_589 = 1'b1;

  assign sel_2_1486 = (s_14 == 1'b0 ? sel_2_1485 :
              s_589);

  assign s_590 = 1'b1;

  assign sel_2_1487 = (s_15 == 1'b0 ? sel_2_1486 :
              s_590);

  assign s_591 = 1'b1;

  assign sel_2_1488 = (s_16 == 1'b0 ? sel_2_1487 :
              s_591);

  assign s_592 = 1'b1;

  assign sel_2_1489 = (s_17 == 1'b0 ? sel_2_1488 :
              s_592);

  assign s_593 = 1'b1;

  assign sel_2_1490 = (s_18 == 1'b0 ? sel_2_1489 :
              s_593);

  assign s_594 = 1'b1;

  assign sel_2_1491 = (s_19 == 1'b0 ? sel_2_1490 :
              s_594);

  assign s_595 = 1'b1;

  assign sel_2_1492 = (s_20 == 1'b0 ? sel_2_1491 :
              s_595);

  assign sel_9163 = 1'b0;

  assign sel_9164 = 1'b0;

  assign sel_9165 = 1'b0;

  assign s_596 = 1'b1;

  assign sel_2_1493 = (tmp_3 == 1'b0 ? sel_9165 :
              s_596);

  assign s_597 = 1'b1;

  assign sel_2_1494 = (tmp_5 == 1'b0 ? sel_2_1493 :
              s_597);

  assign s_598 = 1'b1;

  assign sel_2_1495 = (tmp_7 == 1'b0 ? sel_2_1494 :
              s_598);

  assign s_599 = 1'b1;

  assign sel_2_1496 = (tmp_9 == 1'b0 ? sel_2_1495 :
              s_599);

  assign s_600 = 1'b1;

  assign sel_2_1497 = (tmp_11 == 1'b0 ? sel_2_1496 :
              s_600);

  assign s_601 = 1'b1;

  assign sel_2_1498 = (tmp_13 == 1'b0 ? sel_2_1497 :
              s_601);

  assign s_602 = 1'b1;

  assign sel_2_1499 = (tmp_15 == 1'b0 ? sel_2_1498 :
              s_602);

  assign s_603 = 1'b1;

  assign sel_2_1500 = (tmp_17 == 1'b0 ? sel_2_1499 :
              s_603);

  assign sel_2_1501 = (s_10 == 1'b0 ? sel_9164 :
              sel_2_1500);

  assign sel_2_1502 = (s_11 == 1'b0 ? sel_9163 :
              sel_2_1501);

  assign sel_9166 = 1'b0;

  assign sel_2_1503 = (s_12 == 1'b0 ? sel_2_1502 :
              sel_9166);

  assign sel_9167 = 1'b0;

  assign sel_9168 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1492, sel_2_1503, sel_9151, sel_9152, sel_9153, sel_9154,
       sel_9155, sel_9156, sel_9157, sel_9158, sel_9159, sel_9160, sel_9161,
       sel_9167, sel_9168) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p527_sel_2 = sel_9167;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p527_sel_2 = sel_2_1503;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p527_sel_2 = sel_2_1492;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p527_sel_2 = sel_9161;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p527_sel_2 = sel_9160;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p527_sel_2 = sel_9159;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p527_sel_2 = sel_9158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p527_sel_2 = sel_9157;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p527_sel_2 = sel_9156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p527_sel_2 = sel_9155;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p527_sel_2 = sel_9154;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p527_sel_2 = sel_9153;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p527_sel_2 = sel_9152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p527_sel_2 = sel_9151;
        end
      default :
        begin
          p527_sel_2 = sel_9168;
        end
    endcase
    sel_2_1504 = p527_sel_2;
  end

  assign sel_9169 = 1'b0;

  assign sel_9170 = 1'b0;

  assign sel_9171 = 1'b0;

  assign sel_9172 = 1'b0;

  assign sel_9173 = 1'b0;

  assign sel_9174 = 1'b0;

  assign sel_9175 = 1'b0;

  assign sel_9176 = 1'b0;

  assign sel_9177 = 1'b0;

  assign sel_9178 = 1'b0;

  assign sel_9179 = 1'b0;

  assign sel_9180 = 32'sd0;

  assign sel_9181 = 32'sd0;

  assign sel_9182 = 32'sd0;

  assign sel_9183 = 32'sd0;

  assign sel_9184 = 32'sd0;

  assign sel_9185 = 32'sd0;

  assign sel_9186 = 32'sd0;

  assign sel_9187 = 32'sd0;

  assign sel_9188 = 32'sd0;

  assign sel_9189 = 32'sd0;

  assign sel_9190 = 32'sd0;

  assign sel_9191 = 32'sd0;

  assign s_604 = 32'sd4;

  assign sel_1_1868 = (s_13 == 1'b0 ? sel_9191 :
              s_604);

  assign sel_9192 = 32'sd0;

  assign sel_1_1869 = (s_14 == 1'b0 ? sel_1_1868 :
              sel_9192);

  assign sel_9193 = 32'sd0;

  assign sel_1_1870 = (s_15 == 1'b0 ? sel_1_1869 :
              sel_9193);

  assign sel_9194 = 32'sd0;

  assign sel_1_1871 = (s_16 == 1'b0 ? sel_1_1870 :
              sel_9194);

  assign sel_9195 = 32'sd0;

  assign sel_1_1872 = (s_17 == 1'b0 ? sel_1_1871 :
              sel_9195);

  assign sel_9196 = 32'sd0;

  assign sel_1_1873 = (s_18 == 1'b0 ? sel_1_1872 :
              sel_9196);

  assign sel_9197 = 32'sd0;

  assign sel_1_1874 = (s_19 == 1'b0 ? sel_1_1873 :
              sel_9197);

  assign sel_9198 = 32'sd0;

  assign sel_1_1875 = (s_20 == 1'b0 ? sel_1_1874 :
              sel_9198);

  assign sel_9199 = 32'sd0;

  assign sel_9200 = 32'sd0;

  assign sel_9201 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1875, sel_9180, sel_9181, sel_9182, sel_9183, sel_9184,
       sel_9185, sel_9186, sel_9187, sel_9188, sel_9189, sel_9190, sel_9199,
       sel_9200, sel_9201) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2107_sel_1 = sel_9200;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2107_sel_1 = sel_9199;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2107_sel_1 = sel_1_1875;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2107_sel_1 = sel_9190;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2107_sel_1 = sel_9189;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2107_sel_1 = sel_9188;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2107_sel_1 = sel_9187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2107_sel_1 = sel_9186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2107_sel_1 = sel_9185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2107_sel_1 = sel_9184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2107_sel_1 = sel_9183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2107_sel_1 = sel_9182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2107_sel_1 = sel_9181;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2107_sel_1 = sel_9180;
        end
      default :
        begin
          p2107_sel_1 = sel_9201;
        end
    endcase
    sel_1_1876 = p2107_sel_1;
  end

  assign cont_bits_41_34 = cont_bits_41_12[sel_1_1876];

  assign sel_9202 = 32'sd0;

  assign sel_9203 = 32'sd0;

  assign sel_9204 = 32'sd0;

  assign sel_9205 = 32'sd0;

  assign sel_9206 = 32'sd0;

  assign sel_9207 = 32'sd0;

  assign sel_9208 = 32'sd0;

  assign sel_9209 = 32'sd0;

  assign sel_9210 = 32'sd0;

  assign sel_9211 = 32'sd0;

  assign sel_9212 = 32'sd0;

  assign sel_9213 = 32'sd0;

  assign s_605 = 32'sd4;

  assign sel_1_1877 = (s_14 == 1'b0 ? sel_9213 :
              s_605);

  assign sel_9214 = 32'sd0;

  assign sel_1_1878 = (s_15 == 1'b0 ? sel_1_1877 :
              sel_9214);

  assign sel_9215 = 32'sd0;

  assign sel_1_1879 = (s_16 == 1'b0 ? sel_1_1878 :
              sel_9215);

  assign sel_9216 = 32'sd0;

  assign sel_1_1880 = (s_17 == 1'b0 ? sel_1_1879 :
              sel_9216);

  assign sel_9217 = 32'sd0;

  assign sel_1_1881 = (s_18 == 1'b0 ? sel_1_1880 :
              sel_9217);

  assign sel_9218 = 32'sd0;

  assign sel_1_1882 = (s_19 == 1'b0 ? sel_1_1881 :
              sel_9218);

  assign sel_9219 = 32'sd0;

  assign sel_1_1883 = (s_20 == 1'b0 ? sel_1_1882 :
              sel_9219);

  assign sel_9220 = 32'sd0;

  assign sel_9221 = 32'sd0;

  assign sel_9222 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1883, sel_9202, sel_9203, sel_9204, sel_9205, sel_9206,
       sel_9207, sel_9208, sel_9209, sel_9210, sel_9211, sel_9212, sel_9220,
       sel_9221, sel_9222) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1291_sel_1 = sel_9221;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1291_sel_1 = sel_9220;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1291_sel_1 = sel_1_1883;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1291_sel_1 = sel_9212;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1291_sel_1 = sel_9211;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1291_sel_1 = sel_9210;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1291_sel_1 = sel_9209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1291_sel_1 = sel_9208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1291_sel_1 = sel_9207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1291_sel_1 = sel_9206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1291_sel_1 = sel_9205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1291_sel_1 = sel_9204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1291_sel_1 = sel_9203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1291_sel_1 = sel_9202;
        end
      default :
        begin
          p1291_sel_1 = sel_9222;
        end
    endcase
    sel_1_1884 = p1291_sel_1;
  end

  assign cont_bits_42_34 = cont_bits_42_12[sel_1_1884];

  assign sel_1_1885 = (s_14 == 1'b0 ? cont_bits_41_34 :
              cont_bits_42_34);

  assign sel_9223 = 32'sd0;

  assign sel_9224 = 32'sd0;

  assign sel_9225 = 32'sd0;

  assign sel_9226 = 32'sd0;

  assign sel_9227 = 32'sd0;

  assign sel_9228 = 32'sd0;

  assign sel_9229 = 32'sd0;

  assign sel_9230 = 32'sd0;

  assign sel_9231 = 32'sd0;

  assign sel_9232 = 32'sd0;

  assign sel_9233 = 32'sd0;

  assign sel_9234 = 32'sd0;

  assign s_606 = 32'sd4;

  assign sel_1_1886 = (s_15 == 1'b0 ? sel_9234 :
              s_606);

  assign sel_9235 = 32'sd0;

  assign sel_1_1887 = (s_16 == 1'b0 ? sel_1_1886 :
              sel_9235);

  assign sel_9236 = 32'sd0;

  assign sel_1_1888 = (s_17 == 1'b0 ? sel_1_1887 :
              sel_9236);

  assign sel_9237 = 32'sd0;

  assign sel_1_1889 = (s_18 == 1'b0 ? sel_1_1888 :
              sel_9237);

  assign sel_9238 = 32'sd0;

  assign sel_1_1890 = (s_19 == 1'b0 ? sel_1_1889 :
              sel_9238);

  assign sel_9239 = 32'sd0;

  assign sel_1_1891 = (s_20 == 1'b0 ? sel_1_1890 :
              sel_9239);

  assign sel_9240 = 32'sd0;

  assign sel_9241 = 32'sd0;

  assign sel_9242 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1891, sel_9223, sel_9224, sel_9225, sel_9226, sel_9227,
       sel_9228, sel_9229, sel_9230, sel_9231, sel_9232, sel_9233, sel_9240,
       sel_9241, sel_9242) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1631_sel_1 = sel_9241;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1631_sel_1 = sel_9240;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1631_sel_1 = sel_1_1891;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1631_sel_1 = sel_9233;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1631_sel_1 = sel_9232;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1631_sel_1 = sel_9231;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1631_sel_1 = sel_9230;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1631_sel_1 = sel_9229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1631_sel_1 = sel_9228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1631_sel_1 = sel_9227;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1631_sel_1 = sel_9226;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1631_sel_1 = sel_9225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1631_sel_1 = sel_9224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1631_sel_1 = sel_9223;
        end
      default :
        begin
          p1631_sel_1 = sel_9242;
        end
    endcase
    sel_1_1892 = p1631_sel_1;
  end

  assign cont_bits_32_34 = cont_bits_32_12[sel_1_1892];

  assign sel_1_1893 = (s_15 == 1'b0 ? sel_1_1885 :
              cont_bits_32_34);

  assign sel_9243 = 32'sd0;

  assign sel_9244 = 32'sd0;

  assign sel_9245 = 32'sd0;

  assign sel_9246 = 32'sd0;

  assign sel_9247 = 32'sd0;

  assign sel_9248 = 32'sd0;

  assign sel_9249 = 32'sd0;

  assign sel_9250 = 32'sd0;

  assign sel_9251 = 32'sd0;

  assign sel_9252 = 32'sd0;

  assign sel_9253 = 32'sd0;

  assign sel_9254 = 32'sd0;

  assign s_607 = 32'sd4;

  assign sel_1_1894 = (s_16 == 1'b0 ? sel_9254 :
              s_607);

  assign sel_9255 = 32'sd0;

  assign sel_1_1895 = (s_17 == 1'b0 ? sel_1_1894 :
              sel_9255);

  assign sel_9256 = 32'sd0;

  assign sel_1_1896 = (s_18 == 1'b0 ? sel_1_1895 :
              sel_9256);

  assign sel_9257 = 32'sd0;

  assign sel_1_1897 = (s_19 == 1'b0 ? sel_1_1896 :
              sel_9257);

  assign sel_9258 = 32'sd0;

  assign sel_1_1898 = (s_20 == 1'b0 ? sel_1_1897 :
              sel_9258);

  assign sel_9259 = 32'sd0;

  assign sel_9260 = 32'sd0;

  assign sel_9261 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1898, sel_9243, sel_9244, sel_9245, sel_9246, sel_9247,
       sel_9248, sel_9249, sel_9250, sel_9251, sel_9252, sel_9253, sel_9259,
       sel_9260, sel_9261) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1121_sel_1 = sel_9260;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1121_sel_1 = sel_9259;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1121_sel_1 = sel_1_1898;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1121_sel_1 = sel_9253;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1121_sel_1 = sel_9252;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1121_sel_1 = sel_9251;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1121_sel_1 = sel_9250;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1121_sel_1 = sel_9249;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1121_sel_1 = sel_9248;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1121_sel_1 = sel_9247;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1121_sel_1 = sel_9246;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1121_sel_1 = sel_9245;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1121_sel_1 = sel_9244;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1121_sel_1 = sel_9243;
        end
      default :
        begin
          p1121_sel_1 = sel_9261;
        end
    endcase
    sel_1_1899 = p1121_sel_1;
  end

  assign cont_bits_31_34 = cont_bits_31_12[sel_1_1899];

  assign sel_1_1900 = (s_16 == 1'b0 ? sel_1_1893 :
              cont_bits_31_34);

  assign sel_9262 = 32'sd0;

  assign sel_9263 = 32'sd0;

  assign sel_9264 = 32'sd0;

  assign sel_9265 = 32'sd0;

  assign sel_9266 = 32'sd0;

  assign sel_9267 = 32'sd0;

  assign sel_9268 = 32'sd0;

  assign sel_9269 = 32'sd0;

  assign sel_9270 = 32'sd0;

  assign sel_9271 = 32'sd0;

  assign sel_9272 = 32'sd0;

  assign sel_9273 = 32'sd0;

  assign s_608 = 32'sd4;

  assign sel_1_1901 = (s_17 == 1'b0 ? sel_9273 :
              s_608);

  assign sel_9274 = 32'sd0;

  assign sel_1_1902 = (s_18 == 1'b0 ? sel_1_1901 :
              sel_9274);

  assign sel_9275 = 32'sd0;

  assign sel_1_1903 = (s_19 == 1'b0 ? sel_1_1902 :
              sel_9275);

  assign sel_9276 = 32'sd0;

  assign sel_1_1904 = (s_20 == 1'b0 ? sel_1_1903 :
              sel_9276);

  assign sel_9277 = 32'sd0;

  assign sel_9278 = 32'sd0;

  assign sel_9279 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1904, sel_9262, sel_9263, sel_9264, sel_9265, sel_9266,
       sel_9267, sel_9268, sel_9269, sel_9270, sel_9271, sel_9272, sel_9277,
       sel_9278, sel_9279) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1886_sel_1 = sel_9278;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1886_sel_1 = sel_9277;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1886_sel_1 = sel_1_1904;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1886_sel_1 = sel_9272;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1886_sel_1 = sel_9271;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1886_sel_1 = sel_9270;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1886_sel_1 = sel_9269;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1886_sel_1 = sel_9268;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1886_sel_1 = sel_9267;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1886_sel_1 = sel_9266;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1886_sel_1 = sel_9265;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1886_sel_1 = sel_9264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1886_sel_1 = sel_9263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1886_sel_1 = sel_9262;
        end
      default :
        begin
          p1886_sel_1 = sel_9279;
        end
    endcase
    sel_1_1905 = p1886_sel_1;
  end

  assign cont_bits_22_34 = cont_bits_22_12[sel_1_1905];

  assign sel_1_1906 = (s_17 == 1'b0 ? sel_1_1900 :
              cont_bits_22_34);

  assign sel_9280 = 32'sd0;

  assign sel_9281 = 32'sd0;

  assign sel_9282 = 32'sd0;

  assign sel_9283 = 32'sd0;

  assign sel_9284 = 32'sd0;

  assign sel_9285 = 32'sd0;

  assign sel_9286 = 32'sd0;

  assign sel_9287 = 32'sd0;

  assign sel_9288 = 32'sd0;

  assign sel_9289 = 32'sd0;

  assign sel_9290 = 32'sd0;

  assign sel_9291 = 32'sd0;

  assign s_609 = 32'sd4;

  assign sel_1_1907 = (s_18 == 1'b0 ? sel_9291 :
              s_609);

  assign sel_9292 = 32'sd0;

  assign sel_1_1908 = (s_19 == 1'b0 ? sel_1_1907 :
              sel_9292);

  assign sel_9293 = 32'sd0;

  assign sel_1_1909 = (s_20 == 1'b0 ? sel_1_1908 :
              sel_9293);

  assign sel_9294 = 32'sd0;

  assign sel_9295 = 32'sd0;

  assign sel_9296 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1909, sel_9280, sel_9281, sel_9282, sel_9283, sel_9284,
       sel_9285, sel_9286, sel_9287, sel_9288, sel_9289, sel_9290, sel_9294,
       sel_9295, sel_9296) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2498_sel_1 = sel_9295;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2498_sel_1 = sel_9294;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2498_sel_1 = sel_1_1909;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2498_sel_1 = sel_9290;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2498_sel_1 = sel_9289;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2498_sel_1 = sel_9288;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2498_sel_1 = sel_9287;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2498_sel_1 = sel_9286;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2498_sel_1 = sel_9285;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2498_sel_1 = sel_9284;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2498_sel_1 = sel_9283;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2498_sel_1 = sel_9282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2498_sel_1 = sel_9281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2498_sel_1 = sel_9280;
        end
      default :
        begin
          p2498_sel_1 = sel_9296;
        end
    endcase
    sel_1_1910 = p2498_sel_1;
  end

  assign cont_bits_21_34 = cont_bits_21_12[sel_1_1910];

  assign sel_1_1911 = (s_18 == 1'b0 ? sel_1_1906 :
              cont_bits_21_34);

  assign sel_9297 = 32'sd0;

  assign sel_9298 = 32'sd0;

  assign sel_9299 = 32'sd0;

  assign sel_9300 = 32'sd0;

  assign sel_9301 = 32'sd0;

  assign sel_9302 = 32'sd0;

  assign sel_9303 = 32'sd0;

  assign sel_9304 = 32'sd0;

  assign sel_9305 = 32'sd0;

  assign sel_9306 = 32'sd0;

  assign sel_9307 = 32'sd0;

  assign sel_9308 = 32'sd0;

  assign s_610 = 32'sd4;

  assign sel_1_1912 = (s_19 == 1'b0 ? sel_9308 :
              s_610);

  assign sel_9309 = 32'sd0;

  assign sel_1_1913 = (s_20 == 1'b0 ? sel_1_1912 :
              sel_9309);

  assign sel_9310 = 32'sd0;

  assign sel_9311 = 32'sd0;

  assign sel_9312 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1913, sel_9297, sel_9298, sel_9299, sel_9300, sel_9301,
       sel_9302, sel_9303, sel_9304, sel_9305, sel_9306, sel_9307, sel_9310,
       sel_9311, sel_9312) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1495_sel_1 = sel_9311;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1495_sel_1 = sel_9310;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1495_sel_1 = sel_1_1913;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1495_sel_1 = sel_9307;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1495_sel_1 = sel_9306;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1495_sel_1 = sel_9305;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1495_sel_1 = sel_9304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1495_sel_1 = sel_9303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1495_sel_1 = sel_9302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1495_sel_1 = sel_9301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1495_sel_1 = sel_9300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1495_sel_1 = sel_9299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1495_sel_1 = sel_9298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1495_sel_1 = sel_9297;
        end
      default :
        begin
          p1495_sel_1 = sel_9312;
        end
    endcase
    sel_1_1914 = p1495_sel_1;
  end

  assign cont_bits_12_34 = cont_bits_12_12[sel_1_1914];

  assign sel_1_1915 = (s_19 == 1'b0 ? sel_1_1911 :
              cont_bits_12_34);

  assign sel_9313 = 32'sd0;

  assign sel_9314 = 32'sd0;

  assign sel_9315 = 32'sd0;

  assign sel_9316 = 32'sd0;

  assign sel_9317 = 32'sd0;

  assign sel_9318 = 32'sd0;

  assign sel_9319 = 32'sd0;

  assign sel_9320 = 32'sd0;

  assign sel_9321 = 32'sd0;

  assign sel_9322 = 32'sd0;

  assign sel_9323 = 32'sd0;

  assign sel_9324 = 32'sd0;

  assign s_611 = 32'sd4;

  assign sel_1_1916 = (s_20 == 1'b0 ? sel_9324 :
              s_611);

  assign sel_9325 = 32'sd0;

  assign sel_9326 = 32'sd0;

  assign sel_9327 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1916, sel_9313, sel_9314, sel_9315, sel_9316, sel_9317,
       sel_9318, sel_9319, sel_9320, sel_9321, sel_9322, sel_9323, sel_9325,
       sel_9326, sel_9327) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2260_sel_1 = sel_9326;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2260_sel_1 = sel_9325;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2260_sel_1 = sel_1_1916;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2260_sel_1 = sel_9323;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2260_sel_1 = sel_9322;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2260_sel_1 = sel_9321;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2260_sel_1 = sel_9320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2260_sel_1 = sel_9319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2260_sel_1 = sel_9318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2260_sel_1 = sel_9317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2260_sel_1 = sel_9316;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2260_sel_1 = sel_9315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2260_sel_1 = sel_9314;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2260_sel_1 = sel_9313;
        end
      default :
        begin
          p2260_sel_1 = sel_9327;
        end
    endcase
    sel_1_1917 = p2260_sel_1;
  end

  assign cont_bits_39 = cont_bits_13[sel_1_1917];

  assign sel_1_1918 = (s_20 == 1'b0 ? sel_1_1915 :
              cont_bits_39);

  assign sel_9328 = 32'sd0;

  assign sel_9329 = 32'sd0;

  assign sel_9330 = 32'sd0;

  assign sel_9331 = 32'sd0;

  assign sel_9332 = 32'sd0;

  assign sel_9333 = 32'sd0;

  assign sel_9334 = 32'sd0;

  assign sel_9335 = 32'sd0;

  assign sel_9336 = 32'sd0;

  assign sel_9337 = 32'sd0;

  assign sel_9338 = 32'sd0;

  assign sel_9339 = 32'sd0;

  assign sel_9340 = 32'sd0;

  assign sel_9341 = 32'sd0;

  assign sel_9342 = 32'sd0;

  assign s_612 = 32'sd4;

  assign sel_1_1919 = (tmp_3 == 1'b0 ? sel_9342 :
              s_612);

  assign sel_9343 = 32'sd0;

  assign sel_1_1920 = (tmp_5 == 1'b0 ? sel_1_1919 :
              sel_9343);

  assign sel_9344 = 32'sd0;

  assign sel_1_1921 = (tmp_7 == 1'b0 ? sel_1_1920 :
              sel_9344);

  assign sel_9345 = 32'sd0;

  assign sel_1_1922 = (tmp_9 == 1'b0 ? sel_1_1921 :
              sel_9345);

  assign sel_9346 = 32'sd0;

  assign sel_1_1923 = (tmp_11 == 1'b0 ? sel_1_1922 :
              sel_9346);

  assign sel_9347 = 32'sd0;

  assign sel_1_1924 = (tmp_13 == 1'b0 ? sel_1_1923 :
              sel_9347);

  assign sel_9348 = 32'sd0;

  assign sel_1_1925 = (tmp_15 == 1'b0 ? sel_1_1924 :
              sel_9348);

  assign sel_9349 = 32'sd0;

  assign sel_1_1926 = (tmp_17 == 1'b0 ? sel_1_1925 :
              sel_9349);

  assign sel_1_1927 = (s_10 == 1'b0 ? sel_9341 :
              sel_1_1926);

  assign sel_1_1928 = (s_11 == 1'b0 ? sel_9340 :
              sel_1_1927);

  assign sel_9350 = 32'sd0;

  assign sel_1_1929 = (s_12 == 1'b0 ? sel_1_1928 :
              sel_9350);

  assign sel_9351 = 32'sd0;

  assign sel_9352 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1929, sel_9328, sel_9329, sel_9330, sel_9331, sel_9332,
       sel_9333, sel_9334, sel_9335, sel_9336, sel_9337, sel_9338, sel_9339,
       sel_9351, sel_9352) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3331_sel_1 = sel_9351;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3331_sel_1 = sel_1_1929;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3331_sel_1 = sel_9339;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3331_sel_1 = sel_9338;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3331_sel_1 = sel_9337;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3331_sel_1 = sel_9336;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3331_sel_1 = sel_9335;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3331_sel_1 = sel_9334;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3331_sel_1 = sel_9333;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3331_sel_1 = sel_9332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3331_sel_1 = sel_9331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3331_sel_1 = sel_9330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3331_sel_1 = sel_9329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3331_sel_1 = sel_9328;
        end
      default :
        begin
          p3331_sel_1 = sel_9352;
        end
    endcase
    sel_1_1930 = p3331_sel_1;
  end

  assign cont_bits_41_35 = cont_bits_41_26[sel_1_1930];

  assign sel_9353 = 32'sd0;

  assign sel_9354 = 32'sd0;

  assign sel_9355 = 32'sd0;

  assign sel_9356 = 32'sd0;

  assign sel_9357 = 32'sd0;

  assign sel_9358 = 32'sd0;

  assign sel_9359 = 32'sd0;

  assign sel_9360 = 32'sd0;

  assign sel_9361 = 32'sd0;

  assign sel_9362 = 32'sd0;

  assign sel_9363 = 32'sd0;

  assign sel_9364 = 32'sd0;

  assign sel_9365 = 32'sd0;

  assign sel_9366 = 32'sd0;

  assign sel_9367 = 32'sd0;

  assign s_613 = 32'sd4;

  assign sel_1_1931 = (tmp_5 == 1'b0 ? sel_9367 :
              s_613);

  assign sel_9368 = 32'sd0;

  assign sel_1_1932 = (tmp_7 == 1'b0 ? sel_1_1931 :
              sel_9368);

  assign sel_9369 = 32'sd0;

  assign sel_1_1933 = (tmp_9 == 1'b0 ? sel_1_1932 :
              sel_9369);

  assign sel_9370 = 32'sd0;

  assign sel_1_1934 = (tmp_11 == 1'b0 ? sel_1_1933 :
              sel_9370);

  assign sel_9371 = 32'sd0;

  assign sel_1_1935 = (tmp_13 == 1'b0 ? sel_1_1934 :
              sel_9371);

  assign sel_9372 = 32'sd0;

  assign sel_1_1936 = (tmp_15 == 1'b0 ? sel_1_1935 :
              sel_9372);

  assign sel_9373 = 32'sd0;

  assign sel_1_1937 = (tmp_17 == 1'b0 ? sel_1_1936 :
              sel_9373);

  assign sel_1_1938 = (s_10 == 1'b0 ? sel_9366 :
              sel_1_1937);

  assign sel_1_1939 = (s_11 == 1'b0 ? sel_9365 :
              sel_1_1938);

  assign sel_9374 = 32'sd0;

  assign sel_1_1940 = (s_12 == 1'b0 ? sel_1_1939 :
              sel_9374);

  assign sel_9375 = 32'sd0;

  assign sel_9376 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1940, sel_9353, sel_9354, sel_9355, sel_9356, sel_9357,
       sel_9358, sel_9359, sel_9360, sel_9361, sel_9362, sel_9363, sel_9364,
       sel_9375, sel_9376) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2940_sel_1 = sel_9375;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2940_sel_1 = sel_1_1940;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2940_sel_1 = sel_9364;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2940_sel_1 = sel_9363;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2940_sel_1 = sel_9362;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2940_sel_1 = sel_9361;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2940_sel_1 = sel_9360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2940_sel_1 = sel_9359;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2940_sel_1 = sel_9358;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2940_sel_1 = sel_9357;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2940_sel_1 = sel_9356;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2940_sel_1 = sel_9355;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2940_sel_1 = sel_9354;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2940_sel_1 = sel_9353;
        end
      default :
        begin
          p2940_sel_1 = sel_9376;
        end
    endcase
    sel_1_1941 = p2940_sel_1;
  end

  assign cont_bits_42_35 = cont_bits_42_26[sel_1_1941];

  assign sel_1_1942 = (tmp_5 == 1'b0 ? cont_bits_41_35 :
              cont_bits_42_35);

  assign sel_9377 = 32'sd0;

  assign sel_9378 = 32'sd0;

  assign sel_9379 = 32'sd0;

  assign sel_9380 = 32'sd0;

  assign sel_9381 = 32'sd0;

  assign sel_9382 = 32'sd0;

  assign sel_9383 = 32'sd0;

  assign sel_9384 = 32'sd0;

  assign sel_9385 = 32'sd0;

  assign sel_9386 = 32'sd0;

  assign sel_9387 = 32'sd0;

  assign sel_9388 = 32'sd0;

  assign sel_9389 = 32'sd0;

  assign sel_9390 = 32'sd0;

  assign sel_9391 = 32'sd0;

  assign s_614 = 32'sd4;

  assign sel_1_1943 = (tmp_7 == 1'b0 ? sel_9391 :
              s_614);

  assign sel_9392 = 32'sd0;

  assign sel_1_1944 = (tmp_9 == 1'b0 ? sel_1_1943 :
              sel_9392);

  assign sel_9393 = 32'sd0;

  assign sel_1_1945 = (tmp_11 == 1'b0 ? sel_1_1944 :
              sel_9393);

  assign sel_9394 = 32'sd0;

  assign sel_1_1946 = (tmp_13 == 1'b0 ? sel_1_1945 :
              sel_9394);

  assign sel_9395 = 32'sd0;

  assign sel_1_1947 = (tmp_15 == 1'b0 ? sel_1_1946 :
              sel_9395);

  assign sel_9396 = 32'sd0;

  assign sel_1_1948 = (tmp_17 == 1'b0 ? sel_1_1947 :
              sel_9396);

  assign sel_1_1949 = (s_10 == 1'b0 ? sel_9390 :
              sel_1_1948);

  assign sel_1_1950 = (s_11 == 1'b0 ? sel_9389 :
              sel_1_1949);

  assign sel_9397 = 32'sd0;

  assign sel_1_1951 = (s_12 == 1'b0 ? sel_1_1950 :
              sel_9397);

  assign sel_9398 = 32'sd0;

  assign sel_9399 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1951, sel_9377, sel_9378, sel_9379, sel_9380, sel_9381,
       sel_9382, sel_9383, sel_9384, sel_9385, sel_9386, sel_9387, sel_9388,
       sel_9398, sel_9399) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3518_sel_1 = sel_9398;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3518_sel_1 = sel_1_1951;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3518_sel_1 = sel_9388;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3518_sel_1 = sel_9387;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3518_sel_1 = sel_9386;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3518_sel_1 = sel_9385;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3518_sel_1 = sel_9384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3518_sel_1 = sel_9383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3518_sel_1 = sel_9382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3518_sel_1 = sel_9381;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3518_sel_1 = sel_9380;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3518_sel_1 = sel_9379;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3518_sel_1 = sel_9378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3518_sel_1 = sel_9377;
        end
      default :
        begin
          p3518_sel_1 = sel_9399;
        end
    endcase
    sel_1_1952 = p3518_sel_1;
  end

  assign cont_bits_32_35 = cont_bits_32_26[sel_1_1952];

  assign sel_1_1953 = (tmp_7 == 1'b0 ? sel_1_1942 :
              cont_bits_32_35);

  assign sel_9400 = 32'sd0;

  assign sel_9401 = 32'sd0;

  assign sel_9402 = 32'sd0;

  assign sel_9403 = 32'sd0;

  assign sel_9404 = 32'sd0;

  assign sel_9405 = 32'sd0;

  assign sel_9406 = 32'sd0;

  assign sel_9407 = 32'sd0;

  assign sel_9408 = 32'sd0;

  assign sel_9409 = 32'sd0;

  assign sel_9410 = 32'sd0;

  assign sel_9411 = 32'sd0;

  assign sel_9412 = 32'sd0;

  assign sel_9413 = 32'sd0;

  assign sel_9414 = 32'sd0;

  assign s_615 = 32'sd4;

  assign sel_1_1954 = (tmp_9 == 1'b0 ? sel_9414 :
              s_615);

  assign sel_9415 = 32'sd0;

  assign sel_1_1955 = (tmp_11 == 1'b0 ? sel_1_1954 :
              sel_9415);

  assign sel_9416 = 32'sd0;

  assign sel_1_1956 = (tmp_13 == 1'b0 ? sel_1_1955 :
              sel_9416);

  assign sel_9417 = 32'sd0;

  assign sel_1_1957 = (tmp_15 == 1'b0 ? sel_1_1956 :
              sel_9417);

  assign sel_9418 = 32'sd0;

  assign sel_1_1958 = (tmp_17 == 1'b0 ? sel_1_1957 :
              sel_9418);

  assign sel_1_1959 = (s_10 == 1'b0 ? sel_9413 :
              sel_1_1958);

  assign sel_1_1960 = (s_11 == 1'b0 ? sel_9412 :
              sel_1_1959);

  assign sel_9419 = 32'sd0;

  assign sel_1_1961 = (s_12 == 1'b0 ? sel_1_1960 :
              sel_9419);

  assign sel_9420 = 32'sd0;

  assign sel_9421 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1961, sel_9400, sel_9401, sel_9402, sel_9403, sel_9404,
       sel_9405, sel_9406, sel_9407, sel_9408, sel_9409, sel_9410, sel_9411,
       sel_9420, sel_9421) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4045_sel_1 = sel_9420;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4045_sel_1 = sel_1_1961;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4045_sel_1 = sel_9411;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4045_sel_1 = sel_9410;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4045_sel_1 = sel_9409;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4045_sel_1 = sel_9408;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4045_sel_1 = sel_9407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4045_sel_1 = sel_9406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4045_sel_1 = sel_9405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4045_sel_1 = sel_9404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4045_sel_1 = sel_9403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4045_sel_1 = sel_9402;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4045_sel_1 = sel_9401;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4045_sel_1 = sel_9400;
        end
      default :
        begin
          p4045_sel_1 = sel_9421;
        end
    endcase
    sel_1_1962 = p4045_sel_1;
  end

  assign cont_bits_31_35 = cont_bits_31_26[sel_1_1962];

  assign sel_1_1963 = (tmp_9 == 1'b0 ? sel_1_1953 :
              cont_bits_31_35);

  assign sel_9422 = 32'sd0;

  assign sel_9423 = 32'sd0;

  assign sel_9424 = 32'sd0;

  assign sel_9425 = 32'sd0;

  assign sel_9426 = 32'sd0;

  assign sel_9427 = 32'sd0;

  assign sel_9428 = 32'sd0;

  assign sel_9429 = 32'sd0;

  assign sel_9430 = 32'sd0;

  assign sel_9431 = 32'sd0;

  assign sel_9432 = 32'sd0;

  assign sel_9433 = 32'sd0;

  assign sel_9434 = 32'sd0;

  assign sel_9435 = 32'sd0;

  assign sel_9436 = 32'sd0;

  assign s_616 = 32'sd4;

  assign sel_1_1964 = (tmp_11 == 1'b0 ? sel_9436 :
              s_616);

  assign sel_9437 = 32'sd0;

  assign sel_1_1965 = (tmp_13 == 1'b0 ? sel_1_1964 :
              sel_9437);

  assign sel_9438 = 32'sd0;

  assign sel_1_1966 = (tmp_15 == 1'b0 ? sel_1_1965 :
              sel_9438);

  assign sel_9439 = 32'sd0;

  assign sel_1_1967 = (tmp_17 == 1'b0 ? sel_1_1966 :
              sel_9439);

  assign sel_1_1968 = (s_10 == 1'b0 ? sel_9435 :
              sel_1_1967);

  assign sel_1_1969 = (s_11 == 1'b0 ? sel_9434 :
              sel_1_1968);

  assign sel_9440 = 32'sd0;

  assign sel_1_1970 = (s_12 == 1'b0 ? sel_1_1969 :
              sel_9440);

  assign sel_9441 = 32'sd0;

  assign sel_9442 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1970, sel_9422, sel_9423, sel_9424, sel_9425, sel_9426,
       sel_9427, sel_9428, sel_9429, sel_9430, sel_9431, sel_9432, sel_9433,
       sel_9441, sel_9442) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3824_sel_1 = sel_9441;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3824_sel_1 = sel_1_1970;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3824_sel_1 = sel_9433;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3824_sel_1 = sel_9432;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3824_sel_1 = sel_9431;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3824_sel_1 = sel_9430;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3824_sel_1 = sel_9429;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3824_sel_1 = sel_9428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3824_sel_1 = sel_9427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3824_sel_1 = sel_9426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3824_sel_1 = sel_9425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3824_sel_1 = sel_9424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3824_sel_1 = sel_9423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3824_sel_1 = sel_9422;
        end
      default :
        begin
          p3824_sel_1 = sel_9442;
        end
    endcase
    sel_1_1971 = p3824_sel_1;
  end

  assign cont_bits_22_35 = cont_bits_22_26[sel_1_1971];

  assign sel_1_1972 = (tmp_11 == 1'b0 ? sel_1_1963 :
              cont_bits_22_35);

  assign sel_9443 = 32'sd0;

  assign sel_9444 = 32'sd0;

  assign sel_9445 = 32'sd0;

  assign sel_9446 = 32'sd0;

  assign sel_9447 = 32'sd0;

  assign sel_9448 = 32'sd0;

  assign sel_9449 = 32'sd0;

  assign sel_9450 = 32'sd0;

  assign sel_9451 = 32'sd0;

  assign sel_9452 = 32'sd0;

  assign sel_9453 = 32'sd0;

  assign sel_9454 = 32'sd0;

  assign sel_9455 = 32'sd0;

  assign sel_9456 = 32'sd0;

  assign sel_9457 = 32'sd0;

  assign s_617 = 32'sd4;

  assign sel_1_1973 = (tmp_13 == 1'b0 ? sel_9457 :
              s_617);

  assign sel_9458 = 32'sd0;

  assign sel_1_1974 = (tmp_15 == 1'b0 ? sel_1_1973 :
              sel_9458);

  assign sel_9459 = 32'sd0;

  assign sel_1_1975 = (tmp_17 == 1'b0 ? sel_1_1974 :
              sel_9459);

  assign sel_1_1976 = (s_10 == 1'b0 ? sel_9456 :
              sel_1_1975);

  assign sel_1_1977 = (s_11 == 1'b0 ? sel_9455 :
              sel_1_1976);

  assign sel_9460 = 32'sd0;

  assign sel_1_1978 = (s_12 == 1'b0 ? sel_1_1977 :
              sel_9460);

  assign sel_9461 = 32'sd0;

  assign sel_9462 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1978, sel_9443, sel_9444, sel_9445, sel_9446, sel_9447,
       sel_9448, sel_9449, sel_9450, sel_9451, sel_9452, sel_9453, sel_9454,
       sel_9461, sel_9462) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3110_sel_1 = sel_9461;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3110_sel_1 = sel_1_1978;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3110_sel_1 = sel_9454;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3110_sel_1 = sel_9453;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3110_sel_1 = sel_9452;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3110_sel_1 = sel_9451;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3110_sel_1 = sel_9450;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3110_sel_1 = sel_9449;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3110_sel_1 = sel_9448;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3110_sel_1 = sel_9447;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3110_sel_1 = sel_9446;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3110_sel_1 = sel_9445;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3110_sel_1 = sel_9444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3110_sel_1 = sel_9443;
        end
      default :
        begin
          p3110_sel_1 = sel_9462;
        end
    endcase
    sel_1_1979 = p3110_sel_1;
  end

  assign cont_bits_21_35 = cont_bits_21_26[sel_1_1979];

  assign sel_1_1980 = (tmp_13 == 1'b0 ? sel_1_1972 :
              cont_bits_21_35);

  assign sel_9463 = 32'sd0;

  assign sel_9464 = 32'sd0;

  assign sel_9465 = 32'sd0;

  assign sel_9466 = 32'sd0;

  assign sel_9467 = 32'sd0;

  assign sel_9468 = 32'sd0;

  assign sel_9469 = 32'sd0;

  assign sel_9470 = 32'sd0;

  assign sel_9471 = 32'sd0;

  assign sel_9472 = 32'sd0;

  assign sel_9473 = 32'sd0;

  assign sel_9474 = 32'sd0;

  assign sel_9475 = 32'sd0;

  assign sel_9476 = 32'sd0;

  assign sel_9477 = 32'sd0;

  assign s_618 = 32'sd4;

  assign sel_1_1981 = (tmp_15 == 1'b0 ? sel_9477 :
              s_618);

  assign sel_9478 = 32'sd0;

  assign sel_1_1982 = (tmp_17 == 1'b0 ? sel_1_1981 :
              sel_9478);

  assign sel_1_1983 = (s_10 == 1'b0 ? sel_9476 :
              sel_1_1982);

  assign sel_1_1984 = (s_11 == 1'b0 ? sel_9475 :
              sel_1_1983);

  assign sel_9479 = 32'sd0;

  assign sel_1_1985 = (s_12 == 1'b0 ? sel_1_1984 :
              sel_9479);

  assign sel_9480 = 32'sd0;

  assign sel_9481 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1985, sel_9463, sel_9464, sel_9465, sel_9466, sel_9467,
       sel_9468, sel_9469, sel_9470, sel_9471, sel_9472, sel_9473, sel_9474,
       sel_9480, sel_9481) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3739_sel_1 = sel_9480;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3739_sel_1 = sel_1_1985;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3739_sel_1 = sel_9474;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3739_sel_1 = sel_9473;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3739_sel_1 = sel_9472;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3739_sel_1 = sel_9471;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3739_sel_1 = sel_9470;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3739_sel_1 = sel_9469;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3739_sel_1 = sel_9468;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3739_sel_1 = sel_9467;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3739_sel_1 = sel_9466;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3739_sel_1 = sel_9465;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3739_sel_1 = sel_9464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3739_sel_1 = sel_9463;
        end
      default :
        begin
          p3739_sel_1 = sel_9481;
        end
    endcase
    sel_1_1986 = p3739_sel_1;
  end

  assign cont_bits_12_35 = cont_bits_12_26[sel_1_1986];

  assign sel_1_1987 = (tmp_15 == 1'b0 ? sel_1_1980 :
              cont_bits_12_35);

  assign sel_9482 = 32'sd0;

  assign sel_9483 = 32'sd0;

  assign sel_9484 = 32'sd0;

  assign sel_9485 = 32'sd0;

  assign sel_9486 = 32'sd0;

  assign sel_9487 = 32'sd0;

  assign sel_9488 = 32'sd0;

  assign sel_9489 = 32'sd0;

  assign sel_9490 = 32'sd0;

  assign sel_9491 = 32'sd0;

  assign sel_9492 = 32'sd0;

  assign sel_9493 = 32'sd0;

  assign sel_9494 = 32'sd0;

  assign sel_9495 = 32'sd0;

  assign sel_9496 = 32'sd0;

  assign s_619 = 32'sd4;

  assign sel_1_1988 = (tmp_17 == 1'b0 ? sel_9496 :
              s_619);

  assign sel_1_1989 = (s_10 == 1'b0 ? sel_9495 :
              sel_1_1988);

  assign sel_1_1990 = (s_11 == 1'b0 ? sel_9494 :
              sel_1_1989);

  assign sel_9497 = 32'sd0;

  assign sel_1_1991 = (s_12 == 1'b0 ? sel_1_1990 :
              sel_9497);

  assign sel_9498 = 32'sd0;

  assign sel_9499 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_1991, sel_9482, sel_9483, sel_9484, sel_9485, sel_9486,
       sel_9487, sel_9488, sel_9489, sel_9490, sel_9491, sel_9492, sel_9493,
       sel_9498, sel_9499) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2668_sel_1 = sel_9498;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2668_sel_1 = sel_1_1991;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2668_sel_1 = sel_9493;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2668_sel_1 = sel_9492;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2668_sel_1 = sel_9491;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2668_sel_1 = sel_9490;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2668_sel_1 = sel_9489;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2668_sel_1 = sel_9488;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2668_sel_1 = sel_9487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2668_sel_1 = sel_9486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2668_sel_1 = sel_9485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2668_sel_1 = sel_9484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2668_sel_1 = sel_9483;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2668_sel_1 = sel_9482;
        end
      default :
        begin
          p2668_sel_1 = sel_9499;
        end
    endcase
    sel_1_1992 = p2668_sel_1;
  end

  assign cont_bits_40 = cont_bits_29[sel_1_1992];

  assign sel_1_1993 = (tmp_17 == 1'b0 ? sel_1_1987 :
              cont_bits_40);

  assign sel_9500 = 1'b0;

  assign sel_9501 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1_1918, sel_1_1993, sel_9169, sel_9170, sel_9171, sel_9172,
       sel_9173, sel_9174, sel_9175, sel_9176, sel_9177, sel_9178, sel_9179,
       sel_9500, sel_9501) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p511_sel_1 = sel_9500;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p511_sel_1 = sel_1_1993;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p511_sel_1 = sel_1_1918;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p511_sel_1 = sel_9179;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p511_sel_1 = sel_9178;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p511_sel_1 = sel_9177;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p511_sel_1 = sel_9176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p511_sel_1 = sel_9175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p511_sel_1 = sel_9174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p511_sel_1 = sel_9173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p511_sel_1 = sel_9172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p511_sel_1 = sel_9171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p511_sel_1 = sel_9170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p511_sel_1 = sel_9169;
        end
      default :
        begin
          p511_sel_1 = sel_9501;
        end
    endcase
    sel_1_1994 = p511_sel_1;
  end

  assign sel_9502 = 1'b0;

  assign sel_9503 = 1'b0;

  assign sel_9504 = 1'b0;

  assign sel_9505 = 1'b0;

  assign sel_9506 = 1'b0;

  assign sel_9507 = 1'b0;

  assign sel_9508 = 1'b0;

  assign sel_9509 = 1'b0;

  assign sel_9510 = 1'b0;

  assign sel_9511 = 1'b0;

  assign sel_9512 = 1'b0;

  assign sel_9513 = 1'b0;

  assign s_620 = 1'b1;

  assign sel_2_1505 = (s_13 == 1'b0 ? sel_9513 :
              s_620);

  assign s_621 = 1'b1;

  assign sel_2_1506 = (s_14 == 1'b0 ? sel_2_1505 :
              s_621);

  assign s_622 = 1'b1;

  assign sel_2_1507 = (s_15 == 1'b0 ? sel_2_1506 :
              s_622);

  assign s_623 = 1'b1;

  assign sel_2_1508 = (s_16 == 1'b0 ? sel_2_1507 :
              s_623);

  assign s_624 = 1'b1;

  assign sel_2_1509 = (s_17 == 1'b0 ? sel_2_1508 :
              s_624);

  assign s_625 = 1'b1;

  assign sel_2_1510 = (s_18 == 1'b0 ? sel_2_1509 :
              s_625);

  assign s_626 = 1'b1;

  assign sel_2_1511 = (s_19 == 1'b0 ? sel_2_1510 :
              s_626);

  assign s_627 = 1'b1;

  assign sel_2_1512 = (s_20 == 1'b0 ? sel_2_1511 :
              s_627);

  assign sel_9514 = 1'b0;

  assign sel_9515 = 1'b0;

  assign sel_9516 = 1'b0;

  assign s_628 = 1'b1;

  assign sel_2_1513 = (tmp_3 == 1'b0 ? sel_9516 :
              s_628);

  assign s_629 = 1'b1;

  assign sel_2_1514 = (tmp_5 == 1'b0 ? sel_2_1513 :
              s_629);

  assign s_630 = 1'b1;

  assign sel_2_1515 = (tmp_7 == 1'b0 ? sel_2_1514 :
              s_630);

  assign s_631 = 1'b1;

  assign sel_2_1516 = (tmp_9 == 1'b0 ? sel_2_1515 :
              s_631);

  assign s_632 = 1'b1;

  assign sel_2_1517 = (tmp_11 == 1'b0 ? sel_2_1516 :
              s_632);

  assign s_633 = 1'b1;

  assign sel_2_1518 = (tmp_13 == 1'b0 ? sel_2_1517 :
              s_633);

  assign s_634 = 1'b1;

  assign sel_2_1519 = (tmp_15 == 1'b0 ? sel_2_1518 :
              s_634);

  assign s_635 = 1'b1;

  assign sel_2_1520 = (tmp_17 == 1'b0 ? sel_2_1519 :
              s_635);

  assign sel_2_1521 = (s_10 == 1'b0 ? sel_9515 :
              sel_2_1520);

  assign sel_2_1522 = (s_11 == 1'b0 ? sel_9514 :
              sel_2_1521);

  assign sel_9517 = 1'b0;

  assign sel_2_1523 = (s_12 == 1'b0 ? sel_2_1522 :
              sel_9517);

  assign sel_9518 = 1'b0;

  assign sel_9519 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1512, sel_2_1523, sel_9502, sel_9503, sel_9504, sel_9505,
       sel_9506, sel_9507, sel_9508, sel_9509, sel_9510, sel_9511, sel_9512,
       sel_9518, sel_9519) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p496_sel_2 = sel_9518;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p496_sel_2 = sel_2_1523;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p496_sel_2 = sel_2_1512;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p496_sel_2 = sel_9512;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p496_sel_2 = sel_9511;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p496_sel_2 = sel_9510;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p496_sel_2 = sel_9509;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p496_sel_2 = sel_9508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p496_sel_2 = sel_9507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p496_sel_2 = sel_9506;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p496_sel_2 = sel_9505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p496_sel_2 = sel_9504;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p496_sel_2 = sel_9503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p496_sel_2 = sel_9502;
        end
      default :
        begin
          p496_sel_2 = sel_9519;
        end
    endcase
    sel_2_1524 = p496_sel_2;
  end

  assign sel_9520 = 1'b0;

  assign sel_9521 = 1'b0;

  assign sel_9522 = 1'b0;

  assign sel_9523 = 1'b0;

  assign sel_9524 = 1'b0;

  assign sel_9525 = 1'b0;

  assign sel_9526 = 1'b0;

  assign sel_9527 = 1'b0;

  assign sel_9528 = 1'b0;

  assign sel_9529 = 1'b0;

  assign sel_9530 = 1'b0;

  assign sel_9531 = 32'sd0;

  assign sel_9532 = 32'sd0;

  assign sel_9533 = 32'sd0;

  assign sel_9534 = 32'sd0;

  assign sel_9535 = 32'sd0;

  assign sel_9536 = 32'sd0;

  assign sel_9537 = 32'sd0;

  assign sel_9538 = 32'sd0;

  assign sel_9539 = 32'sd0;

  assign sel_9540 = 32'sd0;

  assign sel_9541 = 32'sd0;

  assign sel_9542 = 32'sd0;

  assign s_636 = 32'sd5;

  assign sel_1_1995 = (s_13 == 1'b0 ? sel_9542 :
              s_636);

  assign sel_9543 = 32'sd0;

  assign sel_1_1996 = (s_14 == 1'b0 ? sel_1_1995 :
              sel_9543);

  assign sel_9544 = 32'sd0;

  assign sel_1_1997 = (s_15 == 1'b0 ? sel_1_1996 :
              sel_9544);

  assign sel_9545 = 32'sd0;

  assign sel_1_1998 = (s_16 == 1'b0 ? sel_1_1997 :
              sel_9545);

  assign sel_9546 = 32'sd0;

  assign sel_1_1999 = (s_17 == 1'b0 ? sel_1_1998 :
              sel_9546);

  assign sel_9547 = 32'sd0;

  assign sel_1_2000 = (s_18 == 1'b0 ? sel_1_1999 :
              sel_9547);

  assign sel_9548 = 32'sd0;

  assign sel_1_2001 = (s_19 == 1'b0 ? sel_1_2000 :
              sel_9548);

  assign sel_9549 = 32'sd0;

  assign sel_1_2002 = (s_20 == 1'b0 ? sel_1_2001 :
              sel_9549);

  assign sel_9550 = 32'sd0;

  assign sel_9551 = 32'sd0;

  assign sel_9552 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2002, sel_9531, sel_9532, sel_9533, sel_9534, sel_9535,
       sel_9536, sel_9537, sel_9538, sel_9539, sel_9540, sel_9541, sel_9550,
       sel_9551, sel_9552) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2090_sel_1 = sel_9551;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2090_sel_1 = sel_9550;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2090_sel_1 = sel_1_2002;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2090_sel_1 = sel_9541;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2090_sel_1 = sel_9540;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2090_sel_1 = sel_9539;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2090_sel_1 = sel_9538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2090_sel_1 = sel_9537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2090_sel_1 = sel_9536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2090_sel_1 = sel_9535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2090_sel_1 = sel_9534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2090_sel_1 = sel_9533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2090_sel_1 = sel_9532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2090_sel_1 = sel_9531;
        end
      default :
        begin
          p2090_sel_1 = sel_9552;
        end
    endcase
    sel_1_2003 = p2090_sel_1;
  end

  assign cont_bits_41_36 = cont_bits_41_12[sel_1_2003];

  assign sel_9553 = 32'sd0;

  assign sel_9554 = 32'sd0;

  assign sel_9555 = 32'sd0;

  assign sel_9556 = 32'sd0;

  assign sel_9557 = 32'sd0;

  assign sel_9558 = 32'sd0;

  assign sel_9559 = 32'sd0;

  assign sel_9560 = 32'sd0;

  assign sel_9561 = 32'sd0;

  assign sel_9562 = 32'sd0;

  assign sel_9563 = 32'sd0;

  assign sel_9564 = 32'sd0;

  assign s_637 = 32'sd5;

  assign sel_1_2004 = (s_14 == 1'b0 ? sel_9564 :
              s_637);

  assign sel_9565 = 32'sd0;

  assign sel_1_2005 = (s_15 == 1'b0 ? sel_1_2004 :
              sel_9565);

  assign sel_9566 = 32'sd0;

  assign sel_1_2006 = (s_16 == 1'b0 ? sel_1_2005 :
              sel_9566);

  assign sel_9567 = 32'sd0;

  assign sel_1_2007 = (s_17 == 1'b0 ? sel_1_2006 :
              sel_9567);

  assign sel_9568 = 32'sd0;

  assign sel_1_2008 = (s_18 == 1'b0 ? sel_1_2007 :
              sel_9568);

  assign sel_9569 = 32'sd0;

  assign sel_1_2009 = (s_19 == 1'b0 ? sel_1_2008 :
              sel_9569);

  assign sel_9570 = 32'sd0;

  assign sel_1_2010 = (s_20 == 1'b0 ? sel_1_2009 :
              sel_9570);

  assign sel_9571 = 32'sd0;

  assign sel_9572 = 32'sd0;

  assign sel_9573 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2010, sel_9553, sel_9554, sel_9555, sel_9556, sel_9557,
       sel_9558, sel_9559, sel_9560, sel_9561, sel_9562, sel_9563, sel_9571,
       sel_9572, sel_9573) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1274_sel_1 = sel_9572;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1274_sel_1 = sel_9571;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1274_sel_1 = sel_1_2010;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1274_sel_1 = sel_9563;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1274_sel_1 = sel_9562;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1274_sel_1 = sel_9561;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1274_sel_1 = sel_9560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1274_sel_1 = sel_9559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1274_sel_1 = sel_9558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1274_sel_1 = sel_9557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1274_sel_1 = sel_9556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1274_sel_1 = sel_9555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1274_sel_1 = sel_9554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1274_sel_1 = sel_9553;
        end
      default :
        begin
          p1274_sel_1 = sel_9573;
        end
    endcase
    sel_1_2011 = p1274_sel_1;
  end

  assign cont_bits_42_36 = cont_bits_42_12[sel_1_2011];

  assign sel_1_2012 = (s_14 == 1'b0 ? cont_bits_41_36 :
              cont_bits_42_36);

  assign sel_9574 = 32'sd0;

  assign sel_9575 = 32'sd0;

  assign sel_9576 = 32'sd0;

  assign sel_9577 = 32'sd0;

  assign sel_9578 = 32'sd0;

  assign sel_9579 = 32'sd0;

  assign sel_9580 = 32'sd0;

  assign sel_9581 = 32'sd0;

  assign sel_9582 = 32'sd0;

  assign sel_9583 = 32'sd0;

  assign sel_9584 = 32'sd0;

  assign sel_9585 = 32'sd0;

  assign s_638 = 32'sd5;

  assign sel_1_2013 = (s_15 == 1'b0 ? sel_9585 :
              s_638);

  assign sel_9586 = 32'sd0;

  assign sel_1_2014 = (s_16 == 1'b0 ? sel_1_2013 :
              sel_9586);

  assign sel_9587 = 32'sd0;

  assign sel_1_2015 = (s_17 == 1'b0 ? sel_1_2014 :
              sel_9587);

  assign sel_9588 = 32'sd0;

  assign sel_1_2016 = (s_18 == 1'b0 ? sel_1_2015 :
              sel_9588);

  assign sel_9589 = 32'sd0;

  assign sel_1_2017 = (s_19 == 1'b0 ? sel_1_2016 :
              sel_9589);

  assign sel_9590 = 32'sd0;

  assign sel_1_2018 = (s_20 == 1'b0 ? sel_1_2017 :
              sel_9590);

  assign sel_9591 = 32'sd0;

  assign sel_9592 = 32'sd0;

  assign sel_9593 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2018, sel_9574, sel_9575, sel_9576, sel_9577, sel_9578,
       sel_9579, sel_9580, sel_9581, sel_9582, sel_9583, sel_9584, sel_9591,
       sel_9592, sel_9593) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1767_sel_1 = sel_9592;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1767_sel_1 = sel_9591;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1767_sel_1 = sel_1_2018;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1767_sel_1 = sel_9584;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1767_sel_1 = sel_9583;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1767_sel_1 = sel_9582;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1767_sel_1 = sel_9581;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1767_sel_1 = sel_9580;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1767_sel_1 = sel_9579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1767_sel_1 = sel_9578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1767_sel_1 = sel_9577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1767_sel_1 = sel_9576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1767_sel_1 = sel_9575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1767_sel_1 = sel_9574;
        end
      default :
        begin
          p1767_sel_1 = sel_9593;
        end
    endcase
    sel_1_2019 = p1767_sel_1;
  end

  assign cont_bits_32_36 = cont_bits_32_12[sel_1_2019];

  assign sel_1_2020 = (s_15 == 1'b0 ? sel_1_2012 :
              cont_bits_32_36);

  assign sel_9594 = 32'sd0;

  assign sel_9595 = 32'sd0;

  assign sel_9596 = 32'sd0;

  assign sel_9597 = 32'sd0;

  assign sel_9598 = 32'sd0;

  assign sel_9599 = 32'sd0;

  assign sel_9600 = 32'sd0;

  assign sel_9601 = 32'sd0;

  assign sel_9602 = 32'sd0;

  assign sel_9603 = 32'sd0;

  assign sel_9604 = 32'sd0;

  assign sel_9605 = 32'sd0;

  assign s_639 = 32'sd5;

  assign sel_1_2021 = (s_16 == 1'b0 ? sel_9605 :
              s_639);

  assign sel_9606 = 32'sd0;

  assign sel_1_2022 = (s_17 == 1'b0 ? sel_1_2021 :
              sel_9606);

  assign sel_9607 = 32'sd0;

  assign sel_1_2023 = (s_18 == 1'b0 ? sel_1_2022 :
              sel_9607);

  assign sel_9608 = 32'sd0;

  assign sel_1_2024 = (s_19 == 1'b0 ? sel_1_2023 :
              sel_9608);

  assign sel_9609 = 32'sd0;

  assign sel_1_2025 = (s_20 == 1'b0 ? sel_1_2024 :
              sel_9609);

  assign sel_9610 = 32'sd0;

  assign sel_9611 = 32'sd0;

  assign sel_9612 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2025, sel_9594, sel_9595, sel_9596, sel_9597, sel_9598,
       sel_9599, sel_9600, sel_9601, sel_9602, sel_9603, sel_9604, sel_9610,
       sel_9611, sel_9612) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1104_sel_1 = sel_9611;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1104_sel_1 = sel_9610;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1104_sel_1 = sel_1_2025;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1104_sel_1 = sel_9604;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1104_sel_1 = sel_9603;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1104_sel_1 = sel_9602;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1104_sel_1 = sel_9601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1104_sel_1 = sel_9600;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1104_sel_1 = sel_9599;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1104_sel_1 = sel_9598;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1104_sel_1 = sel_9597;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1104_sel_1 = sel_9596;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1104_sel_1 = sel_9595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1104_sel_1 = sel_9594;
        end
      default :
        begin
          p1104_sel_1 = sel_9612;
        end
    endcase
    sel_1_2026 = p1104_sel_1;
  end

  assign cont_bits_31_36 = cont_bits_31_12[sel_1_2026];

  assign sel_1_2027 = (s_16 == 1'b0 ? sel_1_2020 :
              cont_bits_31_36);

  assign sel_9613 = 32'sd0;

  assign sel_9614 = 32'sd0;

  assign sel_9615 = 32'sd0;

  assign sel_9616 = 32'sd0;

  assign sel_9617 = 32'sd0;

  assign sel_9618 = 32'sd0;

  assign sel_9619 = 32'sd0;

  assign sel_9620 = 32'sd0;

  assign sel_9621 = 32'sd0;

  assign sel_9622 = 32'sd0;

  assign sel_9623 = 32'sd0;

  assign sel_9624 = 32'sd0;

  assign s_640 = 32'sd5;

  assign sel_1_2028 = (s_17 == 1'b0 ? sel_9624 :
              s_640);

  assign sel_9625 = 32'sd0;

  assign sel_1_2029 = (s_18 == 1'b0 ? sel_1_2028 :
              sel_9625);

  assign sel_9626 = 32'sd0;

  assign sel_1_2030 = (s_19 == 1'b0 ? sel_1_2029 :
              sel_9626);

  assign sel_9627 = 32'sd0;

  assign sel_1_2031 = (s_20 == 1'b0 ? sel_1_2030 :
              sel_9627);

  assign sel_9628 = 32'sd0;

  assign sel_9629 = 32'sd0;

  assign sel_9630 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2031, sel_9613, sel_9614, sel_9615, sel_9616, sel_9617,
       sel_9618, sel_9619, sel_9620, sel_9621, sel_9622, sel_9623, sel_9628,
       sel_9629, sel_9630) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1954_sel_1 = sel_9629;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1954_sel_1 = sel_9628;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1954_sel_1 = sel_1_2031;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1954_sel_1 = sel_9623;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1954_sel_1 = sel_9622;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1954_sel_1 = sel_9621;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1954_sel_1 = sel_9620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1954_sel_1 = sel_9619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1954_sel_1 = sel_9618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1954_sel_1 = sel_9617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1954_sel_1 = sel_9616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1954_sel_1 = sel_9615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1954_sel_1 = sel_9614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1954_sel_1 = sel_9613;
        end
      default :
        begin
          p1954_sel_1 = sel_9630;
        end
    endcase
    sel_1_2032 = p1954_sel_1;
  end

  assign cont_bits_22_36 = cont_bits_22_12[sel_1_2032];

  assign sel_1_2033 = (s_17 == 1'b0 ? sel_1_2027 :
              cont_bits_22_36);

  assign sel_9631 = 32'sd0;

  assign sel_9632 = 32'sd0;

  assign sel_9633 = 32'sd0;

  assign sel_9634 = 32'sd0;

  assign sel_9635 = 32'sd0;

  assign sel_9636 = 32'sd0;

  assign sel_9637 = 32'sd0;

  assign sel_9638 = 32'sd0;

  assign sel_9639 = 32'sd0;

  assign sel_9640 = 32'sd0;

  assign sel_9641 = 32'sd0;

  assign sel_9642 = 32'sd0;

  assign s_641 = 32'sd5;

  assign sel_1_2034 = (s_18 == 1'b0 ? sel_9642 :
              s_641);

  assign sel_9643 = 32'sd0;

  assign sel_1_2035 = (s_19 == 1'b0 ? sel_1_2034 :
              sel_9643);

  assign sel_9644 = 32'sd0;

  assign sel_1_2036 = (s_20 == 1'b0 ? sel_1_2035 :
              sel_9644);

  assign sel_9645 = 32'sd0;

  assign sel_9646 = 32'sd0;

  assign sel_9647 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2036, sel_9631, sel_9632, sel_9633, sel_9634, sel_9635,
       sel_9636, sel_9637, sel_9638, sel_9639, sel_9640, sel_9641, sel_9645,
       sel_9646, sel_9647) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2481_sel_1 = sel_9646;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2481_sel_1 = sel_9645;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2481_sel_1 = sel_1_2036;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2481_sel_1 = sel_9641;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2481_sel_1 = sel_9640;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2481_sel_1 = sel_9639;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2481_sel_1 = sel_9638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2481_sel_1 = sel_9637;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2481_sel_1 = sel_9636;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2481_sel_1 = sel_9635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2481_sel_1 = sel_9634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2481_sel_1 = sel_9633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2481_sel_1 = sel_9632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2481_sel_1 = sel_9631;
        end
      default :
        begin
          p2481_sel_1 = sel_9647;
        end
    endcase
    sel_1_2037 = p2481_sel_1;
  end

  assign cont_bits_21_36 = cont_bits_21_12[sel_1_2037];

  assign sel_1_2038 = (s_18 == 1'b0 ? sel_1_2033 :
              cont_bits_21_36);

  assign sel_9648 = 32'sd0;

  assign sel_9649 = 32'sd0;

  assign sel_9650 = 32'sd0;

  assign sel_9651 = 32'sd0;

  assign sel_9652 = 32'sd0;

  assign sel_9653 = 32'sd0;

  assign sel_9654 = 32'sd0;

  assign sel_9655 = 32'sd0;

  assign sel_9656 = 32'sd0;

  assign sel_9657 = 32'sd0;

  assign sel_9658 = 32'sd0;

  assign sel_9659 = 32'sd0;

  assign s_642 = 32'sd5;

  assign sel_1_2039 = (s_19 == 1'b0 ? sel_9659 :
              s_642);

  assign sel_9660 = 32'sd0;

  assign sel_1_2040 = (s_20 == 1'b0 ? sel_1_2039 :
              sel_9660);

  assign sel_9661 = 32'sd0;

  assign sel_9662 = 32'sd0;

  assign sel_9663 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2040, sel_9648, sel_9649, sel_9650, sel_9651, sel_9652,
       sel_9653, sel_9654, sel_9655, sel_9656, sel_9657, sel_9658, sel_9661,
       sel_9662, sel_9663) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1461_sel_1 = sel_9662;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1461_sel_1 = sel_9661;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1461_sel_1 = sel_1_2040;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1461_sel_1 = sel_9658;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1461_sel_1 = sel_9657;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1461_sel_1 = sel_9656;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1461_sel_1 = sel_9655;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1461_sel_1 = sel_9654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1461_sel_1 = sel_9653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1461_sel_1 = sel_9652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1461_sel_1 = sel_9651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1461_sel_1 = sel_9650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1461_sel_1 = sel_9649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1461_sel_1 = sel_9648;
        end
      default :
        begin
          p1461_sel_1 = sel_9663;
        end
    endcase
    sel_1_2041 = p1461_sel_1;
  end

  assign cont_bits_12_36 = cont_bits_12_12[sel_1_2041];

  assign sel_1_2042 = (s_19 == 1'b0 ? sel_1_2038 :
              cont_bits_12_36);

  assign sel_9664 = 32'sd0;

  assign sel_9665 = 32'sd0;

  assign sel_9666 = 32'sd0;

  assign sel_9667 = 32'sd0;

  assign sel_9668 = 32'sd0;

  assign sel_9669 = 32'sd0;

  assign sel_9670 = 32'sd0;

  assign sel_9671 = 32'sd0;

  assign sel_9672 = 32'sd0;

  assign sel_9673 = 32'sd0;

  assign sel_9674 = 32'sd0;

  assign sel_9675 = 32'sd0;

  assign s_643 = 32'sd5;

  assign sel_1_2043 = (s_20 == 1'b0 ? sel_9675 :
              s_643);

  assign sel_9676 = 32'sd0;

  assign sel_9677 = 32'sd0;

  assign sel_9678 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2043, sel_9664, sel_9665, sel_9666, sel_9667, sel_9668,
       sel_9669, sel_9670, sel_9671, sel_9672, sel_9673, sel_9674, sel_9676,
       sel_9677, sel_9678) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2226_sel_1 = sel_9677;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2226_sel_1 = sel_9676;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2226_sel_1 = sel_1_2043;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2226_sel_1 = sel_9674;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2226_sel_1 = sel_9673;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2226_sel_1 = sel_9672;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2226_sel_1 = sel_9671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2226_sel_1 = sel_9670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2226_sel_1 = sel_9669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2226_sel_1 = sel_9668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2226_sel_1 = sel_9667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2226_sel_1 = sel_9666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2226_sel_1 = sel_9665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2226_sel_1 = sel_9664;
        end
      default :
        begin
          p2226_sel_1 = sel_9678;
        end
    endcase
    sel_1_2044 = p2226_sel_1;
  end

  assign cont_bits_43 = cont_bits_13[sel_1_2044];

  assign sel_1_2045 = (s_20 == 1'b0 ? sel_1_2042 :
              cont_bits_43);

  assign sel_9679 = 32'sd0;

  assign sel_9680 = 32'sd0;

  assign sel_9681 = 32'sd0;

  assign sel_9682 = 32'sd0;

  assign sel_9683 = 32'sd0;

  assign sel_9684 = 32'sd0;

  assign sel_9685 = 32'sd0;

  assign sel_9686 = 32'sd0;

  assign sel_9687 = 32'sd0;

  assign sel_9688 = 32'sd0;

  assign sel_9689 = 32'sd0;

  assign sel_9690 = 32'sd0;

  assign sel_9691 = 32'sd0;

  assign sel_9692 = 32'sd0;

  assign sel_9693 = 32'sd0;

  assign s_644 = 32'sd5;

  assign sel_1_2046 = (tmp_3 == 1'b0 ? sel_9693 :
              s_644);

  assign sel_9694 = 32'sd0;

  assign sel_1_2047 = (tmp_5 == 1'b0 ? sel_1_2046 :
              sel_9694);

  assign sel_9695 = 32'sd0;

  assign sel_1_2048 = (tmp_7 == 1'b0 ? sel_1_2047 :
              sel_9695);

  assign sel_9696 = 32'sd0;

  assign sel_1_2049 = (tmp_9 == 1'b0 ? sel_1_2048 :
              sel_9696);

  assign sel_9697 = 32'sd0;

  assign sel_1_2050 = (tmp_11 == 1'b0 ? sel_1_2049 :
              sel_9697);

  assign sel_9698 = 32'sd0;

  assign sel_1_2051 = (tmp_13 == 1'b0 ? sel_1_2050 :
              sel_9698);

  assign sel_9699 = 32'sd0;

  assign sel_1_2052 = (tmp_15 == 1'b0 ? sel_1_2051 :
              sel_9699);

  assign sel_9700 = 32'sd0;

  assign sel_1_2053 = (tmp_17 == 1'b0 ? sel_1_2052 :
              sel_9700);

  assign sel_1_2054 = (s_10 == 1'b0 ? sel_9692 :
              sel_1_2053);

  assign sel_1_2055 = (s_11 == 1'b0 ? sel_9691 :
              sel_1_2054);

  assign sel_9701 = 32'sd0;

  assign sel_1_2056 = (s_12 == 1'b0 ? sel_1_2055 :
              sel_9701);

  assign sel_9702 = 32'sd0;

  assign sel_9703 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2056, sel_9679, sel_9680, sel_9681, sel_9682, sel_9683,
       sel_9684, sel_9685, sel_9686, sel_9687, sel_9688, sel_9689, sel_9690,
       sel_9702, sel_9703) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3314_sel_1 = sel_9702;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3314_sel_1 = sel_1_2056;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3314_sel_1 = sel_9690;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3314_sel_1 = sel_9689;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3314_sel_1 = sel_9688;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3314_sel_1 = sel_9687;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3314_sel_1 = sel_9686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3314_sel_1 = sel_9685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3314_sel_1 = sel_9684;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3314_sel_1 = sel_9683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3314_sel_1 = sel_9682;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3314_sel_1 = sel_9681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3314_sel_1 = sel_9680;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3314_sel_1 = sel_9679;
        end
      default :
        begin
          p3314_sel_1 = sel_9703;
        end
    endcase
    sel_1_2057 = p3314_sel_1;
  end

  assign cont_bits_41_37 = cont_bits_41_26[sel_1_2057];

  assign sel_9704 = 32'sd0;

  assign sel_9705 = 32'sd0;

  assign sel_9706 = 32'sd0;

  assign sel_9707 = 32'sd0;

  assign sel_9708 = 32'sd0;

  assign sel_9709 = 32'sd0;

  assign sel_9710 = 32'sd0;

  assign sel_9711 = 32'sd0;

  assign sel_9712 = 32'sd0;

  assign sel_9713 = 32'sd0;

  assign sel_9714 = 32'sd0;

  assign sel_9715 = 32'sd0;

  assign sel_9716 = 32'sd0;

  assign sel_9717 = 32'sd0;

  assign sel_9718 = 32'sd0;

  assign s_645 = 32'sd5;

  assign sel_1_2058 = (tmp_5 == 1'b0 ? sel_9718 :
              s_645);

  assign sel_9719 = 32'sd0;

  assign sel_1_2059 = (tmp_7 == 1'b0 ? sel_1_2058 :
              sel_9719);

  assign sel_9720 = 32'sd0;

  assign sel_1_2060 = (tmp_9 == 1'b0 ? sel_1_2059 :
              sel_9720);

  assign sel_9721 = 32'sd0;

  assign sel_1_2061 = (tmp_11 == 1'b0 ? sel_1_2060 :
              sel_9721);

  assign sel_9722 = 32'sd0;

  assign sel_1_2062 = (tmp_13 == 1'b0 ? sel_1_2061 :
              sel_9722);

  assign sel_9723 = 32'sd0;

  assign sel_1_2063 = (tmp_15 == 1'b0 ? sel_1_2062 :
              sel_9723);

  assign sel_9724 = 32'sd0;

  assign sel_1_2064 = (tmp_17 == 1'b0 ? sel_1_2063 :
              sel_9724);

  assign sel_1_2065 = (s_10 == 1'b0 ? sel_9717 :
              sel_1_2064);

  assign sel_1_2066 = (s_11 == 1'b0 ? sel_9716 :
              sel_1_2065);

  assign sel_9725 = 32'sd0;

  assign sel_1_2067 = (s_12 == 1'b0 ? sel_1_2066 :
              sel_9725);

  assign sel_9726 = 32'sd0;

  assign sel_9727 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2067, sel_9704, sel_9705, sel_9706, sel_9707, sel_9708,
       sel_9709, sel_9710, sel_9711, sel_9712, sel_9713, sel_9714, sel_9715,
       sel_9726, sel_9727) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2974_sel_1 = sel_9726;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2974_sel_1 = sel_1_2067;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2974_sel_1 = sel_9715;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2974_sel_1 = sel_9714;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2974_sel_1 = sel_9713;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2974_sel_1 = sel_9712;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2974_sel_1 = sel_9711;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2974_sel_1 = sel_9710;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2974_sel_1 = sel_9709;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2974_sel_1 = sel_9708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2974_sel_1 = sel_9707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2974_sel_1 = sel_9706;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2974_sel_1 = sel_9705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2974_sel_1 = sel_9704;
        end
      default :
        begin
          p2974_sel_1 = sel_9727;
        end
    endcase
    sel_1_2068 = p2974_sel_1;
  end

  assign cont_bits_42_37 = cont_bits_42_26[sel_1_2068];

  assign sel_1_2069 = (tmp_5 == 1'b0 ? cont_bits_41_37 :
              cont_bits_42_37);

  assign sel_9728 = 32'sd0;

  assign sel_9729 = 32'sd0;

  assign sel_9730 = 32'sd0;

  assign sel_9731 = 32'sd0;

  assign sel_9732 = 32'sd0;

  assign sel_9733 = 32'sd0;

  assign sel_9734 = 32'sd0;

  assign sel_9735 = 32'sd0;

  assign sel_9736 = 32'sd0;

  assign sel_9737 = 32'sd0;

  assign sel_9738 = 32'sd0;

  assign sel_9739 = 32'sd0;

  assign sel_9740 = 32'sd0;

  assign sel_9741 = 32'sd0;

  assign sel_9742 = 32'sd0;

  assign s_646 = 32'sd5;

  assign sel_1_2070 = (tmp_7 == 1'b0 ? sel_9742 :
              s_646);

  assign sel_9743 = 32'sd0;

  assign sel_1_2071 = (tmp_9 == 1'b0 ? sel_1_2070 :
              sel_9743);

  assign sel_9744 = 32'sd0;

  assign sel_1_2072 = (tmp_11 == 1'b0 ? sel_1_2071 :
              sel_9744);

  assign sel_9745 = 32'sd0;

  assign sel_1_2073 = (tmp_13 == 1'b0 ? sel_1_2072 :
              sel_9745);

  assign sel_9746 = 32'sd0;

  assign sel_1_2074 = (tmp_15 == 1'b0 ? sel_1_2073 :
              sel_9746);

  assign sel_9747 = 32'sd0;

  assign sel_1_2075 = (tmp_17 == 1'b0 ? sel_1_2074 :
              sel_9747);

  assign sel_1_2076 = (s_10 == 1'b0 ? sel_9741 :
              sel_1_2075);

  assign sel_1_2077 = (s_11 == 1'b0 ? sel_9740 :
              sel_1_2076);

  assign sel_9748 = 32'sd0;

  assign sel_1_2078 = (s_12 == 1'b0 ? sel_1_2077 :
              sel_9748);

  assign sel_9749 = 32'sd0;

  assign sel_9750 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2078, sel_9728, sel_9729, sel_9730, sel_9731, sel_9732,
       sel_9733, sel_9734, sel_9735, sel_9736, sel_9737, sel_9738, sel_9739,
       sel_9749, sel_9750) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3416_sel_1 = sel_9749;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3416_sel_1 = sel_1_2078;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3416_sel_1 = sel_9739;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3416_sel_1 = sel_9738;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3416_sel_1 = sel_9737;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3416_sel_1 = sel_9736;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3416_sel_1 = sel_9735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3416_sel_1 = sel_9734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3416_sel_1 = sel_9733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3416_sel_1 = sel_9732;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3416_sel_1 = sel_9731;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3416_sel_1 = sel_9730;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3416_sel_1 = sel_9729;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3416_sel_1 = sel_9728;
        end
      default :
        begin
          p3416_sel_1 = sel_9750;
        end
    endcase
    sel_1_2079 = p3416_sel_1;
  end

  assign cont_bits_32_37 = cont_bits_32_26[sel_1_2079];

  assign sel_1_2080 = (tmp_7 == 1'b0 ? sel_1_2069 :
              cont_bits_32_37);

  assign sel_9751 = 32'sd0;

  assign sel_9752 = 32'sd0;

  assign sel_9753 = 32'sd0;

  assign sel_9754 = 32'sd0;

  assign sel_9755 = 32'sd0;

  assign sel_9756 = 32'sd0;

  assign sel_9757 = 32'sd0;

  assign sel_9758 = 32'sd0;

  assign sel_9759 = 32'sd0;

  assign sel_9760 = 32'sd0;

  assign sel_9761 = 32'sd0;

  assign sel_9762 = 32'sd0;

  assign sel_9763 = 32'sd0;

  assign sel_9764 = 32'sd0;

  assign sel_9765 = 32'sd0;

  assign s_647 = 32'sd5;

  assign sel_1_2081 = (tmp_9 == 1'b0 ? sel_9765 :
              s_647);

  assign sel_9766 = 32'sd0;

  assign sel_1_2082 = (tmp_11 == 1'b0 ? sel_1_2081 :
              sel_9766);

  assign sel_9767 = 32'sd0;

  assign sel_1_2083 = (tmp_13 == 1'b0 ? sel_1_2082 :
              sel_9767);

  assign sel_9768 = 32'sd0;

  assign sel_1_2084 = (tmp_15 == 1'b0 ? sel_1_2083 :
              sel_9768);

  assign sel_9769 = 32'sd0;

  assign sel_1_2085 = (tmp_17 == 1'b0 ? sel_1_2084 :
              sel_9769);

  assign sel_1_2086 = (s_10 == 1'b0 ? sel_9764 :
              sel_1_2085);

  assign sel_1_2087 = (s_11 == 1'b0 ? sel_9763 :
              sel_1_2086);

  assign sel_9770 = 32'sd0;

  assign sel_1_2088 = (s_12 == 1'b0 ? sel_1_2087 :
              sel_9770);

  assign sel_9771 = 32'sd0;

  assign sel_9772 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2088, sel_9751, sel_9752, sel_9753, sel_9754, sel_9755,
       sel_9756, sel_9757, sel_9758, sel_9759, sel_9760, sel_9761, sel_9762,
       sel_9771, sel_9772) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4028_sel_1 = sel_9771;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4028_sel_1 = sel_1_2088;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4028_sel_1 = sel_9762;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4028_sel_1 = sel_9761;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4028_sel_1 = sel_9760;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4028_sel_1 = sel_9759;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4028_sel_1 = sel_9758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4028_sel_1 = sel_9757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4028_sel_1 = sel_9756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4028_sel_1 = sel_9755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4028_sel_1 = sel_9754;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4028_sel_1 = sel_9753;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4028_sel_1 = sel_9752;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4028_sel_1 = sel_9751;
        end
      default :
        begin
          p4028_sel_1 = sel_9772;
        end
    endcase
    sel_1_2089 = p4028_sel_1;
  end

  assign cont_bits_31_37 = cont_bits_31_26[sel_1_2089];

  assign sel_1_2090 = (tmp_9 == 1'b0 ? sel_1_2080 :
              cont_bits_31_37);

  assign sel_9773 = 32'sd0;

  assign sel_9774 = 32'sd0;

  assign sel_9775 = 32'sd0;

  assign sel_9776 = 32'sd0;

  assign sel_9777 = 32'sd0;

  assign sel_9778 = 32'sd0;

  assign sel_9779 = 32'sd0;

  assign sel_9780 = 32'sd0;

  assign sel_9781 = 32'sd0;

  assign sel_9782 = 32'sd0;

  assign sel_9783 = 32'sd0;

  assign sel_9784 = 32'sd0;

  assign sel_9785 = 32'sd0;

  assign sel_9786 = 32'sd0;

  assign sel_9787 = 32'sd0;

  assign s_648 = 32'sd5;

  assign sel_1_2091 = (tmp_11 == 1'b0 ? sel_9787 :
              s_648);

  assign sel_9788 = 32'sd0;

  assign sel_1_2092 = (tmp_13 == 1'b0 ? sel_1_2091 :
              sel_9788);

  assign sel_9789 = 32'sd0;

  assign sel_1_2093 = (tmp_15 == 1'b0 ? sel_1_2092 :
              sel_9789);

  assign sel_9790 = 32'sd0;

  assign sel_1_2094 = (tmp_17 == 1'b0 ? sel_1_2093 :
              sel_9790);

  assign sel_1_2095 = (s_10 == 1'b0 ? sel_9786 :
              sel_1_2094);

  assign sel_1_2096 = (s_11 == 1'b0 ? sel_9785 :
              sel_1_2095);

  assign sel_9791 = 32'sd0;

  assign sel_1_2097 = (s_12 == 1'b0 ? sel_1_2096 :
              sel_9791);

  assign sel_9792 = 32'sd0;

  assign sel_9793 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2097, sel_9773, sel_9774, sel_9775, sel_9776, sel_9777,
       sel_9778, sel_9779, sel_9780, sel_9781, sel_9782, sel_9783, sel_9784,
       sel_9792, sel_9793) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3909_sel_1 = sel_9792;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3909_sel_1 = sel_1_2097;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3909_sel_1 = sel_9784;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3909_sel_1 = sel_9783;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3909_sel_1 = sel_9782;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3909_sel_1 = sel_9781;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3909_sel_1 = sel_9780;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3909_sel_1 = sel_9779;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3909_sel_1 = sel_9778;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3909_sel_1 = sel_9777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3909_sel_1 = sel_9776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3909_sel_1 = sel_9775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3909_sel_1 = sel_9774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3909_sel_1 = sel_9773;
        end
      default :
        begin
          p3909_sel_1 = sel_9793;
        end
    endcase
    sel_1_2098 = p3909_sel_1;
  end

  assign cont_bits_22_37 = cont_bits_22_26[sel_1_2098];

  assign sel_1_2099 = (tmp_11 == 1'b0 ? sel_1_2090 :
              cont_bits_22_37);

  assign sel_9794 = 32'sd0;

  assign sel_9795 = 32'sd0;

  assign sel_9796 = 32'sd0;

  assign sel_9797 = 32'sd0;

  assign sel_9798 = 32'sd0;

  assign sel_9799 = 32'sd0;

  assign sel_9800 = 32'sd0;

  assign sel_9801 = 32'sd0;

  assign sel_9802 = 32'sd0;

  assign sel_9803 = 32'sd0;

  assign sel_9804 = 32'sd0;

  assign sel_9805 = 32'sd0;

  assign sel_9806 = 32'sd0;

  assign sel_9807 = 32'sd0;

  assign sel_9808 = 32'sd0;

  assign s_649 = 32'sd5;

  assign sel_1_2100 = (tmp_13 == 1'b0 ? sel_9808 :
              s_649);

  assign sel_9809 = 32'sd0;

  assign sel_1_2101 = (tmp_15 == 1'b0 ? sel_1_2100 :
              sel_9809);

  assign sel_9810 = 32'sd0;

  assign sel_1_2102 = (tmp_17 == 1'b0 ? sel_1_2101 :
              sel_9810);

  assign sel_1_2103 = (s_10 == 1'b0 ? sel_9807 :
              sel_1_2102);

  assign sel_1_2104 = (s_11 == 1'b0 ? sel_9806 :
              sel_1_2103);

  assign sel_9811 = 32'sd0;

  assign sel_1_2105 = (s_12 == 1'b0 ? sel_1_2104 :
              sel_9811);

  assign sel_9812 = 32'sd0;

  assign sel_9813 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2105, sel_9794, sel_9795, sel_9796, sel_9797, sel_9798,
       sel_9799, sel_9800, sel_9801, sel_9802, sel_9803, sel_9804, sel_9805,
       sel_9812, sel_9813) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3195_sel_1 = sel_9812;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3195_sel_1 = sel_1_2105;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3195_sel_1 = sel_9805;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3195_sel_1 = sel_9804;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3195_sel_1 = sel_9803;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3195_sel_1 = sel_9802;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3195_sel_1 = sel_9801;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3195_sel_1 = sel_9800;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3195_sel_1 = sel_9799;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3195_sel_1 = sel_9798;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3195_sel_1 = sel_9797;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3195_sel_1 = sel_9796;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3195_sel_1 = sel_9795;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3195_sel_1 = sel_9794;
        end
      default :
        begin
          p3195_sel_1 = sel_9813;
        end
    endcase
    sel_1_2106 = p3195_sel_1;
  end

  assign cont_bits_21_37 = cont_bits_21_26[sel_1_2106];

  assign sel_1_2107 = (tmp_13 == 1'b0 ? sel_1_2099 :
              cont_bits_21_37);

  assign sel_9814 = 32'sd0;

  assign sel_9815 = 32'sd0;

  assign sel_9816 = 32'sd0;

  assign sel_9817 = 32'sd0;

  assign sel_9818 = 32'sd0;

  assign sel_9819 = 32'sd0;

  assign sel_9820 = 32'sd0;

  assign sel_9821 = 32'sd0;

  assign sel_9822 = 32'sd0;

  assign sel_9823 = 32'sd0;

  assign sel_9824 = 32'sd0;

  assign sel_9825 = 32'sd0;

  assign sel_9826 = 32'sd0;

  assign sel_9827 = 32'sd0;

  assign sel_9828 = 32'sd0;

  assign s_650 = 32'sd5;

  assign sel_1_2108 = (tmp_15 == 1'b0 ? sel_9828 :
              s_650);

  assign sel_9829 = 32'sd0;

  assign sel_1_2109 = (tmp_17 == 1'b0 ? sel_1_2108 :
              sel_9829);

  assign sel_1_2110 = (s_10 == 1'b0 ? sel_9827 :
              sel_1_2109);

  assign sel_1_2111 = (s_11 == 1'b0 ? sel_9826 :
              sel_1_2110);

  assign sel_9830 = 32'sd0;

  assign sel_1_2112 = (s_12 == 1'b0 ? sel_1_2111 :
              sel_9830);

  assign sel_9831 = 32'sd0;

  assign sel_9832 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2112, sel_9814, sel_9815, sel_9816, sel_9817, sel_9818,
       sel_9819, sel_9820, sel_9821, sel_9822, sel_9823, sel_9824, sel_9825,
       sel_9831, sel_9832) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3756_sel_1 = sel_9831;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3756_sel_1 = sel_1_2112;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3756_sel_1 = sel_9825;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3756_sel_1 = sel_9824;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3756_sel_1 = sel_9823;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3756_sel_1 = sel_9822;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3756_sel_1 = sel_9821;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3756_sel_1 = sel_9820;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3756_sel_1 = sel_9819;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3756_sel_1 = sel_9818;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3756_sel_1 = sel_9817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3756_sel_1 = sel_9816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3756_sel_1 = sel_9815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3756_sel_1 = sel_9814;
        end
      default :
        begin
          p3756_sel_1 = sel_9832;
        end
    endcase
    sel_1_2113 = p3756_sel_1;
  end

  assign cont_bits_12_37 = cont_bits_12_26[sel_1_2113];

  assign sel_1_2114 = (tmp_15 == 1'b0 ? sel_1_2107 :
              cont_bits_12_37);

  assign sel_9833 = 32'sd0;

  assign sel_9834 = 32'sd0;

  assign sel_9835 = 32'sd0;

  assign sel_9836 = 32'sd0;

  assign sel_9837 = 32'sd0;

  assign sel_9838 = 32'sd0;

  assign sel_9839 = 32'sd0;

  assign sel_9840 = 32'sd0;

  assign sel_9841 = 32'sd0;

  assign sel_9842 = 32'sd0;

  assign sel_9843 = 32'sd0;

  assign sel_9844 = 32'sd0;

  assign sel_9845 = 32'sd0;

  assign sel_9846 = 32'sd0;

  assign sel_9847 = 32'sd0;

  assign s_651 = 32'sd5;

  assign sel_1_2115 = (tmp_17 == 1'b0 ? sel_9847 :
              s_651);

  assign sel_1_2116 = (s_10 == 1'b0 ? sel_9846 :
              sel_1_2115);

  assign sel_1_2117 = (s_11 == 1'b0 ? sel_9845 :
              sel_1_2116);

  assign sel_9848 = 32'sd0;

  assign sel_1_2118 = (s_12 == 1'b0 ? sel_1_2117 :
              sel_9848);

  assign sel_9849 = 32'sd0;

  assign sel_9850 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2118, sel_9833, sel_9834, sel_9835, sel_9836, sel_9837,
       sel_9838, sel_9839, sel_9840, sel_9841, sel_9842, sel_9843, sel_9844,
       sel_9849, sel_9850) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2685_sel_1 = sel_9849;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2685_sel_1 = sel_1_2118;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2685_sel_1 = sel_9844;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2685_sel_1 = sel_9843;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2685_sel_1 = sel_9842;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2685_sel_1 = sel_9841;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2685_sel_1 = sel_9840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2685_sel_1 = sel_9839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2685_sel_1 = sel_9838;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2685_sel_1 = sel_9837;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2685_sel_1 = sel_9836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2685_sel_1 = sel_9835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2685_sel_1 = sel_9834;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2685_sel_1 = sel_9833;
        end
      default :
        begin
          p2685_sel_1 = sel_9850;
        end
    endcase
    sel_1_2119 = p2685_sel_1;
  end

  assign cont_bits_44 = cont_bits_29[sel_1_2119];

  assign sel_1_2120 = (tmp_17 == 1'b0 ? sel_1_2114 :
              cont_bits_44);

  assign sel_9851 = 1'b0;

  assign sel_9852 = 1'b0;

  always @(is_SPI_MNGR_36, sel_1_2045, sel_1_2120, sel_9520, sel_9521, sel_9522, sel_9523,
       sel_9524, sel_9525, sel_9526, sel_9527, sel_9528, sel_9529, sel_9530,
       sel_9851, sel_9852) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p480_sel_1 = sel_9851;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p480_sel_1 = sel_1_2120;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p480_sel_1 = sel_1_2045;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p480_sel_1 = sel_9530;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p480_sel_1 = sel_9529;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p480_sel_1 = sel_9528;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p480_sel_1 = sel_9527;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p480_sel_1 = sel_9526;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p480_sel_1 = sel_9525;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p480_sel_1 = sel_9524;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p480_sel_1 = sel_9523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p480_sel_1 = sel_9522;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p480_sel_1 = sel_9521;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p480_sel_1 = sel_9520;
        end
      default :
        begin
          p480_sel_1 = sel_9852;
        end
    endcase
    sel_1_2121 = p480_sel_1;
  end

  assign sel_9853 = 1'b0;

  assign sel_9854 = 1'b0;

  assign sel_9855 = 1'b0;

  assign sel_9856 = 1'b0;

  assign sel_9857 = 1'b0;

  assign sel_9858 = 1'b0;

  assign sel_9859 = 1'b0;

  assign sel_9860 = 1'b0;

  assign sel_9861 = 1'b0;

  assign sel_9862 = 1'b0;

  assign sel_9863 = 1'b0;

  assign sel_9864 = 1'b0;

  assign s_652 = 1'b1;

  assign sel_2_1525 = (s_13 == 1'b0 ? sel_9864 :
              s_652);

  assign s_653 = 1'b1;

  assign sel_2_1526 = (s_14 == 1'b0 ? sel_2_1525 :
              s_653);

  assign s_654 = 1'b1;

  assign sel_2_1527 = (s_15 == 1'b0 ? sel_2_1526 :
              s_654);

  assign s_655 = 1'b1;

  assign sel_2_1528 = (s_16 == 1'b0 ? sel_2_1527 :
              s_655);

  assign s_656 = 1'b1;

  assign sel_2_1529 = (s_17 == 1'b0 ? sel_2_1528 :
              s_656);

  assign s_657 = 1'b1;

  assign sel_2_1530 = (s_18 == 1'b0 ? sel_2_1529 :
              s_657);

  assign s_658 = 1'b1;

  assign sel_2_1531 = (s_19 == 1'b0 ? sel_2_1530 :
              s_658);

  assign s_659 = 1'b1;

  assign sel_2_1532 = (s_20 == 1'b0 ? sel_2_1531 :
              s_659);

  assign sel_9865 = 1'b0;

  assign sel_9866 = 1'b0;

  assign sel_9867 = 1'b0;

  assign s_660 = 1'b1;

  assign sel_2_1533 = (tmp_3 == 1'b0 ? sel_9867 :
              s_660);

  assign s_661 = 1'b1;

  assign sel_2_1534 = (tmp_5 == 1'b0 ? sel_2_1533 :
              s_661);

  assign s_662 = 1'b1;

  assign sel_2_1535 = (tmp_7 == 1'b0 ? sel_2_1534 :
              s_662);

  assign s_663 = 1'b1;

  assign sel_2_1536 = (tmp_9 == 1'b0 ? sel_2_1535 :
              s_663);

  assign s_664 = 1'b1;

  assign sel_2_1537 = (tmp_11 == 1'b0 ? sel_2_1536 :
              s_664);

  assign s_665 = 1'b1;

  assign sel_2_1538 = (tmp_13 == 1'b0 ? sel_2_1537 :
              s_665);

  assign s_666 = 1'b1;

  assign sel_2_1539 = (tmp_15 == 1'b0 ? sel_2_1538 :
              s_666);

  assign s_667 = 1'b1;

  assign sel_2_1540 = (tmp_17 == 1'b0 ? sel_2_1539 :
              s_667);

  assign sel_2_1541 = (s_10 == 1'b0 ? sel_9866 :
              sel_2_1540);

  assign sel_2_1542 = (s_11 == 1'b0 ? sel_9865 :
              sel_2_1541);

  assign sel_9868 = 1'b0;

  assign sel_2_1543 = (s_12 == 1'b0 ? sel_2_1542 :
              sel_9868);

  assign sel_9869 = 1'b0;

  assign sel_9870 = 1'b0;

  always @(is_SPI_MNGR_36, sel_2_1532, sel_2_1543, sel_9853, sel_9854, sel_9855, sel_9856,
       sel_9857, sel_9858, sel_9859, sel_9860, sel_9861, sel_9862, sel_9863,
       sel_9869, sel_9870) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p465_sel_2 = sel_9869;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p465_sel_2 = sel_2_1543;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p465_sel_2 = sel_2_1532;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p465_sel_2 = sel_9863;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p465_sel_2 = sel_9862;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p465_sel_2 = sel_9861;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p465_sel_2 = sel_9860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p465_sel_2 = sel_9859;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p465_sel_2 = sel_9858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p465_sel_2 = sel_9857;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p465_sel_2 = sel_9856;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p465_sel_2 = sel_9855;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p465_sel_2 = sel_9854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p465_sel_2 = sel_9853;
        end
      default :
        begin
          p465_sel_2 = sel_9870;
        end
    endcase
    sel_2_1544 = p465_sel_2;
  end

  assign sel_9871 = 1'b0;

  assign sel_9872 = 1'b0;

  assign sel_9873 = 1'b0;

  assign sel_9874 = 1'b0;

  assign sel_9875 = 1'b0;

  assign sel_9876 = 1'b0;

  assign sel_9877 = 1'b0;

  assign sel_9878 = 1'b0;

  assign sel_9879 = 1'b0;

  assign sel_9880 = 1'b0;

  assign sel_9881 = 1'b0;

  assign sel_9882 = 32'sd0;

  assign sel_9883 = 32'sd0;

  assign sel_9884 = 32'sd0;

  assign sel_9885 = 32'sd0;

  assign sel_9886 = 32'sd0;

  assign sel_9887 = 32'sd0;

  assign sel_9888 = 32'sd0;

  assign sel_9889 = 32'sd0;

  assign sel_9890 = 32'sd0;

  assign sel_9891 = 32'sd0;

  assign sel_9892 = 32'sd0;

  assign sel_9893 = 32'sd0;

  assign s_668 = 32'sd6;

  assign sel_1_2122 = (s_13 == 1'b0 ? sel_9893 :
              s_668);

  assign sel_9894 = 32'sd0;

  assign sel_1_2123 = (s_14 == 1'b0 ? sel_1_2122 :
              sel_9894);

  assign sel_9895 = 32'sd0;

  assign sel_1_2124 = (s_15 == 1'b0 ? sel_1_2123 :
              sel_9895);

  assign sel_9896 = 32'sd0;

  assign sel_1_2125 = (s_16 == 1'b0 ? sel_1_2124 :
              sel_9896);

  assign sel_9897 = 32'sd0;

  assign sel_1_2126 = (s_17 == 1'b0 ? sel_1_2125 :
              sel_9897);

  assign sel_9898 = 32'sd0;

  assign sel_1_2127 = (s_18 == 1'b0 ? sel_1_2126 :
              sel_9898);

  assign sel_9899 = 32'sd0;

  assign sel_1_2128 = (s_19 == 1'b0 ? sel_1_2127 :
              sel_9899);

  assign sel_9900 = 32'sd0;

  assign sel_1_2129 = (s_20 == 1'b0 ? sel_1_2128 :
              sel_9900);

  assign sel_9901 = 32'sd0;

  assign sel_9902 = 32'sd0;

  assign sel_9903 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2129, sel_9882, sel_9883, sel_9884, sel_9885, sel_9886,
       sel_9887, sel_9888, sel_9889, sel_9890, sel_9891, sel_9892, sel_9901,
       sel_9902, sel_9903) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2073_sel_1 = sel_9902;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2073_sel_1 = sel_9901;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2073_sel_1 = sel_1_2129;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2073_sel_1 = sel_9892;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2073_sel_1 = sel_9891;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2073_sel_1 = sel_9890;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2073_sel_1 = sel_9889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2073_sel_1 = sel_9888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2073_sel_1 = sel_9887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2073_sel_1 = sel_9886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2073_sel_1 = sel_9885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2073_sel_1 = sel_9884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2073_sel_1 = sel_9883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2073_sel_1 = sel_9882;
        end
      default :
        begin
          p2073_sel_1 = sel_9903;
        end
    endcase
    sel_1_2130 = p2073_sel_1;
  end

  assign cont_bits_41_38 = cont_bits_41_12[sel_1_2130];

  assign sel_9904 = 32'sd0;

  assign sel_9905 = 32'sd0;

  assign sel_9906 = 32'sd0;

  assign sel_9907 = 32'sd0;

  assign sel_9908 = 32'sd0;

  assign sel_9909 = 32'sd0;

  assign sel_9910 = 32'sd0;

  assign sel_9911 = 32'sd0;

  assign sel_9912 = 32'sd0;

  assign sel_9913 = 32'sd0;

  assign sel_9914 = 32'sd0;

  assign sel_9915 = 32'sd0;

  assign s_669 = 32'sd6;

  assign sel_1_2131 = (s_14 == 1'b0 ? sel_9915 :
              s_669);

  assign sel_9916 = 32'sd0;

  assign sel_1_2132 = (s_15 == 1'b0 ? sel_1_2131 :
              sel_9916);

  assign sel_9917 = 32'sd0;

  assign sel_1_2133 = (s_16 == 1'b0 ? sel_1_2132 :
              sel_9917);

  assign sel_9918 = 32'sd0;

  assign sel_1_2134 = (s_17 == 1'b0 ? sel_1_2133 :
              sel_9918);

  assign sel_9919 = 32'sd0;

  assign sel_1_2135 = (s_18 == 1'b0 ? sel_1_2134 :
              sel_9919);

  assign sel_9920 = 32'sd0;

  assign sel_1_2136 = (s_19 == 1'b0 ? sel_1_2135 :
              sel_9920);

  assign sel_9921 = 32'sd0;

  assign sel_1_2137 = (s_20 == 1'b0 ? sel_1_2136 :
              sel_9921);

  assign sel_9922 = 32'sd0;

  assign sel_9923 = 32'sd0;

  assign sel_9924 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2137, sel_9904, sel_9905, sel_9906, sel_9907, sel_9908,
       sel_9909, sel_9910, sel_9911, sel_9912, sel_9913, sel_9914, sel_9922,
       sel_9923, sel_9924) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1257_sel_1 = sel_9923;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1257_sel_1 = sel_9922;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1257_sel_1 = sel_1_2137;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1257_sel_1 = sel_9914;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1257_sel_1 = sel_9913;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1257_sel_1 = sel_9912;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1257_sel_1 = sel_9911;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1257_sel_1 = sel_9910;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1257_sel_1 = sel_9909;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1257_sel_1 = sel_9908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1257_sel_1 = sel_9907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1257_sel_1 = sel_9906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1257_sel_1 = sel_9905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1257_sel_1 = sel_9904;
        end
      default :
        begin
          p1257_sel_1 = sel_9924;
        end
    endcase
    sel_1_2138 = p1257_sel_1;
  end

  assign cont_bits_42_38 = cont_bits_42_12[sel_1_2138];

  assign sel_1_2139 = (s_14 == 1'b0 ? cont_bits_41_38 :
              cont_bits_42_38);

  assign sel_9925 = 32'sd0;

  assign sel_9926 = 32'sd0;

  assign sel_9927 = 32'sd0;

  assign sel_9928 = 32'sd0;

  assign sel_9929 = 32'sd0;

  assign sel_9930 = 32'sd0;

  assign sel_9931 = 32'sd0;

  assign sel_9932 = 32'sd0;

  assign sel_9933 = 32'sd0;

  assign sel_9934 = 32'sd0;

  assign sel_9935 = 32'sd0;

  assign sel_9936 = 32'sd0;

  assign s_670 = 32'sd6;

  assign sel_1_2140 = (s_15 == 1'b0 ? sel_9936 :
              s_670);

  assign sel_9937 = 32'sd0;

  assign sel_1_2141 = (s_16 == 1'b0 ? sel_1_2140 :
              sel_9937);

  assign sel_9938 = 32'sd0;

  assign sel_1_2142 = (s_17 == 1'b0 ? sel_1_2141 :
              sel_9938);

  assign sel_9939 = 32'sd0;

  assign sel_1_2143 = (s_18 == 1'b0 ? sel_1_2142 :
              sel_9939);

  assign sel_9940 = 32'sd0;

  assign sel_1_2144 = (s_19 == 1'b0 ? sel_1_2143 :
              sel_9940);

  assign sel_9941 = 32'sd0;

  assign sel_1_2145 = (s_20 == 1'b0 ? sel_1_2144 :
              sel_9941);

  assign sel_9942 = 32'sd0;

  assign sel_9943 = 32'sd0;

  assign sel_9944 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2145, sel_9925, sel_9926, sel_9927, sel_9928, sel_9929,
       sel_9930, sel_9931, sel_9932, sel_9933, sel_9934, sel_9935, sel_9942,
       sel_9943, sel_9944) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1682_sel_1 = sel_9943;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1682_sel_1 = sel_9942;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1682_sel_1 = sel_1_2145;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1682_sel_1 = sel_9935;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1682_sel_1 = sel_9934;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1682_sel_1 = sel_9933;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1682_sel_1 = sel_9932;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1682_sel_1 = sel_9931;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1682_sel_1 = sel_9930;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1682_sel_1 = sel_9929;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1682_sel_1 = sel_9928;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1682_sel_1 = sel_9927;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1682_sel_1 = sel_9926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1682_sel_1 = sel_9925;
        end
      default :
        begin
          p1682_sel_1 = sel_9944;
        end
    endcase
    sel_1_2146 = p1682_sel_1;
  end

  assign cont_bits_32_38 = cont_bits_32_12[sel_1_2146];

  assign sel_1_2147 = (s_15 == 1'b0 ? sel_1_2139 :
              cont_bits_32_38);

  assign sel_9945 = 32'sd0;

  assign sel_9946 = 32'sd0;

  assign sel_9947 = 32'sd0;

  assign sel_9948 = 32'sd0;

  assign sel_9949 = 32'sd0;

  assign sel_9950 = 32'sd0;

  assign sel_9951 = 32'sd0;

  assign sel_9952 = 32'sd0;

  assign sel_9953 = 32'sd0;

  assign sel_9954 = 32'sd0;

  assign sel_9955 = 32'sd0;

  assign sel_9956 = 32'sd0;

  assign s_671 = 32'sd6;

  assign sel_1_2148 = (s_16 == 1'b0 ? sel_9956 :
              s_671);

  assign sel_9957 = 32'sd0;

  assign sel_1_2149 = (s_17 == 1'b0 ? sel_1_2148 :
              sel_9957);

  assign sel_9958 = 32'sd0;

  assign sel_1_2150 = (s_18 == 1'b0 ? sel_1_2149 :
              sel_9958);

  assign sel_9959 = 32'sd0;

  assign sel_1_2151 = (s_19 == 1'b0 ? sel_1_2150 :
              sel_9959);

  assign sel_9960 = 32'sd0;

  assign sel_1_2152 = (s_20 == 1'b0 ? sel_1_2151 :
              sel_9960);

  assign sel_9961 = 32'sd0;

  assign sel_9962 = 32'sd0;

  assign sel_9963 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2152, sel_9945, sel_9946, sel_9947, sel_9948, sel_9949,
       sel_9950, sel_9951, sel_9952, sel_9953, sel_9954, sel_9955, sel_9961,
       sel_9962, sel_9963) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1070_sel_1 = sel_9962;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1070_sel_1 = sel_9961;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1070_sel_1 = sel_1_2152;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1070_sel_1 = sel_9955;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1070_sel_1 = sel_9954;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1070_sel_1 = sel_9953;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1070_sel_1 = sel_9952;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1070_sel_1 = sel_9951;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1070_sel_1 = sel_9950;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1070_sel_1 = sel_9949;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1070_sel_1 = sel_9948;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1070_sel_1 = sel_9947;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1070_sel_1 = sel_9946;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1070_sel_1 = sel_9945;
        end
      default :
        begin
          p1070_sel_1 = sel_9963;
        end
    endcase
    sel_1_2153 = p1070_sel_1;
  end

  assign cont_bits_31_38 = cont_bits_31_12[sel_1_2153];

  assign sel_1_2154 = (s_16 == 1'b0 ? sel_1_2147 :
              cont_bits_31_38);

  assign sel_9964 = 32'sd0;

  assign sel_9965 = 32'sd0;

  assign sel_9966 = 32'sd0;

  assign sel_9967 = 32'sd0;

  assign sel_9968 = 32'sd0;

  assign sel_9969 = 32'sd0;

  assign sel_9970 = 32'sd0;

  assign sel_9971 = 32'sd0;

  assign sel_9972 = 32'sd0;

  assign sel_9973 = 32'sd0;

  assign sel_9974 = 32'sd0;

  assign sel_9975 = 32'sd0;

  assign s_672 = 32'sd6;

  assign sel_1_2155 = (s_17 == 1'b0 ? sel_9975 :
              s_672);

  assign sel_9976 = 32'sd0;

  assign sel_1_2156 = (s_18 == 1'b0 ? sel_1_2155 :
              sel_9976);

  assign sel_9977 = 32'sd0;

  assign sel_1_2157 = (s_19 == 1'b0 ? sel_1_2156 :
              sel_9977);

  assign sel_9978 = 32'sd0;

  assign sel_1_2158 = (s_20 == 1'b0 ? sel_1_2157 :
              sel_9978);

  assign sel_9979 = 32'sd0;

  assign sel_9980 = 32'sd0;

  assign sel_9981 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2158, sel_9964, sel_9965, sel_9966, sel_9967, sel_9968,
       sel_9969, sel_9970, sel_9971, sel_9972, sel_9973, sel_9974, sel_9979,
       sel_9980, sel_9981) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1818_sel_1 = sel_9980;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1818_sel_1 = sel_9979;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1818_sel_1 = sel_1_2158;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1818_sel_1 = sel_9974;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1818_sel_1 = sel_9973;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1818_sel_1 = sel_9972;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1818_sel_1 = sel_9971;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1818_sel_1 = sel_9970;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1818_sel_1 = sel_9969;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1818_sel_1 = sel_9968;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1818_sel_1 = sel_9967;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1818_sel_1 = sel_9966;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1818_sel_1 = sel_9965;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1818_sel_1 = sel_9964;
        end
      default :
        begin
          p1818_sel_1 = sel_9981;
        end
    endcase
    sel_1_2159 = p1818_sel_1;
  end

  assign cont_bits_22_38 = cont_bits_22_12[sel_1_2159];

  assign sel_1_2160 = (s_17 == 1'b0 ? sel_1_2154 :
              cont_bits_22_38);

  assign sel_9982 = 32'sd0;

  assign sel_9983 = 32'sd0;

  assign sel_9984 = 32'sd0;

  assign sel_9985 = 32'sd0;

  assign sel_9986 = 32'sd0;

  assign sel_9987 = 32'sd0;

  assign sel_9988 = 32'sd0;

  assign sel_9989 = 32'sd0;

  assign sel_9990 = 32'sd0;

  assign sel_9991 = 32'sd0;

  assign sel_9992 = 32'sd0;

  assign sel_9993 = 32'sd0;

  assign s_673 = 32'sd6;

  assign sel_1_2161 = (s_18 == 1'b0 ? sel_9993 :
              s_673);

  assign sel_9994 = 32'sd0;

  assign sel_1_2162 = (s_19 == 1'b0 ? sel_1_2161 :
              sel_9994);

  assign sel_9995 = 32'sd0;

  assign sel_1_2163 = (s_20 == 1'b0 ? sel_1_2162 :
              sel_9995);

  assign sel_9996 = 32'sd0;

  assign sel_9997 = 32'sd0;

  assign sel_9998 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_1_2163, sel_9982, sel_9983, sel_9984, sel_9985, sel_9986,
       sel_9987, sel_9988, sel_9989, sel_9990, sel_9991, sel_9992, sel_9996,
       sel_9997, sel_9998) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2464_sel_1 = sel_9997;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2464_sel_1 = sel_9996;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2464_sel_1 = sel_1_2163;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2464_sel_1 = sel_9992;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2464_sel_1 = sel_9991;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2464_sel_1 = sel_9990;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2464_sel_1 = sel_9989;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2464_sel_1 = sel_9988;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2464_sel_1 = sel_9987;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2464_sel_1 = sel_9986;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2464_sel_1 = sel_9985;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2464_sel_1 = sel_9984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2464_sel_1 = sel_9983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2464_sel_1 = sel_9982;
        end
      default :
        begin
          p2464_sel_1 = sel_9998;
        end
    endcase
    sel_1_2164 = p2464_sel_1;
  end

  assign cont_bits_21_38 = cont_bits_21_12[sel_1_2164];

  assign sel_1_2165 = (s_18 == 1'b0 ? sel_1_2160 :
              cont_bits_21_38);

  assign sel_9999 = 32'sd0;

  assign sel_10000 = 32'sd0;

  assign sel_10001 = 32'sd0;

  assign sel_10002 = 32'sd0;

  assign sel_10003 = 32'sd0;

  assign sel_10004 = 32'sd0;

  assign sel_10005 = 32'sd0;

  assign sel_10006 = 32'sd0;

  assign sel_10007 = 32'sd0;

  assign sel_10008 = 32'sd0;

  assign sel_10009 = 32'sd0;

  assign sel_10010 = 32'sd0;

  assign s_674 = 32'sd6;

  assign sel_1_2166 = (s_19 == 1'b0 ? sel_10010 :
              s_674);

  assign sel_10011 = 32'sd0;

  assign sel_1_2167 = (s_20 == 1'b0 ? sel_1_2166 :
              sel_10011);

  assign sel_10012 = 32'sd0;

  assign sel_10013 = 32'sd0;

  assign sel_10014 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10000, sel_10001, sel_10002, sel_10003, sel_10004,
       sel_10005, sel_10006, sel_10007, sel_10008, sel_10009, sel_10012,
       sel_10013, sel_10014, sel_1_2167, sel_9999) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1444_sel_1 = sel_10013;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1444_sel_1 = sel_10012;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1444_sel_1 = sel_1_2167;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1444_sel_1 = sel_10009;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1444_sel_1 = sel_10008;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1444_sel_1 = sel_10007;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1444_sel_1 = sel_10006;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1444_sel_1 = sel_10005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1444_sel_1 = sel_10004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1444_sel_1 = sel_10003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1444_sel_1 = sel_10002;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1444_sel_1 = sel_10001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1444_sel_1 = sel_10000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1444_sel_1 = sel_9999;
        end
      default :
        begin
          p1444_sel_1 = sel_10014;
        end
    endcase
    sel_1_2168 = p1444_sel_1;
  end

  assign cont_bits_12_38 = cont_bits_12_12[sel_1_2168];

  assign sel_1_2169 = (s_19 == 1'b0 ? sel_1_2165 :
              cont_bits_12_38);

  assign sel_10015 = 32'sd0;

  assign sel_10016 = 32'sd0;

  assign sel_10017 = 32'sd0;

  assign sel_10018 = 32'sd0;

  assign sel_10019 = 32'sd0;

  assign sel_10020 = 32'sd0;

  assign sel_10021 = 32'sd0;

  assign sel_10022 = 32'sd0;

  assign sel_10023 = 32'sd0;

  assign sel_10024 = 32'sd0;

  assign sel_10025 = 32'sd0;

  assign sel_10026 = 32'sd0;

  assign s_675 = 32'sd6;

  assign sel_1_2170 = (s_20 == 1'b0 ? sel_10026 :
              s_675);

  assign sel_10027 = 32'sd0;

  assign sel_10028 = 32'sd0;

  assign sel_10029 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10015, sel_10016, sel_10017, sel_10018, sel_10019,
       sel_10020, sel_10021, sel_10022, sel_10023, sel_10024, sel_10025,
       sel_10027, sel_10028, sel_10029, sel_1_2170) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2209_sel_1 = sel_10028;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2209_sel_1 = sel_10027;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2209_sel_1 = sel_1_2170;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2209_sel_1 = sel_10025;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2209_sel_1 = sel_10024;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2209_sel_1 = sel_10023;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2209_sel_1 = sel_10022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2209_sel_1 = sel_10021;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2209_sel_1 = sel_10020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2209_sel_1 = sel_10019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2209_sel_1 = sel_10018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2209_sel_1 = sel_10017;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2209_sel_1 = sel_10016;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2209_sel_1 = sel_10015;
        end
      default :
        begin
          p2209_sel_1 = sel_10029;
        end
    endcase
    sel_1_2171 = p2209_sel_1;
  end

  assign cont_bits_45 = cont_bits_13[sel_1_2171];

  assign sel_1_2172 = (s_20 == 1'b0 ? sel_1_2169 :
              cont_bits_45);

  assign sel_10030 = 32'sd0;

  assign sel_10031 = 32'sd0;

  assign sel_10032 = 32'sd0;

  assign sel_10033 = 32'sd0;

  assign sel_10034 = 32'sd0;

  assign sel_10035 = 32'sd0;

  assign sel_10036 = 32'sd0;

  assign sel_10037 = 32'sd0;

  assign sel_10038 = 32'sd0;

  assign sel_10039 = 32'sd0;

  assign sel_10040 = 32'sd0;

  assign sel_10041 = 32'sd0;

  assign sel_10042 = 32'sd0;

  assign sel_10043 = 32'sd0;

  assign sel_10044 = 32'sd0;

  assign s_676 = 32'sd6;

  assign sel_1_2173 = (tmp_3 == 1'b0 ? sel_10044 :
              s_676);

  assign sel_10045 = 32'sd0;

  assign sel_1_2174 = (tmp_5 == 1'b0 ? sel_1_2173 :
              sel_10045);

  assign sel_10046 = 32'sd0;

  assign sel_1_2175 = (tmp_7 == 1'b0 ? sel_1_2174 :
              sel_10046);

  assign sel_10047 = 32'sd0;

  assign sel_1_2176 = (tmp_9 == 1'b0 ? sel_1_2175 :
              sel_10047);

  assign sel_10048 = 32'sd0;

  assign sel_1_2177 = (tmp_11 == 1'b0 ? sel_1_2176 :
              sel_10048);

  assign sel_10049 = 32'sd0;

  assign sel_1_2178 = (tmp_13 == 1'b0 ? sel_1_2177 :
              sel_10049);

  assign sel_10050 = 32'sd0;

  assign sel_1_2179 = (tmp_15 == 1'b0 ? sel_1_2178 :
              sel_10050);

  assign sel_10051 = 32'sd0;

  assign sel_1_2180 = (tmp_17 == 1'b0 ? sel_1_2179 :
              sel_10051);

  assign sel_1_2181 = (s_10 == 1'b0 ? sel_10043 :
              sel_1_2180);

  assign sel_1_2182 = (s_11 == 1'b0 ? sel_10042 :
              sel_1_2181);

  assign sel_10052 = 32'sd0;

  assign sel_1_2183 = (s_12 == 1'b0 ? sel_1_2182 :
              sel_10052);

  assign sel_10053 = 32'sd0;

  assign sel_10054 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10030, sel_10031, sel_10032, sel_10033, sel_10034,
       sel_10035, sel_10036, sel_10037, sel_10038, sel_10039, sel_10040,
       sel_10041, sel_10053, sel_10054, sel_1_2183) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3297_sel_1 = sel_10053;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3297_sel_1 = sel_1_2183;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3297_sel_1 = sel_10041;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3297_sel_1 = sel_10040;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3297_sel_1 = sel_10039;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3297_sel_1 = sel_10038;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3297_sel_1 = sel_10037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3297_sel_1 = sel_10036;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3297_sel_1 = sel_10035;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3297_sel_1 = sel_10034;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3297_sel_1 = sel_10033;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3297_sel_1 = sel_10032;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3297_sel_1 = sel_10031;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3297_sel_1 = sel_10030;
        end
      default :
        begin
          p3297_sel_1 = sel_10054;
        end
    endcase
    sel_1_2184 = p3297_sel_1;
  end

  assign cont_bits_41_39 = cont_bits_41_26[sel_1_2184];

  assign sel_10055 = 32'sd0;

  assign sel_10056 = 32'sd0;

  assign sel_10057 = 32'sd0;

  assign sel_10058 = 32'sd0;

  assign sel_10059 = 32'sd0;

  assign sel_10060 = 32'sd0;

  assign sel_10061 = 32'sd0;

  assign sel_10062 = 32'sd0;

  assign sel_10063 = 32'sd0;

  assign sel_10064 = 32'sd0;

  assign sel_10065 = 32'sd0;

  assign sel_10066 = 32'sd0;

  assign sel_10067 = 32'sd0;

  assign sel_10068 = 32'sd0;

  assign sel_10069 = 32'sd0;

  assign s_677 = 32'sd6;

  assign sel_1_2185 = (tmp_5 == 1'b0 ? sel_10069 :
              s_677);

  assign sel_10070 = 32'sd0;

  assign sel_1_2186 = (tmp_7 == 1'b0 ? sel_1_2185 :
              sel_10070);

  assign sel_10071 = 32'sd0;

  assign sel_1_2187 = (tmp_9 == 1'b0 ? sel_1_2186 :
              sel_10071);

  assign sel_10072 = 32'sd0;

  assign sel_1_2188 = (tmp_11 == 1'b0 ? sel_1_2187 :
              sel_10072);

  assign sel_10073 = 32'sd0;

  assign sel_1_2189 = (tmp_13 == 1'b0 ? sel_1_2188 :
              sel_10073);

  assign sel_10074 = 32'sd0;

  assign sel_1_2190 = (tmp_15 == 1'b0 ? sel_1_2189 :
              sel_10074);

  assign sel_10075 = 32'sd0;

  assign sel_1_2191 = (tmp_17 == 1'b0 ? sel_1_2190 :
              sel_10075);

  assign sel_1_2192 = (s_10 == 1'b0 ? sel_10068 :
              sel_1_2191);

  assign sel_1_2193 = (s_11 == 1'b0 ? sel_10067 :
              sel_1_2192);

  assign sel_10076 = 32'sd0;

  assign sel_1_2194 = (s_12 == 1'b0 ? sel_1_2193 :
              sel_10076);

  assign sel_10077 = 32'sd0;

  assign sel_10078 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10055, sel_10056, sel_10057, sel_10058, sel_10059,
       sel_10060, sel_10061, sel_10062, sel_10063, sel_10064, sel_10065,
       sel_10066, sel_10077, sel_10078, sel_1_2194) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2991_sel_1 = sel_10077;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2991_sel_1 = sel_1_2194;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2991_sel_1 = sel_10066;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2991_sel_1 = sel_10065;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2991_sel_1 = sel_10064;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2991_sel_1 = sel_10063;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2991_sel_1 = sel_10062;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2991_sel_1 = sel_10061;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2991_sel_1 = sel_10060;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2991_sel_1 = sel_10059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2991_sel_1 = sel_10058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2991_sel_1 = sel_10057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2991_sel_1 = sel_10056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2991_sel_1 = sel_10055;
        end
      default :
        begin
          p2991_sel_1 = sel_10078;
        end
    endcase
    sel_1_2195 = p2991_sel_1;
  end

  assign cont_bits_42_39 = cont_bits_42_26[sel_1_2195];

  assign sel_1_2196 = (tmp_5 == 1'b0 ? cont_bits_41_39 :
              cont_bits_42_39);

  assign sel_10079 = 32'sd0;

  assign sel_10080 = 32'sd0;

  assign sel_10081 = 32'sd0;

  assign sel_10082 = 32'sd0;

  assign sel_10083 = 32'sd0;

  assign sel_10084 = 32'sd0;

  assign sel_10085 = 32'sd0;

  assign sel_10086 = 32'sd0;

  assign sel_10087 = 32'sd0;

  assign sel_10088 = 32'sd0;

  assign sel_10089 = 32'sd0;

  assign sel_10090 = 32'sd0;

  assign sel_10091 = 32'sd0;

  assign sel_10092 = 32'sd0;

  assign sel_10093 = 32'sd0;

  assign s_678 = 32'sd6;

  assign sel_1_2197 = (tmp_7 == 1'b0 ? sel_10093 :
              s_678);

  assign sel_10094 = 32'sd0;

  assign sel_1_2198 = (tmp_9 == 1'b0 ? sel_1_2197 :
              sel_10094);

  assign sel_10095 = 32'sd0;

  assign sel_1_2199 = (tmp_11 == 1'b0 ? sel_1_2198 :
              sel_10095);

  assign sel_10096 = 32'sd0;

  assign sel_1_2200 = (tmp_13 == 1'b0 ? sel_1_2199 :
              sel_10096);

  assign sel_10097 = 32'sd0;

  assign sel_1_2201 = (tmp_15 == 1'b0 ? sel_1_2200 :
              sel_10097);

  assign sel_10098 = 32'sd0;

  assign sel_1_2202 = (tmp_17 == 1'b0 ? sel_1_2201 :
              sel_10098);

  assign sel_1_2203 = (s_10 == 1'b0 ? sel_10092 :
              sel_1_2202);

  assign sel_1_2204 = (s_11 == 1'b0 ? sel_10091 :
              sel_1_2203);

  assign sel_10099 = 32'sd0;

  assign sel_1_2205 = (s_12 == 1'b0 ? sel_1_2204 :
              sel_10099);

  assign sel_10100 = 32'sd0;

  assign sel_10101 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10079, sel_10080, sel_10081, sel_10082, sel_10083,
       sel_10084, sel_10085, sel_10086, sel_10087, sel_10088, sel_10089,
       sel_10090, sel_10100, sel_10101, sel_1_2205) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3433_sel_1 = sel_10100;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3433_sel_1 = sel_1_2205;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3433_sel_1 = sel_10090;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3433_sel_1 = sel_10089;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3433_sel_1 = sel_10088;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3433_sel_1 = sel_10087;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3433_sel_1 = sel_10086;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3433_sel_1 = sel_10085;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3433_sel_1 = sel_10084;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3433_sel_1 = sel_10083;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3433_sel_1 = sel_10082;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3433_sel_1 = sel_10081;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3433_sel_1 = sel_10080;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3433_sel_1 = sel_10079;
        end
      default :
        begin
          p3433_sel_1 = sel_10101;
        end
    endcase
    sel_1_2206 = p3433_sel_1;
  end

  assign cont_bits_32_39 = cont_bits_32_26[sel_1_2206];

  assign sel_1_2207 = (tmp_7 == 1'b0 ? sel_1_2196 :
              cont_bits_32_39);

  assign sel_10102 = 32'sd0;

  assign sel_10103 = 32'sd0;

  assign sel_10104 = 32'sd0;

  assign sel_10105 = 32'sd0;

  assign sel_10106 = 32'sd0;

  assign sel_10107 = 32'sd0;

  assign sel_10108 = 32'sd0;

  assign sel_10109 = 32'sd0;

  assign sel_10110 = 32'sd0;

  assign sel_10111 = 32'sd0;

  assign sel_10112 = 32'sd0;

  assign sel_10113 = 32'sd0;

  assign sel_10114 = 32'sd0;

  assign sel_10115 = 32'sd0;

  assign sel_10116 = 32'sd0;

  assign s_679 = 32'sd6;

  assign sel_1_2208 = (tmp_9 == 1'b0 ? sel_10116 :
              s_679);

  assign sel_10117 = 32'sd0;

  assign sel_1_2209 = (tmp_11 == 1'b0 ? sel_1_2208 :
              sel_10117);

  assign sel_10118 = 32'sd0;

  assign sel_1_2210 = (tmp_13 == 1'b0 ? sel_1_2209 :
              sel_10118);

  assign sel_10119 = 32'sd0;

  assign sel_1_2211 = (tmp_15 == 1'b0 ? sel_1_2210 :
              sel_10119);

  assign sel_10120 = 32'sd0;

  assign sel_1_2212 = (tmp_17 == 1'b0 ? sel_1_2211 :
              sel_10120);

  assign sel_1_2213 = (s_10 == 1'b0 ? sel_10115 :
              sel_1_2212);

  assign sel_1_2214 = (s_11 == 1'b0 ? sel_10114 :
              sel_1_2213);

  assign sel_10121 = 32'sd0;

  assign sel_1_2215 = (s_12 == 1'b0 ? sel_1_2214 :
              sel_10121);

  assign sel_10122 = 32'sd0;

  assign sel_10123 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10102, sel_10103, sel_10104, sel_10105, sel_10106,
       sel_10107, sel_10108, sel_10109, sel_10110, sel_10111, sel_10112,
       sel_10113, sel_10122, sel_10123, sel_1_2215) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4215_sel_1 = sel_10122;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4215_sel_1 = sel_1_2215;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4215_sel_1 = sel_10113;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4215_sel_1 = sel_10112;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4215_sel_1 = sel_10111;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4215_sel_1 = sel_10110;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4215_sel_1 = sel_10109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4215_sel_1 = sel_10108;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4215_sel_1 = sel_10107;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4215_sel_1 = sel_10106;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4215_sel_1 = sel_10105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4215_sel_1 = sel_10104;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4215_sel_1 = sel_10103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4215_sel_1 = sel_10102;
        end
      default :
        begin
          p4215_sel_1 = sel_10123;
        end
    endcase
    sel_1_2216 = p4215_sel_1;
  end

  assign cont_bits_31_39 = cont_bits_31_26[sel_1_2216];

  assign sel_1_2217 = (tmp_9 == 1'b0 ? sel_1_2207 :
              cont_bits_31_39);

  assign sel_10124 = 32'sd0;

  assign sel_10125 = 32'sd0;

  assign sel_10126 = 32'sd0;

  assign sel_10127 = 32'sd0;

  assign sel_10128 = 32'sd0;

  assign sel_10129 = 32'sd0;

  assign sel_10130 = 32'sd0;

  assign sel_10131 = 32'sd0;

  assign sel_10132 = 32'sd0;

  assign sel_10133 = 32'sd0;

  assign sel_10134 = 32'sd0;

  assign sel_10135 = 32'sd0;

  assign sel_10136 = 32'sd0;

  assign sel_10137 = 32'sd0;

  assign sel_10138 = 32'sd0;

  assign s_680 = 32'sd6;

  assign sel_1_2218 = (tmp_11 == 1'b0 ? sel_10138 :
              s_680);

  assign sel_10139 = 32'sd0;

  assign sel_1_2219 = (tmp_13 == 1'b0 ? sel_1_2218 :
              sel_10139);

  assign sel_10140 = 32'sd0;

  assign sel_1_2220 = (tmp_15 == 1'b0 ? sel_1_2219 :
              sel_10140);

  assign sel_10141 = 32'sd0;

  assign sel_1_2221 = (tmp_17 == 1'b0 ? sel_1_2220 :
              sel_10141);

  assign sel_1_2222 = (s_10 == 1'b0 ? sel_10137 :
              sel_1_2221);

  assign sel_1_2223 = (s_11 == 1'b0 ? sel_10136 :
              sel_1_2222);

  assign sel_10142 = 32'sd0;

  assign sel_1_2224 = (s_12 == 1'b0 ? sel_1_2223 :
              sel_10142);

  assign sel_10143 = 32'sd0;

  assign sel_10144 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10124, sel_10125, sel_10126, sel_10127, sel_10128,
       sel_10129, sel_10130, sel_10131, sel_10132, sel_10133, sel_10134,
       sel_10135, sel_10143, sel_10144, sel_1_2224) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4011_sel_1 = sel_10143;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4011_sel_1 = sel_1_2224;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4011_sel_1 = sel_10135;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4011_sel_1 = sel_10134;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4011_sel_1 = sel_10133;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4011_sel_1 = sel_10132;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4011_sel_1 = sel_10131;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4011_sel_1 = sel_10130;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4011_sel_1 = sel_10129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4011_sel_1 = sel_10128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4011_sel_1 = sel_10127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4011_sel_1 = sel_10126;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4011_sel_1 = sel_10125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4011_sel_1 = sel_10124;
        end
      default :
        begin
          p4011_sel_1 = sel_10144;
        end
    endcase
    sel_1_2225 = p4011_sel_1;
  end

  assign cont_bits_22_39 = cont_bits_22_26[sel_1_2225];

  assign sel_1_2226 = (tmp_11 == 1'b0 ? sel_1_2217 :
              cont_bits_22_39);

  assign sel_10145 = 32'sd0;

  assign sel_10146 = 32'sd0;

  assign sel_10147 = 32'sd0;

  assign sel_10148 = 32'sd0;

  assign sel_10149 = 32'sd0;

  assign sel_10150 = 32'sd0;

  assign sel_10151 = 32'sd0;

  assign sel_10152 = 32'sd0;

  assign sel_10153 = 32'sd0;

  assign sel_10154 = 32'sd0;

  assign sel_10155 = 32'sd0;

  assign sel_10156 = 32'sd0;

  assign sel_10157 = 32'sd0;

  assign sel_10158 = 32'sd0;

  assign sel_10159 = 32'sd0;

  assign s_681 = 32'sd6;

  assign sel_1_2227 = (tmp_13 == 1'b0 ? sel_10159 :
              s_681);

  assign sel_10160 = 32'sd0;

  assign sel_1_2228 = (tmp_15 == 1'b0 ? sel_1_2227 :
              sel_10160);

  assign sel_10161 = 32'sd0;

  assign sel_1_2229 = (tmp_17 == 1'b0 ? sel_1_2228 :
              sel_10161);

  assign sel_1_2230 = (s_10 == 1'b0 ? sel_10158 :
              sel_1_2229);

  assign sel_1_2231 = (s_11 == 1'b0 ? sel_10157 :
              sel_1_2230);

  assign sel_10162 = 32'sd0;

  assign sel_1_2232 = (s_12 == 1'b0 ? sel_1_2231 :
              sel_10162);

  assign sel_10163 = 32'sd0;

  assign sel_10164 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10145, sel_10146, sel_10147, sel_10148, sel_10149,
       sel_10150, sel_10151, sel_10152, sel_10153, sel_10154, sel_10155,
       sel_10156, sel_10163, sel_10164, sel_1_2232) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3178_sel_1 = sel_10163;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3178_sel_1 = sel_1_2232;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3178_sel_1 = sel_10156;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3178_sel_1 = sel_10155;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3178_sel_1 = sel_10154;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3178_sel_1 = sel_10153;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3178_sel_1 = sel_10152;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3178_sel_1 = sel_10151;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3178_sel_1 = sel_10150;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3178_sel_1 = sel_10149;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3178_sel_1 = sel_10148;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3178_sel_1 = sel_10147;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3178_sel_1 = sel_10146;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3178_sel_1 = sel_10145;
        end
      default :
        begin
          p3178_sel_1 = sel_10164;
        end
    endcase
    sel_1_2233 = p3178_sel_1;
  end

  assign cont_bits_21_39 = cont_bits_21_26[sel_1_2233];

  assign sel_1_2234 = (tmp_13 == 1'b0 ? sel_1_2226 :
              cont_bits_21_39);

  assign sel_10165 = 32'sd0;

  assign sel_10166 = 32'sd0;

  assign sel_10167 = 32'sd0;

  assign sel_10168 = 32'sd0;

  assign sel_10169 = 32'sd0;

  assign sel_10170 = 32'sd0;

  assign sel_10171 = 32'sd0;

  assign sel_10172 = 32'sd0;

  assign sel_10173 = 32'sd0;

  assign sel_10174 = 32'sd0;

  assign sel_10175 = 32'sd0;

  assign sel_10176 = 32'sd0;

  assign sel_10177 = 32'sd0;

  assign sel_10178 = 32'sd0;

  assign sel_10179 = 32'sd0;

  assign s_682 = 32'sd6;

  assign sel_1_2235 = (tmp_15 == 1'b0 ? sel_10179 :
              s_682);

  assign sel_10180 = 32'sd0;

  assign sel_1_2236 = (tmp_17 == 1'b0 ? sel_1_2235 :
              sel_10180);

  assign sel_1_2237 = (s_10 == 1'b0 ? sel_10178 :
              sel_1_2236);

  assign sel_1_2238 = (s_11 == 1'b0 ? sel_10177 :
              sel_1_2237);

  assign sel_10181 = 32'sd0;

  assign sel_1_2239 = (s_12 == 1'b0 ? sel_1_2238 :
              sel_10181);

  assign sel_10182 = 32'sd0;

  assign sel_10183 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10165, sel_10166, sel_10167, sel_10168, sel_10169,
       sel_10170, sel_10171, sel_10172, sel_10173, sel_10174, sel_10175,
       sel_10176, sel_10182, sel_10183, sel_1_2239) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3705_sel_1 = sel_10182;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3705_sel_1 = sel_1_2239;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3705_sel_1 = sel_10176;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3705_sel_1 = sel_10175;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3705_sel_1 = sel_10174;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3705_sel_1 = sel_10173;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3705_sel_1 = sel_10172;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3705_sel_1 = sel_10171;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3705_sel_1 = sel_10170;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3705_sel_1 = sel_10169;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3705_sel_1 = sel_10168;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3705_sel_1 = sel_10167;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3705_sel_1 = sel_10166;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3705_sel_1 = sel_10165;
        end
      default :
        begin
          p3705_sel_1 = sel_10183;
        end
    endcase
    sel_1_2240 = p3705_sel_1;
  end

  assign cont_bits_12_39 = cont_bits_12_26[sel_1_2240];

  assign sel_1_2241 = (tmp_15 == 1'b0 ? sel_1_2234 :
              cont_bits_12_39);

  assign sel_10184 = 32'sd0;

  assign sel_10185 = 32'sd0;

  assign sel_10186 = 32'sd0;

  assign sel_10187 = 32'sd0;

  assign sel_10188 = 32'sd0;

  assign sel_10189 = 32'sd0;

  assign sel_10190 = 32'sd0;

  assign sel_10191 = 32'sd0;

  assign sel_10192 = 32'sd0;

  assign sel_10193 = 32'sd0;

  assign sel_10194 = 32'sd0;

  assign sel_10195 = 32'sd0;

  assign sel_10196 = 32'sd0;

  assign sel_10197 = 32'sd0;

  assign sel_10198 = 32'sd0;

  assign s_683 = 32'sd6;

  assign sel_1_2242 = (tmp_17 == 1'b0 ? sel_10198 :
              s_683);

  assign sel_1_2243 = (s_10 == 1'b0 ? sel_10197 :
              sel_1_2242);

  assign sel_1_2244 = (s_11 == 1'b0 ? sel_10196 :
              sel_1_2243);

  assign sel_10199 = 32'sd0;

  assign sel_1_2245 = (s_12 == 1'b0 ? sel_1_2244 :
              sel_10199);

  assign sel_10200 = 32'sd0;

  assign sel_10201 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10184, sel_10185, sel_10186, sel_10187, sel_10188,
       sel_10189, sel_10190, sel_10191, sel_10192, sel_10193, sel_10194,
       sel_10195, sel_10200, sel_10201, sel_1_2245) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2702_sel_1 = sel_10200;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2702_sel_1 = sel_1_2245;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2702_sel_1 = sel_10195;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2702_sel_1 = sel_10194;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2702_sel_1 = sel_10193;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2702_sel_1 = sel_10192;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2702_sel_1 = sel_10191;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2702_sel_1 = sel_10190;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2702_sel_1 = sel_10189;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2702_sel_1 = sel_10188;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2702_sel_1 = sel_10187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2702_sel_1 = sel_10186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2702_sel_1 = sel_10185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2702_sel_1 = sel_10184;
        end
      default :
        begin
          p2702_sel_1 = sel_10201;
        end
    endcase
    sel_1_2246 = p2702_sel_1;
  end

  assign cont_bits_46 = cont_bits_29[sel_1_2246];

  assign sel_1_2247 = (tmp_17 == 1'b0 ? sel_1_2241 :
              cont_bits_46);

  assign sel_10202 = 1'b0;

  assign sel_10203 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10202, sel_10203, sel_1_2172, sel_1_2247, sel_9871,
       sel_9872, sel_9873, sel_9874, sel_9875, sel_9876, sel_9877, sel_9878,
       sel_9879, sel_9880, sel_9881) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p449_sel_1 = sel_10202;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p449_sel_1 = sel_1_2247;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p449_sel_1 = sel_1_2172;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p449_sel_1 = sel_9881;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p449_sel_1 = sel_9880;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p449_sel_1 = sel_9879;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p449_sel_1 = sel_9878;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p449_sel_1 = sel_9877;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p449_sel_1 = sel_9876;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p449_sel_1 = sel_9875;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p449_sel_1 = sel_9874;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p449_sel_1 = sel_9873;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p449_sel_1 = sel_9872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p449_sel_1 = sel_9871;
        end
      default :
        begin
          p449_sel_1 = sel_10203;
        end
    endcase
    sel_1_2248 = p449_sel_1;
  end

  assign sel_10204 = 1'b0;

  assign sel_10205 = 1'b0;

  assign sel_10206 = 1'b0;

  assign sel_10207 = 1'b0;

  assign sel_10208 = 1'b0;

  assign sel_10209 = 1'b0;

  assign sel_10210 = 1'b0;

  assign sel_10211 = 1'b0;

  assign sel_10212 = 1'b0;

  assign sel_10213 = 1'b0;

  assign sel_10214 = 1'b0;

  assign sel_10215 = 1'b0;

  assign s_684 = 1'b1;

  assign sel_2_1545 = (s_13 == 1'b0 ? sel_10215 :
              s_684);

  assign s_685 = 1'b1;

  assign sel_2_1546 = (s_14 == 1'b0 ? sel_2_1545 :
              s_685);

  assign s_686 = 1'b1;

  assign sel_2_1547 = (s_15 == 1'b0 ? sel_2_1546 :
              s_686);

  assign s_687 = 1'b1;

  assign sel_2_1548 = (s_16 == 1'b0 ? sel_2_1547 :
              s_687);

  assign s_688 = 1'b1;

  assign sel_2_1549 = (s_17 == 1'b0 ? sel_2_1548 :
              s_688);

  assign s_689 = 1'b1;

  assign sel_2_1550 = (s_18 == 1'b0 ? sel_2_1549 :
              s_689);

  assign s_690 = 1'b1;

  assign sel_2_1551 = (s_19 == 1'b0 ? sel_2_1550 :
              s_690);

  assign s_691 = 1'b1;

  assign sel_2_1552 = (s_20 == 1'b0 ? sel_2_1551 :
              s_691);

  assign sel_10216 = 1'b0;

  assign sel_10217 = 1'b0;

  assign sel_10218 = 1'b0;

  assign s_692 = 1'b1;

  assign sel_2_1553 = (tmp_3 == 1'b0 ? sel_10218 :
              s_692);

  assign s_693 = 1'b1;

  assign sel_2_1554 = (tmp_5 == 1'b0 ? sel_2_1553 :
              s_693);

  assign s_694 = 1'b1;

  assign sel_2_1555 = (tmp_7 == 1'b0 ? sel_2_1554 :
              s_694);

  assign s_695 = 1'b1;

  assign sel_2_1556 = (tmp_9 == 1'b0 ? sel_2_1555 :
              s_695);

  assign s_696 = 1'b1;

  assign sel_2_1557 = (tmp_11 == 1'b0 ? sel_2_1556 :
              s_696);

  assign s_697 = 1'b1;

  assign sel_2_1558 = (tmp_13 == 1'b0 ? sel_2_1557 :
              s_697);

  assign s_698 = 1'b1;

  assign sel_2_1559 = (tmp_15 == 1'b0 ? sel_2_1558 :
              s_698);

  assign s_699 = 1'b1;

  assign sel_2_1560 = (tmp_17 == 1'b0 ? sel_2_1559 :
              s_699);

  assign sel_2_1561 = (s_10 == 1'b0 ? sel_10217 :
              sel_2_1560);

  assign sel_2_1562 = (s_11 == 1'b0 ? sel_10216 :
              sel_2_1561);

  assign sel_10219 = 1'b0;

  assign sel_2_1563 = (s_12 == 1'b0 ? sel_2_1562 :
              sel_10219);

  assign sel_10220 = 1'b0;

  assign sel_10221 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10204, sel_10205, sel_10206, sel_10207, sel_10208,
       sel_10209, sel_10210, sel_10211, sel_10212, sel_10213, sel_10214,
       sel_10220, sel_10221, sel_2_1552, sel_2_1563) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p434_sel_2 = sel_10220;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p434_sel_2 = sel_2_1563;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p434_sel_2 = sel_2_1552;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p434_sel_2 = sel_10214;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p434_sel_2 = sel_10213;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p434_sel_2 = sel_10212;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p434_sel_2 = sel_10211;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p434_sel_2 = sel_10210;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p434_sel_2 = sel_10209;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p434_sel_2 = sel_10208;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p434_sel_2 = sel_10207;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p434_sel_2 = sel_10206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p434_sel_2 = sel_10205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p434_sel_2 = sel_10204;
        end
      default :
        begin
          p434_sel_2 = sel_10221;
        end
    endcase
    sel_2_1564 = p434_sel_2;
  end

  assign sel_10222 = 1'b0;

  assign sel_10223 = 1'b0;

  assign sel_10224 = 1'b0;

  assign sel_10225 = 1'b0;

  assign sel_10226 = 1'b0;

  assign sel_10227 = 1'b0;

  assign sel_10228 = 1'b0;

  assign sel_10229 = 1'b0;

  assign sel_10230 = 1'b0;

  assign sel_10231 = 1'b0;

  assign sel_10232 = 1'b0;

  assign sel_10233 = 32'sd0;

  assign sel_10234 = 32'sd0;

  assign sel_10235 = 32'sd0;

  assign sel_10236 = 32'sd0;

  assign sel_10237 = 32'sd0;

  assign sel_10238 = 32'sd0;

  assign sel_10239 = 32'sd0;

  assign sel_10240 = 32'sd0;

  assign sel_10241 = 32'sd0;

  assign sel_10242 = 32'sd0;

  assign sel_10243 = 32'sd0;

  assign sel_10244 = 32'sd0;

  assign s_700 = 32'sd7;

  assign sel_1_2249 = (s_13 == 1'b0 ? sel_10244 :
              s_700);

  assign sel_10245 = 32'sd0;

  assign sel_1_2250 = (s_14 == 1'b0 ? sel_1_2249 :
              sel_10245);

  assign sel_10246 = 32'sd0;

  assign sel_1_2251 = (s_15 == 1'b0 ? sel_1_2250 :
              sel_10246);

  assign sel_10247 = 32'sd0;

  assign sel_1_2252 = (s_16 == 1'b0 ? sel_1_2251 :
              sel_10247);

  assign sel_10248 = 32'sd0;

  assign sel_1_2253 = (s_17 == 1'b0 ? sel_1_2252 :
              sel_10248);

  assign sel_10249 = 32'sd0;

  assign sel_1_2254 = (s_18 == 1'b0 ? sel_1_2253 :
              sel_10249);

  assign sel_10250 = 32'sd0;

  assign sel_1_2255 = (s_19 == 1'b0 ? sel_1_2254 :
              sel_10250);

  assign sel_10251 = 32'sd0;

  assign sel_1_2256 = (s_20 == 1'b0 ? sel_1_2255 :
              sel_10251);

  assign sel_10252 = 32'sd0;

  assign sel_10253 = 32'sd0;

  assign sel_10254 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10233, sel_10234, sel_10235, sel_10236, sel_10237,
       sel_10238, sel_10239, sel_10240, sel_10241, sel_10242, sel_10243,
       sel_10252, sel_10253, sel_10254, sel_1_2256) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2056_sel_1 = sel_10253;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2056_sel_1 = sel_10252;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2056_sel_1 = sel_1_2256;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2056_sel_1 = sel_10243;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2056_sel_1 = sel_10242;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2056_sel_1 = sel_10241;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2056_sel_1 = sel_10240;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2056_sel_1 = sel_10239;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2056_sel_1 = sel_10238;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2056_sel_1 = sel_10237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2056_sel_1 = sel_10236;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2056_sel_1 = sel_10235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2056_sel_1 = sel_10234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2056_sel_1 = sel_10233;
        end
      default :
        begin
          p2056_sel_1 = sel_10254;
        end
    endcase
    sel_1_2257 = p2056_sel_1;
  end

  assign cont_bits_41_40 = cont_bits_41_12[sel_1_2257];

  assign sel_10255 = 32'sd0;

  assign sel_10256 = 32'sd0;

  assign sel_10257 = 32'sd0;

  assign sel_10258 = 32'sd0;

  assign sel_10259 = 32'sd0;

  assign sel_10260 = 32'sd0;

  assign sel_10261 = 32'sd0;

  assign sel_10262 = 32'sd0;

  assign sel_10263 = 32'sd0;

  assign sel_10264 = 32'sd0;

  assign sel_10265 = 32'sd0;

  assign sel_10266 = 32'sd0;

  assign s_701 = 32'sd7;

  assign sel_1_2258 = (s_14 == 1'b0 ? sel_10266 :
              s_701);

  assign sel_10267 = 32'sd0;

  assign sel_1_2259 = (s_15 == 1'b0 ? sel_1_2258 :
              sel_10267);

  assign sel_10268 = 32'sd0;

  assign sel_1_2260 = (s_16 == 1'b0 ? sel_1_2259 :
              sel_10268);

  assign sel_10269 = 32'sd0;

  assign sel_1_2261 = (s_17 == 1'b0 ? sel_1_2260 :
              sel_10269);

  assign sel_10270 = 32'sd0;

  assign sel_1_2262 = (s_18 == 1'b0 ? sel_1_2261 :
              sel_10270);

  assign sel_10271 = 32'sd0;

  assign sel_1_2263 = (s_19 == 1'b0 ? sel_1_2262 :
              sel_10271);

  assign sel_10272 = 32'sd0;

  assign sel_1_2264 = (s_20 == 1'b0 ? sel_1_2263 :
              sel_10272);

  assign sel_10273 = 32'sd0;

  assign sel_10274 = 32'sd0;

  assign sel_10275 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10255, sel_10256, sel_10257, sel_10258, sel_10259,
       sel_10260, sel_10261, sel_10262, sel_10263, sel_10264, sel_10265,
       sel_10273, sel_10274, sel_10275, sel_1_2264) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1223_sel_1 = sel_10274;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1223_sel_1 = sel_10273;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1223_sel_1 = sel_1_2264;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1223_sel_1 = sel_10265;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1223_sel_1 = sel_10264;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1223_sel_1 = sel_10263;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1223_sel_1 = sel_10262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1223_sel_1 = sel_10261;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1223_sel_1 = sel_10260;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1223_sel_1 = sel_10259;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1223_sel_1 = sel_10258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1223_sel_1 = sel_10257;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1223_sel_1 = sel_10256;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1223_sel_1 = sel_10255;
        end
      default :
        begin
          p1223_sel_1 = sel_10275;
        end
    endcase
    sel_1_2265 = p1223_sel_1;
  end

  assign cont_bits_42_40 = cont_bits_42_12[sel_1_2265];

  assign sel_1_2266 = (s_14 == 1'b0 ? cont_bits_41_40 :
              cont_bits_42_40);

  assign sel_10276 = 32'sd0;

  assign sel_10277 = 32'sd0;

  assign sel_10278 = 32'sd0;

  assign sel_10279 = 32'sd0;

  assign sel_10280 = 32'sd0;

  assign sel_10281 = 32'sd0;

  assign sel_10282 = 32'sd0;

  assign sel_10283 = 32'sd0;

  assign sel_10284 = 32'sd0;

  assign sel_10285 = 32'sd0;

  assign sel_10286 = 32'sd0;

  assign sel_10287 = 32'sd0;

  assign s_702 = 32'sd7;

  assign sel_1_2267 = (s_15 == 1'b0 ? sel_10287 :
              s_702);

  assign sel_10288 = 32'sd0;

  assign sel_1_2268 = (s_16 == 1'b0 ? sel_1_2267 :
              sel_10288);

  assign sel_10289 = 32'sd0;

  assign sel_1_2269 = (s_17 == 1'b0 ? sel_1_2268 :
              sel_10289);

  assign sel_10290 = 32'sd0;

  assign sel_1_2270 = (s_18 == 1'b0 ? sel_1_2269 :
              sel_10290);

  assign sel_10291 = 32'sd0;

  assign sel_1_2271 = (s_19 == 1'b0 ? sel_1_2270 :
              sel_10291);

  assign sel_10292 = 32'sd0;

  assign sel_1_2272 = (s_20 == 1'b0 ? sel_1_2271 :
              sel_10292);

  assign sel_10293 = 32'sd0;

  assign sel_10294 = 32'sd0;

  assign sel_10295 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10276, sel_10277, sel_10278, sel_10279, sel_10280,
       sel_10281, sel_10282, sel_10283, sel_10284, sel_10285, sel_10286,
       sel_10293, sel_10294, sel_10295, sel_1_2272) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1665_sel_1 = sel_10294;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1665_sel_1 = sel_10293;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1665_sel_1 = sel_1_2272;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1665_sel_1 = sel_10286;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1665_sel_1 = sel_10285;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1665_sel_1 = sel_10284;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1665_sel_1 = sel_10283;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1665_sel_1 = sel_10282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1665_sel_1 = sel_10281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1665_sel_1 = sel_10280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1665_sel_1 = sel_10279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1665_sel_1 = sel_10278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1665_sel_1 = sel_10277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1665_sel_1 = sel_10276;
        end
      default :
        begin
          p1665_sel_1 = sel_10295;
        end
    endcase
    sel_1_2273 = p1665_sel_1;
  end

  assign cont_bits_32_40 = cont_bits_32_12[sel_1_2273];

  assign sel_1_2274 = (s_15 == 1'b0 ? sel_1_2266 :
              cont_bits_32_40);

  assign sel_10296 = 32'sd0;

  assign sel_10297 = 32'sd0;

  assign sel_10298 = 32'sd0;

  assign sel_10299 = 32'sd0;

  assign sel_10300 = 32'sd0;

  assign sel_10301 = 32'sd0;

  assign sel_10302 = 32'sd0;

  assign sel_10303 = 32'sd0;

  assign sel_10304 = 32'sd0;

  assign sel_10305 = 32'sd0;

  assign sel_10306 = 32'sd0;

  assign sel_10307 = 32'sd0;

  assign s_703 = 32'sd7;

  assign sel_1_2275 = (s_16 == 1'b0 ? sel_10307 :
              s_703);

  assign sel_10308 = 32'sd0;

  assign sel_1_2276 = (s_17 == 1'b0 ? sel_1_2275 :
              sel_10308);

  assign sel_10309 = 32'sd0;

  assign sel_1_2277 = (s_18 == 1'b0 ? sel_1_2276 :
              sel_10309);

  assign sel_10310 = 32'sd0;

  assign sel_1_2278 = (s_19 == 1'b0 ? sel_1_2277 :
              sel_10310);

  assign sel_10311 = 32'sd0;

  assign sel_1_2279 = (s_20 == 1'b0 ? sel_1_2278 :
              sel_10311);

  assign sel_10312 = 32'sd0;

  assign sel_10313 = 32'sd0;

  assign sel_10314 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10296, sel_10297, sel_10298, sel_10299, sel_10300,
       sel_10301, sel_10302, sel_10303, sel_10304, sel_10305, sel_10306,
       sel_10312, sel_10313, sel_10314, sel_1_2279) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1019_sel_1 = sel_10313;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1019_sel_1 = sel_10312;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1019_sel_1 = sel_1_2279;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1019_sel_1 = sel_10306;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1019_sel_1 = sel_10305;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1019_sel_1 = sel_10304;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1019_sel_1 = sel_10303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1019_sel_1 = sel_10302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1019_sel_1 = sel_10301;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1019_sel_1 = sel_10300;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1019_sel_1 = sel_10299;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1019_sel_1 = sel_10298;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1019_sel_1 = sel_10297;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1019_sel_1 = sel_10296;
        end
      default :
        begin
          p1019_sel_1 = sel_10314;
        end
    endcase
    sel_1_2280 = p1019_sel_1;
  end

  assign cont_bits_31_40 = cont_bits_31_12[sel_1_2280];

  assign sel_1_2281 = (s_16 == 1'b0 ? sel_1_2274 :
              cont_bits_31_40);

  assign sel_10315 = 32'sd0;

  assign sel_10316 = 32'sd0;

  assign sel_10317 = 32'sd0;

  assign sel_10318 = 32'sd0;

  assign sel_10319 = 32'sd0;

  assign sel_10320 = 32'sd0;

  assign sel_10321 = 32'sd0;

  assign sel_10322 = 32'sd0;

  assign sel_10323 = 32'sd0;

  assign sel_10324 = 32'sd0;

  assign sel_10325 = 32'sd0;

  assign sel_10326 = 32'sd0;

  assign s_704 = 32'sd7;

  assign sel_1_2282 = (s_17 == 1'b0 ? sel_10326 :
              s_704);

  assign sel_10327 = 32'sd0;

  assign sel_1_2283 = (s_18 == 1'b0 ? sel_1_2282 :
              sel_10327);

  assign sel_10328 = 32'sd0;

  assign sel_1_2284 = (s_19 == 1'b0 ? sel_1_2283 :
              sel_10328);

  assign sel_10329 = 32'sd0;

  assign sel_1_2285 = (s_20 == 1'b0 ? sel_1_2284 :
              sel_10329);

  assign sel_10330 = 32'sd0;

  assign sel_10331 = 32'sd0;

  assign sel_10332 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10315, sel_10316, sel_10317, sel_10318, sel_10319,
       sel_10320, sel_10321, sel_10322, sel_10323, sel_10324, sel_10325,
       sel_10330, sel_10331, sel_10332, sel_1_2285) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1869_sel_1 = sel_10331;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1869_sel_1 = sel_10330;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1869_sel_1 = sel_1_2285;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1869_sel_1 = sel_10325;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1869_sel_1 = sel_10324;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1869_sel_1 = sel_10323;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1869_sel_1 = sel_10322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1869_sel_1 = sel_10321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1869_sel_1 = sel_10320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1869_sel_1 = sel_10319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1869_sel_1 = sel_10318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1869_sel_1 = sel_10317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1869_sel_1 = sel_10316;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1869_sel_1 = sel_10315;
        end
      default :
        begin
          p1869_sel_1 = sel_10332;
        end
    endcase
    sel_1_2286 = p1869_sel_1;
  end

  assign cont_bits_22_40 = cont_bits_22_12[sel_1_2286];

  assign sel_1_2287 = (s_17 == 1'b0 ? sel_1_2281 :
              cont_bits_22_40);

  assign sel_10333 = 32'sd0;

  assign sel_10334 = 32'sd0;

  assign sel_10335 = 32'sd0;

  assign sel_10336 = 32'sd0;

  assign sel_10337 = 32'sd0;

  assign sel_10338 = 32'sd0;

  assign sel_10339 = 32'sd0;

  assign sel_10340 = 32'sd0;

  assign sel_10341 = 32'sd0;

  assign sel_10342 = 32'sd0;

  assign sel_10343 = 32'sd0;

  assign sel_10344 = 32'sd0;

  assign s_705 = 32'sd7;

  assign sel_1_2288 = (s_18 == 1'b0 ? sel_10344 :
              s_705);

  assign sel_10345 = 32'sd0;

  assign sel_1_2289 = (s_19 == 1'b0 ? sel_1_2288 :
              sel_10345);

  assign sel_10346 = 32'sd0;

  assign sel_1_2290 = (s_20 == 1'b0 ? sel_1_2289 :
              sel_10346);

  assign sel_10347 = 32'sd0;

  assign sel_10348 = 32'sd0;

  assign sel_10349 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10333, sel_10334, sel_10335, sel_10336, sel_10337,
       sel_10338, sel_10339, sel_10340, sel_10341, sel_10342, sel_10343,
       sel_10347, sel_10348, sel_10349, sel_1_2290) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2396_sel_1 = sel_10348;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2396_sel_1 = sel_10347;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2396_sel_1 = sel_1_2290;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2396_sel_1 = sel_10343;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2396_sel_1 = sel_10342;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2396_sel_1 = sel_10341;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2396_sel_1 = sel_10340;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2396_sel_1 = sel_10339;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2396_sel_1 = sel_10338;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2396_sel_1 = sel_10337;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2396_sel_1 = sel_10336;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2396_sel_1 = sel_10335;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2396_sel_1 = sel_10334;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2396_sel_1 = sel_10333;
        end
      default :
        begin
          p2396_sel_1 = sel_10349;
        end
    endcase
    sel_1_2291 = p2396_sel_1;
  end

  assign cont_bits_21_40 = cont_bits_21_12[sel_1_2291];

  assign sel_1_2292 = (s_18 == 1'b0 ? sel_1_2287 :
              cont_bits_21_40);

  assign sel_10350 = 32'sd0;

  assign sel_10351 = 32'sd0;

  assign sel_10352 = 32'sd0;

  assign sel_10353 = 32'sd0;

  assign sel_10354 = 32'sd0;

  assign sel_10355 = 32'sd0;

  assign sel_10356 = 32'sd0;

  assign sel_10357 = 32'sd0;

  assign sel_10358 = 32'sd0;

  assign sel_10359 = 32'sd0;

  assign sel_10360 = 32'sd0;

  assign sel_10361 = 32'sd0;

  assign s_706 = 32'sd7;

  assign sel_1_2293 = (s_19 == 1'b0 ? sel_10361 :
              s_706);

  assign sel_10362 = 32'sd0;

  assign sel_1_2294 = (s_20 == 1'b0 ? sel_1_2293 :
              sel_10362);

  assign sel_10363 = 32'sd0;

  assign sel_10364 = 32'sd0;

  assign sel_10365 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10350, sel_10351, sel_10352, sel_10353, sel_10354,
       sel_10355, sel_10356, sel_10357, sel_10358, sel_10359, sel_10360,
       sel_10363, sel_10364, sel_10365, sel_1_2294) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1478_sel_1 = sel_10364;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1478_sel_1 = sel_10363;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1478_sel_1 = sel_1_2294;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1478_sel_1 = sel_10360;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1478_sel_1 = sel_10359;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1478_sel_1 = sel_10358;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1478_sel_1 = sel_10357;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1478_sel_1 = sel_10356;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1478_sel_1 = sel_10355;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1478_sel_1 = sel_10354;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1478_sel_1 = sel_10353;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1478_sel_1 = sel_10352;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1478_sel_1 = sel_10351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1478_sel_1 = sel_10350;
        end
      default :
        begin
          p1478_sel_1 = sel_10365;
        end
    endcase
    sel_1_2295 = p1478_sel_1;
  end

  assign cont_bits_12_40 = cont_bits_12_12[sel_1_2295];

  assign sel_1_2296 = (s_19 == 1'b0 ? sel_1_2292 :
              cont_bits_12_40);

  assign sel_10366 = 32'sd0;

  assign sel_10367 = 32'sd0;

  assign sel_10368 = 32'sd0;

  assign sel_10369 = 32'sd0;

  assign sel_10370 = 32'sd0;

  assign sel_10371 = 32'sd0;

  assign sel_10372 = 32'sd0;

  assign sel_10373 = 32'sd0;

  assign sel_10374 = 32'sd0;

  assign sel_10375 = 32'sd0;

  assign sel_10376 = 32'sd0;

  assign sel_10377 = 32'sd0;

  assign s_707 = 32'sd7;

  assign sel_1_2297 = (s_20 == 1'b0 ? sel_10377 :
              s_707);

  assign sel_10378 = 32'sd0;

  assign sel_10379 = 32'sd0;

  assign sel_10380 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10366, sel_10367, sel_10368, sel_10369, sel_10370,
       sel_10371, sel_10372, sel_10373, sel_10374, sel_10375, sel_10376,
       sel_10378, sel_10379, sel_10380, sel_1_2297) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2192_sel_1 = sel_10379;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2192_sel_1 = sel_10378;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2192_sel_1 = sel_1_2297;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2192_sel_1 = sel_10376;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2192_sel_1 = sel_10375;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2192_sel_1 = sel_10374;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2192_sel_1 = sel_10373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2192_sel_1 = sel_10372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2192_sel_1 = sel_10371;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2192_sel_1 = sel_10370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2192_sel_1 = sel_10369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2192_sel_1 = sel_10368;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2192_sel_1 = sel_10367;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2192_sel_1 = sel_10366;
        end
      default :
        begin
          p2192_sel_1 = sel_10380;
        end
    endcase
    sel_1_2298 = p2192_sel_1;
  end

  assign cont_bits_47 = cont_bits_13[sel_1_2298];

  assign sel_1_2299 = (s_20 == 1'b0 ? sel_1_2296 :
              cont_bits_47);

  assign sel_10381 = 32'sd0;

  assign sel_10382 = 32'sd0;

  assign sel_10383 = 32'sd0;

  assign sel_10384 = 32'sd0;

  assign sel_10385 = 32'sd0;

  assign sel_10386 = 32'sd0;

  assign sel_10387 = 32'sd0;

  assign sel_10388 = 32'sd0;

  assign sel_10389 = 32'sd0;

  assign sel_10390 = 32'sd0;

  assign sel_10391 = 32'sd0;

  assign sel_10392 = 32'sd0;

  assign sel_10393 = 32'sd0;

  assign sel_10394 = 32'sd0;

  assign sel_10395 = 32'sd0;

  assign s_708 = 32'sd7;

  assign sel_1_2300 = (tmp_3 == 1'b0 ? sel_10395 :
              s_708);

  assign sel_10396 = 32'sd0;

  assign sel_1_2301 = (tmp_5 == 1'b0 ? sel_1_2300 :
              sel_10396);

  assign sel_10397 = 32'sd0;

  assign sel_1_2302 = (tmp_7 == 1'b0 ? sel_1_2301 :
              sel_10397);

  assign sel_10398 = 32'sd0;

  assign sel_1_2303 = (tmp_9 == 1'b0 ? sel_1_2302 :
              sel_10398);

  assign sel_10399 = 32'sd0;

  assign sel_1_2304 = (tmp_11 == 1'b0 ? sel_1_2303 :
              sel_10399);

  assign sel_10400 = 32'sd0;

  assign sel_1_2305 = (tmp_13 == 1'b0 ? sel_1_2304 :
              sel_10400);

  assign sel_10401 = 32'sd0;

  assign sel_1_2306 = (tmp_15 == 1'b0 ? sel_1_2305 :
              sel_10401);

  assign sel_10402 = 32'sd0;

  assign sel_1_2307 = (tmp_17 == 1'b0 ? sel_1_2306 :
              sel_10402);

  assign sel_1_2308 = (s_10 == 1'b0 ? sel_10394 :
              sel_1_2307);

  assign sel_1_2309 = (s_11 == 1'b0 ? sel_10393 :
              sel_1_2308);

  assign sel_10403 = 32'sd0;

  assign sel_1_2310 = (s_12 == 1'b0 ? sel_1_2309 :
              sel_10403);

  assign sel_10404 = 32'sd0;

  assign sel_10405 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10381, sel_10382, sel_10383, sel_10384, sel_10385,
       sel_10386, sel_10387, sel_10388, sel_10389, sel_10390, sel_10391,
       sel_10392, sel_10404, sel_10405, sel_1_2310) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3280_sel_1 = sel_10404;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3280_sel_1 = sel_1_2310;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3280_sel_1 = sel_10392;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3280_sel_1 = sel_10391;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3280_sel_1 = sel_10390;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3280_sel_1 = sel_10389;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3280_sel_1 = sel_10388;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3280_sel_1 = sel_10387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3280_sel_1 = sel_10386;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3280_sel_1 = sel_10385;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3280_sel_1 = sel_10384;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3280_sel_1 = sel_10383;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3280_sel_1 = sel_10382;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3280_sel_1 = sel_10381;
        end
      default :
        begin
          p3280_sel_1 = sel_10405;
        end
    endcase
    sel_1_2311 = p3280_sel_1;
  end

  assign cont_bits_41_41 = cont_bits_41_26[sel_1_2311];

  assign sel_10406 = 32'sd0;

  assign sel_10407 = 32'sd0;

  assign sel_10408 = 32'sd0;

  assign sel_10409 = 32'sd0;

  assign sel_10410 = 32'sd0;

  assign sel_10411 = 32'sd0;

  assign sel_10412 = 32'sd0;

  assign sel_10413 = 32'sd0;

  assign sel_10414 = 32'sd0;

  assign sel_10415 = 32'sd0;

  assign sel_10416 = 32'sd0;

  assign sel_10417 = 32'sd0;

  assign sel_10418 = 32'sd0;

  assign sel_10419 = 32'sd0;

  assign sel_10420 = 32'sd0;

  assign s_709 = 32'sd7;

  assign sel_1_2312 = (tmp_5 == 1'b0 ? sel_10420 :
              s_709);

  assign sel_10421 = 32'sd0;

  assign sel_1_2313 = (tmp_7 == 1'b0 ? sel_1_2312 :
              sel_10421);

  assign sel_10422 = 32'sd0;

  assign sel_1_2314 = (tmp_9 == 1'b0 ? sel_1_2313 :
              sel_10422);

  assign sel_10423 = 32'sd0;

  assign sel_1_2315 = (tmp_11 == 1'b0 ? sel_1_2314 :
              sel_10423);

  assign sel_10424 = 32'sd0;

  assign sel_1_2316 = (tmp_13 == 1'b0 ? sel_1_2315 :
              sel_10424);

  assign sel_10425 = 32'sd0;

  assign sel_1_2317 = (tmp_15 == 1'b0 ? sel_1_2316 :
              sel_10425);

  assign sel_10426 = 32'sd0;

  assign sel_1_2318 = (tmp_17 == 1'b0 ? sel_1_2317 :
              sel_10426);

  assign sel_1_2319 = (s_10 == 1'b0 ? sel_10419 :
              sel_1_2318);

  assign sel_1_2320 = (s_11 == 1'b0 ? sel_10418 :
              sel_1_2319);

  assign sel_10427 = 32'sd0;

  assign sel_1_2321 = (s_12 == 1'b0 ? sel_1_2320 :
              sel_10427);

  assign sel_10428 = 32'sd0;

  assign sel_10429 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10406, sel_10407, sel_10408, sel_10409, sel_10410,
       sel_10411, sel_10412, sel_10413, sel_10414, sel_10415, sel_10416,
       sel_10417, sel_10428, sel_10429, sel_1_2321) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2872_sel_1 = sel_10428;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2872_sel_1 = sel_1_2321;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2872_sel_1 = sel_10417;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2872_sel_1 = sel_10416;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2872_sel_1 = sel_10415;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2872_sel_1 = sel_10414;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2872_sel_1 = sel_10413;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2872_sel_1 = sel_10412;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2872_sel_1 = sel_10411;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2872_sel_1 = sel_10410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2872_sel_1 = sel_10409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2872_sel_1 = sel_10408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2872_sel_1 = sel_10407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2872_sel_1 = sel_10406;
        end
      default :
        begin
          p2872_sel_1 = sel_10429;
        end
    endcase
    sel_1_2322 = p2872_sel_1;
  end

  assign cont_bits_42_41 = cont_bits_42_26[sel_1_2322];

  assign sel_1_2323 = (tmp_5 == 1'b0 ? cont_bits_41_41 :
              cont_bits_42_41);

  assign sel_10430 = 32'sd0;

  assign sel_10431 = 32'sd0;

  assign sel_10432 = 32'sd0;

  assign sel_10433 = 32'sd0;

  assign sel_10434 = 32'sd0;

  assign sel_10435 = 32'sd0;

  assign sel_10436 = 32'sd0;

  assign sel_10437 = 32'sd0;

  assign sel_10438 = 32'sd0;

  assign sel_10439 = 32'sd0;

  assign sel_10440 = 32'sd0;

  assign sel_10441 = 32'sd0;

  assign sel_10442 = 32'sd0;

  assign sel_10443 = 32'sd0;

  assign sel_10444 = 32'sd0;

  assign s_710 = 32'sd7;

  assign sel_1_2324 = (tmp_7 == 1'b0 ? sel_10444 :
              s_710);

  assign sel_10445 = 32'sd0;

  assign sel_1_2325 = (tmp_9 == 1'b0 ? sel_1_2324 :
              sel_10445);

  assign sel_10446 = 32'sd0;

  assign sel_1_2326 = (tmp_11 == 1'b0 ? sel_1_2325 :
              sel_10446);

  assign sel_10447 = 32'sd0;

  assign sel_1_2327 = (tmp_13 == 1'b0 ? sel_1_2326 :
              sel_10447);

  assign sel_10448 = 32'sd0;

  assign sel_1_2328 = (tmp_15 == 1'b0 ? sel_1_2327 :
              sel_10448);

  assign sel_10449 = 32'sd0;

  assign sel_1_2329 = (tmp_17 == 1'b0 ? sel_1_2328 :
              sel_10449);

  assign sel_1_2330 = (s_10 == 1'b0 ? sel_10443 :
              sel_1_2329);

  assign sel_1_2331 = (s_11 == 1'b0 ? sel_10442 :
              sel_1_2330);

  assign sel_10450 = 32'sd0;

  assign sel_1_2332 = (s_12 == 1'b0 ? sel_1_2331 :
              sel_10450);

  assign sel_10451 = 32'sd0;

  assign sel_10452 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10430, sel_10431, sel_10432, sel_10433, sel_10434,
       sel_10435, sel_10436, sel_10437, sel_10438, sel_10439, sel_10440,
       sel_10441, sel_10451, sel_10452, sel_1_2332) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3603_sel_1 = sel_10451;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3603_sel_1 = sel_1_2332;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3603_sel_1 = sel_10441;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3603_sel_1 = sel_10440;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3603_sel_1 = sel_10439;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3603_sel_1 = sel_10438;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3603_sel_1 = sel_10437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3603_sel_1 = sel_10436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3603_sel_1 = sel_10435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3603_sel_1 = sel_10434;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3603_sel_1 = sel_10433;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3603_sel_1 = sel_10432;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3603_sel_1 = sel_10431;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3603_sel_1 = sel_10430;
        end
      default :
        begin
          p3603_sel_1 = sel_10452;
        end
    endcase
    sel_1_2333 = p3603_sel_1;
  end

  assign cont_bits_32_41 = cont_bits_32_26[sel_1_2333];

  assign sel_1_2334 = (tmp_7 == 1'b0 ? sel_1_2323 :
              cont_bits_32_41);

  assign sel_10453 = 32'sd0;

  assign sel_10454 = 32'sd0;

  assign sel_10455 = 32'sd0;

  assign sel_10456 = 32'sd0;

  assign sel_10457 = 32'sd0;

  assign sel_10458 = 32'sd0;

  assign sel_10459 = 32'sd0;

  assign sel_10460 = 32'sd0;

  assign sel_10461 = 32'sd0;

  assign sel_10462 = 32'sd0;

  assign sel_10463 = 32'sd0;

  assign sel_10464 = 32'sd0;

  assign sel_10465 = 32'sd0;

  assign sel_10466 = 32'sd0;

  assign sel_10467 = 32'sd0;

  assign s_711 = 32'sd7;

  assign sel_1_2335 = (tmp_9 == 1'b0 ? sel_10467 :
              s_711);

  assign sel_10468 = 32'sd0;

  assign sel_1_2336 = (tmp_11 == 1'b0 ? sel_1_2335 :
              sel_10468);

  assign sel_10469 = 32'sd0;

  assign sel_1_2337 = (tmp_13 == 1'b0 ? sel_1_2336 :
              sel_10469);

  assign sel_10470 = 32'sd0;

  assign sel_1_2338 = (tmp_15 == 1'b0 ? sel_1_2337 :
              sel_10470);

  assign sel_10471 = 32'sd0;

  assign sel_1_2339 = (tmp_17 == 1'b0 ? sel_1_2338 :
              sel_10471);

  assign sel_1_2340 = (s_10 == 1'b0 ? sel_10466 :
              sel_1_2339);

  assign sel_1_2341 = (s_11 == 1'b0 ? sel_10465 :
              sel_1_2340);

  assign sel_10472 = 32'sd0;

  assign sel_1_2342 = (s_12 == 1'b0 ? sel_1_2341 :
              sel_10472);

  assign sel_10473 = 32'sd0;

  assign sel_10474 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10453, sel_10454, sel_10455, sel_10456, sel_10457,
       sel_10458, sel_10459, sel_10460, sel_10461, sel_10462, sel_10463,
       sel_10464, sel_10473, sel_10474, sel_1_2342) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4198_sel_1 = sel_10473;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4198_sel_1 = sel_1_2342;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4198_sel_1 = sel_10464;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4198_sel_1 = sel_10463;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4198_sel_1 = sel_10462;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4198_sel_1 = sel_10461;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4198_sel_1 = sel_10460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4198_sel_1 = sel_10459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4198_sel_1 = sel_10458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4198_sel_1 = sel_10457;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4198_sel_1 = sel_10456;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4198_sel_1 = sel_10455;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4198_sel_1 = sel_10454;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4198_sel_1 = sel_10453;
        end
      default :
        begin
          p4198_sel_1 = sel_10474;
        end
    endcase
    sel_1_2343 = p4198_sel_1;
  end

  assign cont_bits_31_41 = cont_bits_31_26[sel_1_2343];

  assign sel_1_2344 = (tmp_9 == 1'b0 ? sel_1_2334 :
              cont_bits_31_41);

  assign sel_10475 = 32'sd0;

  assign sel_10476 = 32'sd0;

  assign sel_10477 = 32'sd0;

  assign sel_10478 = 32'sd0;

  assign sel_10479 = 32'sd0;

  assign sel_10480 = 32'sd0;

  assign sel_10481 = 32'sd0;

  assign sel_10482 = 32'sd0;

  assign sel_10483 = 32'sd0;

  assign sel_10484 = 32'sd0;

  assign sel_10485 = 32'sd0;

  assign sel_10486 = 32'sd0;

  assign sel_10487 = 32'sd0;

  assign sel_10488 = 32'sd0;

  assign sel_10489 = 32'sd0;

  assign s_712 = 32'sd7;

  assign sel_1_2345 = (tmp_11 == 1'b0 ? sel_10489 :
              s_712);

  assign sel_10490 = 32'sd0;

  assign sel_1_2346 = (tmp_13 == 1'b0 ? sel_1_2345 :
              sel_10490);

  assign sel_10491 = 32'sd0;

  assign sel_1_2347 = (tmp_15 == 1'b0 ? sel_1_2346 :
              sel_10491);

  assign sel_10492 = 32'sd0;

  assign sel_1_2348 = (tmp_17 == 1'b0 ? sel_1_2347 :
              sel_10492);

  assign sel_1_2349 = (s_10 == 1'b0 ? sel_10488 :
              sel_1_2348);

  assign sel_1_2350 = (s_11 == 1'b0 ? sel_10487 :
              sel_1_2349);

  assign sel_10493 = 32'sd0;

  assign sel_1_2351 = (s_12 == 1'b0 ? sel_1_2350 :
              sel_10493);

  assign sel_10494 = 32'sd0;

  assign sel_10495 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10475, sel_10476, sel_10477, sel_10478, sel_10479,
       sel_10480, sel_10481, sel_10482, sel_10483, sel_10484, sel_10485,
       sel_10486, sel_10494, sel_10495, sel_1_2351) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3994_sel_1 = sel_10494;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3994_sel_1 = sel_1_2351;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3994_sel_1 = sel_10486;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3994_sel_1 = sel_10485;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3994_sel_1 = sel_10484;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3994_sel_1 = sel_10483;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3994_sel_1 = sel_10482;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3994_sel_1 = sel_10481;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3994_sel_1 = sel_10480;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3994_sel_1 = sel_10479;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3994_sel_1 = sel_10478;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3994_sel_1 = sel_10477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3994_sel_1 = sel_10476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3994_sel_1 = sel_10475;
        end
      default :
        begin
          p3994_sel_1 = sel_10495;
        end
    endcase
    sel_1_2352 = p3994_sel_1;
  end

  assign cont_bits_22_41 = cont_bits_22_26[sel_1_2352];

  assign sel_1_2353 = (tmp_11 == 1'b0 ? sel_1_2344 :
              cont_bits_22_41);

  assign sel_10496 = 32'sd0;

  assign sel_10497 = 32'sd0;

  assign sel_10498 = 32'sd0;

  assign sel_10499 = 32'sd0;

  assign sel_10500 = 32'sd0;

  assign sel_10501 = 32'sd0;

  assign sel_10502 = 32'sd0;

  assign sel_10503 = 32'sd0;

  assign sel_10504 = 32'sd0;

  assign sel_10505 = 32'sd0;

  assign sel_10506 = 32'sd0;

  assign sel_10507 = 32'sd0;

  assign sel_10508 = 32'sd0;

  assign sel_10509 = 32'sd0;

  assign sel_10510 = 32'sd0;

  assign s_713 = 32'sd7;

  assign sel_1_2354 = (tmp_13 == 1'b0 ? sel_10510 :
              s_713);

  assign sel_10511 = 32'sd0;

  assign sel_1_2355 = (tmp_15 == 1'b0 ? sel_1_2354 :
              sel_10511);

  assign sel_10512 = 32'sd0;

  assign sel_1_2356 = (tmp_17 == 1'b0 ? sel_1_2355 :
              sel_10512);

  assign sel_1_2357 = (s_10 == 1'b0 ? sel_10509 :
              sel_1_2356);

  assign sel_1_2358 = (s_11 == 1'b0 ? sel_10508 :
              sel_1_2357);

  assign sel_10513 = 32'sd0;

  assign sel_1_2359 = (s_12 == 1'b0 ? sel_1_2358 :
              sel_10513);

  assign sel_10514 = 32'sd0;

  assign sel_10515 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10496, sel_10497, sel_10498, sel_10499, sel_10500,
       sel_10501, sel_10502, sel_10503, sel_10504, sel_10505, sel_10506,
       sel_10507, sel_10514, sel_10515, sel_1_2359) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3161_sel_1 = sel_10514;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3161_sel_1 = sel_1_2359;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3161_sel_1 = sel_10507;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3161_sel_1 = sel_10506;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3161_sel_1 = sel_10505;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3161_sel_1 = sel_10504;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3161_sel_1 = sel_10503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3161_sel_1 = sel_10502;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3161_sel_1 = sel_10501;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3161_sel_1 = sel_10500;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3161_sel_1 = sel_10499;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3161_sel_1 = sel_10498;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3161_sel_1 = sel_10497;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3161_sel_1 = sel_10496;
        end
      default :
        begin
          p3161_sel_1 = sel_10515;
        end
    endcase
    sel_1_2360 = p3161_sel_1;
  end

  assign cont_bits_21_41 = cont_bits_21_26[sel_1_2360];

  assign sel_1_2361 = (tmp_13 == 1'b0 ? sel_1_2353 :
              cont_bits_21_41);

  assign sel_10516 = 32'sd0;

  assign sel_10517 = 32'sd0;

  assign sel_10518 = 32'sd0;

  assign sel_10519 = 32'sd0;

  assign sel_10520 = 32'sd0;

  assign sel_10521 = 32'sd0;

  assign sel_10522 = 32'sd0;

  assign sel_10523 = 32'sd0;

  assign sel_10524 = 32'sd0;

  assign sel_10525 = 32'sd0;

  assign sel_10526 = 32'sd0;

  assign sel_10527 = 32'sd0;

  assign sel_10528 = 32'sd0;

  assign sel_10529 = 32'sd0;

  assign sel_10530 = 32'sd0;

  assign s_714 = 32'sd7;

  assign sel_1_2362 = (tmp_15 == 1'b0 ? sel_10530 :
              s_714);

  assign sel_10531 = 32'sd0;

  assign sel_1_2363 = (tmp_17 == 1'b0 ? sel_1_2362 :
              sel_10531);

  assign sel_1_2364 = (s_10 == 1'b0 ? sel_10529 :
              sel_1_2363);

  assign sel_1_2365 = (s_11 == 1'b0 ? sel_10528 :
              sel_1_2364);

  assign sel_10532 = 32'sd0;

  assign sel_1_2366 = (s_12 == 1'b0 ? sel_1_2365 :
              sel_10532);

  assign sel_10533 = 32'sd0;

  assign sel_10534 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10516, sel_10517, sel_10518, sel_10519, sel_10520,
       sel_10521, sel_10522, sel_10523, sel_10524, sel_10525, sel_10526,
       sel_10527, sel_10533, sel_10534, sel_1_2366) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3688_sel_1 = sel_10533;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3688_sel_1 = sel_1_2366;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3688_sel_1 = sel_10527;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3688_sel_1 = sel_10526;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3688_sel_1 = sel_10525;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3688_sel_1 = sel_10524;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3688_sel_1 = sel_10523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3688_sel_1 = sel_10522;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3688_sel_1 = sel_10521;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3688_sel_1 = sel_10520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3688_sel_1 = sel_10519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3688_sel_1 = sel_10518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3688_sel_1 = sel_10517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3688_sel_1 = sel_10516;
        end
      default :
        begin
          p3688_sel_1 = sel_10534;
        end
    endcase
    sel_1_2367 = p3688_sel_1;
  end

  assign cont_bits_12_41 = cont_bits_12_26[sel_1_2367];

  assign sel_1_2368 = (tmp_15 == 1'b0 ? sel_1_2361 :
              cont_bits_12_41);

  assign sel_10535 = 32'sd0;

  assign sel_10536 = 32'sd0;

  assign sel_10537 = 32'sd0;

  assign sel_10538 = 32'sd0;

  assign sel_10539 = 32'sd0;

  assign sel_10540 = 32'sd0;

  assign sel_10541 = 32'sd0;

  assign sel_10542 = 32'sd0;

  assign sel_10543 = 32'sd0;

  assign sel_10544 = 32'sd0;

  assign sel_10545 = 32'sd0;

  assign sel_10546 = 32'sd0;

  assign sel_10547 = 32'sd0;

  assign sel_10548 = 32'sd0;

  assign sel_10549 = 32'sd0;

  assign s_715 = 32'sd7;

  assign sel_1_2369 = (tmp_17 == 1'b0 ? sel_10549 :
              s_715);

  assign sel_1_2370 = (s_10 == 1'b0 ? sel_10548 :
              sel_1_2369);

  assign sel_1_2371 = (s_11 == 1'b0 ? sel_10547 :
              sel_1_2370);

  assign sel_10550 = 32'sd0;

  assign sel_1_2372 = (s_12 == 1'b0 ? sel_1_2371 :
              sel_10550);

  assign sel_10551 = 32'sd0;

  assign sel_10552 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10535, sel_10536, sel_10537, sel_10538, sel_10539,
       sel_10540, sel_10541, sel_10542, sel_10543, sel_10544, sel_10545,
       sel_10546, sel_10551, sel_10552, sel_1_2372) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2736_sel_1 = sel_10551;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2736_sel_1 = sel_1_2372;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2736_sel_1 = sel_10546;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2736_sel_1 = sel_10545;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2736_sel_1 = sel_10544;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2736_sel_1 = sel_10543;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2736_sel_1 = sel_10542;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2736_sel_1 = sel_10541;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2736_sel_1 = sel_10540;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2736_sel_1 = sel_10539;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2736_sel_1 = sel_10538;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2736_sel_1 = sel_10537;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2736_sel_1 = sel_10536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2736_sel_1 = sel_10535;
        end
      default :
        begin
          p2736_sel_1 = sel_10552;
        end
    endcase
    sel_1_2373 = p2736_sel_1;
  end

  assign cont_bits_48 = cont_bits_29[sel_1_2373];

  assign sel_1_2374 = (tmp_17 == 1'b0 ? sel_1_2368 :
              cont_bits_48);

  assign sel_10553 = 1'b0;

  assign sel_10554 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10222, sel_10223, sel_10224, sel_10225, sel_10226,
       sel_10227, sel_10228, sel_10229, sel_10230, sel_10231, sel_10232,
       sel_10553, sel_10554, sel_1_2299, sel_1_2374) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p418_sel_1 = sel_10553;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p418_sel_1 = sel_1_2374;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p418_sel_1 = sel_1_2299;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p418_sel_1 = sel_10232;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p418_sel_1 = sel_10231;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p418_sel_1 = sel_10230;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p418_sel_1 = sel_10229;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p418_sel_1 = sel_10228;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p418_sel_1 = sel_10227;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p418_sel_1 = sel_10226;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p418_sel_1 = sel_10225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p418_sel_1 = sel_10224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p418_sel_1 = sel_10223;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p418_sel_1 = sel_10222;
        end
      default :
        begin
          p418_sel_1 = sel_10554;
        end
    endcase
    sel_1_2375 = p418_sel_1;
  end

  assign sel_10555 = 1'b0;

  assign sel_10556 = 1'b0;

  assign sel_10557 = 1'b0;

  assign sel_10558 = 1'b0;

  assign sel_10559 = 1'b0;

  assign sel_10560 = 1'b0;

  assign sel_10561 = 1'b0;

  assign sel_10562 = 1'b0;

  assign sel_10563 = 1'b0;

  assign sel_10564 = 1'b0;

  assign sel_10565 = 1'b0;

  assign sel_10566 = 1'b0;

  assign s_716 = 1'b1;

  assign sel_2_1565 = (s_13 == 1'b0 ? sel_10566 :
              s_716);

  assign s_717 = 1'b1;

  assign sel_2_1566 = (s_14 == 1'b0 ? sel_2_1565 :
              s_717);

  assign s_718 = 1'b1;

  assign sel_2_1567 = (s_15 == 1'b0 ? sel_2_1566 :
              s_718);

  assign s_719 = 1'b1;

  assign sel_2_1568 = (s_16 == 1'b0 ? sel_2_1567 :
              s_719);

  assign s_720 = 1'b1;

  assign sel_2_1569 = (s_17 == 1'b0 ? sel_2_1568 :
              s_720);

  assign s_721 = 1'b1;

  assign sel_2_1570 = (s_18 == 1'b0 ? sel_2_1569 :
              s_721);

  assign s_722 = 1'b1;

  assign sel_2_1571 = (s_19 == 1'b0 ? sel_2_1570 :
              s_722);

  assign s_723 = 1'b1;

  assign sel_2_1572 = (s_20 == 1'b0 ? sel_2_1571 :
              s_723);

  assign sel_10567 = 1'b0;

  assign sel_10568 = 1'b0;

  assign sel_10569 = 1'b0;

  assign s_724 = 1'b1;

  assign sel_2_1573 = (tmp_3 == 1'b0 ? sel_10569 :
              s_724);

  assign s_725 = 1'b1;

  assign sel_2_1574 = (tmp_5 == 1'b0 ? sel_2_1573 :
              s_725);

  assign s_726 = 1'b1;

  assign sel_2_1575 = (tmp_7 == 1'b0 ? sel_2_1574 :
              s_726);

  assign s_727 = 1'b1;

  assign sel_2_1576 = (tmp_9 == 1'b0 ? sel_2_1575 :
              s_727);

  assign s_728 = 1'b1;

  assign sel_2_1577 = (tmp_11 == 1'b0 ? sel_2_1576 :
              s_728);

  assign s_729 = 1'b1;

  assign sel_2_1578 = (tmp_13 == 1'b0 ? sel_2_1577 :
              s_729);

  assign s_730 = 1'b1;

  assign sel_2_1579 = (tmp_15 == 1'b0 ? sel_2_1578 :
              s_730);

  assign s_731 = 1'b1;

  assign sel_2_1580 = (tmp_17 == 1'b0 ? sel_2_1579 :
              s_731);

  assign sel_2_1581 = (s_10 == 1'b0 ? sel_10568 :
              sel_2_1580);

  assign sel_2_1582 = (s_11 == 1'b0 ? sel_10567 :
              sel_2_1581);

  assign sel_10570 = 1'b0;

  assign sel_2_1583 = (s_12 == 1'b0 ? sel_2_1582 :
              sel_10570);

  assign sel_10571 = 1'b0;

  assign sel_10572 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10555, sel_10556, sel_10557, sel_10558, sel_10559,
       sel_10560, sel_10561, sel_10562, sel_10563, sel_10564, sel_10565,
       sel_10571, sel_10572, sel_2_1572, sel_2_1583) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p403_sel_2 = sel_10571;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p403_sel_2 = sel_2_1583;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p403_sel_2 = sel_2_1572;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p403_sel_2 = sel_10565;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p403_sel_2 = sel_10564;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p403_sel_2 = sel_10563;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p403_sel_2 = sel_10562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p403_sel_2 = sel_10561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p403_sel_2 = sel_10560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p403_sel_2 = sel_10559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p403_sel_2 = sel_10558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p403_sel_2 = sel_10557;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p403_sel_2 = sel_10556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p403_sel_2 = sel_10555;
        end
      default :
        begin
          p403_sel_2 = sel_10572;
        end
    endcase
    sel_2_1584 = p403_sel_2;
  end

  assign sel_10573 = 1'b0;

  assign sel_10574 = 1'b0;

  assign sel_10575 = 1'b0;

  assign sel_10576 = 1'b0;

  assign sel_10577 = 1'b0;

  assign sel_10578 = 1'b0;

  assign sel_10579 = 1'b0;

  assign sel_10580 = 1'b0;

  assign sel_10581 = 1'b0;

  assign sel_10582 = 1'b0;

  assign sel_10583 = 1'b0;

  assign sel_10584 = 32'sd0;

  assign sel_10585 = 32'sd0;

  assign sel_10586 = 32'sd0;

  assign sel_10587 = 32'sd0;

  assign sel_10588 = 32'sd0;

  assign sel_10589 = 32'sd0;

  assign sel_10590 = 32'sd0;

  assign sel_10591 = 32'sd0;

  assign sel_10592 = 32'sd0;

  assign sel_10593 = 32'sd0;

  assign sel_10594 = 32'sd0;

  assign sel_10595 = 32'sd0;

  assign s_732 = 32'sd8;

  assign sel_1_2376 = (s_13 == 1'b0 ? sel_10595 :
              s_732);

  assign sel_10596 = 32'sd0;

  assign sel_1_2377 = (s_14 == 1'b0 ? sel_1_2376 :
              sel_10596);

  assign sel_10597 = 32'sd0;

  assign sel_1_2378 = (s_15 == 1'b0 ? sel_1_2377 :
              sel_10597);

  assign sel_10598 = 32'sd0;

  assign sel_1_2379 = (s_16 == 1'b0 ? sel_1_2378 :
              sel_10598);

  assign sel_10599 = 32'sd0;

  assign sel_1_2380 = (s_17 == 1'b0 ? sel_1_2379 :
              sel_10599);

  assign sel_10600 = 32'sd0;

  assign sel_1_2381 = (s_18 == 1'b0 ? sel_1_2380 :
              sel_10600);

  assign sel_10601 = 32'sd0;

  assign sel_1_2382 = (s_19 == 1'b0 ? sel_1_2381 :
              sel_10601);

  assign sel_10602 = 32'sd0;

  assign sel_1_2383 = (s_20 == 1'b0 ? sel_1_2382 :
              sel_10602);

  assign sel_10603 = 32'sd0;

  assign sel_10604 = 32'sd0;

  assign sel_10605 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10584, sel_10585, sel_10586, sel_10587, sel_10588,
       sel_10589, sel_10590, sel_10591, sel_10592, sel_10593, sel_10594,
       sel_10603, sel_10604, sel_10605, sel_1_2383) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2039_sel_1 = sel_10604;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2039_sel_1 = sel_10603;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2039_sel_1 = sel_1_2383;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2039_sel_1 = sel_10594;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2039_sel_1 = sel_10593;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2039_sel_1 = sel_10592;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2039_sel_1 = sel_10591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2039_sel_1 = sel_10590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2039_sel_1 = sel_10589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2039_sel_1 = sel_10588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2039_sel_1 = sel_10587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2039_sel_1 = sel_10586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2039_sel_1 = sel_10585;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2039_sel_1 = sel_10584;
        end
      default :
        begin
          p2039_sel_1 = sel_10605;
        end
    endcase
    sel_1_2384 = p2039_sel_1;
  end

  assign cont_bits_41_42 = cont_bits_41_12[sel_1_2384];

  assign sel_10606 = 32'sd0;

  assign sel_10607 = 32'sd0;

  assign sel_10608 = 32'sd0;

  assign sel_10609 = 32'sd0;

  assign sel_10610 = 32'sd0;

  assign sel_10611 = 32'sd0;

  assign sel_10612 = 32'sd0;

  assign sel_10613 = 32'sd0;

  assign sel_10614 = 32'sd0;

  assign sel_10615 = 32'sd0;

  assign sel_10616 = 32'sd0;

  assign sel_10617 = 32'sd0;

  assign s_733 = 32'sd8;

  assign sel_1_2385 = (s_14 == 1'b0 ? sel_10617 :
              s_733);

  assign sel_10618 = 32'sd0;

  assign sel_1_2386 = (s_15 == 1'b0 ? sel_1_2385 :
              sel_10618);

  assign sel_10619 = 32'sd0;

  assign sel_1_2387 = (s_16 == 1'b0 ? sel_1_2386 :
              sel_10619);

  assign sel_10620 = 32'sd0;

  assign sel_1_2388 = (s_17 == 1'b0 ? sel_1_2387 :
              sel_10620);

  assign sel_10621 = 32'sd0;

  assign sel_1_2389 = (s_18 == 1'b0 ? sel_1_2388 :
              sel_10621);

  assign sel_10622 = 32'sd0;

  assign sel_1_2390 = (s_19 == 1'b0 ? sel_1_2389 :
              sel_10622);

  assign sel_10623 = 32'sd0;

  assign sel_1_2391 = (s_20 == 1'b0 ? sel_1_2390 :
              sel_10623);

  assign sel_10624 = 32'sd0;

  assign sel_10625 = 32'sd0;

  assign sel_10626 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10606, sel_10607, sel_10608, sel_10609, sel_10610,
       sel_10611, sel_10612, sel_10613, sel_10614, sel_10615, sel_10616,
       sel_10624, sel_10625, sel_10626, sel_1_2391) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1240_sel_1 = sel_10625;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1240_sel_1 = sel_10624;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1240_sel_1 = sel_1_2391;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1240_sel_1 = sel_10616;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1240_sel_1 = sel_10615;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1240_sel_1 = sel_10614;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1240_sel_1 = sel_10613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1240_sel_1 = sel_10612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1240_sel_1 = sel_10611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1240_sel_1 = sel_10610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1240_sel_1 = sel_10609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1240_sel_1 = sel_10608;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1240_sel_1 = sel_10607;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1240_sel_1 = sel_10606;
        end
      default :
        begin
          p1240_sel_1 = sel_10626;
        end
    endcase
    sel_1_2392 = p1240_sel_1;
  end

  assign cont_bits_42_42 = cont_bits_42_12[sel_1_2392];

  assign sel_1_2393 = (s_14 == 1'b0 ? cont_bits_41_42 :
              cont_bits_42_42);

  assign sel_10627 = 32'sd0;

  assign sel_10628 = 32'sd0;

  assign sel_10629 = 32'sd0;

  assign sel_10630 = 32'sd0;

  assign sel_10631 = 32'sd0;

  assign sel_10632 = 32'sd0;

  assign sel_10633 = 32'sd0;

  assign sel_10634 = 32'sd0;

  assign sel_10635 = 32'sd0;

  assign sel_10636 = 32'sd0;

  assign sel_10637 = 32'sd0;

  assign sel_10638 = 32'sd0;

  assign s_734 = 32'sd8;

  assign sel_1_2394 = (s_15 == 1'b0 ? sel_10638 :
              s_734);

  assign sel_10639 = 32'sd0;

  assign sel_1_2395 = (s_16 == 1'b0 ? sel_1_2394 :
              sel_10639);

  assign sel_10640 = 32'sd0;

  assign sel_1_2396 = (s_17 == 1'b0 ? sel_1_2395 :
              sel_10640);

  assign sel_10641 = 32'sd0;

  assign sel_1_2397 = (s_18 == 1'b0 ? sel_1_2396 :
              sel_10641);

  assign sel_10642 = 32'sd0;

  assign sel_1_2398 = (s_19 == 1'b0 ? sel_1_2397 :
              sel_10642);

  assign sel_10643 = 32'sd0;

  assign sel_1_2399 = (s_20 == 1'b0 ? sel_1_2398 :
              sel_10643);

  assign sel_10644 = 32'sd0;

  assign sel_10645 = 32'sd0;

  assign sel_10646 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10627, sel_10628, sel_10629, sel_10630, sel_10631,
       sel_10632, sel_10633, sel_10634, sel_10635, sel_10636, sel_10637,
       sel_10644, sel_10645, sel_10646, sel_1_2399) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1750_sel_1 = sel_10645;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1750_sel_1 = sel_10644;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1750_sel_1 = sel_1_2399;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1750_sel_1 = sel_10637;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1750_sel_1 = sel_10636;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1750_sel_1 = sel_10635;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1750_sel_1 = sel_10634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1750_sel_1 = sel_10633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1750_sel_1 = sel_10632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1750_sel_1 = sel_10631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1750_sel_1 = sel_10630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1750_sel_1 = sel_10629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1750_sel_1 = sel_10628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1750_sel_1 = sel_10627;
        end
      default :
        begin
          p1750_sel_1 = sel_10646;
        end
    endcase
    sel_1_2400 = p1750_sel_1;
  end

  assign cont_bits_32_42 = cont_bits_32_12[sel_1_2400];

  assign sel_1_2401 = (s_15 == 1'b0 ? sel_1_2393 :
              cont_bits_32_42);

  assign sel_10647 = 32'sd0;

  assign sel_10648 = 32'sd0;

  assign sel_10649 = 32'sd0;

  assign sel_10650 = 32'sd0;

  assign sel_10651 = 32'sd0;

  assign sel_10652 = 32'sd0;

  assign sel_10653 = 32'sd0;

  assign sel_10654 = 32'sd0;

  assign sel_10655 = 32'sd0;

  assign sel_10656 = 32'sd0;

  assign sel_10657 = 32'sd0;

  assign sel_10658 = 32'sd0;

  assign s_735 = 32'sd8;

  assign sel_1_2402 = (s_16 == 1'b0 ? sel_10658 :
              s_735);

  assign sel_10659 = 32'sd0;

  assign sel_1_2403 = (s_17 == 1'b0 ? sel_1_2402 :
              sel_10659);

  assign sel_10660 = 32'sd0;

  assign sel_1_2404 = (s_18 == 1'b0 ? sel_1_2403 :
              sel_10660);

  assign sel_10661 = 32'sd0;

  assign sel_1_2405 = (s_19 == 1'b0 ? sel_1_2404 :
              sel_10661);

  assign sel_10662 = 32'sd0;

  assign sel_1_2406 = (s_20 == 1'b0 ? sel_1_2405 :
              sel_10662);

  assign sel_10663 = 32'sd0;

  assign sel_10664 = 32'sd0;

  assign sel_10665 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10647, sel_10648, sel_10649, sel_10650, sel_10651,
       sel_10652, sel_10653, sel_10654, sel_10655, sel_10656, sel_10657,
       sel_10663, sel_10664, sel_10665, sel_1_2406) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1036_sel_1 = sel_10664;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1036_sel_1 = sel_10663;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1036_sel_1 = sel_1_2406;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1036_sel_1 = sel_10657;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1036_sel_1 = sel_10656;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1036_sel_1 = sel_10655;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1036_sel_1 = sel_10654;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1036_sel_1 = sel_10653;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1036_sel_1 = sel_10652;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1036_sel_1 = sel_10651;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1036_sel_1 = sel_10650;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1036_sel_1 = sel_10649;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1036_sel_1 = sel_10648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1036_sel_1 = sel_10647;
        end
      default :
        begin
          p1036_sel_1 = sel_10665;
        end
    endcase
    sel_1_2407 = p1036_sel_1;
  end

  assign cont_bits_31_42 = cont_bits_31_12[sel_1_2407];

  assign sel_1_2408 = (s_16 == 1'b0 ? sel_1_2401 :
              cont_bits_31_42);

  assign sel_10666 = 32'sd0;

  assign sel_10667 = 32'sd0;

  assign sel_10668 = 32'sd0;

  assign sel_10669 = 32'sd0;

  assign sel_10670 = 32'sd0;

  assign sel_10671 = 32'sd0;

  assign sel_10672 = 32'sd0;

  assign sel_10673 = 32'sd0;

  assign sel_10674 = 32'sd0;

  assign sel_10675 = 32'sd0;

  assign sel_10676 = 32'sd0;

  assign sel_10677 = 32'sd0;

  assign s_736 = 32'sd8;

  assign sel_1_2409 = (s_17 == 1'b0 ? sel_10677 :
              s_736);

  assign sel_10678 = 32'sd0;

  assign sel_1_2410 = (s_18 == 1'b0 ? sel_1_2409 :
              sel_10678);

  assign sel_10679 = 32'sd0;

  assign sel_1_2411 = (s_19 == 1'b0 ? sel_1_2410 :
              sel_10679);

  assign sel_10680 = 32'sd0;

  assign sel_1_2412 = (s_20 == 1'b0 ? sel_1_2411 :
              sel_10680);

  assign sel_10681 = 32'sd0;

  assign sel_10682 = 32'sd0;

  assign sel_10683 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10666, sel_10667, sel_10668, sel_10669, sel_10670,
       sel_10671, sel_10672, sel_10673, sel_10674, sel_10675, sel_10676,
       sel_10681, sel_10682, sel_10683, sel_1_2412) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1835_sel_1 = sel_10682;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1835_sel_1 = sel_10681;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1835_sel_1 = sel_1_2412;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1835_sel_1 = sel_10676;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1835_sel_1 = sel_10675;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1835_sel_1 = sel_10674;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1835_sel_1 = sel_10673;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1835_sel_1 = sel_10672;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1835_sel_1 = sel_10671;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1835_sel_1 = sel_10670;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1835_sel_1 = sel_10669;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1835_sel_1 = sel_10668;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1835_sel_1 = sel_10667;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1835_sel_1 = sel_10666;
        end
      default :
        begin
          p1835_sel_1 = sel_10683;
        end
    endcase
    sel_1_2413 = p1835_sel_1;
  end

  assign cont_bits_22_42 = cont_bits_22_12[sel_1_2413];

  assign sel_1_2414 = (s_17 == 1'b0 ? sel_1_2408 :
              cont_bits_22_42);

  assign sel_10684 = 32'sd0;

  assign sel_10685 = 32'sd0;

  assign sel_10686 = 32'sd0;

  assign sel_10687 = 32'sd0;

  assign sel_10688 = 32'sd0;

  assign sel_10689 = 32'sd0;

  assign sel_10690 = 32'sd0;

  assign sel_10691 = 32'sd0;

  assign sel_10692 = 32'sd0;

  assign sel_10693 = 32'sd0;

  assign sel_10694 = 32'sd0;

  assign sel_10695 = 32'sd0;

  assign s_737 = 32'sd8;

  assign sel_1_2415 = (s_18 == 1'b0 ? sel_10695 :
              s_737);

  assign sel_10696 = 32'sd0;

  assign sel_1_2416 = (s_19 == 1'b0 ? sel_1_2415 :
              sel_10696);

  assign sel_10697 = 32'sd0;

  assign sel_1_2417 = (s_20 == 1'b0 ? sel_1_2416 :
              sel_10697);

  assign sel_10698 = 32'sd0;

  assign sel_10699 = 32'sd0;

  assign sel_10700 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10684, sel_10685, sel_10686, sel_10687, sel_10688,
       sel_10689, sel_10690, sel_10691, sel_10692, sel_10693, sel_10694,
       sel_10698, sel_10699, sel_10700, sel_1_2417) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2413_sel_1 = sel_10699;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2413_sel_1 = sel_10698;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2413_sel_1 = sel_1_2417;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2413_sel_1 = sel_10694;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2413_sel_1 = sel_10693;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2413_sel_1 = sel_10692;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2413_sel_1 = sel_10691;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2413_sel_1 = sel_10690;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2413_sel_1 = sel_10689;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2413_sel_1 = sel_10688;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2413_sel_1 = sel_10687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2413_sel_1 = sel_10686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2413_sel_1 = sel_10685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2413_sel_1 = sel_10684;
        end
      default :
        begin
          p2413_sel_1 = sel_10700;
        end
    endcase
    sel_1_2418 = p2413_sel_1;
  end

  assign cont_bits_21_42 = cont_bits_21_12[sel_1_2418];

  assign sel_1_2419 = (s_18 == 1'b0 ? sel_1_2414 :
              cont_bits_21_42);

  assign sel_10701 = 32'sd0;

  assign sel_10702 = 32'sd0;

  assign sel_10703 = 32'sd0;

  assign sel_10704 = 32'sd0;

  assign sel_10705 = 32'sd0;

  assign sel_10706 = 32'sd0;

  assign sel_10707 = 32'sd0;

  assign sel_10708 = 32'sd0;

  assign sel_10709 = 32'sd0;

  assign sel_10710 = 32'sd0;

  assign sel_10711 = 32'sd0;

  assign sel_10712 = 32'sd0;

  assign s_738 = 32'sd8;

  assign sel_1_2420 = (s_19 == 1'b0 ? sel_10712 :
              s_738);

  assign sel_10713 = 32'sd0;

  assign sel_1_2421 = (s_20 == 1'b0 ? sel_1_2420 :
              sel_10713);

  assign sel_10714 = 32'sd0;

  assign sel_10715 = 32'sd0;

  assign sel_10716 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10701, sel_10702, sel_10703, sel_10704, sel_10705,
       sel_10706, sel_10707, sel_10708, sel_10709, sel_10710, sel_10711,
       sel_10714, sel_10715, sel_10716, sel_1_2421) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1427_sel_1 = sel_10715;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1427_sel_1 = sel_10714;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1427_sel_1 = sel_1_2421;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1427_sel_1 = sel_10711;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1427_sel_1 = sel_10710;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1427_sel_1 = sel_10709;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1427_sel_1 = sel_10708;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1427_sel_1 = sel_10707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1427_sel_1 = sel_10706;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1427_sel_1 = sel_10705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1427_sel_1 = sel_10704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1427_sel_1 = sel_10703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1427_sel_1 = sel_10702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1427_sel_1 = sel_10701;
        end
      default :
        begin
          p1427_sel_1 = sel_10716;
        end
    endcase
    sel_1_2422 = p1427_sel_1;
  end

  assign cont_bits_12_42 = cont_bits_12_12[sel_1_2422];

  assign sel_1_2423 = (s_19 == 1'b0 ? sel_1_2419 :
              cont_bits_12_42);

  assign sel_10717 = 32'sd0;

  assign sel_10718 = 32'sd0;

  assign sel_10719 = 32'sd0;

  assign sel_10720 = 32'sd0;

  assign sel_10721 = 32'sd0;

  assign sel_10722 = 32'sd0;

  assign sel_10723 = 32'sd0;

  assign sel_10724 = 32'sd0;

  assign sel_10725 = 32'sd0;

  assign sel_10726 = 32'sd0;

  assign sel_10727 = 32'sd0;

  assign sel_10728 = 32'sd0;

  assign s_739 = 32'sd8;

  assign sel_1_2424 = (s_20 == 1'b0 ? sel_10728 :
              s_739);

  assign sel_10729 = 32'sd0;

  assign sel_10730 = 32'sd0;

  assign sel_10731 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10717, sel_10718, sel_10719, sel_10720, sel_10721,
       sel_10722, sel_10723, sel_10724, sel_10725, sel_10726, sel_10727,
       sel_10729, sel_10730, sel_10731, sel_1_2424) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2362_sel_1 = sel_10730;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2362_sel_1 = sel_10729;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2362_sel_1 = sel_1_2424;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2362_sel_1 = sel_10727;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2362_sel_1 = sel_10726;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2362_sel_1 = sel_10725;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2362_sel_1 = sel_10724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2362_sel_1 = sel_10723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2362_sel_1 = sel_10722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2362_sel_1 = sel_10721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2362_sel_1 = sel_10720;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2362_sel_1 = sel_10719;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2362_sel_1 = sel_10718;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2362_sel_1 = sel_10717;
        end
      default :
        begin
          p2362_sel_1 = sel_10731;
        end
    endcase
    sel_1_2425 = p2362_sel_1;
  end

  assign cont_bits_49 = cont_bits_13[sel_1_2425];

  assign sel_1_2426 = (s_20 == 1'b0 ? sel_1_2423 :
              cont_bits_49);

  assign sel_10732 = 32'sd0;

  assign sel_10733 = 32'sd0;

  assign sel_10734 = 32'sd0;

  assign sel_10735 = 32'sd0;

  assign sel_10736 = 32'sd0;

  assign sel_10737 = 32'sd0;

  assign sel_10738 = 32'sd0;

  assign sel_10739 = 32'sd0;

  assign sel_10740 = 32'sd0;

  assign sel_10741 = 32'sd0;

  assign sel_10742 = 32'sd0;

  assign sel_10743 = 32'sd0;

  assign sel_10744 = 32'sd0;

  assign sel_10745 = 32'sd0;

  assign sel_10746 = 32'sd0;

  assign s_740 = 32'sd8;

  assign sel_1_2427 = (tmp_3 == 1'b0 ? sel_10746 :
              s_740);

  assign sel_10747 = 32'sd0;

  assign sel_1_2428 = (tmp_5 == 1'b0 ? sel_1_2427 :
              sel_10747);

  assign sel_10748 = 32'sd0;

  assign sel_1_2429 = (tmp_7 == 1'b0 ? sel_1_2428 :
              sel_10748);

  assign sel_10749 = 32'sd0;

  assign sel_1_2430 = (tmp_9 == 1'b0 ? sel_1_2429 :
              sel_10749);

  assign sel_10750 = 32'sd0;

  assign sel_1_2431 = (tmp_11 == 1'b0 ? sel_1_2430 :
              sel_10750);

  assign sel_10751 = 32'sd0;

  assign sel_1_2432 = (tmp_13 == 1'b0 ? sel_1_2431 :
              sel_10751);

  assign sel_10752 = 32'sd0;

  assign sel_1_2433 = (tmp_15 == 1'b0 ? sel_1_2432 :
              sel_10752);

  assign sel_10753 = 32'sd0;

  assign sel_1_2434 = (tmp_17 == 1'b0 ? sel_1_2433 :
              sel_10753);

  assign sel_1_2435 = (s_10 == 1'b0 ? sel_10745 :
              sel_1_2434);

  assign sel_1_2436 = (s_11 == 1'b0 ? sel_10744 :
              sel_1_2435);

  assign sel_10754 = 32'sd0;

  assign sel_1_2437 = (s_12 == 1'b0 ? sel_1_2436 :
              sel_10754);

  assign sel_10755 = 32'sd0;

  assign sel_10756 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10732, sel_10733, sel_10734, sel_10735, sel_10736,
       sel_10737, sel_10738, sel_10739, sel_10740, sel_10741, sel_10742,
       sel_10743, sel_10755, sel_10756, sel_1_2437) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3246_sel_1 = sel_10755;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3246_sel_1 = sel_1_2437;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3246_sel_1 = sel_10743;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3246_sel_1 = sel_10742;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3246_sel_1 = sel_10741;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3246_sel_1 = sel_10740;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3246_sel_1 = sel_10739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3246_sel_1 = sel_10738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3246_sel_1 = sel_10737;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3246_sel_1 = sel_10736;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3246_sel_1 = sel_10735;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3246_sel_1 = sel_10734;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3246_sel_1 = sel_10733;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3246_sel_1 = sel_10732;
        end
      default :
        begin
          p3246_sel_1 = sel_10756;
        end
    endcase
    sel_1_2438 = p3246_sel_1;
  end

  assign cont_bits_41_43 = cont_bits_41_26[sel_1_2438];

  assign sel_10757 = 32'sd0;

  assign sel_10758 = 32'sd0;

  assign sel_10759 = 32'sd0;

  assign sel_10760 = 32'sd0;

  assign sel_10761 = 32'sd0;

  assign sel_10762 = 32'sd0;

  assign sel_10763 = 32'sd0;

  assign sel_10764 = 32'sd0;

  assign sel_10765 = 32'sd0;

  assign sel_10766 = 32'sd0;

  assign sel_10767 = 32'sd0;

  assign sel_10768 = 32'sd0;

  assign sel_10769 = 32'sd0;

  assign sel_10770 = 32'sd0;

  assign sel_10771 = 32'sd0;

  assign s_741 = 32'sd8;

  assign sel_1_2439 = (tmp_5 == 1'b0 ? sel_10771 :
              s_741);

  assign sel_10772 = 32'sd0;

  assign sel_1_2440 = (tmp_7 == 1'b0 ? sel_1_2439 :
              sel_10772);

  assign sel_10773 = 32'sd0;

  assign sel_1_2441 = (tmp_9 == 1'b0 ? sel_1_2440 :
              sel_10773);

  assign sel_10774 = 32'sd0;

  assign sel_1_2442 = (tmp_11 == 1'b0 ? sel_1_2441 :
              sel_10774);

  assign sel_10775 = 32'sd0;

  assign sel_1_2443 = (tmp_13 == 1'b0 ? sel_1_2442 :
              sel_10775);

  assign sel_10776 = 32'sd0;

  assign sel_1_2444 = (tmp_15 == 1'b0 ? sel_1_2443 :
              sel_10776);

  assign sel_10777 = 32'sd0;

  assign sel_1_2445 = (tmp_17 == 1'b0 ? sel_1_2444 :
              sel_10777);

  assign sel_1_2446 = (s_10 == 1'b0 ? sel_10770 :
              sel_1_2445);

  assign sel_1_2447 = (s_11 == 1'b0 ? sel_10769 :
              sel_1_2446);

  assign sel_10778 = 32'sd0;

  assign sel_1_2448 = (s_12 == 1'b0 ? sel_1_2447 :
              sel_10778);

  assign sel_10779 = 32'sd0;

  assign sel_10780 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10757, sel_10758, sel_10759, sel_10760, sel_10761,
       sel_10762, sel_10763, sel_10764, sel_10765, sel_10766, sel_10767,
       sel_10768, sel_10779, sel_10780, sel_1_2448) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2855_sel_1 = sel_10779;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2855_sel_1 = sel_1_2448;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2855_sel_1 = sel_10768;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2855_sel_1 = sel_10767;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2855_sel_1 = sel_10766;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2855_sel_1 = sel_10765;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2855_sel_1 = sel_10764;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2855_sel_1 = sel_10763;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2855_sel_1 = sel_10762;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2855_sel_1 = sel_10761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2855_sel_1 = sel_10760;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2855_sel_1 = sel_10759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2855_sel_1 = sel_10758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2855_sel_1 = sel_10757;
        end
      default :
        begin
          p2855_sel_1 = sel_10780;
        end
    endcase
    sel_1_2449 = p2855_sel_1;
  end

  assign cont_bits_42_43 = cont_bits_42_26[sel_1_2449];

  assign sel_1_2450 = (tmp_5 == 1'b0 ? cont_bits_41_43 :
              cont_bits_42_43);

  assign sel_10781 = 32'sd0;

  assign sel_10782 = 32'sd0;

  assign sel_10783 = 32'sd0;

  assign sel_10784 = 32'sd0;

  assign sel_10785 = 32'sd0;

  assign sel_10786 = 32'sd0;

  assign sel_10787 = 32'sd0;

  assign sel_10788 = 32'sd0;

  assign sel_10789 = 32'sd0;

  assign sel_10790 = 32'sd0;

  assign sel_10791 = 32'sd0;

  assign sel_10792 = 32'sd0;

  assign sel_10793 = 32'sd0;

  assign sel_10794 = 32'sd0;

  assign sel_10795 = 32'sd0;

  assign s_742 = 32'sd8;

  assign sel_1_2451 = (tmp_7 == 1'b0 ? sel_10795 :
              s_742);

  assign sel_10796 = 32'sd0;

  assign sel_1_2452 = (tmp_9 == 1'b0 ? sel_1_2451 :
              sel_10796);

  assign sel_10797 = 32'sd0;

  assign sel_1_2453 = (tmp_11 == 1'b0 ? sel_1_2452 :
              sel_10797);

  assign sel_10798 = 32'sd0;

  assign sel_1_2454 = (tmp_13 == 1'b0 ? sel_1_2453 :
              sel_10798);

  assign sel_10799 = 32'sd0;

  assign sel_1_2455 = (tmp_15 == 1'b0 ? sel_1_2454 :
              sel_10799);

  assign sel_10800 = 32'sd0;

  assign sel_1_2456 = (tmp_17 == 1'b0 ? sel_1_2455 :
              sel_10800);

  assign sel_1_2457 = (s_10 == 1'b0 ? sel_10794 :
              sel_1_2456);

  assign sel_1_2458 = (s_11 == 1'b0 ? sel_10793 :
              sel_1_2457);

  assign sel_10801 = 32'sd0;

  assign sel_1_2459 = (s_12 == 1'b0 ? sel_1_2458 :
              sel_10801);

  assign sel_10802 = 32'sd0;

  assign sel_10803 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10781, sel_10782, sel_10783, sel_10784, sel_10785,
       sel_10786, sel_10787, sel_10788, sel_10789, sel_10790, sel_10791,
       sel_10792, sel_10802, sel_10803, sel_1_2459) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3586_sel_1 = sel_10802;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3586_sel_1 = sel_1_2459;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3586_sel_1 = sel_10792;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3586_sel_1 = sel_10791;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3586_sel_1 = sel_10790;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3586_sel_1 = sel_10789;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3586_sel_1 = sel_10788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3586_sel_1 = sel_10787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3586_sel_1 = sel_10786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3586_sel_1 = sel_10785;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3586_sel_1 = sel_10784;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3586_sel_1 = sel_10783;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3586_sel_1 = sel_10782;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3586_sel_1 = sel_10781;
        end
      default :
        begin
          p3586_sel_1 = sel_10803;
        end
    endcase
    sel_1_2460 = p3586_sel_1;
  end

  assign cont_bits_32_43 = cont_bits_32_26[sel_1_2460];

  assign sel_1_2461 = (tmp_7 == 1'b0 ? sel_1_2450 :
              cont_bits_32_43);

  assign sel_10804 = 32'sd0;

  assign sel_10805 = 32'sd0;

  assign sel_10806 = 32'sd0;

  assign sel_10807 = 32'sd0;

  assign sel_10808 = 32'sd0;

  assign sel_10809 = 32'sd0;

  assign sel_10810 = 32'sd0;

  assign sel_10811 = 32'sd0;

  assign sel_10812 = 32'sd0;

  assign sel_10813 = 32'sd0;

  assign sel_10814 = 32'sd0;

  assign sel_10815 = 32'sd0;

  assign sel_10816 = 32'sd0;

  assign sel_10817 = 32'sd0;

  assign sel_10818 = 32'sd0;

  assign s_743 = 32'sd8;

  assign sel_1_2462 = (tmp_9 == 1'b0 ? sel_10818 :
              s_743);

  assign sel_10819 = 32'sd0;

  assign sel_1_2463 = (tmp_11 == 1'b0 ? sel_1_2462 :
              sel_10819);

  assign sel_10820 = 32'sd0;

  assign sel_1_2464 = (tmp_13 == 1'b0 ? sel_1_2463 :
              sel_10820);

  assign sel_10821 = 32'sd0;

  assign sel_1_2465 = (tmp_15 == 1'b0 ? sel_1_2464 :
              sel_10821);

  assign sel_10822 = 32'sd0;

  assign sel_1_2466 = (tmp_17 == 1'b0 ? sel_1_2465 :
              sel_10822);

  assign sel_1_2467 = (s_10 == 1'b0 ? sel_10817 :
              sel_1_2466);

  assign sel_1_2468 = (s_11 == 1'b0 ? sel_10816 :
              sel_1_2467);

  assign sel_10823 = 32'sd0;

  assign sel_1_2469 = (s_12 == 1'b0 ? sel_1_2468 :
              sel_10823);

  assign sel_10824 = 32'sd0;

  assign sel_10825 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10804, sel_10805, sel_10806, sel_10807, sel_10808,
       sel_10809, sel_10810, sel_10811, sel_10812, sel_10813, sel_10814,
       sel_10815, sel_10824, sel_10825, sel_1_2469) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4164_sel_1 = sel_10824;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4164_sel_1 = sel_1_2469;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4164_sel_1 = sel_10815;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4164_sel_1 = sel_10814;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4164_sel_1 = sel_10813;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4164_sel_1 = sel_10812;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4164_sel_1 = sel_10811;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4164_sel_1 = sel_10810;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4164_sel_1 = sel_10809;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4164_sel_1 = sel_10808;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4164_sel_1 = sel_10807;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4164_sel_1 = sel_10806;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4164_sel_1 = sel_10805;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4164_sel_1 = sel_10804;
        end
      default :
        begin
          p4164_sel_1 = sel_10825;
        end
    endcase
    sel_1_2470 = p4164_sel_1;
  end

  assign cont_bits_31_43 = cont_bits_31_26[sel_1_2470];

  assign sel_1_2471 = (tmp_9 == 1'b0 ? sel_1_2461 :
              cont_bits_31_43);

  assign sel_10826 = 32'sd0;

  assign sel_10827 = 32'sd0;

  assign sel_10828 = 32'sd0;

  assign sel_10829 = 32'sd0;

  assign sel_10830 = 32'sd0;

  assign sel_10831 = 32'sd0;

  assign sel_10832 = 32'sd0;

  assign sel_10833 = 32'sd0;

  assign sel_10834 = 32'sd0;

  assign sel_10835 = 32'sd0;

  assign sel_10836 = 32'sd0;

  assign sel_10837 = 32'sd0;

  assign sel_10838 = 32'sd0;

  assign sel_10839 = 32'sd0;

  assign sel_10840 = 32'sd0;

  assign s_744 = 32'sd8;

  assign sel_1_2472 = (tmp_11 == 1'b0 ? sel_10840 :
              s_744);

  assign sel_10841 = 32'sd0;

  assign sel_1_2473 = (tmp_13 == 1'b0 ? sel_1_2472 :
              sel_10841);

  assign sel_10842 = 32'sd0;

  assign sel_1_2474 = (tmp_15 == 1'b0 ? sel_1_2473 :
              sel_10842);

  assign sel_10843 = 32'sd0;

  assign sel_1_2475 = (tmp_17 == 1'b0 ? sel_1_2474 :
              sel_10843);

  assign sel_1_2476 = (s_10 == 1'b0 ? sel_10839 :
              sel_1_2475);

  assign sel_1_2477 = (s_11 == 1'b0 ? sel_10838 :
              sel_1_2476);

  assign sel_10844 = 32'sd0;

  assign sel_1_2478 = (s_12 == 1'b0 ? sel_1_2477 :
              sel_10844);

  assign sel_10845 = 32'sd0;

  assign sel_10846 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10826, sel_10827, sel_10828, sel_10829, sel_10830,
       sel_10831, sel_10832, sel_10833, sel_10834, sel_10835, sel_10836,
       sel_10837, sel_10845, sel_10846, sel_1_2478) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3977_sel_1 = sel_10845;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3977_sel_1 = sel_1_2478;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3977_sel_1 = sel_10837;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3977_sel_1 = sel_10836;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3977_sel_1 = sel_10835;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3977_sel_1 = sel_10834;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3977_sel_1 = sel_10833;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3977_sel_1 = sel_10832;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3977_sel_1 = sel_10831;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3977_sel_1 = sel_10830;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3977_sel_1 = sel_10829;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3977_sel_1 = sel_10828;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3977_sel_1 = sel_10827;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3977_sel_1 = sel_10826;
        end
      default :
        begin
          p3977_sel_1 = sel_10846;
        end
    endcase
    sel_1_2479 = p3977_sel_1;
  end

  assign cont_bits_22_43 = cont_bits_22_26[sel_1_2479];

  assign sel_1_2480 = (tmp_11 == 1'b0 ? sel_1_2471 :
              cont_bits_22_43);

  assign sel_10847 = 32'sd0;

  assign sel_10848 = 32'sd0;

  assign sel_10849 = 32'sd0;

  assign sel_10850 = 32'sd0;

  assign sel_10851 = 32'sd0;

  assign sel_10852 = 32'sd0;

  assign sel_10853 = 32'sd0;

  assign sel_10854 = 32'sd0;

  assign sel_10855 = 32'sd0;

  assign sel_10856 = 32'sd0;

  assign sel_10857 = 32'sd0;

  assign sel_10858 = 32'sd0;

  assign sel_10859 = 32'sd0;

  assign sel_10860 = 32'sd0;

  assign sel_10861 = 32'sd0;

  assign s_745 = 32'sd8;

  assign sel_1_2481 = (tmp_13 == 1'b0 ? sel_10861 :
              s_745);

  assign sel_10862 = 32'sd0;

  assign sel_1_2482 = (tmp_15 == 1'b0 ? sel_1_2481 :
              sel_10862);

  assign sel_10863 = 32'sd0;

  assign sel_1_2483 = (tmp_17 == 1'b0 ? sel_1_2482 :
              sel_10863);

  assign sel_1_2484 = (s_10 == 1'b0 ? sel_10860 :
              sel_1_2483);

  assign sel_1_2485 = (s_11 == 1'b0 ? sel_10859 :
              sel_1_2484);

  assign sel_10864 = 32'sd0;

  assign sel_1_2486 = (s_12 == 1'b0 ? sel_1_2485 :
              sel_10864);

  assign sel_10865 = 32'sd0;

  assign sel_10866 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10847, sel_10848, sel_10849, sel_10850, sel_10851,
       sel_10852, sel_10853, sel_10854, sel_10855, sel_10856, sel_10857,
       sel_10858, sel_10865, sel_10866, sel_1_2486) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3144_sel_1 = sel_10865;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3144_sel_1 = sel_1_2486;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3144_sel_1 = sel_10858;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3144_sel_1 = sel_10857;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3144_sel_1 = sel_10856;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3144_sel_1 = sel_10855;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3144_sel_1 = sel_10854;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3144_sel_1 = sel_10853;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3144_sel_1 = sel_10852;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3144_sel_1 = sel_10851;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3144_sel_1 = sel_10850;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3144_sel_1 = sel_10849;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3144_sel_1 = sel_10848;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3144_sel_1 = sel_10847;
        end
      default :
        begin
          p3144_sel_1 = sel_10866;
        end
    endcase
    sel_1_2487 = p3144_sel_1;
  end

  assign cont_bits_21_43 = cont_bits_21_26[sel_1_2487];

  assign sel_1_2488 = (tmp_13 == 1'b0 ? sel_1_2480 :
              cont_bits_21_43);

  assign sel_10867 = 32'sd0;

  assign sel_10868 = 32'sd0;

  assign sel_10869 = 32'sd0;

  assign sel_10870 = 32'sd0;

  assign sel_10871 = 32'sd0;

  assign sel_10872 = 32'sd0;

  assign sel_10873 = 32'sd0;

  assign sel_10874 = 32'sd0;

  assign sel_10875 = 32'sd0;

  assign sel_10876 = 32'sd0;

  assign sel_10877 = 32'sd0;

  assign sel_10878 = 32'sd0;

  assign sel_10879 = 32'sd0;

  assign sel_10880 = 32'sd0;

  assign sel_10881 = 32'sd0;

  assign s_746 = 32'sd8;

  assign sel_1_2489 = (tmp_15 == 1'b0 ? sel_10881 :
              s_746);

  assign sel_10882 = 32'sd0;

  assign sel_1_2490 = (tmp_17 == 1'b0 ? sel_1_2489 :
              sel_10882);

  assign sel_1_2491 = (s_10 == 1'b0 ? sel_10880 :
              sel_1_2490);

  assign sel_1_2492 = (s_11 == 1'b0 ? sel_10879 :
              sel_1_2491);

  assign sel_10883 = 32'sd0;

  assign sel_1_2493 = (s_12 == 1'b0 ? sel_1_2492 :
              sel_10883);

  assign sel_10884 = 32'sd0;

  assign sel_10885 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10867, sel_10868, sel_10869, sel_10870, sel_10871,
       sel_10872, sel_10873, sel_10874, sel_10875, sel_10876, sel_10877,
       sel_10878, sel_10884, sel_10885, sel_1_2493) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3671_sel_1 = sel_10884;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3671_sel_1 = sel_1_2493;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3671_sel_1 = sel_10878;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3671_sel_1 = sel_10877;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3671_sel_1 = sel_10876;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3671_sel_1 = sel_10875;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3671_sel_1 = sel_10874;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3671_sel_1 = sel_10873;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3671_sel_1 = sel_10872;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3671_sel_1 = sel_10871;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3671_sel_1 = sel_10870;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3671_sel_1 = sel_10869;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3671_sel_1 = sel_10868;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3671_sel_1 = sel_10867;
        end
      default :
        begin
          p3671_sel_1 = sel_10885;
        end
    endcase
    sel_1_2494 = p3671_sel_1;
  end

  assign cont_bits_12_43 = cont_bits_12_26[sel_1_2494];

  assign sel_1_2495 = (tmp_15 == 1'b0 ? sel_1_2488 :
              cont_bits_12_43);

  assign sel_10886 = 32'sd0;

  assign sel_10887 = 32'sd0;

  assign sel_10888 = 32'sd0;

  assign sel_10889 = 32'sd0;

  assign sel_10890 = 32'sd0;

  assign sel_10891 = 32'sd0;

  assign sel_10892 = 32'sd0;

  assign sel_10893 = 32'sd0;

  assign sel_10894 = 32'sd0;

  assign sel_10895 = 32'sd0;

  assign sel_10896 = 32'sd0;

  assign sel_10897 = 32'sd0;

  assign sel_10898 = 32'sd0;

  assign sel_10899 = 32'sd0;

  assign sel_10900 = 32'sd0;

  assign s_747 = 32'sd8;

  assign sel_1_2496 = (tmp_17 == 1'b0 ? sel_10900 :
              s_747);

  assign sel_1_2497 = (s_10 == 1'b0 ? sel_10899 :
              sel_1_2496);

  assign sel_1_2498 = (s_11 == 1'b0 ? sel_10898 :
              sel_1_2497);

  assign sel_10901 = 32'sd0;

  assign sel_1_2499 = (s_12 == 1'b0 ? sel_1_2498 :
              sel_10901);

  assign sel_10902 = 32'sd0;

  assign sel_10903 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10886, sel_10887, sel_10888, sel_10889, sel_10890,
       sel_10891, sel_10892, sel_10893, sel_10894, sel_10895, sel_10896,
       sel_10897, sel_10902, sel_10903, sel_1_2499) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2634_sel_1 = sel_10902;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2634_sel_1 = sel_1_2499;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2634_sel_1 = sel_10897;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2634_sel_1 = sel_10896;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2634_sel_1 = sel_10895;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2634_sel_1 = sel_10894;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2634_sel_1 = sel_10893;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2634_sel_1 = sel_10892;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2634_sel_1 = sel_10891;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2634_sel_1 = sel_10890;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2634_sel_1 = sel_10889;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2634_sel_1 = sel_10888;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2634_sel_1 = sel_10887;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2634_sel_1 = sel_10886;
        end
      default :
        begin
          p2634_sel_1 = sel_10903;
        end
    endcase
    sel_1_2500 = p2634_sel_1;
  end

  assign cont_bits_50 = cont_bits_29[sel_1_2500];

  assign sel_1_2501 = (tmp_17 == 1'b0 ? sel_1_2495 :
              cont_bits_50);

  assign sel_10904 = 1'b0;

  assign sel_10905 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10573, sel_10574, sel_10575, sel_10576, sel_10577,
       sel_10578, sel_10579, sel_10580, sel_10581, sel_10582, sel_10583,
       sel_10904, sel_10905, sel_1_2426, sel_1_2501) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p387_sel_1 = sel_10904;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p387_sel_1 = sel_1_2501;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p387_sel_1 = sel_1_2426;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p387_sel_1 = sel_10583;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p387_sel_1 = sel_10582;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p387_sel_1 = sel_10581;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p387_sel_1 = sel_10580;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p387_sel_1 = sel_10579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p387_sel_1 = sel_10578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p387_sel_1 = sel_10577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p387_sel_1 = sel_10576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p387_sel_1 = sel_10575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p387_sel_1 = sel_10574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p387_sel_1 = sel_10573;
        end
      default :
        begin
          p387_sel_1 = sel_10905;
        end
    endcase
    sel_1_2502 = p387_sel_1;
  end

  assign sel_10906 = 1'b0;

  assign sel_10907 = 1'b0;

  assign sel_10908 = 1'b0;

  assign sel_10909 = 1'b0;

  assign sel_10910 = 1'b0;

  assign sel_10911 = 1'b0;

  assign sel_10912 = 1'b0;

  assign sel_10913 = 1'b0;

  assign sel_10914 = 1'b0;

  assign sel_10915 = 1'b0;

  assign sel_10916 = 1'b0;

  assign sel_10917 = 1'b0;

  assign s_748 = 1'b1;

  assign sel_2_1585 = (s_13 == 1'b0 ? sel_10917 :
              s_748);

  assign s_749 = 1'b1;

  assign sel_2_1586 = (s_14 == 1'b0 ? sel_2_1585 :
              s_749);

  assign s_750 = 1'b1;

  assign sel_2_1587 = (s_15 == 1'b0 ? sel_2_1586 :
              s_750);

  assign s_751 = 1'b1;

  assign sel_2_1588 = (s_16 == 1'b0 ? sel_2_1587 :
              s_751);

  assign s_752 = 1'b1;

  assign sel_2_1589 = (s_17 == 1'b0 ? sel_2_1588 :
              s_752);

  assign s_753 = 1'b1;

  assign sel_2_1590 = (s_18 == 1'b0 ? sel_2_1589 :
              s_753);

  assign s_754 = 1'b1;

  assign sel_2_1591 = (s_19 == 1'b0 ? sel_2_1590 :
              s_754);

  assign s_755 = 1'b1;

  assign sel_2_1592 = (s_20 == 1'b0 ? sel_2_1591 :
              s_755);

  assign sel_10918 = 1'b0;

  assign sel_10919 = 1'b0;

  assign sel_10920 = 1'b0;

  assign s_756 = 1'b1;

  assign sel_2_1593 = (tmp_3 == 1'b0 ? sel_10920 :
              s_756);

  assign s_757 = 1'b1;

  assign sel_2_1594 = (tmp_5 == 1'b0 ? sel_2_1593 :
              s_757);

  assign s_758 = 1'b1;

  assign sel_2_1595 = (tmp_7 == 1'b0 ? sel_2_1594 :
              s_758);

  assign s_759 = 1'b1;

  assign sel_2_1596 = (tmp_9 == 1'b0 ? sel_2_1595 :
              s_759);

  assign s_760 = 1'b1;

  assign sel_2_1597 = (tmp_11 == 1'b0 ? sel_2_1596 :
              s_760);

  assign s_761 = 1'b1;

  assign sel_2_1598 = (tmp_13 == 1'b0 ? sel_2_1597 :
              s_761);

  assign s_762 = 1'b1;

  assign sel_2_1599 = (tmp_15 == 1'b0 ? sel_2_1598 :
              s_762);

  assign s_763 = 1'b1;

  assign sel_2_1600 = (tmp_17 == 1'b0 ? sel_2_1599 :
              s_763);

  assign sel_2_1601 = (s_10 == 1'b0 ? sel_10919 :
              sel_2_1600);

  assign sel_2_1602 = (s_11 == 1'b0 ? sel_10918 :
              sel_2_1601);

  assign sel_10921 = 1'b0;

  assign sel_2_1603 = (s_12 == 1'b0 ? sel_2_1602 :
              sel_10921);

  assign sel_10922 = 1'b0;

  assign sel_10923 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10906, sel_10907, sel_10908, sel_10909, sel_10910,
       sel_10911, sel_10912, sel_10913, sel_10914, sel_10915, sel_10916,
       sel_10922, sel_10923, sel_2_1592, sel_2_1603) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p372_sel_2 = sel_10922;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p372_sel_2 = sel_2_1603;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p372_sel_2 = sel_2_1592;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p372_sel_2 = sel_10916;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p372_sel_2 = sel_10915;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p372_sel_2 = sel_10914;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p372_sel_2 = sel_10913;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p372_sel_2 = sel_10912;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p372_sel_2 = sel_10911;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p372_sel_2 = sel_10910;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p372_sel_2 = sel_10909;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p372_sel_2 = sel_10908;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p372_sel_2 = sel_10907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p372_sel_2 = sel_10906;
        end
      default :
        begin
          p372_sel_2 = sel_10923;
        end
    endcase
    sel_2_1604 = p372_sel_2;
  end

  assign sel_10924 = 1'b0;

  assign sel_10925 = 1'b0;

  assign sel_10926 = 1'b0;

  assign sel_10927 = 1'b0;

  assign sel_10928 = 1'b0;

  assign sel_10929 = 1'b0;

  assign sel_10930 = 1'b0;

  assign sel_10931 = 1'b0;

  assign sel_10932 = 1'b0;

  assign sel_10933 = 1'b0;

  assign sel_10934 = 1'b0;

  assign sel_10935 = 32'sd0;

  assign sel_10936 = 32'sd0;

  assign sel_10937 = 32'sd0;

  assign sel_10938 = 32'sd0;

  assign sel_10939 = 32'sd0;

  assign sel_10940 = 32'sd0;

  assign sel_10941 = 32'sd0;

  assign sel_10942 = 32'sd0;

  assign sel_10943 = 32'sd0;

  assign sel_10944 = 32'sd0;

  assign sel_10945 = 32'sd0;

  assign sel_10946 = 32'sd0;

  assign s_764 = 32'sd9;

  assign sel_1_2503 = (s_13 == 1'b0 ? sel_10946 :
              s_764);

  assign sel_10947 = 32'sd0;

  assign sel_1_2504 = (s_14 == 1'b0 ? sel_1_2503 :
              sel_10947);

  assign sel_10948 = 32'sd0;

  assign sel_1_2505 = (s_15 == 1'b0 ? sel_1_2504 :
              sel_10948);

  assign sel_10949 = 32'sd0;

  assign sel_1_2506 = (s_16 == 1'b0 ? sel_1_2505 :
              sel_10949);

  assign sel_10950 = 32'sd0;

  assign sel_1_2507 = (s_17 == 1'b0 ? sel_1_2506 :
              sel_10950);

  assign sel_10951 = 32'sd0;

  assign sel_1_2508 = (s_18 == 1'b0 ? sel_1_2507 :
              sel_10951);

  assign sel_10952 = 32'sd0;

  assign sel_1_2509 = (s_19 == 1'b0 ? sel_1_2508 :
              sel_10952);

  assign sel_10953 = 32'sd0;

  assign sel_1_2510 = (s_20 == 1'b0 ? sel_1_2509 :
              sel_10953);

  assign sel_10954 = 32'sd0;

  assign sel_10955 = 32'sd0;

  assign sel_10956 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10935, sel_10936, sel_10937, sel_10938, sel_10939,
       sel_10940, sel_10941, sel_10942, sel_10943, sel_10944, sel_10945,
       sel_10954, sel_10955, sel_10956, sel_1_2510) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2005_sel_1 = sel_10955;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2005_sel_1 = sel_10954;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2005_sel_1 = sel_1_2510;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2005_sel_1 = sel_10945;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2005_sel_1 = sel_10944;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2005_sel_1 = sel_10943;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2005_sel_1 = sel_10942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2005_sel_1 = sel_10941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2005_sel_1 = sel_10940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2005_sel_1 = sel_10939;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2005_sel_1 = sel_10938;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2005_sel_1 = sel_10937;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2005_sel_1 = sel_10936;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2005_sel_1 = sel_10935;
        end
      default :
        begin
          p2005_sel_1 = sel_10956;
        end
    endcase
    sel_1_2511 = p2005_sel_1;
  end

  assign cont_bits_41_44 = cont_bits_41_12[sel_1_2511];

  assign sel_10957 = 32'sd0;

  assign sel_10958 = 32'sd0;

  assign sel_10959 = 32'sd0;

  assign sel_10960 = 32'sd0;

  assign sel_10961 = 32'sd0;

  assign sel_10962 = 32'sd0;

  assign sel_10963 = 32'sd0;

  assign sel_10964 = 32'sd0;

  assign sel_10965 = 32'sd0;

  assign sel_10966 = 32'sd0;

  assign sel_10967 = 32'sd0;

  assign sel_10968 = 32'sd0;

  assign s_765 = 32'sd9;

  assign sel_1_2512 = (s_14 == 1'b0 ? sel_10968 :
              s_765);

  assign sel_10969 = 32'sd0;

  assign sel_1_2513 = (s_15 == 1'b0 ? sel_1_2512 :
              sel_10969);

  assign sel_10970 = 32'sd0;

  assign sel_1_2514 = (s_16 == 1'b0 ? sel_1_2513 :
              sel_10970);

  assign sel_10971 = 32'sd0;

  assign sel_1_2515 = (s_17 == 1'b0 ? sel_1_2514 :
              sel_10971);

  assign sel_10972 = 32'sd0;

  assign sel_1_2516 = (s_18 == 1'b0 ? sel_1_2515 :
              sel_10972);

  assign sel_10973 = 32'sd0;

  assign sel_1_2517 = (s_19 == 1'b0 ? sel_1_2516 :
              sel_10973);

  assign sel_10974 = 32'sd0;

  assign sel_1_2518 = (s_20 == 1'b0 ? sel_1_2517 :
              sel_10974);

  assign sel_10975 = 32'sd0;

  assign sel_10976 = 32'sd0;

  assign sel_10977 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10957, sel_10958, sel_10959, sel_10960, sel_10961,
       sel_10962, sel_10963, sel_10964, sel_10965, sel_10966, sel_10967,
       sel_10975, sel_10976, sel_10977, sel_1_2518) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1189_sel_1 = sel_10976;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1189_sel_1 = sel_10975;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1189_sel_1 = sel_1_2518;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1189_sel_1 = sel_10967;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1189_sel_1 = sel_10966;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1189_sel_1 = sel_10965;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1189_sel_1 = sel_10964;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1189_sel_1 = sel_10963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1189_sel_1 = sel_10962;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1189_sel_1 = sel_10961;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1189_sel_1 = sel_10960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1189_sel_1 = sel_10959;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1189_sel_1 = sel_10958;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1189_sel_1 = sel_10957;
        end
      default :
        begin
          p1189_sel_1 = sel_10977;
        end
    endcase
    sel_1_2519 = p1189_sel_1;
  end

  assign cont_bits_42_44 = cont_bits_42_12[sel_1_2519];

  assign sel_1_2520 = (s_14 == 1'b0 ? cont_bits_41_44 :
              cont_bits_42_44);

  assign sel_10978 = 32'sd0;

  assign sel_10979 = 32'sd0;

  assign sel_10980 = 32'sd0;

  assign sel_10981 = 32'sd0;

  assign sel_10982 = 32'sd0;

  assign sel_10983 = 32'sd0;

  assign sel_10984 = 32'sd0;

  assign sel_10985 = 32'sd0;

  assign sel_10986 = 32'sd0;

  assign sel_10987 = 32'sd0;

  assign sel_10988 = 32'sd0;

  assign sel_10989 = 32'sd0;

  assign s_766 = 32'sd9;

  assign sel_1_2521 = (s_15 == 1'b0 ? sel_10989 :
              s_766);

  assign sel_10990 = 32'sd0;

  assign sel_1_2522 = (s_16 == 1'b0 ? sel_1_2521 :
              sel_10990);

  assign sel_10991 = 32'sd0;

  assign sel_1_2523 = (s_17 == 1'b0 ? sel_1_2522 :
              sel_10991);

  assign sel_10992 = 32'sd0;

  assign sel_1_2524 = (s_18 == 1'b0 ? sel_1_2523 :
              sel_10992);

  assign sel_10993 = 32'sd0;

  assign sel_1_2525 = (s_19 == 1'b0 ? sel_1_2524 :
              sel_10993);

  assign sel_10994 = 32'sd0;

  assign sel_1_2526 = (s_20 == 1'b0 ? sel_1_2525 :
              sel_10994);

  assign sel_10995 = 32'sd0;

  assign sel_10996 = 32'sd0;

  assign sel_10997 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10978, sel_10979, sel_10980, sel_10981, sel_10982,
       sel_10983, sel_10984, sel_10985, sel_10986, sel_10987, sel_10988,
       sel_10995, sel_10996, sel_10997, sel_1_2526) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1733_sel_1 = sel_10996;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1733_sel_1 = sel_10995;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1733_sel_1 = sel_1_2526;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1733_sel_1 = sel_10988;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1733_sel_1 = sel_10987;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1733_sel_1 = sel_10986;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1733_sel_1 = sel_10985;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1733_sel_1 = sel_10984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1733_sel_1 = sel_10983;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1733_sel_1 = sel_10982;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1733_sel_1 = sel_10981;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1733_sel_1 = sel_10980;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1733_sel_1 = sel_10979;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1733_sel_1 = sel_10978;
        end
      default :
        begin
          p1733_sel_1 = sel_10997;
        end
    endcase
    sel_1_2527 = p1733_sel_1;
  end

  assign cont_bits_32_44 = cont_bits_32_12[sel_1_2527];

  assign sel_1_2528 = (s_15 == 1'b0 ? sel_1_2520 :
              cont_bits_32_44);

  assign sel_10998 = 32'sd0;

  assign sel_10999 = 32'sd0;

  assign sel_11000 = 32'sd0;

  assign sel_11001 = 32'sd0;

  assign sel_11002 = 32'sd0;

  assign sel_11003 = 32'sd0;

  assign sel_11004 = 32'sd0;

  assign sel_11005 = 32'sd0;

  assign sel_11006 = 32'sd0;

  assign sel_11007 = 32'sd0;

  assign sel_11008 = 32'sd0;

  assign sel_11009 = 32'sd0;

  assign s_767 = 32'sd9;

  assign sel_1_2529 = (s_16 == 1'b0 ? sel_11009 :
              s_767);

  assign sel_11010 = 32'sd0;

  assign sel_1_2530 = (s_17 == 1'b0 ? sel_1_2529 :
              sel_11010);

  assign sel_11011 = 32'sd0;

  assign sel_1_2531 = (s_18 == 1'b0 ? sel_1_2530 :
              sel_11011);

  assign sel_11012 = 32'sd0;

  assign sel_1_2532 = (s_19 == 1'b0 ? sel_1_2531 :
              sel_11012);

  assign sel_11013 = 32'sd0;

  assign sel_1_2533 = (s_20 == 1'b0 ? sel_1_2532 :
              sel_11013);

  assign sel_11014 = 32'sd0;

  assign sel_11015 = 32'sd0;

  assign sel_11016 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_10998, sel_10999, sel_11000, sel_11001, sel_11002,
       sel_11003, sel_11004, sel_11005, sel_11006, sel_11007, sel_11008,
       sel_11014, sel_11015, sel_11016, sel_1_2533) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1053_sel_1 = sel_11015;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1053_sel_1 = sel_11014;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1053_sel_1 = sel_1_2533;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1053_sel_1 = sel_11008;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1053_sel_1 = sel_11007;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1053_sel_1 = sel_11006;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1053_sel_1 = sel_11005;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1053_sel_1 = sel_11004;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1053_sel_1 = sel_11003;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1053_sel_1 = sel_11002;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1053_sel_1 = sel_11001;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1053_sel_1 = sel_11000;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1053_sel_1 = sel_10999;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1053_sel_1 = sel_10998;
        end
      default :
        begin
          p1053_sel_1 = sel_11016;
        end
    endcase
    sel_1_2534 = p1053_sel_1;
  end

  assign cont_bits_31_44 = cont_bits_31_12[sel_1_2534];

  assign sel_1_2535 = (s_16 == 1'b0 ? sel_1_2528 :
              cont_bits_31_44);

  assign sel_11017 = 32'sd0;

  assign sel_11018 = 32'sd0;

  assign sel_11019 = 32'sd0;

  assign sel_11020 = 32'sd0;

  assign sel_11021 = 32'sd0;

  assign sel_11022 = 32'sd0;

  assign sel_11023 = 32'sd0;

  assign sel_11024 = 32'sd0;

  assign sel_11025 = 32'sd0;

  assign sel_11026 = 32'sd0;

  assign sel_11027 = 32'sd0;

  assign sel_11028 = 32'sd0;

  assign s_768 = 32'sd9;

  assign sel_1_2536 = (s_17 == 1'b0 ? sel_11028 :
              s_768);

  assign sel_11029 = 32'sd0;

  assign sel_1_2537 = (s_18 == 1'b0 ? sel_1_2536 :
              sel_11029);

  assign sel_11030 = 32'sd0;

  assign sel_1_2538 = (s_19 == 1'b0 ? sel_1_2537 :
              sel_11030);

  assign sel_11031 = 32'sd0;

  assign sel_1_2539 = (s_20 == 1'b0 ? sel_1_2538 :
              sel_11031);

  assign sel_11032 = 32'sd0;

  assign sel_11033 = 32'sd0;

  assign sel_11034 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11017, sel_11018, sel_11019, sel_11020, sel_11021,
       sel_11022, sel_11023, sel_11024, sel_11025, sel_11026, sel_11027,
       sel_11032, sel_11033, sel_11034, sel_1_2539) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1852_sel_1 = sel_11033;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1852_sel_1 = sel_11032;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1852_sel_1 = sel_1_2539;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1852_sel_1 = sel_11027;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1852_sel_1 = sel_11026;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1852_sel_1 = sel_11025;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1852_sel_1 = sel_11024;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1852_sel_1 = sel_11023;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1852_sel_1 = sel_11022;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1852_sel_1 = sel_11021;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1852_sel_1 = sel_11020;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1852_sel_1 = sel_11019;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1852_sel_1 = sel_11018;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1852_sel_1 = sel_11017;
        end
      default :
        begin
          p1852_sel_1 = sel_11034;
        end
    endcase
    sel_1_2540 = p1852_sel_1;
  end

  assign cont_bits_22_44 = cont_bits_22_12[sel_1_2540];

  assign sel_1_2541 = (s_17 == 1'b0 ? sel_1_2535 :
              cont_bits_22_44);

  assign sel_11035 = 32'sd0;

  assign sel_11036 = 32'sd0;

  assign sel_11037 = 32'sd0;

  assign sel_11038 = 32'sd0;

  assign sel_11039 = 32'sd0;

  assign sel_11040 = 32'sd0;

  assign sel_11041 = 32'sd0;

  assign sel_11042 = 32'sd0;

  assign sel_11043 = 32'sd0;

  assign sel_11044 = 32'sd0;

  assign sel_11045 = 32'sd0;

  assign sel_11046 = 32'sd0;

  assign s_769 = 32'sd9;

  assign sel_1_2542 = (s_18 == 1'b0 ? sel_11046 :
              s_769);

  assign sel_11047 = 32'sd0;

  assign sel_1_2543 = (s_19 == 1'b0 ? sel_1_2542 :
              sel_11047);

  assign sel_11048 = 32'sd0;

  assign sel_1_2544 = (s_20 == 1'b0 ? sel_1_2543 :
              sel_11048);

  assign sel_11049 = 32'sd0;

  assign sel_11050 = 32'sd0;

  assign sel_11051 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11035, sel_11036, sel_11037, sel_11038, sel_11039,
       sel_11040, sel_11041, sel_11042, sel_11043, sel_11044, sel_11045,
       sel_11049, sel_11050, sel_11051, sel_1_2544) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2549_sel_1 = sel_11050;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2549_sel_1 = sel_11049;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2549_sel_1 = sel_1_2544;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2549_sel_1 = sel_11045;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2549_sel_1 = sel_11044;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2549_sel_1 = sel_11043;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2549_sel_1 = sel_11042;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2549_sel_1 = sel_11041;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2549_sel_1 = sel_11040;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2549_sel_1 = sel_11039;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2549_sel_1 = sel_11038;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2549_sel_1 = sel_11037;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2549_sel_1 = sel_11036;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2549_sel_1 = sel_11035;
        end
      default :
        begin
          p2549_sel_1 = sel_11051;
        end
    endcase
    sel_1_2545 = p2549_sel_1;
  end

  assign cont_bits_21_44 = cont_bits_21_12[sel_1_2545];

  assign sel_1_2546 = (s_18 == 1'b0 ? sel_1_2541 :
              cont_bits_21_44);

  assign sel_11052 = 32'sd0;

  assign sel_11053 = 32'sd0;

  assign sel_11054 = 32'sd0;

  assign sel_11055 = 32'sd0;

  assign sel_11056 = 32'sd0;

  assign sel_11057 = 32'sd0;

  assign sel_11058 = 32'sd0;

  assign sel_11059 = 32'sd0;

  assign sel_11060 = 32'sd0;

  assign sel_11061 = 32'sd0;

  assign sel_11062 = 32'sd0;

  assign sel_11063 = 32'sd0;

  assign s_770 = 32'sd9;

  assign sel_1_2547 = (s_19 == 1'b0 ? sel_11063 :
              s_770);

  assign sel_11064 = 32'sd0;

  assign sel_1_2548 = (s_20 == 1'b0 ? sel_1_2547 :
              sel_11064);

  assign sel_11065 = 32'sd0;

  assign sel_11066 = 32'sd0;

  assign sel_11067 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11052, sel_11053, sel_11054, sel_11055, sel_11056,
       sel_11057, sel_11058, sel_11059, sel_11060, sel_11061, sel_11062,
       sel_11065, sel_11066, sel_11067, sel_1_2548) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1376_sel_1 = sel_11066;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1376_sel_1 = sel_11065;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1376_sel_1 = sel_1_2548;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1376_sel_1 = sel_11062;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1376_sel_1 = sel_11061;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1376_sel_1 = sel_11060;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1376_sel_1 = sel_11059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1376_sel_1 = sel_11058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1376_sel_1 = sel_11057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1376_sel_1 = sel_11056;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1376_sel_1 = sel_11055;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1376_sel_1 = sel_11054;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1376_sel_1 = sel_11053;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1376_sel_1 = sel_11052;
        end
      default :
        begin
          p1376_sel_1 = sel_11067;
        end
    endcase
    sel_1_2549 = p1376_sel_1;
  end

  assign cont_bits_12_44 = cont_bits_12_12[sel_1_2549];

  assign sel_1_2550 = (s_19 == 1'b0 ? sel_1_2546 :
              cont_bits_12_44);

  assign sel_11068 = 32'sd0;

  assign sel_11069 = 32'sd0;

  assign sel_11070 = 32'sd0;

  assign sel_11071 = 32'sd0;

  assign sel_11072 = 32'sd0;

  assign sel_11073 = 32'sd0;

  assign sel_11074 = 32'sd0;

  assign sel_11075 = 32'sd0;

  assign sel_11076 = 32'sd0;

  assign sel_11077 = 32'sd0;

  assign sel_11078 = 32'sd0;

  assign sel_11079 = 32'sd0;

  assign s_771 = 32'sd9;

  assign sel_1_2551 = (s_20 == 1'b0 ? sel_11079 :
              s_771);

  assign sel_11080 = 32'sd0;

  assign sel_11081 = 32'sd0;

  assign sel_11082 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11068, sel_11069, sel_11070, sel_11071, sel_11072,
       sel_11073, sel_11074, sel_11075, sel_11076, sel_11077, sel_11078,
       sel_11080, sel_11081, sel_11082, sel_1_2551) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2379_sel_1 = sel_11081;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2379_sel_1 = sel_11080;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2379_sel_1 = sel_1_2551;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2379_sel_1 = sel_11078;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2379_sel_1 = sel_11077;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2379_sel_1 = sel_11076;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2379_sel_1 = sel_11075;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2379_sel_1 = sel_11074;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2379_sel_1 = sel_11073;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2379_sel_1 = sel_11072;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2379_sel_1 = sel_11071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2379_sel_1 = sel_11070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2379_sel_1 = sel_11069;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2379_sel_1 = sel_11068;
        end
      default :
        begin
          p2379_sel_1 = sel_11082;
        end
    endcase
    sel_1_2552 = p2379_sel_1;
  end

  assign cont_bits_51 = cont_bits_13[sel_1_2552];

  assign sel_1_2553 = (s_20 == 1'b0 ? sel_1_2550 :
              cont_bits_51);

  assign sel_11083 = 32'sd0;

  assign sel_11084 = 32'sd0;

  assign sel_11085 = 32'sd0;

  assign sel_11086 = 32'sd0;

  assign sel_11087 = 32'sd0;

  assign sel_11088 = 32'sd0;

  assign sel_11089 = 32'sd0;

  assign sel_11090 = 32'sd0;

  assign sel_11091 = 32'sd0;

  assign sel_11092 = 32'sd0;

  assign sel_11093 = 32'sd0;

  assign sel_11094 = 32'sd0;

  assign sel_11095 = 32'sd0;

  assign sel_11096 = 32'sd0;

  assign sel_11097 = 32'sd0;

  assign s_772 = 32'sd9;

  assign sel_1_2554 = (tmp_3 == 1'b0 ? sel_11097 :
              s_772);

  assign sel_11098 = 32'sd0;

  assign sel_1_2555 = (tmp_5 == 1'b0 ? sel_1_2554 :
              sel_11098);

  assign sel_11099 = 32'sd0;

  assign sel_1_2556 = (tmp_7 == 1'b0 ? sel_1_2555 :
              sel_11099);

  assign sel_11100 = 32'sd0;

  assign sel_1_2557 = (tmp_9 == 1'b0 ? sel_1_2556 :
              sel_11100);

  assign sel_11101 = 32'sd0;

  assign sel_1_2558 = (tmp_11 == 1'b0 ? sel_1_2557 :
              sel_11101);

  assign sel_11102 = 32'sd0;

  assign sel_1_2559 = (tmp_13 == 1'b0 ? sel_1_2558 :
              sel_11102);

  assign sel_11103 = 32'sd0;

  assign sel_1_2560 = (tmp_15 == 1'b0 ? sel_1_2559 :
              sel_11103);

  assign sel_11104 = 32'sd0;

  assign sel_1_2561 = (tmp_17 == 1'b0 ? sel_1_2560 :
              sel_11104);

  assign sel_1_2562 = (s_10 == 1'b0 ? sel_11096 :
              sel_1_2561);

  assign sel_1_2563 = (s_11 == 1'b0 ? sel_11095 :
              sel_1_2562);

  assign sel_11105 = 32'sd0;

  assign sel_1_2564 = (s_12 == 1'b0 ? sel_1_2563 :
              sel_11105);

  assign sel_11106 = 32'sd0;

  assign sel_11107 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11083, sel_11084, sel_11085, sel_11086, sel_11087,
       sel_11088, sel_11089, sel_11090, sel_11091, sel_11092, sel_11093,
       sel_11094, sel_11106, sel_11107, sel_1_2564) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3263_sel_1 = sel_11106;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3263_sel_1 = sel_1_2564;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3263_sel_1 = sel_11094;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3263_sel_1 = sel_11093;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3263_sel_1 = sel_11092;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3263_sel_1 = sel_11091;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3263_sel_1 = sel_11090;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3263_sel_1 = sel_11089;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3263_sel_1 = sel_11088;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3263_sel_1 = sel_11087;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3263_sel_1 = sel_11086;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3263_sel_1 = sel_11085;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3263_sel_1 = sel_11084;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3263_sel_1 = sel_11083;
        end
      default :
        begin
          p3263_sel_1 = sel_11107;
        end
    endcase
    sel_1_2565 = p3263_sel_1;
  end

  assign cont_bits_41_45 = cont_bits_41_26[sel_1_2565];

  assign sel_11108 = 32'sd0;

  assign sel_11109 = 32'sd0;

  assign sel_11110 = 32'sd0;

  assign sel_11111 = 32'sd0;

  assign sel_11112 = 32'sd0;

  assign sel_11113 = 32'sd0;

  assign sel_11114 = 32'sd0;

  assign sel_11115 = 32'sd0;

  assign sel_11116 = 32'sd0;

  assign sel_11117 = 32'sd0;

  assign sel_11118 = 32'sd0;

  assign sel_11119 = 32'sd0;

  assign sel_11120 = 32'sd0;

  assign sel_11121 = 32'sd0;

  assign sel_11122 = 32'sd0;

  assign s_773 = 32'sd9;

  assign sel_1_2566 = (tmp_5 == 1'b0 ? sel_11122 :
              s_773);

  assign sel_11123 = 32'sd0;

  assign sel_1_2567 = (tmp_7 == 1'b0 ? sel_1_2566 :
              sel_11123);

  assign sel_11124 = 32'sd0;

  assign sel_1_2568 = (tmp_9 == 1'b0 ? sel_1_2567 :
              sel_11124);

  assign sel_11125 = 32'sd0;

  assign sel_1_2569 = (tmp_11 == 1'b0 ? sel_1_2568 :
              sel_11125);

  assign sel_11126 = 32'sd0;

  assign sel_1_2570 = (tmp_13 == 1'b0 ? sel_1_2569 :
              sel_11126);

  assign sel_11127 = 32'sd0;

  assign sel_1_2571 = (tmp_15 == 1'b0 ? sel_1_2570 :
              sel_11127);

  assign sel_11128 = 32'sd0;

  assign sel_1_2572 = (tmp_17 == 1'b0 ? sel_1_2571 :
              sel_11128);

  assign sel_1_2573 = (s_10 == 1'b0 ? sel_11121 :
              sel_1_2572);

  assign sel_1_2574 = (s_11 == 1'b0 ? sel_11120 :
              sel_1_2573);

  assign sel_11129 = 32'sd0;

  assign sel_1_2575 = (s_12 == 1'b0 ? sel_1_2574 :
              sel_11129);

  assign sel_11130 = 32'sd0;

  assign sel_11131 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11108, sel_11109, sel_11110, sel_11111, sel_11112,
       sel_11113, sel_11114, sel_11115, sel_11116, sel_11117, sel_11118,
       sel_11119, sel_11130, sel_11131, sel_1_2575) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2838_sel_1 = sel_11130;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2838_sel_1 = sel_1_2575;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2838_sel_1 = sel_11119;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2838_sel_1 = sel_11118;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2838_sel_1 = sel_11117;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2838_sel_1 = sel_11116;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2838_sel_1 = sel_11115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2838_sel_1 = sel_11114;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2838_sel_1 = sel_11113;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2838_sel_1 = sel_11112;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2838_sel_1 = sel_11111;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2838_sel_1 = sel_11110;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2838_sel_1 = sel_11109;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2838_sel_1 = sel_11108;
        end
      default :
        begin
          p2838_sel_1 = sel_11131;
        end
    endcase
    sel_1_2576 = p2838_sel_1;
  end

  assign cont_bits_42_45 = cont_bits_42_26[sel_1_2576];

  assign sel_1_2577 = (tmp_5 == 1'b0 ? cont_bits_41_45 :
              cont_bits_42_45);

  assign sel_11132 = 32'sd0;

  assign sel_11133 = 32'sd0;

  assign sel_11134 = 32'sd0;

  assign sel_11135 = 32'sd0;

  assign sel_11136 = 32'sd0;

  assign sel_11137 = 32'sd0;

  assign sel_11138 = 32'sd0;

  assign sel_11139 = 32'sd0;

  assign sel_11140 = 32'sd0;

  assign sel_11141 = 32'sd0;

  assign sel_11142 = 32'sd0;

  assign sel_11143 = 32'sd0;

  assign sel_11144 = 32'sd0;

  assign sel_11145 = 32'sd0;

  assign sel_11146 = 32'sd0;

  assign s_774 = 32'sd9;

  assign sel_1_2578 = (tmp_7 == 1'b0 ? sel_11146 :
              s_774);

  assign sel_11147 = 32'sd0;

  assign sel_1_2579 = (tmp_9 == 1'b0 ? sel_1_2578 :
              sel_11147);

  assign sel_11148 = 32'sd0;

  assign sel_1_2580 = (tmp_11 == 1'b0 ? sel_1_2579 :
              sel_11148);

  assign sel_11149 = 32'sd0;

  assign sel_1_2581 = (tmp_13 == 1'b0 ? sel_1_2580 :
              sel_11149);

  assign sel_11150 = 32'sd0;

  assign sel_1_2582 = (tmp_15 == 1'b0 ? sel_1_2581 :
              sel_11150);

  assign sel_11151 = 32'sd0;

  assign sel_1_2583 = (tmp_17 == 1'b0 ? sel_1_2582 :
              sel_11151);

  assign sel_1_2584 = (s_10 == 1'b0 ? sel_11145 :
              sel_1_2583);

  assign sel_1_2585 = (s_11 == 1'b0 ? sel_11144 :
              sel_1_2584);

  assign sel_11152 = 32'sd0;

  assign sel_1_2586 = (s_12 == 1'b0 ? sel_1_2585 :
              sel_11152);

  assign sel_11153 = 32'sd0;

  assign sel_11154 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11132, sel_11133, sel_11134, sel_11135, sel_11136,
       sel_11137, sel_11138, sel_11139, sel_11140, sel_11141, sel_11142,
       sel_11143, sel_11153, sel_11154, sel_1_2586) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3569_sel_1 = sel_11153;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3569_sel_1 = sel_1_2586;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3569_sel_1 = sel_11143;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3569_sel_1 = sel_11142;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3569_sel_1 = sel_11141;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3569_sel_1 = sel_11140;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3569_sel_1 = sel_11139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3569_sel_1 = sel_11138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3569_sel_1 = sel_11137;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3569_sel_1 = sel_11136;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3569_sel_1 = sel_11135;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3569_sel_1 = sel_11134;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3569_sel_1 = sel_11133;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3569_sel_1 = sel_11132;
        end
      default :
        begin
          p3569_sel_1 = sel_11154;
        end
    endcase
    sel_1_2587 = p3569_sel_1;
  end

  assign cont_bits_32_45 = cont_bits_32_26[sel_1_2587];

  assign sel_1_2588 = (tmp_7 == 1'b0 ? sel_1_2577 :
              cont_bits_32_45);

  assign sel_11155 = 32'sd0;

  assign sel_11156 = 32'sd0;

  assign sel_11157 = 32'sd0;

  assign sel_11158 = 32'sd0;

  assign sel_11159 = 32'sd0;

  assign sel_11160 = 32'sd0;

  assign sel_11161 = 32'sd0;

  assign sel_11162 = 32'sd0;

  assign sel_11163 = 32'sd0;

  assign sel_11164 = 32'sd0;

  assign sel_11165 = 32'sd0;

  assign sel_11166 = 32'sd0;

  assign sel_11167 = 32'sd0;

  assign sel_11168 = 32'sd0;

  assign sel_11169 = 32'sd0;

  assign s_775 = 32'sd9;

  assign sel_1_2589 = (tmp_9 == 1'b0 ? sel_11169 :
              s_775);

  assign sel_11170 = 32'sd0;

  assign sel_1_2590 = (tmp_11 == 1'b0 ? sel_1_2589 :
              sel_11170);

  assign sel_11171 = 32'sd0;

  assign sel_1_2591 = (tmp_13 == 1'b0 ? sel_1_2590 :
              sel_11171);

  assign sel_11172 = 32'sd0;

  assign sel_1_2592 = (tmp_15 == 1'b0 ? sel_1_2591 :
              sel_11172);

  assign sel_11173 = 32'sd0;

  assign sel_1_2593 = (tmp_17 == 1'b0 ? sel_1_2592 :
              sel_11173);

  assign sel_1_2594 = (s_10 == 1'b0 ? sel_11168 :
              sel_1_2593);

  assign sel_1_2595 = (s_11 == 1'b0 ? sel_11167 :
              sel_1_2594);

  assign sel_11174 = 32'sd0;

  assign sel_1_2596 = (s_12 == 1'b0 ? sel_1_2595 :
              sel_11174);

  assign sel_11175 = 32'sd0;

  assign sel_11176 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11155, sel_11156, sel_11157, sel_11158, sel_11159,
       sel_11160, sel_11161, sel_11162, sel_11163, sel_11164, sel_11165,
       sel_11166, sel_11175, sel_11176, sel_1_2596) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4181_sel_1 = sel_11175;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4181_sel_1 = sel_1_2596;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4181_sel_1 = sel_11166;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4181_sel_1 = sel_11165;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4181_sel_1 = sel_11164;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4181_sel_1 = sel_11163;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4181_sel_1 = sel_11162;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4181_sel_1 = sel_11161;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4181_sel_1 = sel_11160;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4181_sel_1 = sel_11159;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4181_sel_1 = sel_11158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4181_sel_1 = sel_11157;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4181_sel_1 = sel_11156;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4181_sel_1 = sel_11155;
        end
      default :
        begin
          p4181_sel_1 = sel_11176;
        end
    endcase
    sel_1_2597 = p4181_sel_1;
  end

  assign cont_bits_31_45 = cont_bits_31_26[sel_1_2597];

  assign sel_1_2598 = (tmp_9 == 1'b0 ? sel_1_2588 :
              cont_bits_31_45);

  assign sel_11177 = 32'sd0;

  assign sel_11178 = 32'sd0;

  assign sel_11179 = 32'sd0;

  assign sel_11180 = 32'sd0;

  assign sel_11181 = 32'sd0;

  assign sel_11182 = 32'sd0;

  assign sel_11183 = 32'sd0;

  assign sel_11184 = 32'sd0;

  assign sel_11185 = 32'sd0;

  assign sel_11186 = 32'sd0;

  assign sel_11187 = 32'sd0;

  assign sel_11188 = 32'sd0;

  assign sel_11189 = 32'sd0;

  assign sel_11190 = 32'sd0;

  assign sel_11191 = 32'sd0;

  assign s_776 = 32'sd9;

  assign sel_1_2599 = (tmp_11 == 1'b0 ? sel_11191 :
              s_776);

  assign sel_11192 = 32'sd0;

  assign sel_1_2600 = (tmp_13 == 1'b0 ? sel_1_2599 :
              sel_11192);

  assign sel_11193 = 32'sd0;

  assign sel_1_2601 = (tmp_15 == 1'b0 ? sel_1_2600 :
              sel_11193);

  assign sel_11194 = 32'sd0;

  assign sel_1_2602 = (tmp_17 == 1'b0 ? sel_1_2601 :
              sel_11194);

  assign sel_1_2603 = (s_10 == 1'b0 ? sel_11190 :
              sel_1_2602);

  assign sel_1_2604 = (s_11 == 1'b0 ? sel_11189 :
              sel_1_2603);

  assign sel_11195 = 32'sd0;

  assign sel_1_2605 = (s_12 == 1'b0 ? sel_1_2604 :
              sel_11195);

  assign sel_11196 = 32'sd0;

  assign sel_11197 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11177, sel_11178, sel_11179, sel_11180, sel_11181,
       sel_11182, sel_11183, sel_11184, sel_11185, sel_11186, sel_11187,
       sel_11188, sel_11196, sel_11197, sel_1_2605) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3960_sel_1 = sel_11196;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3960_sel_1 = sel_1_2605;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3960_sel_1 = sel_11188;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3960_sel_1 = sel_11187;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3960_sel_1 = sel_11186;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3960_sel_1 = sel_11185;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3960_sel_1 = sel_11184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3960_sel_1 = sel_11183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3960_sel_1 = sel_11182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3960_sel_1 = sel_11181;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3960_sel_1 = sel_11180;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3960_sel_1 = sel_11179;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3960_sel_1 = sel_11178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3960_sel_1 = sel_11177;
        end
      default :
        begin
          p3960_sel_1 = sel_11197;
        end
    endcase
    sel_1_2606 = p3960_sel_1;
  end

  assign cont_bits_22_45 = cont_bits_22_26[sel_1_2606];

  assign sel_1_2607 = (tmp_11 == 1'b0 ? sel_1_2598 :
              cont_bits_22_45);

  assign sel_11198 = 32'sd0;

  assign sel_11199 = 32'sd0;

  assign sel_11200 = 32'sd0;

  assign sel_11201 = 32'sd0;

  assign sel_11202 = 32'sd0;

  assign sel_11203 = 32'sd0;

  assign sel_11204 = 32'sd0;

  assign sel_11205 = 32'sd0;

  assign sel_11206 = 32'sd0;

  assign sel_11207 = 32'sd0;

  assign sel_11208 = 32'sd0;

  assign sel_11209 = 32'sd0;

  assign sel_11210 = 32'sd0;

  assign sel_11211 = 32'sd0;

  assign sel_11212 = 32'sd0;

  assign s_777 = 32'sd9;

  assign sel_1_2608 = (tmp_13 == 1'b0 ? sel_11212 :
              s_777);

  assign sel_11213 = 32'sd0;

  assign sel_1_2609 = (tmp_15 == 1'b0 ? sel_1_2608 :
              sel_11213);

  assign sel_11214 = 32'sd0;

  assign sel_1_2610 = (tmp_17 == 1'b0 ? sel_1_2609 :
              sel_11214);

  assign sel_1_2611 = (s_10 == 1'b0 ? sel_11211 :
              sel_1_2610);

  assign sel_1_2612 = (s_11 == 1'b0 ? sel_11210 :
              sel_1_2611);

  assign sel_11215 = 32'sd0;

  assign sel_1_2613 = (s_12 == 1'b0 ? sel_1_2612 :
              sel_11215);

  assign sel_11216 = 32'sd0;

  assign sel_11217 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11198, sel_11199, sel_11200, sel_11201, sel_11202,
       sel_11203, sel_11204, sel_11205, sel_11206, sel_11207, sel_11208,
       sel_11209, sel_11216, sel_11217, sel_1_2613) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3127_sel_1 = sel_11216;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3127_sel_1 = sel_1_2613;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3127_sel_1 = sel_11209;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3127_sel_1 = sel_11208;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3127_sel_1 = sel_11207;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3127_sel_1 = sel_11206;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3127_sel_1 = sel_11205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3127_sel_1 = sel_11204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3127_sel_1 = sel_11203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3127_sel_1 = sel_11202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3127_sel_1 = sel_11201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3127_sel_1 = sel_11200;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3127_sel_1 = sel_11199;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3127_sel_1 = sel_11198;
        end
      default :
        begin
          p3127_sel_1 = sel_11217;
        end
    endcase
    sel_1_2614 = p3127_sel_1;
  end

  assign cont_bits_21_45 = cont_bits_21_26[sel_1_2614];

  assign sel_1_2615 = (tmp_13 == 1'b0 ? sel_1_2607 :
              cont_bits_21_45);

  assign sel_11218 = 32'sd0;

  assign sel_11219 = 32'sd0;

  assign sel_11220 = 32'sd0;

  assign sel_11221 = 32'sd0;

  assign sel_11222 = 32'sd0;

  assign sel_11223 = 32'sd0;

  assign sel_11224 = 32'sd0;

  assign sel_11225 = 32'sd0;

  assign sel_11226 = 32'sd0;

  assign sel_11227 = 32'sd0;

  assign sel_11228 = 32'sd0;

  assign sel_11229 = 32'sd0;

  assign sel_11230 = 32'sd0;

  assign sel_11231 = 32'sd0;

  assign sel_11232 = 32'sd0;

  assign s_778 = 32'sd9;

  assign sel_1_2616 = (tmp_15 == 1'b0 ? sel_11232 :
              s_778);

  assign sel_11233 = 32'sd0;

  assign sel_1_2617 = (tmp_17 == 1'b0 ? sel_1_2616 :
              sel_11233);

  assign sel_1_2618 = (s_10 == 1'b0 ? sel_11231 :
              sel_1_2617);

  assign sel_1_2619 = (s_11 == 1'b0 ? sel_11230 :
              sel_1_2618);

  assign sel_11234 = 32'sd0;

  assign sel_1_2620 = (s_12 == 1'b0 ? sel_1_2619 :
              sel_11234);

  assign sel_11235 = 32'sd0;

  assign sel_11236 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11218, sel_11219, sel_11220, sel_11221, sel_11222,
       sel_11223, sel_11224, sel_11225, sel_11226, sel_11227, sel_11228,
       sel_11229, sel_11235, sel_11236, sel_1_2620) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3654_sel_1 = sel_11235;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3654_sel_1 = sel_1_2620;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3654_sel_1 = sel_11229;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3654_sel_1 = sel_11228;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3654_sel_1 = sel_11227;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3654_sel_1 = sel_11226;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3654_sel_1 = sel_11225;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3654_sel_1 = sel_11224;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3654_sel_1 = sel_11223;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3654_sel_1 = sel_11222;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3654_sel_1 = sel_11221;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3654_sel_1 = sel_11220;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3654_sel_1 = sel_11219;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3654_sel_1 = sel_11218;
        end
      default :
        begin
          p3654_sel_1 = sel_11236;
        end
    endcase
    sel_1_2621 = p3654_sel_1;
  end

  assign cont_bits_12_45 = cont_bits_12_26[sel_1_2621];

  assign sel_1_2622 = (tmp_15 == 1'b0 ? sel_1_2615 :
              cont_bits_12_45);

  assign sel_11237 = 32'sd0;

  assign sel_11238 = 32'sd0;

  assign sel_11239 = 32'sd0;

  assign sel_11240 = 32'sd0;

  assign sel_11241 = 32'sd0;

  assign sel_11242 = 32'sd0;

  assign sel_11243 = 32'sd0;

  assign sel_11244 = 32'sd0;

  assign sel_11245 = 32'sd0;

  assign sel_11246 = 32'sd0;

  assign sel_11247 = 32'sd0;

  assign sel_11248 = 32'sd0;

  assign sel_11249 = 32'sd0;

  assign sel_11250 = 32'sd0;

  assign sel_11251 = 32'sd0;

  assign s_779 = 32'sd9;

  assign sel_1_2623 = (tmp_17 == 1'b0 ? sel_11251 :
              s_779);

  assign sel_1_2624 = (s_10 == 1'b0 ? sel_11250 :
              sel_1_2623);

  assign sel_1_2625 = (s_11 == 1'b0 ? sel_11249 :
              sel_1_2624);

  assign sel_11252 = 32'sd0;

  assign sel_1_2626 = (s_12 == 1'b0 ? sel_1_2625 :
              sel_11252);

  assign sel_11253 = 32'sd0;

  assign sel_11254 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11237, sel_11238, sel_11239, sel_11240, sel_11241,
       sel_11242, sel_11243, sel_11244, sel_11245, sel_11246, sel_11247,
       sel_11248, sel_11253, sel_11254, sel_1_2626) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2617_sel_1 = sel_11253;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2617_sel_1 = sel_1_2626;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2617_sel_1 = sel_11248;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2617_sel_1 = sel_11247;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2617_sel_1 = sel_11246;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2617_sel_1 = sel_11245;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2617_sel_1 = sel_11244;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2617_sel_1 = sel_11243;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2617_sel_1 = sel_11242;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2617_sel_1 = sel_11241;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2617_sel_1 = sel_11240;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2617_sel_1 = sel_11239;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2617_sel_1 = sel_11238;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2617_sel_1 = sel_11237;
        end
      default :
        begin
          p2617_sel_1 = sel_11254;
        end
    endcase
    sel_1_2627 = p2617_sel_1;
  end

  assign cont_bits_52 = cont_bits_29[sel_1_2627];

  assign sel_1_2628 = (tmp_17 == 1'b0 ? sel_1_2622 :
              cont_bits_52);

  assign sel_11255 = 1'b0;

  assign sel_11256 = 1'b0;

  always @(is_SPI_MNGR_36, sel_10924, sel_10925, sel_10926, sel_10927, sel_10928,
       sel_10929, sel_10930, sel_10931, sel_10932, sel_10933, sel_10934,
       sel_11255, sel_11256, sel_1_2553, sel_1_2628) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p356_sel_1 = sel_11255;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p356_sel_1 = sel_1_2628;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p356_sel_1 = sel_1_2553;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p356_sel_1 = sel_10934;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p356_sel_1 = sel_10933;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p356_sel_1 = sel_10932;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p356_sel_1 = sel_10931;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p356_sel_1 = sel_10930;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p356_sel_1 = sel_10929;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p356_sel_1 = sel_10928;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p356_sel_1 = sel_10927;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p356_sel_1 = sel_10926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p356_sel_1 = sel_10925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p356_sel_1 = sel_10924;
        end
      default :
        begin
          p356_sel_1 = sel_11256;
        end
    endcase
    sel_1_2629 = p356_sel_1;
  end

  assign sel_11257 = 1'b0;

  assign sel_11258 = 1'b0;

  assign sel_11259 = 1'b0;

  assign sel_11260 = 1'b0;

  assign sel_11261 = 1'b0;

  assign sel_11262 = 1'b0;

  assign sel_11263 = 1'b0;

  assign sel_11264 = 1'b0;

  assign sel_11265 = 1'b0;

  assign sel_11266 = 1'b0;

  assign sel_11267 = 1'b0;

  assign sel_11268 = 1'b0;

  assign s_780 = 1'b1;

  assign sel_2_1605 = (s_13 == 1'b0 ? sel_11268 :
              s_780);

  assign s_781 = 1'b1;

  assign sel_2_1606 = (s_14 == 1'b0 ? sel_2_1605 :
              s_781);

  assign s_782 = 1'b1;

  assign sel_2_1607 = (s_15 == 1'b0 ? sel_2_1606 :
              s_782);

  assign s_783 = 1'b1;

  assign sel_2_1608 = (s_16 == 1'b0 ? sel_2_1607 :
              s_783);

  assign s_784 = 1'b1;

  assign sel_2_1609 = (s_17 == 1'b0 ? sel_2_1608 :
              s_784);

  assign s_785 = 1'b1;

  assign sel_2_1610 = (s_18 == 1'b0 ? sel_2_1609 :
              s_785);

  assign s_786 = 1'b1;

  assign sel_2_1611 = (s_19 == 1'b0 ? sel_2_1610 :
              s_786);

  assign s_787 = 1'b1;

  assign sel_2_1612 = (s_20 == 1'b0 ? sel_2_1611 :
              s_787);

  assign sel_11269 = 1'b0;

  assign sel_11270 = 1'b0;

  assign sel_11271 = 1'b0;

  assign s_788 = 1'b1;

  assign sel_2_1613 = (tmp_3 == 1'b0 ? sel_11271 :
              s_788);

  assign s_789 = 1'b1;

  assign sel_2_1614 = (tmp_5 == 1'b0 ? sel_2_1613 :
              s_789);

  assign s_790 = 1'b1;

  assign sel_2_1615 = (tmp_7 == 1'b0 ? sel_2_1614 :
              s_790);

  assign s_791 = 1'b1;

  assign sel_2_1616 = (tmp_9 == 1'b0 ? sel_2_1615 :
              s_791);

  assign s_792 = 1'b1;

  assign sel_2_1617 = (tmp_11 == 1'b0 ? sel_2_1616 :
              s_792);

  assign s_793 = 1'b1;

  assign sel_2_1618 = (tmp_13 == 1'b0 ? sel_2_1617 :
              s_793);

  assign s_794 = 1'b1;

  assign sel_2_1619 = (tmp_15 == 1'b0 ? sel_2_1618 :
              s_794);

  assign s_795 = 1'b1;

  assign sel_2_1620 = (tmp_17 == 1'b0 ? sel_2_1619 :
              s_795);

  assign sel_2_1621 = (s_10 == 1'b0 ? sel_11270 :
              sel_2_1620);

  assign sel_2_1622 = (s_11 == 1'b0 ? sel_11269 :
              sel_2_1621);

  assign sel_11272 = 1'b0;

  assign sel_2_1623 = (s_12 == 1'b0 ? sel_2_1622 :
              sel_11272);

  assign sel_11273 = 1'b0;

  assign sel_11274 = 1'b0;

  always @(is_SPI_MNGR_36, sel_11257, sel_11258, sel_11259, sel_11260, sel_11261,
       sel_11262, sel_11263, sel_11264, sel_11265, sel_11266, sel_11267,
       sel_11273, sel_11274, sel_2_1612, sel_2_1623) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p341_sel_2 = sel_11273;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p341_sel_2 = sel_2_1623;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p341_sel_2 = sel_2_1612;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p341_sel_2 = sel_11267;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p341_sel_2 = sel_11266;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p341_sel_2 = sel_11265;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p341_sel_2 = sel_11264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p341_sel_2 = sel_11263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p341_sel_2 = sel_11262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p341_sel_2 = sel_11261;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p341_sel_2 = sel_11260;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p341_sel_2 = sel_11259;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p341_sel_2 = sel_11258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p341_sel_2 = sel_11257;
        end
      default :
        begin
          p341_sel_2 = sel_11274;
        end
    endcase
    sel_2_1624 = p341_sel_2;
  end

  assign sel_11275 = 1'b0;

  assign sel_11276 = 1'b0;

  assign sel_11277 = 1'b0;

  assign sel_11278 = 1'b0;

  assign sel_11279 = 1'b0;

  assign sel_11280 = 1'b0;

  assign sel_11281 = 1'b0;

  assign sel_11282 = 1'b0;

  assign sel_11283 = 1'b0;

  assign sel_11284 = 1'b0;

  assign sel_11285 = 1'b0;

  assign sel_11286 = 32'sd0;

  assign sel_11287 = 32'sd0;

  assign sel_11288 = 32'sd0;

  assign sel_11289 = 32'sd0;

  assign sel_11290 = 32'sd0;

  assign sel_11291 = 32'sd0;

  assign sel_11292 = 32'sd0;

  assign sel_11293 = 32'sd0;

  assign sel_11294 = 32'sd0;

  assign sel_11295 = 32'sd0;

  assign sel_11296 = 32'sd0;

  assign sel_11297 = 32'sd0;

  assign s_796 = 32'sd10;

  assign sel_1_2630 = (s_13 == 1'b0 ? sel_11297 :
              s_796);

  assign sel_11298 = 32'sd0;

  assign sel_1_2631 = (s_14 == 1'b0 ? sel_1_2630 :
              sel_11298);

  assign sel_11299 = 32'sd0;

  assign sel_1_2632 = (s_15 == 1'b0 ? sel_1_2631 :
              sel_11299);

  assign sel_11300 = 32'sd0;

  assign sel_1_2633 = (s_16 == 1'b0 ? sel_1_2632 :
              sel_11300);

  assign sel_11301 = 32'sd0;

  assign sel_1_2634 = (s_17 == 1'b0 ? sel_1_2633 :
              sel_11301);

  assign sel_11302 = 32'sd0;

  assign sel_1_2635 = (s_18 == 1'b0 ? sel_1_2634 :
              sel_11302);

  assign sel_11303 = 32'sd0;

  assign sel_1_2636 = (s_19 == 1'b0 ? sel_1_2635 :
              sel_11303);

  assign sel_11304 = 32'sd0;

  assign sel_1_2637 = (s_20 == 1'b0 ? sel_1_2636 :
              sel_11304);

  assign sel_11305 = 32'sd0;

  assign sel_11306 = 32'sd0;

  assign sel_11307 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11286, sel_11287, sel_11288, sel_11289, sel_11290,
       sel_11291, sel_11292, sel_11293, sel_11294, sel_11295, sel_11296,
       sel_11305, sel_11306, sel_11307, sel_1_2637) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2022_sel_1 = sel_11306;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2022_sel_1 = sel_11305;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2022_sel_1 = sel_1_2637;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2022_sel_1 = sel_11296;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2022_sel_1 = sel_11295;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2022_sel_1 = sel_11294;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2022_sel_1 = sel_11293;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2022_sel_1 = sel_11292;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2022_sel_1 = sel_11291;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2022_sel_1 = sel_11290;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2022_sel_1 = sel_11289;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2022_sel_1 = sel_11288;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2022_sel_1 = sel_11287;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2022_sel_1 = sel_11286;
        end
      default :
        begin
          p2022_sel_1 = sel_11307;
        end
    endcase
    sel_1_2638 = p2022_sel_1;
  end

  assign cont_bits_41_46 = cont_bits_41_12[sel_1_2638];

  assign sel_11308 = 32'sd0;

  assign sel_11309 = 32'sd0;

  assign sel_11310 = 32'sd0;

  assign sel_11311 = 32'sd0;

  assign sel_11312 = 32'sd0;

  assign sel_11313 = 32'sd0;

  assign sel_11314 = 32'sd0;

  assign sel_11315 = 32'sd0;

  assign sel_11316 = 32'sd0;

  assign sel_11317 = 32'sd0;

  assign sel_11318 = 32'sd0;

  assign sel_11319 = 32'sd0;

  assign s_797 = 32'sd10;

  assign sel_1_2639 = (s_14 == 1'b0 ? sel_11319 :
              s_797);

  assign sel_11320 = 32'sd0;

  assign sel_1_2640 = (s_15 == 1'b0 ? sel_1_2639 :
              sel_11320);

  assign sel_11321 = 32'sd0;

  assign sel_1_2641 = (s_16 == 1'b0 ? sel_1_2640 :
              sel_11321);

  assign sel_11322 = 32'sd0;

  assign sel_1_2642 = (s_17 == 1'b0 ? sel_1_2641 :
              sel_11322);

  assign sel_11323 = 32'sd0;

  assign sel_1_2643 = (s_18 == 1'b0 ? sel_1_2642 :
              sel_11323);

  assign sel_11324 = 32'sd0;

  assign sel_1_2644 = (s_19 == 1'b0 ? sel_1_2643 :
              sel_11324);

  assign sel_11325 = 32'sd0;

  assign sel_1_2645 = (s_20 == 1'b0 ? sel_1_2644 :
              sel_11325);

  assign sel_11326 = 32'sd0;

  assign sel_11327 = 32'sd0;

  assign sel_11328 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11308, sel_11309, sel_11310, sel_11311, sel_11312,
       sel_11313, sel_11314, sel_11315, sel_11316, sel_11317, sel_11318,
       sel_11326, sel_11327, sel_11328, sel_1_2645) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1206_sel_1 = sel_11327;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1206_sel_1 = sel_11326;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1206_sel_1 = sel_1_2645;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1206_sel_1 = sel_11318;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1206_sel_1 = sel_11317;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1206_sel_1 = sel_11316;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1206_sel_1 = sel_11315;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1206_sel_1 = sel_11314;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1206_sel_1 = sel_11313;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1206_sel_1 = sel_11312;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1206_sel_1 = sel_11311;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1206_sel_1 = sel_11310;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1206_sel_1 = sel_11309;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1206_sel_1 = sel_11308;
        end
      default :
        begin
          p1206_sel_1 = sel_11328;
        end
    endcase
    sel_1_2646 = p1206_sel_1;
  end

  assign cont_bits_42_46 = cont_bits_42_12[sel_1_2646];

  assign sel_1_2647 = (s_14 == 1'b0 ? cont_bits_41_46 :
              cont_bits_42_46);

  assign sel_11329 = 32'sd0;

  assign sel_11330 = 32'sd0;

  assign sel_11331 = 32'sd0;

  assign sel_11332 = 32'sd0;

  assign sel_11333 = 32'sd0;

  assign sel_11334 = 32'sd0;

  assign sel_11335 = 32'sd0;

  assign sel_11336 = 32'sd0;

  assign sel_11337 = 32'sd0;

  assign sel_11338 = 32'sd0;

  assign sel_11339 = 32'sd0;

  assign sel_11340 = 32'sd0;

  assign s_798 = 32'sd10;

  assign sel_1_2648 = (s_15 == 1'b0 ? sel_11340 :
              s_798);

  assign sel_11341 = 32'sd0;

  assign sel_1_2649 = (s_16 == 1'b0 ? sel_1_2648 :
              sel_11341);

  assign sel_11342 = 32'sd0;

  assign sel_1_2650 = (s_17 == 1'b0 ? sel_1_2649 :
              sel_11342);

  assign sel_11343 = 32'sd0;

  assign sel_1_2651 = (s_18 == 1'b0 ? sel_1_2650 :
              sel_11343);

  assign sel_11344 = 32'sd0;

  assign sel_1_2652 = (s_19 == 1'b0 ? sel_1_2651 :
              sel_11344);

  assign sel_11345 = 32'sd0;

  assign sel_1_2653 = (s_20 == 1'b0 ? sel_1_2652 :
              sel_11345);

  assign sel_11346 = 32'sd0;

  assign sel_11347 = 32'sd0;

  assign sel_11348 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11329, sel_11330, sel_11331, sel_11332, sel_11333,
       sel_11334, sel_11335, sel_11336, sel_11337, sel_11338, sel_11339,
       sel_11346, sel_11347, sel_11348, sel_1_2653) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1716_sel_1 = sel_11347;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1716_sel_1 = sel_11346;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1716_sel_1 = sel_1_2653;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1716_sel_1 = sel_11339;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1716_sel_1 = sel_11338;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1716_sel_1 = sel_11337;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1716_sel_1 = sel_11336;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1716_sel_1 = sel_11335;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1716_sel_1 = sel_11334;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1716_sel_1 = sel_11333;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1716_sel_1 = sel_11332;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1716_sel_1 = sel_11331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1716_sel_1 = sel_11330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1716_sel_1 = sel_11329;
        end
      default :
        begin
          p1716_sel_1 = sel_11348;
        end
    endcase
    sel_1_2654 = p1716_sel_1;
  end

  assign cont_bits_32_46 = cont_bits_32_12[sel_1_2654];

  assign sel_1_2655 = (s_15 == 1'b0 ? sel_1_2647 :
              cont_bits_32_46);

  assign sel_11349 = 32'sd0;

  assign sel_11350 = 32'sd0;

  assign sel_11351 = 32'sd0;

  assign sel_11352 = 32'sd0;

  assign sel_11353 = 32'sd0;

  assign sel_11354 = 32'sd0;

  assign sel_11355 = 32'sd0;

  assign sel_11356 = 32'sd0;

  assign sel_11357 = 32'sd0;

  assign sel_11358 = 32'sd0;

  assign sel_11359 = 32'sd0;

  assign sel_11360 = 32'sd0;

  assign s_799 = 32'sd10;

  assign sel_1_2656 = (s_16 == 1'b0 ? sel_11360 :
              s_799);

  assign sel_11361 = 32'sd0;

  assign sel_1_2657 = (s_17 == 1'b0 ? sel_1_2656 :
              sel_11361);

  assign sel_11362 = 32'sd0;

  assign sel_1_2658 = (s_18 == 1'b0 ? sel_1_2657 :
              sel_11362);

  assign sel_11363 = 32'sd0;

  assign sel_1_2659 = (s_19 == 1'b0 ? sel_1_2658 :
              sel_11363);

  assign sel_11364 = 32'sd0;

  assign sel_1_2660 = (s_20 == 1'b0 ? sel_1_2659 :
              sel_11364);

  assign sel_11365 = 32'sd0;

  assign sel_11366 = 32'sd0;

  assign sel_11367 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11349, sel_11350, sel_11351, sel_11352, sel_11353,
       sel_11354, sel_11355, sel_11356, sel_11357, sel_11358, sel_11359,
       sel_11365, sel_11366, sel_11367, sel_1_2660) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p985_sel_1 = sel_11366;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p985_sel_1 = sel_11365;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p985_sel_1 = sel_1_2660;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p985_sel_1 = sel_11359;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p985_sel_1 = sel_11358;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p985_sel_1 = sel_11357;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p985_sel_1 = sel_11356;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p985_sel_1 = sel_11355;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p985_sel_1 = sel_11354;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p985_sel_1 = sel_11353;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p985_sel_1 = sel_11352;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p985_sel_1 = sel_11351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p985_sel_1 = sel_11350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p985_sel_1 = sel_11349;
        end
      default :
        begin
          p985_sel_1 = sel_11367;
        end
    endcase
    sel_1_2661 = p985_sel_1;
  end

  assign cont_bits_31_46 = cont_bits_31_12[sel_1_2661];

  assign sel_1_2662 = (s_16 == 1'b0 ? sel_1_2655 :
              cont_bits_31_46);

  assign sel_11368 = 32'sd0;

  assign sel_11369 = 32'sd0;

  assign sel_11370 = 32'sd0;

  assign sel_11371 = 32'sd0;

  assign sel_11372 = 32'sd0;

  assign sel_11373 = 32'sd0;

  assign sel_11374 = 32'sd0;

  assign sel_11375 = 32'sd0;

  assign sel_11376 = 32'sd0;

  assign sel_11377 = 32'sd0;

  assign sel_11378 = 32'sd0;

  assign sel_11379 = 32'sd0;

  assign s_800 = 32'sd10;

  assign sel_1_2663 = (s_17 == 1'b0 ? sel_11379 :
              s_800);

  assign sel_11380 = 32'sd0;

  assign sel_1_2664 = (s_18 == 1'b0 ? sel_1_2663 :
              sel_11380);

  assign sel_11381 = 32'sd0;

  assign sel_1_2665 = (s_19 == 1'b0 ? sel_1_2664 :
              sel_11381);

  assign sel_11382 = 32'sd0;

  assign sel_1_2666 = (s_20 == 1'b0 ? sel_1_2665 :
              sel_11382);

  assign sel_11383 = 32'sd0;

  assign sel_11384 = 32'sd0;

  assign sel_11385 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11368, sel_11369, sel_11370, sel_11371, sel_11372,
       sel_11373, sel_11374, sel_11375, sel_11376, sel_11377, sel_11378,
       sel_11383, sel_11384, sel_11385, sel_1_2666) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1801_sel_1 = sel_11384;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1801_sel_1 = sel_11383;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1801_sel_1 = sel_1_2666;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1801_sel_1 = sel_11378;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1801_sel_1 = sel_11377;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1801_sel_1 = sel_11376;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1801_sel_1 = sel_11375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1801_sel_1 = sel_11374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1801_sel_1 = sel_11373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1801_sel_1 = sel_11372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1801_sel_1 = sel_11371;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1801_sel_1 = sel_11370;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1801_sel_1 = sel_11369;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1801_sel_1 = sel_11368;
        end
      default :
        begin
          p1801_sel_1 = sel_11385;
        end
    endcase
    sel_1_2667 = p1801_sel_1;
  end

  assign cont_bits_22_46 = cont_bits_22_12[sel_1_2667];

  assign sel_1_2668 = (s_17 == 1'b0 ? sel_1_2662 :
              cont_bits_22_46);

  assign sel_11386 = 32'sd0;

  assign sel_11387 = 32'sd0;

  assign sel_11388 = 32'sd0;

  assign sel_11389 = 32'sd0;

  assign sel_11390 = 32'sd0;

  assign sel_11391 = 32'sd0;

  assign sel_11392 = 32'sd0;

  assign sel_11393 = 32'sd0;

  assign sel_11394 = 32'sd0;

  assign sel_11395 = 32'sd0;

  assign sel_11396 = 32'sd0;

  assign sel_11397 = 32'sd0;

  assign s_801 = 32'sd10;

  assign sel_1_2669 = (s_18 == 1'b0 ? sel_11397 :
              s_801);

  assign sel_11398 = 32'sd0;

  assign sel_1_2670 = (s_19 == 1'b0 ? sel_1_2669 :
              sel_11398);

  assign sel_11399 = 32'sd0;

  assign sel_1_2671 = (s_20 == 1'b0 ? sel_1_2670 :
              sel_11399);

  assign sel_11400 = 32'sd0;

  assign sel_11401 = 32'sd0;

  assign sel_11402 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11386, sel_11387, sel_11388, sel_11389, sel_11390,
       sel_11391, sel_11392, sel_11393, sel_11394, sel_11395, sel_11396,
       sel_11400, sel_11401, sel_11402, sel_1_2671) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2583_sel_1 = sel_11401;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2583_sel_1 = sel_11400;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2583_sel_1 = sel_1_2671;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2583_sel_1 = sel_11396;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2583_sel_1 = sel_11395;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2583_sel_1 = sel_11394;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2583_sel_1 = sel_11393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2583_sel_1 = sel_11392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2583_sel_1 = sel_11391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2583_sel_1 = sel_11390;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2583_sel_1 = sel_11389;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2583_sel_1 = sel_11388;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2583_sel_1 = sel_11387;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2583_sel_1 = sel_11386;
        end
      default :
        begin
          p2583_sel_1 = sel_11402;
        end
    endcase
    sel_1_2672 = p2583_sel_1;
  end

  assign cont_bits_21_46 = cont_bits_21_12[sel_1_2672];

  assign sel_1_2673 = (s_18 == 1'b0 ? sel_1_2668 :
              cont_bits_21_46);

  assign sel_11403 = 32'sd0;

  assign sel_11404 = 32'sd0;

  assign sel_11405 = 32'sd0;

  assign sel_11406 = 32'sd0;

  assign sel_11407 = 32'sd0;

  assign sel_11408 = 32'sd0;

  assign sel_11409 = 32'sd0;

  assign sel_11410 = 32'sd0;

  assign sel_11411 = 32'sd0;

  assign sel_11412 = 32'sd0;

  assign sel_11413 = 32'sd0;

  assign sel_11414 = 32'sd0;

  assign s_802 = 32'sd10;

  assign sel_1_2674 = (s_19 == 1'b0 ? sel_11414 :
              s_802);

  assign sel_11415 = 32'sd0;

  assign sel_1_2675 = (s_20 == 1'b0 ? sel_1_2674 :
              sel_11415);

  assign sel_11416 = 32'sd0;

  assign sel_11417 = 32'sd0;

  assign sel_11418 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11403, sel_11404, sel_11405, sel_11406, sel_11407,
       sel_11408, sel_11409, sel_11410, sel_11411, sel_11412, sel_11413,
       sel_11416, sel_11417, sel_11418, sel_1_2675) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1393_sel_1 = sel_11417;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1393_sel_1 = sel_11416;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1393_sel_1 = sel_1_2675;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1393_sel_1 = sel_11413;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1393_sel_1 = sel_11412;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1393_sel_1 = sel_11411;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1393_sel_1 = sel_11410;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1393_sel_1 = sel_11409;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1393_sel_1 = sel_11408;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1393_sel_1 = sel_11407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1393_sel_1 = sel_11406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1393_sel_1 = sel_11405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1393_sel_1 = sel_11404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1393_sel_1 = sel_11403;
        end
      default :
        begin
          p1393_sel_1 = sel_11418;
        end
    endcase
    sel_1_2676 = p1393_sel_1;
  end

  assign cont_bits_12_46 = cont_bits_12_12[sel_1_2676];

  assign sel_1_2677 = (s_19 == 1'b0 ? sel_1_2673 :
              cont_bits_12_46);

  assign sel_11419 = 32'sd0;

  assign sel_11420 = 32'sd0;

  assign sel_11421 = 32'sd0;

  assign sel_11422 = 32'sd0;

  assign sel_11423 = 32'sd0;

  assign sel_11424 = 32'sd0;

  assign sel_11425 = 32'sd0;

  assign sel_11426 = 32'sd0;

  assign sel_11427 = 32'sd0;

  assign sel_11428 = 32'sd0;

  assign sel_11429 = 32'sd0;

  assign sel_11430 = 32'sd0;

  assign s_803 = 32'sd10;

  assign sel_1_2678 = (s_20 == 1'b0 ? sel_11430 :
              s_803);

  assign sel_11431 = 32'sd0;

  assign sel_11432 = 32'sd0;

  assign sel_11433 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11419, sel_11420, sel_11421, sel_11422, sel_11423,
       sel_11424, sel_11425, sel_11426, sel_11427, sel_11428, sel_11429,
       sel_11431, sel_11432, sel_11433, sel_1_2678) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2328_sel_1 = sel_11432;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2328_sel_1 = sel_11431;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2328_sel_1 = sel_1_2678;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2328_sel_1 = sel_11429;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2328_sel_1 = sel_11428;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2328_sel_1 = sel_11427;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2328_sel_1 = sel_11426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2328_sel_1 = sel_11425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2328_sel_1 = sel_11424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2328_sel_1 = sel_11423;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2328_sel_1 = sel_11422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2328_sel_1 = sel_11421;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2328_sel_1 = sel_11420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2328_sel_1 = sel_11419;
        end
      default :
        begin
          p2328_sel_1 = sel_11433;
        end
    endcase
    sel_1_2679 = p2328_sel_1;
  end

  assign cont_bits_53 = cont_bits_13[sel_1_2679];

  assign sel_1_2680 = (s_20 == 1'b0 ? sel_1_2677 :
              cont_bits_53);

  assign sel_11434 = 32'sd0;

  assign sel_11435 = 32'sd0;

  assign sel_11436 = 32'sd0;

  assign sel_11437 = 32'sd0;

  assign sel_11438 = 32'sd0;

  assign sel_11439 = 32'sd0;

  assign sel_11440 = 32'sd0;

  assign sel_11441 = 32'sd0;

  assign sel_11442 = 32'sd0;

  assign sel_11443 = 32'sd0;

  assign sel_11444 = 32'sd0;

  assign sel_11445 = 32'sd0;

  assign sel_11446 = 32'sd0;

  assign sel_11447 = 32'sd0;

  assign sel_11448 = 32'sd0;

  assign s_804 = 32'sd10;

  assign sel_1_2681 = (tmp_3 == 1'b0 ? sel_11448 :
              s_804);

  assign sel_11449 = 32'sd0;

  assign sel_1_2682 = (tmp_5 == 1'b0 ? sel_1_2681 :
              sel_11449);

  assign sel_11450 = 32'sd0;

  assign sel_1_2683 = (tmp_7 == 1'b0 ? sel_1_2682 :
              sel_11450);

  assign sel_11451 = 32'sd0;

  assign sel_1_2684 = (tmp_9 == 1'b0 ? sel_1_2683 :
              sel_11451);

  assign sel_11452 = 32'sd0;

  assign sel_1_2685 = (tmp_11 == 1'b0 ? sel_1_2684 :
              sel_11452);

  assign sel_11453 = 32'sd0;

  assign sel_1_2686 = (tmp_13 == 1'b0 ? sel_1_2685 :
              sel_11453);

  assign sel_11454 = 32'sd0;

  assign sel_1_2687 = (tmp_15 == 1'b0 ? sel_1_2686 :
              sel_11454);

  assign sel_11455 = 32'sd0;

  assign sel_1_2688 = (tmp_17 == 1'b0 ? sel_1_2687 :
              sel_11455);

  assign sel_1_2689 = (s_10 == 1'b0 ? sel_11447 :
              sel_1_2688);

  assign sel_1_2690 = (s_11 == 1'b0 ? sel_11446 :
              sel_1_2689);

  assign sel_11456 = 32'sd0;

  assign sel_1_2691 = (s_12 == 1'b0 ? sel_1_2690 :
              sel_11456);

  assign sel_11457 = 32'sd0;

  assign sel_11458 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11434, sel_11435, sel_11436, sel_11437, sel_11438,
       sel_11439, sel_11440, sel_11441, sel_11442, sel_11443, sel_11444,
       sel_11445, sel_11457, sel_11458, sel_1_2691) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3229_sel_1 = sel_11457;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3229_sel_1 = sel_1_2691;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3229_sel_1 = sel_11445;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3229_sel_1 = sel_11444;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3229_sel_1 = sel_11443;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3229_sel_1 = sel_11442;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3229_sel_1 = sel_11441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3229_sel_1 = sel_11440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3229_sel_1 = sel_11439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3229_sel_1 = sel_11438;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3229_sel_1 = sel_11437;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3229_sel_1 = sel_11436;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3229_sel_1 = sel_11435;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3229_sel_1 = sel_11434;
        end
      default :
        begin
          p3229_sel_1 = sel_11458;
        end
    endcase
    sel_1_2692 = p3229_sel_1;
  end

  assign cont_bits_41_47 = cont_bits_41_26[sel_1_2692];

  assign sel_11459 = 32'sd0;

  assign sel_11460 = 32'sd0;

  assign sel_11461 = 32'sd0;

  assign sel_11462 = 32'sd0;

  assign sel_11463 = 32'sd0;

  assign sel_11464 = 32'sd0;

  assign sel_11465 = 32'sd0;

  assign sel_11466 = 32'sd0;

  assign sel_11467 = 32'sd0;

  assign sel_11468 = 32'sd0;

  assign sel_11469 = 32'sd0;

  assign sel_11470 = 32'sd0;

  assign sel_11471 = 32'sd0;

  assign sel_11472 = 32'sd0;

  assign sel_11473 = 32'sd0;

  assign s_805 = 32'sd10;

  assign sel_1_2693 = (tmp_5 == 1'b0 ? sel_11473 :
              s_805);

  assign sel_11474 = 32'sd0;

  assign sel_1_2694 = (tmp_7 == 1'b0 ? sel_1_2693 :
              sel_11474);

  assign sel_11475 = 32'sd0;

  assign sel_1_2695 = (tmp_9 == 1'b0 ? sel_1_2694 :
              sel_11475);

  assign sel_11476 = 32'sd0;

  assign sel_1_2696 = (tmp_11 == 1'b0 ? sel_1_2695 :
              sel_11476);

  assign sel_11477 = 32'sd0;

  assign sel_1_2697 = (tmp_13 == 1'b0 ? sel_1_2696 :
              sel_11477);

  assign sel_11478 = 32'sd0;

  assign sel_1_2698 = (tmp_15 == 1'b0 ? sel_1_2697 :
              sel_11478);

  assign sel_11479 = 32'sd0;

  assign sel_1_2699 = (tmp_17 == 1'b0 ? sel_1_2698 :
              sel_11479);

  assign sel_1_2700 = (s_10 == 1'b0 ? sel_11472 :
              sel_1_2699);

  assign sel_1_2701 = (s_11 == 1'b0 ? sel_11471 :
              sel_1_2700);

  assign sel_11480 = 32'sd0;

  assign sel_1_2702 = (s_12 == 1'b0 ? sel_1_2701 :
              sel_11480);

  assign sel_11481 = 32'sd0;

  assign sel_11482 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11459, sel_11460, sel_11461, sel_11462, sel_11463,
       sel_11464, sel_11465, sel_11466, sel_11467, sel_11468, sel_11469,
       sel_11470, sel_11481, sel_11482, sel_1_2702) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2821_sel_1 = sel_11481;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2821_sel_1 = sel_1_2702;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2821_sel_1 = sel_11470;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2821_sel_1 = sel_11469;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2821_sel_1 = sel_11468;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2821_sel_1 = sel_11467;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2821_sel_1 = sel_11466;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2821_sel_1 = sel_11465;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2821_sel_1 = sel_11464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2821_sel_1 = sel_11463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2821_sel_1 = sel_11462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2821_sel_1 = sel_11461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2821_sel_1 = sel_11460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2821_sel_1 = sel_11459;
        end
      default :
        begin
          p2821_sel_1 = sel_11482;
        end
    endcase
    sel_1_2703 = p2821_sel_1;
  end

  assign cont_bits_42_47 = cont_bits_42_26[sel_1_2703];

  assign sel_1_2704 = (tmp_5 == 1'b0 ? cont_bits_41_47 :
              cont_bits_42_47);

  assign sel_11483 = 32'sd0;

  assign sel_11484 = 32'sd0;

  assign sel_11485 = 32'sd0;

  assign sel_11486 = 32'sd0;

  assign sel_11487 = 32'sd0;

  assign sel_11488 = 32'sd0;

  assign sel_11489 = 32'sd0;

  assign sel_11490 = 32'sd0;

  assign sel_11491 = 32'sd0;

  assign sel_11492 = 32'sd0;

  assign sel_11493 = 32'sd0;

  assign sel_11494 = 32'sd0;

  assign sel_11495 = 32'sd0;

  assign sel_11496 = 32'sd0;

  assign sel_11497 = 32'sd0;

  assign s_806 = 32'sd10;

  assign sel_1_2705 = (tmp_7 == 1'b0 ? sel_11497 :
              s_806);

  assign sel_11498 = 32'sd0;

  assign sel_1_2706 = (tmp_9 == 1'b0 ? sel_1_2705 :
              sel_11498);

  assign sel_11499 = 32'sd0;

  assign sel_1_2707 = (tmp_11 == 1'b0 ? sel_1_2706 :
              sel_11499);

  assign sel_11500 = 32'sd0;

  assign sel_1_2708 = (tmp_13 == 1'b0 ? sel_1_2707 :
              sel_11500);

  assign sel_11501 = 32'sd0;

  assign sel_1_2709 = (tmp_15 == 1'b0 ? sel_1_2708 :
              sel_11501);

  assign sel_11502 = 32'sd0;

  assign sel_1_2710 = (tmp_17 == 1'b0 ? sel_1_2709 :
              sel_11502);

  assign sel_1_2711 = (s_10 == 1'b0 ? sel_11496 :
              sel_1_2710);

  assign sel_1_2712 = (s_11 == 1'b0 ? sel_11495 :
              sel_1_2711);

  assign sel_11503 = 32'sd0;

  assign sel_1_2713 = (s_12 == 1'b0 ? sel_1_2712 :
              sel_11503);

  assign sel_11504 = 32'sd0;

  assign sel_11505 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11483, sel_11484, sel_11485, sel_11486, sel_11487,
       sel_11488, sel_11489, sel_11490, sel_11491, sel_11492, sel_11493,
       sel_11494, sel_11504, sel_11505, sel_1_2713) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3552_sel_1 = sel_11504;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3552_sel_1 = sel_1_2713;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3552_sel_1 = sel_11494;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3552_sel_1 = sel_11493;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3552_sel_1 = sel_11492;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3552_sel_1 = sel_11491;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3552_sel_1 = sel_11490;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3552_sel_1 = sel_11489;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3552_sel_1 = sel_11488;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3552_sel_1 = sel_11487;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3552_sel_1 = sel_11486;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3552_sel_1 = sel_11485;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3552_sel_1 = sel_11484;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3552_sel_1 = sel_11483;
        end
      default :
        begin
          p3552_sel_1 = sel_11505;
        end
    endcase
    sel_1_2714 = p3552_sel_1;
  end

  assign cont_bits_32_47 = cont_bits_32_26[sel_1_2714];

  assign sel_1_2715 = (tmp_7 == 1'b0 ? sel_1_2704 :
              cont_bits_32_47);

  assign sel_11506 = 32'sd0;

  assign sel_11507 = 32'sd0;

  assign sel_11508 = 32'sd0;

  assign sel_11509 = 32'sd0;

  assign sel_11510 = 32'sd0;

  assign sel_11511 = 32'sd0;

  assign sel_11512 = 32'sd0;

  assign sel_11513 = 32'sd0;

  assign sel_11514 = 32'sd0;

  assign sel_11515 = 32'sd0;

  assign sel_11516 = 32'sd0;

  assign sel_11517 = 32'sd0;

  assign sel_11518 = 32'sd0;

  assign sel_11519 = 32'sd0;

  assign sel_11520 = 32'sd0;

  assign s_807 = 32'sd10;

  assign sel_1_2716 = (tmp_9 == 1'b0 ? sel_11520 :
              s_807);

  assign sel_11521 = 32'sd0;

  assign sel_1_2717 = (tmp_11 == 1'b0 ? sel_1_2716 :
              sel_11521);

  assign sel_11522 = 32'sd0;

  assign sel_1_2718 = (tmp_13 == 1'b0 ? sel_1_2717 :
              sel_11522);

  assign sel_11523 = 32'sd0;

  assign sel_1_2719 = (tmp_15 == 1'b0 ? sel_1_2718 :
              sel_11523);

  assign sel_11524 = 32'sd0;

  assign sel_1_2720 = (tmp_17 == 1'b0 ? sel_1_2719 :
              sel_11524);

  assign sel_1_2721 = (s_10 == 1'b0 ? sel_11519 :
              sel_1_2720);

  assign sel_1_2722 = (s_11 == 1'b0 ? sel_11518 :
              sel_1_2721);

  assign sel_11525 = 32'sd0;

  assign sel_1_2723 = (s_12 == 1'b0 ? sel_1_2722 :
              sel_11525);

  assign sel_11526 = 32'sd0;

  assign sel_11527 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11506, sel_11507, sel_11508, sel_11509, sel_11510,
       sel_11511, sel_11512, sel_11513, sel_11514, sel_11515, sel_11516,
       sel_11517, sel_11526, sel_11527, sel_1_2723) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4130_sel_1 = sel_11526;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4130_sel_1 = sel_1_2723;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4130_sel_1 = sel_11517;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4130_sel_1 = sel_11516;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4130_sel_1 = sel_11515;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4130_sel_1 = sel_11514;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4130_sel_1 = sel_11513;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4130_sel_1 = sel_11512;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4130_sel_1 = sel_11511;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4130_sel_1 = sel_11510;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4130_sel_1 = sel_11509;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4130_sel_1 = sel_11508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4130_sel_1 = sel_11507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4130_sel_1 = sel_11506;
        end
      default :
        begin
          p4130_sel_1 = sel_11527;
        end
    endcase
    sel_1_2724 = p4130_sel_1;
  end

  assign cont_bits_31_47 = cont_bits_31_26[sel_1_2724];

  assign sel_1_2725 = (tmp_9 == 1'b0 ? sel_1_2715 :
              cont_bits_31_47);

  assign sel_11528 = 32'sd0;

  assign sel_11529 = 32'sd0;

  assign sel_11530 = 32'sd0;

  assign sel_11531 = 32'sd0;

  assign sel_11532 = 32'sd0;

  assign sel_11533 = 32'sd0;

  assign sel_11534 = 32'sd0;

  assign sel_11535 = 32'sd0;

  assign sel_11536 = 32'sd0;

  assign sel_11537 = 32'sd0;

  assign sel_11538 = 32'sd0;

  assign sel_11539 = 32'sd0;

  assign sel_11540 = 32'sd0;

  assign sel_11541 = 32'sd0;

  assign sel_11542 = 32'sd0;

  assign s_808 = 32'sd10;

  assign sel_1_2726 = (tmp_11 == 1'b0 ? sel_11542 :
              s_808);

  assign sel_11543 = 32'sd0;

  assign sel_1_2727 = (tmp_13 == 1'b0 ? sel_1_2726 :
              sel_11543);

  assign sel_11544 = 32'sd0;

  assign sel_1_2728 = (tmp_15 == 1'b0 ? sel_1_2727 :
              sel_11544);

  assign sel_11545 = 32'sd0;

  assign sel_1_2729 = (tmp_17 == 1'b0 ? sel_1_2728 :
              sel_11545);

  assign sel_1_2730 = (s_10 == 1'b0 ? sel_11541 :
              sel_1_2729);

  assign sel_1_2731 = (s_11 == 1'b0 ? sel_11540 :
              sel_1_2730);

  assign sel_11546 = 32'sd0;

  assign sel_1_2732 = (s_12 == 1'b0 ? sel_1_2731 :
              sel_11546);

  assign sel_11547 = 32'sd0;

  assign sel_11548 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11528, sel_11529, sel_11530, sel_11531, sel_11532,
       sel_11533, sel_11534, sel_11535, sel_11536, sel_11537, sel_11538,
       sel_11539, sel_11547, sel_11548, sel_1_2732) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3943_sel_1 = sel_11547;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3943_sel_1 = sel_1_2732;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3943_sel_1 = sel_11539;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3943_sel_1 = sel_11538;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3943_sel_1 = sel_11537;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3943_sel_1 = sel_11536;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3943_sel_1 = sel_11535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3943_sel_1 = sel_11534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3943_sel_1 = sel_11533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3943_sel_1 = sel_11532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3943_sel_1 = sel_11531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3943_sel_1 = sel_11530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3943_sel_1 = sel_11529;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3943_sel_1 = sel_11528;
        end
      default :
        begin
          p3943_sel_1 = sel_11548;
        end
    endcase
    sel_1_2733 = p3943_sel_1;
  end

  assign cont_bits_22_47 = cont_bits_22_26[sel_1_2733];

  assign sel_1_2734 = (tmp_11 == 1'b0 ? sel_1_2725 :
              cont_bits_22_47);

  assign sel_11549 = 32'sd0;

  assign sel_11550 = 32'sd0;

  assign sel_11551 = 32'sd0;

  assign sel_11552 = 32'sd0;

  assign sel_11553 = 32'sd0;

  assign sel_11554 = 32'sd0;

  assign sel_11555 = 32'sd0;

  assign sel_11556 = 32'sd0;

  assign sel_11557 = 32'sd0;

  assign sel_11558 = 32'sd0;

  assign sel_11559 = 32'sd0;

  assign sel_11560 = 32'sd0;

  assign sel_11561 = 32'sd0;

  assign sel_11562 = 32'sd0;

  assign sel_11563 = 32'sd0;

  assign s_809 = 32'sd10;

  assign sel_1_2735 = (tmp_13 == 1'b0 ? sel_11563 :
              s_809);

  assign sel_11564 = 32'sd0;

  assign sel_1_2736 = (tmp_15 == 1'b0 ? sel_1_2735 :
              sel_11564);

  assign sel_11565 = 32'sd0;

  assign sel_1_2737 = (tmp_17 == 1'b0 ? sel_1_2736 :
              sel_11565);

  assign sel_1_2738 = (s_10 == 1'b0 ? sel_11562 :
              sel_1_2737);

  assign sel_1_2739 = (s_11 == 1'b0 ? sel_11561 :
              sel_1_2738);

  assign sel_11566 = 32'sd0;

  assign sel_1_2740 = (s_12 == 1'b0 ? sel_1_2739 :
              sel_11566);

  assign sel_11567 = 32'sd0;

  assign sel_11568 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11549, sel_11550, sel_11551, sel_11552, sel_11553,
       sel_11554, sel_11555, sel_11556, sel_11557, sel_11558, sel_11559,
       sel_11560, sel_11567, sel_11568, sel_1_2740) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3025_sel_1 = sel_11567;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3025_sel_1 = sel_1_2740;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3025_sel_1 = sel_11560;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3025_sel_1 = sel_11559;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3025_sel_1 = sel_11558;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3025_sel_1 = sel_11557;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3025_sel_1 = sel_11556;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3025_sel_1 = sel_11555;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3025_sel_1 = sel_11554;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3025_sel_1 = sel_11553;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3025_sel_1 = sel_11552;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3025_sel_1 = sel_11551;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3025_sel_1 = sel_11550;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3025_sel_1 = sel_11549;
        end
      default :
        begin
          p3025_sel_1 = sel_11568;
        end
    endcase
    sel_1_2741 = p3025_sel_1;
  end

  assign cont_bits_21_47 = cont_bits_21_26[sel_1_2741];

  assign sel_1_2742 = (tmp_13 == 1'b0 ? sel_1_2734 :
              cont_bits_21_47);

  assign sel_11569 = 32'sd0;

  assign sel_11570 = 32'sd0;

  assign sel_11571 = 32'sd0;

  assign sel_11572 = 32'sd0;

  assign sel_11573 = 32'sd0;

  assign sel_11574 = 32'sd0;

  assign sel_11575 = 32'sd0;

  assign sel_11576 = 32'sd0;

  assign sel_11577 = 32'sd0;

  assign sel_11578 = 32'sd0;

  assign sel_11579 = 32'sd0;

  assign sel_11580 = 32'sd0;

  assign sel_11581 = 32'sd0;

  assign sel_11582 = 32'sd0;

  assign sel_11583 = 32'sd0;

  assign s_810 = 32'sd10;

  assign sel_1_2743 = (tmp_15 == 1'b0 ? sel_11583 :
              s_810);

  assign sel_11584 = 32'sd0;

  assign sel_1_2744 = (tmp_17 == 1'b0 ? sel_1_2743 :
              sel_11584);

  assign sel_1_2745 = (s_10 == 1'b0 ? sel_11582 :
              sel_1_2744);

  assign sel_1_2746 = (s_11 == 1'b0 ? sel_11581 :
              sel_1_2745);

  assign sel_11585 = 32'sd0;

  assign sel_1_2747 = (s_12 == 1'b0 ? sel_1_2746 :
              sel_11585);

  assign sel_11586 = 32'sd0;

  assign sel_11587 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11569, sel_11570, sel_11571, sel_11572, sel_11573,
       sel_11574, sel_11575, sel_11576, sel_11577, sel_11578, sel_11579,
       sel_11580, sel_11586, sel_11587, sel_1_2747) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3620_sel_1 = sel_11586;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3620_sel_1 = sel_1_2747;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3620_sel_1 = sel_11580;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3620_sel_1 = sel_11579;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3620_sel_1 = sel_11578;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3620_sel_1 = sel_11577;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3620_sel_1 = sel_11576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3620_sel_1 = sel_11575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3620_sel_1 = sel_11574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3620_sel_1 = sel_11573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3620_sel_1 = sel_11572;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3620_sel_1 = sel_11571;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3620_sel_1 = sel_11570;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3620_sel_1 = sel_11569;
        end
      default :
        begin
          p3620_sel_1 = sel_11587;
        end
    endcase
    sel_1_2748 = p3620_sel_1;
  end

  assign cont_bits_12_47 = cont_bits_12_26[sel_1_2748];

  assign sel_1_2749 = (tmp_15 == 1'b0 ? sel_1_2742 :
              cont_bits_12_47);

  assign sel_11588 = 32'sd0;

  assign sel_11589 = 32'sd0;

  assign sel_11590 = 32'sd0;

  assign sel_11591 = 32'sd0;

  assign sel_11592 = 32'sd0;

  assign sel_11593 = 32'sd0;

  assign sel_11594 = 32'sd0;

  assign sel_11595 = 32'sd0;

  assign sel_11596 = 32'sd0;

  assign sel_11597 = 32'sd0;

  assign sel_11598 = 32'sd0;

  assign sel_11599 = 32'sd0;

  assign sel_11600 = 32'sd0;

  assign sel_11601 = 32'sd0;

  assign sel_11602 = 32'sd0;

  assign s_811 = 32'sd10;

  assign sel_1_2750 = (tmp_17 == 1'b0 ? sel_11602 :
              s_811);

  assign sel_1_2751 = (s_10 == 1'b0 ? sel_11601 :
              sel_1_2750);

  assign sel_1_2752 = (s_11 == 1'b0 ? sel_11600 :
              sel_1_2751);

  assign sel_11603 = 32'sd0;

  assign sel_1_2753 = (s_12 == 1'b0 ? sel_1_2752 :
              sel_11603);

  assign sel_11604 = 32'sd0;

  assign sel_11605 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11588, sel_11589, sel_11590, sel_11591, sel_11592,
       sel_11593, sel_11594, sel_11595, sel_11596, sel_11597, sel_11598,
       sel_11599, sel_11604, sel_11605, sel_1_2753) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2651_sel_1 = sel_11604;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2651_sel_1 = sel_1_2753;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2651_sel_1 = sel_11599;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2651_sel_1 = sel_11598;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2651_sel_1 = sel_11597;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2651_sel_1 = sel_11596;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2651_sel_1 = sel_11595;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2651_sel_1 = sel_11594;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2651_sel_1 = sel_11593;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2651_sel_1 = sel_11592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2651_sel_1 = sel_11591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2651_sel_1 = sel_11590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2651_sel_1 = sel_11589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2651_sel_1 = sel_11588;
        end
      default :
        begin
          p2651_sel_1 = sel_11605;
        end
    endcase
    sel_1_2754 = p2651_sel_1;
  end

  assign cont_bits_54 = cont_bits_29[sel_1_2754];

  assign sel_1_2755 = (tmp_17 == 1'b0 ? sel_1_2749 :
              cont_bits_54);

  assign sel_11606 = 1'b0;

  assign sel_11607 = 1'b0;

  always @(is_SPI_MNGR_36, sel_11275, sel_11276, sel_11277, sel_11278, sel_11279,
       sel_11280, sel_11281, sel_11282, sel_11283, sel_11284, sel_11285,
       sel_11606, sel_11607, sel_1_2680, sel_1_2755) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p325_sel_1 = sel_11606;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p325_sel_1 = sel_1_2755;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p325_sel_1 = sel_1_2680;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p325_sel_1 = sel_11285;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p325_sel_1 = sel_11284;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p325_sel_1 = sel_11283;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p325_sel_1 = sel_11282;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p325_sel_1 = sel_11281;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p325_sel_1 = sel_11280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p325_sel_1 = sel_11279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p325_sel_1 = sel_11278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p325_sel_1 = sel_11277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p325_sel_1 = sel_11276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p325_sel_1 = sel_11275;
        end
      default :
        begin
          p325_sel_1 = sel_11607;
        end
    endcase
    sel_1_2756 = p325_sel_1;
  end

  assign sel_11608 = 1'b0;

  assign sel_11609 = 1'b0;

  assign sel_11610 = 1'b0;

  assign sel_11611 = 1'b0;

  assign sel_11612 = 1'b0;

  assign sel_11613 = 1'b0;

  assign sel_11614 = 1'b0;

  assign sel_11615 = 1'b0;

  assign sel_11616 = 1'b0;

  assign sel_11617 = 1'b0;

  assign sel_11618 = 1'b0;

  assign sel_11619 = 1'b0;

  assign s_812 = 1'b1;

  assign sel_2_1625 = (s_13 == 1'b0 ? sel_11619 :
              s_812);

  assign s_813 = 1'b1;

  assign sel_2_1626 = (s_14 == 1'b0 ? sel_2_1625 :
              s_813);

  assign s_814 = 1'b1;

  assign sel_2_1627 = (s_15 == 1'b0 ? sel_2_1626 :
              s_814);

  assign s_815 = 1'b1;

  assign sel_2_1628 = (s_16 == 1'b0 ? sel_2_1627 :
              s_815);

  assign s_816 = 1'b1;

  assign sel_2_1629 = (s_17 == 1'b0 ? sel_2_1628 :
              s_816);

  assign s_817 = 1'b1;

  assign sel_2_1630 = (s_18 == 1'b0 ? sel_2_1629 :
              s_817);

  assign s_818 = 1'b1;

  assign sel_2_1631 = (s_19 == 1'b0 ? sel_2_1630 :
              s_818);

  assign s_819 = 1'b1;

  assign sel_2_1632 = (s_20 == 1'b0 ? sel_2_1631 :
              s_819);

  assign sel_11620 = 1'b0;

  assign sel_11621 = 1'b0;

  assign sel_11622 = 1'b0;

  assign s_820 = 1'b1;

  assign sel_2_1633 = (tmp_3 == 1'b0 ? sel_11622 :
              s_820);

  assign s_821 = 1'b1;

  assign sel_2_1634 = (tmp_5 == 1'b0 ? sel_2_1633 :
              s_821);

  assign s_822 = 1'b1;

  assign sel_2_1635 = (tmp_7 == 1'b0 ? sel_2_1634 :
              s_822);

  assign s_823 = 1'b1;

  assign sel_2_1636 = (tmp_9 == 1'b0 ? sel_2_1635 :
              s_823);

  assign s_824 = 1'b1;

  assign sel_2_1637 = (tmp_11 == 1'b0 ? sel_2_1636 :
              s_824);

  assign s_825 = 1'b1;

  assign sel_2_1638 = (tmp_13 == 1'b0 ? sel_2_1637 :
              s_825);

  assign s_826 = 1'b1;

  assign sel_2_1639 = (tmp_15 == 1'b0 ? sel_2_1638 :
              s_826);

  assign s_827 = 1'b1;

  assign sel_2_1640 = (tmp_17 == 1'b0 ? sel_2_1639 :
              s_827);

  assign sel_2_1641 = (s_10 == 1'b0 ? sel_11621 :
              sel_2_1640);

  assign sel_2_1642 = (s_11 == 1'b0 ? sel_11620 :
              sel_2_1641);

  assign sel_11623 = 1'b0;

  assign sel_2_1643 = (s_12 == 1'b0 ? sel_2_1642 :
              sel_11623);

  assign sel_11624 = 1'b0;

  assign sel_11625 = 1'b0;

  always @(is_SPI_MNGR_36, sel_11608, sel_11609, sel_11610, sel_11611, sel_11612,
       sel_11613, sel_11614, sel_11615, sel_11616, sel_11617, sel_11618,
       sel_11624, sel_11625, sel_2_1632, sel_2_1643) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p310_sel_2 = sel_11624;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p310_sel_2 = sel_2_1643;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p310_sel_2 = sel_2_1632;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p310_sel_2 = sel_11618;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p310_sel_2 = sel_11617;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p310_sel_2 = sel_11616;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p310_sel_2 = sel_11615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p310_sel_2 = sel_11614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p310_sel_2 = sel_11613;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p310_sel_2 = sel_11612;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p310_sel_2 = sel_11611;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p310_sel_2 = sel_11610;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p310_sel_2 = sel_11609;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p310_sel_2 = sel_11608;
        end
      default :
        begin
          p310_sel_2 = sel_11625;
        end
    endcase
    sel_2_1644 = p310_sel_2;
  end

  assign sel_11626 = 1'b0;

  assign sel_11627 = 1'b0;

  assign sel_11628 = 1'b0;

  assign sel_11629 = 1'b0;

  assign sel_11630 = 1'b0;

  assign sel_11631 = 1'b0;

  assign sel_11632 = 1'b0;

  assign sel_11633 = 1'b0;

  assign sel_11634 = 1'b0;

  assign sel_11635 = 1'b0;

  assign sel_11636 = 1'b0;

  assign sel_11637 = 32'sd0;

  assign sel_11638 = 32'sd0;

  assign sel_11639 = 32'sd0;

  assign sel_11640 = 32'sd0;

  assign sel_11641 = 32'sd0;

  assign sel_11642 = 32'sd0;

  assign sel_11643 = 32'sd0;

  assign sel_11644 = 32'sd0;

  assign sel_11645 = 32'sd0;

  assign sel_11646 = 32'sd0;

  assign sel_11647 = 32'sd0;

  assign sel_11648 = 32'sd0;

  assign s_828 = 32'sd11;

  assign sel_1_2757 = (s_13 == 1'b0 ? sel_11648 :
              s_828);

  assign sel_11649 = 32'sd0;

  assign sel_1_2758 = (s_14 == 1'b0 ? sel_1_2757 :
              sel_11649);

  assign sel_11650 = 32'sd0;

  assign sel_1_2759 = (s_15 == 1'b0 ? sel_1_2758 :
              sel_11650);

  assign sel_11651 = 32'sd0;

  assign sel_1_2760 = (s_16 == 1'b0 ? sel_1_2759 :
              sel_11651);

  assign sel_11652 = 32'sd0;

  assign sel_1_2761 = (s_17 == 1'b0 ? sel_1_2760 :
              sel_11652);

  assign sel_11653 = 32'sd0;

  assign sel_1_2762 = (s_18 == 1'b0 ? sel_1_2761 :
              sel_11653);

  assign sel_11654 = 32'sd0;

  assign sel_1_2763 = (s_19 == 1'b0 ? sel_1_2762 :
              sel_11654);

  assign sel_11655 = 32'sd0;

  assign sel_1_2764 = (s_20 == 1'b0 ? sel_1_2763 :
              sel_11655);

  assign sel_11656 = 32'sd0;

  assign sel_11657 = 32'sd0;

  assign sel_11658 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11637, sel_11638, sel_11639, sel_11640, sel_11641,
       sel_11642, sel_11643, sel_11644, sel_11645, sel_11646, sel_11647,
       sel_11656, sel_11657, sel_11658, sel_1_2764) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1988_sel_1 = sel_11657;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1988_sel_1 = sel_11656;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1988_sel_1 = sel_1_2764;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1988_sel_1 = sel_11647;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1988_sel_1 = sel_11646;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1988_sel_1 = sel_11645;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1988_sel_1 = sel_11644;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1988_sel_1 = sel_11643;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1988_sel_1 = sel_11642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1988_sel_1 = sel_11641;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1988_sel_1 = sel_11640;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1988_sel_1 = sel_11639;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1988_sel_1 = sel_11638;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1988_sel_1 = sel_11637;
        end
      default :
        begin
          p1988_sel_1 = sel_11658;
        end
    endcase
    sel_1_2765 = p1988_sel_1;
  end

  assign cont_bits_41_48 = cont_bits_41_12[sel_1_2765];

  assign sel_11659 = 32'sd0;

  assign sel_11660 = 32'sd0;

  assign sel_11661 = 32'sd0;

  assign sel_11662 = 32'sd0;

  assign sel_11663 = 32'sd0;

  assign sel_11664 = 32'sd0;

  assign sel_11665 = 32'sd0;

  assign sel_11666 = 32'sd0;

  assign sel_11667 = 32'sd0;

  assign sel_11668 = 32'sd0;

  assign sel_11669 = 32'sd0;

  assign sel_11670 = 32'sd0;

  assign s_829 = 32'sd11;

  assign sel_1_2766 = (s_14 == 1'b0 ? sel_11670 :
              s_829);

  assign sel_11671 = 32'sd0;

  assign sel_1_2767 = (s_15 == 1'b0 ? sel_1_2766 :
              sel_11671);

  assign sel_11672 = 32'sd0;

  assign sel_1_2768 = (s_16 == 1'b0 ? sel_1_2767 :
              sel_11672);

  assign sel_11673 = 32'sd0;

  assign sel_1_2769 = (s_17 == 1'b0 ? sel_1_2768 :
              sel_11673);

  assign sel_11674 = 32'sd0;

  assign sel_1_2770 = (s_18 == 1'b0 ? sel_1_2769 :
              sel_11674);

  assign sel_11675 = 32'sd0;

  assign sel_1_2771 = (s_19 == 1'b0 ? sel_1_2770 :
              sel_11675);

  assign sel_11676 = 32'sd0;

  assign sel_1_2772 = (s_20 == 1'b0 ? sel_1_2771 :
              sel_11676);

  assign sel_11677 = 32'sd0;

  assign sel_11678 = 32'sd0;

  assign sel_11679 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11659, sel_11660, sel_11661, sel_11662, sel_11663,
       sel_11664, sel_11665, sel_11666, sel_11667, sel_11668, sel_11669,
       sel_11677, sel_11678, sel_11679, sel_1_2772) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1172_sel_1 = sel_11678;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1172_sel_1 = sel_11677;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1172_sel_1 = sel_1_2772;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1172_sel_1 = sel_11669;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1172_sel_1 = sel_11668;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1172_sel_1 = sel_11667;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1172_sel_1 = sel_11666;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1172_sel_1 = sel_11665;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1172_sel_1 = sel_11664;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1172_sel_1 = sel_11663;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1172_sel_1 = sel_11662;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1172_sel_1 = sel_11661;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1172_sel_1 = sel_11660;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1172_sel_1 = sel_11659;
        end
      default :
        begin
          p1172_sel_1 = sel_11679;
        end
    endcase
    sel_1_2773 = p1172_sel_1;
  end

  assign cont_bits_42_48 = cont_bits_42_12[sel_1_2773];

  assign sel_1_2774 = (s_14 == 1'b0 ? cont_bits_41_48 :
              cont_bits_42_48);

  assign sel_11680 = 32'sd0;

  assign sel_11681 = 32'sd0;

  assign sel_11682 = 32'sd0;

  assign sel_11683 = 32'sd0;

  assign sel_11684 = 32'sd0;

  assign sel_11685 = 32'sd0;

  assign sel_11686 = 32'sd0;

  assign sel_11687 = 32'sd0;

  assign sel_11688 = 32'sd0;

  assign sel_11689 = 32'sd0;

  assign sel_11690 = 32'sd0;

  assign sel_11691 = 32'sd0;

  assign s_830 = 32'sd11;

  assign sel_1_2775 = (s_15 == 1'b0 ? sel_11691 :
              s_830);

  assign sel_11692 = 32'sd0;

  assign sel_1_2776 = (s_16 == 1'b0 ? sel_1_2775 :
              sel_11692);

  assign sel_11693 = 32'sd0;

  assign sel_1_2777 = (s_17 == 1'b0 ? sel_1_2776 :
              sel_11693);

  assign sel_11694 = 32'sd0;

  assign sel_1_2778 = (s_18 == 1'b0 ? sel_1_2777 :
              sel_11694);

  assign sel_11695 = 32'sd0;

  assign sel_1_2779 = (s_19 == 1'b0 ? sel_1_2778 :
              sel_11695);

  assign sel_11696 = 32'sd0;

  assign sel_1_2780 = (s_20 == 1'b0 ? sel_1_2779 :
              sel_11696);

  assign sel_11697 = 32'sd0;

  assign sel_11698 = 32'sd0;

  assign sel_11699 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11680, sel_11681, sel_11682, sel_11683, sel_11684,
       sel_11685, sel_11686, sel_11687, sel_11688, sel_11689, sel_11690,
       sel_11697, sel_11698, sel_11699, sel_1_2780) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1699_sel_1 = sel_11698;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1699_sel_1 = sel_11697;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1699_sel_1 = sel_1_2780;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1699_sel_1 = sel_11690;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1699_sel_1 = sel_11689;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1699_sel_1 = sel_11688;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1699_sel_1 = sel_11687;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1699_sel_1 = sel_11686;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1699_sel_1 = sel_11685;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1699_sel_1 = sel_11684;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1699_sel_1 = sel_11683;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1699_sel_1 = sel_11682;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1699_sel_1 = sel_11681;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1699_sel_1 = sel_11680;
        end
      default :
        begin
          p1699_sel_1 = sel_11699;
        end
    endcase
    sel_1_2781 = p1699_sel_1;
  end

  assign cont_bits_32_48 = cont_bits_32_12[sel_1_2781];

  assign sel_1_2782 = (s_15 == 1'b0 ? sel_1_2774 :
              cont_bits_32_48);

  assign sel_11700 = 32'sd0;

  assign sel_11701 = 32'sd0;

  assign sel_11702 = 32'sd0;

  assign sel_11703 = 32'sd0;

  assign sel_11704 = 32'sd0;

  assign sel_11705 = 32'sd0;

  assign sel_11706 = 32'sd0;

  assign sel_11707 = 32'sd0;

  assign sel_11708 = 32'sd0;

  assign sel_11709 = 32'sd0;

  assign sel_11710 = 32'sd0;

  assign sel_11711 = 32'sd0;

  assign s_831 = 32'sd11;

  assign sel_1_2783 = (s_16 == 1'b0 ? sel_11711 :
              s_831);

  assign sel_11712 = 32'sd0;

  assign sel_1_2784 = (s_17 == 1'b0 ? sel_1_2783 :
              sel_11712);

  assign sel_11713 = 32'sd0;

  assign sel_1_2785 = (s_18 == 1'b0 ? sel_1_2784 :
              sel_11713);

  assign sel_11714 = 32'sd0;

  assign sel_1_2786 = (s_19 == 1'b0 ? sel_1_2785 :
              sel_11714);

  assign sel_11715 = 32'sd0;

  assign sel_1_2787 = (s_20 == 1'b0 ? sel_1_2786 :
              sel_11715);

  assign sel_11716 = 32'sd0;

  assign sel_11717 = 32'sd0;

  assign sel_11718 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11700, sel_11701, sel_11702, sel_11703, sel_11704,
       sel_11705, sel_11706, sel_11707, sel_11708, sel_11709, sel_11710,
       sel_11716, sel_11717, sel_11718, sel_1_2787) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1002_sel_1 = sel_11717;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1002_sel_1 = sel_11716;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1002_sel_1 = sel_1_2787;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1002_sel_1 = sel_11710;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1002_sel_1 = sel_11709;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1002_sel_1 = sel_11708;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1002_sel_1 = sel_11707;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1002_sel_1 = sel_11706;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1002_sel_1 = sel_11705;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1002_sel_1 = sel_11704;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1002_sel_1 = sel_11703;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1002_sel_1 = sel_11702;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1002_sel_1 = sel_11701;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1002_sel_1 = sel_11700;
        end
      default :
        begin
          p1002_sel_1 = sel_11718;
        end
    endcase
    sel_1_2788 = p1002_sel_1;
  end

  assign cont_bits_31_48 = cont_bits_31_12[sel_1_2788];

  assign sel_1_2789 = (s_16 == 1'b0 ? sel_1_2782 :
              cont_bits_31_48);

  assign sel_11719 = 32'sd0;

  assign sel_11720 = 32'sd0;

  assign sel_11721 = 32'sd0;

  assign sel_11722 = 32'sd0;

  assign sel_11723 = 32'sd0;

  assign sel_11724 = 32'sd0;

  assign sel_11725 = 32'sd0;

  assign sel_11726 = 32'sd0;

  assign sel_11727 = 32'sd0;

  assign sel_11728 = 32'sd0;

  assign sel_11729 = 32'sd0;

  assign sel_11730 = 32'sd0;

  assign s_832 = 32'sd11;

  assign sel_1_2790 = (s_17 == 1'b0 ? sel_11730 :
              s_832);

  assign sel_11731 = 32'sd0;

  assign sel_1_2791 = (s_18 == 1'b0 ? sel_1_2790 :
              sel_11731);

  assign sel_11732 = 32'sd0;

  assign sel_1_2792 = (s_19 == 1'b0 ? sel_1_2791 :
              sel_11732);

  assign sel_11733 = 32'sd0;

  assign sel_1_2793 = (s_20 == 1'b0 ? sel_1_2792 :
              sel_11733);

  assign sel_11734 = 32'sd0;

  assign sel_11735 = 32'sd0;

  assign sel_11736 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11719, sel_11720, sel_11721, sel_11722, sel_11723,
       sel_11724, sel_11725, sel_11726, sel_11727, sel_11728, sel_11729,
       sel_11734, sel_11735, sel_11736, sel_1_2793) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1784_sel_1 = sel_11735;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1784_sel_1 = sel_11734;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1784_sel_1 = sel_1_2793;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1784_sel_1 = sel_11729;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1784_sel_1 = sel_11728;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1784_sel_1 = sel_11727;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1784_sel_1 = sel_11726;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1784_sel_1 = sel_11725;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1784_sel_1 = sel_11724;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1784_sel_1 = sel_11723;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1784_sel_1 = sel_11722;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1784_sel_1 = sel_11721;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1784_sel_1 = sel_11720;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1784_sel_1 = sel_11719;
        end
      default :
        begin
          p1784_sel_1 = sel_11736;
        end
    endcase
    sel_1_2794 = p1784_sel_1;
  end

  assign cont_bits_22_48 = cont_bits_22_12[sel_1_2794];

  assign sel_1_2795 = (s_17 == 1'b0 ? sel_1_2789 :
              cont_bits_22_48);

  assign sel_11737 = 32'sd0;

  assign sel_11738 = 32'sd0;

  assign sel_11739 = 32'sd0;

  assign sel_11740 = 32'sd0;

  assign sel_11741 = 32'sd0;

  assign sel_11742 = 32'sd0;

  assign sel_11743 = 32'sd0;

  assign sel_11744 = 32'sd0;

  assign sel_11745 = 32'sd0;

  assign sel_11746 = 32'sd0;

  assign sel_11747 = 32'sd0;

  assign sel_11748 = 32'sd0;

  assign s_833 = 32'sd11;

  assign sel_1_2796 = (s_18 == 1'b0 ? sel_11748 :
              s_833);

  assign sel_11749 = 32'sd0;

  assign sel_1_2797 = (s_19 == 1'b0 ? sel_1_2796 :
              sel_11749);

  assign sel_11750 = 32'sd0;

  assign sel_1_2798 = (s_20 == 1'b0 ? sel_1_2797 :
              sel_11750);

  assign sel_11751 = 32'sd0;

  assign sel_11752 = 32'sd0;

  assign sel_11753 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11737, sel_11738, sel_11739, sel_11740, sel_11741,
       sel_11742, sel_11743, sel_11744, sel_11745, sel_11746, sel_11747,
       sel_11751, sel_11752, sel_11753, sel_1_2798) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2566_sel_1 = sel_11752;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2566_sel_1 = sel_11751;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2566_sel_1 = sel_1_2798;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2566_sel_1 = sel_11747;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2566_sel_1 = sel_11746;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2566_sel_1 = sel_11745;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2566_sel_1 = sel_11744;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2566_sel_1 = sel_11743;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2566_sel_1 = sel_11742;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2566_sel_1 = sel_11741;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2566_sel_1 = sel_11740;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2566_sel_1 = sel_11739;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2566_sel_1 = sel_11738;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2566_sel_1 = sel_11737;
        end
      default :
        begin
          p2566_sel_1 = sel_11753;
        end
    endcase
    sel_1_2799 = p2566_sel_1;
  end

  assign cont_bits_21_48 = cont_bits_21_12[sel_1_2799];

  assign sel_1_2800 = (s_18 == 1'b0 ? sel_1_2795 :
              cont_bits_21_48);

  assign sel_11754 = 32'sd0;

  assign sel_11755 = 32'sd0;

  assign sel_11756 = 32'sd0;

  assign sel_11757 = 32'sd0;

  assign sel_11758 = 32'sd0;

  assign sel_11759 = 32'sd0;

  assign sel_11760 = 32'sd0;

  assign sel_11761 = 32'sd0;

  assign sel_11762 = 32'sd0;

  assign sel_11763 = 32'sd0;

  assign sel_11764 = 32'sd0;

  assign sel_11765 = 32'sd0;

  assign s_834 = 32'sd11;

  assign sel_1_2801 = (s_19 == 1'b0 ? sel_11765 :
              s_834);

  assign sel_11766 = 32'sd0;

  assign sel_1_2802 = (s_20 == 1'b0 ? sel_1_2801 :
              sel_11766);

  assign sel_11767 = 32'sd0;

  assign sel_11768 = 32'sd0;

  assign sel_11769 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11754, sel_11755, sel_11756, sel_11757, sel_11758,
       sel_11759, sel_11760, sel_11761, sel_11762, sel_11763, sel_11764,
       sel_11767, sel_11768, sel_11769, sel_1_2802) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p1410_sel_1 = sel_11768;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p1410_sel_1 = sel_11767;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p1410_sel_1 = sel_1_2802;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p1410_sel_1 = sel_11764;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p1410_sel_1 = sel_11763;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p1410_sel_1 = sel_11762;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p1410_sel_1 = sel_11761;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p1410_sel_1 = sel_11760;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p1410_sel_1 = sel_11759;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p1410_sel_1 = sel_11758;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p1410_sel_1 = sel_11757;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p1410_sel_1 = sel_11756;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p1410_sel_1 = sel_11755;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p1410_sel_1 = sel_11754;
        end
      default :
        begin
          p1410_sel_1 = sel_11769;
        end
    endcase
    sel_1_2803 = p1410_sel_1;
  end

  assign cont_bits_12_48 = cont_bits_12_12[sel_1_2803];

  assign sel_1_2804 = (s_19 == 1'b0 ? sel_1_2800 :
              cont_bits_12_48);

  assign sel_11770 = 32'sd0;

  assign sel_11771 = 32'sd0;

  assign sel_11772 = 32'sd0;

  assign sel_11773 = 32'sd0;

  assign sel_11774 = 32'sd0;

  assign sel_11775 = 32'sd0;

  assign sel_11776 = 32'sd0;

  assign sel_11777 = 32'sd0;

  assign sel_11778 = 32'sd0;

  assign sel_11779 = 32'sd0;

  assign sel_11780 = 32'sd0;

  assign sel_11781 = 32'sd0;

  assign s_835 = 32'sd11;

  assign sel_1_2805 = (s_20 == 1'b0 ? sel_11781 :
              s_835);

  assign sel_11782 = 32'sd0;

  assign sel_11783 = 32'sd0;

  assign sel_11784 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11770, sel_11771, sel_11772, sel_11773, sel_11774,
       sel_11775, sel_11776, sel_11777, sel_11778, sel_11779, sel_11780,
       sel_11782, sel_11783, sel_11784, sel_1_2805) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2345_sel_1 = sel_11783;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2345_sel_1 = sel_11782;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2345_sel_1 = sel_1_2805;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2345_sel_1 = sel_11780;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2345_sel_1 = sel_11779;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2345_sel_1 = sel_11778;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2345_sel_1 = sel_11777;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2345_sel_1 = sel_11776;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2345_sel_1 = sel_11775;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2345_sel_1 = sel_11774;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2345_sel_1 = sel_11773;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2345_sel_1 = sel_11772;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2345_sel_1 = sel_11771;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2345_sel_1 = sel_11770;
        end
      default :
        begin
          p2345_sel_1 = sel_11784;
        end
    endcase
    sel_1_2806 = p2345_sel_1;
  end

  assign cont_bits_55 = cont_bits_13[sel_1_2806];

  assign sel_1_2807 = (s_20 == 1'b0 ? sel_1_2804 :
              cont_bits_55);

  assign sel_11785 = 32'sd0;

  assign sel_11786 = 32'sd0;

  assign sel_11787 = 32'sd0;

  assign sel_11788 = 32'sd0;

  assign sel_11789 = 32'sd0;

  assign sel_11790 = 32'sd0;

  assign sel_11791 = 32'sd0;

  assign sel_11792 = 32'sd0;

  assign sel_11793 = 32'sd0;

  assign sel_11794 = 32'sd0;

  assign sel_11795 = 32'sd0;

  assign sel_11796 = 32'sd0;

  assign sel_11797 = 32'sd0;

  assign sel_11798 = 32'sd0;

  assign sel_11799 = 32'sd0;

  assign s_836 = 32'sd11;

  assign sel_1_2808 = (tmp_3 == 1'b0 ? sel_11799 :
              s_836);

  assign sel_11800 = 32'sd0;

  assign sel_1_2809 = (tmp_5 == 1'b0 ? sel_1_2808 :
              sel_11800);

  assign sel_11801 = 32'sd0;

  assign sel_1_2810 = (tmp_7 == 1'b0 ? sel_1_2809 :
              sel_11801);

  assign sel_11802 = 32'sd0;

  assign sel_1_2811 = (tmp_9 == 1'b0 ? sel_1_2810 :
              sel_11802);

  assign sel_11803 = 32'sd0;

  assign sel_1_2812 = (tmp_11 == 1'b0 ? sel_1_2811 :
              sel_11803);

  assign sel_11804 = 32'sd0;

  assign sel_1_2813 = (tmp_13 == 1'b0 ? sel_1_2812 :
              sel_11804);

  assign sel_11805 = 32'sd0;

  assign sel_1_2814 = (tmp_15 == 1'b0 ? sel_1_2813 :
              sel_11805);

  assign sel_11806 = 32'sd0;

  assign sel_1_2815 = (tmp_17 == 1'b0 ? sel_1_2814 :
              sel_11806);

  assign sel_1_2816 = (s_10 == 1'b0 ? sel_11798 :
              sel_1_2815);

  assign sel_1_2817 = (s_11 == 1'b0 ? sel_11797 :
              sel_1_2816);

  assign sel_11807 = 32'sd0;

  assign sel_1_2818 = (s_12 == 1'b0 ? sel_1_2817 :
              sel_11807);

  assign sel_11808 = 32'sd0;

  assign sel_11809 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11785, sel_11786, sel_11787, sel_11788, sel_11789,
       sel_11790, sel_11791, sel_11792, sel_11793, sel_11794, sel_11795,
       sel_11796, sel_11808, sel_11809, sel_1_2818) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3212_sel_1 = sel_11808;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3212_sel_1 = sel_1_2818;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3212_sel_1 = sel_11796;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3212_sel_1 = sel_11795;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3212_sel_1 = sel_11794;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3212_sel_1 = sel_11793;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3212_sel_1 = sel_11792;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3212_sel_1 = sel_11791;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3212_sel_1 = sel_11790;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3212_sel_1 = sel_11789;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3212_sel_1 = sel_11788;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3212_sel_1 = sel_11787;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3212_sel_1 = sel_11786;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3212_sel_1 = sel_11785;
        end
      default :
        begin
          p3212_sel_1 = sel_11809;
        end
    endcase
    sel_1_2819 = p3212_sel_1;
  end

  assign cont_bits_41_49 = cont_bits_41_26[sel_1_2819];

  assign sel_11810 = 32'sd0;

  assign sel_11811 = 32'sd0;

  assign sel_11812 = 32'sd0;

  assign sel_11813 = 32'sd0;

  assign sel_11814 = 32'sd0;

  assign sel_11815 = 32'sd0;

  assign sel_11816 = 32'sd0;

  assign sel_11817 = 32'sd0;

  assign sel_11818 = 32'sd0;

  assign sel_11819 = 32'sd0;

  assign sel_11820 = 32'sd0;

  assign sel_11821 = 32'sd0;

  assign sel_11822 = 32'sd0;

  assign sel_11823 = 32'sd0;

  assign sel_11824 = 32'sd0;

  assign s_837 = 32'sd11;

  assign sel_1_2820 = (tmp_5 == 1'b0 ? sel_11824 :
              s_837);

  assign sel_11825 = 32'sd0;

  assign sel_1_2821 = (tmp_7 == 1'b0 ? sel_1_2820 :
              sel_11825);

  assign sel_11826 = 32'sd0;

  assign sel_1_2822 = (tmp_9 == 1'b0 ? sel_1_2821 :
              sel_11826);

  assign sel_11827 = 32'sd0;

  assign sel_1_2823 = (tmp_11 == 1'b0 ? sel_1_2822 :
              sel_11827);

  assign sel_11828 = 32'sd0;

  assign sel_1_2824 = (tmp_13 == 1'b0 ? sel_1_2823 :
              sel_11828);

  assign sel_11829 = 32'sd0;

  assign sel_1_2825 = (tmp_15 == 1'b0 ? sel_1_2824 :
              sel_11829);

  assign sel_11830 = 32'sd0;

  assign sel_1_2826 = (tmp_17 == 1'b0 ? sel_1_2825 :
              sel_11830);

  assign sel_1_2827 = (s_10 == 1'b0 ? sel_11823 :
              sel_1_2826);

  assign sel_1_2828 = (s_11 == 1'b0 ? sel_11822 :
              sel_1_2827);

  assign sel_11831 = 32'sd0;

  assign sel_1_2829 = (s_12 == 1'b0 ? sel_1_2828 :
              sel_11831);

  assign sel_11832 = 32'sd0;

  assign sel_11833 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11810, sel_11811, sel_11812, sel_11813, sel_11814,
       sel_11815, sel_11816, sel_11817, sel_11818, sel_11819, sel_11820,
       sel_11821, sel_11832, sel_11833, sel_1_2829) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2804_sel_1 = sel_11832;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2804_sel_1 = sel_1_2829;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2804_sel_1 = sel_11821;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2804_sel_1 = sel_11820;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2804_sel_1 = sel_11819;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2804_sel_1 = sel_11818;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2804_sel_1 = sel_11817;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2804_sel_1 = sel_11816;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2804_sel_1 = sel_11815;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2804_sel_1 = sel_11814;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2804_sel_1 = sel_11813;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2804_sel_1 = sel_11812;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2804_sel_1 = sel_11811;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2804_sel_1 = sel_11810;
        end
      default :
        begin
          p2804_sel_1 = sel_11833;
        end
    endcase
    sel_1_2830 = p2804_sel_1;
  end

  assign cont_bits_42_49 = cont_bits_42_26[sel_1_2830];

  assign sel_1_2831 = (tmp_5 == 1'b0 ? cont_bits_41_49 :
              cont_bits_42_49);

  assign sel_11834 = 32'sd0;

  assign sel_11835 = 32'sd0;

  assign sel_11836 = 32'sd0;

  assign sel_11837 = 32'sd0;

  assign sel_11838 = 32'sd0;

  assign sel_11839 = 32'sd0;

  assign sel_11840 = 32'sd0;

  assign sel_11841 = 32'sd0;

  assign sel_11842 = 32'sd0;

  assign sel_11843 = 32'sd0;

  assign sel_11844 = 32'sd0;

  assign sel_11845 = 32'sd0;

  assign sel_11846 = 32'sd0;

  assign sel_11847 = 32'sd0;

  assign sel_11848 = 32'sd0;

  assign s_838 = 32'sd11;

  assign sel_1_2832 = (tmp_7 == 1'b0 ? sel_11848 :
              s_838);

  assign sel_11849 = 32'sd0;

  assign sel_1_2833 = (tmp_9 == 1'b0 ? sel_1_2832 :
              sel_11849);

  assign sel_11850 = 32'sd0;

  assign sel_1_2834 = (tmp_11 == 1'b0 ? sel_1_2833 :
              sel_11850);

  assign sel_11851 = 32'sd0;

  assign sel_1_2835 = (tmp_13 == 1'b0 ? sel_1_2834 :
              sel_11851);

  assign sel_11852 = 32'sd0;

  assign sel_1_2836 = (tmp_15 == 1'b0 ? sel_1_2835 :
              sel_11852);

  assign sel_11853 = 32'sd0;

  assign sel_1_2837 = (tmp_17 == 1'b0 ? sel_1_2836 :
              sel_11853);

  assign sel_1_2838 = (s_10 == 1'b0 ? sel_11847 :
              sel_1_2837);

  assign sel_1_2839 = (s_11 == 1'b0 ? sel_11846 :
              sel_1_2838);

  assign sel_11854 = 32'sd0;

  assign sel_1_2840 = (s_12 == 1'b0 ? sel_1_2839 :
              sel_11854);

  assign sel_11855 = 32'sd0;

  assign sel_11856 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11834, sel_11835, sel_11836, sel_11837, sel_11838,
       sel_11839, sel_11840, sel_11841, sel_11842, sel_11843, sel_11844,
       sel_11845, sel_11855, sel_11856, sel_1_2840) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3535_sel_1 = sel_11855;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3535_sel_1 = sel_1_2840;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3535_sel_1 = sel_11845;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3535_sel_1 = sel_11844;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3535_sel_1 = sel_11843;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3535_sel_1 = sel_11842;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3535_sel_1 = sel_11841;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3535_sel_1 = sel_11840;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3535_sel_1 = sel_11839;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3535_sel_1 = sel_11838;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3535_sel_1 = sel_11837;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3535_sel_1 = sel_11836;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3535_sel_1 = sel_11835;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3535_sel_1 = sel_11834;
        end
      default :
        begin
          p3535_sel_1 = sel_11856;
        end
    endcase
    sel_1_2841 = p3535_sel_1;
  end

  assign cont_bits_32_49 = cont_bits_32_26[sel_1_2841];

  assign sel_1_2842 = (tmp_7 == 1'b0 ? sel_1_2831 :
              cont_bits_32_49);

  assign sel_11857 = 32'sd0;

  assign sel_11858 = 32'sd0;

  assign sel_11859 = 32'sd0;

  assign sel_11860 = 32'sd0;

  assign sel_11861 = 32'sd0;

  assign sel_11862 = 32'sd0;

  assign sel_11863 = 32'sd0;

  assign sel_11864 = 32'sd0;

  assign sel_11865 = 32'sd0;

  assign sel_11866 = 32'sd0;

  assign sel_11867 = 32'sd0;

  assign sel_11868 = 32'sd0;

  assign sel_11869 = 32'sd0;

  assign sel_11870 = 32'sd0;

  assign sel_11871 = 32'sd0;

  assign s_839 = 32'sd11;

  assign sel_1_2843 = (tmp_9 == 1'b0 ? sel_11871 :
              s_839);

  assign sel_11872 = 32'sd0;

  assign sel_1_2844 = (tmp_11 == 1'b0 ? sel_1_2843 :
              sel_11872);

  assign sel_11873 = 32'sd0;

  assign sel_1_2845 = (tmp_13 == 1'b0 ? sel_1_2844 :
              sel_11873);

  assign sel_11874 = 32'sd0;

  assign sel_1_2846 = (tmp_15 == 1'b0 ? sel_1_2845 :
              sel_11874);

  assign sel_11875 = 32'sd0;

  assign sel_1_2847 = (tmp_17 == 1'b0 ? sel_1_2846 :
              sel_11875);

  assign sel_1_2848 = (s_10 == 1'b0 ? sel_11870 :
              sel_1_2847);

  assign sel_1_2849 = (s_11 == 1'b0 ? sel_11869 :
              sel_1_2848);

  assign sel_11876 = 32'sd0;

  assign sel_1_2850 = (s_12 == 1'b0 ? sel_1_2849 :
              sel_11876);

  assign sel_11877 = 32'sd0;

  assign sel_11878 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11857, sel_11858, sel_11859, sel_11860, sel_11861,
       sel_11862, sel_11863, sel_11864, sel_11865, sel_11866, sel_11867,
       sel_11868, sel_11877, sel_11878, sel_1_2850) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4147_sel_1 = sel_11877;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4147_sel_1 = sel_1_2850;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4147_sel_1 = sel_11868;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4147_sel_1 = sel_11867;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4147_sel_1 = sel_11866;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4147_sel_1 = sel_11865;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4147_sel_1 = sel_11864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4147_sel_1 = sel_11863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4147_sel_1 = sel_11862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4147_sel_1 = sel_11861;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4147_sel_1 = sel_11860;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4147_sel_1 = sel_11859;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4147_sel_1 = sel_11858;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4147_sel_1 = sel_11857;
        end
      default :
        begin
          p4147_sel_1 = sel_11878;
        end
    endcase
    sel_1_2851 = p4147_sel_1;
  end

  assign cont_bits_31_49 = cont_bits_31_26[sel_1_2851];

  assign sel_1_2852 = (tmp_9 == 1'b0 ? sel_1_2842 :
              cont_bits_31_49);

  assign sel_11879 = 32'sd0;

  assign sel_11880 = 32'sd0;

  assign sel_11881 = 32'sd0;

  assign sel_11882 = 32'sd0;

  assign sel_11883 = 32'sd0;

  assign sel_11884 = 32'sd0;

  assign sel_11885 = 32'sd0;

  assign sel_11886 = 32'sd0;

  assign sel_11887 = 32'sd0;

  assign sel_11888 = 32'sd0;

  assign sel_11889 = 32'sd0;

  assign sel_11890 = 32'sd0;

  assign sel_11891 = 32'sd0;

  assign sel_11892 = 32'sd0;

  assign sel_11893 = 32'sd0;

  assign s_840 = 32'sd11;

  assign sel_1_2853 = (tmp_11 == 1'b0 ? sel_11893 :
              s_840);

  assign sel_11894 = 32'sd0;

  assign sel_1_2854 = (tmp_13 == 1'b0 ? sel_1_2853 :
              sel_11894);

  assign sel_11895 = 32'sd0;

  assign sel_1_2855 = (tmp_15 == 1'b0 ? sel_1_2854 :
              sel_11895);

  assign sel_11896 = 32'sd0;

  assign sel_1_2856 = (tmp_17 == 1'b0 ? sel_1_2855 :
              sel_11896);

  assign sel_1_2857 = (s_10 == 1'b0 ? sel_11892 :
              sel_1_2856);

  assign sel_1_2858 = (s_11 == 1'b0 ? sel_11891 :
              sel_1_2857);

  assign sel_11897 = 32'sd0;

  assign sel_1_2859 = (s_12 == 1'b0 ? sel_1_2858 :
              sel_11897);

  assign sel_11898 = 32'sd0;

  assign sel_11899 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11879, sel_11880, sel_11881, sel_11882, sel_11883,
       sel_11884, sel_11885, sel_11886, sel_11887, sel_11888, sel_11889,
       sel_11890, sel_11898, sel_11899, sel_1_2859) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3926_sel_1 = sel_11898;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3926_sel_1 = sel_1_2859;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3926_sel_1 = sel_11890;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3926_sel_1 = sel_11889;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3926_sel_1 = sel_11888;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3926_sel_1 = sel_11887;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3926_sel_1 = sel_11886;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3926_sel_1 = sel_11885;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3926_sel_1 = sel_11884;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3926_sel_1 = sel_11883;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3926_sel_1 = sel_11882;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3926_sel_1 = sel_11881;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3926_sel_1 = sel_11880;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3926_sel_1 = sel_11879;
        end
      default :
        begin
          p3926_sel_1 = sel_11899;
        end
    endcase
    sel_1_2860 = p3926_sel_1;
  end

  assign cont_bits_22_49 = cont_bits_22_26[sel_1_2860];

  assign sel_1_2861 = (tmp_11 == 1'b0 ? sel_1_2852 :
              cont_bits_22_49);

  assign sel_11900 = 32'sd0;

  assign sel_11901 = 32'sd0;

  assign sel_11902 = 32'sd0;

  assign sel_11903 = 32'sd0;

  assign sel_11904 = 32'sd0;

  assign sel_11905 = 32'sd0;

  assign sel_11906 = 32'sd0;

  assign sel_11907 = 32'sd0;

  assign sel_11908 = 32'sd0;

  assign sel_11909 = 32'sd0;

  assign sel_11910 = 32'sd0;

  assign sel_11911 = 32'sd0;

  assign sel_11912 = 32'sd0;

  assign sel_11913 = 32'sd0;

  assign sel_11914 = 32'sd0;

  assign s_841 = 32'sd11;

  assign sel_1_2862 = (tmp_13 == 1'b0 ? sel_11914 :
              s_841);

  assign sel_11915 = 32'sd0;

  assign sel_1_2863 = (tmp_15 == 1'b0 ? sel_1_2862 :
              sel_11915);

  assign sel_11916 = 32'sd0;

  assign sel_1_2864 = (tmp_17 == 1'b0 ? sel_1_2863 :
              sel_11916);

  assign sel_1_2865 = (s_10 == 1'b0 ? sel_11913 :
              sel_1_2864);

  assign sel_1_2866 = (s_11 == 1'b0 ? sel_11912 :
              sel_1_2865);

  assign sel_11917 = 32'sd0;

  assign sel_1_2867 = (s_12 == 1'b0 ? sel_1_2866 :
              sel_11917);

  assign sel_11918 = 32'sd0;

  assign sel_11919 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11900, sel_11901, sel_11902, sel_11903, sel_11904,
       sel_11905, sel_11906, sel_11907, sel_11908, sel_11909, sel_11910,
       sel_11911, sel_11918, sel_11919, sel_1_2867) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3008_sel_1 = sel_11918;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3008_sel_1 = sel_1_2867;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3008_sel_1 = sel_11911;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3008_sel_1 = sel_11910;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3008_sel_1 = sel_11909;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3008_sel_1 = sel_11908;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3008_sel_1 = sel_11907;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3008_sel_1 = sel_11906;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3008_sel_1 = sel_11905;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3008_sel_1 = sel_11904;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3008_sel_1 = sel_11903;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3008_sel_1 = sel_11902;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3008_sel_1 = sel_11901;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3008_sel_1 = sel_11900;
        end
      default :
        begin
          p3008_sel_1 = sel_11919;
        end
    endcase
    sel_1_2868 = p3008_sel_1;
  end

  assign cont_bits_21_49 = cont_bits_21_26[sel_1_2868];

  assign sel_1_2869 = (tmp_13 == 1'b0 ? sel_1_2861 :
              cont_bits_21_49);

  assign sel_11920 = 32'sd0;

  assign sel_11921 = 32'sd0;

  assign sel_11922 = 32'sd0;

  assign sel_11923 = 32'sd0;

  assign sel_11924 = 32'sd0;

  assign sel_11925 = 32'sd0;

  assign sel_11926 = 32'sd0;

  assign sel_11927 = 32'sd0;

  assign sel_11928 = 32'sd0;

  assign sel_11929 = 32'sd0;

  assign sel_11930 = 32'sd0;

  assign sel_11931 = 32'sd0;

  assign sel_11932 = 32'sd0;

  assign sel_11933 = 32'sd0;

  assign sel_11934 = 32'sd0;

  assign s_842 = 32'sd11;

  assign sel_1_2870 = (tmp_15 == 1'b0 ? sel_11934 :
              s_842);

  assign sel_11935 = 32'sd0;

  assign sel_1_2871 = (tmp_17 == 1'b0 ? sel_1_2870 :
              sel_11935);

  assign sel_1_2872 = (s_10 == 1'b0 ? sel_11933 :
              sel_1_2871);

  assign sel_1_2873 = (s_11 == 1'b0 ? sel_11932 :
              sel_1_2872);

  assign sel_11936 = 32'sd0;

  assign sel_1_2874 = (s_12 == 1'b0 ? sel_1_2873 :
              sel_11936);

  assign sel_11937 = 32'sd0;

  assign sel_11938 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11920, sel_11921, sel_11922, sel_11923, sel_11924,
       sel_11925, sel_11926, sel_11927, sel_11928, sel_11929, sel_11930,
       sel_11931, sel_11937, sel_11938, sel_1_2874) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p3637_sel_1 = sel_11937;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p3637_sel_1 = sel_1_2874;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p3637_sel_1 = sel_11931;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p3637_sel_1 = sel_11930;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p3637_sel_1 = sel_11929;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p3637_sel_1 = sel_11928;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p3637_sel_1 = sel_11927;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p3637_sel_1 = sel_11926;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p3637_sel_1 = sel_11925;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p3637_sel_1 = sel_11924;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p3637_sel_1 = sel_11923;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p3637_sel_1 = sel_11922;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p3637_sel_1 = sel_11921;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p3637_sel_1 = sel_11920;
        end
      default :
        begin
          p3637_sel_1 = sel_11938;
        end
    endcase
    sel_1_2875 = p3637_sel_1;
  end

  assign cont_bits_12_49 = cont_bits_12_26[sel_1_2875];

  assign sel_1_2876 = (tmp_15 == 1'b0 ? sel_1_2869 :
              cont_bits_12_49);

  assign sel_11939 = 32'sd0;

  assign sel_11940 = 32'sd0;

  assign sel_11941 = 32'sd0;

  assign sel_11942 = 32'sd0;

  assign sel_11943 = 32'sd0;

  assign sel_11944 = 32'sd0;

  assign sel_11945 = 32'sd0;

  assign sel_11946 = 32'sd0;

  assign sel_11947 = 32'sd0;

  assign sel_11948 = 32'sd0;

  assign sel_11949 = 32'sd0;

  assign sel_11950 = 32'sd0;

  assign sel_11951 = 32'sd0;

  assign sel_11952 = 32'sd0;

  assign sel_11953 = 32'sd0;

  assign s_843 = 32'sd11;

  assign sel_1_2877 = (tmp_17 == 1'b0 ? sel_11953 :
              s_843);

  assign sel_1_2878 = (s_10 == 1'b0 ? sel_11952 :
              sel_1_2877);

  assign sel_1_2879 = (s_11 == 1'b0 ? sel_11951 :
              sel_1_2878);

  assign sel_11954 = 32'sd0;

  assign sel_1_2880 = (s_12 == 1'b0 ? sel_1_2879 :
              sel_11954);

  assign sel_11955 = 32'sd0;

  assign sel_11956 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11939, sel_11940, sel_11941, sel_11942, sel_11943,
       sel_11944, sel_11945, sel_11946, sel_11947, sel_11948, sel_11949,
       sel_11950, sel_11955, sel_11956, sel_1_2880) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p2600_sel_1 = sel_11955;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p2600_sel_1 = sel_1_2880;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p2600_sel_1 = sel_11950;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p2600_sel_1 = sel_11949;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p2600_sel_1 = sel_11948;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p2600_sel_1 = sel_11947;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p2600_sel_1 = sel_11946;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p2600_sel_1 = sel_11945;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p2600_sel_1 = sel_11944;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p2600_sel_1 = sel_11943;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p2600_sel_1 = sel_11942;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p2600_sel_1 = sel_11941;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p2600_sel_1 = sel_11940;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p2600_sel_1 = sel_11939;
        end
      default :
        begin
          p2600_sel_1 = sel_11956;
        end
    endcase
    sel_1_2881 = p2600_sel_1;
  end

  assign cont_bits_56 = cont_bits_29[sel_1_2881];

  assign sel_1_2882 = (tmp_17 == 1'b0 ? sel_1_2876 :
              cont_bits_56);

  assign sel_11957 = 1'b0;

  assign sel_11958 = 1'b0;

  always @(is_SPI_MNGR_36, sel_11626, sel_11627, sel_11628, sel_11629, sel_11630,
       sel_11631, sel_11632, sel_11633, sel_11634, sel_11635, sel_11636,
       sel_11957, sel_11958, sel_1_2807, sel_1_2882) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p294_sel_1 = sel_11957;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p294_sel_1 = sel_1_2882;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p294_sel_1 = sel_1_2807;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p294_sel_1 = sel_11636;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p294_sel_1 = sel_11635;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p294_sel_1 = sel_11634;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p294_sel_1 = sel_11633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p294_sel_1 = sel_11632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p294_sel_1 = sel_11631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p294_sel_1 = sel_11630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p294_sel_1 = sel_11629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p294_sel_1 = sel_11628;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p294_sel_1 = sel_11627;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p294_sel_1 = sel_11626;
        end
      default :
        begin
          p294_sel_1 = sel_11958;
        end
    endcase
    sel_1_2883 = p294_sel_1;
  end

  assign sel_11959 = 1'b0;

  assign sel_11960 = 1'b0;

  assign sel_11961 = 1'b0;

  assign sel_11962 = 1'b0;

  assign sel_11963 = 1'b0;

  assign sel_11964 = 1'b0;

  assign sel_11965 = 1'b0;

  assign sel_11966 = 1'b0;

  assign sel_11967 = 1'b0;

  assign sel_11968 = 1'b0;

  assign sel_11969 = 1'b0;

  assign sel_11970 = 1'b0;

  assign s_844 = 1'b1;

  assign sel_2_1645 = (s_13 == 1'b0 ? sel_11970 :
              s_844);

  assign s_845 = 1'b1;

  assign sel_2_1646 = (s_14 == 1'b0 ? sel_2_1645 :
              s_845);

  assign s_846 = 1'b1;

  assign sel_2_1647 = (s_15 == 1'b0 ? sel_2_1646 :
              s_846);

  assign s_847 = 1'b1;

  assign sel_2_1648 = (s_16 == 1'b0 ? sel_2_1647 :
              s_847);

  assign s_848 = 1'b1;

  assign sel_2_1649 = (s_17 == 1'b0 ? sel_2_1648 :
              s_848);

  assign s_849 = 1'b1;

  assign sel_2_1650 = (s_18 == 1'b0 ? sel_2_1649 :
              s_849);

  assign s_850 = 1'b1;

  assign sel_2_1651 = (s_19 == 1'b0 ? sel_2_1650 :
              s_850);

  assign s_851 = 1'b1;

  assign sel_2_1652 = (s_20 == 1'b0 ? sel_2_1651 :
              s_851);

  assign sel_11971 = 1'b0;

  assign sel_11972 = 1'b0;

  assign sel_11973 = 1'b0;

  assign s_852 = 1'b1;

  assign sel_2_1653 = (tmp_3 == 1'b0 ? sel_11973 :
              s_852);

  assign s_853 = 1'b1;

  assign sel_2_1654 = (tmp_5 == 1'b0 ? sel_2_1653 :
              s_853);

  assign s_854 = 1'b1;

  assign sel_2_1655 = (tmp_7 == 1'b0 ? sel_2_1654 :
              s_854);

  assign s_855 = 1'b1;

  assign sel_2_1656 = (tmp_9 == 1'b0 ? sel_2_1655 :
              s_855);

  assign s_856 = 1'b1;

  assign sel_2_1657 = (tmp_11 == 1'b0 ? sel_2_1656 :
              s_856);

  assign s_857 = 1'b1;

  assign sel_2_1658 = (tmp_13 == 1'b0 ? sel_2_1657 :
              s_857);

  assign s_858 = 1'b1;

  assign sel_2_1659 = (tmp_15 == 1'b0 ? sel_2_1658 :
              s_858);

  assign s_859 = 1'b1;

  assign sel_2_1660 = (tmp_17 == 1'b0 ? sel_2_1659 :
              s_859);

  assign sel_2_1661 = (s_10 == 1'b0 ? sel_11972 :
              sel_2_1660);

  assign sel_2_1662 = (s_11 == 1'b0 ? sel_11971 :
              sel_2_1661);

  assign sel_11974 = 1'b0;

  assign sel_2_1663 = (s_12 == 1'b0 ? sel_2_1662 :
              sel_11974);

  assign sel_11975 = 1'b0;

  assign sel_11976 = 1'b0;

  always @(is_SPI_MNGR_36, sel_11959, sel_11960, sel_11961, sel_11962, sel_11963,
       sel_11964, sel_11965, sel_11966, sel_11967, sel_11968, sel_11969,
       sel_11975, sel_11976, sel_2_1652, sel_2_1663) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p279_sel_2 = sel_11975;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p279_sel_2 = sel_2_1663;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p279_sel_2 = sel_2_1652;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p279_sel_2 = sel_11969;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p279_sel_2 = sel_11968;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p279_sel_2 = sel_11967;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p279_sel_2 = sel_11966;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p279_sel_2 = sel_11965;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p279_sel_2 = sel_11964;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p279_sel_2 = sel_11963;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p279_sel_2 = sel_11962;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p279_sel_2 = sel_11961;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p279_sel_2 = sel_11960;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p279_sel_2 = sel_11959;
        end
      default :
        begin
          p279_sel_2 = sel_11976;
        end
    endcase
    sel_2_1664 = p279_sel_2;
  end

  always @* begin
    p7952payload_payload[0] = payload[0];
    if (sel_2_20) begin
      p7952payload_payload[0] = sel_1_15;
    end
    payload_1[0] = p7952payload_payload[0];
    payload_1[1] = payload[1];
    payload_1[2] = payload[2];
    payload_1[3] = payload[3];
    payload_1[4] = payload[4];
    payload_1[5] = payload[5];
    payload_1[6] = payload[6];
    payload_1[7] = payload[7];
    payload_1[8] = payload[8];
    payload_1[9] = payload[9];
    payload_1[10] = payload[10];
    payload_1[11] = payload[11];
    payload_1[12] = payload[12];
    payload_1[13] = payload[13];
    payload_1[14] = payload[14];
    payload_1[15] = payload[15];
  end

  always @* begin
    p7596payload_payload[1] = payload_1[1];
    if (sel_2_40) begin
      p7596payload_payload[1] = tmp_80;
    end
    payload_2[0] = payload_1[0];
    payload_2[1] = p7596payload_payload[1];
    payload_2[2] = payload_1[2];
    payload_2[3] = payload_1[3];
    payload_2[4] = payload_1[4];
    payload_2[5] = payload_1[5];
    payload_2[6] = payload_1[6];
    payload_2[7] = payload_1[7];
    payload_2[8] = payload_1[8];
    payload_2[9] = payload_1[9];
    payload_2[10] = payload_1[10];
    payload_2[11] = payload_1[11];
    payload_2[12] = payload_1[12];
    payload_2[13] = payload_1[13];
    payload_2[14] = payload_1[14];
    payload_2[15] = payload_1[15];
  end

  always @* begin
    p7278payload_payload[2] = payload_2[2];
    if (sel_2_60) begin
      p7278payload_payload[2] = tmp_81;
    end
    payload_3[0] = payload_2[0];
    payload_3[1] = payload_2[1];
    payload_3[2] = p7278payload_payload[2];
    payload_3[3] = payload_2[3];
    payload_3[4] = payload_2[4];
    payload_3[5] = payload_2[5];
    payload_3[6] = payload_2[6];
    payload_3[7] = payload_2[7];
    payload_3[8] = payload_2[8];
    payload_3[9] = payload_2[9];
    payload_3[10] = payload_2[10];
    payload_3[11] = payload_2[11];
    payload_3[12] = payload_2[12];
    payload_3[13] = payload_2[13];
    payload_3[14] = payload_2[14];
    payload_3[15] = payload_2[15];
  end

  always @* begin
    p6958payload_payload[3] = payload_3[3];
    if (sel_2_80) begin
      p6958payload_payload[3] = tmp_82;
    end
    payload_4[0] = payload_3[0];
    payload_4[1] = payload_3[1];
    payload_4[2] = payload_3[2];
    payload_4[3] = p6958payload_payload[3];
    payload_4[4] = payload_3[4];
    payload_4[5] = payload_3[5];
    payload_4[6] = payload_3[6];
    payload_4[7] = payload_3[7];
    payload_4[8] = payload_3[8];
    payload_4[9] = payload_3[9];
    payload_4[10] = payload_3[10];
    payload_4[11] = payload_3[11];
    payload_4[12] = payload_3[12];
    payload_4[13] = payload_3[13];
    payload_4[14] = payload_3[14];
    payload_4[15] = payload_3[15];
  end

  always @* begin
    p707payload_payload[4] = payload_4[4];
    if (sel_2_1444) begin
      p707payload_payload[4] = sel_1_1486;
    end
    payload_5[0] = payload_4[0];
    payload_5[1] = payload_4[1];
    payload_5[2] = payload_4[2];
    payload_5[3] = payload_4[3];
    payload_5[4] = p707payload_payload[4];
    payload_5[5] = payload_4[5];
    payload_5[6] = payload_4[6];
    payload_5[7] = payload_4[7];
    payload_5[8] = payload_4[8];
    payload_5[9] = payload_4[9];
    payload_5[10] = payload_4[10];
    payload_5[11] = payload_4[11];
    payload_5[12] = payload_4[12];
    payload_5[13] = payload_4[13];
    payload_5[14] = payload_4[14];
    payload_5[15] = payload_4[15];
  end

  always @* begin
    p644payload_payload[5] = payload_5[5];
    if (sel_2_1464) begin
      p644payload_payload[5] = sel_1_1613;
    end
    payload_6[0] = payload_5[0];
    payload_6[1] = payload_5[1];
    payload_6[2] = payload_5[2];
    payload_6[3] = payload_5[3];
    payload_6[4] = payload_5[4];
    payload_6[5] = p644payload_payload[5];
    payload_6[6] = payload_5[6];
    payload_6[7] = payload_5[7];
    payload_6[8] = payload_5[8];
    payload_6[9] = payload_5[9];
    payload_6[10] = payload_5[10];
    payload_6[11] = payload_5[11];
    payload_6[12] = payload_5[12];
    payload_6[13] = payload_5[13];
    payload_6[14] = payload_5[14];
    payload_6[15] = payload_5[15];
  end

  always @* begin
    p583payload_payload[6] = payload_6[6];
    if (sel_2_1484) begin
      p583payload_payload[6] = sel_1_1740;
    end
    payload_7[0] = payload_6[0];
    payload_7[1] = payload_6[1];
    payload_7[2] = payload_6[2];
    payload_7[3] = payload_6[3];
    payload_7[4] = payload_6[4];
    payload_7[5] = payload_6[5];
    payload_7[6] = p583payload_payload[6];
    payload_7[7] = payload_6[7];
    payload_7[8] = payload_6[8];
    payload_7[9] = payload_6[9];
    payload_7[10] = payload_6[10];
    payload_7[11] = payload_6[11];
    payload_7[12] = payload_6[12];
    payload_7[13] = payload_6[13];
    payload_7[14] = payload_6[14];
    payload_7[15] = payload_6[15];
  end

  always @* begin
    p526payload_payload[7] = payload_7[7];
    if (sel_2_1504) begin
      p526payload_payload[7] = sel_1_1867;
    end
    payload_8[0] = payload_7[0];
    payload_8[1] = payload_7[1];
    payload_8[2] = payload_7[2];
    payload_8[3] = payload_7[3];
    payload_8[4] = payload_7[4];
    payload_8[5] = payload_7[5];
    payload_8[6] = payload_7[6];
    payload_8[7] = p526payload_payload[7];
    payload_8[8] = payload_7[8];
    payload_8[9] = payload_7[9];
    payload_8[10] = payload_7[10];
    payload_8[11] = payload_7[11];
    payload_8[12] = payload_7[12];
    payload_8[13] = payload_7[13];
    payload_8[14] = payload_7[14];
    payload_8[15] = payload_7[15];
  end

  always @* begin
    p495payload_payload[8] = payload_8[8];
    if (sel_2_1524) begin
      p495payload_payload[8] = sel_1_1994;
    end
    payload_9[0] = payload_8[0];
    payload_9[1] = payload_8[1];
    payload_9[2] = payload_8[2];
    payload_9[3] = payload_8[3];
    payload_9[4] = payload_8[4];
    payload_9[5] = payload_8[5];
    payload_9[6] = payload_8[6];
    payload_9[7] = payload_8[7];
    payload_9[8] = p495payload_payload[8];
    payload_9[9] = payload_8[9];
    payload_9[10] = payload_8[10];
    payload_9[11] = payload_8[11];
    payload_9[12] = payload_8[12];
    payload_9[13] = payload_8[13];
    payload_9[14] = payload_8[14];
    payload_9[15] = payload_8[15];
  end

  always @* begin
    p464payload_payload[9] = payload_9[9];
    if (sel_2_1544) begin
      p464payload_payload[9] = sel_1_2121;
    end
    payload_10[0] = payload_9[0];
    payload_10[1] = payload_9[1];
    payload_10[2] = payload_9[2];
    payload_10[3] = payload_9[3];
    payload_10[4] = payload_9[4];
    payload_10[5] = payload_9[5];
    payload_10[6] = payload_9[6];
    payload_10[7] = payload_9[7];
    payload_10[8] = payload_9[8];
    payload_10[9] = p464payload_payload[9];
    payload_10[10] = payload_9[10];
    payload_10[11] = payload_9[11];
    payload_10[12] = payload_9[12];
    payload_10[13] = payload_9[13];
    payload_10[14] = payload_9[14];
    payload_10[15] = payload_9[15];
  end

  always @* begin
    p433payload_payload[10] = payload_10[10];
    if (sel_2_1564) begin
      p433payload_payload[10] = sel_1_2248;
    end
    payload_11[0] = payload_10[0];
    payload_11[1] = payload_10[1];
    payload_11[2] = payload_10[2];
    payload_11[3] = payload_10[3];
    payload_11[4] = payload_10[4];
    payload_11[5] = payload_10[5];
    payload_11[6] = payload_10[6];
    payload_11[7] = payload_10[7];
    payload_11[8] = payload_10[8];
    payload_11[9] = payload_10[9];
    payload_11[10] = p433payload_payload[10];
    payload_11[11] = payload_10[11];
    payload_11[12] = payload_10[12];
    payload_11[13] = payload_10[13];
    payload_11[14] = payload_10[14];
    payload_11[15] = payload_10[15];
  end

  always @* begin
    p402payload_payload[11] = payload_11[11];
    if (sel_2_1584) begin
      p402payload_payload[11] = sel_1_2375;
    end
    payload_12[0] = payload_11[0];
    payload_12[1] = payload_11[1];
    payload_12[2] = payload_11[2];
    payload_12[3] = payload_11[3];
    payload_12[4] = payload_11[4];
    payload_12[5] = payload_11[5];
    payload_12[6] = payload_11[6];
    payload_12[7] = payload_11[7];
    payload_12[8] = payload_11[8];
    payload_12[9] = payload_11[9];
    payload_12[10] = payload_11[10];
    payload_12[11] = p402payload_payload[11];
    payload_12[12] = payload_11[12];
    payload_12[13] = payload_11[13];
    payload_12[14] = payload_11[14];
    payload_12[15] = payload_11[15];
  end

  always @* begin
    p371payload_payload[12] = payload_12[12];
    if (sel_2_1604) begin
      p371payload_payload[12] = sel_1_2502;
    end
    payload_13[0] = payload_12[0];
    payload_13[1] = payload_12[1];
    payload_13[2] = payload_12[2];
    payload_13[3] = payload_12[3];
    payload_13[4] = payload_12[4];
    payload_13[5] = payload_12[5];
    payload_13[6] = payload_12[6];
    payload_13[7] = payload_12[7];
    payload_13[8] = payload_12[8];
    payload_13[9] = payload_12[9];
    payload_13[10] = payload_12[10];
    payload_13[11] = payload_12[11];
    payload_13[12] = p371payload_payload[12];
    payload_13[13] = payload_12[13];
    payload_13[14] = payload_12[14];
    payload_13[15] = payload_12[15];
  end

  always @* begin
    p340payload_payload[13] = payload_13[13];
    if (sel_2_1624) begin
      p340payload_payload[13] = sel_1_2629;
    end
    payload_14[0] = payload_13[0];
    payload_14[1] = payload_13[1];
    payload_14[2] = payload_13[2];
    payload_14[3] = payload_13[3];
    payload_14[4] = payload_13[4];
    payload_14[5] = payload_13[5];
    payload_14[6] = payload_13[6];
    payload_14[7] = payload_13[7];
    payload_14[8] = payload_13[8];
    payload_14[9] = payload_13[9];
    payload_14[10] = payload_13[10];
    payload_14[11] = payload_13[11];
    payload_14[12] = payload_13[12];
    payload_14[13] = p340payload_payload[13];
    payload_14[14] = payload_13[14];
    payload_14[15] = payload_13[15];
  end

  always @* begin
    p309payload_payload[14] = payload_14[14];
    if (sel_2_1644) begin
      p309payload_payload[14] = sel_1_2756;
    end
    payload_15[0] = payload_14[0];
    payload_15[1] = payload_14[1];
    payload_15[2] = payload_14[2];
    payload_15[3] = payload_14[3];
    payload_15[4] = payload_14[4];
    payload_15[5] = payload_14[5];
    payload_15[6] = payload_14[6];
    payload_15[7] = payload_14[7];
    payload_15[8] = payload_14[8];
    payload_15[9] = payload_14[9];
    payload_15[10] = payload_14[10];
    payload_15[11] = payload_14[11];
    payload_15[12] = payload_14[12];
    payload_15[13] = payload_14[13];
    payload_15[14] = p309payload_payload[14];
    payload_15[15] = payload_14[15];
  end

  always @* begin
    p174tmp_tmp[15] = payload_15[15];
    if (sel_2_1664) begin
      p174tmp_tmp[15] = sel_1_2883;
    end
    tmp_347[0] = payload_15[0];
    tmp_347[1] = payload_15[1];
    tmp_347[2] = payload_15[2];
    tmp_347[3] = payload_15[3];
    tmp_347[4] = payload_15[4];
    tmp_347[5] = payload_15[5];
    tmp_347[6] = payload_15[6];
    tmp_347[7] = payload_15[7];
    tmp_347[8] = payload_15[8];
    tmp_347[9] = payload_15[9];
    tmp_347[10] = payload_15[10];
    tmp_347[11] = payload_15[11];
    tmp_347[12] = payload_15[12];
    tmp_347[13] = payload_15[13];
    tmp_347[14] = payload_15[14];
    tmp_347[15] = p174tmp_tmp[15];
  end

  always @(posedge clk)
    begin : payload_reg_process
      if (rst == 1'b1) begin
        payload <= {16{1'b0}};
      end
      else begin
        if (enb) begin
          payload <= tmp_347;
        end
      end
    end

  assign tmp_348 = {16'b0, cnt_1};

  assign s_860 = tmp_348 - 32'sd1;

  assign tmp_349 = {16'b0, cnt_1};

  assign s_861 = tmp_349 - 32'sd1;

  assign tmp_350 = {16'b0, cnt_1};

  assign s_862 = tmp_350 - 32'sd1;

  assign tmp_351 = {16'b0, cnt_1};

  assign s_863 = tmp_351 - 32'sd1;

  assign tmp_352 = {16'b0, cnt_1};

  assign s_864 = tmp_352 - 32'sd1;

  assign tmp_353 = {16'b0, cnt_1};

  assign s_865 = tmp_353 - 32'sd1;

  assign tmp_354 = {16'b0, cnt_1};

  assign s_866 = tmp_354 - 32'sd1;

  assign tmp_355 = {16'b0, cnt_1};

  assign s_867 = tmp_355 - 32'sd1;

  assign s_868 = 32'sd3;

  assign sel_11977 = 32'sd0;

  assign sel_1_2884 = (s_24 == 1'b0 ? s_868 :
              sel_11977);

  assign s_869 = 32'sd6;

  assign sel_1_2885 = (s_25 == 1'b0 ? sel_1_2884 :
              s_869);

  assign tmp_356 = {16'b0, cnt_1};

  assign s_870 = tmp_356 - 32'sd1;

  assign tmp_357 = {16'b0, tmp_36};

  assign tmp_358 = tmp_357 - 32'sd1;

  assign sel_11978 = 32'sd0;

  assign sel_1_2886 = (s_21 == 1'b0 ? tmp_358 :
              sel_11978);

  assign sel_1_2887 = (s_22 == 1'b0 ? s_870 :
              sel_1_2886);

  assign sel_11979 = 32'sd0;

  assign sel_11980 = 32'sd0;

  assign sel_11981 = 32'sd0;

  assign sel_11982 = 32'sd0;

  assign s_871 = 32'sd8;

  assign sel_1_2888 = (s_8 == 1'b0 ? sel_11982 :
              s_871);

  assign tmp_359 = {16'b0, cnt_1};

  assign s_872 = tmp_359 - 32'sd1;

  always @(is_SPI_MNGR_36, s_860, s_861, s_862, s_863, s_864, s_865, s_866, s_867, s_872,
       sel_11979, sel_11980, sel_11981, sel_1_2885, sel_1_2887, sel_1_2888) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8224_sel_1 = sel_1_2888;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8224_sel_1 = sel_11981;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8224_sel_1 = sel_11980;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8224_sel_1 = sel_11979;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8224_sel_1 = sel_1_2887;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8224_sel_1 = sel_1_2885;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8224_sel_1 = s_867;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8224_sel_1 = s_866;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8224_sel_1 = s_865;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8224_sel_1 = s_864;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8224_sel_1 = s_863;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8224_sel_1 = s_862;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8224_sel_1 = s_861;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8224_sel_1 = s_860;
        end
      default :
        begin
          p8224_sel_1 = s_872;
        end
    endcase
    sel_1_2889 = p8224_sel_1;
  end

  assign SDI_1 = payload[sel_1_2889];

  assign tmp_360 = (s_27 == 1'b0 ? SDI_1 :
              SDI_1);

  assign SDI_2 = 1'b0;

  assign SDI_3 = 1'b0;

  assign SDI_4 = 1'b0;

  assign SDI_5 = 1'b0;

  assign tmp_361 = (s_8 == 1'b0 ? SDI_6 :
              SDI_5);

  assign tmp_362 = (s_9 == 1'b0 ? SDI_6 :
              SDI_4);

  assign tmp_363 = (s_10 == 1'b0 ? tmp_362 :
              SDI_6);

  assign tmp_364 = (s_11 == 1'b0 ? SDI_6 :
              tmp_363);

  assign tmp_365 = (s_12 == 1'b0 ? tmp_364 :
              SDI_6);

  assign tmp_366 = (s_21 == 1'b0 ? SDI_1 :
              SDI_6);

  assign tmp_367 = (s_22 == 1'b0 ? SDI_1 :
              tmp_366);

  always @(posedge clk)
    begin : SDI_reg_process
      if (rst == 1'b1) begin
        SDI_6 <= 1'b0;
      end
      else begin
        if (enb) begin
          SDI_6 <= tmp_368;
        end
      end
    end

  assign tmp_369 = (s_24 == 1'b0 ? SDI_2 :
              SDI_6);

  assign tmp_370 = (s_25 == 1'b0 ? tmp_369 :
              SDI_3);

  always @(SDI_1, SDI_6, is_SPI_MNGR_36, tmp_360, tmp_361, tmp_365, tmp_367, tmp_370) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p81_tmp = tmp_361;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p81_tmp = tmp_365;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p81_tmp = SDI_6;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p81_tmp = SDI_6;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p81_tmp = tmp_367;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p81_tmp = tmp_370;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p81_tmp = tmp_360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p81_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p81_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p81_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p81_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p81_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p81_tmp = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p81_tmp = SDI_1;
        end
      default :
        begin
          p81_tmp = SDI_1;
        end
    endcase
    tmp_368 = p81_tmp;
  end

  assign SDI = tmp_368;

  // Gateway: SPI_DAC/SPI_MNGR
  // During: SPI_DAC/SPI_MNGR
  assign SCK_1 = 1'b0;

  assign SCK_2 = 1'b0;

  assign SCK_3 = 1'b0;

  assign SCK_4 = 1'b0;

  assign SCK_5 = 1'b0;

  assign SCK_6 = 1'b0;

  assign SCK_7 = 1'b0;

  assign SCK_8 = 1'b0;

  assign SCK_9 = 1'b1;

  assign tmp_371 = (s_26 == 1'b0 ? SCK_8 :
              SCK_9);

  assign SCK_10 = 1'b0;

  assign tmp_372 = (s_27 == 1'b0 ? tmp_371 :
              SCK_10);

  assign SCK_11 = 1'b0;

  assign SCK_12 = 1'b1;

  assign SCK_13 = 1'b1;

  assign tmp_373 = (s_23 == 1'b0 ? SCK_12 :
              SCK_13);

  assign SCK_14 = 1'b0;

  assign SCK_15 = 1'b0;

  assign tmp_374 = (s_21 == 1'b0 ? SCK_14 :
              SCK_15);

  assign tmp_375 = (s_22 == 1'b0 ? tmp_373 :
              tmp_374);

  assign SCK_16 = 1'b0;

  assign SCK_17 = 1'b0;

  assign SCK_18 = 1'b0;

  assign tmp_376 = (s_7 == 1'b0 ? SCK_17 :
              SCK_18);

  assign SCK_19 = 1'b0;

  assign tmp_377 = (s_8 == 1'b0 ? tmp_376 :
              SCK_20);

  assign tmp_378 = (s_9 == 1'b0 ? SCK_20 :
              SCK_16);

  assign tmp_379 = (s_10 == 1'b0 ? tmp_378 :
              SCK_20);

  assign tmp_380 = (s_11 == 1'b0 ? SCK_20 :
              tmp_379);

  assign tmp_381 = (s_12 == 1'b0 ? tmp_380 :
              SCK_20);

  always @(posedge clk)
    begin : SCK_reg_process
      if (rst == 1'b1) begin
        SCK_20 <= 1'b0;
      end
      else begin
        if (enb) begin
          SCK_20 <= tmp_382;
        end
      end
    end

  assign tmp_383 = (s_24 == 1'b0 ? SCK_20 :
              SCK_11);

  assign tmp_384 = (s_25 == 1'b0 ? tmp_383 :
              SCK_20);

  always @(SCK_1, SCK_19, SCK_2, SCK_20, SCK_3, SCK_4, SCK_5, SCK_6, SCK_7,
       is_SPI_MNGR_36, tmp_372, tmp_375, tmp_377, tmp_381, tmp_384) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p84_tmp = tmp_377;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p84_tmp = tmp_381;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p84_tmp = SCK_20;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p84_tmp = SCK_20;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p84_tmp = tmp_375;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p84_tmp = tmp_384;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p84_tmp = tmp_372;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p84_tmp = SCK_7;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p84_tmp = SCK_6;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p84_tmp = SCK_5;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p84_tmp = SCK_4;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p84_tmp = SCK_3;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p84_tmp = SCK_2;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p84_tmp = SCK_1;
        end
      default :
        begin
          p84_tmp = SCK_19;
        end
    endcase
    tmp_382 = p84_tmp;
  end

  assign SCK = tmp_382;

  assign nCS1_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : nCS1_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        nCS1_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS1_reg_ctrl_delay_out <= nCS1_reg_ctrl_const_out;
        end
      end
    end

  assign nCS1_reg_Initial_Val_out = 1'b1;

  assign nCS1_1 = 1'b1;

  assign nCS1_2 = 1'b1;

  assign nCS1_3 = 1'b1;

  assign nCS1_4 = 1'b1;

  assign nCS1_5 = 1'b1;

  assign nCS1_6 = 1'b1;

  assign nCS1_7 = 1'b1;

  assign nCS1_8 = 1'b1;

  assign nCS1_9 = 1'b0;

  assign nCS1_10 = 1'b0;

  assign nCS1_11 = 1'b1;

  assign nCS1_12 = 1'b1;

  assign nCS1_13 = 1'b1;

  assign nCS1_14 = 1'b1;

  assign nCS1_15 = 1'b1;

  assign nCS1_16 = 1'b1;

  assign nCS1_17 = 1'b1;

  assign nCS1_18 = 1'b0;

  assign nCS1_19 = 1'b0;

  assign nCS1_20 = 1'b1;

  assign tmp_385 = (s_8 == 1'b0 ? nCS1_21 :
              nCS1_20);

  assign tmp_386 = (tmp_3 == 1'b0 ? nCS1_21 :
              nCS1_12);

  assign tmp_387 = (tmp_5 == 1'b0 ? tmp_386 :
              nCS1_13);

  assign tmp_388 = (tmp_7 == 1'b0 ? tmp_387 :
              nCS1_14);

  assign tmp_389 = (tmp_9 == 1'b0 ? tmp_388 :
              nCS1_15);

  assign tmp_390 = (tmp_11 == 1'b0 ? tmp_389 :
              nCS1_16);

  assign tmp_391 = (tmp_13 == 1'b0 ? tmp_390 :
              nCS1_17);

  assign tmp_392 = (tmp_15 == 1'b0 ? tmp_391 :
              nCS1_18);

  assign tmp_393 = (tmp_17 == 1'b0 ? tmp_392 :
              nCS1_19);

  assign tmp_394 = (s_9 == 1'b0 ? nCS1_21 :
              nCS1_11);

  assign tmp_395 = (s_10 == 1'b0 ? tmp_394 :
              tmp_393);

  assign tmp_396 = (s_11 == 1'b0 ? nCS1_21 :
              tmp_395);

  assign tmp_397 = (s_12 == 1'b0 ? tmp_396 :
              nCS1_21);

  assign tmp_398 = (s_13 == 1'b0 ? nCS1_21 :
              nCS1_3);

  assign tmp_399 = (s_14 == 1'b0 ? tmp_398 :
              nCS1_4);

  assign tmp_400 = (s_15 == 1'b0 ? tmp_399 :
              nCS1_5);

  assign tmp_401 = (s_16 == 1'b0 ? tmp_400 :
              nCS1_6);

  assign tmp_402 = (s_17 == 1'b0 ? tmp_401 :
              nCS1_7);

  assign tmp_403 = (s_18 == 1'b0 ? tmp_402 :
              nCS1_8);

  assign tmp_404 = (s_19 == 1'b0 ? tmp_403 :
              nCS1_9);

  assign tmp_405 = (s_20 == 1'b0 ? tmp_404 :
              nCS1_10);

  assign tmp_406 = (s_24 == 1'b0 ? nCS1_1 :
              nCS1_21);

  assign tmp_407 = (s_25 == 1'b0 ? tmp_406 :
              nCS1_2);

  always @(posedge clk)
    begin : nCS1_reg_process
      if (rst == 1'b1) begin
        nCS1_reg_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS1_reg_out <= tmp_408;
        end
      end
    end

  assign nCS1_21 = (nCS1_reg_ctrl_delay_out == 1'b0 ? nCS1_reg_Initial_Val_out :
              nCS1_reg_out);

  always @(is_SPI_MNGR_36, nCS1_21, tmp_385, tmp_397, tmp_405, tmp_407) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p90_tmp = tmp_385;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p90_tmp = tmp_397;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p90_tmp = tmp_405;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p90_tmp = tmp_407;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p90_tmp = nCS1_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p90_tmp = nCS1_21;
        end
      default :
        begin
          p90_tmp = nCS1_21;
        end
    endcase
    tmp_408 = p90_tmp;
  end

  assign nCS1 = tmp_408;

  assign nCS2_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : nCS2_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        nCS2_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS2_reg_ctrl_delay_out <= nCS2_reg_ctrl_const_out;
        end
      end
    end

  assign nCS2_reg_Initial_Val_out = 1'b1;

  assign nCS2_1 = 1'b1;

  assign nCS2_2 = 1'b1;

  assign nCS2_3 = 1'b1;

  assign nCS2_4 = 1'b1;

  assign nCS2_5 = 1'b1;

  assign nCS2_6 = 1'b1;

  assign nCS2_7 = 1'b0;

  assign nCS2_8 = 1'b0;

  assign nCS2_9 = 1'b1;

  assign nCS2_10 = 1'b1;

  assign nCS2_11 = 1'b1;

  assign nCS2_12 = 1'b1;

  assign nCS2_13 = 1'b1;

  assign nCS2_14 = 1'b1;

  assign nCS2_15 = 1'b1;

  assign nCS2_16 = 1'b0;

  assign nCS2_17 = 1'b0;

  assign nCS2_18 = 1'b1;

  assign nCS2_19 = 1'b1;

  assign nCS2_20 = 1'b1;

  assign tmp_409 = (s_8 == 1'b0 ? nCS2_21 :
              nCS2_20);

  assign tmp_410 = (tmp_3 == 1'b0 ? nCS2_21 :
              nCS2_12);

  assign tmp_411 = (tmp_5 == 1'b0 ? tmp_410 :
              nCS2_13);

  assign tmp_412 = (tmp_7 == 1'b0 ? tmp_411 :
              nCS2_14);

  assign tmp_413 = (tmp_9 == 1'b0 ? tmp_412 :
              nCS2_15);

  assign tmp_414 = (tmp_11 == 1'b0 ? tmp_413 :
              nCS2_16);

  assign tmp_415 = (tmp_13 == 1'b0 ? tmp_414 :
              nCS2_17);

  assign tmp_416 = (tmp_15 == 1'b0 ? tmp_415 :
              nCS2_18);

  assign tmp_417 = (tmp_17 == 1'b0 ? tmp_416 :
              nCS2_19);

  assign tmp_418 = (s_9 == 1'b0 ? nCS2_21 :
              nCS2_11);

  assign tmp_419 = (s_10 == 1'b0 ? tmp_418 :
              tmp_417);

  assign tmp_420 = (s_11 == 1'b0 ? nCS2_21 :
              tmp_419);

  assign tmp_421 = (s_12 == 1'b0 ? tmp_420 :
              nCS2_21);

  assign tmp_422 = (s_13 == 1'b0 ? nCS2_21 :
              nCS2_3);

  assign tmp_423 = (s_14 == 1'b0 ? tmp_422 :
              nCS2_4);

  assign tmp_424 = (s_15 == 1'b0 ? tmp_423 :
              nCS2_5);

  assign tmp_425 = (s_16 == 1'b0 ? tmp_424 :
              nCS2_6);

  assign tmp_426 = (s_17 == 1'b0 ? tmp_425 :
              nCS2_7);

  assign tmp_427 = (s_18 == 1'b0 ? tmp_426 :
              nCS2_8);

  assign tmp_428 = (s_19 == 1'b0 ? tmp_427 :
              nCS2_9);

  assign tmp_429 = (s_20 == 1'b0 ? tmp_428 :
              nCS2_10);

  assign tmp_430 = (s_24 == 1'b0 ? nCS2_1 :
              nCS2_21);

  assign tmp_431 = (s_25 == 1'b0 ? tmp_430 :
              nCS2_2);

  always @(posedge clk)
    begin : nCS2_reg_process
      if (rst == 1'b1) begin
        nCS2_reg_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS2_reg_out <= tmp_432;
        end
      end
    end

  assign nCS2_21 = (nCS2_reg_ctrl_delay_out == 1'b0 ? nCS2_reg_Initial_Val_out :
              nCS2_reg_out);

  always @(is_SPI_MNGR_36, nCS2_21, tmp_409, tmp_421, tmp_429, tmp_431) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p93_tmp = tmp_409;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p93_tmp = tmp_421;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p93_tmp = tmp_429;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p93_tmp = tmp_431;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p93_tmp = nCS2_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p93_tmp = nCS2_21;
        end
      default :
        begin
          p93_tmp = nCS2_21;
        end
    endcase
    tmp_432 = p93_tmp;
  end

  assign nCS2 = tmp_432;

  assign nCS3_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : nCS3_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        nCS3_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS3_reg_ctrl_delay_out <= nCS3_reg_ctrl_const_out;
        end
      end
    end

  assign nCS3_reg_Initial_Val_out = 1'b1;

  assign nCS3_1 = 1'b1;

  assign nCS3_2 = 1'b1;

  assign nCS3_3 = 1'b1;

  assign nCS3_4 = 1'b1;

  assign nCS3_5 = 1'b0;

  assign nCS3_6 = 1'b0;

  assign nCS3_7 = 1'b1;

  assign nCS3_8 = 1'b1;

  assign nCS3_9 = 1'b1;

  assign nCS3_10 = 1'b1;

  assign nCS3_11 = 1'b1;

  assign nCS3_12 = 1'b1;

  assign nCS3_13 = 1'b1;

  assign nCS3_14 = 1'b0;

  assign nCS3_15 = 1'b0;

  assign nCS3_16 = 1'b1;

  assign nCS3_17 = 1'b1;

  assign nCS3_18 = 1'b1;

  assign nCS3_19 = 1'b1;

  assign nCS3_20 = 1'b1;

  assign tmp_433 = (s_8 == 1'b0 ? nCS3_21 :
              nCS3_20);

  assign tmp_434 = (tmp_3 == 1'b0 ? nCS3_21 :
              nCS3_12);

  assign tmp_435 = (tmp_5 == 1'b0 ? tmp_434 :
              nCS3_13);

  assign tmp_436 = (tmp_7 == 1'b0 ? tmp_435 :
              nCS3_14);

  assign tmp_437 = (tmp_9 == 1'b0 ? tmp_436 :
              nCS3_15);

  assign tmp_438 = (tmp_11 == 1'b0 ? tmp_437 :
              nCS3_16);

  assign tmp_439 = (tmp_13 == 1'b0 ? tmp_438 :
              nCS3_17);

  assign tmp_440 = (tmp_15 == 1'b0 ? tmp_439 :
              nCS3_18);

  assign tmp_441 = (tmp_17 == 1'b0 ? tmp_440 :
              nCS3_19);

  assign tmp_442 = (s_9 == 1'b0 ? nCS3_21 :
              nCS3_11);

  assign tmp_443 = (s_10 == 1'b0 ? tmp_442 :
              tmp_441);

  assign tmp_444 = (s_11 == 1'b0 ? nCS3_21 :
              tmp_443);

  assign tmp_445 = (s_12 == 1'b0 ? tmp_444 :
              nCS3_21);

  assign tmp_446 = (s_13 == 1'b0 ? nCS3_21 :
              nCS3_3);

  assign tmp_447 = (s_14 == 1'b0 ? tmp_446 :
              nCS3_4);

  assign tmp_448 = (s_15 == 1'b0 ? tmp_447 :
              nCS3_5);

  assign tmp_449 = (s_16 == 1'b0 ? tmp_448 :
              nCS3_6);

  assign tmp_450 = (s_17 == 1'b0 ? tmp_449 :
              nCS3_7);

  assign tmp_451 = (s_18 == 1'b0 ? tmp_450 :
              nCS3_8);

  assign tmp_452 = (s_19 == 1'b0 ? tmp_451 :
              nCS3_9);

  assign tmp_453 = (s_20 == 1'b0 ? tmp_452 :
              nCS3_10);

  assign tmp_454 = (s_24 == 1'b0 ? nCS3_1 :
              nCS3_21);

  assign tmp_455 = (s_25 == 1'b0 ? tmp_454 :
              nCS3_2);

  always @(posedge clk)
    begin : nCS3_reg_process
      if (rst == 1'b1) begin
        nCS3_reg_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS3_reg_out <= tmp_456;
        end
      end
    end

  assign nCS3_21 = (nCS3_reg_ctrl_delay_out == 1'b0 ? nCS3_reg_Initial_Val_out :
              nCS3_reg_out);

  always @(is_SPI_MNGR_36, nCS3_21, tmp_433, tmp_445, tmp_453, tmp_455) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p96_tmp = tmp_433;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p96_tmp = tmp_445;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p96_tmp = tmp_453;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p96_tmp = tmp_455;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p96_tmp = nCS3_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p96_tmp = nCS3_21;
        end
      default :
        begin
          p96_tmp = nCS3_21;
        end
    endcase
    tmp_456 = p96_tmp;
  end

  assign nCS3 = tmp_456;

  assign nCS4_reg_ctrl_const_out = 1'b1;

  always @(posedge clk)
    begin : nCS4_reg_ctrl_delay_process
      if (rst == 1'b1) begin
        nCS4_reg_ctrl_delay_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS4_reg_ctrl_delay_out <= nCS4_reg_ctrl_const_out;
        end
      end
    end

  assign nCS4_reg_Initial_Val_out = 1'b1;

  assign nCS4_1 = 1'b1;

  assign nCS4_2 = 1'b1;

  assign nCS4_3 = 1'b0;

  assign nCS4_4 = 1'b0;

  assign nCS4_5 = 1'b1;

  assign nCS4_6 = 1'b1;

  assign nCS4_7 = 1'b1;

  assign nCS4_8 = 1'b1;

  assign nCS4_9 = 1'b1;

  assign nCS4_10 = 1'b1;

  assign nCS4_11 = 1'b1;

  assign nCS4_12 = 1'b0;

  assign nCS4_13 = 1'b0;

  assign nCS4_14 = 1'b1;

  assign nCS4_15 = 1'b1;

  assign nCS4_16 = 1'b1;

  assign nCS4_17 = 1'b1;

  assign nCS4_18 = 1'b1;

  assign nCS4_19 = 1'b1;

  assign nCS4_20 = 1'b1;

  assign tmp_457 = (s_8 == 1'b0 ? nCS4_21 :
              nCS4_20);

  assign tmp_458 = (tmp_3 == 1'b0 ? nCS4_21 :
              nCS4_12);

  assign tmp_459 = (tmp_5 == 1'b0 ? tmp_458 :
              nCS4_13);

  assign tmp_460 = (tmp_7 == 1'b0 ? tmp_459 :
              nCS4_14);

  assign tmp_461 = (tmp_9 == 1'b0 ? tmp_460 :
              nCS4_15);

  assign tmp_462 = (tmp_11 == 1'b0 ? tmp_461 :
              nCS4_16);

  assign tmp_463 = (tmp_13 == 1'b0 ? tmp_462 :
              nCS4_17);

  assign tmp_464 = (tmp_15 == 1'b0 ? tmp_463 :
              nCS4_18);

  assign tmp_465 = (tmp_17 == 1'b0 ? tmp_464 :
              nCS4_19);

  assign tmp_466 = (s_9 == 1'b0 ? nCS4_21 :
              nCS4_11);

  assign tmp_467 = (s_10 == 1'b0 ? tmp_466 :
              tmp_465);

  assign tmp_468 = (s_11 == 1'b0 ? nCS4_21 :
              tmp_467);

  assign tmp_469 = (s_12 == 1'b0 ? tmp_468 :
              nCS4_21);

  assign tmp_470 = (s_13 == 1'b0 ? nCS4_21 :
              nCS4_3);

  assign tmp_471 = (s_14 == 1'b0 ? tmp_470 :
              nCS4_4);

  assign tmp_472 = (s_15 == 1'b0 ? tmp_471 :
              nCS4_5);

  assign tmp_473 = (s_16 == 1'b0 ? tmp_472 :
              nCS4_6);

  assign tmp_474 = (s_17 == 1'b0 ? tmp_473 :
              nCS4_7);

  assign tmp_475 = (s_18 == 1'b0 ? tmp_474 :
              nCS4_8);

  assign tmp_476 = (s_19 == 1'b0 ? tmp_475 :
              nCS4_9);

  assign tmp_477 = (s_20 == 1'b0 ? tmp_476 :
              nCS4_10);

  assign tmp_478 = (s_24 == 1'b0 ? nCS4_1 :
              nCS4_21);

  assign tmp_479 = (s_25 == 1'b0 ? tmp_478 :
              nCS4_2);

  always @(posedge clk)
    begin : nCS4_reg_process
      if (rst == 1'b1) begin
        nCS4_reg_out <= 1'b0;
      end
      else begin
        if (enb) begin
          nCS4_reg_out <= tmp_480;
        end
      end
    end

  assign nCS4_21 = (nCS4_reg_ctrl_delay_out == 1'b0 ? nCS4_reg_Initial_Val_out :
              nCS4_reg_out);

  always @(is_SPI_MNGR_36, nCS4_21, tmp_457, tmp_469, tmp_477, tmp_479) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p99_tmp = tmp_457;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p99_tmp = tmp_469;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p99_tmp = tmp_477;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p99_tmp = tmp_479;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p99_tmp = nCS4_21;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p99_tmp = nCS4_21;
        end
      default :
        begin
          p99_tmp = nCS4_21;
        end
    endcase
    tmp_480 = p99_tmp;
  end

  assign nCS4 = tmp_480;

  assign sel_11983 = 1'b0;

  assign sel_11984 = 1'b0;

  assign sel_11985 = 1'b0;

  assign sel_11986 = 1'b0;

  assign sel_11987 = 1'b0;

  assign sel_11988 = 1'b0;

  assign sel_11989 = 1'b0;

  assign sel_11990 = 1'b0;

  assign sel_11991 = 32'sd0;

  assign sel_11992 = 32'sd0;

  assign sel_11993 = 32'sd0;

  assign sel_11994 = 32'sd0;

  assign sel_11995 = 32'sd0;

  assign sel_11996 = 32'sd0;

  assign sel_11997 = 32'sd0;

  assign sel_11998 = 32'sd0;

  assign s_873 = 32'sd0;

  assign sel_11999 = 32'sd0;

  assign sel_1_2890 = (s_24 == 1'b0 ? s_873 :
              sel_11999);

  assign s_874 = 32'sd1;

  assign sel_1_2891 = (s_25 == 1'b0 ? sel_1_2890 :
              s_874);

  assign sel_12000 = 32'sd0;

  assign sel_12001 = 32'sd0;

  assign sel_12002 = 32'sd0;

  assign sel_12003 = 32'sd0;

  assign sel_12004 = 32'sd0;

  assign s_875 = 32'sd10;

  assign sel_1_2892 = (s_8 == 1'b0 ? sel_12004 :
              s_875);

  assign sel_12005 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_11991, sel_11992, sel_11993, sel_11994, sel_11995,
       sel_11996, sel_11997, sel_11998, sel_12000, sel_12001, sel_12002,
       sel_12003, sel_12005, sel_1_2891, sel_1_2892) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8080_sel_1 = sel_1_2892;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8080_sel_1 = sel_12003;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8080_sel_1 = sel_12002;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8080_sel_1 = sel_12001;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8080_sel_1 = sel_12000;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8080_sel_1 = sel_1_2891;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8080_sel_1 = sel_11998;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8080_sel_1 = sel_11997;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8080_sel_1 = sel_11996;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8080_sel_1 = sel_11995;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8080_sel_1 = sel_11994;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8080_sel_1 = sel_11993;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8080_sel_1 = sel_11992;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8080_sel_1 = sel_11991;
        end
      default :
        begin
          p8080_sel_1 = sel_12005;
        end
    endcase
    sel_1_2893 = p8080_sel_1;
  end

  assign tmp_481 = payload[sel_1_2893];

  assign sel_12006 = 32'sd0;

  assign sel_12007 = 32'sd0;

  assign sel_12008 = 32'sd0;

  assign sel_12009 = 32'sd0;

  assign sel_12010 = 32'sd0;

  assign sel_12011 = 32'sd0;

  assign sel_12012 = 32'sd0;

  assign sel_12013 = 32'sd0;

  assign s_876 = 32'sd12;

  assign sel_12014 = 32'sd0;

  assign sel_1_2894 = (s_24 == 1'b0 ? s_876 :
              sel_12014);

  assign s_877 = 32'sd0;

  assign sel_1_2895 = (s_25 == 1'b0 ? sel_1_2894 :
              s_877);

  assign sel_12015 = 32'sd0;

  assign sel_12016 = 32'sd0;

  assign sel_12017 = 32'sd0;

  assign sel_12018 = 32'sd0;

  assign sel_12019 = 32'sd0;

  assign s_878 = 32'sd5;

  assign sel_1_2896 = (s_8 == 1'b0 ? sel_12019 :
              s_878);

  assign sel_12020 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12006, sel_12007, sel_12008, sel_12009, sel_12010,
       sel_12011, sel_12012, sel_12013, sel_12015, sel_12016, sel_12017,
       sel_12018, sel_12020, sel_1_2895, sel_1_2896) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8032_sel_1 = sel_1_2896;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8032_sel_1 = sel_12018;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8032_sel_1 = sel_12017;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8032_sel_1 = sel_12016;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8032_sel_1 = sel_12015;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8032_sel_1 = sel_1_2895;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8032_sel_1 = sel_12013;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8032_sel_1 = sel_12012;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8032_sel_1 = sel_12011;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8032_sel_1 = sel_12010;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8032_sel_1 = sel_12009;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8032_sel_1 = sel_12008;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8032_sel_1 = sel_12007;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8032_sel_1 = sel_12006;
        end
      default :
        begin
          p8032_sel_1 = sel_12020;
        end
    endcase
    sel_1_2897 = p8032_sel_1;
  end

  assign tmp_482 = payload[sel_1_2897];

  assign sel_1_2898 = (s_25 == 1'b0 ? tmp_481 :
              tmp_482);

  assign sel_12021 = 1'b0;

  assign sel_12022 = 1'b0;

  assign sel_12023 = 1'b0;

  assign sel_12024 = 1'b0;

  assign sel_12025 = 32'sd0;

  assign sel_12026 = 32'sd0;

  assign sel_12027 = 32'sd0;

  assign sel_12028 = 32'sd0;

  assign sel_12029 = 32'sd0;

  assign sel_12030 = 32'sd0;

  assign sel_12031 = 32'sd0;

  assign sel_12032 = 32'sd0;

  assign s_879 = 32'sd5;

  assign sel_12033 = 32'sd0;

  assign sel_1_2899 = (s_24 == 1'b0 ? s_879 :
              sel_12033);

  assign s_880 = 32'sd8;

  assign sel_1_2900 = (s_25 == 1'b0 ? sel_1_2899 :
              s_880);

  assign sel_12034 = 32'sd0;

  assign sel_12035 = 32'sd0;

  assign sel_12036 = 32'sd0;

  assign sel_12037 = 32'sd0;

  assign sel_12038 = 32'sd0;

  assign s_881 = 32'sd0;

  assign sel_1_2901 = (s_8 == 1'b0 ? sel_12038 :
              s_881);

  assign sel_12039 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12025, sel_12026, sel_12027, sel_12028, sel_12029,
       sel_12030, sel_12031, sel_12032, sel_12034, sel_12035, sel_12036,
       sel_12037, sel_12039, sel_1_2900, sel_1_2901) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8128_sel_1 = sel_1_2901;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8128_sel_1 = sel_12037;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8128_sel_1 = sel_12036;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8128_sel_1 = sel_12035;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8128_sel_1 = sel_12034;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8128_sel_1 = sel_1_2900;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8128_sel_1 = sel_12032;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8128_sel_1 = sel_12031;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8128_sel_1 = sel_12030;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8128_sel_1 = sel_12029;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8128_sel_1 = sel_12028;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8128_sel_1 = sel_12027;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8128_sel_1 = sel_12026;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8128_sel_1 = sel_12025;
        end
      default :
        begin
          p8128_sel_1 = sel_12039;
        end
    endcase
    sel_1_2902 = p8128_sel_1;
  end

  assign tmp_483 = payload[sel_1_2902];

  assign sel_12040 = 1'b0;

  always @(is_SPI_MNGR_36, sel_11983, sel_11984, sel_11985, sel_11986, sel_11987,
       sel_11988, sel_11989, sel_11990, sel_12021, sel_12022, sel_12023,
       sel_12024, sel_12040, sel_1_2898, tmp_483) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7885_sel_1 = tmp_483;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7885_sel_1 = sel_12024;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7885_sel_1 = sel_12023;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7885_sel_1 = sel_12022;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7885_sel_1 = sel_12021;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7885_sel_1 = sel_1_2898;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7885_sel_1 = sel_11990;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7885_sel_1 = sel_11989;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7885_sel_1 = sel_11988;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7885_sel_1 = sel_11987;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7885_sel_1 = sel_11986;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7885_sel_1 = sel_11985;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7885_sel_1 = sel_11984;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7885_sel_1 = sel_11983;
        end
      default :
        begin
          p7885_sel_1 = sel_12040;
        end
    endcase
    sel_1_2903 = p7885_sel_1;
  end

  assign sel_12041 = 1'b0;

  assign sel_12042 = 1'b0;

  assign sel_12043 = 1'b0;

  assign sel_12044 = 1'b0;

  assign sel_12045 = 1'b0;

  assign sel_12046 = 1'b0;

  assign sel_12047 = 1'b0;

  assign sel_12048 = 1'b0;

  assign s_882 = 1'b1;

  assign sel_12049 = 1'b0;

  assign sel_2_1665 = (s_24 == 1'b0 ? s_882 :
              sel_12049);

  assign s_883 = 1'b1;

  assign sel_2_1666 = (s_25 == 1'b0 ? sel_2_1665 :
              s_883);

  assign sel_12050 = 1'b0;

  assign sel_12051 = 1'b0;

  assign sel_12052 = 1'b0;

  assign sel_12053 = 1'b0;

  assign sel_12054 = 1'b0;

  assign s_884 = 1'b1;

  assign sel_2_1667 = (s_8 == 1'b0 ? sel_12054 :
              s_884);

  assign sel_12055 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12041, sel_12042, sel_12043, sel_12044, sel_12045,
       sel_12046, sel_12047, sel_12048, sel_12050, sel_12051, sel_12052,
       sel_12053, sel_12055, sel_2_1666, sel_2_1667) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7870_sel_2 = sel_2_1667;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7870_sel_2 = sel_12053;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7870_sel_2 = sel_12052;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7870_sel_2 = sel_12051;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7870_sel_2 = sel_12050;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7870_sel_2 = sel_2_1666;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7870_sel_2 = sel_12048;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7870_sel_2 = sel_12047;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7870_sel_2 = sel_12046;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7870_sel_2 = sel_12045;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7870_sel_2 = sel_12044;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7870_sel_2 = sel_12043;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7870_sel_2 = sel_12042;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7870_sel_2 = sel_12041;
        end
      default :
        begin
          p7870_sel_2 = sel_12055;
        end
    endcase
    sel_2_1668 = p7870_sel_2;
  end

  assign sel_12056 = 1'b0;

  assign sel_12057 = 1'b0;

  assign sel_12058 = 1'b0;

  assign sel_12059 = 1'b0;

  assign sel_12060 = 1'b0;

  assign sel_12061 = 1'b0;

  assign sel_12062 = 1'b0;

  assign sel_12063 = 1'b0;

  assign sel_12064 = 32'sd0;

  assign sel_12065 = 32'sd0;

  assign sel_12066 = 32'sd0;

  assign sel_12067 = 32'sd0;

  assign sel_12068 = 32'sd0;

  assign sel_12069 = 32'sd0;

  assign sel_12070 = 32'sd0;

  assign sel_12071 = 32'sd0;

  assign s_885 = 32'sd1;

  assign sel_12072 = 32'sd0;

  assign sel_1_2904 = (s_24 == 1'b0 ? s_885 :
              sel_12072);

  assign s_886 = 32'sd14;

  assign sel_1_2905 = (s_25 == 1'b0 ? sel_1_2904 :
              s_886);

  assign sel_12073 = 32'sd0;

  assign sel_12074 = 32'sd0;

  assign sel_12075 = 32'sd0;

  assign sel_12076 = 32'sd0;

  assign sel_12077 = 32'sd0;

  assign s_887 = 32'sd2;

  assign sel_1_2906 = (s_8 == 1'b0 ? sel_12077 :
              s_887);

  assign sel_12078 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12064, sel_12065, sel_12066, sel_12067, sel_12068,
       sel_12069, sel_12070, sel_12071, sel_12073, sel_12074, sel_12075,
       sel_12076, sel_12078, sel_1_2905, sel_1_2906) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7984_sel_1 = sel_1_2906;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7984_sel_1 = sel_12076;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7984_sel_1 = sel_12075;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7984_sel_1 = sel_12074;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7984_sel_1 = sel_12073;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7984_sel_1 = sel_1_2905;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7984_sel_1 = sel_12071;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7984_sel_1 = sel_12070;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7984_sel_1 = sel_12069;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7984_sel_1 = sel_12068;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7984_sel_1 = sel_12067;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7984_sel_1 = sel_12066;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7984_sel_1 = sel_12065;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7984_sel_1 = sel_12064;
        end
      default :
        begin
          p7984_sel_1 = sel_12078;
        end
    endcase
    sel_1_2907 = p7984_sel_1;
  end

  assign tmp_484 = payload[sel_1_2907];

  assign sel_1_2908 = (s_25 == 1'b0 ? tmp_484 :
              tmp_481);

  assign sel_12079 = 1'b0;

  assign sel_12080 = 1'b0;

  assign sel_12081 = 1'b0;

  assign sel_12082 = 1'b0;

  assign sel_12083 = 32'sd0;

  assign sel_12084 = 32'sd0;

  assign sel_12085 = 32'sd0;

  assign sel_12086 = 32'sd0;

  assign sel_12087 = 32'sd0;

  assign sel_12088 = 32'sd0;

  assign sel_12089 = 32'sd0;

  assign sel_12090 = 32'sd0;

  assign s_888 = 32'sd8;

  assign sel_12091 = 32'sd0;

  assign sel_1_2909 = (s_24 == 1'b0 ? s_888 :
              sel_12091);

  assign s_889 = 32'sd11;

  assign sel_1_2910 = (s_25 == 1'b0 ? sel_1_2909 :
              s_889);

  assign sel_12092 = 32'sd0;

  assign sel_12093 = 32'sd0;

  assign sel_12094 = 32'sd0;

  assign sel_12095 = 32'sd0;

  assign sel_12096 = 32'sd0;

  assign s_890 = 32'sd1;

  assign sel_1_2911 = (s_8 == 1'b0 ? sel_12096 :
              s_890);

  assign sel_12097 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12083, sel_12084, sel_12085, sel_12086, sel_12087,
       sel_12088, sel_12089, sel_12090, sel_12092, sel_12093, sel_12094,
       sel_12095, sel_12097, sel_1_2910, sel_1_2911) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8016_sel_1 = sel_1_2911;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8016_sel_1 = sel_12095;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8016_sel_1 = sel_12094;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8016_sel_1 = sel_12093;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8016_sel_1 = sel_12092;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8016_sel_1 = sel_1_2910;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8016_sel_1 = sel_12090;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8016_sel_1 = sel_12089;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8016_sel_1 = sel_12088;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8016_sel_1 = sel_12087;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8016_sel_1 = sel_12086;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8016_sel_1 = sel_12085;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8016_sel_1 = sel_12084;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8016_sel_1 = sel_12083;
        end
      default :
        begin
          p8016_sel_1 = sel_12097;
        end
    endcase
    sel_1_2912 = p8016_sel_1;
  end

  assign tmp_485 = payload[sel_1_2912];

  assign sel_12098 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12056, sel_12057, sel_12058, sel_12059, sel_12060,
       sel_12061, sel_12062, sel_12063, sel_12079, sel_12080, sel_12081,
       sel_12082, sel_12098, sel_1_2908, tmp_485) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7309_sel_1 = tmp_485;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7309_sel_1 = sel_12082;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7309_sel_1 = sel_12081;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7309_sel_1 = sel_12080;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7309_sel_1 = sel_12079;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7309_sel_1 = sel_1_2908;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7309_sel_1 = sel_12063;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7309_sel_1 = sel_12062;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7309_sel_1 = sel_12061;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7309_sel_1 = sel_12060;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7309_sel_1 = sel_12059;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7309_sel_1 = sel_12058;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7309_sel_1 = sel_12057;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7309_sel_1 = sel_12056;
        end
      default :
        begin
          p7309_sel_1 = sel_12098;
        end
    endcase
    sel_1_2913 = p7309_sel_1;
  end

  assign sel_12099 = 1'b0;

  assign sel_12100 = 1'b0;

  assign sel_12101 = 1'b0;

  assign sel_12102 = 1'b0;

  assign sel_12103 = 1'b0;

  assign sel_12104 = 1'b0;

  assign sel_12105 = 1'b0;

  assign sel_12106 = 1'b0;

  assign s_891 = 1'b1;

  assign sel_12107 = 1'b0;

  assign sel_2_1669 = (s_24 == 1'b0 ? s_891 :
              sel_12107);

  assign s_892 = 1'b1;

  assign sel_2_1670 = (s_25 == 1'b0 ? sel_2_1669 :
              s_892);

  assign sel_12108 = 1'b0;

  assign sel_12109 = 1'b0;

  assign sel_12110 = 1'b0;

  assign sel_12111 = 1'b0;

  assign sel_12112 = 1'b0;

  assign s_893 = 1'b1;

  assign sel_2_1671 = (s_8 == 1'b0 ? sel_12112 :
              s_893);

  assign sel_12113 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12099, sel_12100, sel_12101, sel_12102, sel_12103,
       sel_12104, sel_12105, sel_12106, sel_12108, sel_12109, sel_12110,
       sel_12111, sel_12113, sel_2_1670, sel_2_1671) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7294_sel_2 = sel_2_1671;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7294_sel_2 = sel_12111;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7294_sel_2 = sel_12110;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7294_sel_2 = sel_12109;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7294_sel_2 = sel_12108;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7294_sel_2 = sel_2_1670;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7294_sel_2 = sel_12106;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7294_sel_2 = sel_12105;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7294_sel_2 = sel_12104;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7294_sel_2 = sel_12103;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7294_sel_2 = sel_12102;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7294_sel_2 = sel_12101;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7294_sel_2 = sel_12100;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7294_sel_2 = sel_12099;
        end
      default :
        begin
          p7294_sel_2 = sel_12113;
        end
    endcase
    sel_2_1672 = p7294_sel_2;
  end

  assign sel_12114 = 1'b0;

  assign sel_12115 = 1'b0;

  assign sel_12116 = 1'b0;

  assign sel_12117 = 1'b0;

  assign sel_12118 = 1'b0;

  assign sel_12119 = 1'b0;

  assign sel_12120 = 1'b0;

  assign sel_12121 = 1'b0;

  assign sel_12122 = 32'sd0;

  assign sel_12123 = 32'sd0;

  assign sel_12124 = 32'sd0;

  assign sel_12125 = 32'sd0;

  assign sel_12126 = 32'sd0;

  assign sel_12127 = 32'sd0;

  assign sel_12128 = 32'sd0;

  assign sel_12129 = 32'sd0;

  assign s_894 = 32'sd2;

  assign sel_12130 = 32'sd0;

  assign sel_1_2914 = (s_24 == 1'b0 ? s_894 :
              sel_12130);

  assign s_895 = 32'sd12;

  assign sel_1_2915 = (s_25 == 1'b0 ? sel_1_2914 :
              s_895);

  assign sel_12131 = 32'sd0;

  assign sel_12132 = 32'sd0;

  assign sel_12133 = 32'sd0;

  assign sel_12134 = 32'sd0;

  assign sel_12135 = 32'sd0;

  assign s_896 = 32'sd12;

  assign sel_1_2916 = (s_8 == 1'b0 ? sel_12135 :
              s_896);

  assign sel_12136 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12122, sel_12123, sel_12124, sel_12125, sel_12126,
       sel_12127, sel_12128, sel_12129, sel_12131, sel_12132, sel_12133,
       sel_12134, sel_12136, sel_1_2915, sel_1_2916) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8112_sel_1 = sel_1_2916;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8112_sel_1 = sel_12134;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8112_sel_1 = sel_12133;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8112_sel_1 = sel_12132;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8112_sel_1 = sel_12131;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8112_sel_1 = sel_1_2915;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8112_sel_1 = sel_12129;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8112_sel_1 = sel_12128;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8112_sel_1 = sel_12127;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8112_sel_1 = sel_12126;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8112_sel_1 = sel_12125;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8112_sel_1 = sel_12124;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8112_sel_1 = sel_12123;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8112_sel_1 = sel_12122;
        end
      default :
        begin
          p8112_sel_1 = sel_12136;
        end
    endcase
    sel_1_2917 = p8112_sel_1;
  end

  assign tmp_486 = payload[sel_1_2917];

  assign sel_12137 = 32'sd0;

  assign sel_12138 = 32'sd0;

  assign sel_12139 = 32'sd0;

  assign sel_12140 = 32'sd0;

  assign sel_12141 = 32'sd0;

  assign sel_12142 = 32'sd0;

  assign sel_12143 = 32'sd0;

  assign sel_12144 = 32'sd0;

  assign s_897 = 32'sd14;

  assign sel_12145 = 32'sd0;

  assign sel_1_2918 = (s_24 == 1'b0 ? s_897 :
              sel_12145);

  assign s_898 = 32'sd2;

  assign sel_1_2919 = (s_25 == 1'b0 ? sel_1_2918 :
              s_898);

  assign sel_12146 = 32'sd0;

  assign sel_12147 = 32'sd0;

  assign sel_12148 = 32'sd0;

  assign sel_12149 = 32'sd0;

  assign sel_12150 = 32'sd0;

  assign s_899 = 32'sd6;

  assign sel_1_2920 = (s_8 == 1'b0 ? sel_12150 :
              s_899);

  assign sel_12151 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12137, sel_12138, sel_12139, sel_12140, sel_12141,
       sel_12142, sel_12143, sel_12144, sel_12146, sel_12147, sel_12148,
       sel_12149, sel_12151, sel_1_2919, sel_1_2920) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8048_sel_1 = sel_1_2920;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8048_sel_1 = sel_12149;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8048_sel_1 = sel_12148;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8048_sel_1 = sel_12147;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8048_sel_1 = sel_12146;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8048_sel_1 = sel_1_2919;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8048_sel_1 = sel_12144;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8048_sel_1 = sel_12143;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8048_sel_1 = sel_12142;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8048_sel_1 = sel_12141;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8048_sel_1 = sel_12140;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8048_sel_1 = sel_12139;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8048_sel_1 = sel_12138;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8048_sel_1 = sel_12137;
        end
      default :
        begin
          p8048_sel_1 = sel_12151;
        end
    endcase
    sel_1_2921 = p8048_sel_1;
  end

  assign tmp_487 = payload[sel_1_2921];

  assign sel_1_2922 = (s_25 == 1'b0 ? tmp_486 :
              tmp_487);

  assign sel_12152 = 1'b0;

  assign sel_12153 = 1'b0;

  assign sel_12154 = 1'b0;

  assign sel_12155 = 1'b0;

  assign sel_12156 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12114, sel_12115, sel_12116, sel_12117, sel_12118,
       sel_12119, sel_12120, sel_12121, sel_12152, sel_12153, sel_12154,
       sel_12155, sel_12156, sel_1_2922, tmp_484) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7247_sel_1 = tmp_484;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7247_sel_1 = sel_12155;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7247_sel_1 = sel_12154;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7247_sel_1 = sel_12153;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7247_sel_1 = sel_12152;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7247_sel_1 = sel_1_2922;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7247_sel_1 = sel_12121;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7247_sel_1 = sel_12120;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7247_sel_1 = sel_12119;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7247_sel_1 = sel_12118;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7247_sel_1 = sel_12117;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7247_sel_1 = sel_12116;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7247_sel_1 = sel_12115;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7247_sel_1 = sel_12114;
        end
      default :
        begin
          p7247_sel_1 = sel_12156;
        end
    endcase
    sel_1_2923 = p7247_sel_1;
  end

  assign sel_12157 = 1'b0;

  assign sel_12158 = 1'b0;

  assign sel_12159 = 1'b0;

  assign sel_12160 = 1'b0;

  assign sel_12161 = 1'b0;

  assign sel_12162 = 1'b0;

  assign sel_12163 = 1'b0;

  assign sel_12164 = 1'b0;

  assign s_900 = 1'b1;

  assign sel_12165 = 1'b0;

  assign sel_2_1673 = (s_24 == 1'b0 ? s_900 :
              sel_12165);

  assign s_901 = 1'b1;

  assign sel_2_1674 = (s_25 == 1'b0 ? sel_2_1673 :
              s_901);

  assign sel_12166 = 1'b0;

  assign sel_12167 = 1'b0;

  assign sel_12168 = 1'b0;

  assign sel_12169 = 1'b0;

  assign sel_12170 = 1'b0;

  assign s_902 = 1'b1;

  assign sel_2_1675 = (s_8 == 1'b0 ? sel_12170 :
              s_902);

  assign sel_12171 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12157, sel_12158, sel_12159, sel_12160, sel_12161,
       sel_12162, sel_12163, sel_12164, sel_12166, sel_12167, sel_12168,
       sel_12169, sel_12171, sel_2_1674, sel_2_1675) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p7232_sel_2 = sel_2_1675;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p7232_sel_2 = sel_12169;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p7232_sel_2 = sel_12168;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p7232_sel_2 = sel_12167;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p7232_sel_2 = sel_12166;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p7232_sel_2 = sel_2_1674;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p7232_sel_2 = sel_12164;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p7232_sel_2 = sel_12163;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p7232_sel_2 = sel_12162;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p7232_sel_2 = sel_12161;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p7232_sel_2 = sel_12160;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p7232_sel_2 = sel_12159;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p7232_sel_2 = sel_12158;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p7232_sel_2 = sel_12157;
        end
      default :
        begin
          p7232_sel_2 = sel_12171;
        end
    endcase
    sel_2_1676 = p7232_sel_2;
  end

  assign sel_12172 = 1'b0;

  assign sel_12173 = 1'b0;

  assign sel_12174 = 1'b0;

  assign sel_12175 = 1'b0;

  assign sel_12176 = 1'b0;

  assign sel_12177 = 1'b0;

  assign sel_12178 = 1'b0;

  assign sel_12179 = 1'b0;

  assign sel_12180 = 32'sd0;

  assign sel_12181 = 32'sd0;

  assign sel_12182 = 32'sd0;

  assign sel_12183 = 32'sd0;

  assign sel_12184 = 32'sd0;

  assign sel_12185 = 32'sd0;

  assign sel_12186 = 32'sd0;

  assign sel_12187 = 32'sd0;

  assign s_903 = 32'sd4;

  assign sel_12188 = 32'sd0;

  assign sel_1_2924 = (s_24 == 1'b0 ? s_903 :
              sel_12188);

  assign s_904 = 32'sd3;

  assign sel_1_2925 = (s_25 == 1'b0 ? sel_1_2924 :
              s_904);

  assign sel_12189 = 32'sd0;

  assign sel_12190 = 32'sd0;

  assign sel_12191 = 32'sd0;

  assign sel_12192 = 32'sd0;

  assign sel_12193 = 32'sd0;

  assign s_905 = 32'sd14;

  assign sel_1_2926 = (s_8 == 1'b0 ? sel_12193 :
              s_905);

  assign sel_12194 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12180, sel_12181, sel_12182, sel_12183, sel_12184,
       sel_12185, sel_12186, sel_12187, sel_12189, sel_12190, sel_12191,
       sel_12192, sel_12194, sel_1_2925, sel_1_2926) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8208_sel_1 = sel_1_2926;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8208_sel_1 = sel_12192;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8208_sel_1 = sel_12191;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8208_sel_1 = sel_12190;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8208_sel_1 = sel_12189;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8208_sel_1 = sel_1_2925;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8208_sel_1 = sel_12187;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8208_sel_1 = sel_12186;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8208_sel_1 = sel_12185;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8208_sel_1 = sel_12184;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8208_sel_1 = sel_12183;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8208_sel_1 = sel_12182;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8208_sel_1 = sel_12181;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8208_sel_1 = sel_12180;
        end
      default :
        begin
          p8208_sel_1 = sel_12194;
        end
    endcase
    sel_1_2927 = p8208_sel_1;
  end

  assign tmp_488 = payload[sel_1_2927];

  assign sel_1_2928 = (s_25 == 1'b0 ? SDI_1 :
              tmp_488);

  assign sel_12195 = 1'b0;

  assign sel_12196 = 1'b0;

  assign sel_12197 = 1'b0;

  assign sel_12198 = 1'b0;

  assign sel_12199 = 32'sd0;

  assign sel_12200 = 32'sd0;

  assign sel_12201 = 32'sd0;

  assign sel_12202 = 32'sd0;

  assign sel_12203 = 32'sd0;

  assign sel_12204 = 32'sd0;

  assign sel_12205 = 32'sd0;

  assign sel_12206 = 32'sd0;

  assign s_906 = 32'sd7;

  assign sel_12207 = 32'sd0;

  assign sel_1_2929 = (s_24 == 1'b0 ? s_906 :
              sel_12207);

  assign s_907 = 32'sd5;

  assign sel_1_2930 = (s_25 == 1'b0 ? sel_1_2929 :
              s_907);

  assign sel_12208 = 32'sd0;

  assign sel_12209 = 32'sd0;

  assign sel_12210 = 32'sd0;

  assign sel_12211 = 32'sd0;

  assign sel_12212 = 32'sd0;

  assign s_908 = 32'sd3;

  assign sel_1_2931 = (s_8 == 1'b0 ? sel_12212 :
              s_908);

  assign sel_12213 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12199, sel_12200, sel_12201, sel_12202, sel_12203,
       sel_12204, sel_12205, sel_12206, sel_12208, sel_12209, sel_12210,
       sel_12211, sel_12213, sel_1_2930, sel_1_2931) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8000_sel_1 = sel_1_2931;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8000_sel_1 = sel_12211;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8000_sel_1 = sel_12210;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8000_sel_1 = sel_12209;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8000_sel_1 = sel_12208;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8000_sel_1 = sel_1_2930;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8000_sel_1 = sel_12206;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8000_sel_1 = sel_12205;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8000_sel_1 = sel_12204;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8000_sel_1 = sel_12203;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8000_sel_1 = sel_12202;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8000_sel_1 = sel_12201;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8000_sel_1 = sel_12200;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8000_sel_1 = sel_12199;
        end
      default :
        begin
          p8000_sel_1 = sel_12213;
        end
    endcase
    sel_1_2932 = p8000_sel_1;
  end

  assign tmp_489 = payload[sel_1_2932];

  assign sel_12214 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12172, sel_12173, sel_12174, sel_12175, sel_12176,
       sel_12177, sel_12178, sel_12179, sel_12195, sel_12196, sel_12197,
       sel_12198, sel_12214, sel_1_2928, tmp_489) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6671_sel_1 = tmp_489;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6671_sel_1 = sel_12198;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6671_sel_1 = sel_12197;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6671_sel_1 = sel_12196;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6671_sel_1 = sel_12195;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6671_sel_1 = sel_1_2928;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6671_sel_1 = sel_12179;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6671_sel_1 = sel_12178;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6671_sel_1 = sel_12177;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6671_sel_1 = sel_12176;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6671_sel_1 = sel_12175;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6671_sel_1 = sel_12174;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6671_sel_1 = sel_12173;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6671_sel_1 = sel_12172;
        end
      default :
        begin
          p6671_sel_1 = sel_12214;
        end
    endcase
    sel_1_2933 = p6671_sel_1;
  end

  assign sel_12215 = 1'b0;

  assign sel_12216 = 1'b0;

  assign sel_12217 = 1'b0;

  assign sel_12218 = 1'b0;

  assign sel_12219 = 1'b0;

  assign sel_12220 = 1'b0;

  assign sel_12221 = 1'b0;

  assign sel_12222 = 1'b0;

  assign s_909 = 1'b1;

  assign sel_12223 = 1'b0;

  assign sel_2_1677 = (s_24 == 1'b0 ? s_909 :
              sel_12223);

  assign s_910 = 1'b1;

  assign sel_2_1678 = (s_25 == 1'b0 ? sel_2_1677 :
              s_910);

  assign sel_12224 = 1'b0;

  assign sel_12225 = 1'b0;

  assign sel_12226 = 1'b0;

  assign sel_12227 = 1'b0;

  assign sel_12228 = 1'b0;

  assign s_911 = 1'b1;

  assign sel_2_1679 = (s_8 == 1'b0 ? sel_12228 :
              s_911);

  assign sel_12229 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12215, sel_12216, sel_12217, sel_12218, sel_12219,
       sel_12220, sel_12221, sel_12222, sel_12224, sel_12225, sel_12226,
       sel_12227, sel_12229, sel_2_1678, sel_2_1679) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6656_sel_2 = sel_2_1679;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6656_sel_2 = sel_12227;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6656_sel_2 = sel_12226;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6656_sel_2 = sel_12225;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6656_sel_2 = sel_12224;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6656_sel_2 = sel_2_1678;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6656_sel_2 = sel_12222;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6656_sel_2 = sel_12221;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6656_sel_2 = sel_12220;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6656_sel_2 = sel_12219;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6656_sel_2 = sel_12218;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6656_sel_2 = sel_12217;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6656_sel_2 = sel_12216;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6656_sel_2 = sel_12215;
        end
      default :
        begin
          p6656_sel_2 = sel_12229;
        end
    endcase
    sel_2_1680 = p6656_sel_2;
  end

  assign sel_12230 = 1'b0;

  assign sel_12231 = 1'b0;

  assign sel_12232 = 1'b0;

  assign sel_12233 = 1'b0;

  assign sel_12234 = 1'b0;

  assign sel_12235 = 1'b0;

  assign sel_12236 = 1'b0;

  assign sel_12237 = 1'b0;

  assign sel_12238 = 32'sd0;

  assign sel_12239 = 32'sd0;

  assign sel_12240 = 32'sd0;

  assign sel_12241 = 32'sd0;

  assign sel_12242 = 32'sd0;

  assign sel_12243 = 32'sd0;

  assign sel_12244 = 32'sd0;

  assign sel_12245 = 32'sd0;

  assign s_912 = 32'sd15;

  assign sel_12246 = 32'sd0;

  assign sel_1_2934 = (s_24 == 1'b0 ? s_912 :
              sel_12246);

  assign s_913 = 32'sd4;

  assign sel_1_2935 = (s_25 == 1'b0 ? sel_1_2934 :
              s_913);

  assign sel_12247 = 32'sd0;

  assign sel_12248 = 32'sd0;

  assign sel_12249 = 32'sd0;

  assign sel_12250 = 32'sd0;

  assign sel_12251 = 32'sd0;

  assign s_914 = 32'sd7;

  assign sel_1_2936 = (s_8 == 1'b0 ? sel_12251 :
              s_914);

  assign sel_12252 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12238, sel_12239, sel_12240, sel_12241, sel_12242,
       sel_12243, sel_12244, sel_12245, sel_12247, sel_12248, sel_12249,
       sel_12250, sel_12252, sel_1_2935, sel_1_2936) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8160_sel_1 = sel_1_2936;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8160_sel_1 = sel_12250;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8160_sel_1 = sel_12249;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8160_sel_1 = sel_12248;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8160_sel_1 = sel_12247;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8160_sel_1 = sel_1_2935;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8160_sel_1 = sel_12245;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8160_sel_1 = sel_12244;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8160_sel_1 = sel_12243;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8160_sel_1 = sel_12242;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8160_sel_1 = sel_12241;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8160_sel_1 = sel_12240;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8160_sel_1 = sel_12239;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8160_sel_1 = sel_12238;
        end
      default :
        begin
          p8160_sel_1 = sel_12252;
        end
    endcase
    sel_1_2937 = p8160_sel_1;
  end

  assign tmp_490 = payload[sel_1_2937];

  assign sel_1_2938 = (s_25 == 1'b0 ? tmp_488 :
              tmp_490);

  assign sel_12253 = 1'b0;

  assign sel_12254 = 1'b0;

  assign sel_12255 = 1'b0;

  assign sel_12256 = 1'b0;

  assign sel_12257 = 32'sd0;

  assign sel_12258 = 32'sd0;

  assign sel_12259 = 32'sd0;

  assign sel_12260 = 32'sd0;

  assign sel_12261 = 32'sd0;

  assign sel_12262 = 32'sd0;

  assign sel_12263 = 32'sd0;

  assign sel_12264 = 32'sd0;

  assign s_915 = 32'sd13;

  assign sel_12265 = 32'sd0;

  assign sel_1_2939 = (s_24 == 1'b0 ? s_915 :
              sel_12265);

  assign s_916 = 32'sd7;

  assign sel_1_2940 = (s_25 == 1'b0 ? sel_1_2939 :
              s_916);

  assign sel_12266 = 32'sd0;

  assign sel_12267 = 32'sd0;

  assign sel_12268 = 32'sd0;

  assign sel_12269 = 32'sd0;

  assign sel_12270 = 32'sd0;

  assign s_917 = 32'sd4;

  assign sel_1_2941 = (s_8 == 1'b0 ? sel_12270 :
              s_917);

  assign sel_12271 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12257, sel_12258, sel_12259, sel_12260, sel_12261,
       sel_12262, sel_12263, sel_12264, sel_12266, sel_12267, sel_12268,
       sel_12269, sel_12271, sel_1_2940, sel_1_2941) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8176_sel_1 = sel_1_2941;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8176_sel_1 = sel_12269;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8176_sel_1 = sel_12268;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8176_sel_1 = sel_12267;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8176_sel_1 = sel_12266;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8176_sel_1 = sel_1_2940;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8176_sel_1 = sel_12264;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8176_sel_1 = sel_12263;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8176_sel_1 = sel_12262;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8176_sel_1 = sel_12261;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8176_sel_1 = sel_12260;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8176_sel_1 = sel_12259;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8176_sel_1 = sel_12258;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8176_sel_1 = sel_12257;
        end
      default :
        begin
          p8176_sel_1 = sel_12271;
        end
    endcase
    sel_1_2942 = p8176_sel_1;
  end

  assign tmp_491 = payload[sel_1_2942];

  assign sel_12272 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12230, sel_12231, sel_12232, sel_12233, sel_12234,
       sel_12235, sel_12236, sel_12237, sel_12253, sel_12254, sel_12255,
       sel_12256, sel_12272, sel_1_2938, tmp_491) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6640_sel_1 = tmp_491;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6640_sel_1 = sel_12256;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6640_sel_1 = sel_12255;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6640_sel_1 = sel_12254;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6640_sel_1 = sel_12253;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6640_sel_1 = sel_1_2938;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6640_sel_1 = sel_12237;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6640_sel_1 = sel_12236;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6640_sel_1 = sel_12235;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6640_sel_1 = sel_12234;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6640_sel_1 = sel_12233;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6640_sel_1 = sel_12232;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6640_sel_1 = sel_12231;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6640_sel_1 = sel_12230;
        end
      default :
        begin
          p6640_sel_1 = sel_12272;
        end
    endcase
    sel_1_2943 = p6640_sel_1;
  end

  assign sel_12273 = 1'b0;

  assign sel_12274 = 1'b0;

  assign sel_12275 = 1'b0;

  assign sel_12276 = 1'b0;

  assign sel_12277 = 1'b0;

  assign sel_12278 = 1'b0;

  assign sel_12279 = 1'b0;

  assign sel_12280 = 1'b0;

  assign s_918 = 1'b1;

  assign sel_12281 = 1'b0;

  assign sel_2_1681 = (s_24 == 1'b0 ? s_918 :
              sel_12281);

  assign s_919 = 1'b1;

  assign sel_2_1682 = (s_25 == 1'b0 ? sel_2_1681 :
              s_919);

  assign sel_12282 = 1'b0;

  assign sel_12283 = 1'b0;

  assign sel_12284 = 1'b0;

  assign sel_12285 = 1'b0;

  assign sel_12286 = 1'b0;

  assign s_920 = 1'b1;

  assign sel_2_1683 = (s_8 == 1'b0 ? sel_12286 :
              s_920);

  assign sel_12287 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12273, sel_12274, sel_12275, sel_12276, sel_12277,
       sel_12278, sel_12279, sel_12280, sel_12282, sel_12283, sel_12284,
       sel_12285, sel_12287, sel_2_1682, sel_2_1683) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6625_sel_2 = sel_2_1683;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6625_sel_2 = sel_12285;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6625_sel_2 = sel_12284;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6625_sel_2 = sel_12283;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6625_sel_2 = sel_12282;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6625_sel_2 = sel_2_1682;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6625_sel_2 = sel_12280;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6625_sel_2 = sel_12279;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6625_sel_2 = sel_12278;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6625_sel_2 = sel_12277;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6625_sel_2 = sel_12276;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6625_sel_2 = sel_12275;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6625_sel_2 = sel_12274;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6625_sel_2 = sel_12273;
        end
      default :
        begin
          p6625_sel_2 = sel_12287;
        end
    endcase
    sel_2_1684 = p6625_sel_2;
  end

  assign sel_12288 = 1'b0;

  assign sel_12289 = 1'b0;

  assign sel_12290 = 1'b0;

  assign sel_12291 = 1'b0;

  assign sel_12292 = 1'b0;

  assign sel_12293 = 1'b0;

  assign sel_12294 = 1'b0;

  assign sel_12295 = 1'b0;

  assign sel_1_2944 = (s_25 == 1'b0 ? tmp_483 :
              tmp_489);

  assign sel_12296 = 1'b0;

  assign sel_12297 = 1'b0;

  assign sel_12298 = 1'b0;

  assign sel_12299 = 1'b0;

  assign sel_12300 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12288, sel_12289, sel_12290, sel_12291, sel_12292,
       sel_12293, sel_12294, sel_12295, sel_12296, sel_12297, sel_12298,
       sel_12299, sel_12300, sel_1_2944, tmp_482) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6065_sel_1 = tmp_482;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6065_sel_1 = sel_12299;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6065_sel_1 = sel_12298;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6065_sel_1 = sel_12297;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6065_sel_1 = sel_12296;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6065_sel_1 = sel_1_2944;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6065_sel_1 = sel_12295;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6065_sel_1 = sel_12294;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6065_sel_1 = sel_12293;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6065_sel_1 = sel_12292;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6065_sel_1 = sel_12291;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6065_sel_1 = sel_12290;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6065_sel_1 = sel_12289;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6065_sel_1 = sel_12288;
        end
      default :
        begin
          p6065_sel_1 = sel_12300;
        end
    endcase
    sel_1_2945 = p6065_sel_1;
  end

  assign sel_12301 = 1'b0;

  assign sel_12302 = 1'b0;

  assign sel_12303 = 1'b0;

  assign sel_12304 = 1'b0;

  assign sel_12305 = 1'b0;

  assign sel_12306 = 1'b0;

  assign sel_12307 = 1'b0;

  assign sel_12308 = 1'b0;

  assign s_921 = 1'b1;

  assign sel_12309 = 1'b0;

  assign sel_2_1685 = (s_24 == 1'b0 ? s_921 :
              sel_12309);

  assign s_922 = 1'b1;

  assign sel_2_1686 = (s_25 == 1'b0 ? sel_2_1685 :
              s_922);

  assign sel_12310 = 1'b0;

  assign sel_12311 = 1'b0;

  assign sel_12312 = 1'b0;

  assign sel_12313 = 1'b0;

  assign sel_12314 = 1'b0;

  assign s_923 = 1'b1;

  assign sel_2_1687 = (s_8 == 1'b0 ? sel_12314 :
              s_923);

  assign sel_12315 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12301, sel_12302, sel_12303, sel_12304, sel_12305,
       sel_12306, sel_12307, sel_12308, sel_12310, sel_12311, sel_12312,
       sel_12313, sel_12315, sel_2_1686, sel_2_1687) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6050_sel_2 = sel_2_1687;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6050_sel_2 = sel_12313;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6050_sel_2 = sel_12312;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6050_sel_2 = sel_12311;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6050_sel_2 = sel_12310;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6050_sel_2 = sel_2_1686;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6050_sel_2 = sel_12308;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6050_sel_2 = sel_12307;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6050_sel_2 = sel_12306;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6050_sel_2 = sel_12305;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6050_sel_2 = sel_12304;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6050_sel_2 = sel_12303;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6050_sel_2 = sel_12302;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6050_sel_2 = sel_12301;
        end
      default :
        begin
          p6050_sel_2 = sel_12315;
        end
    endcase
    sel_2_1688 = p6050_sel_2;
  end

  assign sel_12316 = 1'b0;

  assign sel_12317 = 1'b0;

  assign sel_12318 = 1'b0;

  assign sel_12319 = 1'b0;

  assign sel_12320 = 1'b0;

  assign sel_12321 = 1'b0;

  assign sel_12322 = 1'b0;

  assign sel_12323 = 1'b0;

  assign sel_12324 = 32'sd0;

  assign sel_12325 = 32'sd0;

  assign sel_12326 = 32'sd0;

  assign sel_12327 = 32'sd0;

  assign sel_12328 = 32'sd0;

  assign sel_12329 = 32'sd0;

  assign sel_12330 = 32'sd0;

  assign sel_12331 = 32'sd0;

  assign s_924 = 32'sd6;

  assign sel_12332 = 32'sd0;

  assign sel_1_2946 = (s_24 == 1'b0 ? s_924 :
              sel_12332);

  assign s_925 = 32'sd15;

  assign sel_1_2947 = (s_25 == 1'b0 ? sel_1_2946 :
              s_925);

  assign sel_12333 = 32'sd0;

  assign sel_12334 = 32'sd0;

  assign sel_12335 = 32'sd0;

  assign sel_12336 = 32'sd0;

  assign sel_12337 = 32'sd0;

  assign s_926 = 32'sd15;

  assign sel_1_2948 = (s_8 == 1'b0 ? sel_12337 :
              s_926);

  assign sel_12338 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12324, sel_12325, sel_12326, sel_12327, sel_12328,
       sel_12329, sel_12330, sel_12331, sel_12333, sel_12334, sel_12335,
       sel_12336, sel_12338, sel_1_2947, sel_1_2948) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8144_sel_1 = sel_1_2948;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8144_sel_1 = sel_12336;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8144_sel_1 = sel_12335;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8144_sel_1 = sel_12334;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8144_sel_1 = sel_12333;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8144_sel_1 = sel_1_2947;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8144_sel_1 = sel_12331;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8144_sel_1 = sel_12330;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8144_sel_1 = sel_12329;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8144_sel_1 = sel_12328;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8144_sel_1 = sel_12327;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8144_sel_1 = sel_12326;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8144_sel_1 = sel_12325;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8144_sel_1 = sel_12324;
        end
      default :
        begin
          p8144_sel_1 = sel_12338;
        end
    endcase
    sel_1_2949 = p8144_sel_1;
  end

  assign tmp_492 = payload[sel_1_2949];

  assign sel_1_2950 = (s_25 == 1'b0 ? tmp_492 :
              SDI_1);

  assign sel_12339 = 1'b0;

  assign sel_12340 = 1'b0;

  assign sel_12341 = 1'b0;

  assign sel_12342 = 1'b0;

  assign sel_12343 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12316, sel_12317, sel_12318, sel_12319, sel_12320,
       sel_12321, sel_12322, sel_12323, sel_12339, sel_12340, sel_12341,
       sel_12342, sel_12343, sel_1_2950, tmp_487) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6034_sel_1 = tmp_487;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6034_sel_1 = sel_12342;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6034_sel_1 = sel_12341;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6034_sel_1 = sel_12340;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6034_sel_1 = sel_12339;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6034_sel_1 = sel_1_2950;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6034_sel_1 = sel_12323;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6034_sel_1 = sel_12322;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6034_sel_1 = sel_12321;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6034_sel_1 = sel_12320;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6034_sel_1 = sel_12319;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6034_sel_1 = sel_12318;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6034_sel_1 = sel_12317;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6034_sel_1 = sel_12316;
        end
      default :
        begin
          p6034_sel_1 = sel_12343;
        end
    endcase
    sel_1_2951 = p6034_sel_1;
  end

  assign sel_12344 = 1'b0;

  assign sel_12345 = 1'b0;

  assign sel_12346 = 1'b0;

  assign sel_12347 = 1'b0;

  assign sel_12348 = 1'b0;

  assign sel_12349 = 1'b0;

  assign sel_12350 = 1'b0;

  assign sel_12351 = 1'b0;

  assign s_927 = 1'b1;

  assign sel_12352 = 1'b0;

  assign sel_2_1689 = (s_24 == 1'b0 ? s_927 :
              sel_12352);

  assign s_928 = 1'b1;

  assign sel_2_1690 = (s_25 == 1'b0 ? sel_2_1689 :
              s_928);

  assign sel_12353 = 1'b0;

  assign sel_12354 = 1'b0;

  assign sel_12355 = 1'b0;

  assign sel_12356 = 1'b0;

  assign sel_12357 = 1'b0;

  assign s_929 = 1'b1;

  assign sel_2_1691 = (s_8 == 1'b0 ? sel_12357 :
              s_929);

  assign sel_12358 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12344, sel_12345, sel_12346, sel_12347, sel_12348,
       sel_12349, sel_12350, sel_12351, sel_12353, sel_12354, sel_12355,
       sel_12356, sel_12358, sel_2_1690, sel_2_1691) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p6019_sel_2 = sel_2_1691;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p6019_sel_2 = sel_12356;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p6019_sel_2 = sel_12355;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p6019_sel_2 = sel_12354;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p6019_sel_2 = sel_12353;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p6019_sel_2 = sel_2_1690;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p6019_sel_2 = sel_12351;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p6019_sel_2 = sel_12350;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p6019_sel_2 = sel_12349;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p6019_sel_2 = sel_12348;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p6019_sel_2 = sel_12347;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p6019_sel_2 = sel_12346;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p6019_sel_2 = sel_12345;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p6019_sel_2 = sel_12344;
        end
      default :
        begin
          p6019_sel_2 = sel_12358;
        end
    endcase
    sel_2_1692 = p6019_sel_2;
  end

  assign sel_12359 = 1'b0;

  assign sel_12360 = 1'b0;

  assign sel_12361 = 1'b0;

  assign sel_12362 = 1'b0;

  assign sel_12363 = 1'b0;

  assign sel_12364 = 1'b0;

  assign sel_12365 = 1'b0;

  assign sel_12366 = 1'b0;

  assign sel_1_2952 = (s_25 == 1'b0 ? tmp_489 :
              tmp_491);

  assign sel_12367 = 1'b0;

  assign sel_12368 = 1'b0;

  assign sel_12369 = 1'b0;

  assign sel_12370 = 1'b0;

  assign sel_12371 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12359, sel_12360, sel_12361, sel_12362, sel_12363,
       sel_12364, sel_12365, sel_12366, sel_12367, sel_12368, sel_12369,
       sel_12370, sel_12371, sel_1_2952, tmp_490) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5459_sel_1 = tmp_490;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5459_sel_1 = sel_12370;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5459_sel_1 = sel_12369;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5459_sel_1 = sel_12368;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5459_sel_1 = sel_12367;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5459_sel_1 = sel_1_2952;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5459_sel_1 = sel_12366;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5459_sel_1 = sel_12365;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5459_sel_1 = sel_12364;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5459_sel_1 = sel_12363;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5459_sel_1 = sel_12362;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5459_sel_1 = sel_12361;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5459_sel_1 = sel_12360;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5459_sel_1 = sel_12359;
        end
      default :
        begin
          p5459_sel_1 = sel_12371;
        end
    endcase
    sel_1_2953 = p5459_sel_1;
  end

  assign sel_12372 = 1'b0;

  assign sel_12373 = 1'b0;

  assign sel_12374 = 1'b0;

  assign sel_12375 = 1'b0;

  assign sel_12376 = 1'b0;

  assign sel_12377 = 1'b0;

  assign sel_12378 = 1'b0;

  assign sel_12379 = 1'b0;

  assign s_930 = 1'b1;

  assign sel_12380 = 1'b0;

  assign sel_2_1693 = (s_24 == 1'b0 ? s_930 :
              sel_12380);

  assign s_931 = 1'b1;

  assign sel_2_1694 = (s_25 == 1'b0 ? sel_2_1693 :
              s_931);

  assign sel_12381 = 1'b0;

  assign sel_12382 = 1'b0;

  assign sel_12383 = 1'b0;

  assign sel_12384 = 1'b0;

  assign sel_12385 = 1'b0;

  assign s_932 = 1'b1;

  assign sel_2_1695 = (s_8 == 1'b0 ? sel_12385 :
              s_932);

  assign sel_12386 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12372, sel_12373, sel_12374, sel_12375, sel_12376,
       sel_12377, sel_12378, sel_12379, sel_12381, sel_12382, sel_12383,
       sel_12384, sel_12386, sel_2_1694, sel_2_1695) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5444_sel_2 = sel_2_1695;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5444_sel_2 = sel_12384;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5444_sel_2 = sel_12383;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5444_sel_2 = sel_12382;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5444_sel_2 = sel_12381;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5444_sel_2 = sel_2_1694;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5444_sel_2 = sel_12379;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5444_sel_2 = sel_12378;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5444_sel_2 = sel_12377;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5444_sel_2 = sel_12376;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5444_sel_2 = sel_12375;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5444_sel_2 = sel_12374;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5444_sel_2 = sel_12373;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5444_sel_2 = sel_12372;
        end
      default :
        begin
          p5444_sel_2 = sel_12386;
        end
    endcase
    sel_2_1696 = p5444_sel_2;
  end

  assign sel_12387 = 1'b0;

  assign sel_12388 = 1'b0;

  assign sel_12389 = 1'b0;

  assign sel_12390 = 1'b0;

  assign sel_12391 = 1'b0;

  assign sel_12392 = 1'b0;

  assign sel_12393 = 1'b0;

  assign sel_12394 = 1'b0;

  assign sel_1_2954 = (s_25 == 1'b0 ? tmp_485 :
              tmp_483);

  assign sel_12395 = 1'b0;

  assign sel_12396 = 1'b0;

  assign sel_12397 = 1'b0;

  assign sel_12398 = 1'b0;

  assign sel_12399 = 1'b0;

  always @(SDI_1, is_SPI_MNGR_36, sel_12387, sel_12388, sel_12389, sel_12390, sel_12391,
       sel_12392, sel_12393, sel_12394, sel_12395, sel_12396, sel_12397,
       sel_12398, sel_12399, sel_1_2954) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5428_sel_1 = SDI_1;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5428_sel_1 = sel_12398;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5428_sel_1 = sel_12397;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5428_sel_1 = sel_12396;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5428_sel_1 = sel_12395;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5428_sel_1 = sel_1_2954;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5428_sel_1 = sel_12394;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5428_sel_1 = sel_12393;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5428_sel_1 = sel_12392;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5428_sel_1 = sel_12391;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5428_sel_1 = sel_12390;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5428_sel_1 = sel_12389;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5428_sel_1 = sel_12388;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5428_sel_1 = sel_12387;
        end
      default :
        begin
          p5428_sel_1 = sel_12399;
        end
    endcase
    sel_1_2955 = p5428_sel_1;
  end

  assign sel_12400 = 1'b0;

  assign sel_12401 = 1'b0;

  assign sel_12402 = 1'b0;

  assign sel_12403 = 1'b0;

  assign sel_12404 = 1'b0;

  assign sel_12405 = 1'b0;

  assign sel_12406 = 1'b0;

  assign sel_12407 = 1'b0;

  assign s_933 = 1'b1;

  assign sel_12408 = 1'b0;

  assign sel_2_1697 = (s_24 == 1'b0 ? s_933 :
              sel_12408);

  assign s_934 = 1'b1;

  assign sel_2_1698 = (s_25 == 1'b0 ? sel_2_1697 :
              s_934);

  assign sel_12409 = 1'b0;

  assign sel_12410 = 1'b0;

  assign sel_12411 = 1'b0;

  assign sel_12412 = 1'b0;

  assign sel_12413 = 1'b0;

  assign s_935 = 1'b1;

  assign sel_2_1699 = (s_8 == 1'b0 ? sel_12413 :
              s_935);

  assign sel_12414 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12400, sel_12401, sel_12402, sel_12403, sel_12404,
       sel_12405, sel_12406, sel_12407, sel_12409, sel_12410, sel_12411,
       sel_12412, sel_12414, sel_2_1698, sel_2_1699) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p5413_sel_2 = sel_2_1699;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p5413_sel_2 = sel_12412;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p5413_sel_2 = sel_12411;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p5413_sel_2 = sel_12410;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p5413_sel_2 = sel_12409;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p5413_sel_2 = sel_2_1698;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p5413_sel_2 = sel_12407;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p5413_sel_2 = sel_12406;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p5413_sel_2 = sel_12405;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p5413_sel_2 = sel_12404;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p5413_sel_2 = sel_12403;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p5413_sel_2 = sel_12402;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p5413_sel_2 = sel_12401;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p5413_sel_2 = sel_12400;
        end
      default :
        begin
          p5413_sel_2 = sel_12414;
        end
    endcase
    sel_2_1700 = p5413_sel_2;
  end

  assign sel_12415 = 1'b0;

  assign sel_12416 = 1'b0;

  assign sel_12417 = 1'b0;

  assign sel_12418 = 1'b0;

  assign sel_12419 = 1'b0;

  assign sel_12420 = 1'b0;

  assign sel_12421 = 1'b0;

  assign sel_12422 = 1'b0;

  assign sel_12423 = 32'sd0;

  assign sel_12424 = 32'sd0;

  assign sel_12425 = 32'sd0;

  assign sel_12426 = 32'sd0;

  assign sel_12427 = 32'sd0;

  assign sel_12428 = 32'sd0;

  assign sel_12429 = 32'sd0;

  assign sel_12430 = 32'sd0;

  assign s_936 = 32'sd9;

  assign sel_12431 = 32'sd0;

  assign sel_1_2956 = (s_24 == 1'b0 ? s_936 :
              sel_12431);

  assign s_937 = 32'sd10;

  assign sel_1_2957 = (s_25 == 1'b0 ? sel_1_2956 :
              s_937);

  assign sel_12432 = 32'sd0;

  assign sel_12433 = 32'sd0;

  assign sel_12434 = 32'sd0;

  assign sel_12435 = 32'sd0;

  assign sel_12436 = 32'sd0;

  assign s_938 = 32'sd11;

  assign sel_1_2958 = (s_8 == 1'b0 ? sel_12436 :
              s_938);

  assign sel_12437 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12423, sel_12424, sel_12425, sel_12426, sel_12427,
       sel_12428, sel_12429, sel_12430, sel_12432, sel_12433, sel_12434,
       sel_12435, sel_12437, sel_1_2957, sel_1_2958) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8096_sel_1 = sel_1_2958;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8096_sel_1 = sel_12435;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8096_sel_1 = sel_12434;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8096_sel_1 = sel_12433;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8096_sel_1 = sel_12432;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8096_sel_1 = sel_1_2957;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8096_sel_1 = sel_12430;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8096_sel_1 = sel_12429;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8096_sel_1 = sel_12428;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8096_sel_1 = sel_12427;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8096_sel_1 = sel_12426;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8096_sel_1 = sel_12425;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8096_sel_1 = sel_12424;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8096_sel_1 = sel_12423;
        end
      default :
        begin
          p8096_sel_1 = sel_12437;
        end
    endcase
    sel_1_2959 = p8096_sel_1;
  end

  assign tmp_493 = payload[sel_1_2959];

  assign sel_12438 = 32'sd0;

  assign sel_12439 = 32'sd0;

  assign sel_12440 = 32'sd0;

  assign sel_12441 = 32'sd0;

  assign sel_12442 = 32'sd0;

  assign sel_12443 = 32'sd0;

  assign sel_12444 = 32'sd0;

  assign sel_12445 = 32'sd0;

  assign s_939 = 32'sd10;

  assign sel_12446 = 32'sd0;

  assign sel_1_2960 = (s_24 == 1'b0 ? s_939 :
              sel_12446);

  assign s_940 = 32'sd9;

  assign sel_1_2961 = (s_25 == 1'b0 ? sel_1_2960 :
              s_940);

  assign sel_12447 = 32'sd0;

  assign sel_12448 = 32'sd0;

  assign sel_12449 = 32'sd0;

  assign sel_12450 = 32'sd0;

  assign sel_12451 = 32'sd0;

  assign s_941 = 32'sd13;

  assign sel_1_2962 = (s_8 == 1'b0 ? sel_12451 :
              s_941);

  assign sel_12452 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12438, sel_12439, sel_12440, sel_12441, sel_12442,
       sel_12443, sel_12444, sel_12445, sel_12447, sel_12448, sel_12449,
       sel_12450, sel_12452, sel_1_2961, sel_1_2962) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8192_sel_1 = sel_1_2962;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8192_sel_1 = sel_12450;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8192_sel_1 = sel_12449;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8192_sel_1 = sel_12448;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8192_sel_1 = sel_12447;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8192_sel_1 = sel_1_2961;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8192_sel_1 = sel_12445;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8192_sel_1 = sel_12444;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8192_sel_1 = sel_12443;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8192_sel_1 = sel_12442;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8192_sel_1 = sel_12441;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8192_sel_1 = sel_12440;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8192_sel_1 = sel_12439;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8192_sel_1 = sel_12438;
        end
      default :
        begin
          p8192_sel_1 = sel_12452;
        end
    endcase
    sel_1_2963 = p8192_sel_1;
  end

  assign tmp_494 = payload[sel_1_2963];

  assign sel_1_2964 = (s_25 == 1'b0 ? tmp_493 :
              tmp_494);

  assign sel_12453 = 1'b0;

  assign sel_12454 = 1'b0;

  assign sel_12455 = 1'b0;

  assign sel_12456 = 1'b0;

  assign sel_12457 = 32'sd0;

  assign sel_12458 = 32'sd0;

  assign sel_12459 = 32'sd0;

  assign sel_12460 = 32'sd0;

  assign sel_12461 = 32'sd0;

  assign sel_12462 = 32'sd0;

  assign sel_12463 = 32'sd0;

  assign sel_12464 = 32'sd0;

  assign s_942 = 32'sd11;

  assign sel_12465 = 32'sd0;

  assign sel_1_2965 = (s_24 == 1'b0 ? s_942 :
              sel_12465);

  assign s_943 = 32'sd13;

  assign sel_1_2966 = (s_25 == 1'b0 ? sel_1_2965 :
              s_943);

  assign sel_12466 = 32'sd0;

  assign sel_12467 = 32'sd0;

  assign sel_12468 = 32'sd0;

  assign sel_12469 = 32'sd0;

  assign sel_12470 = 32'sd0;

  assign s_944 = 32'sd9;

  assign sel_1_2967 = (s_8 == 1'b0 ? sel_12470 :
              s_944);

  assign sel_12471 = 32'sd0;

  always @(is_SPI_MNGR_36, sel_12457, sel_12458, sel_12459, sel_12460, sel_12461,
       sel_12462, sel_12463, sel_12464, sel_12466, sel_12467, sel_12468,
       sel_12469, sel_12471, sel_1_2966, sel_1_2967) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p8064_sel_1 = sel_1_2967;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p8064_sel_1 = sel_12469;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p8064_sel_1 = sel_12468;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p8064_sel_1 = sel_12467;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p8064_sel_1 = sel_12466;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p8064_sel_1 = sel_1_2966;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p8064_sel_1 = sel_12464;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p8064_sel_1 = sel_12463;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p8064_sel_1 = sel_12462;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p8064_sel_1 = sel_12461;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p8064_sel_1 = sel_12460;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p8064_sel_1 = sel_12459;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p8064_sel_1 = sel_12458;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p8064_sel_1 = sel_12457;
        end
      default :
        begin
          p8064_sel_1 = sel_12471;
        end
    endcase
    sel_1_2968 = p8064_sel_1;
  end

  assign tmp_495 = payload[sel_1_2968];

  assign sel_12472 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12415, sel_12416, sel_12417, sel_12418, sel_12419,
       sel_12420, sel_12421, sel_12422, sel_12453, sel_12454, sel_12455,
       sel_12456, sel_12472, sel_1_2964, tmp_495) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4853_sel_1 = tmp_495;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4853_sel_1 = sel_12456;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4853_sel_1 = sel_12455;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4853_sel_1 = sel_12454;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4853_sel_1 = sel_12453;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4853_sel_1 = sel_1_2964;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4853_sel_1 = sel_12422;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4853_sel_1 = sel_12421;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4853_sel_1 = sel_12420;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4853_sel_1 = sel_12419;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4853_sel_1 = sel_12418;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4853_sel_1 = sel_12417;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4853_sel_1 = sel_12416;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4853_sel_1 = sel_12415;
        end
      default :
        begin
          p4853_sel_1 = sel_12472;
        end
    endcase
    sel_1_2969 = p4853_sel_1;
  end

  assign sel_12473 = 1'b0;

  assign sel_12474 = 1'b0;

  assign sel_12475 = 1'b0;

  assign sel_12476 = 1'b0;

  assign sel_12477 = 1'b0;

  assign sel_12478 = 1'b0;

  assign sel_12479 = 1'b0;

  assign sel_12480 = 1'b0;

  assign s_945 = 1'b1;

  assign sel_12481 = 1'b0;

  assign sel_2_1701 = (s_24 == 1'b0 ? s_945 :
              sel_12481);

  assign s_946 = 1'b1;

  assign sel_2_1702 = (s_25 == 1'b0 ? sel_2_1701 :
              s_946);

  assign sel_12482 = 1'b0;

  assign sel_12483 = 1'b0;

  assign sel_12484 = 1'b0;

  assign sel_12485 = 1'b0;

  assign sel_12486 = 1'b0;

  assign s_947 = 1'b1;

  assign sel_2_1703 = (s_8 == 1'b0 ? sel_12486 :
              s_947);

  assign sel_12487 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12473, sel_12474, sel_12475, sel_12476, sel_12477,
       sel_12478, sel_12479, sel_12480, sel_12482, sel_12483, sel_12484,
       sel_12485, sel_12487, sel_2_1702, sel_2_1703) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4838_sel_2 = sel_2_1703;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4838_sel_2 = sel_12485;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4838_sel_2 = sel_12484;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4838_sel_2 = sel_12483;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4838_sel_2 = sel_12482;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4838_sel_2 = sel_2_1702;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4838_sel_2 = sel_12480;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4838_sel_2 = sel_12479;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4838_sel_2 = sel_12478;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4838_sel_2 = sel_12477;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4838_sel_2 = sel_12476;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4838_sel_2 = sel_12475;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4838_sel_2 = sel_12474;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4838_sel_2 = sel_12473;
        end
      default :
        begin
          p4838_sel_2 = sel_12487;
        end
    endcase
    sel_2_1704 = p4838_sel_2;
  end

  assign sel_12488 = 1'b0;

  assign sel_12489 = 1'b0;

  assign sel_12490 = 1'b0;

  assign sel_12491 = 1'b0;

  assign sel_12492 = 1'b0;

  assign sel_12493 = 1'b0;

  assign sel_12494 = 1'b0;

  assign sel_12495 = 1'b0;

  assign sel_1_2970 = (s_25 == 1'b0 ? tmp_494 :
              tmp_493);

  assign sel_12496 = 1'b0;

  assign sel_12497 = 1'b0;

  assign sel_12498 = 1'b0;

  assign sel_12499 = 1'b0;

  assign sel_12500 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12488, sel_12489, sel_12490, sel_12491, sel_12492,
       sel_12493, sel_12494, sel_12495, sel_12496, sel_12497, sel_12498,
       sel_12499, sel_12500, sel_1_2970, tmp_481) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4822_sel_1 = tmp_481;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4822_sel_1 = sel_12499;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4822_sel_1 = sel_12498;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4822_sel_1 = sel_12497;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4822_sel_1 = sel_12496;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4822_sel_1 = sel_1_2970;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4822_sel_1 = sel_12495;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4822_sel_1 = sel_12494;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4822_sel_1 = sel_12493;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4822_sel_1 = sel_12492;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4822_sel_1 = sel_12491;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4822_sel_1 = sel_12490;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4822_sel_1 = sel_12489;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4822_sel_1 = sel_12488;
        end
      default :
        begin
          p4822_sel_1 = sel_12500;
        end
    endcase
    sel_1_2971 = p4822_sel_1;
  end

  assign sel_12501 = 1'b0;

  assign sel_12502 = 1'b0;

  assign sel_12503 = 1'b0;

  assign sel_12504 = 1'b0;

  assign sel_12505 = 1'b0;

  assign sel_12506 = 1'b0;

  assign sel_12507 = 1'b0;

  assign sel_12508 = 1'b0;

  assign s_948 = 1'b1;

  assign sel_12509 = 1'b0;

  assign sel_2_1705 = (s_24 == 1'b0 ? s_948 :
              sel_12509);

  assign s_949 = 1'b1;

  assign sel_2_1706 = (s_25 == 1'b0 ? sel_2_1705 :
              s_949);

  assign sel_12510 = 1'b0;

  assign sel_12511 = 1'b0;

  assign sel_12512 = 1'b0;

  assign sel_12513 = 1'b0;

  assign sel_12514 = 1'b0;

  assign s_950 = 1'b1;

  assign sel_2_1707 = (s_8 == 1'b0 ? sel_12514 :
              s_950);

  assign sel_12515 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12501, sel_12502, sel_12503, sel_12504, sel_12505,
       sel_12506, sel_12507, sel_12508, sel_12510, sel_12511, sel_12512,
       sel_12513, sel_12515, sel_2_1706, sel_2_1707) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4807_sel_2 = sel_2_1707;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4807_sel_2 = sel_12513;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4807_sel_2 = sel_12512;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4807_sel_2 = sel_12511;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4807_sel_2 = sel_12510;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4807_sel_2 = sel_2_1706;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4807_sel_2 = sel_12508;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4807_sel_2 = sel_12507;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4807_sel_2 = sel_12506;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4807_sel_2 = sel_12505;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4807_sel_2 = sel_12504;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4807_sel_2 = sel_12503;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4807_sel_2 = sel_12502;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4807_sel_2 = sel_12501;
        end
      default :
        begin
          p4807_sel_2 = sel_12515;
        end
    endcase
    sel_2_1708 = p4807_sel_2;
  end

  assign sel_12516 = 1'b0;

  assign sel_12517 = 1'b0;

  assign sel_12518 = 1'b0;

  assign sel_12519 = 1'b0;

  assign sel_12520 = 1'b0;

  assign sel_12521 = 1'b0;

  assign sel_12522 = 1'b0;

  assign sel_12523 = 1'b0;

  assign sel_1_2972 = (s_25 == 1'b0 ? tmp_495 :
              tmp_485);

  assign sel_12524 = 1'b0;

  assign sel_12525 = 1'b0;

  assign sel_12526 = 1'b0;

  assign sel_12527 = 1'b0;

  assign sel_12528 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12516, sel_12517, sel_12518, sel_12519, sel_12520,
       sel_12521, sel_12522, sel_12523, sel_12524, sel_12525, sel_12526,
       sel_12527, sel_12528, sel_1_2972, tmp_493) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4247_sel_1 = tmp_493;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4247_sel_1 = sel_12527;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4247_sel_1 = sel_12526;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4247_sel_1 = sel_12525;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4247_sel_1 = sel_12524;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4247_sel_1 = sel_1_2972;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4247_sel_1 = sel_12523;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4247_sel_1 = sel_12522;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4247_sel_1 = sel_12521;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4247_sel_1 = sel_12520;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4247_sel_1 = sel_12519;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4247_sel_1 = sel_12518;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4247_sel_1 = sel_12517;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4247_sel_1 = sel_12516;
        end
      default :
        begin
          p4247_sel_1 = sel_12528;
        end
    endcase
    sel_1_2973 = p4247_sel_1;
  end

  assign sel_12529 = 1'b0;

  assign sel_12530 = 1'b0;

  assign sel_12531 = 1'b0;

  assign sel_12532 = 1'b0;

  assign sel_12533 = 1'b0;

  assign sel_12534 = 1'b0;

  assign sel_12535 = 1'b0;

  assign sel_12536 = 1'b0;

  assign s_951 = 1'b1;

  assign sel_12537 = 1'b0;

  assign sel_2_1709 = (s_24 == 1'b0 ? s_951 :
              sel_12537);

  assign s_952 = 1'b1;

  assign sel_2_1710 = (s_25 == 1'b0 ? sel_2_1709 :
              s_952);

  assign sel_12538 = 1'b0;

  assign sel_12539 = 1'b0;

  assign sel_12540 = 1'b0;

  assign sel_12541 = 1'b0;

  assign sel_12542 = 1'b0;

  assign s_953 = 1'b1;

  assign sel_2_1711 = (s_8 == 1'b0 ? sel_12542 :
              s_953);

  assign sel_12543 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12529, sel_12530, sel_12531, sel_12532, sel_12533,
       sel_12534, sel_12535, sel_12536, sel_12538, sel_12539, sel_12540,
       sel_12541, sel_12543, sel_2_1710, sel_2_1711) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p4232_sel_2 = sel_2_1711;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p4232_sel_2 = sel_12541;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p4232_sel_2 = sel_12540;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p4232_sel_2 = sel_12539;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p4232_sel_2 = sel_12538;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p4232_sel_2 = sel_2_1710;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p4232_sel_2 = sel_12536;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p4232_sel_2 = sel_12535;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p4232_sel_2 = sel_12534;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p4232_sel_2 = sel_12533;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p4232_sel_2 = sel_12532;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p4232_sel_2 = sel_12531;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p4232_sel_2 = sel_12530;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p4232_sel_2 = sel_12529;
        end
      default :
        begin
          p4232_sel_2 = sel_12543;
        end
    endcase
    sel_2_1712 = p4232_sel_2;
  end

  assign sel_12544 = 1'b0;

  assign sel_12545 = 1'b0;

  assign sel_12546 = 1'b0;

  assign sel_12547 = 1'b0;

  assign sel_12548 = 1'b0;

  assign sel_12549 = 1'b0;

  assign sel_12550 = 1'b0;

  assign sel_12551 = 1'b0;

  assign sel_1_2974 = (s_25 == 1'b0 ? tmp_482 :
              tmp_486);

  assign sel_12552 = 1'b0;

  assign sel_12553 = 1'b0;

  assign sel_12554 = 1'b0;

  assign sel_12555 = 1'b0;

  assign sel_12556 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12544, sel_12545, sel_12546, sel_12547, sel_12548,
       sel_12549, sel_12550, sel_12551, sel_12552, sel_12553, sel_12554,
       sel_12555, sel_12556, sel_1_2974, tmp_486) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p952_sel_1 = tmp_486;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p952_sel_1 = sel_12555;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p952_sel_1 = sel_12554;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p952_sel_1 = sel_12553;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p952_sel_1 = sel_12552;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p952_sel_1 = sel_1_2974;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p952_sel_1 = sel_12551;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p952_sel_1 = sel_12550;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p952_sel_1 = sel_12549;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p952_sel_1 = sel_12548;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p952_sel_1 = sel_12547;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p952_sel_1 = sel_12546;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p952_sel_1 = sel_12545;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p952_sel_1 = sel_12544;
        end
      default :
        begin
          p952_sel_1 = sel_12556;
        end
    endcase
    sel_1_2975 = p952_sel_1;
  end

  assign sel_12557 = 1'b0;

  assign sel_12558 = 1'b0;

  assign sel_12559 = 1'b0;

  assign sel_12560 = 1'b0;

  assign sel_12561 = 1'b0;

  assign sel_12562 = 1'b0;

  assign sel_12563 = 1'b0;

  assign sel_12564 = 1'b0;

  assign s_954 = 1'b1;

  assign sel_12565 = 1'b0;

  assign sel_2_1713 = (s_24 == 1'b0 ? s_954 :
              sel_12565);

  assign s_955 = 1'b1;

  assign sel_2_1714 = (s_25 == 1'b0 ? sel_2_1713 :
              s_955);

  assign sel_12566 = 1'b0;

  assign sel_12567 = 1'b0;

  assign sel_12568 = 1'b0;

  assign sel_12569 = 1'b0;

  assign sel_12570 = 1'b0;

  assign s_956 = 1'b1;

  assign sel_2_1715 = (s_8 == 1'b0 ? sel_12570 :
              s_956);

  assign sel_12571 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12557, sel_12558, sel_12559, sel_12560, sel_12561,
       sel_12562, sel_12563, sel_12564, sel_12566, sel_12567, sel_12568,
       sel_12569, sel_12571, sel_2_1714, sel_2_1715) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p937_sel_2 = sel_2_1715;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p937_sel_2 = sel_12569;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p937_sel_2 = sel_12568;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p937_sel_2 = sel_12567;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p937_sel_2 = sel_12566;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p937_sel_2 = sel_2_1714;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p937_sel_2 = sel_12564;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p937_sel_2 = sel_12563;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p937_sel_2 = sel_12562;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p937_sel_2 = sel_12561;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p937_sel_2 = sel_12560;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p937_sel_2 = sel_12559;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p937_sel_2 = sel_12558;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p937_sel_2 = sel_12557;
        end
      default :
        begin
          p937_sel_2 = sel_12571;
        end
    endcase
    sel_2_1716 = p937_sel_2;
  end

  assign sel_12572 = 1'b0;

  assign sel_12573 = 1'b0;

  assign sel_12574 = 1'b0;

  assign sel_12575 = 1'b0;

  assign sel_12576 = 1'b0;

  assign sel_12577 = 1'b0;

  assign sel_12578 = 1'b0;

  assign sel_12579 = 1'b0;

  assign sel_1_2976 = (s_25 == 1'b0 ? tmp_491 :
              tmp_495);

  assign sel_12580 = 1'b0;

  assign sel_12581 = 1'b0;

  assign sel_12582 = 1'b0;

  assign sel_12583 = 1'b0;

  assign sel_12584 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12572, sel_12573, sel_12574, sel_12575, sel_12576,
       sel_12577, sel_12578, sel_12579, sel_12580, sel_12581, sel_12582,
       sel_12583, sel_12584, sel_1_2976, tmp_494) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p753_sel_1 = tmp_494;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p753_sel_1 = sel_12583;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p753_sel_1 = sel_12582;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p753_sel_1 = sel_12581;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p753_sel_1 = sel_12580;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p753_sel_1 = sel_1_2976;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p753_sel_1 = sel_12579;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p753_sel_1 = sel_12578;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p753_sel_1 = sel_12577;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p753_sel_1 = sel_12576;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p753_sel_1 = sel_12575;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p753_sel_1 = sel_12574;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p753_sel_1 = sel_12573;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p753_sel_1 = sel_12572;
        end
      default :
        begin
          p753_sel_1 = sel_12584;
        end
    endcase
    sel_1_2977 = p753_sel_1;
  end

  assign sel_12585 = 1'b0;

  assign sel_12586 = 1'b0;

  assign sel_12587 = 1'b0;

  assign sel_12588 = 1'b0;

  assign sel_12589 = 1'b0;

  assign sel_12590 = 1'b0;

  assign sel_12591 = 1'b0;

  assign sel_12592 = 1'b0;

  assign s_957 = 1'b1;

  assign sel_12593 = 1'b0;

  assign sel_2_1717 = (s_24 == 1'b0 ? s_957 :
              sel_12593);

  assign s_958 = 1'b1;

  assign sel_2_1718 = (s_25 == 1'b0 ? sel_2_1717 :
              s_958);

  assign sel_12594 = 1'b0;

  assign sel_12595 = 1'b0;

  assign sel_12596 = 1'b0;

  assign sel_12597 = 1'b0;

  assign sel_12598 = 1'b0;

  assign s_959 = 1'b1;

  assign sel_2_1719 = (s_8 == 1'b0 ? sel_12598 :
              s_959);

  assign sel_12599 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12585, sel_12586, sel_12587, sel_12588, sel_12589,
       sel_12590, sel_12591, sel_12592, sel_12594, sel_12595, sel_12596,
       sel_12597, sel_12599, sel_2_1718, sel_2_1719) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p738_sel_2 = sel_2_1719;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p738_sel_2 = sel_12597;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p738_sel_2 = sel_12596;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p738_sel_2 = sel_12595;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p738_sel_2 = sel_12594;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p738_sel_2 = sel_2_1718;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p738_sel_2 = sel_12592;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p738_sel_2 = sel_12591;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p738_sel_2 = sel_12590;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p738_sel_2 = sel_12589;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p738_sel_2 = sel_12588;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p738_sel_2 = sel_12587;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p738_sel_2 = sel_12586;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p738_sel_2 = sel_12585;
        end
      default :
        begin
          p738_sel_2 = sel_12599;
        end
    endcase
    sel_2_1720 = p738_sel_2;
  end

  assign sel_12600 = 1'b0;

  assign sel_12601 = 1'b0;

  assign sel_12602 = 1'b0;

  assign sel_12603 = 1'b0;

  assign sel_12604 = 1'b0;

  assign sel_12605 = 1'b0;

  assign sel_12606 = 1'b0;

  assign sel_12607 = 1'b0;

  assign sel_1_2978 = (s_25 == 1'b0 ? tmp_487 :
              tmp_484);

  assign sel_12608 = 1'b0;

  assign sel_12609 = 1'b0;

  assign sel_12610 = 1'b0;

  assign sel_12611 = 1'b0;

  assign sel_12612 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12600, sel_12601, sel_12602, sel_12603, sel_12604,
       sel_12605, sel_12606, sel_12607, sel_12608, sel_12609, sel_12610,
       sel_12611, sel_12612, sel_1_2978, tmp_488) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p661_sel_1 = tmp_488;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p661_sel_1 = sel_12611;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p661_sel_1 = sel_12610;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p661_sel_1 = sel_12609;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p661_sel_1 = sel_12608;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p661_sel_1 = sel_1_2978;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p661_sel_1 = sel_12607;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p661_sel_1 = sel_12606;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p661_sel_1 = sel_12605;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p661_sel_1 = sel_12604;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p661_sel_1 = sel_12603;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p661_sel_1 = sel_12602;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p661_sel_1 = sel_12601;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p661_sel_1 = sel_12600;
        end
      default :
        begin
          p661_sel_1 = sel_12612;
        end
    endcase
    sel_1_2979 = p661_sel_1;
  end

  assign sel_12613 = 1'b0;

  assign sel_12614 = 1'b0;

  assign sel_12615 = 1'b0;

  assign sel_12616 = 1'b0;

  assign sel_12617 = 1'b0;

  assign sel_12618 = 1'b0;

  assign sel_12619 = 1'b0;

  assign sel_12620 = 1'b0;

  assign s_960 = 1'b1;

  assign sel_12621 = 1'b0;

  assign sel_2_1721 = (s_24 == 1'b0 ? s_960 :
              sel_12621);

  assign s_961 = 1'b1;

  assign sel_2_1722 = (s_25 == 1'b0 ? sel_2_1721 :
              s_961);

  assign sel_12622 = 1'b0;

  assign sel_12623 = 1'b0;

  assign sel_12624 = 1'b0;

  assign sel_12625 = 1'b0;

  assign sel_12626 = 1'b0;

  assign s_962 = 1'b1;

  assign sel_2_1723 = (s_8 == 1'b0 ? sel_12626 :
              s_962);

  assign sel_12627 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12613, sel_12614, sel_12615, sel_12616, sel_12617,
       sel_12618, sel_12619, sel_12620, sel_12622, sel_12623, sel_12624,
       sel_12625, sel_12627, sel_2_1722, sel_2_1723) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p646_sel_2 = sel_2_1723;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p646_sel_2 = sel_12625;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p646_sel_2 = sel_12624;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p646_sel_2 = sel_12623;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p646_sel_2 = sel_12622;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p646_sel_2 = sel_2_1722;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p646_sel_2 = sel_12620;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p646_sel_2 = sel_12619;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p646_sel_2 = sel_12618;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p646_sel_2 = sel_12617;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p646_sel_2 = sel_12616;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p646_sel_2 = sel_12615;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p646_sel_2 = sel_12614;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p646_sel_2 = sel_12613;
        end
      default :
        begin
          p646_sel_2 = sel_12627;
        end
    endcase
    sel_2_1724 = p646_sel_2;
  end

  assign sel_12628 = 1'b0;

  assign sel_12629 = 1'b0;

  assign sel_12630 = 1'b0;

  assign sel_12631 = 1'b0;

  assign sel_12632 = 1'b0;

  assign sel_12633 = 1'b0;

  assign sel_12634 = 1'b0;

  assign sel_12635 = 1'b0;

  assign sel_1_2980 = (s_25 == 1'b0 ? tmp_490 :
              tmp_492);

  assign sel_12636 = 1'b0;

  assign sel_12637 = 1'b0;

  assign sel_12638 = 1'b0;

  assign sel_12639 = 1'b0;

  assign sel_12640 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12628, sel_12629, sel_12630, sel_12631, sel_12632,
       sel_12633, sel_12634, sel_12635, sel_12636, sel_12637, sel_12638,
       sel_12639, sel_12640, sel_1_2980, tmp_492) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p629_sel_1 = tmp_492;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p629_sel_1 = sel_12639;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p629_sel_1 = sel_12638;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p629_sel_1 = sel_12637;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p629_sel_1 = sel_12636;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p629_sel_1 = sel_1_2980;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p629_sel_1 = sel_12635;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p629_sel_1 = sel_12634;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p629_sel_1 = sel_12633;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p629_sel_1 = sel_12632;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p629_sel_1 = sel_12631;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p629_sel_1 = sel_12630;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p629_sel_1 = sel_12629;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p629_sel_1 = sel_12628;
        end
      default :
        begin
          p629_sel_1 = sel_12640;
        end
    endcase
    sel_1_2981 = p629_sel_1;
  end

  assign sel_12641 = 1'b0;

  assign sel_12642 = 1'b0;

  assign sel_12643 = 1'b0;

  assign sel_12644 = 1'b0;

  assign sel_12645 = 1'b0;

  assign sel_12646 = 1'b0;

  assign sel_12647 = 1'b0;

  assign sel_12648 = 1'b0;

  assign s_963 = 1'b1;

  assign sel_12649 = 1'b0;

  assign sel_2_1725 = (s_24 == 1'b0 ? s_963 :
              sel_12649);

  assign s_964 = 1'b1;

  assign sel_2_1726 = (s_25 == 1'b0 ? sel_2_1725 :
              s_964);

  assign sel_12650 = 1'b0;

  assign sel_12651 = 1'b0;

  assign sel_12652 = 1'b0;

  assign sel_12653 = 1'b0;

  assign sel_12654 = 1'b0;

  assign s_965 = 1'b1;

  assign sel_2_1727 = (s_8 == 1'b0 ? sel_12654 :
              s_965);

  assign sel_12655 = 1'b0;

  always @(is_SPI_MNGR_36, sel_12641, sel_12642, sel_12643, sel_12644, sel_12645,
       sel_12646, sel_12647, sel_12648, sel_12650, sel_12651, sel_12652,
       sel_12653, sel_12655, sel_2_1726, sel_2_1727) begin
    case ( is_SPI_MNGR_36)
      state_type_is_SPI_MNGR_IN_NOP :
        begin
          p614_sel_2 = sel_2_1727;
        end
      state_type_is_SPI_MNGR_IN_NOP1 :
        begin
          p614_sel_2 = sel_12653;
        end
      state_type_is_SPI_MNGR_IN_off :
        begin
          p614_sel_2 = sel_12652;
        end
      state_type_is_SPI_MNGR_IN_on :
        begin
          p614_sel_2 = sel_12651;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK :
        begin
          p614_sel_2 = sel_12650;
        end
      state_type_is_SPI_MNGR_IN_sender_at_SCK1 :
        begin
          p614_sel_2 = sel_2_1726;
        end
      state_type_is_SPI_MNGR_IN_sender_pre_SCK :
        begin
          p614_sel_2 = sel_12648;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_1 :
        begin
          p614_sel_2 = sel_12647;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v1_2 :
        begin
          p614_sel_2 = sel_12646;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_1 :
        begin
          p614_sel_2 = sel_12645;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v2_2 :
        begin
          p614_sel_2 = sel_12644;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_1 :
        begin
          p614_sel_2 = sel_12643;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_2 :
        begin
          p614_sel_2 = sel_12642;
        end
      state_type_is_SPI_MNGR_IN_toBsend_v3_3 :
        begin
          p614_sel_2 = sel_12641;
        end
      default :
        begin
          p614_sel_2 = sel_12655;
        end
    endcase
    sel_2_1728 = p614_sel_2;
  end

  always @(posedge clk)
    begin : payload_debug_reg_process
      if (rst == 1'b1) begin
        payload_debug <= {16{1'b0}};
      end
      else begin
        if (enb) begin
          payload_debug <= tmp_496;
        end
      end
    end

  always @* begin
    p7597payload_debug_payload_debug[0] = payload_debug[0];
    if (sel_2_1668) begin
      p7597payload_debug_payload_debug[0] = sel_1_2903;
    end
    payload_debug_16[0] = p7597payload_debug_payload_debug[0];
    payload_debug_16[1] = payload_debug[1];
    payload_debug_16[2] = payload_debug[2];
    payload_debug_16[3] = payload_debug[3];
    payload_debug_16[4] = payload_debug[4];
    payload_debug_16[5] = payload_debug[5];
    payload_debug_16[6] = payload_debug[6];
    payload_debug_16[7] = payload_debug[7];
    payload_debug_16[8] = payload_debug[8];
    payload_debug_16[9] = payload_debug[9];
    payload_debug_16[10] = payload_debug[10];
    payload_debug_16[11] = payload_debug[11];
    payload_debug_16[12] = payload_debug[12];
    payload_debug_16[13] = payload_debug[13];
    payload_debug_16[14] = payload_debug[14];
    payload_debug_16[15] = payload_debug[15];
  end

  always @* begin
    p7277payload_debug_payload_debug[1] = payload_debug_16[1];
    if (sel_2_1672) begin
      p7277payload_debug_payload_debug[1] = sel_1_2913;
    end
    payload_debug_17[0] = payload_debug_16[0];
    payload_debug_17[1] = p7277payload_debug_payload_debug[1];
    payload_debug_17[2] = payload_debug_16[2];
    payload_debug_17[3] = payload_debug_16[3];
    payload_debug_17[4] = payload_debug_16[4];
    payload_debug_17[5] = payload_debug_16[5];
    payload_debug_17[6] = payload_debug_16[6];
    payload_debug_17[7] = payload_debug_16[7];
    payload_debug_17[8] = payload_debug_16[8];
    payload_debug_17[9] = payload_debug_16[9];
    payload_debug_17[10] = payload_debug_16[10];
    payload_debug_17[11] = payload_debug_16[11];
    payload_debug_17[12] = payload_debug_16[12];
    payload_debug_17[13] = payload_debug_16[13];
    payload_debug_17[14] = payload_debug_16[14];
    payload_debug_17[15] = payload_debug_16[15];
  end

  always @* begin
    p6959payload_debug_payload_debug[2] = payload_debug_17[2];
    if (sel_2_1676) begin
      p6959payload_debug_payload_debug[2] = sel_1_2923;
    end
    payload_debug_18[0] = payload_debug_17[0];
    payload_debug_18[1] = payload_debug_17[1];
    payload_debug_18[2] = p6959payload_debug_payload_debug[2];
    payload_debug_18[3] = payload_debug_17[3];
    payload_debug_18[4] = payload_debug_17[4];
    payload_debug_18[5] = payload_debug_17[5];
    payload_debug_18[6] = payload_debug_17[6];
    payload_debug_18[7] = payload_debug_17[7];
    payload_debug_18[8] = payload_debug_17[8];
    payload_debug_18[9] = payload_debug_17[9];
    payload_debug_18[10] = payload_debug_17[10];
    payload_debug_18[11] = payload_debug_17[11];
    payload_debug_18[12] = payload_debug_17[12];
    payload_debug_18[13] = payload_debug_17[13];
    payload_debug_18[14] = payload_debug_17[14];
    payload_debug_18[15] = payload_debug_17[15];
  end

  always @* begin
    p6655payload_debug_payload_debug[3] = payload_debug_18[3];
    if (sel_2_1680) begin
      p6655payload_debug_payload_debug[3] = sel_1_2933;
    end
    payload_debug_19[0] = payload_debug_18[0];
    payload_debug_19[1] = payload_debug_18[1];
    payload_debug_19[2] = payload_debug_18[2];
    payload_debug_19[3] = p6655payload_debug_payload_debug[3];
    payload_debug_19[4] = payload_debug_18[4];
    payload_debug_19[5] = payload_debug_18[5];
    payload_debug_19[6] = payload_debug_18[6];
    payload_debug_19[7] = payload_debug_18[7];
    payload_debug_19[8] = payload_debug_18[8];
    payload_debug_19[9] = payload_debug_18[9];
    payload_debug_19[10] = payload_debug_18[10];
    payload_debug_19[11] = payload_debug_18[11];
    payload_debug_19[12] = payload_debug_18[12];
    payload_debug_19[13] = payload_debug_18[13];
    payload_debug_19[14] = payload_debug_18[14];
    payload_debug_19[15] = payload_debug_18[15];
  end

  always @* begin
    p6352payload_debug_payload_debug[4] = payload_debug_19[4];
    if (sel_2_1684) begin
      p6352payload_debug_payload_debug[4] = sel_1_2943;
    end
    payload_debug_20[0] = payload_debug_19[0];
    payload_debug_20[1] = payload_debug_19[1];
    payload_debug_20[2] = payload_debug_19[2];
    payload_debug_20[3] = payload_debug_19[3];
    payload_debug_20[4] = p6352payload_debug_payload_debug[4];
    payload_debug_20[5] = payload_debug_19[5];
    payload_debug_20[6] = payload_debug_19[6];
    payload_debug_20[7] = payload_debug_19[7];
    payload_debug_20[8] = payload_debug_19[8];
    payload_debug_20[9] = payload_debug_19[9];
    payload_debug_20[10] = payload_debug_19[10];
    payload_debug_20[11] = payload_debug_19[11];
    payload_debug_20[12] = payload_debug_19[12];
    payload_debug_20[13] = payload_debug_19[13];
    payload_debug_20[14] = payload_debug_19[14];
    payload_debug_20[15] = payload_debug_19[15];
  end

  always @* begin
    p6049payload_debug_payload_debug[5] = payload_debug_20[5];
    if (sel_2_1688) begin
      p6049payload_debug_payload_debug[5] = sel_1_2945;
    end
    payload_debug_21[0] = payload_debug_20[0];
    payload_debug_21[1] = payload_debug_20[1];
    payload_debug_21[2] = payload_debug_20[2];
    payload_debug_21[3] = payload_debug_20[3];
    payload_debug_21[4] = payload_debug_20[4];
    payload_debug_21[5] = p6049payload_debug_payload_debug[5];
    payload_debug_21[6] = payload_debug_20[6];
    payload_debug_21[7] = payload_debug_20[7];
    payload_debug_21[8] = payload_debug_20[8];
    payload_debug_21[9] = payload_debug_20[9];
    payload_debug_21[10] = payload_debug_20[10];
    payload_debug_21[11] = payload_debug_20[11];
    payload_debug_21[12] = payload_debug_20[12];
    payload_debug_21[13] = payload_debug_20[13];
    payload_debug_21[14] = payload_debug_20[14];
    payload_debug_21[15] = payload_debug_20[15];
  end

  always @* begin
    p5746payload_debug_payload_debug[6] = payload_debug_21[6];
    if (sel_2_1692) begin
      p5746payload_debug_payload_debug[6] = sel_1_2951;
    end
    payload_debug_22[0] = payload_debug_21[0];
    payload_debug_22[1] = payload_debug_21[1];
    payload_debug_22[2] = payload_debug_21[2];
    payload_debug_22[3] = payload_debug_21[3];
    payload_debug_22[4] = payload_debug_21[4];
    payload_debug_22[5] = payload_debug_21[5];
    payload_debug_22[6] = p5746payload_debug_payload_debug[6];
    payload_debug_22[7] = payload_debug_21[7];
    payload_debug_22[8] = payload_debug_21[8];
    payload_debug_22[9] = payload_debug_21[9];
    payload_debug_22[10] = payload_debug_21[10];
    payload_debug_22[11] = payload_debug_21[11];
    payload_debug_22[12] = payload_debug_21[12];
    payload_debug_22[13] = payload_debug_21[13];
    payload_debug_22[14] = payload_debug_21[14];
    payload_debug_22[15] = payload_debug_21[15];
  end

  always @* begin
    p5443payload_debug_payload_debug[7] = payload_debug_22[7];
    if (sel_2_1696) begin
      p5443payload_debug_payload_debug[7] = sel_1_2953;
    end
    payload_debug_23[0] = payload_debug_22[0];
    payload_debug_23[1] = payload_debug_22[1];
    payload_debug_23[2] = payload_debug_22[2];
    payload_debug_23[3] = payload_debug_22[3];
    payload_debug_23[4] = payload_debug_22[4];
    payload_debug_23[5] = payload_debug_22[5];
    payload_debug_23[6] = payload_debug_22[6];
    payload_debug_23[7] = p5443payload_debug_payload_debug[7];
    payload_debug_23[8] = payload_debug_22[8];
    payload_debug_23[9] = payload_debug_22[9];
    payload_debug_23[10] = payload_debug_22[10];
    payload_debug_23[11] = payload_debug_22[11];
    payload_debug_23[12] = payload_debug_22[12];
    payload_debug_23[13] = payload_debug_22[13];
    payload_debug_23[14] = payload_debug_22[14];
    payload_debug_23[15] = payload_debug_22[15];
  end

  always @* begin
    p5140payload_debug_payload_debug[8] = payload_debug_23[8];
    if (sel_2_1700) begin
      p5140payload_debug_payload_debug[8] = sel_1_2955;
    end
    payload_debug_24[0] = payload_debug_23[0];
    payload_debug_24[1] = payload_debug_23[1];
    payload_debug_24[2] = payload_debug_23[2];
    payload_debug_24[3] = payload_debug_23[3];
    payload_debug_24[4] = payload_debug_23[4];
    payload_debug_24[5] = payload_debug_23[5];
    payload_debug_24[6] = payload_debug_23[6];
    payload_debug_24[7] = payload_debug_23[7];
    payload_debug_24[8] = p5140payload_debug_payload_debug[8];
    payload_debug_24[9] = payload_debug_23[9];
    payload_debug_24[10] = payload_debug_23[10];
    payload_debug_24[11] = payload_debug_23[11];
    payload_debug_24[12] = payload_debug_23[12];
    payload_debug_24[13] = payload_debug_23[13];
    payload_debug_24[14] = payload_debug_23[14];
    payload_debug_24[15] = payload_debug_23[15];
  end

  always @* begin
    p4837payload_debug_payload_debug[9] = payload_debug_24[9];
    if (sel_2_1704) begin
      p4837payload_debug_payload_debug[9] = sel_1_2969;
    end
    payload_debug_25[0] = payload_debug_24[0];
    payload_debug_25[1] = payload_debug_24[1];
    payload_debug_25[2] = payload_debug_24[2];
    payload_debug_25[3] = payload_debug_24[3];
    payload_debug_25[4] = payload_debug_24[4];
    payload_debug_25[5] = payload_debug_24[5];
    payload_debug_25[6] = payload_debug_24[6];
    payload_debug_25[7] = payload_debug_24[7];
    payload_debug_25[8] = payload_debug_24[8];
    payload_debug_25[9] = p4837payload_debug_payload_debug[9];
    payload_debug_25[10] = payload_debug_24[10];
    payload_debug_25[11] = payload_debug_24[11];
    payload_debug_25[12] = payload_debug_24[12];
    payload_debug_25[13] = payload_debug_24[13];
    payload_debug_25[14] = payload_debug_24[14];
    payload_debug_25[15] = payload_debug_24[15];
  end

  always @* begin
    p4534payload_debug_payload_debug[10] = payload_debug_25[10];
    if (sel_2_1708) begin
      p4534payload_debug_payload_debug[10] = sel_1_2971;
    end
    payload_debug_26[0] = payload_debug_25[0];
    payload_debug_26[1] = payload_debug_25[1];
    payload_debug_26[2] = payload_debug_25[2];
    payload_debug_26[3] = payload_debug_25[3];
    payload_debug_26[4] = payload_debug_25[4];
    payload_debug_26[5] = payload_debug_25[5];
    payload_debug_26[6] = payload_debug_25[6];
    payload_debug_26[7] = payload_debug_25[7];
    payload_debug_26[8] = payload_debug_25[8];
    payload_debug_26[9] = payload_debug_25[9];
    payload_debug_26[10] = p4534payload_debug_payload_debug[10];
    payload_debug_26[11] = payload_debug_25[11];
    payload_debug_26[12] = payload_debug_25[12];
    payload_debug_26[13] = payload_debug_25[13];
    payload_debug_26[14] = payload_debug_25[14];
    payload_debug_26[15] = payload_debug_25[15];
  end

  always @* begin
    p4231payload_debug_payload_debug[11] = payload_debug_26[11];
    if (sel_2_1712) begin
      p4231payload_debug_payload_debug[11] = sel_1_2973;
    end
    payload_debug_27[0] = payload_debug_26[0];
    payload_debug_27[1] = payload_debug_26[1];
    payload_debug_27[2] = payload_debug_26[2];
    payload_debug_27[3] = payload_debug_26[3];
    payload_debug_27[4] = payload_debug_26[4];
    payload_debug_27[5] = payload_debug_26[5];
    payload_debug_27[6] = payload_debug_26[6];
    payload_debug_27[7] = payload_debug_26[7];
    payload_debug_27[8] = payload_debug_26[8];
    payload_debug_27[9] = payload_debug_26[9];
    payload_debug_27[10] = payload_debug_26[10];
    payload_debug_27[11] = p4231payload_debug_payload_debug[11];
    payload_debug_27[12] = payload_debug_26[12];
    payload_debug_27[13] = payload_debug_26[13];
    payload_debug_27[14] = payload_debug_26[14];
    payload_debug_27[15] = payload_debug_26[15];
  end

  always @* begin
    p936payload_debug_payload_debug[12] = payload_debug_27[12];
    if (sel_2_1716) begin
      p936payload_debug_payload_debug[12] = sel_1_2975;
    end
    payload_debug_28[0] = payload_debug_27[0];
    payload_debug_28[1] = payload_debug_27[1];
    payload_debug_28[2] = payload_debug_27[2];
    payload_debug_28[3] = payload_debug_27[3];
    payload_debug_28[4] = payload_debug_27[4];
    payload_debug_28[5] = payload_debug_27[5];
    payload_debug_28[6] = payload_debug_27[6];
    payload_debug_28[7] = payload_debug_27[7];
    payload_debug_28[8] = payload_debug_27[8];
    payload_debug_28[9] = payload_debug_27[9];
    payload_debug_28[10] = payload_debug_27[10];
    payload_debug_28[11] = payload_debug_27[11];
    payload_debug_28[12] = p936payload_debug_payload_debug[12];
    payload_debug_28[13] = payload_debug_27[13];
    payload_debug_28[14] = payload_debug_27[14];
    payload_debug_28[15] = payload_debug_27[15];
  end

  always @* begin
    p706payload_debug_payload_debug[13] = payload_debug_28[13];
    if (sel_2_1720) begin
      p706payload_debug_payload_debug[13] = sel_1_2977;
    end
    payload_debug_29[0] = payload_debug_28[0];
    payload_debug_29[1] = payload_debug_28[1];
    payload_debug_29[2] = payload_debug_28[2];
    payload_debug_29[3] = payload_debug_28[3];
    payload_debug_29[4] = payload_debug_28[4];
    payload_debug_29[5] = payload_debug_28[5];
    payload_debug_29[6] = payload_debug_28[6];
    payload_debug_29[7] = payload_debug_28[7];
    payload_debug_29[8] = payload_debug_28[8];
    payload_debug_29[9] = payload_debug_28[9];
    payload_debug_29[10] = payload_debug_28[10];
    payload_debug_29[11] = payload_debug_28[11];
    payload_debug_29[12] = payload_debug_28[12];
    payload_debug_29[13] = p706payload_debug_payload_debug[13];
    payload_debug_29[14] = payload_debug_28[14];
    payload_debug_29[15] = payload_debug_28[15];
  end

  always @* begin
    p645payload_debug_payload_debug[14] = payload_debug_29[14];
    if (sel_2_1724) begin
      p645payload_debug_payload_debug[14] = sel_1_2979;
    end
    payload_debug_30[0] = payload_debug_29[0];
    payload_debug_30[1] = payload_debug_29[1];
    payload_debug_30[2] = payload_debug_29[2];
    payload_debug_30[3] = payload_debug_29[3];
    payload_debug_30[4] = payload_debug_29[4];
    payload_debug_30[5] = payload_debug_29[5];
    payload_debug_30[6] = payload_debug_29[6];
    payload_debug_30[7] = payload_debug_29[7];
    payload_debug_30[8] = payload_debug_29[8];
    payload_debug_30[9] = payload_debug_29[9];
    payload_debug_30[10] = payload_debug_29[10];
    payload_debug_30[11] = payload_debug_29[11];
    payload_debug_30[12] = payload_debug_29[12];
    payload_debug_30[13] = payload_debug_29[13];
    payload_debug_30[14] = p645payload_debug_payload_debug[14];
    payload_debug_30[15] = payload_debug_29[15];
  end

  always @* begin
    p566tmp_tmp[15] = payload_debug_30[15];
    if (sel_2_1728) begin
      p566tmp_tmp[15] = sel_1_2981;
    end
    tmp_496[0] = payload_debug_30[0];
    tmp_496[1] = payload_debug_30[1];
    tmp_496[2] = payload_debug_30[2];
    tmp_496[3] = payload_debug_30[3];
    tmp_496[4] = payload_debug_30[4];
    tmp_496[5] = payload_debug_30[5];
    tmp_496[6] = payload_debug_30[6];
    tmp_496[7] = payload_debug_30[7];
    tmp_496[8] = payload_debug_30[8];
    tmp_496[9] = payload_debug_30[9];
    tmp_496[10] = payload_debug_30[10];
    tmp_496[11] = payload_debug_30[11];
    tmp_496[12] = payload_debug_30[12];
    tmp_496[13] = payload_debug_30[13];
    tmp_496[14] = payload_debug_30[14];
    tmp_496[15] = p566tmp_tmp[15];
  end

  assign payload_debug_0 = tmp_496[0];

  assign payload_debug_1 = tmp_496[1];

  assign payload_debug_2 = tmp_496[2];

  assign payload_debug_3 = tmp_496[3];

  assign payload_debug_4 = tmp_496[4];

  assign payload_debug_5 = tmp_496[5];

  assign payload_debug_6 = tmp_496[6];

  assign payload_debug_7 = tmp_496[7];

  assign payload_debug_8 = tmp_496[8];

  assign payload_debug_9 = tmp_496[9];

  assign payload_debug_10 = tmp_496[10];

  assign payload_debug_11 = tmp_496[11];

  assign payload_debug_12 = tmp_496[12];

  assign payload_debug_13 = tmp_496[13];

  assign payload_debug_14 = tmp_496[14];

  assign payload_debug_15 = tmp_496[15];

endmodule  // SPI_MNGR

