// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi_og\hNNewMatrixD.v
// Created: 2025-05-03 19:08:43
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: hNNewMatrixD
// Source Path: HDL_pfc_gold_fi_og/simscape_system/HDL Subsystem/Fixed-Point State-Space/hNNewMatrixD
// Hierarchy Level: 2
// Model version: 1.231
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hNNewMatrixD
          (clk,
           reset,
           enb,
           enb_1_1_1,
           in0_0,
           in0_1,
           in0_2,
           in0_3,
           in0_4,
           in0_5,
           in0_6,
           in0_7,
           in0_8,
           in0_9,
           enb_counter,
           matrixDOutSignal_0,
           matrixDOutSignal_1,
           matrixDOutSignal_2,
           matrixDOutSignal_3,
           matrixDOutSignal_4,
           matrixDOutSignal_5,
           matrixDOutSignal_6,
           matrixDOutSignal_7,
           matrixDOutSignal_8,
           matrixDOutSignal_9,
           matrixDOutSignal_10,
           matrixDOutSignal_11,
           matrixDOutSignal_12,
           matrixDOutSignal_13,
           matrixDOutSignal_14,
           matrixDOutSignal_15,
           matrixDOutSignal_16,
           matrixDOutSignal_17,
           matrixDOutSignal_18,
           matrixDOutSignal_19);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_1_1;
  input   signed [24:0] in0_0;  // sfix25_En13
  input   signed [24:0] in0_1;  // sfix25_En13
  input   signed [24:0] in0_2;  // sfix25_En13
  input   signed [24:0] in0_3;  // sfix25_En13
  input   signed [24:0] in0_4;  // sfix25_En13
  input   signed [24:0] in0_5;  // sfix25_En13
  input   signed [24:0] in0_6;  // sfix25_En13
  input   signed [24:0] in0_7;  // sfix25_En13
  input   signed [24:0] in0_8;  // sfix25_En13
  input   signed [24:0] in0_9;  // sfix25_En13
  input   [5:0] enb_counter;  // ufix6
  output  signed [24:0] matrixDOutSignal_0;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_1;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_2;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_3;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_4;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_5;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_6;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_7;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_8;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_9;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_10;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_11;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_12;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_13;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_14;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_15;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_16;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_17;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_18;  // sfix25_En13
  output  signed [24:0] matrixDOutSignal_19;  // sfix25_En13


  wire HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_26_0;
  reg  [3:0] rd_7_reg;  // ufix1 [4]
  wire HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_26_0_1;
  wire HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19;
  reg  HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19_1;
  wire enb_gated;
  reg [4:0] counterSig;  // ufix5
  wire signed [24:0] configuration1 [0:139];  // sfix25_En19 [140]
  wire signed [24:0] ratechange_splitcomp_out0 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out1 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out2 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out3 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out4 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out5 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out6 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out7 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out8 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out9 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out10 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out11 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out12 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out13 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out14 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out15 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out16 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out17 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out18 [0:6];  // sfix25_En19 [7]
  wire signed [24:0] ratechange_splitcomp_out19 [0:6];  // sfix25_En19 [7]
  reg signed [24:0] row20 [0:6];  // sfix25_En19 [7]
  reg [4:0] rd_2_regin;  // ufix5
  reg [2:0] rd_2_waddr;  // ufix3
  wire rd_2_wrenb;  // ufix1
  reg [2:0] rd_2_raddr;  // ufix3
  wire [4:0] rd_2_regout;  // ufix5
  wire signed [24:0] c0_serial_1 [0:139];  // sfix25_En13 [140]
  reg signed [24:0] c0_serial_1_1 [0:139];  // sfix25_En13 [140]
  reg [4:0] counterSig_1;  // ufix5
  wire signed [24:0] ratechange_splitcomp_out0_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out1_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out2_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out3_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out4_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out5_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out6_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out7_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out8_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out9_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out10_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out11_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out12_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out13_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out14_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out15_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out16_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out17_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out18_1 [0:6];  // sfix25_En13 [7]
  wire signed [24:0] ratechange_splitcomp_out19_1 [0:6];  // sfix25_En13 [7]
  reg signed [24:0] col20 [0:6];  // sfix25_En13 [7]
  wire signed [49:0] dot_product20;  // sfix50_En32
  reg signed [49:0] dot_product20_1;  // sfix50_En32
  wire signed [49:0] dot_product1;  // sfix50_En32
  reg signed [49:0] dot_product1_held;  // sfix50_En32
  wire signed [24:0] out_DTC1;  // sfix25_En13
  wire enb_counter_ge_7_1;
  reg  enb_counter_ge_7_2;
  wire enb_counter_le_25_1;
  reg  enb_counter_le_25_2;
  wire HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_7_18;
  reg  [1:0] rd_5_reg;  // ufix1 [2]
  wire HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_7_18_1;
  wire enb_gated_1;
  reg signed [49:0] tappedDelay_reg [0:18];  // sfix50 [19]
  reg signed [49:0] tappedDelay_reg_next [0:18];  // sfix50_En32 [19]
  reg signed [49:0] c0_serialOut_0 [0:18];  // sfix50_En32 [19]
  wire signed [49:0] c0_serialOut_0_18;  // sfix50_En32
  reg signed [49:0] dot_product2;  // sfix50_En32
  wire signed [24:0] out_DTC2;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_17;  // sfix50_En32
  reg signed [49:0] dot_product3;  // sfix50_En32
  wire signed [24:0] out_DTC3;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_16;  // sfix50_En32
  reg signed [49:0] dot_product4;  // sfix50_En32
  wire signed [24:0] out_DTC4;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_15;  // sfix50_En32
  reg signed [49:0] dot_product5;  // sfix50_En32
  wire signed [24:0] out_DTC5;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_14;  // sfix50_En32
  reg signed [49:0] dot_product6;  // sfix50_En32
  wire signed [24:0] out_DTC6;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_13;  // sfix50_En32
  reg signed [49:0] dot_product7;  // sfix50_En32
  wire signed [24:0] out_DTC7;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_12;  // sfix50_En32
  reg signed [49:0] dot_product8;  // sfix50_En32
  wire signed [24:0] out_DTC8;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_11;  // sfix50_En32
  reg signed [49:0] dot_product9;  // sfix50_En32
  wire signed [24:0] out_DTC9;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_10;  // sfix50_En32
  reg signed [49:0] dot_product10;  // sfix50_En32
  wire signed [24:0] out_DTC10;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_9;  // sfix50_En32
  reg signed [49:0] dot_product11;  // sfix50_En32
  wire signed [24:0] out_DTC11;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_8;  // sfix50_En32
  reg signed [49:0] dot_product12;  // sfix50_En32
  wire signed [24:0] out_DTC12;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_7;  // sfix50_En32
  reg signed [49:0] dot_product13;  // sfix50_En32
  wire signed [24:0] out_DTC13;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_6;  // sfix50_En32
  reg signed [49:0] dot_product14;  // sfix50_En32
  wire signed [24:0] out_DTC14;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_5;  // sfix50_En32
  reg signed [49:0] dot_product15;  // sfix50_En32
  wire signed [24:0] out_DTC15;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_4;  // sfix50_En32
  reg signed [49:0] dot_product16;  // sfix50_En32
  wire signed [24:0] out_DTC16;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_3;  // sfix50_En32
  reg signed [49:0] dot_product17;  // sfix50_En32
  wire signed [24:0] out_DTC17;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_2;  // sfix50_En32
  reg signed [49:0] dot_product18;  // sfix50_En32
  wire signed [24:0] out_DTC18;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_1;  // sfix50_En32
  reg signed [49:0] dot_product19;  // sfix50_En32
  wire signed [24:0] out_DTC19;  // sfix25_En13
  wire signed [49:0] c0_serialOut_0_0;  // sfix50_En32
  reg signed [49:0] dot_product20_2;  // sfix50_En32
  wire signed [24:0] out_DTC20;  // sfix25_En13
  reg signed [31:0] splitcomp_multiport_t_0_0;  // int32
  reg signed [31:0] splitcomp_multiport_t_1;  // int32
  reg signed [31:0] splitcomp_multiport_t_2_0;  // int32
  reg signed [31:0] splitcomp_multiport_t_3;  // int32
  reg signed [31:0] splitcomp_multiport_t_4;  // int32
  reg signed [31:0] splitcomp_multiport_t_5;  // int32
  reg signed [31:0] splitcomp_multiport_t_6;  // int32
  reg signed [31:0] splitcomp_multiport_t_7;  // int32
  reg signed [31:0] splitcomp_multiport_t_8;  // int32
  reg signed [31:0] splitcomp_multiport_t_9;  // int32
  reg signed [31:0] splitcomp_multiport_t_10;  // int32
  reg signed [31:0] splitcomp_multiport_t_11;  // int32
  reg signed [31:0] splitcomp_multiport_t_12;  // int32
  reg signed [31:0] splitcomp_multiport_t_13;  // int32
  reg signed [31:0] splitcomp_multiport_t_14;  // int32
  reg signed [31:0] splitcomp_multiport_t_15;  // int32
  reg signed [31:0] splitcomp_multiport_t_16;  // int32
  reg signed [31:0] splitcomp_multiport_t_17;  // int32
  reg signed [31:0] splitcomp_multiport_t_18;  // int32
  reg signed [31:0] splitcomp_multiport_t_19;  // int32
  reg signed [31:0] rd_1_t_0_0;  // int32
  reg signed [31:0] rd_1_t_1;  // int32
  reg signed [31:0] splitcomp_multiport_t_0_01;  // int32
  reg signed [31:0] splitcomp_multiport_t_110;  // int32
  reg signed [31:0] splitcomp_multiport_t_2_01;  // int32
  reg signed [31:0] splitcomp_multiport_t_31;  // int32
  reg signed [31:0] splitcomp_multiport_t_41;  // int32
  reg signed [31:0] splitcomp_multiport_t_51;  // int32
  reg signed [31:0] splitcomp_multiport_t_61;  // int32
  reg signed [31:0] splitcomp_multiport_t_71;  // int32
  reg signed [31:0] splitcomp_multiport_t_81;  // int32
  reg signed [31:0] splitcomp_multiport_t_91;  // int32
  reg signed [31:0] splitcomp_multiport_t_101;  // int32
  reg signed [31:0] splitcomp_multiport_t_111;  // int32
  reg signed [31:0] splitcomp_multiport_t_121;  // int32
  reg signed [31:0] splitcomp_multiport_t_131;  // int32
  reg signed [31:0] splitcomp_multiport_t_141;  // int32
  reg signed [31:0] splitcomp_multiport_t_151;  // int32
  reg signed [31:0] splitcomp_multiport_t_161;  // int32
  reg signed [31:0] splitcomp_multiport_t_171;  // int32
  reg signed [31:0] splitcomp_multiport_t_181;  // int32
  reg signed [31:0] splitcomp_multiport_t_191;  // int32
  reg signed [31:0] tappedDelay_t_0_0;  // int32
  reg signed [31:0] tappedDelay_t_1;  // int32
  reg signed [31:0] tappedDelay_t_0_1;  // int32
  reg signed [31:0] tappedDelay_t_1_0;  // int32


  assign HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_26_0 = enb_counter == 6'b011010;

  always @(posedge clk)
    begin : rd_7_process
      if (reset == 1'b1) begin
        rd_7_reg <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          rd_7_reg[0] <= HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_26_0;
          rd_7_reg[32'sd3:32'sd1] <= rd_7_reg[32'sd2:32'sd0];
        end
      end
    end

  assign HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_26_0_1 = rd_7_reg[3];

  assign HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19 = enb_counter <= 6'b010011;

  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19_1 <= HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19;
        end
      end
    end

  assign enb_gated = HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_0_19_1 && enb;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 19
  always @(posedge clk)
    begin : ctr_0_19_process
      if (reset == 1'b1) begin
        counterSig <= 5'b00000;
      end
      else begin
        if (enb_gated) begin
          if (counterSig >= 5'b10011) begin
            counterSig <= 5'b00000;
          end
          else begin
            counterSig <= counterSig + 5'b00001;
          end
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign configuration1[0] = 25'sb0000010000000000000000000;
  assign configuration1[1] = 25'sb1111111111111111111100001;
  assign configuration1[2] = 25'sb1111111111111100111011011;
  assign configuration1[3] = 25'sb1111111111111111111100001;
  assign configuration1[4] = 25'sb1111111111111100111011011;
  assign configuration1[5] = 25'sb1111111111111111111100001;
  assign configuration1[6] = 25'sb1111111111111100111011011;
  assign configuration1[7] = 25'sb1111111111111111111100001;
  assign configuration1[8] = 25'sb1111111111111100111011011;
  assign configuration1[9] = 25'sb1111111111111111111100001;
  assign configuration1[10] = 25'sb1111111111111100111011011;
  assign configuration1[11] = 25'sb1111111111111111111100001;
  assign configuration1[12] = 25'sb1111111111111100111011011;
  assign configuration1[13] = 25'sb1111111111111001110110111;
  assign configuration1[14] = 25'sb0000000000000000000000000;
  assign configuration1[15] = 25'sb0000000000000000000000000;
  assign configuration1[16] = 25'sb0000000000000000000000000;
  assign configuration1[17] = 25'sb0000000000000000000000000;
  assign configuration1[18] = 25'sb0000000000000000000000000;
  assign configuration1[19] = 25'sb0000000000000000000000000;
  assign configuration1[20] = 25'sb0000000000000000000000000;
  assign configuration1[21] = 25'sb1111111000000000000010000;
  assign configuration1[22] = 25'sb0110010000000001100010010;
  assign configuration1[23] = 25'sb1111111000000000000010000;
  assign configuration1[24] = 25'sb1001110000000001100010010;
  assign configuration1[25] = 25'sb0000000000000000000010000;
  assign configuration1[26] = 25'sb0000000000000001100010010;
  assign configuration1[27] = 25'sb0000000000000000000010000;
  assign configuration1[28] = 25'sb0000000000000001100010010;
  assign configuration1[29] = 25'sb0000000000000000000010000;
  assign configuration1[30] = 25'sb0000000000000001100010010;
  assign configuration1[31] = 25'sb0000000000000000000010000;
  assign configuration1[32] = 25'sb0000000000000001100010010;
  assign configuration1[33] = 25'sb0000000000000011000100101;
  assign configuration1[34] = 25'sb0000000000000000000000000;
  assign configuration1[35] = 25'sb0000000000000000000000000;
  assign configuration1[36] = 25'sb0000000000000000000000000;
  assign configuration1[37] = 25'sb0000000000000000000000000;
  assign configuration1[38] = 25'sb0000000000000000000000000;
  assign configuration1[39] = 25'sb0000000000000000000000000;
  assign configuration1[40] = 25'sb0000000000000000000000000;
  assign configuration1[41] = 25'sb1111111000000000000010000;
  assign configuration1[42] = 25'sb1001110000000001100010010;
  assign configuration1[43] = 25'sb1111111000000000000010000;
  assign configuration1[44] = 25'sb0110010000000001100010010;
  assign configuration1[45] = 25'sb0000000000000000000010000;
  assign configuration1[46] = 25'sb0000000000000001100010010;
  assign configuration1[47] = 25'sb0000000000000000000010000;
  assign configuration1[48] = 25'sb0000000000000001100010010;
  assign configuration1[49] = 25'sb0000000000000000000010000;
  assign configuration1[50] = 25'sb0000000000000001100010010;
  assign configuration1[51] = 25'sb0000000000000000000010000;
  assign configuration1[52] = 25'sb0000000000000001100010010;
  assign configuration1[53] = 25'sb0000000000000011000100101;
  assign configuration1[54] = 25'sb0000000000000000000000000;
  assign configuration1[55] = 25'sb0000000000000000000000000;
  assign configuration1[56] = 25'sb0000000000000000000000000;
  assign configuration1[57] = 25'sb0000000000000000000000000;
  assign configuration1[58] = 25'sb0000000000000000000000000;
  assign configuration1[59] = 25'sb0000000000000000000000000;
  assign configuration1[60] = 25'sb0000000000000000000000000;
  assign configuration1[61] = 25'sb0000000000000000000010000;
  assign configuration1[62] = 25'sb0000000000000001100010010;
  assign configuration1[63] = 25'sb0000000000000000000010000;
  assign configuration1[64] = 25'sb0000000000000001100010010;
  assign configuration1[65] = 25'sb1111111000000000000010000;
  assign configuration1[66] = 25'sb0110010000000001100010010;
  assign configuration1[67] = 25'sb0000000000000000000010000;
  assign configuration1[68] = 25'sb0000000000000001100010010;
  assign configuration1[69] = 25'sb1111111000000000000010000;
  assign configuration1[70] = 25'sb1001110000000001100010010;
  assign configuration1[71] = 25'sb0000000000000000000010000;
  assign configuration1[72] = 25'sb0000000000000001100010010;
  assign configuration1[73] = 25'sb0000000000000011000100101;
  assign configuration1[74] = 25'sb0000000000000000000000000;
  assign configuration1[75] = 25'sb0000000000000000000000000;
  assign configuration1[76] = 25'sb0000000000000000000000000;
  assign configuration1[77] = 25'sb0000000000000000000000000;
  assign configuration1[78] = 25'sb0000000000000000000000000;
  assign configuration1[79] = 25'sb0000000000000000000000000;
  assign configuration1[80] = 25'sb0000000000000000000000000;
  assign configuration1[81] = 25'sb0000000000000000000010000;
  assign configuration1[82] = 25'sb0000000000000001100010010;
  assign configuration1[83] = 25'sb0000000000000000000010000;
  assign configuration1[84] = 25'sb0000000000000001100010010;
  assign configuration1[85] = 25'sb0000000000000000000010000;
  assign configuration1[86] = 25'sb0000000000000001100010010;
  assign configuration1[87] = 25'sb1111111000000000000010000;
  assign configuration1[88] = 25'sb0110010000000001100010010;
  assign configuration1[89] = 25'sb0000000000000000000010000;
  assign configuration1[90] = 25'sb0000000000000001100010010;
  assign configuration1[91] = 25'sb1111111000000000000010000;
  assign configuration1[92] = 25'sb1001110000000001100010010;
  assign configuration1[93] = 25'sb0000000000000011000100101;
  assign configuration1[94] = 25'sb0000000000000000000000000;
  assign configuration1[95] = 25'sb0000000000000000000000000;
  assign configuration1[96] = 25'sb0000000000000000000000000;
  assign configuration1[97] = 25'sb0000000000000000000000000;
  assign configuration1[98] = 25'sb0000000000000000000000000;
  assign configuration1[99] = 25'sb0000000000000000000000000;
  assign configuration1[100] = 25'sb0000000000000000000000000;
  assign configuration1[101] = 25'sb0000000000000000000010000;
  assign configuration1[102] = 25'sb0000000000000001100010010;
  assign configuration1[103] = 25'sb0000000000000000000010000;
  assign configuration1[104] = 25'sb0000000000000001100010010;
  assign configuration1[105] = 25'sb1111111000000000000010000;
  assign configuration1[106] = 25'sb1001110000000001100010010;
  assign configuration1[107] = 25'sb0000000000000000000010000;
  assign configuration1[108] = 25'sb0000000000000001100010010;
  assign configuration1[109] = 25'sb1111111000000000000010000;
  assign configuration1[110] = 25'sb0110010000000001100010010;
  assign configuration1[111] = 25'sb0000000000000000000010000;
  assign configuration1[112] = 25'sb0000000000000001100010010;
  assign configuration1[113] = 25'sb0000000000000011000100101;
  assign configuration1[114] = 25'sb0000000000000000000000000;
  assign configuration1[115] = 25'sb0000000000000000000000000;
  assign configuration1[116] = 25'sb0000000000000000000000000;
  assign configuration1[117] = 25'sb0000000000000000000000000;
  assign configuration1[118] = 25'sb0000000000000000000000000;
  assign configuration1[119] = 25'sb0000000000000000000000000;
  assign configuration1[120] = 25'sb0000000000000000000000000;
  assign configuration1[121] = 25'sb0000000000000000000010000;
  assign configuration1[122] = 25'sb0000000000000001100010010;
  assign configuration1[123] = 25'sb0000000000000000000010000;
  assign configuration1[124] = 25'sb0000000000000001100010010;
  assign configuration1[125] = 25'sb0000000000000000000010000;
  assign configuration1[126] = 25'sb0000000000000001100010010;
  assign configuration1[127] = 25'sb1111111000000000000010000;
  assign configuration1[128] = 25'sb1001110000000001100010010;
  assign configuration1[129] = 25'sb0000000000000000000010000;
  assign configuration1[130] = 25'sb0000000000000001100010010;
  assign configuration1[131] = 25'sb1111111000000000000010000;
  assign configuration1[132] = 25'sb0110010000000001100010010;
  assign configuration1[133] = 25'sb0000000000000011000100101;
  assign configuration1[134] = 25'sb0000000000000000000000000;
  assign configuration1[135] = 25'sb0000000000000000000000000;
  assign configuration1[136] = 25'sb0000000000000000000000000;
  assign configuration1[137] = 25'sb0000010000000000000000000;
  assign configuration1[138] = 25'sb0000010000000000000000000;
  assign configuration1[139] = 25'sb0000010000000000000000000;

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out0[0] = configuration1[19];
  assign ratechange_splitcomp_out0[1] = configuration1[39];
  assign ratechange_splitcomp_out0[2] = configuration1[59];
  assign ratechange_splitcomp_out0[3] = configuration1[79];
  assign ratechange_splitcomp_out0[4] = configuration1[99];
  assign ratechange_splitcomp_out0[5] = configuration1[119];
  assign ratechange_splitcomp_out0[6] = configuration1[137];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out1[0] = configuration1[18];
  assign ratechange_splitcomp_out1[1] = configuration1[38];
  assign ratechange_splitcomp_out1[2] = configuration1[58];
  assign ratechange_splitcomp_out1[3] = configuration1[78];
  assign ratechange_splitcomp_out1[4] = configuration1[98];
  assign ratechange_splitcomp_out1[5] = configuration1[118];
  assign ratechange_splitcomp_out1[6] = configuration1[139];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out2[0] = configuration1[17];
  assign ratechange_splitcomp_out2[1] = configuration1[37];
  assign ratechange_splitcomp_out2[2] = configuration1[57];
  assign ratechange_splitcomp_out2[3] = configuration1[77];
  assign ratechange_splitcomp_out2[4] = configuration1[97];
  assign ratechange_splitcomp_out2[5] = configuration1[117];
  assign ratechange_splitcomp_out2[6] = configuration1[138];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out3[0] = configuration1[16];
  assign ratechange_splitcomp_out3[1] = configuration1[36];
  assign ratechange_splitcomp_out3[2] = configuration1[56];
  assign ratechange_splitcomp_out3[3] = configuration1[76];
  assign ratechange_splitcomp_out3[4] = configuration1[96];
  assign ratechange_splitcomp_out3[5] = configuration1[116];
  assign ratechange_splitcomp_out3[6] = configuration1[136];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out4[0] = configuration1[15];
  assign ratechange_splitcomp_out4[1] = configuration1[35];
  assign ratechange_splitcomp_out4[2] = configuration1[55];
  assign ratechange_splitcomp_out4[3] = configuration1[75];
  assign ratechange_splitcomp_out4[4] = configuration1[95];
  assign ratechange_splitcomp_out4[5] = configuration1[115];
  assign ratechange_splitcomp_out4[6] = configuration1[135];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out5[0] = configuration1[14];
  assign ratechange_splitcomp_out5[1] = configuration1[34];
  assign ratechange_splitcomp_out5[2] = configuration1[54];
  assign ratechange_splitcomp_out5[3] = configuration1[74];
  assign ratechange_splitcomp_out5[4] = configuration1[94];
  assign ratechange_splitcomp_out5[5] = configuration1[114];
  assign ratechange_splitcomp_out5[6] = configuration1[134];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out6[0] = configuration1[13];
  assign ratechange_splitcomp_out6[1] = configuration1[33];
  assign ratechange_splitcomp_out6[2] = configuration1[53];
  assign ratechange_splitcomp_out6[3] = configuration1[73];
  assign ratechange_splitcomp_out6[4] = configuration1[93];
  assign ratechange_splitcomp_out6[5] = configuration1[113];
  assign ratechange_splitcomp_out6[6] = configuration1[133];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out7[0] = configuration1[12];
  assign ratechange_splitcomp_out7[1] = configuration1[32];
  assign ratechange_splitcomp_out7[2] = configuration1[52];
  assign ratechange_splitcomp_out7[3] = configuration1[72];
  assign ratechange_splitcomp_out7[4] = configuration1[92];
  assign ratechange_splitcomp_out7[5] = configuration1[112];
  assign ratechange_splitcomp_out7[6] = configuration1[132];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out8[0] = configuration1[11];
  assign ratechange_splitcomp_out8[1] = configuration1[31];
  assign ratechange_splitcomp_out8[2] = configuration1[51];
  assign ratechange_splitcomp_out8[3] = configuration1[71];
  assign ratechange_splitcomp_out8[4] = configuration1[91];
  assign ratechange_splitcomp_out8[5] = configuration1[111];
  assign ratechange_splitcomp_out8[6] = configuration1[131];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out9[0] = configuration1[10];
  assign ratechange_splitcomp_out9[1] = configuration1[30];
  assign ratechange_splitcomp_out9[2] = configuration1[50];
  assign ratechange_splitcomp_out9[3] = configuration1[70];
  assign ratechange_splitcomp_out9[4] = configuration1[90];
  assign ratechange_splitcomp_out9[5] = configuration1[110];
  assign ratechange_splitcomp_out9[6] = configuration1[130];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out10[0] = configuration1[9];
  assign ratechange_splitcomp_out10[1] = configuration1[29];
  assign ratechange_splitcomp_out10[2] = configuration1[49];
  assign ratechange_splitcomp_out10[3] = configuration1[69];
  assign ratechange_splitcomp_out10[4] = configuration1[89];
  assign ratechange_splitcomp_out10[5] = configuration1[109];
  assign ratechange_splitcomp_out10[6] = configuration1[129];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out11[0] = configuration1[8];
  assign ratechange_splitcomp_out11[1] = configuration1[28];
  assign ratechange_splitcomp_out11[2] = configuration1[48];
  assign ratechange_splitcomp_out11[3] = configuration1[68];
  assign ratechange_splitcomp_out11[4] = configuration1[88];
  assign ratechange_splitcomp_out11[5] = configuration1[108];
  assign ratechange_splitcomp_out11[6] = configuration1[128];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out12[0] = configuration1[7];
  assign ratechange_splitcomp_out12[1] = configuration1[27];
  assign ratechange_splitcomp_out12[2] = configuration1[47];
  assign ratechange_splitcomp_out12[3] = configuration1[67];
  assign ratechange_splitcomp_out12[4] = configuration1[87];
  assign ratechange_splitcomp_out12[5] = configuration1[107];
  assign ratechange_splitcomp_out12[6] = configuration1[127];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out13[0] = configuration1[6];
  assign ratechange_splitcomp_out13[1] = configuration1[26];
  assign ratechange_splitcomp_out13[2] = configuration1[46];
  assign ratechange_splitcomp_out13[3] = configuration1[66];
  assign ratechange_splitcomp_out13[4] = configuration1[86];
  assign ratechange_splitcomp_out13[5] = configuration1[106];
  assign ratechange_splitcomp_out13[6] = configuration1[126];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out14[0] = configuration1[5];
  assign ratechange_splitcomp_out14[1] = configuration1[25];
  assign ratechange_splitcomp_out14[2] = configuration1[45];
  assign ratechange_splitcomp_out14[3] = configuration1[65];
  assign ratechange_splitcomp_out14[4] = configuration1[85];
  assign ratechange_splitcomp_out14[5] = configuration1[105];
  assign ratechange_splitcomp_out14[6] = configuration1[125];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out15[0] = configuration1[4];
  assign ratechange_splitcomp_out15[1] = configuration1[24];
  assign ratechange_splitcomp_out15[2] = configuration1[44];
  assign ratechange_splitcomp_out15[3] = configuration1[64];
  assign ratechange_splitcomp_out15[4] = configuration1[84];
  assign ratechange_splitcomp_out15[5] = configuration1[104];
  assign ratechange_splitcomp_out15[6] = configuration1[124];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out16[0] = configuration1[3];
  assign ratechange_splitcomp_out16[1] = configuration1[23];
  assign ratechange_splitcomp_out16[2] = configuration1[43];
  assign ratechange_splitcomp_out16[3] = configuration1[63];
  assign ratechange_splitcomp_out16[4] = configuration1[83];
  assign ratechange_splitcomp_out16[5] = configuration1[103];
  assign ratechange_splitcomp_out16[6] = configuration1[123];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out17[0] = configuration1[2];
  assign ratechange_splitcomp_out17[1] = configuration1[22];
  assign ratechange_splitcomp_out17[2] = configuration1[42];
  assign ratechange_splitcomp_out17[3] = configuration1[62];
  assign ratechange_splitcomp_out17[4] = configuration1[82];
  assign ratechange_splitcomp_out17[5] = configuration1[102];
  assign ratechange_splitcomp_out17[6] = configuration1[122];

  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out18[0] = configuration1[1];
  assign ratechange_splitcomp_out18[1] = configuration1[21];
  assign ratechange_splitcomp_out18[2] = configuration1[41];
  assign ratechange_splitcomp_out18[3] = configuration1[61];
  assign ratechange_splitcomp_out18[4] = configuration1[81];
  assign ratechange_splitcomp_out18[5] = configuration1[101];
  assign ratechange_splitcomp_out18[6] = configuration1[121];

  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  assign ratechange_splitcomp_out19[0] = configuration1[0];
  assign ratechange_splitcomp_out19[1] = configuration1[20];
  assign ratechange_splitcomp_out19[2] = configuration1[40];
  assign ratechange_splitcomp_out19[3] = configuration1[60];
  assign ratechange_splitcomp_out19[4] = configuration1[80];
  assign ratechange_splitcomp_out19[5] = configuration1[100];
  assign ratechange_splitcomp_out19[6] = configuration1[120];

  always @* begin
    if (counterSig == 5'b00000) begin
      for(splitcomp_multiport_t_0_0 = 32'sd0; splitcomp_multiport_t_0_0 <= 32'sd6; splitcomp_multiport_t_0_0 = splitcomp_multiport_t_0_0 + 32'sd1) begin
        row20[splitcomp_multiport_t_0_0] = ratechange_splitcomp_out0[splitcomp_multiport_t_0_0];
      end
    end
    else if (counterSig == 5'b00001) begin
      for(splitcomp_multiport_t_1 = 32'sd0; splitcomp_multiport_t_1 <= 32'sd6; splitcomp_multiport_t_1 = splitcomp_multiport_t_1 + 32'sd1) begin
        row20[splitcomp_multiport_t_1] = ratechange_splitcomp_out1[splitcomp_multiport_t_1];
      end
    end
    else if (counterSig == 5'b00010) begin
      for(splitcomp_multiport_t_2_0 = 32'sd0; splitcomp_multiport_t_2_0 <= 32'sd6; splitcomp_multiport_t_2_0 = splitcomp_multiport_t_2_0 + 32'sd1) begin
        row20[splitcomp_multiport_t_2_0] = ratechange_splitcomp_out2[splitcomp_multiport_t_2_0];
      end
    end
    else if (counterSig == 5'b00011) begin
      for(splitcomp_multiport_t_3 = 32'sd0; splitcomp_multiport_t_3 <= 32'sd6; splitcomp_multiport_t_3 = splitcomp_multiport_t_3 + 32'sd1) begin
        row20[splitcomp_multiport_t_3] = ratechange_splitcomp_out3[splitcomp_multiport_t_3];
      end
    end
    else if (counterSig == 5'b00100) begin
      for(splitcomp_multiport_t_4 = 32'sd0; splitcomp_multiport_t_4 <= 32'sd6; splitcomp_multiport_t_4 = splitcomp_multiport_t_4 + 32'sd1) begin
        row20[splitcomp_multiport_t_4] = ratechange_splitcomp_out4[splitcomp_multiport_t_4];
      end
    end
    else if (counterSig == 5'b00101) begin
      for(splitcomp_multiport_t_5 = 32'sd0; splitcomp_multiport_t_5 <= 32'sd6; splitcomp_multiport_t_5 = splitcomp_multiport_t_5 + 32'sd1) begin
        row20[splitcomp_multiport_t_5] = ratechange_splitcomp_out5[splitcomp_multiport_t_5];
      end
    end
    else if (counterSig == 5'b00110) begin
      for(splitcomp_multiport_t_6 = 32'sd0; splitcomp_multiport_t_6 <= 32'sd6; splitcomp_multiport_t_6 = splitcomp_multiport_t_6 + 32'sd1) begin
        row20[splitcomp_multiport_t_6] = ratechange_splitcomp_out6[splitcomp_multiport_t_6];
      end
    end
    else if (counterSig == 5'b00111) begin
      for(splitcomp_multiport_t_7 = 32'sd0; splitcomp_multiport_t_7 <= 32'sd6; splitcomp_multiport_t_7 = splitcomp_multiport_t_7 + 32'sd1) begin
        row20[splitcomp_multiport_t_7] = ratechange_splitcomp_out7[splitcomp_multiport_t_7];
      end
    end
    else if (counterSig == 5'b01000) begin
      for(splitcomp_multiport_t_8 = 32'sd0; splitcomp_multiport_t_8 <= 32'sd6; splitcomp_multiport_t_8 = splitcomp_multiport_t_8 + 32'sd1) begin
        row20[splitcomp_multiport_t_8] = ratechange_splitcomp_out8[splitcomp_multiport_t_8];
      end
    end
    else if (counterSig == 5'b01001) begin
      for(splitcomp_multiport_t_9 = 32'sd0; splitcomp_multiport_t_9 <= 32'sd6; splitcomp_multiport_t_9 = splitcomp_multiport_t_9 + 32'sd1) begin
        row20[splitcomp_multiport_t_9] = ratechange_splitcomp_out9[splitcomp_multiport_t_9];
      end
    end
    else if (counterSig == 5'b01010) begin
      for(splitcomp_multiport_t_10 = 32'sd0; splitcomp_multiport_t_10 <= 32'sd6; splitcomp_multiport_t_10 = splitcomp_multiport_t_10 + 32'sd1) begin
        row20[splitcomp_multiport_t_10] = ratechange_splitcomp_out10[splitcomp_multiport_t_10];
      end
    end
    else if (counterSig == 5'b01011) begin
      for(splitcomp_multiport_t_11 = 32'sd0; splitcomp_multiport_t_11 <= 32'sd6; splitcomp_multiport_t_11 = splitcomp_multiport_t_11 + 32'sd1) begin
        row20[splitcomp_multiport_t_11] = ratechange_splitcomp_out11[splitcomp_multiport_t_11];
      end
    end
    else if (counterSig == 5'b01100) begin
      for(splitcomp_multiport_t_12 = 32'sd0; splitcomp_multiport_t_12 <= 32'sd6; splitcomp_multiport_t_12 = splitcomp_multiport_t_12 + 32'sd1) begin
        row20[splitcomp_multiport_t_12] = ratechange_splitcomp_out12[splitcomp_multiport_t_12];
      end
    end
    else if (counterSig == 5'b01101) begin
      for(splitcomp_multiport_t_13 = 32'sd0; splitcomp_multiport_t_13 <= 32'sd6; splitcomp_multiport_t_13 = splitcomp_multiport_t_13 + 32'sd1) begin
        row20[splitcomp_multiport_t_13] = ratechange_splitcomp_out13[splitcomp_multiport_t_13];
      end
    end
    else if (counterSig == 5'b01110) begin
      for(splitcomp_multiport_t_14 = 32'sd0; splitcomp_multiport_t_14 <= 32'sd6; splitcomp_multiport_t_14 = splitcomp_multiport_t_14 + 32'sd1) begin
        row20[splitcomp_multiport_t_14] = ratechange_splitcomp_out14[splitcomp_multiport_t_14];
      end
    end
    else if (counterSig == 5'b01111) begin
      for(splitcomp_multiport_t_15 = 32'sd0; splitcomp_multiport_t_15 <= 32'sd6; splitcomp_multiport_t_15 = splitcomp_multiport_t_15 + 32'sd1) begin
        row20[splitcomp_multiport_t_15] = ratechange_splitcomp_out15[splitcomp_multiport_t_15];
      end
    end
    else if (counterSig == 5'b10000) begin
      for(splitcomp_multiport_t_16 = 32'sd0; splitcomp_multiport_t_16 <= 32'sd6; splitcomp_multiport_t_16 = splitcomp_multiport_t_16 + 32'sd1) begin
        row20[splitcomp_multiport_t_16] = ratechange_splitcomp_out16[splitcomp_multiport_t_16];
      end
    end
    else if (counterSig == 5'b10001) begin
      for(splitcomp_multiport_t_17 = 32'sd0; splitcomp_multiport_t_17 <= 32'sd6; splitcomp_multiport_t_17 = splitcomp_multiport_t_17 + 32'sd1) begin
        row20[splitcomp_multiport_t_17] = ratechange_splitcomp_out17[splitcomp_multiport_t_17];
      end
    end
    else if (counterSig == 5'b10010) begin
      for(splitcomp_multiport_t_19 = 32'sd0; splitcomp_multiport_t_19 <= 32'sd6; splitcomp_multiport_t_19 = splitcomp_multiport_t_19 + 32'sd1) begin
        row20[splitcomp_multiport_t_19] = ratechange_splitcomp_out18[splitcomp_multiport_t_19];
      end
    end
    else begin
      for(splitcomp_multiport_t_18 = 32'sd0; splitcomp_multiport_t_18 <= 32'sd6; splitcomp_multiport_t_18 = splitcomp_multiport_t_18 + 32'sd1) begin
        row20[splitcomp_multiport_t_18] = ratechange_splitcomp_out19[splitcomp_multiport_t_18];
      end
    end
  end

  // Input register for RAM-based shift register rd_2
  always @(posedge clk)
    begin : rd_2_reginc_process
      if (reset == 1'b1) begin
        rd_2_regin <= 5'b00000;
      end
      else begin
        if (enb) begin
          rd_2_regin <= counterSig;
        end
      end
    end

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 3
  // Write address counter for RAM-based shift register rd_2
  always @(posedge clk)
    begin : rd_2_wr_process
      if (reset == 1'b1) begin
        rd_2_waddr <= 3'b000;
      end
      else begin
        if (enb) begin
          if (rd_2_waddr >= 3'b011) begin
            rd_2_waddr <= 3'b000;
          end
          else begin
            rd_2_waddr <= rd_2_waddr + 3'b001;
          end
        end
      end
    end

  assign rd_2_wrenb = 1'b1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 3
  // Read address counter for RAM-based shift register rd_2
  always @(posedge clk)
    begin : rd_2_rd_process
      if (reset == 1'b1) begin
        rd_2_raddr <= 3'b001;
      end
      else begin
        if (enb) begin
          if (rd_2_raddr >= 3'b011) begin
            rd_2_raddr <= 3'b000;
          end
          else begin
            rd_2_raddr <= rd_2_raddr + 3'b001;
          end
        end
      end
    end

  ShiftRegisterRAM_Wrapper_generic #(.AddrWidth(3),
                                     .DataWidth(5)
                                     )
                                   u_ShiftRegisterRAM_Wrapper (.clk(clk),
                                                               .reset(reset),
                                                               .enb(enb),
                                                               .enb_1_1_1(enb_1_1_1),
                                                               .wr_din(rd_2_regin),
                                                               .wr_addr(rd_2_waddr),
                                                               .wr_en(rd_2_wrenb),  // ufix1
                                                               .rd_addr(rd_2_raddr),
                                                               .dout(rd_2_regout)
                                                               );

  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  assign c0_serial_1[0] = in0_0;
  assign c0_serial_1[1] = in0_1;
  assign c0_serial_1[2] = in0_2;
  assign c0_serial_1[3] = in0_3;
  assign c0_serial_1[4] = in0_4;
  assign c0_serial_1[5] = in0_5;
  assign c0_serial_1[6] = in0_7;
  assign c0_serial_1[7] = in0_0;
  assign c0_serial_1[8] = in0_1;
  assign c0_serial_1[9] = in0_2;
  assign c0_serial_1[10] = in0_3;
  assign c0_serial_1[11] = in0_4;
  assign c0_serial_1[12] = in0_5;
  assign c0_serial_1[13] = in0_9;
  assign c0_serial_1[14] = in0_0;
  assign c0_serial_1[15] = in0_1;
  assign c0_serial_1[16] = in0_2;
  assign c0_serial_1[17] = in0_3;
  assign c0_serial_1[18] = in0_4;
  assign c0_serial_1[19] = in0_5;
  assign c0_serial_1[20] = in0_8;
  assign c0_serial_1[21] = in0_0;
  assign c0_serial_1[22] = in0_1;
  assign c0_serial_1[23] = in0_2;
  assign c0_serial_1[24] = in0_3;
  assign c0_serial_1[25] = in0_4;
  assign c0_serial_1[26] = in0_5;
  assign c0_serial_1[27] = in0_6;
  assign c0_serial_1[28] = in0_0;
  assign c0_serial_1[29] = in0_1;
  assign c0_serial_1[30] = in0_2;
  assign c0_serial_1[31] = in0_3;
  assign c0_serial_1[32] = in0_4;
  assign c0_serial_1[33] = in0_5;
  assign c0_serial_1[34] = in0_6;
  assign c0_serial_1[35] = in0_0;
  assign c0_serial_1[36] = in0_1;
  assign c0_serial_1[37] = in0_2;
  assign c0_serial_1[38] = in0_3;
  assign c0_serial_1[39] = in0_4;
  assign c0_serial_1[40] = in0_5;
  assign c0_serial_1[41] = in0_6;
  assign c0_serial_1[42] = in0_0;
  assign c0_serial_1[43] = in0_1;
  assign c0_serial_1[44] = in0_2;
  assign c0_serial_1[45] = in0_3;
  assign c0_serial_1[46] = in0_4;
  assign c0_serial_1[47] = in0_5;
  assign c0_serial_1[48] = in0_6;
  assign c0_serial_1[49] = in0_0;
  assign c0_serial_1[50] = in0_1;
  assign c0_serial_1[51] = in0_2;
  assign c0_serial_1[52] = in0_3;
  assign c0_serial_1[53] = in0_4;
  assign c0_serial_1[54] = in0_5;
  assign c0_serial_1[55] = in0_6;
  assign c0_serial_1[56] = in0_0;
  assign c0_serial_1[57] = in0_1;
  assign c0_serial_1[58] = in0_2;
  assign c0_serial_1[59] = in0_3;
  assign c0_serial_1[60] = in0_4;
  assign c0_serial_1[61] = in0_5;
  assign c0_serial_1[62] = in0_6;
  assign c0_serial_1[63] = in0_0;
  assign c0_serial_1[64] = in0_1;
  assign c0_serial_1[65] = in0_2;
  assign c0_serial_1[66] = in0_3;
  assign c0_serial_1[67] = in0_4;
  assign c0_serial_1[68] = in0_5;
  assign c0_serial_1[69] = in0_6;
  assign c0_serial_1[70] = in0_0;
  assign c0_serial_1[71] = in0_1;
  assign c0_serial_1[72] = in0_2;
  assign c0_serial_1[73] = in0_3;
  assign c0_serial_1[74] = in0_4;
  assign c0_serial_1[75] = in0_5;
  assign c0_serial_1[76] = in0_6;
  assign c0_serial_1[77] = in0_0;
  assign c0_serial_1[78] = in0_1;
  assign c0_serial_1[79] = in0_2;
  assign c0_serial_1[80] = in0_3;
  assign c0_serial_1[81] = in0_4;
  assign c0_serial_1[82] = in0_5;
  assign c0_serial_1[83] = in0_6;
  assign c0_serial_1[84] = in0_0;
  assign c0_serial_1[85] = in0_1;
  assign c0_serial_1[86] = in0_2;
  assign c0_serial_1[87] = in0_3;
  assign c0_serial_1[88] = in0_4;
  assign c0_serial_1[89] = in0_5;
  assign c0_serial_1[90] = in0_6;
  assign c0_serial_1[91] = in0_0;
  assign c0_serial_1[92] = in0_1;
  assign c0_serial_1[93] = in0_2;
  assign c0_serial_1[94] = in0_3;
  assign c0_serial_1[95] = in0_4;
  assign c0_serial_1[96] = in0_5;
  assign c0_serial_1[97] = in0_6;
  assign c0_serial_1[98] = in0_0;
  assign c0_serial_1[99] = in0_1;
  assign c0_serial_1[100] = in0_2;
  assign c0_serial_1[101] = in0_3;
  assign c0_serial_1[102] = in0_4;
  assign c0_serial_1[103] = in0_5;
  assign c0_serial_1[104] = in0_6;
  assign c0_serial_1[105] = in0_0;
  assign c0_serial_1[106] = in0_1;
  assign c0_serial_1[107] = in0_2;
  assign c0_serial_1[108] = in0_3;
  assign c0_serial_1[109] = in0_4;
  assign c0_serial_1[110] = in0_5;
  assign c0_serial_1[111] = in0_6;
  assign c0_serial_1[112] = in0_0;
  assign c0_serial_1[113] = in0_1;
  assign c0_serial_1[114] = in0_2;
  assign c0_serial_1[115] = in0_3;
  assign c0_serial_1[116] = in0_4;
  assign c0_serial_1[117] = in0_5;
  assign c0_serial_1[118] = in0_6;
  assign c0_serial_1[119] = in0_0;
  assign c0_serial_1[120] = in0_1;
  assign c0_serial_1[121] = in0_2;
  assign c0_serial_1[122] = in0_3;
  assign c0_serial_1[123] = in0_4;
  assign c0_serial_1[124] = in0_5;
  assign c0_serial_1[125] = in0_6;
  assign c0_serial_1[126] = in0_0;
  assign c0_serial_1[127] = in0_1;
  assign c0_serial_1[128] = in0_2;
  assign c0_serial_1[129] = in0_3;
  assign c0_serial_1[130] = in0_4;
  assign c0_serial_1[131] = in0_5;
  assign c0_serial_1[132] = in0_6;
  assign c0_serial_1[133] = in0_0;
  assign c0_serial_1[134] = in0_1;
  assign c0_serial_1[135] = in0_2;
  assign c0_serial_1[136] = in0_3;
  assign c0_serial_1[137] = in0_4;
  assign c0_serial_1[138] = in0_5;
  assign c0_serial_1[139] = in0_6;

  always @(posedge clk)
    begin : rd_1_process
      if (reset == 1'b1) begin
        for(rd_1_t_1 = 32'sd0; rd_1_t_1 <= 32'sd139; rd_1_t_1 = rd_1_t_1 + 32'sd1) begin
          c0_serial_1_1[rd_1_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(rd_1_t_0_0 = 32'sd0; rd_1_t_0_0 <= 32'sd139; rd_1_t_0_0 = rd_1_t_0_0 + 32'sd1) begin
            c0_serial_1_1[rd_1_t_0_0] <= c0_serial_1[rd_1_t_0_0];
          end
        end
      end
    end

  // Output register for RAM-based shift register rd_2
  always @(posedge clk)
    begin : rd_2_regoutc_process
      if (reset == 1'b1) begin
        counterSig_1 <= 5'b00000;
      end
      else begin
        if (enb) begin
          counterSig_1 <= rd_2_regout;
        end
      end
    end

  assign ratechange_splitcomp_out0_1[0] = c0_serial_1_1[0];
  assign ratechange_splitcomp_out0_1[1] = c0_serial_1_1[1];
  assign ratechange_splitcomp_out0_1[2] = c0_serial_1_1[2];
  assign ratechange_splitcomp_out0_1[3] = c0_serial_1_1[3];
  assign ratechange_splitcomp_out0_1[4] = c0_serial_1_1[4];
  assign ratechange_splitcomp_out0_1[5] = c0_serial_1_1[5];
  assign ratechange_splitcomp_out0_1[6] = c0_serial_1_1[6];

  assign ratechange_splitcomp_out1_1[0] = c0_serial_1_1[7];
  assign ratechange_splitcomp_out1_1[1] = c0_serial_1_1[8];
  assign ratechange_splitcomp_out1_1[2] = c0_serial_1_1[9];
  assign ratechange_splitcomp_out1_1[3] = c0_serial_1_1[10];
  assign ratechange_splitcomp_out1_1[4] = c0_serial_1_1[11];
  assign ratechange_splitcomp_out1_1[5] = c0_serial_1_1[12];
  assign ratechange_splitcomp_out1_1[6] = c0_serial_1_1[13];

  assign ratechange_splitcomp_out2_1[0] = c0_serial_1_1[14];
  assign ratechange_splitcomp_out2_1[1] = c0_serial_1_1[15];
  assign ratechange_splitcomp_out2_1[2] = c0_serial_1_1[16];
  assign ratechange_splitcomp_out2_1[3] = c0_serial_1_1[17];
  assign ratechange_splitcomp_out2_1[4] = c0_serial_1_1[18];
  assign ratechange_splitcomp_out2_1[5] = c0_serial_1_1[19];
  assign ratechange_splitcomp_out2_1[6] = c0_serial_1_1[20];

  assign ratechange_splitcomp_out3_1[0] = c0_serial_1_1[21];
  assign ratechange_splitcomp_out3_1[1] = c0_serial_1_1[22];
  assign ratechange_splitcomp_out3_1[2] = c0_serial_1_1[23];
  assign ratechange_splitcomp_out3_1[3] = c0_serial_1_1[24];
  assign ratechange_splitcomp_out3_1[4] = c0_serial_1_1[25];
  assign ratechange_splitcomp_out3_1[5] = c0_serial_1_1[26];
  assign ratechange_splitcomp_out3_1[6] = c0_serial_1_1[27];

  assign ratechange_splitcomp_out4_1[0] = c0_serial_1_1[28];
  assign ratechange_splitcomp_out4_1[1] = c0_serial_1_1[29];
  assign ratechange_splitcomp_out4_1[2] = c0_serial_1_1[30];
  assign ratechange_splitcomp_out4_1[3] = c0_serial_1_1[31];
  assign ratechange_splitcomp_out4_1[4] = c0_serial_1_1[32];
  assign ratechange_splitcomp_out4_1[5] = c0_serial_1_1[33];
  assign ratechange_splitcomp_out4_1[6] = c0_serial_1_1[34];

  assign ratechange_splitcomp_out5_1[0] = c0_serial_1_1[35];
  assign ratechange_splitcomp_out5_1[1] = c0_serial_1_1[36];
  assign ratechange_splitcomp_out5_1[2] = c0_serial_1_1[37];
  assign ratechange_splitcomp_out5_1[3] = c0_serial_1_1[38];
  assign ratechange_splitcomp_out5_1[4] = c0_serial_1_1[39];
  assign ratechange_splitcomp_out5_1[5] = c0_serial_1_1[40];
  assign ratechange_splitcomp_out5_1[6] = c0_serial_1_1[41];

  assign ratechange_splitcomp_out6_1[0] = c0_serial_1_1[42];
  assign ratechange_splitcomp_out6_1[1] = c0_serial_1_1[43];
  assign ratechange_splitcomp_out6_1[2] = c0_serial_1_1[44];
  assign ratechange_splitcomp_out6_1[3] = c0_serial_1_1[45];
  assign ratechange_splitcomp_out6_1[4] = c0_serial_1_1[46];
  assign ratechange_splitcomp_out6_1[5] = c0_serial_1_1[47];
  assign ratechange_splitcomp_out6_1[6] = c0_serial_1_1[48];

  assign ratechange_splitcomp_out7_1[0] = c0_serial_1_1[49];
  assign ratechange_splitcomp_out7_1[1] = c0_serial_1_1[50];
  assign ratechange_splitcomp_out7_1[2] = c0_serial_1_1[51];
  assign ratechange_splitcomp_out7_1[3] = c0_serial_1_1[52];
  assign ratechange_splitcomp_out7_1[4] = c0_serial_1_1[53];
  assign ratechange_splitcomp_out7_1[5] = c0_serial_1_1[54];
  assign ratechange_splitcomp_out7_1[6] = c0_serial_1_1[55];

  assign ratechange_splitcomp_out8_1[0] = c0_serial_1_1[56];
  assign ratechange_splitcomp_out8_1[1] = c0_serial_1_1[57];
  assign ratechange_splitcomp_out8_1[2] = c0_serial_1_1[58];
  assign ratechange_splitcomp_out8_1[3] = c0_serial_1_1[59];
  assign ratechange_splitcomp_out8_1[4] = c0_serial_1_1[60];
  assign ratechange_splitcomp_out8_1[5] = c0_serial_1_1[61];
  assign ratechange_splitcomp_out8_1[6] = c0_serial_1_1[62];

  assign ratechange_splitcomp_out9_1[0] = c0_serial_1_1[63];
  assign ratechange_splitcomp_out9_1[1] = c0_serial_1_1[64];
  assign ratechange_splitcomp_out9_1[2] = c0_serial_1_1[65];
  assign ratechange_splitcomp_out9_1[3] = c0_serial_1_1[66];
  assign ratechange_splitcomp_out9_1[4] = c0_serial_1_1[67];
  assign ratechange_splitcomp_out9_1[5] = c0_serial_1_1[68];
  assign ratechange_splitcomp_out9_1[6] = c0_serial_1_1[69];

  assign ratechange_splitcomp_out10_1[0] = c0_serial_1_1[70];
  assign ratechange_splitcomp_out10_1[1] = c0_serial_1_1[71];
  assign ratechange_splitcomp_out10_1[2] = c0_serial_1_1[72];
  assign ratechange_splitcomp_out10_1[3] = c0_serial_1_1[73];
  assign ratechange_splitcomp_out10_1[4] = c0_serial_1_1[74];
  assign ratechange_splitcomp_out10_1[5] = c0_serial_1_1[75];
  assign ratechange_splitcomp_out10_1[6] = c0_serial_1_1[76];

  assign ratechange_splitcomp_out11_1[0] = c0_serial_1_1[77];
  assign ratechange_splitcomp_out11_1[1] = c0_serial_1_1[78];
  assign ratechange_splitcomp_out11_1[2] = c0_serial_1_1[79];
  assign ratechange_splitcomp_out11_1[3] = c0_serial_1_1[80];
  assign ratechange_splitcomp_out11_1[4] = c0_serial_1_1[81];
  assign ratechange_splitcomp_out11_1[5] = c0_serial_1_1[82];
  assign ratechange_splitcomp_out11_1[6] = c0_serial_1_1[83];

  assign ratechange_splitcomp_out12_1[0] = c0_serial_1_1[84];
  assign ratechange_splitcomp_out12_1[1] = c0_serial_1_1[85];
  assign ratechange_splitcomp_out12_1[2] = c0_serial_1_1[86];
  assign ratechange_splitcomp_out12_1[3] = c0_serial_1_1[87];
  assign ratechange_splitcomp_out12_1[4] = c0_serial_1_1[88];
  assign ratechange_splitcomp_out12_1[5] = c0_serial_1_1[89];
  assign ratechange_splitcomp_out12_1[6] = c0_serial_1_1[90];

  assign ratechange_splitcomp_out13_1[0] = c0_serial_1_1[91];
  assign ratechange_splitcomp_out13_1[1] = c0_serial_1_1[92];
  assign ratechange_splitcomp_out13_1[2] = c0_serial_1_1[93];
  assign ratechange_splitcomp_out13_1[3] = c0_serial_1_1[94];
  assign ratechange_splitcomp_out13_1[4] = c0_serial_1_1[95];
  assign ratechange_splitcomp_out13_1[5] = c0_serial_1_1[96];
  assign ratechange_splitcomp_out13_1[6] = c0_serial_1_1[97];

  assign ratechange_splitcomp_out14_1[0] = c0_serial_1_1[98];
  assign ratechange_splitcomp_out14_1[1] = c0_serial_1_1[99];
  assign ratechange_splitcomp_out14_1[2] = c0_serial_1_1[100];
  assign ratechange_splitcomp_out14_1[3] = c0_serial_1_1[101];
  assign ratechange_splitcomp_out14_1[4] = c0_serial_1_1[102];
  assign ratechange_splitcomp_out14_1[5] = c0_serial_1_1[103];
  assign ratechange_splitcomp_out14_1[6] = c0_serial_1_1[104];

  assign ratechange_splitcomp_out15_1[0] = c0_serial_1_1[105];
  assign ratechange_splitcomp_out15_1[1] = c0_serial_1_1[106];
  assign ratechange_splitcomp_out15_1[2] = c0_serial_1_1[107];
  assign ratechange_splitcomp_out15_1[3] = c0_serial_1_1[108];
  assign ratechange_splitcomp_out15_1[4] = c0_serial_1_1[109];
  assign ratechange_splitcomp_out15_1[5] = c0_serial_1_1[110];
  assign ratechange_splitcomp_out15_1[6] = c0_serial_1_1[111];

  assign ratechange_splitcomp_out16_1[0] = c0_serial_1_1[112];
  assign ratechange_splitcomp_out16_1[1] = c0_serial_1_1[113];
  assign ratechange_splitcomp_out16_1[2] = c0_serial_1_1[114];
  assign ratechange_splitcomp_out16_1[3] = c0_serial_1_1[115];
  assign ratechange_splitcomp_out16_1[4] = c0_serial_1_1[116];
  assign ratechange_splitcomp_out16_1[5] = c0_serial_1_1[117];
  assign ratechange_splitcomp_out16_1[6] = c0_serial_1_1[118];

  assign ratechange_splitcomp_out17_1[0] = c0_serial_1_1[119];
  assign ratechange_splitcomp_out17_1[1] = c0_serial_1_1[120];
  assign ratechange_splitcomp_out17_1[2] = c0_serial_1_1[121];
  assign ratechange_splitcomp_out17_1[3] = c0_serial_1_1[122];
  assign ratechange_splitcomp_out17_1[4] = c0_serial_1_1[123];
  assign ratechange_splitcomp_out17_1[5] = c0_serial_1_1[124];
  assign ratechange_splitcomp_out17_1[6] = c0_serial_1_1[125];

  assign ratechange_splitcomp_out18_1[0] = c0_serial_1_1[126];
  assign ratechange_splitcomp_out18_1[1] = c0_serial_1_1[127];
  assign ratechange_splitcomp_out18_1[2] = c0_serial_1_1[128];
  assign ratechange_splitcomp_out18_1[3] = c0_serial_1_1[129];
  assign ratechange_splitcomp_out18_1[4] = c0_serial_1_1[130];
  assign ratechange_splitcomp_out18_1[5] = c0_serial_1_1[131];
  assign ratechange_splitcomp_out18_1[6] = c0_serial_1_1[132];

  assign ratechange_splitcomp_out19_1[0] = c0_serial_1_1[133];
  assign ratechange_splitcomp_out19_1[1] = c0_serial_1_1[134];
  assign ratechange_splitcomp_out19_1[2] = c0_serial_1_1[135];
  assign ratechange_splitcomp_out19_1[3] = c0_serial_1_1[136];
  assign ratechange_splitcomp_out19_1[4] = c0_serial_1_1[137];
  assign ratechange_splitcomp_out19_1[5] = c0_serial_1_1[138];
  assign ratechange_splitcomp_out19_1[6] = c0_serial_1_1[139];

  always @* begin
    if (counterSig_1 == 5'b00000) begin
      for(splitcomp_multiport_t_0_01 = 32'sd0; splitcomp_multiport_t_0_01 <= 32'sd6; splitcomp_multiport_t_0_01 = splitcomp_multiport_t_0_01 + 32'sd1) begin
        col20[splitcomp_multiport_t_0_01] = ratechange_splitcomp_out0_1[splitcomp_multiport_t_0_01];
      end
    end
    else if (counterSig_1 == 5'b00001) begin
      for(splitcomp_multiport_t_110 = 32'sd0; splitcomp_multiport_t_110 <= 32'sd6; splitcomp_multiport_t_110 = splitcomp_multiport_t_110 + 32'sd1) begin
        col20[splitcomp_multiport_t_110] = ratechange_splitcomp_out1_1[splitcomp_multiport_t_110];
      end
    end
    else if (counterSig_1 == 5'b00010) begin
      for(splitcomp_multiport_t_2_01 = 32'sd0; splitcomp_multiport_t_2_01 <= 32'sd6; splitcomp_multiport_t_2_01 = splitcomp_multiport_t_2_01 + 32'sd1) begin
        col20[splitcomp_multiport_t_2_01] = ratechange_splitcomp_out2_1[splitcomp_multiport_t_2_01];
      end
    end
    else if (counterSig_1 == 5'b00011) begin
      for(splitcomp_multiport_t_31 = 32'sd0; splitcomp_multiport_t_31 <= 32'sd6; splitcomp_multiport_t_31 = splitcomp_multiport_t_31 + 32'sd1) begin
        col20[splitcomp_multiport_t_31] = ratechange_splitcomp_out3_1[splitcomp_multiport_t_31];
      end
    end
    else if (counterSig_1 == 5'b00100) begin
      for(splitcomp_multiport_t_41 = 32'sd0; splitcomp_multiport_t_41 <= 32'sd6; splitcomp_multiport_t_41 = splitcomp_multiport_t_41 + 32'sd1) begin
        col20[splitcomp_multiport_t_41] = ratechange_splitcomp_out4_1[splitcomp_multiport_t_41];
      end
    end
    else if (counterSig_1 == 5'b00101) begin
      for(splitcomp_multiport_t_51 = 32'sd0; splitcomp_multiport_t_51 <= 32'sd6; splitcomp_multiport_t_51 = splitcomp_multiport_t_51 + 32'sd1) begin
        col20[splitcomp_multiport_t_51] = ratechange_splitcomp_out5_1[splitcomp_multiport_t_51];
      end
    end
    else if (counterSig_1 == 5'b00110) begin
      for(splitcomp_multiport_t_61 = 32'sd0; splitcomp_multiport_t_61 <= 32'sd6; splitcomp_multiport_t_61 = splitcomp_multiport_t_61 + 32'sd1) begin
        col20[splitcomp_multiport_t_61] = ratechange_splitcomp_out6_1[splitcomp_multiport_t_61];
      end
    end
    else if (counterSig_1 == 5'b00111) begin
      for(splitcomp_multiport_t_71 = 32'sd0; splitcomp_multiport_t_71 <= 32'sd6; splitcomp_multiport_t_71 = splitcomp_multiport_t_71 + 32'sd1) begin
        col20[splitcomp_multiport_t_71] = ratechange_splitcomp_out7_1[splitcomp_multiport_t_71];
      end
    end
    else if (counterSig_1 == 5'b01000) begin
      for(splitcomp_multiport_t_81 = 32'sd0; splitcomp_multiport_t_81 <= 32'sd6; splitcomp_multiport_t_81 = splitcomp_multiport_t_81 + 32'sd1) begin
        col20[splitcomp_multiport_t_81] = ratechange_splitcomp_out8_1[splitcomp_multiport_t_81];
      end
    end
    else if (counterSig_1 == 5'b01001) begin
      for(splitcomp_multiport_t_91 = 32'sd0; splitcomp_multiport_t_91 <= 32'sd6; splitcomp_multiport_t_91 = splitcomp_multiport_t_91 + 32'sd1) begin
        col20[splitcomp_multiport_t_91] = ratechange_splitcomp_out9_1[splitcomp_multiport_t_91];
      end
    end
    else if (counterSig_1 == 5'b01010) begin
      for(splitcomp_multiport_t_101 = 32'sd0; splitcomp_multiport_t_101 <= 32'sd6; splitcomp_multiport_t_101 = splitcomp_multiport_t_101 + 32'sd1) begin
        col20[splitcomp_multiport_t_101] = ratechange_splitcomp_out10_1[splitcomp_multiport_t_101];
      end
    end
    else if (counterSig_1 == 5'b01011) begin
      for(splitcomp_multiport_t_111 = 32'sd0; splitcomp_multiport_t_111 <= 32'sd6; splitcomp_multiport_t_111 = splitcomp_multiport_t_111 + 32'sd1) begin
        col20[splitcomp_multiport_t_111] = ratechange_splitcomp_out11_1[splitcomp_multiport_t_111];
      end
    end
    else if (counterSig_1 == 5'b01100) begin
      for(splitcomp_multiport_t_121 = 32'sd0; splitcomp_multiport_t_121 <= 32'sd6; splitcomp_multiport_t_121 = splitcomp_multiport_t_121 + 32'sd1) begin
        col20[splitcomp_multiport_t_121] = ratechange_splitcomp_out12_1[splitcomp_multiport_t_121];
      end
    end
    else if (counterSig_1 == 5'b01101) begin
      for(splitcomp_multiport_t_131 = 32'sd0; splitcomp_multiport_t_131 <= 32'sd6; splitcomp_multiport_t_131 = splitcomp_multiport_t_131 + 32'sd1) begin
        col20[splitcomp_multiport_t_131] = ratechange_splitcomp_out13_1[splitcomp_multiport_t_131];
      end
    end
    else if (counterSig_1 == 5'b01110) begin
      for(splitcomp_multiport_t_141 = 32'sd0; splitcomp_multiport_t_141 <= 32'sd6; splitcomp_multiport_t_141 = splitcomp_multiport_t_141 + 32'sd1) begin
        col20[splitcomp_multiport_t_141] = ratechange_splitcomp_out14_1[splitcomp_multiport_t_141];
      end
    end
    else if (counterSig_1 == 5'b01111) begin
      for(splitcomp_multiport_t_151 = 32'sd0; splitcomp_multiport_t_151 <= 32'sd6; splitcomp_multiport_t_151 = splitcomp_multiport_t_151 + 32'sd1) begin
        col20[splitcomp_multiport_t_151] = ratechange_splitcomp_out15_1[splitcomp_multiport_t_151];
      end
    end
    else if (counterSig_1 == 5'b10000) begin
      for(splitcomp_multiport_t_161 = 32'sd0; splitcomp_multiport_t_161 <= 32'sd6; splitcomp_multiport_t_161 = splitcomp_multiport_t_161 + 32'sd1) begin
        col20[splitcomp_multiport_t_161] = ratechange_splitcomp_out16_1[splitcomp_multiport_t_161];
      end
    end
    else if (counterSig_1 == 5'b10001) begin
      for(splitcomp_multiport_t_171 = 32'sd0; splitcomp_multiport_t_171 <= 32'sd6; splitcomp_multiport_t_171 = splitcomp_multiport_t_171 + 32'sd1) begin
        col20[splitcomp_multiport_t_171] = ratechange_splitcomp_out17_1[splitcomp_multiport_t_171];
      end
    end
    else if (counterSig_1 == 5'b10010) begin
      for(splitcomp_multiport_t_191 = 32'sd0; splitcomp_multiport_t_191 <= 32'sd6; splitcomp_multiport_t_191 = splitcomp_multiport_t_191 + 32'sd1) begin
        col20[splitcomp_multiport_t_191] = ratechange_splitcomp_out18_1[splitcomp_multiport_t_191];
      end
    end
    else begin
      for(splitcomp_multiport_t_181 = 32'sd0; splitcomp_multiport_t_181 <= 32'sd6; splitcomp_multiport_t_181 = splitcomp_multiport_t_181 + 32'sd1) begin
        col20[splitcomp_multiport_t_181] = ratechange_splitcomp_out19_1[splitcomp_multiport_t_181];
      end
    end
  end

  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  // <S179>/Fixed-Point State-Space
  dot_product_7_block u_dot_product_7 (.clk(clk),
                                       .reset(reset),
                                       .enb(enb),
                                       .enb_1_1_1(enb_1_1_1),
                                       .in1_0(row20[0]),  // sfix25_En19
                                       .in1_1(row20[1]),  // sfix25_En19
                                       .in1_2(row20[2]),  // sfix25_En19
                                       .in1_3(row20[3]),  // sfix25_En19
                                       .in1_4(row20[4]),  // sfix25_En19
                                       .in1_5(row20[5]),  // sfix25_En19
                                       .in1_6(row20[6]),  // sfix25_En19
                                       .in2_0(col20[0]),  // sfix25_En13
                                       .in2_1(col20[1]),  // sfix25_En13
                                       .in2_2(col20[2]),  // sfix25_En13
                                       .in2_3(col20[3]),  // sfix25_En13
                                       .in2_4(col20[4]),  // sfix25_En13
                                       .in2_5(col20[5]),  // sfix25_En13
                                       .in2_6(col20[6]),  // sfix25_En13
                                       .out1(dot_product20)  // sfix50_En32
                                       );

  always @(posedge clk)
    begin : rd_6_process
      if (reset == 1'b1) begin
        dot_product20_1 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product20_1 <= dot_product20;
        end
      end
    end

  always @(posedge clk)
    begin : dot_product1_state_process
      if (reset == 1'b1) begin
        dot_product1_held <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product1_held <= dot_product1;
        end
      end
    end

  assign dot_product1 = (HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_26_0_1 == 1'b0 ? dot_product1_held :
              dot_product20_1);

  // <S179>/Fixed-Point State-Space
  assign out_DTC1 = dot_product1[43:19] + $signed({1'b0, dot_product1[18]});

  // <S179>/Fixed-Point State-Space
  assign matrixDOutSignal_0 = out_DTC1;

  assign enb_counter_ge_7_1 = enb_counter >= 6'b000111;

  always @(posedge clk)
    begin : rd_3_process
      if (reset == 1'b1) begin
        enb_counter_ge_7_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_ge_7_2 <= enb_counter_ge_7_1;
        end
      end
    end

  assign enb_counter_le_25_1 = enb_counter <= 6'b011001;

  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        enb_counter_le_25_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          enb_counter_le_25_2 <= enb_counter_le_25_1;
        end
      end
    end

  assign HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_7_18 = enb_counter_ge_7_2 & enb_counter_le_25_2;

  always @(posedge clk)
    begin : rd_5_process
      if (reset == 1'b1) begin
        rd_5_reg <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          rd_5_reg[0] <= HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_7_18;
          rd_5_reg[1] <= rd_5_reg[0];
        end
      end
    end

  assign HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_7_18_1 = rd_5_reg[1];

  assign enb_gated_1 = HDL_pfc_gold_fi_og_simscape_system_HDL_Subsystem_Fixed_Point_State_Space_hNNewMatrixD_shared_enb_phase_7_18_1 && enb;

  always @(posedge clk)
    begin : tappedDelay_process
      if (reset == 1'b1) begin
        for(tappedDelay_t_1_0 = 32'sd0; tappedDelay_t_1_0 <= 32'sd18; tappedDelay_t_1_0 = tappedDelay_t_1_0 + 32'sd1) begin
          tappedDelay_reg[tappedDelay_t_1_0] <= 50'sh0000000000000;
        end
      end
      else begin
        if (enb_gated_1) begin
          for(tappedDelay_t_0_1 = 32'sd0; tappedDelay_t_0_1 <= 32'sd18; tappedDelay_t_0_1 = tappedDelay_t_0_1 + 32'sd1) begin
            tappedDelay_reg[tappedDelay_t_0_1] <= tappedDelay_reg_next[tappedDelay_t_0_1];
          end
        end
      end
    end

  always @* begin

    for(tappedDelay_t_0_0 = 32'sd0; tappedDelay_t_0_0 <= 32'sd18; tappedDelay_t_0_0 = tappedDelay_t_0_0 + 32'sd1) begin
      c0_serialOut_0[tappedDelay_t_0_0] = tappedDelay_reg[tappedDelay_t_0_0];
    end
    for(tappedDelay_t_1 = 32'sd0; tappedDelay_t_1 <= 32'sd17; tappedDelay_t_1 = tappedDelay_t_1 + 32'sd1) begin
      tappedDelay_reg_next[tappedDelay_t_1] = tappedDelay_reg[32'sd1 + tappedDelay_t_1];
    end

    tappedDelay_reg_next[18] = dot_product20;
  end

  assign c0_serialOut_0_18 = c0_serialOut_0[18];

  always @(posedge clk)
    begin : rd_0_1_process
      if (reset == 1'b1) begin
        dot_product2 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product2 <= c0_serialOut_0_18;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC2 = dot_product2[43:19] + $signed({1'b0, dot_product2[18]});

  assign matrixDOutSignal_1 = out_DTC2;

  assign c0_serialOut_0_17 = c0_serialOut_0[17];

  always @(posedge clk)
    begin : rd_1_1_process
      if (reset == 1'b1) begin
        dot_product3 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product3 <= c0_serialOut_0_17;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC3 = dot_product3[43:19] + $signed({1'b0, dot_product3[18]});

  assign matrixDOutSignal_2 = out_DTC3;

  assign c0_serialOut_0_16 = c0_serialOut_0[16];

  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        dot_product4 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product4 <= c0_serialOut_0_16;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC4 = dot_product4[43:19] + $signed({1'b0, dot_product4[18]});

  assign matrixDOutSignal_3 = out_DTC4;

  assign c0_serialOut_0_15 = c0_serialOut_0[15];

  always @(posedge clk)
    begin : rd_3_1_process
      if (reset == 1'b1) begin
        dot_product5 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product5 <= c0_serialOut_0_15;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC5 = dot_product5[43:19] + $signed({1'b0, dot_product5[18]});

  assign matrixDOutSignal_4 = out_DTC5;

  assign c0_serialOut_0_14 = c0_serialOut_0[14];

  always @(posedge clk)
    begin : rd_4_1_process
      if (reset == 1'b1) begin
        dot_product6 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product6 <= c0_serialOut_0_14;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC6 = dot_product6[43:19] + $signed({1'b0, dot_product6[18]});

  assign matrixDOutSignal_5 = out_DTC6;

  assign c0_serialOut_0_13 = c0_serialOut_0[13];

  always @(posedge clk)
    begin : rd_5_1_process
      if (reset == 1'b1) begin
        dot_product7 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product7 <= c0_serialOut_0_13;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC7 = dot_product7[43:19] + $signed({1'b0, dot_product7[18]});

  assign matrixDOutSignal_6 = out_DTC7;

  assign c0_serialOut_0_12 = c0_serialOut_0[12];

  always @(posedge clk)
    begin : rd_6_1_process
      if (reset == 1'b1) begin
        dot_product8 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product8 <= c0_serialOut_0_12;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC8 = dot_product8[43:19] + $signed({1'b0, dot_product8[18]});

  assign matrixDOutSignal_7 = out_DTC8;

  assign c0_serialOut_0_11 = c0_serialOut_0[11];

  always @(posedge clk)
    begin : rd_7_1_process
      if (reset == 1'b1) begin
        dot_product9 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product9 <= c0_serialOut_0_11;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC9 = dot_product9[43:19] + $signed({1'b0, dot_product9[18]});

  assign matrixDOutSignal_8 = out_DTC9;

  assign c0_serialOut_0_10 = c0_serialOut_0[10];

  always @(posedge clk)
    begin : rd_8_process
      if (reset == 1'b1) begin
        dot_product10 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product10 <= c0_serialOut_0_10;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC10 = dot_product10[43:19] + $signed({1'b0, dot_product10[18]});

  assign matrixDOutSignal_9 = out_DTC10;

  assign c0_serialOut_0_9 = c0_serialOut_0[9];

  always @(posedge clk)
    begin : rd_9_process
      if (reset == 1'b1) begin
        dot_product11 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product11 <= c0_serialOut_0_9;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC11 = dot_product11[43:19] + $signed({1'b0, dot_product11[18]});

  assign matrixDOutSignal_10 = out_DTC11;

  assign c0_serialOut_0_8 = c0_serialOut_0[8];

  always @(posedge clk)
    begin : rd_10_process
      if (reset == 1'b1) begin
        dot_product12 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product12 <= c0_serialOut_0_8;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC12 = dot_product12[43:19] + $signed({1'b0, dot_product12[18]});

  assign matrixDOutSignal_11 = out_DTC12;

  assign c0_serialOut_0_7 = c0_serialOut_0[7];

  always @(posedge clk)
    begin : rd_11_process
      if (reset == 1'b1) begin
        dot_product13 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product13 <= c0_serialOut_0_7;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC13 = dot_product13[43:19] + $signed({1'b0, dot_product13[18]});

  assign matrixDOutSignal_12 = out_DTC13;

  assign c0_serialOut_0_6 = c0_serialOut_0[6];

  always @(posedge clk)
    begin : rd_12_process
      if (reset == 1'b1) begin
        dot_product14 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product14 <= c0_serialOut_0_6;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC14 = dot_product14[43:19] + $signed({1'b0, dot_product14[18]});

  assign matrixDOutSignal_13 = out_DTC14;

  assign c0_serialOut_0_5 = c0_serialOut_0[5];

  always @(posedge clk)
    begin : rd_13_process
      if (reset == 1'b1) begin
        dot_product15 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product15 <= c0_serialOut_0_5;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC15 = dot_product15[43:19] + $signed({1'b0, dot_product15[18]});

  assign matrixDOutSignal_14 = out_DTC15;

  assign c0_serialOut_0_4 = c0_serialOut_0[4];

  always @(posedge clk)
    begin : rd_14_process
      if (reset == 1'b1) begin
        dot_product16 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product16 <= c0_serialOut_0_4;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC16 = dot_product16[43:19] + $signed({1'b0, dot_product16[18]});

  assign matrixDOutSignal_15 = out_DTC16;

  assign c0_serialOut_0_3 = c0_serialOut_0[3];

  always @(posedge clk)
    begin : rd_15_process
      if (reset == 1'b1) begin
        dot_product17 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product17 <= c0_serialOut_0_3;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC17 = dot_product17[43:19] + $signed({1'b0, dot_product17[18]});

  assign matrixDOutSignal_16 = out_DTC17;

  assign c0_serialOut_0_2 = c0_serialOut_0[2];

  always @(posedge clk)
    begin : rd_16_process
      if (reset == 1'b1) begin
        dot_product18 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product18 <= c0_serialOut_0_2;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC18 = dot_product18[43:19] + $signed({1'b0, dot_product18[18]});

  assign matrixDOutSignal_17 = out_DTC18;

  assign c0_serialOut_0_1 = c0_serialOut_0[1];

  always @(posedge clk)
    begin : rd_17_process
      if (reset == 1'b1) begin
        dot_product19 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product19 <= c0_serialOut_0_1;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC19 = dot_product19[43:19] + $signed({1'b0, dot_product19[18]});

  assign matrixDOutSignal_18 = out_DTC19;

  assign c0_serialOut_0_0 = c0_serialOut_0[0];

  always @(posedge clk)
    begin : rd_18_process
      if (reset == 1'b1) begin
        dot_product20_2 <= 50'sh0000000000000;
      end
      else begin
        if (enb) begin
          dot_product20_2 <= c0_serialOut_0_0;
        end
      end
    end

  // <S179>/Fixed-Point State-Space
  assign out_DTC20 = dot_product20_2[43:19] + $signed({1'b0, dot_product20_2[18]});

  assign matrixDOutSignal_19 = out_DTC20;

  // <S179>/Fixed-Point State-Space

endmodule  // hNNewMatrixD

