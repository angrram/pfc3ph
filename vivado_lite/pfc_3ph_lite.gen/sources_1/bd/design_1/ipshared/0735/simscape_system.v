// -------------------------------------------------------------
// 
// File Name: hdl_prj2\hdlsrc\HDL_pfc_gold_fi_og\simscape_system.v
// Created: 2025-05-03 19:08:43
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1.04657e-08
// Target subsystem base rate: 1.04657e-08
// Explicit user oversample request: 49x
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1.04657e-08
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// O_Ia                          ce_out        1.04657e-08
// O_Ib                          ce_out        1.04657e-08
// O_Ic                          ce_out        1.04657e-08
// O_Vc                          ce_out        1.04657e-08
// O_Vb                          ce_out        1.04657e-08
// O_Va                          ce_out        1.04657e-08
// O_Vout                        ce_out        1.04657e-08
// O_I_load                      ce_out        1.04657e-08
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: simscape_system
// Source Path: HDL_pfc_gold_fi_og/simscape_system
// Hierarchy Level: 0
// Model version: 1.231
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module simscape_system
          (clk,
           reset,
           clk_enable,
           UP_L1,
           DW_L1,
           UP_L2,
           DW_L2,
           UP_L3,
           DW_L3,
           I_load_in,
           va_i,
           vb_i,
           vc_i,
           ce_out,
           O_Ia,
           O_Ib,
           O_Ic,
           O_Vc,
           O_Vb,
           O_Va,
           O_Vout,
           O_I_load);


  input   clk;
  input   reset;
  input   clk_enable;
  input   UP_L1;
  input   DW_L1;
  input   UP_L2;
  input   DW_L2;
  input   UP_L3;
  input   DW_L3;
  input   signed [17:0] I_load_in;  // sfix18_En8
  input   signed [17:0] va_i;  // sfix18_En8
  input   signed [17:0] vb_i;  // sfix18_En8
  input   signed [17:0] vc_i;  // sfix18_En8
  output  ce_out;
  output  [15:0] O_Ia;  // uint16
  output  [15:0] O_Ib;  // uint16
  output  [15:0] O_Ic;  // uint16
  output  [15:0] O_Vc;  // uint16
  output  [15:0] O_Vb;  // uint16
  output  [15:0] O_Va;  // uint16
  output  [15:0] O_Vout;  // uint16
  output  [15:0] O_I_load;  // uint16


  wire enb_1_49_1;
  wire enb;
  wire enb_1_49_0;
  wire enb_1_1_1;
  wire signed [17:0] I_load_in_1;  // sfix18_En8
  wire signed [17:0] I_load_in_2;  // sfix18_En8
  reg signed [17:0] I_load_in_3;  // sfix18_En8
  wire UP_L1_1;
  reg  UP_L1_2;
  wire DW_L1_1;
  reg  DW_L1_2;
  wire DW_L2_1;
  reg  DW_L2_2;
  wire DW_L3_1;
  reg  DW_L3_2;
  wire UP_L3_1;
  reg  UP_L3_2;
  wire UP_L2_1;
  reg  UP_L2_2;
  reg [5:0] s;  // ufix6
  wire signed [17:0] va;  // sfix18_En8
  wire signed [17:0] va_1;  // sfix18_En8
  reg signed [17:0] va_2;  // sfix18_En8
  wire signed [17:0] vb;  // sfix18_En8
  wire signed [17:0] vb_1;  // sfix18_En8
  reg signed [17:0] vb_2;  // sfix18_En8
  wire signed [17:0] vc;  // sfix18_En8
  wire signed [17:0] vc_1;  // sfix18_En8
  reg signed [17:0] vc_2;  // sfix18_En8
  wire signed [17:0] is_out_MOSFET;  // sfix18_En6
  wire signed [17:0] is_out_MOSFET1;  // sfix18_En6
  wire signed [17:0] is_out_MOSFET2;  // sfix18_En6
  wire signed [17:0] is_out_MOSFET3;  // sfix18_En6
  wire signed [17:0] is_out_MOSFET5;  // sfix18_En6
  wire signed [17:0] is_out_MOSFET4;  // sfix18_En6
  wire signed [17:0] vs_out_MOSFET;  // sfix18_En6
  wire signed [17:0] vs_out_MOSFET1;  // sfix18_En6
  wire signed [17:0] vs_out_MOSFET2;  // sfix18_En6
  wire signed [17:0] vs_out_MOSFET3;  // sfix18_En6
  wire signed [17:0] vs_out_MOSFET5;  // sfix18_En6
  wire signed [17:0] vs_out_MOSFET4;  // sfix18_En6
  wire signed [17:0] ic_in_MOSFET_0;  // sfix18_En8
  wire signed [17:0] ic_in_MOSFET_1;  // sfix18_En8
  wire signed [17:0] ic_in_MOSFET_2;  // sfix18_En8
  wire signed [17:0] ic_in_MOSFET_3;  // sfix18_En8
  wire signed [17:0] ic_in_MOSFET_4;  // sfix18_En8
  wire signed [17:0] ic_in_MOSFET_5;  // sfix18_En8
  wire signed [17:0] I_load;  // sfix18_En6
  wire signed [17:0] Vout;  // sfix18_En6
  wire signed [17:0] Ib;  // sfix18_En6
  wire signed [17:0] Ic;  // sfix18_En6
  wire signed [17:0] Ia;  // sfix18_En6
  wire signed [17:0] Vb_3;  // sfix18_En6
  wire signed [17:0] Vc_3;  // sfix18_En6
  wire signed [17:0] Va_3;  // sfix18_En6
  wire [15:0] real2uint8_out1;  // uint16
  wire [15:0] real2uint8_out2;  // uint16
  wire [15:0] real2uint8_out3;  // uint16
  wire [15:0] real2uint8_out4;  // uint16
  wire [15:0] real2uint8_out5;  // uint16
  wire [15:0] real2uint8_out6;  // uint16
  wire [15:0] real2uint8_out7;  // uint16
  wire [15:0] real2uint8_out8;  // uint16


  assign I_load_in_1 = I_load_in;

  assign I_load_in_2 = I_load_in_1;

  simscape_system_tc u_simscape_system_tc (.clk(clk),
                                           .reset(reset),
                                           .clk_enable(clk_enable),
                                           .enb(enb),
                                           .enb_1_1_1(enb_1_1_1),
                                           .enb_1_49_0(enb_1_49_0),
                                           .enb_1_49_1(enb_1_49_1)
                                           );

  // <S2>/Rate Transition1
  always @(posedge clk)
    begin : rd_9_process
      if (reset == 1'b1) begin
        I_load_in_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          I_load_in_3 <= I_load_in_2;
        end
      end
    end

  assign UP_L1_1 = UP_L1;

  // <S2>/Vector Concatenate2
  // <S2>/Rate Transition13
  always @(posedge clk)
    begin : rd_0_process
      if (reset == 1'b1) begin
        UP_L1_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          UP_L1_2 <= UP_L1_1;
        end
      end
    end

  assign DW_L1_1 = DW_L1;

  always @(posedge clk)
    begin : rd_1_process
      if (reset == 1'b1) begin
        DW_L1_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          DW_L1_2 <= DW_L1_1;
        end
      end
    end

  assign DW_L2_1 = DW_L2;

  always @(posedge clk)
    begin : rd_2_process
      if (reset == 1'b1) begin
        DW_L2_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          DW_L2_2 <= DW_L2_1;
        end
      end
    end

  assign DW_L3_1 = DW_L3;

  always @(posedge clk)
    begin : rd_3_process
      if (reset == 1'b1) begin
        DW_L3_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          DW_L3_2 <= DW_L3_1;
        end
      end
    end

  assign UP_L3_1 = UP_L3;

  always @(posedge clk)
    begin : rd_4_process
      if (reset == 1'b1) begin
        UP_L3_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          UP_L3_2 <= UP_L3_1;
        end
      end
    end

  assign UP_L2_1 = UP_L2;

  always @(posedge clk)
    begin : rd_5_process
      if (reset == 1'b1) begin
        UP_L2_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          UP_L2_2 <= UP_L2_1;
        end
      end
    end

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 48
  always @(posedge clk)
    begin : ctr_0_48_process
      if (reset == 1'b1) begin
        s <= 6'b000000;
      end
      else begin
        if (enb) begin
          if (s >= 6'b110000) begin
            s <= 6'b000000;
          end
          else begin
            s <= s + 6'b000001;
          end
        end
      end
    end

  assign va = va_i;

  assign va_1 = va;

  // <S2>/Rate Transition2
  always @(posedge clk)
    begin : rd_6_process
      if (reset == 1'b1) begin
        va_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          va_2 <= va_1;
        end
      end
    end

  assign vb = vb_i;

  assign vb_1 = vb;

  // <S2>/Rate Transition3
  always @(posedge clk)
    begin : rd_7_process
      if (reset == 1'b1) begin
        vb_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          vb_2 <= vb_1;
        end
      end
    end

  assign vc = vc_i;

  assign vc_1 = vc;

  // <S2>/Rate Transition6
  always @(posedge clk)
    begin : rd_8_process
      if (reset == 1'b1) begin
        vc_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          vc_2 <= vc_1;
        end
      end
    end

  // <S2>/FET_CTRL
  // <S2>/Demux
  // <S2>/Rate Transition14
  FET_CTRL u_FET_CTRL (.clk(clk),
                       .reset(reset),
                       .enb_1_49_1(enb_1_49_1),
                       .enb(enb),
                       .enb_1_1_1(enb_1_1_1),
                       .is_0(is_out_MOSFET),  // sfix18_En6
                       .is_1(is_out_MOSFET1),  // sfix18_En6
                       .is_2(is_out_MOSFET2),  // sfix18_En6
                       .is_3(is_out_MOSFET3),  // sfix18_En6
                       .is_4(is_out_MOSFET5),  // sfix18_En6
                       .is_5(is_out_MOSFET4),  // sfix18_En6
                       .vs_0(vs_out_MOSFET),  // sfix18_En6
                       .vs_1(vs_out_MOSFET1),  // sfix18_En6
                       .vs_2(vs_out_MOSFET2),  // sfix18_En6
                       .vs_3(vs_out_MOSFET3),  // sfix18_En6
                       .vs_4(vs_out_MOSFET5),  // sfix18_En6
                       .vs_5(vs_out_MOSFET4),  // sfix18_En6
                       .G_0(UP_L1_2),  // boolean
                       .G_1(DW_L1_2),  // boolean
                       .G_2(DW_L2_2),  // boolean
                       .G_3(DW_L3_2),  // boolean
                       .G_4(UP_L3_2),  // boolean
                       .G_5(UP_L2_2),  // boolean
                       .sch_ctr_48(s),  // ufix6
                       .ic_0(ic_in_MOSFET_0),  // sfix18_En8
                       .ic_1(ic_in_MOSFET_1),  // sfix18_En8
                       .ic_2(ic_in_MOSFET_2),  // sfix18_En8
                       .ic_3(ic_in_MOSFET_3),  // sfix18_En8
                       .ic_4(ic_in_MOSFET_4),  // sfix18_En8
                       .ic_5(ic_in_MOSFET_5)  // sfix18_En8
                       );

  // <S2>/HDL Subsystem
  // <S2>/Vector Concatenate
  // <S2>/Rate Transition11
  // <S2>/Vector Concatenate1
  // <S2>/Rate Transition12
  HDL_Subsystem u_HDL_Subsystem (.clk(clk),
                                 .reset(reset),
                                 .enb_1_49_1(enb_1_49_1),
                                 .enb(enb),
                                 .enb_1_49_0(enb_1_49_0),
                                 .enb_1_1_1(enb_1_1_1),
                                 .I_load_in(I_load_in_3),  // sfix18_En8
                                 .ic_in_MOSFET(ic_in_MOSFET_0),  // sfix18_En8
                                 .ic_in_MOSFET1(ic_in_MOSFET_1),  // sfix18_En8
                                 .ic_in_MOSFET2(ic_in_MOSFET_2),  // sfix18_En8
                                 .ic_in_MOSFET3(ic_in_MOSFET_3),  // sfix18_En8
                                 .ic_in_MOSFET4(ic_in_MOSFET_5),  // sfix18_En8
                                 .ic_in_MOSFET5(ic_in_MOSFET_4),  // sfix18_En8
                                 .va(va_2),  // sfix18_En8
                                 .vb(vb_2),  // sfix18_En8
                                 .vc(vc_2),  // sfix18_En8
                                 .sch_ctr_48(s),  // ufix6
                                 .I_load(I_load),  // sfix18_En6
                                 .is_out_MOSFET(is_out_MOSFET),  // sfix18_En6
                                 .vs_out_MOSFET(vs_out_MOSFET),  // sfix18_En6
                                 .is_out_MOSFET1(is_out_MOSFET1),  // sfix18_En6
                                 .vs_out_MOSFET1(vs_out_MOSFET1),  // sfix18_En6
                                 .is_out_MOSFET2(is_out_MOSFET2),  // sfix18_En6
                                 .vs_out_MOSFET2(vs_out_MOSFET2),  // sfix18_En6
                                 .is_out_MOSFET3(is_out_MOSFET3),  // sfix18_En6
                                 .vs_out_MOSFET3(vs_out_MOSFET3),  // sfix18_En6
                                 .is_out_MOSFET4(is_out_MOSFET4),  // sfix18_En6
                                 .vs_out_MOSFET4(vs_out_MOSFET4),  // sfix18_En6
                                 .is_out_MOSFET5(is_out_MOSFET5),  // sfix18_En6
                                 .vs_out_MOSFET5(vs_out_MOSFET5),  // sfix18_En6
                                 .Vout(Vout),  // sfix18_En6
                                 .Ib(Ib),  // sfix18_En6
                                 .Ic(Ic),  // sfix18_En6
                                 .Ia(Ia),  // sfix18_En6
                                 .Vb_1(Vb_3),  // sfix18_En6
                                 .Vc_1(Vc_3),  // sfix18_En6
                                 .Va_1(Va_3)  // sfix18_En6
                                 );

  // <S2>/real2uint8
  real2uint8 u_real2uint8 (.clk(clk),
                           .reset(reset),
                           .enb_1_49_1(enb_1_49_1),
                           .enb(enb),
                           .enb_1_49_0(enb_1_49_0),
                           .I_load(I_load),  // sfix18_En6
                           .Vout(Vout),  // sfix18_En6
                           .Ib(Ib),  // sfix18_En6
                           .Ic(Ic),  // sfix18_En6
                           .Ia(Ia),  // sfix18_En6
                           .Vb(Vb_3),  // sfix18_En6
                           .Vc(Vc_3),  // sfix18_En6
                           .Va(Va_3),  // sfix18_En6
                           .O_Ia(real2uint8_out1),  // uint16
                           .O_Ib(real2uint8_out2),  // uint16
                           .O_Ic(real2uint8_out3),  // uint16
                           .O_Vc(real2uint8_out4),  // uint16
                           .O_Vb(real2uint8_out5),  // uint16
                           .O_Va(real2uint8_out6),  // uint16
                           .O_Vout(real2uint8_out7),  // uint16
                           .O_I_load(real2uint8_out8)  // uint16
                           );

  assign O_Ia = real2uint8_out1;

  assign O_Ib = real2uint8_out2;

  assign O_Ic = real2uint8_out3;

  assign O_Vc = real2uint8_out4;

  assign O_Vb = real2uint8_out5;

  assign O_Va = real2uint8_out6;

  assign O_Vout = real2uint8_out7;

  assign O_I_load = real2uint8_out8;

  assign ce_out = enb_1_1_1;

endmodule  // simscape_system

